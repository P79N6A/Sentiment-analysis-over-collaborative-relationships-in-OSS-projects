[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/460091550",
    "html_url": "https://github.com/ipython/ipython/issues/11588#issuecomment-460091550",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11588",
    "id": 460091550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDA5MTU1MA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-03T21:43:59Z",
    "updated_at": "2019-02-03T21:43:59Z",
    "author_association": "MEMBER",
    "body": "Thanks, I think it would make sens to try to fix this behavior and have autoreload not break pickle. I'm unsure how easy it would be. \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/464948874",
    "html_url": "https://github.com/ipython/ipython/issues/11588#issuecomment-464948874",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11588",
    "id": 464948874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDk0ODg3NA==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-19T02:01:34Z",
    "updated_at": "2019-02-19T02:01:34Z",
    "author_association": "NONE",
    "body": "So it looks like autoreload doesn't quite update the existing objects to the reloaded classes, here is for example how one could hack it into working:\r\n\r\n```\r\n# this is how pickle gets the current class to compare it later with the class of the object to be pickled\r\nimport sys\r\ndef pickle_get_current_class(obj):\r\n    name = obj.__class__.__name__\r\n    module_name = getattr(obj, '__module__', None)\r\n    obj2 = sys.modules[module_name]\r\n    for subpath in name.split('.'): obj2 = getattr(obj2, subpath)\r\n    return obj2\r\n```\r\n\r\nSo if we change cell3 in the code to reproduce this problem to be:\r\n\r\n```\r\n# cell3\r\n# not it works\r\ntest.__class__ = pickle_get_current_class(test)\r\np = pickle.dumps(test)\r\n```\r\n\r\nSo, this is how auto-reload could fix this issue.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/464949800",
    "html_url": "https://github.com/ipython/ipython/issues/11588#issuecomment-464949800",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11588",
    "id": 464949800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDk0OTgwMA==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-19T02:06:06Z",
    "updated_at": "2019-03-19T20:04:27Z",
    "author_association": "NONE",
    "body": "Actually, it's not just pickle, autoreload basically doesn't reload the object's class at all, here is a demo in 3 cells:\r\n\r\n```python\r\n#cell1\r\n%reload_ext autoreload\r\n%autoreload 2\r\n\r\nfile = \"mytestclass.py\"\r\n\r\ntext = \"\"\"\r\nclass Test(): \r\n    def print(self): print(\"Old\")\r\n\"\"\"\r\nwith open(\"mytestclass.py\",\"w\") as f: f.write(text)\r\n\r\nfrom mytestclass import *\r\ntest = Test()\r\ntest.print()\r\n```\r\n\r\n```python\r\n#cell2\r\ntext = \"\"\"\r\nclass Test(): \r\n    def print(self): print(\"New\")\r\n\"\"\"\r\nwith open(\"mytestclass.py\",\"w\") as f: f.write(text)\r\n```\r\n```python\r\n#cell3\r\ntest.print()\r\n```\r\n\r\nBoth times it prints \"Old\". It should print \"New\" the second time.\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/464952676",
    "html_url": "https://github.com/ipython/ipython/issues/11588#issuecomment-464952676",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11588",
    "id": 464952676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDk1MjY3Ng==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-19T02:20:33Z",
    "updated_at": "2019-02-19T02:20:33Z",
    "author_association": "MEMBER",
    "body": "Yes, I do not believe autoreload update the current class of existing objects. I'm sure it is possible in Python, but I don't think we even try to do it. We could look up the MRO and modify it, but that might mean messing around with Ctypes. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/464954221",
    "html_url": "https://github.com/ipython/ipython/issues/11588#issuecomment-464954221",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11588",
    "id": 464954221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDk1NDIyMQ==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-19T02:28:24Z",
    "updated_at": "2019-02-19T02:29:41Z",
    "author_association": "NONE",
    "body": "Curiously, the [documentation (caveats)](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html) says it tries to do so:\r\n\r\n> %autoreload tries to work around common pitfalls by replacing function code objects and parts of classes previously in the module with new versions. This makes the following things to work:\r\n> \r\n>  * Functions and classes imported via ‘from xxx import foo’ are upgraded to new versions when ‘xxx’ is reloaded.\r\n>  * Methods and properties of classes are upgraded on reload, so that calling ‘c.foo()’ on an object ‘c’ created before the reload causes the new code for ‘foo’ to be executed.\r\n\r\nPerhaps it used to do so and then this functionality was lost? Clearly with it failing on a such a basic test that I used in the demo, these docs are clearly wrong right now.\r\n\r\nIt does (conveniently?) say it *tries* ;)"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/464970469",
    "html_url": "https://github.com/ipython/ipython/issues/11588#issuecomment-464970469",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11588",
    "id": 464970469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDk3MDQ2OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-19T03:49:35Z",
    "updated_at": "2019-02-19T03:49:35Z",
    "author_association": "MEMBER",
    "body": "Hum, so now I'm unsure. I rarely use it. But if it was doing it then: \r\n1) there should be a test for it\r\n2) it's likely easier than I though to fix it :-) "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/470088419",
    "html_url": "https://github.com/ipython/ipython/issues/11588#issuecomment-470088419",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11588",
    "id": 470088419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDA4ODQxOQ==",
    "user": {
      "login": "daharn",
      "id": 44439108,
      "node_id": "MDQ6VXNlcjQ0NDM5MTA4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/44439108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daharn",
      "html_url": "https://github.com/daharn",
      "followers_url": "https://api.github.com/users/daharn/followers",
      "following_url": "https://api.github.com/users/daharn/following{/other_user}",
      "gists_url": "https://api.github.com/users/daharn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daharn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daharn/subscriptions",
      "organizations_url": "https://api.github.com/users/daharn/orgs",
      "repos_url": "https://api.github.com/users/daharn/repos",
      "events_url": "https://api.github.com/users/daharn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daharn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T12:25:04Z",
    "updated_at": "2019-03-06T12:25:04Z",
    "author_association": "NONE",
    "body": "I have looked into this a little. From what I see, only classes and functions within a reloaded module are updated, but instances of these classes are not touched. \r\n\r\nUpdating these would be relatively straight forward setting\r\n`instance.__class__ = new_class`\r\nwith `new_class` being the updated class reference.\r\n\r\nFinding these instances is more complicated. The only way I can think of right now is passing `globals()` to the update function and iterate through all objects in the workspace (and recursively through all nested objects like lists, dicts etc.), checking whether\r\n`isinstance(obj, old_class)`\r\nand then doing the above update. \r\n\r\nAlthough I believe this would be the most logical behavior for `%autoreload`, I am not sure of the performance costs.\r\n\r\nAny other ideas?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/470198018",
    "html_url": "https://github.com/ipython/ipython/issues/11588#issuecomment-470198018",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11588",
    "id": 470198018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDE5ODAxOA==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T17:24:47Z",
    "updated_at": "2019-03-06T17:24:47Z",
    "author_association": "NONE",
    "body": "Unless you do get other ideas, @daharn - I'd say let's start with this method and if someone later comes up with a more efficient way, then it can be improved. But slower is better than broken, IMHO."
  }
]
