[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2411399",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2411399",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2411399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTEzOTk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-14T21:03:07Z",
    "updated_at": "2011-10-14T21:03:07Z",
    "author_association": "MEMBER",
    "body": "While looking at the same code, I saw the culprit for #690 as well, so I fixed that, too.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2414416",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2414416",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2414416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTQ0MTY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T07:10:06Z",
    "updated_at": "2011-10-15T07:10:06Z",
    "author_association": "MEMBER",
    "body": "Code looks good, but this simple snippet\n\n<pre>\nfrom IPython.core.debugger import Tracer\nTracer()\n</pre>\n\n\ncurrently exits silently.  I've never actually used `Tracer()` myself, but I'd expect it to activate the debugger in tracing mode, yet it doesn't.  Based on the discussion of #692, does this really close the ticket?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2414544",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2414544",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2414544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTQ1NDQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T08:11:26Z",
    "updated_at": "2011-10-15T08:11:26Z",
    "author_association": "MEMBER",
    "body": "Tracer() is a callable object that can be invoked to set_trace.\n\nI did find a typo to fix, and added return-type validation, which I just pushed.\n\nThis is how Tracer appears to be used, based on the source:\n\n``` python\nfrom IPython.core.debugger import Tracer\ntracer = Tracer()\n\ntry:\n    1/0\nexcept:\n    tracer()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2414616",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2414616",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2414616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTQ2MTY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T08:34:17Z",
    "updated_at": "2011-10-15T08:34:17Z",
    "author_association": "MEMBER",
    "body": "Question, shouln't we be trapping the quit exception?  Trying out the example you show, I'm getting this when I quit:\n\n<pre>\ndreamweaver[~]> python mini.py \n--Return--\nNone\n> /home/fperez/mini.py(7)<module>()\n      6 except:\n----> 7     tracer()\n      8 \n\nipdb> q\nTraceback (most recent call last):\n  File \"mini.py\", line 7, in <module>\n    tracer()\n  File \"/usr/lib/python2.6/bdb.py\", line 50, in trace_dispatch\n    return self.dispatch_return(frame, arg)\n  File \"/usr/lib/python2.6/bdb.py\", line 84, in dispatch_return\n    if self.quitting: raise BdbQuit\nbdb.BdbQuit\n</pre>\n\n\nI have vague memories of, long ago, having written code in ipdb to handle that case, but maybe it's not in the right place when used in standalone tracing mode...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2414633",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2414633",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2414633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTQ2MzM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T08:40:44Z",
    "updated_at": "2011-10-15T08:41:14Z",
    "author_association": "MEMBER",
    "body": "It does handle BdbQuit correctly from _IPython_.  I don't know why it doesn't in regular Python.  The exception handler is set when outside IPython [here](https://github.com/minrk/ipython/blob/e385f97449dac69baa94057889355308c7aa06a5/IPython/core/debugger.py#L111).\n\nAdding a print statement to the excepthook, it is never called.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2414643",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2414643",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2414643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTQ2NDM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T08:43:57Z",
    "updated_at": "2011-10-15T08:43:57Z",
    "author_association": "MEMBER",
    "body": "Nevermind, I found it - ipapi.get() is not an acceptable way to check if you are in IPython - it will always return an IPython shell.  `get_ipython` is the way to check if you are currently in IPython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2414648",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2414648",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2414648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTQ2NDg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T08:46:23Z",
    "updated_at": "2011-10-15T08:46:23Z",
    "author_association": "MEMBER",
    "body": "Should I also do something about #636, while I'm cleaning up debugger miscellany?\n\npydb checks for '-pydb' in sys.argv, but there is no pydb flag anymore.  Should I add `--pydb` as a flag to Shell Apps?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2414713",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2414713",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2414713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTQ3MTM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T09:12:04Z",
    "updated_at": "2011-10-15T09:12:04Z",
    "author_association": "MEMBER",
    "body": "Looking into pydb, it would appear that the project is entirely deprecated (files removed from pypi, even), in favor of a rewrite called pydbgr, which is not even installable as far as I can tell, and also appears essentially abandoned.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2416325",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2416325",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2416325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTYzMjU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T17:03:05Z",
    "updated_at": "2011-10-15T17:03:05Z",
    "author_association": "MEMBER",
    "body": "I re-enabled the pydb flag, so it should work.  It doesn't set any config, it just allows the flag to pass through, so `debugger.py` can make its check.  Ultimately this should probably be fixed so the check doesn't need to be run at import-time, but for now, at least, we don't have a never-true invalid flag check.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2417806",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2417806",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2417806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTc4MDY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T21:11:35Z",
    "updated_at": "2011-10-15T21:11:35Z",
    "author_association": "MEMBER",
    "body": "This is looking pretty good. Only one note: 09c2492 makes the correct check, but by not instantiating a full ipython, now the ipdb instance comes up without coloring.  It would be nice to restore that, though without waiting to fire up a full blown ipython.  That would mean parsing the config for colors...\n\nIf you think you can take a quick shot at reading the color settings correctly to instantiate the tracer with color active and matching the user's choice, that would be great.\n\nBut if it's looking like too much work, don't sweat it.  I don't want to hold this PR forever on that little bit of nicety, so I'm happy to just leave an issue open for color support in the tracer and move on as-is.  Your call.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2417829",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2417829",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2417829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTc4Mjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-15T21:17:53Z",
    "updated_at": "2011-10-15T21:17:53Z",
    "author_association": "MEMBER",
    "body": "I'm out for the afternoon, but I think it could be a simple call to terminal.ipapp.load_default_config(), so I'll check on that when I get home.\n\n-MinRK\n\nOn Oct 15, 2011, at 14:11, Fernando Perezreply@reply.github.com wrote:\n\n> This is looking pretty good. Only one note: 09c2492 makes the correct check, but by not instantiating a full ipython, now the ipdb instance comes up without coloring.  It would be nice to restore that, though without waiting to fire up a full blown ipython.  That would mean parsing the config for colors...\n> \n> If you think you can take a quick shot at reading the color settings correctly to instantiate the tracer with color active and matching the user's choice, that would be great.\n> \n> But if it's looking like too much work, don't sweat it.  I don't want to hold this PR forever on that little bit of nicety, so I'm happy to just leave an issue open for color support in the tracer and move on as-is.  Your call.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/876#issuecomment-2417806\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2418557",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2418557",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2418557,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTg1NTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-16T01:33:14Z",
    "updated_at": "2011-10-16T01:33:14Z",
    "author_association": "MEMBER",
    "body": "It's not _quite_ as simple as I thought.\n\nThere are two defaults:\n- `load_default_config()` will load your default profile\n- `InteractiveShell.colors.get_default_value()` will get the default value from the class, sans config.\n\nIt's easy to do the latter, but it turns out the former is less easy (or at least less clean), due to Class heirarchy, as we really use TerminalInteractiveShell, a subclass of InteractiveShell, both having a colors argument (again, colors must eventually be _removed_ from the InteractiveShell object, as they are a purely frontend notion, but that's not relevant here).\n\nSo, to match the default resolution of the TerminalInteractiveShell's colors with default config would be:\n\n```\n            cfg = load_default_config()\n            try:\n                def_colors = cfg.TerminalInteractiveShell.colors\n            except AttributeError:\n                try:\n                    def_colors = cfg.InteractiveShell.colors\n                except AttributeError:\n                    def_colors = InteractiveShell.colors.get_default_value()\n```\n\nAnd any changes to inheritance could muck this up.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2419795",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2419795",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2419795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTk3OTU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-16T07:46:09Z",
    "updated_at": "2011-10-16T07:46:09Z",
    "author_association": "MEMBER",
    "body": "In the debugger code, the default colors are hardcoded to NoColor (Tracer has a `colors` parameter, while Pdb has `color_scheme`), is it possible that's deliberate and/or desirable? I can easily change them to use InteractiveShell's default.  I think using config files should be put off until the debugger code is all updated to be config aware.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2422465",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2422465",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2422465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjI0NjU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-16T19:15:41Z",
    "updated_at": "2011-10-16T19:15:41Z",
    "author_association": "MEMBER",
    "body": "I guess it was a matter of being over-conservative in the interest of safety: absent a way to detect the actual user's config choices, going with no colors at least will work OK in all terminals, where as the wrong choice of colors for certain backgrounds produces horrible usability.\n\nSo my take would be: if it's not really practical right now to get the standalone debugger/tracer to actually pick up the user's config choices, let's default to nocolor.  As long as users can insantiate the tracer themselves with color info, that should suffice for more advanced uses.  But I think we should maintain the design principle of plain-but-robust beats pretty-but-brittle.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2422509",
    "html_url": "https://github.com/ipython/ipython/pull/876#issuecomment-2422509",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/876",
    "id": 2422509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjI1MDk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-16T19:24:30Z",
    "updated_at": "2011-10-16T19:24:30Z",
    "author_association": "MEMBER",
    "body": "Okay, then that's how it is now, without changes.\n"
  }
]
