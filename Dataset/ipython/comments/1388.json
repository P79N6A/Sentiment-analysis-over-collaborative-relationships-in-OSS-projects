[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3878300",
    "html_url": "https://github.com/ipython/ipython/pull/1388#issuecomment-3878300",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1388",
    "id": 3878300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzgzMDA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-08T23:01:07Z",
    "updated_at": "2012-02-08T23:01:07Z",
    "author_association": "MEMBER",
    "body": "Seems sensible to me, I suppose.  I have always leaned towards instructing people to just use virtualenv correctly, in which event this would never come up, but that seems to be a pretty rare occurrence.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3895258",
    "html_url": "https://github.com/ipython/ipython/pull/1388#issuecomment-3895258",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1388",
    "id": 3895258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTUyNTg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-09T20:43:28Z",
    "updated_at": "2012-02-09T20:43:28Z",
    "author_association": "MEMBER",
    "body": "Thanks, Min.\n\n@fperez , I'd like your thoughts on this one before I proceed with it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3896030",
    "html_url": "https://github.com/ipython/ipython/pull/1388#issuecomment-3896030",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1388",
    "id": 3896030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTYwMzA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-09T21:30:24Z",
    "updated_at": "2012-02-09T21:30:24Z",
    "author_association": "MEMBER",
    "body": "Mmh, what I don't really understand is, if these people are creating a virtualenv to install their other packages, what exactly prevents them from also installing ipython in there?  I mean, either they want a virtualenv or they don't, and if they want one, they must populate it with the packages they want appearing in the venv, ipython being one of them...\n\nI just fail to understand how ipython turns out to be  in any way a special case regarding venv setup: we're not donig any special hackish sys.path manipulations ourselves, so we should be absolutely no different from any other python package that has an executable entry point, right?  Doesn't sphinx-build have the exact same issues, or  f2py, or the cython compiler call, or anything else that can be called as an executable, and where there's a conflict between the python used by the executable entry point and the library imports used by the virtualenv?\n\nI do realize the need for practicality over purity, but this smacks me of crossing the line from practicality into flat out nasty hacks for the sake of helping people who are unwilling to do something as completely trivial  as typing\n\n```\npython setup.py install\n```\n\nor\n\n```\npython setup.py develop\n```\n\nNeither of those seems so much to ask for, that we need to pollute our own code with an ugly workaround...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3896995",
    "html_url": "https://github.com/ipython/ipython/pull/1388#issuecomment-3896995",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1388",
    "id": 3896995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTY5OTU=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-09T22:21:38Z",
    "updated_at": "2012-02-09T22:21:38Z",
    "author_association": "MEMBER",
    "body": "All those tools have the same issue, but they're all things that you make a definite plan to use in a particular project, so it makes sense to install them (they might be in a requirements file). IPython is, for many users, a much more ad-hoc tool - you might drop into it to check a method signature, as a better alternative to the plain Python shell. And if you've got 60 virtualenvs for different projects, you don't want to have to install IPython in each one to get that convenience. The fact that multiple users have come up with workarounds for this also argues for its importance. \n\nPut another way: for many users - perhaps most non-scientific users - IPython is a handy convenience. Anything that makes it less convenient reduces its utility for them exponentially.\n\nI don't think the workaround is that ugly: it's one extra method, which will be a no-op if you're running IPython the preferred way.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3897393",
    "html_url": "https://github.com/ipython/ipython/pull/1388#issuecomment-3897393",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1388",
    "id": 3897393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTczOTM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-09T22:43:22Z",
    "updated_at": "2012-02-09T22:43:22Z",
    "author_association": "MEMBER",
    "body": "OK, I still  don't like it, but I see the value in your argument.  It seems @minrk was on a similar boat to me, not thrilled but willing to go along.  Let's merge this for the sake of utility then, with a formal \"not happy about it\" from me.\n\nUltimately, I wish there was a cleaner solution for this overall problem at the python level itself, where its import/execution machinery was _designed_ for clean isolation.  But since that's not happening any time soon, off we go with the hacks.\n"
  }
]
