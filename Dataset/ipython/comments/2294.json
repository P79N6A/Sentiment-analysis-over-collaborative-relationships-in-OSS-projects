[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7679929",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-7679929",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 7679929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzk5Mjk=",
    "user": {
      "login": "travisbot",
      "id": 1516820,
      "node_id": "MDQ6VXNlcjE1MTY4MjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1516820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/travisbot",
      "html_url": "https://github.com/travisbot",
      "followers_url": "https://api.github.com/users/travisbot/followers",
      "following_url": "https://api.github.com/users/travisbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/travisbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/travisbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/travisbot/subscriptions",
      "organizations_url": "https://api.github.com/users/travisbot/orgs",
      "repos_url": "https://api.github.com/users/travisbot/repos",
      "events_url": "https://api.github.com/users/travisbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/travisbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T21:18:25Z",
    "updated_at": "2012-08-12T21:18:25Z",
    "author_association": "NONE",
    "body": "This pull request [passes](http://travis-ci.org/ipython/ipython/builds/2103493) (merged 3e30dfe9 into 31afb62f).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7679978",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-7679978",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 7679978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzk5Nzg=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T21:23:50Z",
    "updated_at": "2012-08-12T21:23:50Z",
    "author_association": "MEMBER",
    "body": "The event loop integration stuff is extremely subtle and brittle.  To make\nany change like this, we will have to test a wide range of applications in\na wide range of configurations.  But, most importantly, IIRC, we agreed on\na model for event loops that _always_ creates the following two things\ntogether:\n- Event loop running.\n- An application object.\n\nIOW, our model is that if one if this is present, the other has to be.\n Based on this, my first reply to this idea is that is break our model of\nevent loop integration.\n\nOn Sun, Aug 12, 2012 at 2:16 PM, Bradley M. Froehle <\nnotifications@github.com> wrote:\n\n> I referenced this branch in #2080https://github.com/ipython/ipython/issues/2080and was letting it sit for a little while, but I have decided to make it a\n> full pull request to get some additional visibility.\n> \n> Essentially our Qt event loop mechanism repeatedly starts and quits a\n> QCoreApplication object. Unfortunately the QCoreApplication::quit slot\n> has a lot of unintended side effects (like emitting an aboutToQuit signal\n> which closes all open file dialogs).\n> \n> For our input hook, we _might_ be able to get by with just using a\n> QEventLoop whose quit slot is much simpler and less destructive.\n> \n> For a little bit of background on why one might want to just use\n> QEventLoop::exec, let's examine what QCoreApplication::exec does:\n> \n> int QCoreApplication::exec(){\n>     if (!QCoreApplicationPrivate::checkInstance(\"exec\"))\n>         return -1;\n> \n> ```\n> // ... [some assertions]\n> \n> threadData->quitNow = false;\n> QEventLoop eventLoop;\n> self->d_func()->in_exec = true;\n> self->d_func()->aboutToQuitEmitted = false;\n> int returnCode = eventLoop.exec();\n> threadData->quitNow = false;\n> if (self) {\n>     self->d_func()->in_exec = false;\n>     if (!self->d_func()->aboutToQuitEmitted)\n>         emit self->aboutToQuit();\n>     self->d_func()->aboutToQuitEmitted = true;\n>     sendPostedEvents(0, QEvent::DeferredDelete);\n> }\n> \n> return returnCode;}\n> ```\n> \n> As far as I can tell, it's a small wrapper around QEventLoop::exec which\n> also:\n> - Sets some variables regarding the current status\n> - Emits an aboutToQuit signal right before the function returns (which\n>   is the root cause of @denisri https://github.com/denisri's problem\n>   in #2080 https://github.com/ipython/ipython/issues/2080).\n> \n> Historically, our Qt event loop is a python implementation of the (win 32)\n> input hook supplied with the PyQt4 source (see qtcore_input_hookinpython-qt4/sip/QtCore/qcoreapplication.sip`),\n> which more or less dates to a\n> \n> ## http://www.riverbankcomputing.com/pipermail/pyqt/2007-July/016512.htmlhttp://mailing%20list%20postfrom July 2007.\n> \n> You can merge this Pull Request by running:\n> \n>   git pull https://github.com/bfroehle/ipython inputhook_qt4_alt\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/ipython/ipython/pull/2294\n> Commit Summary\n> - inputhook_qt4: Use QEventLoop instead of starting up the\n>   QCoreApplica…\n> \n> File Changes\n> - _M_ IPython/lib/inputhookqt4.py (5)\n> \n> Patch Links\n> - https://github.com/ipython/ipython/pull/2294.patch\n> - https://github.com/ipython/ipython/pull/2294.diff\n>   \n>   —\n>   Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2294.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7680214",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-7680214",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 7680214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODAyMTQ=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T21:47:19Z",
    "updated_at": "2012-08-12T21:47:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ellisonbg Yes, it is exceptionally subtle.  You'll notice that a `QCoreApplication` is [still instantiated](https://github.com/bfroehle/ipython/blob/3e30dfe9081fa1911f3aa7756bfb191bf69e5552/IPython/lib/inputhookqt4.py#L55) and [validated](https://github.com/bfroehle/ipython/blob/3e30dfe9081fa1911f3aa7756bfb191bf69e5552/IPython/lib/inputhookqt4.py#L83) -- this is actually a requirement of `QEventLoop::exec`.\n\nThe main issue I see here are:\n1. `aboutToQuit` is never signaled.  This is almost certainly better than signaling it multiple times per second, but maybe this should be sent when we unregister the event loop.\n2. I'm not confident that we ever process `DeferredDelete` events.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8338565",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8338565",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8338565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzg1NjU=",
    "user": {
      "login": "hmeine",
      "id": 462802,
      "node_id": "MDQ6VXNlcjQ2MjgwMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/462802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmeine",
      "html_url": "https://github.com/hmeine",
      "followers_url": "https://api.github.com/users/hmeine/followers",
      "following_url": "https://api.github.com/users/hmeine/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmeine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmeine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmeine/subscriptions",
      "organizations_url": "https://api.github.com/users/hmeine/orgs",
      "repos_url": "https://api.github.com/users/hmeine/repos",
      "events_url": "https://api.github.com/users/hmeine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmeine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T16:31:44Z",
    "updated_at": "2012-09-06T16:31:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have just tested this PR, that is - I tested your bfroehle/inputhook_qt4_alt branch.  I am not 100% sure whether that is the right way to test a PR, whether this always gives the right code, and (in this case) why there is an inputhook_qt4_alt and an inputhook_qt4 branch.  (I also tried with https://github.com/ipython/ipython/pull/2294.patch but that patch looked too small?)\n\nAnyhow, I tested a complex application of mine (which allows to be started from within IPython) with and without %gui qt, and with %pylab, and noticed no problems.  I could also verify that _it does fix a problem_ that I have with modal dialogs started from the menu (only) with %gui qt with ipython master.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8341651",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8341651",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8341651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDE2NTE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T18:07:22Z",
    "updated_at": "2012-09-06T18:07:22Z",
    "author_association": "MEMBER",
    "body": "Thanks a lot @hmeine, that's very useful feedback.  I'd also like to hear from @jdmarch, @epatters and other Enthought folks who are heavy-duty Qt users, whether this improves things or causes any trouble.  Once we're a bit more confident with in-the-field testing of this, it would be great to have it go in.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8344597",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8344597",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8344597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDQ1OTc=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T19:37:02Z",
    "updated_at": "2012-09-06T19:37:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "After looking at the QCoreApplication source code, I agree with @bfroehle that this change seems unlikely to break anything. Even so, I have not tested it and it makes me a bit nervous.\n\nFrom what I undertand, the main (only?) goal of this pull request is to suppress the `aboutToQuit` signal, which closes modal dialogs and has other obnoxious effects. There is a more direct way to accomplish this. After the timer fires, call `app.aboutToQuit.disconnect()` with no arguments to disconnect **all** slots connected to the signal. Then call `app.quit()` as before. (Disclaimer: I have not tested this approach.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8357837",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8357837",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8357837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNTc4Mzc=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-07T07:09:31Z",
    "updated_at": "2012-09-07T07:09:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@epatters: You are correct that the goal is to avoid the `aboutToQuit` signal.  I tried your suggestion, but can't get it working:\n\n```\n  File \"/home/bfroehle/src/ipython/IPython/lib/inputhookqt4.py\", line 92, in inputhook_qt4\n    app.aboutToQuit.disconnect()\nTypeError: disconnect() failed between 'aboutToQuit' and all its connections\nGot exception from inputhook_qt4, unregistering.\n```\n\nI'm not really sure what that means...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8369351",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8369351",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8369351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNjkzNTE=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-07T15:49:21Z",
    "updated_at": "2012-09-07T15:49:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure what that means either. I wouldn't be surprised if its a bug in PyQt or PySide.\n\nGiven that my approach evidently doesn't work, I'm in favor of using a QEventLoop directly, rather than calling QCoreApplication::exec. Other than setting some state variables that don't seem to be used _anywhere_, the only thing QCoreApplication adds is the `aboutToQuit` signal, which is precisely what we don't want.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8369670",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8369670",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8369670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNjk2NzA=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-07T15:58:36Z",
    "updated_at": "2012-09-07T15:58:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, but I do I think it is important to add a detailed comment explaining the motivation for this change. This really is an obscure thing...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8381052",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8381052",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8381052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzODEwNTI=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-07T22:33:51Z",
    "updated_at": "2012-09-07T22:37:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I finally got around to testing this myself. I am now convinced that this PR won't break anything---but equally convinced that it will not fix issues like #2380. I'm not sure why the reporter of that issue cannot reproduce the problem; for me, modal dialogs are _consistently_ broken under the conditions described in #2080, when running under either master or this PR.\n\nModal dialogs are typically opened by a blocking call to `QDialog.exec_`. If this is called directly from the IPython prompt, it blocks as expected. If, however, it is called from a Qt event handler (e.g., when the user clicks on something), it is terminated by the input hook in at most 50 ms. Here is now this happens, as far as I can tell. When `QDialog.exec_` is called, it starts own event loop, but uses the same event dispatcher as our event loop (there is only one of these per thread). So when we terminate our event loop, we also cause the event loop of the dialog to terminate, thereby closing the dialog.\n\nFrom this it is clear that the logic of the present input hook is wrong. When a blocking call is made from a Qt event handler, IPython _must_ respect this. This means that the terminal prompt will hang until the call completes, but that simply cannot be avoided in the single process model.\n\nAfter several false starts, I hit upon what appears to be a very simple solution to this problem. Rather than starting and stopping an event loop every 50 ms, just call `processEvents` with a 50 ms timeout:\n\n```\nwhile not stdin_ready():\n    app.processEvents(QtCore.QEventLoop.AllEvents, 50)\n```\n\nUnder normal circumstances, this seems to work as before, but blocking calls started from event handlers are not interrupted. In particular, issue #2380 is resolved. \n\nI think this approach is promising, but more testing is required.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8382714",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8382714",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8382714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzODI3MTQ=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-08T00:17:59Z",
    "updated_at": "2012-09-08T00:17:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@epatters Funny how this all comes [full circle](http://www.riverbankcomputing.com/pipermail/pyqt/2007-July/016512.html).  The original implementation of the PyQt4 input hook did nothing more than call `QCoreApplication::processEvents()`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8384007",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8384007",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8384007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzODQwMDc=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-08T02:56:12Z",
    "updated_at": "2012-09-08T02:56:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bfroehle: Well, this is a nightmare. For reference, here is the current PyQt4 input hook implementation, which seems to include all the suggestions in the linked email:\n\n```\nstatic int qtcore_input_hook()\n{\n    QCoreApplication *app = QCoreApplication::instance();\n\n    if (app && app->thread() == QThread::currentThread())\n    {\n#if defined(Q_OS_WIN32)\n        QTimer timer;\n        QObject::connect(&timer, SIGNAL(timeout()), app, SLOT(quit()));\n\n        do\n        {\n            timer.start(100);\n            QCoreApplication::exec();\n            timer.stop();\n        }\n        while (!_kbhit());\n\n        QObject::disconnect(&timer, SIGNAL(timeout()), app, SLOT(quit()));\n#else\n        QSocketNotifier notifier(0, QSocketNotifier::Read, 0);\n        QObject::connect(&notifier, SIGNAL(activated(int)), app, SLOT(quit()));\n        QCoreApplication::exec();\n        QObject::disconnect(&notifier, SIGNAL(activated(int)), app, SLOT(quit()));\n#endif\n    }\n\n    return 0;\n}\n```\n\nMore to the point, the linked email indicates that `processEvents` only failed to work in environments without readline. However, if I am understanding the email correctly, our current approach should fail just as badly because it also returns from the input hook very quickly. It seems we will have to investigate this further, particularly on Windows.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8422209",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8422209",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8422209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjIyMDk=",
    "user": {
      "login": "hmeine",
      "id": 462802,
      "node_id": "MDQ6VXNlcjQ2MjgwMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/462802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmeine",
      "html_url": "https://github.com/hmeine",
      "followers_url": "https://api.github.com/users/hmeine/followers",
      "following_url": "https://api.github.com/users/hmeine/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmeine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmeine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmeine/subscriptions",
      "organizations_url": "https://api.github.com/users/hmeine/orgs",
      "repos_url": "https://api.github.com/users/hmeine/repos",
      "events_url": "https://api.github.com/users/hmeine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmeine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-10T12:46:10Z",
    "updated_at": "2012-09-10T12:46:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@epatters wrote:\n\n> [I am] equally convinced that it will not fix issues like #2380. I'm not sure why the reporter of that issue cannot reproduce the problem; for me, modal dialogs are consistently broken under the conditions described in #2080, when running under either master or this PR.\n\nI was quite surprised, because I tested @bfroehle's inputhook_qt4_alt branch, and it made a difference for me.\nSo I just re-tested with _exactly_ the steps you mentioned above (--pylab=qt and the save dialog), and\n- I see the problem in ipython/master, but\n- it works with bfroehle/inputhook_qt4_alt and\n- it works with bfroehle/inputhook_qt4.\n\nI tried it multiple times, and had no problems with bfroehles fix(es).\nNow one last thing I can imagine to make a difference is that I am using KDE, because Qt has this special handling of \"native file dialogs\".  Anyhow, last time I successfully tested with my own pure Qt dialogs (opened from a menu bar), and I think the KDE file dialog is not out-of-process either.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8425731",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8425731",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8425731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjU3MzE=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-10T15:06:34Z",
    "updated_at": "2012-09-10T15:06:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hmeine, you're probably right, then, that the behavior is platform specific. Here is an illuminating comment from the `QFileDialog` implementation on OS X:\n\n```\nvoid QFileDialogPrivate::mac_nativeDialogModalHelp()\n{\n    // Do a queued meta-call to open the native modal dialog so it opens after the new\n    // event loop has started to execute (in QDialog::exec). Using a timer rather than\n    // a queued meta call is intentional to ensure that the call is only delivered when\n    // [NSApp run] runs (timers are handeled special in cocoa). If NSApp is not\n    // running (which is the case if e.g a top-most QEventLoop has been\n    // interrupted, and the second-most event loop has not yet been reactivated (regardless\n    // if [NSApp run] is still on the stack)), showing a native modal dialog will fail.\n    if (nativeDialogInUse){\n        Q_Q(QFileDialog);\n        QTimer::singleShot(1, q, SLOT(_q_macRunNativeAppModalPanel()));\n    }\n}\n```\n\nSo interrupting the top-level event loop is a no-no on OS X. In general, I think we should, if possible, move away from this approach of constantly starting and stopping the event loop.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8537748",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8537748",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8537748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1Mzc3NDg=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-13T18:17:26Z",
    "updated_at": "2012-09-13T18:17:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@epatters It'd be nice if Qt provided some guidance here.\n\nPerhaps we should move back to a `processEvents` approach if readline is present.  IIRC, IPython already performs pretty poorly when readline is not present, so perhaps we could just keep the existing implementation in that situation.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8538731",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8538731",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8538731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1Mzg3MzE=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-13T18:48:24Z",
    "updated_at": "2012-09-13T18:48:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bfroehle, yes, my feeling is that we should move back to `processEvents` if readline is present. Of course, we will have to test this on all three platforms and with a variety of applications.\n\nI couldn't tell you how the present implementation performs when readline is absent. If it's also pretty broken, we should consider just telling people that readline is a dependency for GUI integration. Don't most users have readline anyway, even on Windows?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8686441",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8686441",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8686441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODY0NDE=",
    "user": {
      "login": "hmeine",
      "id": 462802,
      "node_id": "MDQ6VXNlcjQ2MjgwMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/462802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmeine",
      "html_url": "https://github.com/hmeine",
      "followers_url": "https://api.github.com/users/hmeine/followers",
      "following_url": "https://api.github.com/users/hmeine/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmeine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmeine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmeine/subscriptions",
      "organizations_url": "https://api.github.com/users/hmeine/orgs",
      "repos_url": "https://api.github.com/users/hmeine/repos",
      "events_url": "https://api.github.com/users/hmeine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmeine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-19T10:11:46Z",
    "updated_at": "2012-09-19T10:11:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Should this PR be closed then?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8693497",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8693497",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8693497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTM0OTc=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-19T14:52:23Z",
    "updated_at": "2012-09-19T14:52:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hmeine, this PR fixes a problem for you, right? Then my vote would actually be to merge this, since it won't break anything that wasn't already broken.\n\nThere are deeper problems that remain unsolved, but I can't afford to spend any more time on this right now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8694058",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8694058",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8694058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTQwNTg=",
    "user": {
      "login": "hmeine",
      "id": 462802,
      "node_id": "MDQ6VXNlcjQ2MjgwMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/462802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmeine",
      "html_url": "https://github.com/hmeine",
      "followers_url": "https://api.github.com/users/hmeine/followers",
      "following_url": "https://api.github.com/users/hmeine/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmeine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmeine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmeine/subscriptions",
      "organizations_url": "https://api.github.com/users/hmeine/orgs",
      "repos_url": "https://api.github.com/users/hmeine/repos",
      "events_url": "https://api.github.com/users/hmeine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmeine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-19T15:10:37Z",
    "updated_at": "2012-09-19T15:10:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's right.  On Linux, it _does_ improve the situation.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8778317",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8778317",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8778317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzgzMTc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-21T19:43:22Z",
    "updated_at": "2012-09-21T19:43:22Z",
    "author_association": "MEMBER",
    "body": "Just confirming here what I said in #2380: for me, this _does_ fix #2380, which is IMO a major, critical bug as we're breaking the use of the Qt backend for matplotlib, as reported by @mdboom.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8778370",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-8778370",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 8778370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzgzNzA=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-21T19:46:19Z",
    "updated_at": "2012-09-21T19:46:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems to be a fix on Linux. On OS X, modal dialogs are still broken.\n\nBut yes, this should definitely be merged.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9012404",
    "html_url": "https://github.com/ipython/ipython/pull/2294#issuecomment-9012404",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2294",
    "id": 9012404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMTI0MDQ=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-30T10:23:09Z",
    "updated_at": "2012-09-30T10:23:09Z",
    "author_association": "MEMBER",
    "body": "As this seem to improve most cases I vote for merging this in. \nI'll do it in the next 2 days if no one opposes.\n"
  }
]
