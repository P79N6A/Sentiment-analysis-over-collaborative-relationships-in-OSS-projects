[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9936954",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-9936954",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 9936954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5MzY5NTQ=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-31T08:48:13Z",
    "updated_at": "2012-10-31T08:48:23Z",
    "author_association": "MEMBER",
    "body": "Looks fine to me. \nDoes this fall into the 'big JS refactor we shouldn't merge until testing is done' ?\n\n> https://github.com/ipython/jsplugins\n\nDo you wan't all the plugin to be on one repository ? \nI would prefere having `ipython/pytutor-plugin`, `ipython/notebook-slideshow` , `ipython/....` as separate repository.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9960406",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-9960406",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 9960406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5NjA0MDY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-31T20:19:25Z",
    "updated_at": "2012-10-31T20:19:25Z",
    "author_association": "MEMBER",
    "body": "I don't think we should stop Notebook development until testing is done.\n\nOn Wed, Oct 31, 2012 at 1:48 AM, Bussonnier Matthias <\nnotifications@github.com> wrote:\n\n> Looks fine to me.\n> Does this fall into the 'big JS refactor we shouldn't merge until testing\n> is done' ?\n> \n> https://github.com/ipython/jsplugins\n> Do you wan't all the plugin to be on one repository ?\n> I would prefere having ipython/pytutor-plugin, ipython/notebook-slideshow,\n> ipython/.... as separate repository.\n> \n>  —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2518#issuecomment-9936954.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10339196",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-10339196",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 10339196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzM5MTk2",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-13T19:24:28Z",
    "updated_at": "2012-11-13T19:24:28Z",
    "author_association": "MEMBER",
    "body": "It would be great if there were a way for the javascript to send messages back to IPython other than constructing a string and sending it in an execute request call.  For example, it would be great if we could: (1) be able to register handlers on the python side for messages with a specific type (or some other metadata), and (2) send such custom messages from the javascript code.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10339319",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-10339319",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 10339319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzM5MzE5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-13T19:27:15Z",
    "updated_at": "2012-11-13T19:27:15Z",
    "author_association": "MEMBER",
    "body": "Yes, I have been thinking about this exact thing.  I agree that right now\nit is a bit of a pain to write code in strings - especially if you want to\npass JSON data back to the kernel.\n\nOn Tue, Nov 13, 2012 at 11:24 AM, Jason Grout notifications@github.comwrote:\n\n> It would be great if there were a way for the javascript to send messages\n> back to IPython other than constructing a string and sending it in an\n> execute request call. For example, it would be great if we could: (1) be\n> able to register handlers on the python side for messages with a specific\n> type (or some other metadata), and (2) send such custom messages from the\n> javascript code.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2518#issuecomment-10339196.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10339724",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-10339724",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 10339724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzM5NzI0",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-13T19:37:54Z",
    "updated_at": "2012-11-13T19:37:54Z",
    "author_association": "MEMBER",
    "body": "Writing all code and data in strings is exactly what the IPython display messages eliminates (i.e., we have richer communication than just stdout strings).  It makes sense to extend this capability also to messages back to python code.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10376012",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-10376012",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 10376012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzc2MDEy",
    "user": {
      "login": "RishiRamraj",
      "id": 352896,
      "node_id": "MDQ6VXNlcjM1Mjg5Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/352896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RishiRamraj",
      "html_url": "https://github.com/RishiRamraj",
      "followers_url": "https://api.github.com/users/RishiRamraj/followers",
      "following_url": "https://api.github.com/users/RishiRamraj/following{/other_user}",
      "gists_url": "https://api.github.com/users/RishiRamraj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RishiRamraj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RishiRamraj/subscriptions",
      "organizations_url": "https://api.github.com/users/RishiRamraj/orgs",
      "repos_url": "https://api.github.com/users/RishiRamraj/repos",
      "events_url": "https://api.github.com/users/RishiRamraj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RishiRamraj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-14T17:48:07Z",
    "updated_at": "2012-11-14T17:48:07Z",
    "author_association": "NONE",
    "body": "At pycon we wrote a simple plugin. About the only issue we had was that the interpreter tended to eat all of the exceptions that were raised by the serialiser (the code that turned a python object into json). To fix this problem, we wrapped the serialisation code in an exception handler and sent the traceback up to the javascript, which alerted the exception; this feature should probably be built into the framework.\n\nWe actually spent most of our time fighting with javascript. I suspect javascript package management will become an issue as more complex javascript visualisers are written.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10376838",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-10376838",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 10376838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzc2ODM4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-14T18:08:50Z",
    "updated_at": "2012-11-14T18:08:50Z",
    "author_association": "MEMBER",
    "body": "Could you post a link to the exception handling code on this PR, so I can have a look.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10380130",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-10380130",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 10380130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzgwMTMw",
    "user": {
      "login": "RishiRamraj",
      "id": 352896,
      "node_id": "MDQ6VXNlcjM1Mjg5Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/352896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RishiRamraj",
      "html_url": "https://github.com/RishiRamraj",
      "followers_url": "https://api.github.com/users/RishiRamraj/followers",
      "following_url": "https://api.github.com/users/RishiRamraj/following{/other_user}",
      "gists_url": "https://api.github.com/users/RishiRamraj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RishiRamraj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RishiRamraj/subscriptions",
      "organizations_url": "https://api.github.com/users/RishiRamraj/orgs",
      "repos_url": "https://api.github.com/users/RishiRamraj/repos",
      "events_url": "https://api.github.com/users/RishiRamraj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RishiRamraj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-14T19:30:33Z",
    "updated_at": "2012-11-14T19:30:33Z",
    "author_association": "NONE",
    "body": "We took down the handling code in the master branch once we had the serialiser functioning. I've rewritten a simple example on this branch of our project: https://github.com/RishiRamraj/seepymol/tree/feature/exceptions\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10380815",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-10380815",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 10380815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzgwODE1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-14T19:45:37Z",
    "updated_at": "2012-11-14T19:45:37Z",
    "author_association": "MEMBER",
    "body": "I see what you mean. \nIn python a `@jsonhandler` decorator that wrap the function in a try/catch and return the exception as JSON to the notebook. Actually we could say that on the wire, the json your decorated function will always be : \n\n```\n{ data : json retured by your function , \n  error : None, or serialized tracemback,\n  metadata : maybe some metadata,\n}\n```\n\nOn js side we can make sure that only `data` is passed around. \n\nif `error` is not none then IPython notebook itself could show the traceback.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10381573",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-10381573",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 10381573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzgxNTcz",
    "user": {
      "login": "RishiRamraj",
      "id": 352896,
      "node_id": "MDQ6VXNlcjM1Mjg5Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/352896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RishiRamraj",
      "html_url": "https://github.com/RishiRamraj",
      "followers_url": "https://api.github.com/users/RishiRamraj/followers",
      "following_url": "https://api.github.com/users/RishiRamraj/following{/other_user}",
      "gists_url": "https://api.github.com/users/RishiRamraj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RishiRamraj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RishiRamraj/subscriptions",
      "organizations_url": "https://api.github.com/users/RishiRamraj/orgs",
      "repos_url": "https://api.github.com/users/RishiRamraj/repos",
      "events_url": "https://api.github.com/users/RishiRamraj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RishiRamraj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-14T20:02:17Z",
    "updated_at": "2012-11-14T20:02:17Z",
    "author_association": "NONE",
    "body": "Although I haven't given it too much thought, I think the structure could following something along the lines of the parameters defined for the __exit__ function in PEP 343:\n\n```\n{\n    self:\n    type:\n    value:\n    traceback:\n}\n```\n\nI'm not sure if a json handler would ever be interested in the error codes returned by the python serialiser.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11756139",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11756139",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11756139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzU2MTM5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-29T18:30:51Z",
    "updated_at": "2012-12-29T18:30:51Z",
    "author_association": "MEMBER",
    "body": "Here are the main things we need to work our for this PR:\n- Come up with a better way for users to install JS plugins that manually copying things over.\n- Review the format of the JSON objects that come back.  Right now the content is mixed in at the same level as the handler declaration.  Maybe a top level `content` attribute?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11758839",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11758839",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11758839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzU4ODM5",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-29T23:01:17Z",
    "updated_at": "2012-12-29T23:01:53Z",
    "author_association": "MEMBER",
    "body": "After working for a bit on implementing interactive javascript controls, I'd like the ability to register handlers for specific mime types, rather than an all-encompassing json type.  That takes care of the namespace issues as well, since I can just invent my own mime type, like \"application/sage-interact\" or something.  This addresses your second point---the handler is different than the content.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11761243",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11761243",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11761243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzYxMjQz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-30T04:58:14Z",
    "updated_at": "2012-12-30T04:58:14Z",
    "author_association": "MEMBER",
    "body": "Sounds a bit like the wild west.  We would have to modify the entire\ndisplay architecture to allow arbitrary mime types to be displayed.  I\ndon't think we want to go there.  Part of the problem is that we _can't_\nsend arbitrary mime types back as we embed the content in JSON messages.\n We have to add special handling/encoding for sending back non JSON\nfriendly mime type data such as images.  But the more important question is\nwhy can't you just use JSON?  Isn't JSON perfect for this?\n\nOn Sat, Dec 29, 2012 at 3:01 PM, Jason Grout notifications@github.comwrote:\n\n> After working for a bit on implementing interactive javascript controls,\n> I'd like the ability to register handlers for specific mime types, rather\n> than an all-encompassing json type. That takes care of the namespace issues\n> as well, since I can just invent my own mime type, like\n> \"application/sage-interact\" or something.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2518#issuecomment-11758839.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11761457",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11761457",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11761457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzYxNDU3",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-30T05:29:36Z",
    "updated_at": "2012-12-30T05:29:36Z",
    "author_association": "MEMBER",
    "body": "Well, then you're back to 'how do you specify the handler?' The mime type is a great way (in fact, the current way) to change between handlers.\n\nI guess this is the same as the custom message discussion earlier, but one level of wrapping down from what we were discussing earlier.  Do we want to wrap custom messages (your solution of using a json mime type) or give users a way to change the top-level msg type (my solution of allowing custom mime types).  \n\nYou're right that the current system really _isn't_ using mime types correctly, since there isn't a way to ship purely binary data over json (e.g., the image/png mime type really isn't binary image data...).  So your argument about the data not actually being the right mime type actually extends to the current system (at least if you wanted to be strictly pure).  What happens now is that you indicate the intent/purpose of the data with the mime type, rather than the actual format, and it's up to the client to understand how you encoded the mime type to fit JSON.\n\nI agree that specifying the handler at the same level as the content is not very elegant.  The handler should be specified above the content level.  Another natural place to specify the handler would be the metadata for the entire message.  What do you think about using the top-level metadata dict for specifying a handler?  Or should that metadata dict be strictly preserved for the user?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11772359",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11772359",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11772359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzcyMzU5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-31T04:15:28Z",
    "updated_at": "2012-12-31T04:15:28Z",
    "author_association": "MEMBER",
    "body": "> I guess this is the same as the custom message discussion earlier, but one\n> level of wrapping down from what we were discussing earlier. Do we want to\n> wrap custom messages (your solution of using a json mime type) or give\n> users a way to change the top-level msg type (my solution of allowing\n> custom mime types).\n> \n> In my mind JSON is just JSON and doesn't warrant a new message type.  I\n> think we should just make the message look like:\n\n{'handler': handler_name, 'content': {actual data goes here}}\n\n> You're right that the current system really _isn't_ using mime types\n> correctly, since there isn't a way to ship purely binary data over json\n> (e.g., the image/png mime type really isn't binary image data...). So your\n> argument about the data not actually being the right mime type actually\n> extends to the current system (at least if you wanted to be strictly pure).\n> What happens now is that you indicate the intent/purpose of the data with\n> the mime type, rather than the actual format, and it's up to the client to\n> understand how you encoded the mime type to fit JSON.\n> \n> I agree that specifying the handler at the same level as the content is\n> not very elegant. The handler should be specified above the content level.\n> Another natural place to specify the handler would be the metadata for the\n> entire message. What do you think about using the top-level metadata dict\n> for specifying a handler? Or should that metadata dict be strictly\n> preserved for the user?\n> \n> I didn't go the metadata route because currently don't have a a clean way\n> to send metadata with JSON.  Even if we did, I am not sure if this type of\n> thing falls into the metadata category or not.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2518#issuecomment-11761457.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11779352",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11779352",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11779352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzc5MzUy",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-31T15:57:56Z",
    "updated_at": "2012-12-31T15:58:10Z",
    "author_association": "MEMBER",
    "body": "Are you proposing a message format of: `{parent: {...}, header: {...}, metadata: {...}, content: {handler: {...}, content: {mimetypes}}`, or `{parent: {...}, header: {...}, metadata: {...}, handler: {...}, content: {mimetypes...}`?  In other words, are you proposing adding a new top-level attribute of `handler`, or are you proposing wrapping the mimetypes one level deeper in a display_data message?\n\nReally, the mimetypes really are about selecting a handler on the client side, and the handler knows how to interpret the value of the key.  You could also do a special mimetype of `application/ipython-<handler>`, where handler is filled in.\n\nIf you're proposing a handler attribute at the top level, then would it also be possible to specify a handler for messages other than display_data messages?  Would it be possible to specify a handler for display_data messages that only had, say, a text/plain mimetype?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11971088",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11971088",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11971088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTcxMDg4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-07T20:52:41Z",
    "updated_at": "2013-01-07T20:52:41Z",
    "author_association": "MEMBER",
    "body": "I am thinking that the main content dict would have two subfields: handler\nand content.  I like that because it makes it very easy for people to\nspecify the handler by building the right JSON object in their application\ncode - IOW, they don't have to call a special IPython API to pass it to the\nmetadata.\n\nI also don't want to get into allowing custom handlers for arbitrary data\ntypes - just the JSON ones.  The other types have handlers that are\ncomplete determined by their type.  This make sure that there is a uniform\nhandling of these types that can be used to build consistent notebook\ndocuments = png's are always handled in this particular way.\n\nOn Mon, Dec 31, 2012 at 7:58 AM, Jason Grout notifications@github.comwrote:\n\n> you're proposing a message format of: {parent: {...}, header: {...},\n> metadata: {...}, content: {handler: {...}, content: {mimetypes}}, or {parent:\n> {...}, header: {...}, metadata: {...}, handler: {...}, content:\n> {mimetypes...}? In other words, are you proposing adding a new top-level\n> attribute of handler, or are you proposing wrapping the mimetypes one\n> level deeper in a display_data message?\n> \n> Really, the mimetypes really are about selecting a handler on the client\n> side, and the handler knows how to interpret the value of the key. You\n> could also do a special mimetype of application/ipython-<handler>, where\n> handler is filled in.\n> \n> If you're proposing a handler attribute at the top level, then would it\n> also be possible to specify a handler for messages other than display_data\n> messages? Would it be possible to specify a handler for display_data\n> messages that only had, say, a text/plain mimetype?\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2518#issuecomment-11779352.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11972082",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11972082",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11972082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTcyMDgy",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-07T21:16:01Z",
    "updated_at": "2013-01-07T21:16:24Z",
    "author_association": "MEMBER",
    "body": "A couple of clarifying comments:\n1. The main content dict currently has \"source\", \"data\", and \"metadata\" keys (but no \"content\" key), according to the spec.  Are you saying it should have a fourth key?\n2. Will the handler key be ignored if a JSON datatype is not passed?  What if JSON and png and text/plain content types are included?  Is the handler passed the entire message, or just the json mimetype content?  Is the png handler called as well?\n\nThe difference between our two approaches seems to be just that I want to specify the intent of the content using the mime type, whereas you want to specify the intent using the mime type and a handler key. Is that a fair characterization?\n\nI think my approach plugs into the existing system very well and is simpler (one way of registering handlers for the message data). An implementation detail can say that the standard mimetypes are not available to be overridden.  I think making the handler request disconnected from the data (e.g., having the handler specified separately from the content) is not as elegant as making the handler an integral part of the data (e.g., having the handler specified as a key with the content as the data).\n\nAlso, if the handler is specified using the mimetype system, you can set up multiple handlers for the same message.  What if, for example, I have a python library that can send data back and use one of three different custom handlers.  Having the handler being specified by a key in the data dictionary means I can consolidate the display data in one message, and the client can decide which (or all) of the handlers called.  Under your proposal, I'd have to send several different display messages, and all would be acted on.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11974382",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11974382",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11974382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTc0Mzgy",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-07T22:10:37Z",
    "updated_at": "2013-01-07T22:10:37Z",
    "author_association": "MEMBER",
    "body": "No, I mean that the \"data\" field on content would have the handler\nattribute.  The problem is that the metadata, source, etc are not exposed\nthrough any API to the code sending the message.  That way the handler\nattribute only makes sense when data is, itself JSON data.  We could put it\nup one level, but it would require reworking a good part of our message\nsending API in possibly backwards incompatible manner.  The problem is that\nright now the various message attributes are not really exposed very well.\n If we were doing this from scratch, the handler would definitely go into\nthe metadata dict.\n\nOn Mon, Jan 7, 2013 at 1:16 PM, Jason Grout notifications@github.comwrote:\n\n> A couple of clarifying comments:\n> \n>    1.\n> \n>    The main content dict currently has \"source\", \"data\", and \"metadata\"\n>    keys, according to the spec. Are you saying it should have a fourth key?\n>    2.\n> \n>    Will the handler key be ignored if a JSON datatype is not passed? What\n>    if JSON and png and text/plain content types are included? Is the handler\n>    passed the entire message, or just the json mimetype content? Is the png\n>    handler called as well?\n> \n> The difference between our two approaches seems to be just that I want to\n> specify the intent of the content using the mime type, whereas you want to\n> specify the intent using the mime type and a handler key. Is that a fair\n> characterization?\n> \n> I think my approach plugs into the existing system very well and is\n> simpler (one way of registering handlers for the message data). An\n> implementation detail can say that the standard mimetypes are not available\n> to be overridden. I think making the handler request disconnected from the\n> data (e.g., having the handler specified separately from the content) is\n> not as elegant as making the handler an integral part of the data (e.g.,\n> having the handler specified as a key with the content as the data).\n> \n> Also, if the handler is specified using the mimetype system, you can set\n> up multiple handlers for the same message. What if, for example, I have a\n> python library that can send data back and use one of three different\n> custom handlers. Having the handler being specified by a key in the data\n> dictionary means I can consolidate the display data in one message, and the\n> client can decide which (or all) of the handlers called. Under your\n> proposal, I'd have to send several different display messages, and all\n> would be acted on.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2518#issuecomment-11972082.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11974750",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11974750",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11974750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTc0NzUw",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-07T22:18:21Z",
    "updated_at": "2013-01-07T22:18:46Z",
    "author_association": "MEMBER",
    "body": "I'm still a little confused.  Can you post an example message that specifies a handler?  In particular, are other mimetypes allowed in the data dictionary?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11982502",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11982502",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11982502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTgyNTAy",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-08T02:58:35Z",
    "updated_at": "2013-01-08T02:58:35Z",
    "author_association": "MEMBER",
    "body": "I'm on my phone so it is a little bit difficult to type a Json structure. The display data message type has a data attribute this data attribute would contain the Json data for the message being sent to the browser. I propose creating a handler sub attribute within the data structure that would contain the handler for that data. The actual Json data would sit alongside the handler attribute in the data sub structure.  I can describe this more when I get home if you want.  This is also how it implemented it in my JS plug-ins branch.  Who Ray for voice recognition!\n\nSent from my iPhone\n\nOn Jan 7, 2013, at 2:18 PM, Jason Grout notifications@github.com wrote:\n\n> I'm still a little confused. Can you post an example message that specifies a handler?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11982688",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11982688",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11982688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTgyNjg4",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-08T03:08:13Z",
    "updated_at": "2013-01-08T03:08:13Z",
    "author_association": "MEMBER",
    "body": "So like this?\n\n```\n{header: {...}, \nparent: {...}, \nmetadata: {...}, \ncontent: {data: {'text/json': jsondata, 'handler': handler_name, 'text/plain': 'json plugin'}}}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11986194",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-11986194",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 11986194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTg2MTk0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-08T06:26:39Z",
    "updated_at": "2013-01-08T06:26:39Z",
    "author_association": "MEMBER",
    "body": "No I am sorry I forgot one detail.  Here is how it is now:\n\n```\n{header: {...},\nparent: {...},\nmetadata: {...},\ncontent: {data: {'text/json': {handler: 'myhandler', content: {rest of JSON data}}}}}\n```\n\nIOW, the handler attribute is part of the actual JSON payload.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12401152",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-12401152",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 12401152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDAxMTUy",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-18T00:47:47Z",
    "updated_at": "2013-01-18T00:47:47Z",
    "author_association": "MEMBER",
    "body": "I am thinking about closing this PR.  There are a number of larger design issues that we really need to work out first and those discussions are going beyond the scope of this PR.  How do people feel about this (I would open an issue to track the larger issues).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12404160",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-12404160",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 12404160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDA0MTYw",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-18T01:52:20Z",
    "updated_at": "2013-01-18T01:52:20Z",
    "author_association": "MEMBER",
    "body": "+1 to opening up the broader discussion\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12406706",
    "html_url": "https://github.com/ipython/ipython/pull/2518#issuecomment-12406706",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2518",
    "id": 12406706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDA2NzA2",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-18T03:53:48Z",
    "updated_at": "2013-01-18T03:53:48Z",
    "author_association": "MEMBER",
    "body": "I am closing this issue as there are larger design questions that have to be worked out.  Follow that discussion at #2802.\n"
  }
]
