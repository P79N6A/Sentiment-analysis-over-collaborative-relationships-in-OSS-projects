[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21678327",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-21678327",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 21678327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjc4MzI3",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-28T07:11:04Z",
    "updated_at": "2013-07-28T07:11:04Z",
    "author_association": "MEMBER",
    "body": "just dropping a breadcrumb for myself here, since I'll want [vim-ipython](https://github.com/ivanov/vim-ipython) to work with Julia kernels, as well.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21684365",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-21684365",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 21684365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjg0MzY1",
    "user": {
      "login": "StefanKarpinski",
      "id": 153596,
      "node_id": "MDQ6VXNlcjE1MzU5Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/153596?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StefanKarpinski",
      "html_url": "https://github.com/StefanKarpinski",
      "followers_url": "https://api.github.com/users/StefanKarpinski/followers",
      "following_url": "https://api.github.com/users/StefanKarpinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/StefanKarpinski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StefanKarpinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StefanKarpinski/subscriptions",
      "organizations_url": "https://api.github.com/users/StefanKarpinski/orgs",
      "repos_url": "https://api.github.com/users/StefanKarpinski/repos",
      "events_url": "https://api.github.com/users/StefanKarpinski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StefanKarpinski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-28T14:34:23Z",
    "updated_at": "2013-07-28T14:34:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We had several problems with overly aggressive timeouts in some front-ends (currently the Julia kernel takes a couple of seconds to launch, and IPython thought we died), but I think these have been mostly fixed? @StefanKarpinski?\n\nThe fix at the time was to stop using the console front-end and try the notebook instead, which turned out rather well. However, I believe [this commit](https://github.com/ipython/ipython/commit/60cf5d831efc25b8b1e7c95e21d221eebab53a22) should have taken care of that issue by making the kernel timeout on startup longer.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21815009",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-21815009",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 21815009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODE1MDA5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-30T19:09:46Z",
    "updated_at": "2013-07-30T19:09:46Z",
    "author_association": "MEMBER",
    "body": "Sorry, this Issue slipped past me.\n\n> history_reply is unclear to me, and qtconsole seems to differ from the spec in several ways. Is the line_number the same as the current execution counter?\n\nyes\n\n> What is the difference between \"raw\" and \"transformed\" input?\n\nThis is IPython / magic-specific.  \"raw\" is always what is typed (e.g. `\"%magic\"`), whereas transformed is always valid kernel code (e.g. `\"get_ipython().magic('magic')\"`).  If the Julia kernel does not perform input transformations,\nthen there is no distinction.\n\n> Does \"pattern\" search the input (raw or transformed?) or output?\n\nIt searches input, I believe just raw.\n\n> What does \"content\" mean when it says \"tuples\" (which are not a JSON type) ... is this just a JSON list?\n\nYes - it means a list of lists of length 3.\n\n> Are the \"input\" and \"output\" parameters dictionaries, lists, ...?  In what format is the \"output\" sent (text output, a dictionary of MIME=>data, or ...?)?\n\nStrings - the code as text, and the plaintext repr of the result. (e.g. what is seen at Out[]: in the terminal).\n\n> Does \"duplicated\" history refer to duplicated input or output?\n\nInput - it is simply an exclusion of duplicate input cells, e.g. if you type `!ls mydir` fifty times, this will only include the first in the search results.\n\n> Is the glob pattern treated like some kind of shell globbing (or is it a PCRE)?\n\nYes, I believe it is passed directly to an SQLite GLOB query with wildcards\n\n> qtconsole's history_request seems to omit many of the specified content fields (it only sends output, hist_access_type, raw, and n); what are the defaults for the omitted fields? What should we use for \"session\" (which is omitted from the qtconsole history_request, contrary to spec)?\n\nNote that the required keys depend on the value of hist_access_type.  I think this is described in the spec,\nbut can probably be clearer.\n- All history requests must have the following keys: `output`, `raw`, `hist_access_type`\n- `if hist_access_type = range`, `session`, `start`, and `stop` are required\n- if `tail`: `n` is required\n- if `search`: `n` and `pattern` are required. `unique` is optional, default is `False`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21830983",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-21830983",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 21830983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODMwOTgz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-30T23:38:25Z",
    "updated_at": "2013-07-30T23:38:25Z",
    "author_association": "MEMBER",
    "body": "More info\n\n> payload of execute_reply is unclear\n\npayloads are how we trigger the pager and set_next_input.  We really need to revisit how we do this,\nso I think you guys should just always set payload to an empty list.\n\n> metadata of display_data is poorly documented (and apparently can be omitted without causing problems, but not sure if this is kosher?)\n\nLeaving out the key entirely shouldn't be okay (it may work in some contexts), but leaving it empty will always be okay.  The only metadata with a specified interpretation is the width and height of image mime-types (used for retina matplotlib, etc.).  In IPython, metadata should always be optional.\n\n> The whole heartbeat thing is unclear. Apparently, it is just a REP socket that echoes all messages back to itself, and needs to be implemented in a separate OS thread or process in order to stay responsive even if the kernel is busy.\n\nThis is correct - it is a REP socket that just echoes messages, and must remain responsive.  In IPython, this is implemented via a single call to `zmq_device(ZMQ_QUEUE, rep_socket, -1)` in a Python thread.\n\n> Apparently the pyout response must be sent before execute_reply or the Out[xx] may be displayed out-of-order in the console?\n\nIt is impossible to enforce the order of arrival of pyout and execute_reply.  There was a bug in the terminal console that didn't properly reorder things, but it should be fixed.\n\n> For pyerr messages, IPython seems to ignore the ename and evalue fields, and expects the error message to be the first element of the traceback list, contrary to docs.\n\nThe traceback key is a multi-line string of the traceback.  In interactive IPython situations, since this information always contains the error name and value, the name and value keys are ignored.  In other situations, they might be used and the traceback ignored, but they should all always be defined if possible.\n\n> The crash message type is apparently unimplemented in the IPython front-end (and should have been in \"future ideas\"?)\n\nThis should not have been in the doc - it was never implemented, and I'm not sure it was ever meant to be.\n\n> object_info_reply is currently quite Python-centric. For example, it would be nice if argspec were a list so that we could return all the methods for a given function.\n\n100% agreed - we should have a discussion about what information julia would like to provide, and we can make an updated spec of this message that is more generically useful for 2.0.\n\n> Would be much easier to test things if an explicit example could be given, for each message type, of how to trigger that request from the notebook front-end. (Better yet, from the console front-end, since that is easier to get going when you are first starting on kernel development). For example, I'm still not sure how to get the notebook to send me a history_request (although qtconsole sends this on startup).\n\nThe best way to do this is by creating a KernelClient object:\n\n``` python\nfrom IPython.kernel import KernelClient\nkc = KernelClient(connection_file='/path/to/cf.json')\nkc.load_connection_file()\nkc.start_channels()\nmsg_id = kc.execute(\"a=5\")\nexecute_reply = kc.get_shell_msg(timeout=2)\nkc.history(hist_access_type=\"tail\", n=5)\nhistory_reply = kc.get_shell_msg(timeout=2)\n```\n\netc.\n\n> The documentation says that execute_request has a boolean field store_history, but this is absent from what the notebook sends. It seems like we are just supposed to infer this from silent.\n\nShould be fixed by PR #3850.  `silent=True` does imply `store_history=False` if unspecified, but it is still possible for non-silent execution that doesn't populate the history.\n\n> pyout messages need an undocumented metadata dictionary field in order to work with qtconsole.\n\nshould be addressed by PR #3830.\n\n> qtconsole uses Python-centric rules to decide whether the input has ended or not, which don't always work in other languages. There probably needs to be a new message type to request this information from the back end. (see JuliaLang/IJulia.jl#22).\n\nTemporary solution is `IPythonWidget.execute_on_complete_input = False` in IPython config,\nwhile we work out an `is_input_complete` request.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21833408",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-21833408",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 21833408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODMzNDA4",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-31T00:43:33Z",
    "updated_at": "2013-07-31T00:43:33Z",
    "author_association": "NONE",
    "body": "Note that `zmq_device` was [removed in ZMQ 3](http://grokbase.com/t/zeromq/zeromq-dev/1149400wm0/removal-of-zmq-device-3-from-3-0).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21833456",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-21833456",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 21833456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODMzNDU2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-31T00:45:14Z",
    "updated_at": "2013-07-31T00:45:14Z",
    "author_association": "MEMBER",
    "body": "Actually, that decision was rolled back for compatibility reasons - there never was a release of ZMQ without it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21833507",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-21833507",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 21833507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODMzNTA3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-31T00:46:28Z",
    "updated_at": "2013-07-31T00:46:28Z",
    "author_association": "MEMBER",
    "body": "viz. [current docs](http://api.zeromq.org/3-2:zmq-device)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22117834",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22117834",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22117834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTE3ODM0",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T16:25:47Z",
    "updated_at": "2013-08-05T16:25:47Z",
    "author_association": "NONE",
    "body": "Just posted another item: `object_info_request` (for tooltips) is apparently only sent for Pythonic identifiers.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22122439",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22122439",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22122439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTIyNDM5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T17:34:31Z",
    "updated_at": "2013-08-05T17:34:31Z",
    "author_association": "MEMBER",
    "body": "> Just posted another item: object_info_request (for tooltips) is apparently only sent for Pythonic identifiers.\n\nOn notebook ? On qtconsole ? you should be able to force tooltip on notebook by select,shift+tab, or tab after open parent. But it might be true that the code in the notebook to guess on what the object_info_request should be send might use heuristic that are python specific.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22124468",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22124468",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22124468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTI0NDY4",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T18:03:05Z",
    "updated_at": "2013-08-05T18:03:05Z",
    "author_association": "NONE",
    "body": "In the notebook.  Neither tab after open-paren nor select+shift-tab work for an identifier like `push!`; it seems to get confused by the `!`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22124761",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22124761",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22124761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTI0NzYx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T18:07:17Z",
    "updated_at": "2013-08-05T18:07:24Z",
    "author_association": "MEMBER",
    "body": "object_info_request may need the kind of language-agnostic \"line + cursor position\" that completion should have, to let the kernel do the tokenizing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22126836",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22126836",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22126836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTI2ODM2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T18:36:21Z",
    "updated_at": "2013-08-05T18:36:21Z",
    "author_association": "MEMBER",
    "body": "> it seems to get confused by the !.\n\nDefinitively. There are some regex that try to be smart, like `pkg.foo(x, y, z=kappa, | bar=0)` where `|` is cursor, then press `tab` will try to send_object_info_request on `pkg.foo` ... Are `!` the only thing I should expect ? I can try to quick-hack something for post 1.0\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22129748",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22129748",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22129748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTI5NzQ4",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T19:02:27Z",
    "updated_at": "2013-08-05T19:10:36Z",
    "author_association": "NONE",
    "body": "`!` is the most common non-Pythonic character in identifiers (like Python, `.` and operators like `+` or `?` are not allowed in Julia identifiers).  Unicode identifiers like `π` are also allowed, but I guess you have to handle that for Python 3 anyway.  \n\n ~~Ah, I just found a [mailing-list post](https://groups.google.com/forum/#!topic/julia-dev/OVgmJvOgaU4) on this: valid Julia identifiers are in the Perl regex pattern `/[a-zA-Z_]\\w+!?/`.~~  Seems to be out of date, since `!` is now allowed in the middle of an identifier too.  @StefanKarpinski, can you clarify?  See also JuliaLang/julia#3945\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22130564",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22130564",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22130564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTMwNTY0",
    "user": {
      "login": "StefanKarpinski",
      "id": 153596,
      "node_id": "MDQ6VXNlcjE1MzU5Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/153596?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StefanKarpinski",
      "html_url": "https://github.com/StefanKarpinski",
      "followers_url": "https://api.github.com/users/StefanKarpinski/followers",
      "following_url": "https://api.github.com/users/StefanKarpinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/StefanKarpinski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StefanKarpinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StefanKarpinski/subscriptions",
      "organizations_url": "https://api.github.com/users/StefanKarpinski/orgs",
      "repos_url": "https://api.github.com/users/StefanKarpinski/repos",
      "events_url": "https://api.github.com/users/StefanKarpinski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StefanKarpinski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T19:08:07Z",
    "updated_at": "2013-08-05T19:08:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I believe that's it. Ruby allows `?` as the last character of an identifier. Julia doesn't allow `?` but does allow arbitrarily many `!` characters anywhere after the first character of an identifier.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22130676",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22130676",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22130676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTMwNjc2",
    "user": {
      "login": "StefanKarpinski",
      "id": 153596,
      "node_id": "MDQ6VXNlcjE1MzU5Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/153596?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StefanKarpinski",
      "html_url": "https://github.com/StefanKarpinski",
      "followers_url": "https://api.github.com/users/StefanKarpinski/followers",
      "following_url": "https://api.github.com/users/StefanKarpinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/StefanKarpinski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StefanKarpinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StefanKarpinski/subscriptions",
      "organizations_url": "https://api.github.com/users/StefanKarpinski/orgs",
      "repos_url": "https://api.github.com/users/StefanKarpinski/repos",
      "events_url": "https://api.github.com/users/StefanKarpinski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StefanKarpinski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T19:08:49Z",
    "updated_at": "2013-08-05T19:08:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JeffBezanson can give a more complete answer or correct me if I'm wrong here.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22131935",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22131935",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22131935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTMxOTM1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T19:17:28Z",
    "updated_at": "2013-08-05T19:17:28Z",
    "author_association": "MEMBER",
    "body": "> Unicode identifiers like π are also allowed, but I guess you have to handle that for Python 3 anyway.\n\nYeah... but javascript support of unicode is regex is... well... sight.\nI'll add `?` and `!`, and inquery about building Js regexp that can match some categories/ranges of unicode codepoints.\n\nI guess it will be useful for you too as you'll have to build a js-tokeniser for codemirror to have syntax highlighting...\n\nwill also see if I can force shift-tab to object info request on exact selection.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22132692",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22132692",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22132692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTMyNjky",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T19:23:01Z",
    "updated_at": "2013-08-05T19:23:01Z",
    "author_association": "MEMBER",
    "body": "This should do the trick for now.\n\n``` diff\ndiff --git a/IPython/html/static/notebook/js/tooltip.js b/IPython/html/static/notebook/js/tooltip.js\nindex 94ab40c..1649222 100644\n--- a/IPython/html/static/notebook/js/tooltip.js\n+++ b/IPython/html/static/notebook/js/tooltip.js\n@@ -207,7 +207,7 @@ var IPython = (function (IPython) {\n         // remove everything after last open bracket\n         func = func.replace(endBracket, \"\");\n\n-        var re = /[a-z_][0-9a-z._]+$/gi; // casse insensitive\n+        var re = /[a-z_][0-9a-z._!?]+$/gi; // casse insensitive !? for julia\n         var callbacks = {\n             'object_info_reply': $.proxy(this._show, this)\n         }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22137089",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-22137089",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 22137089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTM3MDg5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-05T20:05:44Z",
    "updated_at": "2013-08-05T20:05:44Z",
    "author_association": "MEMBER",
    "body": "There are some discussion on SO, that make me thing that `[\\u00BF-\\u1FFF\\u2C00-\\uD7FF\\w]+` should work on most cases, and most browsers (except some japaneses kanji, but those are interleaved with strange things like units (yes `m/s` is 1 unicode caracter, and I don't want to build the list of codepoint myself.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69507409",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-69507409",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 69507409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTA3NDA5",
    "user": {
      "login": "habemus-papadum",
      "id": 1161604,
      "node_id": "MDQ6VXNlcjExNjE2MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1161604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/habemus-papadum",
      "html_url": "https://github.com/habemus-papadum",
      "followers_url": "https://api.github.com/users/habemus-papadum/followers",
      "following_url": "https://api.github.com/users/habemus-papadum/following{/other_user}",
      "gists_url": "https://api.github.com/users/habemus-papadum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/habemus-papadum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/habemus-papadum/subscriptions",
      "organizations_url": "https://api.github.com/users/habemus-papadum/orgs",
      "repos_url": "https://api.github.com/users/habemus-papadum/repos",
      "events_url": "https://api.github.com/users/habemus-papadum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/habemus-papadum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T19:30:30Z",
    "updated_at": "2015-01-11T19:30:30Z",
    "author_association": "NONE",
    "body": "Hi -- I experience the two following issues:\n\n++ When rendering julia notebooks which use unicode in identifiers, while the notebook is running things are fine, but when the notebook is rendered to static html (either via command line or via nbviewer), there are annoying red boxes around the characters.   For an example, see http://nbviewer.ipython.org/github/lilinjn/lilKanren/blob/master/FirstSteps.ipynb (scroll down a bit)\n\n++ When attempting to render a julia notebook to MD via `ipython nbconvert --profile julia --to markdown FirstSteps.ipynb`, stuff is not being put into code blocks, it just comes out as raw text\n\nI'm motivated enough attempt a fix myself -- but if anyone has suggestions about what code base to consider, which community to talk to (python, julia, ijulia)  to make any upstream merges more likely, that would be great.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69512580",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-69512580",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 69512580,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTEyNTgw",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T21:33:24Z",
    "updated_at": "2015-01-11T21:33:24Z",
    "author_association": "MEMBER",
    "body": "> [red boxes]\n\nPygments highlighter need to be updated (http://pygments.org/demo/1061745/) \n\n> - When attempting to render a julia notebook to MD via ipython nbconvert --profile julia --to markdown FirstSteps.ipynb, stuff is not being put into code blocks, it just comes out as raw text\n\ntry https://github.com/ipython/ipython/blob/master/IPython/nbconvert/templates/markdown.tpl#L10-L12\n\nthe indented 4 spaces shoud make code block, but we can change to triple backticks. DO you want to give a shot at it ? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69516432",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-69516432",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 69516432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE2NDMy",
    "user": {
      "login": "habemus-papadum",
      "id": 1161604,
      "node_id": "MDQ6VXNlcjExNjE2MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1161604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/habemus-papadum",
      "html_url": "https://github.com/habemus-papadum",
      "followers_url": "https://api.github.com/users/habemus-papadum/followers",
      "following_url": "https://api.github.com/users/habemus-papadum/following{/other_user}",
      "gists_url": "https://api.github.com/users/habemus-papadum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/habemus-papadum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/habemus-papadum/subscriptions",
      "organizations_url": "https://api.github.com/users/habemus-papadum/orgs",
      "repos_url": "https://api.github.com/users/habemus-papadum/repos",
      "events_url": "https://api.github.com/users/habemus-papadum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/habemus-papadum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T23:02:20Z",
    "updated_at": "2015-01-11T23:02:20Z",
    "author_association": "NONE",
    "body": "Hi -- I spaced out while looking at the MD in my text editor and forgot about the 4 space convention -- my vote would be to actually just leave it as it -- the indented style is simpler -- apologies\n\nthanks for the pointer to pygments.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69534857",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-69534857",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 69534857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTM0ODU3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T06:58:59Z",
    "updated_at": "2015-01-12T06:58:59Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg did you close because all point were addressed? or just because of last comment ?\n\n> Hi -- I spaced out while looking at the MD in my text editor and forgot about the 4 space convention -- my vote would be to actually just leave it as it -- the indented style is simpler -- apologies\n\nNo problem. \n\nThe backtick mode might make sens to, if we use it with language identifier to get highlighting.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69569137",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-69569137",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 69569137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTY5MTM3",
    "user": {
      "login": "habemus-papadum",
      "id": 1161604,
      "node_id": "MDQ6VXNlcjExNjE2MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1161604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/habemus-papadum",
      "html_url": "https://github.com/habemus-papadum",
      "followers_url": "https://api.github.com/users/habemus-papadum/followers",
      "following_url": "https://api.github.com/users/habemus-papadum/following{/other_user}",
      "gists_url": "https://api.github.com/users/habemus-papadum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/habemus-papadum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/habemus-papadum/subscriptions",
      "organizations_url": "https://api.github.com/users/habemus-papadum/orgs",
      "repos_url": "https://api.github.com/users/habemus-papadum/repos",
      "events_url": "https://api.github.com/users/habemus-papadum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/habemus-papadum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T13:27:48Z",
    "updated_at": "2015-01-12T13:27:48Z",
    "author_association": "NONE",
    "body": "Yup -- also the generated, but indented, MD renders as one big code block rather than distinct snippets, making it hard to distinguish inputs from outputs, so perhaps I change my mind again.  I'll try sending in a pull request in a few days.  cheers    \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69638378",
    "html_url": "https://github.com/ipython/ipython/issues/3806#issuecomment-69638378",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3806",
    "id": 69638378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjM4Mzc4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T20:20:00Z",
    "updated_at": "2015-01-12T20:20:00Z",
    "author_association": "MEMBER",
    "body": "Hmm, I think I closed this by mistake. Sorry...\n"
  }
]
