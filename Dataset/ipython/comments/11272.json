[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/430590871",
    "html_url": "https://github.com/ipython/ipython/issues/11272#issuecomment-430590871",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11272",
    "id": 430590871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDU5MDg3MQ==",
    "user": {
      "login": "pganssle",
      "id": 1377457,
      "node_id": "MDQ6VXNlcjEzNzc0NTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pganssle",
      "html_url": "https://github.com/pganssle",
      "followers_url": "https://api.github.com/users/pganssle/followers",
      "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
      "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
      "organizations_url": "https://api.github.com/users/pganssle/orgs",
      "repos_url": "https://api.github.com/users/pganssle/repos",
      "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pganssle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T11:24:48Z",
    "updated_at": "2018-10-17T11:24:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Solving this is *almost* straightforward, but I think the interaction with `use_jedi` may cause some headaches. I see three reasonable ways to solve this:\r\n\r\n1. Maintain two separate lists for the `use_jedi` and `not use_jedi` cases:\r\n\r\n```python\r\n    _matchers = {}\r\n    @property\r\n    def matchers(self):\r\n        \"\"\"All active matcher routines for completion\"\"\"\r\n        if self.use_jedi:\r\n            return self._matchers.setdefault('jedi', [\r\n                self.file_matches,\r\n                self.magic_matches,\r\n                self.dict_key_matches,\r\n            ])\r\n        else:\r\n            return self._matchers.setdefault('default', [\r\n                self.python_matches,\r\n                self.file_matches,\r\n                self.magic_matches,\r\n                self.python_func_kw_matches,\r\n                self.dict_key_matches,\r\n            ])\r\n```\r\n\r\nThis will fix the issue as reported by making the lists persistent and mutable, *but* it means that if you use `set_custom_completer`, then change the value of `self.Completer.use_jedi`, your custom completers will be wiped out.\r\n\r\n2. Make custom completers always come before the default completers and use a separate `custom_matchers` attribute. In this, you'd set `custom_matchers` in the `IPCompleter` constructor to `[]`, then `matchers` becomes:\r\n\r\n```python\r\n    @property\r\n    def matchers(self):\r\n        \"\"\"All active matcher routines for completion\"\"\"\r\n        if self.use_jedi:\r\n            return [*self.custom_matchers,\r\n                self.file_matches,\r\n                self.magic_matches,\r\n                self.dict_key_matches,\r\n            ]\r\n        else:\r\n            return [*self.custom_matchers,\r\n                self.python_matches,\r\n                self.file_matches,\r\n                self.magic_matches,\r\n                self.python_func_kw_matches,\r\n                self.dict_key_matches,\r\n            ]\r\n```\r\n\r\nAn alternate version of this is to allow custom matches to come either before or after the other matchers, but never be interpolated between them.\r\n\r\n3. Change `use_jedi` to be a property that dynamically inserts or removes the python matchers when toggled. This would be somewhat complicated to implement, but once done the worst side effect would be that order would not be preserved if you inserted a custom matcher between one of the non-jedi matchers and one of the jedi-matchers, then turned jedi on and off again."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/430667349",
    "html_url": "https://github.com/ipython/ipython/issues/11272#issuecomment-430667349",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11272",
    "id": 430667349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY2NzM0OQ==",
    "user": {
      "login": "atavory",
      "id": 7824605,
      "node_id": "MDQ6VXNlcjc4MjQ2MDU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7824605?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atavory",
      "html_url": "https://github.com/atavory",
      "followers_url": "https://api.github.com/users/atavory/followers",
      "following_url": "https://api.github.com/users/atavory/following{/other_user}",
      "gists_url": "https://api.github.com/users/atavory/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atavory/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atavory/subscriptions",
      "organizations_url": "https://api.github.com/users/atavory/orgs",
      "repos_url": "https://api.github.com/users/atavory/repos",
      "events_url": "https://api.github.com/users/atavory/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atavory/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:08:48Z",
    "updated_at": "2018-10-17T15:08:48Z",
    "author_association": "NONE",
    "body": "Thanks!\r\n\r\nI really like your\r\n\r\n> \r\n> An alternate version of this is to allow custom matches to come either before or after the other matchers, but never be interpolated between them.\r\n> \r\n\r\nin your second suggestion, FWIW.  \r\n\r\nIf needed, I'd be happy to submit a pull request for it."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/431886112",
    "html_url": "https://github.com/ipython/ipython/issues/11272#issuecomment-431886112",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11272",
    "id": 431886112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTg4NjExMg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-22T16:24:20Z",
    "updated_at": "2018-10-22T16:24:20Z",
    "author_association": "MEMBER",
    "body": "I think adding `self.custom_matchers` to the front of the list makes the most sense to me. Thanks for digging into this!"
  }
]
