[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43263478",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43263478",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43263478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjYzNDc4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T20:54:47Z",
    "updated_at": "2014-05-15T20:54:47Z",
    "author_association": "MEMBER",
    "body": "The global IOLoop instance is already running before fork is called (IPython itself uses tornado IOLoop). You may need to reset the global instance after forking, before creating your tornado objects that will grab the IOLoop instance.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43263643",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43263643",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43263643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjYzNjQz",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T20:56:14Z",
    "updated_at": "2014-05-15T20:56:14Z",
    "author_association": "NONE",
    "body": "How is that done? Do i just need to create a new tornado.ioloop.IOLoop()?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43263961",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43263961",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43263961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjYzOTYx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T20:59:08Z",
    "updated_at": "2014-05-15T20:59:08Z",
    "author_association": "MEMBER",
    "body": "> How is that done?\n\n``` python\nloop = IOLoop()\nloop.install()\n```\n\nJust to double check, so I can start testing:\n- What tornado and pyzmq versions?\n- Can you confirm that the same tornado and pyzmq versions are being used in both the working and non-working IPython installs?\n- Can you confirm that it does work in 1.2.1 and not 2.0?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43265546",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43265546",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43265546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjY1NTQ2",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T21:10:16Z",
    "updated_at": "2014-05-15T21:10:16Z",
    "author_association": "NONE",
    "body": "I have tornado 3.2.1, pyzmq 14.3.0\n\nI haven't pinpointed exactly when the break occurred. I use the fork mechanic to spawn web servers for my pycortex software, and some of my users notified me that the latest Ubuntu upgrade broke it. I was running Tornado 2.1, not sure about pyzmq just before I upgraded and confirmed that it was broken.\n\nIf I try to reset the ioloop with the following:\n\n```\nioloop = tornado.ioloop.IOLoop()\ndelattr(tornado.ioloop.IOLoop, \"_instance\")\nioloop.install()\n```\n\nthe server breaks altogether. Even stock python can no longer run the server. I will try to figure out when everything broke!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43267242",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43267242",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43267242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjY3MjQy",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T21:26:27Z",
    "updated_at": "2014-05-15T21:26:27Z",
    "author_association": "NONE",
    "body": "Ok, so it seems that something about tornado 3.x is breaking this code when used with ipython notebook. I downgraded pyzmq to 14.0.1 and ipython to 1.2.1, and it was still broken. After downgrading to tornado 2.2.1, everything worked again. It even worked with pyzmq at 14.3.1. Unfortunately, the latest ipython requires tornado 3.1 so i can't test it with an older tornado, at least not yet.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43272548",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43272548",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43272548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjcyNTQ4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T22:25:01Z",
    "updated_at": "2014-05-15T22:25:01Z",
    "author_association": "MEMBER",
    "body": "3.x added a second thread local `current` handle, in addition to `instance`, so you actually need to clear both:\n\n``` python\n        IOLoop.clear_current() # clear threadlocal current\n        IOLoop.clear_instance() # or del IOLoop._instance in tornado < 3.3\n\n        self.ioloop = IOLoop.instance()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43274085",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43274085",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43274085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc0MDg1",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T22:43:55Z",
    "updated_at": "2014-05-15T22:43:55Z",
    "author_association": "NONE",
    "body": "Ahh, that did it! I had to inject those lines before I create the tornado application. Thanks for your help, Min!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43274353",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43274353",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43274353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc0MzUz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T22:47:30Z",
    "updated_at": "2014-05-15T22:47:46Z",
    "author_association": "MEMBER",
    "body": "Related note: this is true of forking from any tornado app into another; the IPython kernel just happens to be a tornado app.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43274722",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43274722",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43274722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc0NzIy",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T22:53:13Z",
    "updated_at": "2014-05-15T22:53:13Z",
    "author_association": "NONE",
    "body": "On the other hand, this did work fine in Tornado 2.x and ipython 1.x. I wish I could use a thread instead of a process there since it would save a lot of memory, but I suppose the GIL precludes that possibility!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43275163",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43275163",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43275163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc1MTYz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T22:59:25Z",
    "updated_at": "2014-05-15T22:59:25Z",
    "author_association": "MEMBER",
    "body": "What are you doing that you have GIL issues? Since tornado is an eventloop, and that loop is already running, you could just create the web.Application and not call ioloop.start() because the global IOLoop is already running in the kernel process.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43275354",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43275354",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43275354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc1MzU0",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T23:01:59Z",
    "updated_at": "2014-05-15T23:01:59Z",
    "author_association": "NONE",
    "body": "Huh, I never considered that possibility! I should give this a try. Is there an easy way to figure out if an IOLoop is running? I'd like to maintain compatibility if the user is running without ipython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43276050",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43276050",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43276050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc2MDUw",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T23:12:20Z",
    "updated_at": "2014-05-15T23:12:20Z",
    "author_association": "NONE",
    "body": "Oh wow, this works fine as a thread! I never considered the possibility of hijacking ipython's IOLoop thread. This will literally halve the memory usage in pycortex, since I won't need to copy the data on fork.  Thanks for the suggestion!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43276419",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43276419",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43276419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc2NDE5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-15T23:17:53Z",
    "updated_at": "2014-05-15T23:18:05Z",
    "author_association": "MEMBER",
    "body": "> Is there an easy way to figure out if an IOLoop is running?\n\n`IOLoop.initialized()` should do it, though it's possible it will not work if a GUI eventloop has taken over from tornado.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43575971",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43575971",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43575971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTc1OTcx",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-20T00:57:06Z",
    "updated_at": "2014-05-20T00:57:06Z",
    "author_association": "NONE",
    "body": "Sorry to keep resurrecting this issue, but I seem to be running into another problem. After reimplementing my code to take advantage of IPython's already-running ioloop, i seem to be having some type of deadlock: https://gist.github.com/jamesgao/23395fb043d5dd939ee1\n\nAgain, this code runs fine with terminal ipython, but fails in ipython notebook. Is there anything obviously wrong? I'm intentionally running an infinite loop to simulate some long-running operation on the main thread.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43696755",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43696755",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43696755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjk2NzU1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-20T23:37:04Z",
    "updated_at": "2014-05-20T23:37:04Z",
    "author_association": "MEMBER",
    "body": "You are blocking the tornado eventloop with `time.sleep`, never giving your web handlers a chance to respond to the HTTP request.  When the tornado loop is running, there's nothing at all for your thread to do. Just tell the server to listen, and stop there.  Here's [a version](https://gist.github.com/minrk/e30b33abeee31bc4b7c7) of your script that works in the notebook.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43698750",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43698750",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43698750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjk4NzUw",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-21T00:08:41Z",
    "updated_at": "2014-05-21T00:08:41Z",
    "author_association": "NONE",
    "body": "Hmm, why would the time.sleep block on a completely different thread? I assumed the tornado eventloop runs on a thread that's split off internally by the notebook? Is that not the case?\n\nMy actual use case is I'm setting up a server that has bi-directional communication through websockets with the browser, similar to ipython. I have the main thread wait for a notification on the ioloop thread that a client has connected, in order to return a client handle to the user. Unfortunately, this is a deadlock with only a single thread; the notification will block the client for connecting, and the program crashes. How is the ioloop started by ipython notebook?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43699257",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43699257",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43699257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjk5MjU3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-21T00:16:48Z",
    "updated_at": "2014-05-21T00:17:13Z",
    "author_association": "MEMBER",
    "body": "> Hmm, why would the time.sleep block on a completely different thread?I assumed the tornado eventloop runs on a thread that's split off internally by the notebook? Is that not the case?\n\nNo, there's no reason to run the eventloop in another thread. The eventloop is in the main thread, and events (e.g. execution messages received) are handled in the eventloop thread. If we started the eventloop in a background thread, then all of IPython would happen in the background thread.\n\nI'm still not clear on your actual use case, or why you want to run a webserver on the kernel while talking to it simultaneously from the same process.  If you do want to run the server in the background, you can create a second IOLoop and set it up as the thread-local loop with `IOLoop.make_current()`.  Can you describe in more detail the sequence of events you want to happen, in terms of connections and user actions in the kernel?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43706466",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43706466",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43706466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzA2NDY2",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-21T02:36:58Z",
    "updated_at": "2014-05-21T02:42:39Z",
    "author_association": "NONE",
    "body": "Wait, so for any IPython kernel, there should be two threads -- the event loop thread, and the main thread, correct? When you execute a cell, the request get sent via the event loop into the main thread for execution?\n\nMy use case is an interactive visualization. I have a small library that I wrote that sets up an http server with websocket capability. The browser opens a page via webbrowser.open that connects back to the server with websockets. On the server side, I set up an Event object that waits for a client to connect, then it returns a handle to javascript on the client side. A more detailed sequence of events would be: \n    1. User creates cell with server.start(), webbrowser.open(), server.wait_for_client()\n    2. IPython kernel calls httpserver.listen, which uses IOLoop.add_handler in the event loop\n    3. Web browser opens, connects to the event loop for the webpage.\n    4. Javascript on the page instructs the webbrowser to connect to server using websockets\n    5. Main loop for the kernel is waiting for a signal from the event loop to indicate that javascript has connected\n    6. Main loop returns a handle to the websocket connection.\n\nPreviously, I completely forked the process on which the server resides, in order to prevent this kind of blocking and possible GIL issues. What would happen is the user would pass in data to be displayed, and the kernel would fork off an HTTP server into a separate process. The kernel would then wait until the browser connected, and returned to the user a handle, which would connect to the server via a pipe in order to send websocket commands.\n\nThis process is very cumbersome, and required tons of RAM, since the data that the user sent must be duplicated on fork. I tried to rewrite this with threads in order to reduce ram usage. In my gist, the while loop represents the event.wait() command that occurs in my library, waiting for the browser to connect. Of course, that wait actually blocks the event loop, and prevents the server from responding, hence the deadlock.\n\nTo put real code to this, here is the forking version of the code: https://github.com/gallantlab/pycortex/blob/master/cortex/webgl/serve.py (please ignore the StaticFileHandler copy, it was written before Tornado had support for 206 requests) and here is the threading version: https://github.com/gallantlab/pycortex/blob/nofork/cortex/webgl/serve.py\nThe WebApp object is instantiated by the user in a cell in IPython, the .start() is called, as well as the .get_client(). This initializes the server and waits for the self.connect event to occur, in order to acquire a JSProxy object, which acts somewhat like an RPC in reverse. This allows the user to directly manipulate javascript from IPython.\n\nI guess I can spin off a separate IOLoop in my own thread. However, I assumed that blocking commands in the ipython cell would not block the event loop started by IPython. Is my understanding flawed somehow?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43710804",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43710804",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43710804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzEwODA0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-21T04:17:18Z",
    "updated_at": "2014-05-21T04:17:18Z",
    "author_association": "MEMBER",
    "body": "> Wait, so for any IPython kernel, there should be two threads -- the event loop thread, and the main thread, correct? When you execute a cell, the request get sent via the event loop into the main thread for execution?\n\nThere is only one thread. The eventloop runs in the main thread, so there is no need to use threads for IPython itself. Sorry for my mixture of 'eventloop thread' and 'main thread' above – these are the same thing.\n\n> However, I assumed that blocking commands in the ipython cell would not block the event loop started by IPython. Is my understanding flawed somehow?\n\nThe eventloop only does one thing at a time - it gets an event, processes that event, then gets another event. Execution is one such handler, and responding to an HTTP request would be another. So processing a blocking execution would have to finish before an HTTP request is able to be processed.\n\nIf you need to handle events processed in the middle of an IPython execution, you probably want to run a separate IOLoop in a thread (this means using `IOLoop.current()`, not `IOLoop.instance()`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/43711106",
    "html_url": "https://github.com/ipython/ipython/issues/5862#issuecomment-43711106",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5862",
    "id": 43711106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzExMTA2",
    "user": {
      "login": "jamesgao",
      "id": 22802,
      "node_id": "MDQ6VXNlcjIyODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesgao",
      "html_url": "https://github.com/jamesgao",
      "followers_url": "https://api.github.com/users/jamesgao/followers",
      "following_url": "https://api.github.com/users/jamesgao/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesgao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesgao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesgao/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesgao/orgs",
      "repos_url": "https://api.github.com/users/jamesgao/repos",
      "events_url": "https://api.github.com/users/jamesgao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesgao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-21T04:25:03Z",
    "updated_at": "2014-05-21T04:25:03Z",
    "author_association": "NONE",
    "body": "Ahhhh thank you very much for the clarification. I see why there is a deadlock now. Thank you again!\n"
  }
]
