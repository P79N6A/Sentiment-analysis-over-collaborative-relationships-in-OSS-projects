[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/84244555",
    "html_url": "https://github.com/ipython/ipython/issues/8101#issuecomment-84244555",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8101",
    "id": 84244555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjQ0NTU1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-21T04:03:03Z",
    "updated_at": "2015-03-21T04:03:03Z",
    "author_association": "MEMBER",
    "body": "I don't like the sound of AbstractHasTraits. Maybe we should have made the higher level methods that you shouldn't override, but handlers call directly, the ones with less obvious names, e.g. `delete_object_and_checkpoint`, where `delete` just deletes the target.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/84672623",
    "html_url": "https://github.com/ipython/ipython/issues/8101#issuecomment-84672623",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8101",
    "id": 84672623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjcyNjIz",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-22T18:46:05Z",
    "updated_at": "2015-03-22T18:46:05Z",
    "author_association": "MEMBER",
    "body": "> I don't like the sound of AbstractHasTraits.\n\nIs your concern here about implementation complexity, or do you think the notion of an `AbstractHasTraits` doesn't seem useful?  It seems to me that the bug I ran into here, namely failing to override a method for which the superclass requires an override to function correctly, is precisely the problem that's addressed by ABCMeta by alerting you at construction time that your object isn't fulfilling the contract of its inheritance tree.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/84672660",
    "html_url": "https://github.com/ipython/ipython/issues/8101#issuecomment-84672660",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8101",
    "id": 84672660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjcyNjYw",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-22T18:46:45Z",
    "updated_at": "2015-03-22T18:46:45Z",
    "author_association": "MEMBER",
    "body": "> Maybe we should have made the higher level methods that you shouldn't override, but handlers call directly, the ones with less obvious names, e.g. delete_object_and_checkpoint, where delete just deletes the target.\n\nThis probably would be better.  I guess the question now is whether it's worth the potential breakage to go back and rename these methods.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/84686944",
    "html_url": "https://github.com/ipython/ipython/issues/8101#issuecomment-84686944",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8101",
    "id": 84686944,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Njg2OTQ0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-22T19:52:34Z",
    "updated_at": "2015-03-22T19:52:34Z",
    "author_association": "MEMBER",
    "body": "At this point, I'd like to avoid breaking things just to pick better names. If we do go with the name-change approach, I would probably pick entirely new names, so we can deprecate/preserve the existing ones.\n\nHowever, an argument can be said that some ContentsManagers _should_ override `delete`. For instance, if the checkpoints are actually in git, then it doesn't make sense to remove them on delete of a file. I think in general, most ContentsManagers are going to need to be aware of their CheckpointsManager.\n\nBecause of that, I think it _is_ appropriate for a subclass to only implement delete, and not delete_file. So I'm not sure this is a case where ABC even solves the problem.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/85207674",
    "html_url": "https://github.com/ipython/ipython/issues/8101#issuecomment-85207674",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8101",
    "id": 85207674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjA3Njc0",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T21:38:27Z",
    "updated_at": "2015-03-23T21:38:27Z",
    "author_association": "MEMBER",
    "body": "> Because of that, I think it is appropriate for a subclass to only implement delete, and not delete_file. So I'm not sure this is a case where ABC even solves the problem.\n\nYou can still override `delete` and \"ignore\" `delete_file` if the parent is an ABC; your class just has to explicitly re-implement `delete_file` with a no-op or somesuch.  But if you do that you're explicitly rejecting the default behavior, and you're running the risk that a future implementation of `ContentsManager` and/or the classes that use its interfaces will depend explicitly on `delete_file`.  So even if it's reasonable for _some_ implementations to implement `delete` rather than `delete_file`, I'd argue that overriding the higher-level operation is \"more dangerous\", in the sense that you need to know a lot more about the implementation of your Checkpoints class and the `ContentsManager` base class to produce a correct subclass.  As a subclass implementer, I'd rather be warned and forced to write a bit of boilerplate to acknowledge that I'm doing the less safe thing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/85237090",
    "html_url": "https://github.com/ipython/ipython/issues/8101#issuecomment-85237090",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8101",
    "id": 85237090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjM3MDkw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:50:54Z",
    "updated_at": "2015-03-23T22:50:54Z",
    "author_association": "MEMBER",
    "body": "Makes sense. I'm generally not a fan of ABCs (I think none of what we do with ABCs right now in IPython is useful to anyone in any way, but I also know we aren't doing it properly).\n\nAs long as it doesn't need more mixins, or producing something like AbstractHasTraits, then I'm okay with using ABCs to communicate the interface. Personally, though, I think documenting the interface (also not done) is all we should do.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/317219164",
    "html_url": "https://github.com/ipython/ipython/issues/8101#issuecomment-317219164",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8101",
    "id": 317219164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzIxOTE2NA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-23T00:14:27Z",
    "updated_at": "2017-07-23T00:14:27Z",
    "author_association": "MEMBER",
    "body": "Closing as this issue is not in IPython itself and if still problematic and relevant should be opened on the right repository.  This will allow to keep the number of opened issue on the IPython repo under control. \r\n\r\nFeel free to keep commenting or reopen if necessary.\r\n\r\nThanks."
  }
]
