[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12982621",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-12982621",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 12982621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTgyNjIx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T06:33:45Z",
    "updated_at": "2013-02-01T06:33:45Z",
    "author_association": "MEMBER",
    "body": "So I am assuming these keys got updated in the actual kernel side sending?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12983068",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-12983068",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 12983068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTgzMDY4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T07:00:59Z",
    "updated_at": "2013-02-01T07:00:59Z",
    "author_association": "MEMBER",
    "body": "yes - If I had missed it on both sides, there would be no symptom.  Just a matter of find/replace not looking in the javascript files.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12994003",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-12994003",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 12994003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTk0MDAz",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T13:30:04Z",
    "updated_at": "2013-02-01T13:30:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does it mean #2854 is a backward incompatible change?  In this case it is not difficult to make client compatible to both versions, but I think strictly speaking protocol major version should be bumped.\n\nI wounder what happens if I connect to old kernel using for example `ipython console --existing ...` now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13002531",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-13002531",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 13002531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDAyNTMx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T16:48:43Z",
    "updated_at": "2013-02-01T16:48:43Z",
    "author_association": "MEMBER",
    "body": "@tkf protocol major version _has_ been bumped.  We do not need to rev it ever again between now and 0.14\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13004062",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-13004062",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 13004062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDA0MDYy",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T17:21:48Z",
    "updated_at": "2013-02-01T17:21:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, I guess that's the answer to my question in #2792.  You don't update major version if there is a backward incompatible change in dev branch.  I just wanted to note that you will have problem when you use dev branch and another version (e.g., running `ipython kernel` using 0.13 and connecting to it by `ipython console` using dev branch).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13004719",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-13004719",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 13004719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDA0NzE5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T17:35:13Z",
    "updated_at": "2013-02-01T17:35:13Z",
    "author_association": "MEMBER",
    "body": "> So, I guess that's the answer to my question in #2792.\n\nRight, I think I answered there as well.  We rev it only the _first_ time we make such a change, which this time around was adding the version itself.  Though we need to think about the difference between this and a protocol version (set_next_input and pager are not in the message spec), so I am not sure what we would do if this were a new change, since it does not actually affect the message spec as it is defined now.\n\n> I just wanted to note that you will have problem when you use dev branch and another version (e.g., running ipython kernel using 0.13 and connecting to it by ipython console using dev branch).\n\nThe wire format isn't the same, it won't even get a chance to miss the payload. IPython dev is not at all backwards compatible with 0.13.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13005702",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-13005702",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 13005702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDA1NzAy",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T17:57:34Z",
    "updated_at": "2013-02-01T17:57:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am sorry I missed your answer in #2792.  And you are right that #2854 does not change message spec.  The message spec does not specify what can be in payload so we can put virtually anything to it.  Yes, it would be nice if there is a way to track these changes (though it would be bad if it slows down IPython development...).\n\n> The wire format isn't the same, it won't even get a chance to miss the payload. IPython dev is not at all backwards compatible with 0.13.\n\nI didn't know that.  But that's not my point.  You can think of the case there is a kernel of dev branch before #2854 in a remote machine and connecting to it by the client of dev branch after #2854.  Something like this can happen with 0.14 and 0.15.dev in the future.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13005939",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-13005939",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 13005939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDA1OTM5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T18:03:07Z",
    "updated_at": "2013-02-01T18:03:07Z",
    "author_association": "MEMBER",
    "body": "It is true that we need to keep track of the payload stuff, but it mostly brings up the point that it makes no sense that the payload is the full Python import path.  @ellisonbg do you have a better idea for the payload keys?  It makes no sense for non-Python kernels to know precisely where IPython has defined functions that invoke the pager, and it also makes no sense that a change in the IPython module layout would affect frontends, both of which are true right now.  Why are these keys not just \"pager\" and \"set_next_input\"?\n\n> You can think of the case there is a kernel of dev branch before #2854 in a remote machine and connecting to it by the client of dev branch after #2854. Something like this can happen with 0.14 and 0.15.dev in the future.\n\nCorrect.  IPython 0.14dev was, before #2854, already totally incompatible with IPython 0.13.  In the course of 0.15dev, the _first_ time we make a change that frontends need to know about, the protocol spec should be updated.  Never again after that and before release.  I would consider it a bug that frontends need to know the import path of the pager function, so I would expect this to change one more time before 0.14, which again should have no effect on the protocol version since it is already updated.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13008783",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-13008783",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 13008783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDA4Nzgz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T19:05:39Z",
    "updated_at": "2013-02-01T19:05:39Z",
    "author_association": "MEMBER",
    "body": "Okay, adding this to another msg spec piece that should be revisited, just not here:\n\nPayload's currently track their source, which is the full Python path.  This is definitely inappropriate as we consider non-Python kernels, and it is not a good choice for the handler switch in frontends.  One option is to add a 'handler' key, that is not dependent on where the Python call originated (e.g. 'pager' or 'set_next_input').\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13008873",
    "html_url": "https://github.com/ipython/ipython/pull/2872#issuecomment-13008873",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2872",
    "id": 13008873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDA4ODcz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T19:07:47Z",
    "updated_at": "2013-02-01T19:07:47Z",
    "author_association": "MEMBER",
    "body": "I think this should be merged as is to fix the immediate breakage in the code.  But I also agree that we need to have a future discussion about this part of the message spec.  I think these names should probably be logical ('pager' and 'set_next_input').  But I also think that 'source' is a misleading name of the key (maybe `handler`).  But these changes break the message spec further so we need to consider them carefully.\n\nMerging now as this fix needs to get in.\n"
  }
]
