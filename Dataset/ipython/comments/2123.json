[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6911575",
    "html_url": "https://github.com/ipython/ipython/pull/2123#issuecomment-6911575",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2123",
    "id": 6911575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MTE1NzU=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-11T16:20:57Z",
    "updated_at": "2012-07-11T16:20:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Bah, didn't mean to accidentally close this PR.  Reopening.\n\nI'm a little curious why we don't just check for `_repr_pretty_` on the actual object itself at the beginning of the method.  I assume that it is so that the dispatch order can be more flexible:\n- Derived registered printer\n- Derived `_repr_pretty_`\n- Base registered printer\n- Base `_repr_pretty_`\n\nHowever this does preclude adding `_repr_pretty_` directly to the object as in\n\n```\nfrom __future__ import print_function\n\nclass A(object):\n    _repr_pretty_ = None\n\na = A()\na._repr_pretty_ = lambda obj, p, cycle: print(\"A()\")\n```\n\nAll of this is surely outside the scope of the pull request (and original issue), but it is something to think about.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6984908",
    "html_url": "https://github.com/ipython/ipython/pull/2123#issuecomment-6984908",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2123",
    "id": 6984908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODQ5MDg=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-14T17:32:48Z",
    "updated_at": "2012-07-14T17:32:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks good, thanks for the tests, too!\n"
  }
]
