[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236171",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-236171",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 236171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjE3MQ==",
    "user": {
      "login": "ipython",
      "id": 230453,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjIzMDQ1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/230453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipython",
      "html_url": "https://github.com/ipython",
      "followers_url": "https://api.github.com/users/ipython/followers",
      "following_url": "https://api.github.com/users/ipython/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipython/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipython/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipython/subscriptions",
      "organizations_url": "https://api.github.com/users/ipython/orgs",
      "repos_url": "https://api.github.com/users/ipython/repos",
      "events_url": "https://api.github.com/users/ipython/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipython/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2010-05-10T09:34:20Z",
    "updated_at": "2010-05-10T09:34:20Z",
    "author_association": "COLLABORATOR",
    "body": "[ LP comment 1 by: Robert Cimrman, on 2009-08-12 08:40:53.292770+00:00 ]\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236172",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-236172",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 236172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjE3Mg==",
    "user": {
      "login": "ipython",
      "id": 230453,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjIzMDQ1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/230453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipython",
      "html_url": "https://github.com/ipython",
      "followers_url": "https://api.github.com/users/ipython/followers",
      "following_url": "https://api.github.com/users/ipython/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipython/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipython/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipython/subscriptions",
      "organizations_url": "https://api.github.com/users/ipython/orgs",
      "repos_url": "https://api.github.com/users/ipython/repos",
      "events_url": "https://api.github.com/users/ipython/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipython/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2010-05-10T09:34:21Z",
    "updated_at": "2010-05-10T09:34:21Z",
    "author_association": "COLLABORATOR",
    "body": "[ LP comment 2 by: Fernando Perez, on 2010-04-26 06:07:25.063351+00:00 ]\n\nI'm afraid that for now, IPython's debugger is pretty much welded to living inside a  'real ipython'.  It simply assumes in too many places that the ipython machinery is already up and running.\n\nIt would be definitely great to decouple them, but it's a fairly non-trivial job.  I'm marking this as a wishlist item so we don't forget about it, but I don't think it will happen soon, unfortunately.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236173",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-236173",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 236173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjE3Mw==",
    "user": {
      "login": "ipython",
      "id": 230453,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjIzMDQ1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/230453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipython",
      "html_url": "https://github.com/ipython",
      "followers_url": "https://api.github.com/users/ipython/followers",
      "following_url": "https://api.github.com/users/ipython/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipython/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipython/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipython/subscriptions",
      "organizations_url": "https://api.github.com/users/ipython/orgs",
      "repos_url": "https://api.github.com/users/ipython/repos",
      "events_url": "https://api.github.com/users/ipython/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipython/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2010-05-10T09:34:22Z",
    "updated_at": "2010-05-10T09:34:22Z",
    "author_association": "COLLABORATOR",
    "body": "[ LP comment 3 by: Robert Cimrman, on 2010-04-26 07:43:56.257570+00:00 ]\n\nThanks Fernando.\n\nAs a workaround, is there a way to capture/silence/redirect to /dev/null somehow the ipython crash report output after pressing Ctrl-C? The crash per se does not matter, it's just the length of the output, that makes the interesting things I saw while debugging to scroll out of sight (and often even the terminal buffer).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236174",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-236174",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 236174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjE3NA==",
    "user": {
      "login": "ipython",
      "id": 230453,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjIzMDQ1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/230453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipython",
      "html_url": "https://github.com/ipython",
      "followers_url": "https://api.github.com/users/ipython/followers",
      "following_url": "https://api.github.com/users/ipython/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipython/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipython/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipython/subscriptions",
      "organizations_url": "https://api.github.com/users/ipython/orgs",
      "repos_url": "https://api.github.com/users/ipython/repos",
      "events_url": "https://api.github.com/users/ipython/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipython/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2010-05-10T09:34:23Z",
    "updated_at": "2010-05-10T09:34:23Z",
    "author_association": "COLLABORATOR",
    "body": "[ LP comment 4 by: Fernando Perez, on 2010-04-27 05:41:20+00:00 ]\n\nHi Robert,\n\nOn Mon, Apr 26, 2010 at 12:43 AM, Robert Cimrman cimrman3@ntc.zcu.cz wrote:\n\n> Thanks Fernando.\n> \n> As a workaround, is there a way to capture/silence/redirect to /dev/null\n> somehow the ipython crash report output after pressing Ctrl-C? The crash\n> per se does not matter, it's just the length of the output, that makes\n> the interesting things I saw while debugging to scroll out of sight (and\n> often even the terminal buffer).\n\nCertainly, I suspect the problem is  that ipython sets sys.excepthook\nto be its own (noisy) crash handler.\n\nJust save sys.excepthook before you start ipython's machinery to\nsys.old_excepthook, and restore it immediately once you exit the\nipython part and you shouldn't see the ipython internal handler\nanymore.\n\nLet me know if that works for you.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236175",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-236175",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 236175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjE3NQ==",
    "user": {
      "login": "ipython",
      "id": 230453,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjIzMDQ1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/230453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipython",
      "html_url": "https://github.com/ipython",
      "followers_url": "https://api.github.com/users/ipython/followers",
      "following_url": "https://api.github.com/users/ipython/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipython/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipython/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipython/subscriptions",
      "organizations_url": "https://api.github.com/users/ipython/orgs",
      "repos_url": "https://api.github.com/users/ipython/repos",
      "events_url": "https://api.github.com/users/ipython/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipython/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2010-05-10T09:34:23Z",
    "updated_at": "2010-05-10T09:34:23Z",
    "author_association": "COLLABORATOR",
    "body": "[ LP comment 5 by: Robert Cimrman, on 2010-04-27 11:30:33+00:00 ]\n\nOn 04/27/10 07:41, Fernando Perez wrote:\n\n> Hi Robert,\n> \n> On Mon, Apr 26, 2010 at 12:43 AM, Robert Cimrmancimrman3@ntc.zcu.cz  wrote:\n> \n> > Thanks Fernando.\n> > \n> > As a workaround, is there a way to capture/silence/redirect to /dev/null\n> > somehow the ipython crash report output after pressing Ctrl-C? The crash\n> > per se does not matter, it's just the length of the output, that makes\n> > the interesting things I saw while debugging to scroll out of sight (and\n> > often even the terminal buffer).\n> \n> Certainly, I suspect the problem is  that ipython sets sys.excepthook\n> to be its own (noisy) crash handler.\n> \n> Just save sys.excepthook before you start ipython's machinery to\n> sys.old_excepthook, and restore it immediately once you exit the\n> ipython part and you shouldn't see the ipython internal handler\n> anymore.\n> \n> Let me know if that works for you.\n\nPerfect! I will use the following function:\n\ndef debug():\n     try:\n         old_excepthook = sys.excepthook\n         import ipdb as pdb\n         sys.excepthook = old_excepthook\n\n```\n except:\n     import pdb\n\n pdb.set_trace()\n```\n\nDo you happen to know how to avoid pressing 'n' to get to the caller's frame?\n\ncheers,\nr.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236176",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-236176",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 236176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjE3Ng==",
    "user": {
      "login": "ipython",
      "id": 230453,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjIzMDQ1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/230453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipython",
      "html_url": "https://github.com/ipython",
      "followers_url": "https://api.github.com/users/ipython/followers",
      "following_url": "https://api.github.com/users/ipython/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipython/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipython/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipython/subscriptions",
      "organizations_url": "https://api.github.com/users/ipython/orgs",
      "repos_url": "https://api.github.com/users/ipython/repos",
      "events_url": "https://api.github.com/users/ipython/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipython/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2010-05-10T09:34:24Z",
    "updated_at": "2010-05-10T09:34:24Z",
    "author_association": "COLLABORATOR",
    "body": "[ LP comment 6 by: Fernando Perez, on 2010-04-27 17:22:46+00:00 ]\n\nHi Robert,\n\nOn Tue, Apr 27, 2010 at 4:30 AM, Robert Cimrman cimrman3@ntc.zcu.cz wrote:\n\n> Perfect! I will use the following function:\n\nGreat, glad it worked.\n\n> Do you happen to know how to avoid pressing 'n' to get to the caller's\n> frame?\n\nNo idea, sorry.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236177",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-236177",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 236177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjE3Nw==",
    "user": {
      "login": "ipython",
      "id": 230453,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjIzMDQ1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/230453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipython",
      "html_url": "https://github.com/ipython",
      "followers_url": "https://api.github.com/users/ipython/followers",
      "following_url": "https://api.github.com/users/ipython/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipython/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipython/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipython/subscriptions",
      "organizations_url": "https://api.github.com/users/ipython/orgs",
      "repos_url": "https://api.github.com/users/ipython/repos",
      "events_url": "https://api.github.com/users/ipython/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipython/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2010-05-10T09:34:25Z",
    "updated_at": "2010-05-10T09:34:25Z",
    "author_association": "COLLABORATOR",
    "body": "[ LP comment 7 by: Robert Cimrman, on 2010-04-28 08:04:39+00:00 ]\n\nOn 04/27/10 19:22, Fernando Perez wrote:\n\n> Hi Robert,\n> \n> On Tue, Apr 27, 2010 at 4:30 AM, Robert Cimrmancimrman3@ntc.zcu.cz  wrote:\n> \n> > Perfect! I will use the following function:\n> \n> Great, glad it worked.\n> \n> > Do you happen to know how to avoid pressing 'n' to get to the caller's\n> > frame?\n> \n> No idea, sorry.\n\nI have a working solution now, see below. The only problem is, that sphinx' \nautomodule directive ignores the returned debug() function, but this problem \ncan be solved by adding it directly using autofunction:\n\n.. automodule:: my_module\n    :members:\n    :undoc-members:\n\n```\n.. autofunction:: my_module.debug\n```\n\nIn my_module:\n\ndef get_debug():\n     \"\"\"\n     Utility function providing `debug()` function.\n     \"\"\"\n     old_excepthook = sys.excepthook\n\n```\n try:\n     import ipdb\n except ImportError:\n     debug = None\n else:\n     debug = ipdb.set_trace\n\n if debug is None:\n     try:\n         from IPython.Debugger import Pdb\n         from IPython.Shell import IPShell\n         from IPython import ipapi\n     except ImportError:\n         pass\n     else:\n         shell = IPShell(argv=[''])\n         def debug():\n             ip = ipapi.get()\n             def_colors = ip.options.colors\n             Pdb(def_colors).set_trace(sys._getframe().f_back)\n\n if debug is None:\n     import pdb\n     debug = pdb.set_trace\n\n sys.excepthook = old_excepthook\n\n debug.__doc__ = \"\"\"\n Start debugger on line where it is called, roughly equivalent to::\n\n     import pdb; pdb.set_trace()\n\n First, this function tries to use `ipdb` (`IPython`-enabled `pdb`).\n\n If it is not installed, the function resorts to trying to start the\n debugger directly using the `IPython` API.\n\n When this fails too, the plain old `pdb` is used instead.\n \"\"\"\n\n return debug\n```\n\ndebug = get_debug()\n\ncheers,\nr.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236178",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-236178",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 236178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjE3OA==",
    "user": {
      "login": "ipython",
      "id": 230453,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjIzMDQ1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/230453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipython",
      "html_url": "https://github.com/ipython",
      "followers_url": "https://api.github.com/users/ipython/followers",
      "following_url": "https://api.github.com/users/ipython/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipython/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipython/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipython/subscriptions",
      "organizations_url": "https://api.github.com/users/ipython/orgs",
      "repos_url": "https://api.github.com/users/ipython/repos",
      "events_url": "https://api.github.com/users/ipython/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipython/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2010-05-10T09:34:26Z",
    "updated_at": "2010-05-10T09:34:26Z",
    "author_association": "COLLABORATOR",
    "body": "[ LP comment 8 by: Fernando Perez, on 2010-04-28 17:42:05.185350+00:00 ]\n\nOK, great.  This bug stays tagged as wishlist, so we can effectively provide something like what you are doing, with a publicly supported api.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2892997",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-2892997",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 2892997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTI5OTc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-28T05:24:57Z",
    "updated_at": "2011-11-28T05:24:57Z",
    "author_association": "MEMBER",
    "body": "This has now been fixed, though the api is minimally different:\n\n``` python\nfrom IPython.core.debugger import Tracer\ndebug = Tracer()\n\nprint 'hello'\n\ndebug()\n\nprint 'hello again'\n\n1/0\n```\n\nIf the above is put in a file, it works as expected.  Closing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19578970",
    "html_url": "https://github.com/ipython/ipython/issues/57#issuecomment-19578970",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/57",
    "id": 19578970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTc4OTcw",
    "user": {
      "login": "nealmcb",
      "id": 119472,
      "node_id": "MDQ6VXNlcjExOTQ3Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/119472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nealmcb",
      "html_url": "https://github.com/nealmcb",
      "followers_url": "https://api.github.com/users/nealmcb/followers",
      "following_url": "https://api.github.com/users/nealmcb/following{/other_user}",
      "gists_url": "https://api.github.com/users/nealmcb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nealmcb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nealmcb/subscriptions",
      "organizations_url": "https://api.github.com/users/nealmcb/orgs",
      "repos_url": "https://api.github.com/users/nealmcb/repos",
      "events_url": "https://api.github.com/users/nealmcb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nealmcb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-17T22:19:47Z",
    "updated_at": "2013-06-17T22:19:47Z",
    "author_association": "NONE",
    "body": "Thanks. \n\nI got this error message:\n\n ImportError: \"No module named Debugger\" \n\nwhen using the previous idiom:\n  from IPython.Debugger import Tracer; debug_here = Tracer()\n\nand the new api you note in https://github.com/ipython/ipython/issues/57#issuecomment-2892997 is just what I was looking for.  Hopefully this will help other searchers find it quickly.\n"
  }
]
