[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/269437817",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-269437817",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 269437817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTQzNzgxNw==",
    "user": {
      "login": "srinivasreddy",
      "id": 198396,
      "node_id": "MDQ6VXNlcjE5ODM5Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/198396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srinivasreddy",
      "html_url": "https://github.com/srinivasreddy",
      "followers_url": "https://api.github.com/users/srinivasreddy/followers",
      "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions",
      "organizations_url": "https://api.github.com/users/srinivasreddy/orgs",
      "repos_url": "https://api.github.com/users/srinivasreddy/repos",
      "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srinivasreddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-28T07:25:59Z",
    "updated_at": "2016-12-28T07:25:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Short answer:\r\n\r\nI suppose so at least until 3.6  becomes the minimum version we support in 3.x series.\r\n\r\nLong answer:\r\n\r\nSince this was introduced in 3.6, we also support 3.4,3.5, i think it is better to keep the behavior as is. On the other hand, we anyway have an ordered dict, and a user can always use that.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/269512825",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-269512825",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 269512825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTUxMjgyNQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-28T17:47:12Z",
    "updated_at": "2016-12-28T17:47:12Z",
    "author_association": "MEMBER",
    "body": "Also, the order preservation is, at least for now, an implementation detail, not a feature that should be relied on. So no, I don't think we should change the behaviour just yet."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/317596862",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-317596862",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 317596862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzU5Njg2Mg==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-25T00:56:48Z",
    "updated_at": "2017-07-25T00:56:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Apparently this can make teaching more complicated:\r\nhttps://mastodon.social/@aparrish/13011522"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/317828930",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-317828930",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 317828930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzgyODkzMA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-25T18:34:05Z",
    "updated_at": "2017-07-25T18:34:05Z",
    "author_association": "MEMBER",
    "body": "Reopening, I got complaints at PyCon as well from Mike Muller. I think we are trying to be friendly enough with teaching that we can consider removing the sorting."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/318887403",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-318887403",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 318887403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODg4NzQwMw==",
    "user": {
      "login": "smarnach",
      "id": 249196,
      "node_id": "MDQ6VXNlcjI0OTE5Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/249196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smarnach",
      "html_url": "https://github.com/smarnach",
      "followers_url": "https://api.github.com/users/smarnach/followers",
      "following_url": "https://api.github.com/users/smarnach/following{/other_user}",
      "gists_url": "https://api.github.com/users/smarnach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smarnach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smarnach/subscriptions",
      "organizations_url": "https://api.github.com/users/smarnach/orgs",
      "repos_url": "https://api.github.com/users/smarnach/repos",
      "events_url": "https://api.github.com/users/smarnach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smarnach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-30T08:40:46Z",
    "updated_at": "2017-07-30T08:41:31Z",
    "author_association": "NONE",
    "body": "While the reasoning that the dictionary order should be considered an implementation detail makes sense, the current behaviour has definitely confused a lot of people.  Latest evidence: [this question on StackOverflow](https://stackoverflow.com/questions/45347084/how-can-ordereddict-know-about-the-element-order-of-an-already-instantiated-dict).\r\n\r\nHow about checking whether the Python implementation maintains dictionary order, and only sorting the keys if it doesn't?  This should give reasonable behaviour in all versions of Python."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/319759332",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-319759332",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 319759332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc1OTMzMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T18:33:31Z",
    "updated_at": "2017-08-02T18:33:31Z",
    "author_association": "MEMBER",
    "body": "I'd like to not have an implementation that depends on the Python version. Then you can show \"Hey on 3.4 order is arbitrary\", and \"on 3.6 it's not\". "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/319762556",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-319762556",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 319762556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc2MjU1Ng==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T18:45:41Z",
    "updated_at": "2017-08-02T18:45:41Z",
    "author_association": "MEMBER",
    "body": "cc @pya which I believe will be for deactivating sorting. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/319772342",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-319772342",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 319772342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc3MjM0Mg==",
    "user": {
      "login": "fterbo",
      "id": 25494298,
      "node_id": "MDQ6VXNlcjI1NDk0Mjk4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25494298?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fterbo",
      "html_url": "https://github.com/fterbo",
      "followers_url": "https://api.github.com/users/fterbo/followers",
      "following_url": "https://api.github.com/users/fterbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/fterbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fterbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fterbo/subscriptions",
      "organizations_url": "https://api.github.com/users/fterbo/orgs",
      "repos_url": "https://api.github.com/users/fterbo/repos",
      "events_url": "https://api.github.com/users/fterbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fterbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T19:23:08Z",
    "updated_at": "2017-08-02T19:23:08Z",
    "author_association": "NONE",
    "body": "Displaying objects, in both IPython REPL and CPython REPL, has never shown you various vagaries of their *internal* structure.  This is for a lot of reasons (character set problems when displaying bytes, no `__str__`/`__repr__` methods, etc.), but the fact remains - you should never rely on the user-consumable *printed* version of an object to be a 100% faithful representation, regardless of where you're printing it.\r\n\r\nDisplayed objects are not a replacement for reading the documentation.  If you are surprised that `.items()`, `.values()`, and `.keys()` return in a different sequence than what is displayed, that is not the fault of IPython."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/319788820",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-319788820",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 319788820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc4ODgyMA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T20:29:16Z",
    "updated_at": "2017-08-02T20:29:16Z",
    "author_association": "MEMBER",
    "body": "> Displaying objects, in both IPython REPL and CPython REPL, has never shown you various vagaries of their internal structure. This is for a lot of reasons (character set problems when displaying bytes, no __str__/__repr__ methods, etc.), \r\n\r\nThough the current Python REPL does display dict with their keys ordered, and not random. So the implementation details do leak. \r\n\r\n> but the fact remains - you should never rely on the user-consumable printed version of an object to be a 100% faithful representation, regardless of where you're printing it.\r\n\r\nWe not asking to rely, I think it is a question of _convenience_. Having consistent representation of object that map to the behavior of  `.items()`, `.values()`, and `.keys()`  is helpful for beginners. \r\n \r\n\r\n> Displayed objects are not a replacement for reading the documentation. If you are surprised that .items(), .values(), and .keys() return in a different sequence than what is displayed, that is not the fault of IPython.\r\n\r\nWell in this specific case it is, we do call a `sorted()` explicitly. I've submitted PR https://github.com/ipython/ipython/pull/10730 which remove the key sorting, so the order of the displayed keys will be the one of `.keys()`.  After asking `@fperez` he thinks that we might want to wait a bit more to know wether order is really an implementation details, or wether it will be promoted as a language feature.\r\n\r\nCf also https://github.com/ipython/ipython/issues/10581 which gives workarounds. \r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/321611312",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-321611312",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 321611312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTYxMTMxMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-10T16:57:06Z",
    "updated_at": "2017-08-10T16:57:06Z",
    "author_association": "MEMBER",
    "body": "There seem to a majority of people against removing the sorting of keys. See #10581 and [thread on the mailing list](https://mail.python.org/pipermail/ipython-dev/2017-August/016283.html), so I'm going to post-pone changing the default repr for now, and we can revisit that later if necessary. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/352622316",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-352622316",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 352622316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjYyMjMxNg==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T02:38:12Z",
    "updated_at": "2017-12-19T02:38:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's time to revisit this, because Python dicts are now officially ordered: https://mail.python.org/pipermail/python-dev/2017-December/151283.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/352718142",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-352718142",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 352718142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjcxODE0Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T11:13:12Z",
    "updated_at": "2017-12-19T11:13:12Z",
    "author_association": "MEMBER",
    "body": "I've clicked through that thread, and there's a similar discussion going on for the stdlib `pprint` module, with no clear consensus yet.\r\n\r\nOne the one hand, showing dictionaries in insertion order makes it easier to explain how Python dictionaries (now) work. On the other hand, dicts are used in many scenarios where insertion order does not matter, and it may not be under the user's control (e.g. HTTP headers). Showing them sorted by key is still more convenient for humans to quickly see things like \"what's the value for transfer-encoding?\" or \"does it have a content-length field?\"\r\n\r\nWe'll probably end up making an option for this, but it's still going to be tough to decide on the default. My gut feeling is that displaying dicts in sorted order is more useful the vast majority of the time, but the times when you want them to appear in insertion order (teaching people Python) are exactly the times when you don't want to have to fiddle with config."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/352843575",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-352843575",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 352843575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjg0MzU3NQ==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T18:21:55Z",
    "updated_at": "2017-12-19T18:21:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm kind of disturbed at the idea that IPython's repr would not default to\naccurately representing the objects I'm working with. If dict iteration\norder is part of their semantics – which it is now – then I want my REPL to\nshow me that order. It's true that this is particularly important for\nteaching (see the link above to Allison Parrish's experience with this),\nbut it's not just students who rely on IPython to accurately describe the\nobjects they're working with.\n\nNot sorting also gives very intuitive output in lots of cases, e.g.\n'json.load(...)' will print the keys in the same order they are in the file\nI'm looking at in the next window over. HTTP headers are printed in the\nsame order they appear on the wire. Etc.\n\nAFAICT the entire argument about pprint in that thread is \"the pprint docs\nsaid we sort the keys, therefore there can never be any discussion about\nwhether that's still a good default, for our docs are forever inscribed in\nstone\". Pretty sure IPython hasn't made any similar commitments about its\nimplicit repr() output.\n\nI agree it'd be nice to have some way to sort the keys in some situations.\nRather than making this a piece of global configuration though, I'd be more\ninterested in if there was a quick and easy way to request it for a\nparticular situation.\n\nOn Dec 19, 2017 3:13 AM, \"Thomas Kluyver\" <notifications@github.com> wrote:\n\n> I've clicked through that thread, and there's a similar discussion going\n> on for the stdlib pprint module, with no clear consensus yet.\n>\n> One the one hand, showing dictionaries in insertion order makes it easier\n> to explain how Python dictionaries (now) work. On the other hand, dicts are\n> used in many scenarios where insertion order does not matter, and it may\n> not be under the user's control (e.g. HTTP headers). Showing them sorted by\n> key is still more convenient for humans to quickly see things like \"what's\n> the value for transfer-encoding?\" or \"does it have a content-length field?\"\n>\n> We'll probably end up making an option for this, but it's still going to\n> be tough to decide on the default. My gut feeling is that displaying dicts\n> in sorted order is more useful the vast majority of the time, but the times\n> when you want them to appear in insertion order (teaching people Python)\n> are exactly the times when you don't want to have to fiddle with config.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/issues/10110#issuecomment-352718142>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAlOaAV5lgzQAowWv_CA0DgvzU_aUsxPks5tB5phgaJpZM4LWpYm>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/352845374",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-352845374",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 352845374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjg0NTM3NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T18:28:40Z",
    "updated_at": "2017-12-19T18:28:40Z",
    "author_association": "MEMBER",
    "body": "Yeah, I think showing them in insertion order in 3.7 is probably the right thing to do. I just don't think it's as clear cut as you're suggesting. And I fully expect to get bugs filed by people who like the existing behaviour."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/353330023",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-353330023",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 353330023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzMzMDAyMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T11:38:15Z",
    "updated_at": "2017-12-21T11:38:15Z",
    "author_association": "MEMBER",
    "body": "Does anyone know if the pronouncement for dicts in 3.7 also applies to sets? IIRC in CPython they share most of their implementation, but I don't know if the change in language definition applies to sets as well."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/353330410",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-353330410",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 353330410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzMzMDQxMA==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T11:40:34Z",
    "updated_at": "2017-12-21T11:40:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think sets and dicts actually share any implementation in CPython (surprisingly), and sets haven't become ordered either in theory or in practice."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/353332033",
    "html_url": "https://github.com/ipython/ipython/issues/10110#issuecomment-353332033",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10110",
    "id": 353332033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzMzMjAzMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T11:49:41Z",
    "updated_at": "2017-12-21T11:49:41Z",
    "author_association": "MEMBER",
    "body": "PR #10958"
  }
]
