[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1055803",
    "html_url": "https://github.com/ipython/ipython/issues/401#issuecomment-1055803",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/401",
    "id": 1055803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTU4MDM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-25T23:48:43Z",
    "updated_at": "2011-04-25T23:48:43Z",
    "author_association": "MEMBER",
    "body": "I'm intrigued by what you mean by 'not created'.  What is the actual symptom?  It must get a msg_id, I don't see how it's possible for that to fail.  Are there any errors in the output of the Controller?\n\nWe do have the option to wait for a message to actually get sent to the scheduler.  Just set `lbview.track=True`, and then after apply, call `ar.wait_for_send()`.  This is optional, because there aren't race conditions unless you are editing buffers in-place after sending them, and it can increase submission latency significantly - one of those 'not a bug, but a feature', but it can certainly be a dangerous feature common to all systems that allow non-copying sends.\n\nI don't actually see where there could be a race condition on a buffer here, though, so there's quite possibly a bug somewhere.  I would like some more information on what particular step is failing to happen.\n\nTo see if all your tasks were created/submitted, you can do:\n\n`records = self.ip_client.db_query({'msg_id' : {'$in' : self.ip_client.history}}, keys=['header', 'completed', 'engine_uuid'])`\nif `len(records) == len(self.ip_client.history)`, then all the tasks were created and made it to the controller  \n`arrived = filter(lambda rec: rec['engine_uuid'] is not None, records)` # the tasks that arrived on an engine  \n`finished = filter(lambda rec: rec['completed'] is not None, records)` # the tasks that finished somewhere (success or failure)  \n\nIf all of those lists are the same, then every task was submitted and finished.  If there was a race condition, then the data in some tasks could have been clobbered by the following one.  You can check on the message data to see if any of them are actually not what they should be.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1109015",
    "html_url": "https://github.com/ipython/ipython/issues/401#issuecomment-1109015",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/401",
    "id": 1109015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDkwMTU=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-06T00:29:15Z",
    "updated_at": "2011-05-06T00:29:15Z",
    "author_association": "NONE",
    "body": "Here's a stripped down script which creates tasks in a loop:\n\n``` python\nfrom IPython.parallel import Client\nimport time\nimport os\n\nclient = Client()\nlbview = client.load_balanced_view()\n\ndef do_nothing(render_script, env_dict):\n    os.listdir(\".\")\n\nnum_tasks = 100\ntask_frames = range(1, num_tasks + 1, 1)\nfor x in task_frames:\n    env_dict = {}\n    render_script = \"foo\"\n    ar = lbview.apply(do_nothing, render_script, env_dict)\n    # avoid race condition\n    #time.sleep(0.2)\n\nrecords = client.db_query({'msg_id' : {'$in' : client.history}}, keys=['header', 'completed', 'engine_uuid'])\nprint \"records: \"+str(len(records))\nprint \"history: \"+str(len(client.history))\n\ntime.sleep(20)\n\narrived = filter(lambda rec: rec['engine_uuid'] is not None, records)\nprint \"arrived tasks: \"+str(len(arrived))\n\nfinished = filter(lambda rec: rec['completed'] is not None, records)\nprint \"finished tasks: \"+str(len(finished))\n```\n\nIt gives different output, but you can see that not all tasks can be created:\n\n``` bash\n$ python2.6 job_create_race.py \nrecords: 56\nhistory: 100\narrived tasks: 29\nfinished tasks: 25\n\n$ python2.6 job_create_race.py \nrecords: 22\nhistory: 100\narrived tasks: 10\nfinished tasks: 6\n\n$ python2.6 job_create_race.py \nrecords: 8\nhistory: 100\narrived tasks: 5\nfinished tasks: 1\n\n```\n\nIf you wait a short while after each task with \"time.sleep(0.2)\", then you seem to get all tasks:\n\n``` bash\n$ python2.6 job_create_race.py \nrecords: 100\nhistory: 100\narrived tasks: 100\nfinished tasks: 100\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1109073",
    "html_url": "https://github.com/ipython/ipython/issues/401#issuecomment-1109073",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/401",
    "id": 1109073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDkwNzM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-06T00:50:07Z",
    "updated_at": "2011-05-06T00:50:07Z",
    "author_association": "MEMBER",
    "body": "Ah, okay.  I thought you were saying that the jobs weren't happening, but it's actually a problem in the record creation.  Have you tried this with the `retries` branch in #413?  I think this is related to the collision detection issues I fixed yesterday.\n\nNote that you are performing the `db_query` as soon as the jobs are submitted.  It should be on the other side of your `time.sleep()` (or you could use `client.wait()` to wait for the jobs to actually finish), if you want the information to be up to date.\n\nI can reproduce this in  master, but not in my `retries` branch.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1263437",
    "html_url": "https://github.com/ipython/ipython/issues/401#issuecomment-1263437",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/401",
    "id": 1263437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjM0Mzc=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-30T20:29:50Z",
    "updated_at": "2011-05-30T20:29:50Z",
    "author_association": "NONE",
    "body": "Yes, you are right. I modified my test script like you suggested.\nIt works with the changes of your 'retries' branch (which is already merged into master).\n"
  }
]
