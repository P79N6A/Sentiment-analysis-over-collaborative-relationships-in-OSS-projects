[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6303818",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6303818",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6303818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDM4MTg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T15:15:08Z",
    "updated_at": "2012-06-13T15:15:08Z",
    "author_association": "MEMBER",
    "body": "In the terminal, `page()` will only actually invoke a pager if the text won't fit on one screen. I wonder if it should be smarter in the notebook. The UI could also be expanded to let you shuttle information between the pager and the cell output. It's just an idea, but IMO it would be a nicer experience than command line style arguments.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6304505",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6304505",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6304505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ1MDU=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T15:38:29Z",
    "updated_at": "2012-06-13T15:38:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree.  If there is a way to switch the location to put paylod from the pager to the cell output, it is better solution.  Perhaps notebook UI should treat this problem.  I guess you will need some kind of metadata to hold where the payload should go to.  Maybe this should go to #1934 (Cell/Worksheet metadata)?  And I think you need to update notebook format to include payload in the notebook data.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6304614",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6304614",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6304614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ2MTQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T15:42:14Z",
    "updated_at": "2012-06-13T15:42:14Z",
    "author_association": "MEMBER",
    "body": "Does it need metadata? I'd have thought it could be done purely client side: when it handles a pager display message, count the lines, and if it's <10 (for example) stick it in a widget under the cell.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6304828",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6304828",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6304828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ4Mjg=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T15:50:16Z",
    "updated_at": "2012-06-13T15:50:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "How do you force file to go to the output area if the file has 11 lines?  I think there should be manual and persistent (it does the same thing when you reopen and reexecute the notebook) way to change the location.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6305844",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6305844",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6305844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDU4NDQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T16:25:27Z",
    "updated_at": "2012-06-13T16:25:27Z",
    "author_association": "MEMBER",
    "body": "Hmmm, I'm in two minds about that. On the one hand, I see the pager as something for transient extra information while you're working, not for lasting pieces of output. In that view, there's no need for persistence in where the output is displayed. On the other hand, I can see that you might sometimes want to make lasting output of things that are currently most easily accessed in the pager. For instance, if you want to make API documentation mixed with runnable examples.\n\nThe idea I'm having is to add more classes to `IPython.lib.display` - so instead of `%pycat --no-pager foo.py`, you would write `PyFile(\"foo.py\")`, and its `_repr_html_` would highlight the file. Similarly, `Autodoc(myobj)` could be integrated with docutils/sphinx to produce nice HTML. I think this would be more Pythonic than adding options to the relevant magic functions. Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6306751",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6306751",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6306751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDY3NTE=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T16:59:02Z",
    "updated_at": "2012-06-13T16:59:02Z",
    "author_association": "MEMBER",
    "body": "I always found that %pycat sending stuff to the pager in the notebook was weird. I it usefull for long output, but it might be worth considering sending to output once the scrollable output are available.\n\nWe could also have a magics that send it's output to the a new markdown cell below.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6306953",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6306953",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6306953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDY5NTM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T17:05:38Z",
    "updated_at": "2012-06-13T17:05:38Z",
    "author_association": "MEMBER",
    "body": "Sending to the pager is more important in the console interfaces, where long output messes up your session permanently.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6307080",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6307080",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6307080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDcwODA=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T17:10:32Z",
    "updated_at": "2012-06-13T17:10:32Z",
    "author_association": "MEMBER",
    "body": "yes, I was thinking of default to output only for notebook of course.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6307168",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6307168",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6307168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDcxNjg=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T17:14:05Z",
    "updated_at": "2012-06-13T17:14:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver I agree that having something like PyFile and Autodoc is good.  But I'd like to have shorthand notation for that at same time.\n\n@Carreau I think showing code in pager when using %pycat is consistent behavior because it does not remain in the \"main display\" which is what happens in terminal/qtconsole.  I think it is better to provide another option (or even different command) to put the contents in the persistent area (=cell output).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6307420",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6307420",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6307420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc0MjA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T17:23:06Z",
    "updated_at": "2012-06-13T17:23:06Z",
    "author_association": "MEMBER",
    "body": "@Carreau: That's not entirely trivial, though, because the kernel doesn't know what frontend is attached. The protocol would need some way to specify \"page this if you're terminal-like, display it as output if you're notebook-like\". And then which things should have that flag... I think the display protocol we already have is a better way to do this.\n\n@tkf : Coincidentally, they're the same length. ;-) But I think readability and consistency should outweigh brevity here - displaying this kind of information in a persistent way in a notebook strikes me as a relatively infrequent job (as opposed to pulling it up for transient display, which we do all the time).\n\n```\nPyFile(\"foo.py\")\n%pycat -n foo.py\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6314580",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6314580",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6314580,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTQ1ODA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T21:45:09Z",
    "updated_at": "2012-06-13T21:45:09Z",
    "author_association": "MEMBER",
    "body": "I don't think payloads belong in the notebook format.  payloads should be purely interactive features - I wouldn't want to open a notebook that triggers the pager without running a command, for instance.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6694033",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-6694033",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 6694033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTQwMzM=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-01T14:54:02Z",
    "updated_at": "2012-07-01T14:54:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver You should include `from IPython.somewhere... import PyFile` in the count! :)\n\nI understand weighting readability in persistent coding such as notebook is important.  But at the same time I want to get the job done without knowing too much about IPython API.  To use `PyFile`, you need to lookup API section in the IPython manual.  On the other hand, if all IPython magics which use pager provide `--no-pager` option (or similar), you can just guess it and check the exact option by `%pycat?`.  I suggest to make --no-pager option to the uniform interface for the magic commands which use pager.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7632496",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-7632496",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 7632496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzI0OTY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T02:09:09Z",
    "updated_at": "2012-08-10T02:09:09Z",
    "author_association": "MEMBER",
    "body": "Pinging the status of this PR.  Needs to be rebased.  It is waiting further review or additional coding?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7679820",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-7679820",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 7679820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzk4MjA=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T21:07:28Z",
    "updated_at": "2012-08-12T21:07:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this PR is still under discussion.  I was waiting for reply.  I will rebase if the feature I proposed going to be pulled.  As I said in the last comment, I think it is better to have --no-pager command for any magic command if it makes sense to putting result of the command in persistent manner.\n\nRegarding implementation, probably it is better to return some display object rather than printing?  So user can call\n\n```\nresult = %command --no-pager\n```\n\nand do something with result.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8094185",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-8094185",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 8094185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTQxODU=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-28T14:49:07Z",
    "updated_at": "2012-08-28T14:49:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Naively I would have expected a two separate magic functions `%pycat`, `%pyless` (or `%pymore`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8094627",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-8094627",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 8094627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTQ2Mjc=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-28T15:01:40Z",
    "updated_at": "2012-08-28T15:01:40Z",
    "author_association": "MEMBER",
    "body": "> Naively I would have expected a two separate magic functions %pycat, %pyless (or %pymore).\n\nI thought of it, but, that would mean breaking `%pycat` that actually behave like `%pymore`.\n\nIf we got his road, why not dropping he 'py' prefix, and have a smarter tool able to 'cat' all kind of file type like [termkit](http://acko.net/blog/on-termkit/) does.\n\nWe could then handle different syntactic coloration, and few image type that `Image` already handle. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8099401",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-8099401",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 8099401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTk0MDE=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-28T17:13:13Z",
    "updated_at": "2012-08-28T17:13:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "In terms of user interface, I think having uniform --no-pager option for commands is easier to find command.  It reduces amount of documentation user needs to look for.\n\nAlso, do we actually want magic to do the job when putting result of magic command in persistent manner?  As @takluyver said before, probably that is what API for.\n\nIf we are going to implement output using display class anyway instead of just printing to stdout, probably it's better to close this PR and then post another PR for `PyFile` display class API first?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8121266",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-8121266",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 8121266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjEyNjY=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-29T10:40:01Z",
    "updated_at": "2012-08-29T10:40:01Z",
    "author_association": "MEMBER",
    "body": "> In terms of user interface, I think having uniform --no-pager option for commands is easier to find command. It reduces amount of documentation user needs to look for.\n\nNot lots of magics use the pager.\n\nI would prefere sticking to unix naming. \n\n> If we are going to implement output using display class anyway instead of just printing to stdout, probably it's better to close this PR and then post another PR for PyFile display class API first?\n\nThen turn this PR into an issue to keep it in mind. \n\nAs for `PyFile` I think we should have a more generic name, at it would not deal only with file, but URL and not only python.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8121761",
    "html_url": "https://github.com/ipython/ipython/pull/1947#issuecomment-8121761",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1947",
    "id": 8121761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjE3NjE=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-29T11:03:21Z",
    "updated_at": "2012-08-29T11:03:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Let's say we have pager for `%who`.  How can we stick to unix naming to give no-pager version of this command?\n\nIf `PyFile` downloads python file, I think its name is already generic enough.\n"
  }
]
