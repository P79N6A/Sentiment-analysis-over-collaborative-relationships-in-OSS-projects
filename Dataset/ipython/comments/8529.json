[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/111158714",
    "html_url": "https://github.com/ipython/ipython/issues/8529#issuecomment-111158714",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8529",
    "id": 111158714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTE1ODcxNA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T14:46:02Z",
    "updated_at": "2015-06-11T14:46:02Z",
    "author_association": "MEMBER",
    "body": "That is not really something IPython could decide. Decorators are syntactic sugar for:\n\n```\ndef fun():\n    pass\n\nfun = decorate(fun)\n```\n\nIt is the responsibility of the decorator to move things around if desires, which `functools.wraps` does for docstring. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/111178713",
    "html_url": "https://github.com/ipython/ipython/issues/8529#issuecomment-111178713",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8529",
    "id": 111178713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTE3ODcxMw==",
    "user": {
      "login": "jrellis",
      "id": 611938,
      "node_id": "MDQ6VXNlcjYxMTkzOA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/611938?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrellis",
      "html_url": "https://github.com/jrellis",
      "followers_url": "https://api.github.com/users/jrellis/followers",
      "following_url": "https://api.github.com/users/jrellis/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrellis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrellis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrellis/subscriptions",
      "organizations_url": "https://api.github.com/users/jrellis/orgs",
      "repos_url": "https://api.github.com/users/jrellis/repos",
      "events_url": "https://api.github.com/users/jrellis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrellis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T15:47:16Z",
    "updated_at": "2015-06-11T15:47:16Z",
    "author_association": "NONE",
    "body": "IPython could get the code; for example by inspect.getsource on functional items of func_closure on the function. It seems reasonable to say that functools should take care of this rather than IPython, as it does for the docstring; other decorator libraries do. Still, IPython is extending python semantics here, so it might make sense for the IPython semantics to act in the most useful way for the user rather than be bound by choices in functools. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/111181671",
    "html_url": "https://github.com/ipython/ipython/issues/8529#issuecomment-111181671",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8529",
    "id": 111181671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTE4MTY3MQ==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T15:53:47Z",
    "updated_at": "2015-06-11T15:53:47Z",
    "author_association": "MEMBER",
    "body": "@jrellis if you use functools.wraps (https://docs.python.org/2/library/functools.html) in your decorator definition, IPython will find the docstring of your decorated function correctly.\n\n```\nfrom functools import wraps\ndef decorator_with_wraps(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        f(*args, **kwargs)\n    return decorated\n\ndef decorator_no_wraps(f):\n\n    def decorated(*args, **kwargs):\n        f(*args, **kwargs)\n    return decorated\n\n[13]: \n@decorator_with_wraps\ndef f():\n    \"MY AWESOME DOCSTRING\"\n    pass\n\nIn [14]: f?\nSignature: f(*args, **kwargs)\nDocstring: MY AWESOME DOCSTRING\nFile:      ~/quantopian/qexec/zipline_repo/<ipython-input-11-9764957933ed>\nType:      function\n\n[15]: \n@decorator_no_wraps\ndef f():\n    \"MY AWESOME DOCSTRING\"\n    pass\n\nIn [16]: f?\nSignature: f(*args, **kwargs)\nDocstring: <no docstring>\nFile:      ~/quantopian/qexec/zipline_repo/<ipython-input-12-905e59f6147e>\nType:      function\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/111181988",
    "html_url": "https://github.com/ipython/ipython/issues/8529#issuecomment-111181988",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8529",
    "id": 111181988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTE4MTk4OA==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T15:54:32Z",
    "updated_at": "2015-06-11T15:54:32Z",
    "author_association": "MEMBER",
    "body": "Oops, missed @Carreau's reference to `wraps` above...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/111199005",
    "html_url": "https://github.com/ipython/ipython/issues/8529#issuecomment-111199005",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8529",
    "id": 111199005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTE5OTAwNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T16:36:07Z",
    "updated_at": "2015-06-11T16:36:07Z",
    "author_association": "MEMBER",
    "body": "The thing to show is not alway obvious, it will be definitively painful in Python2. \n\nfunctools.wraps set `__wrapped__` in python 3 and show the wrapped function, \nand we already handle this case when decorator are used with python3 and functools wraps. \n\n``` python\nimport functools\nfrom functools import wraps\n\ndef dec(fun):\n    @wraps(fun)\n    def _wrap():fun()\n    return _wrap\n\n@dec\ndef orig():\n    \"\"\"orig docstring\"\"\"\n    pass\n\norig??\n# Signature: orig()\n# Source:\n# @dec\n# def orig():\n#     \"\"\"orig docstring\"\"\"\n#     pass\n# File:      ~/<ipython-input-22-d4a101bc95e5>\n# Type:      function\n```\n\nDoing it magically canot work in many cases like [here](https://github.com/Carreau/insupportable/blob/master/insupportable/insupportable.py#L245-L247) where you can use this function as a decorator, but actually what you are interested in is one of the parameters of the constructor of the class, while the actual thing you call when you call your original function is the `__call__` of this same class. I can rewrite the same in a similar manner where actually the original decorate function has closure function, which is perfectly fine. There is no way from the `??` caller perspective to guess what should be inspected if the writer of the decorator does not give a hint.\n\nextreme oposite case.\n\n```\ndef RaiseAtCall(fun)\n   def r():\n         raise ValueError('told you it was deprecated')\n   return r\n\n@RaiseAtCall\ndef too_old():\n    pass\n```\n\nThere is no closure to inspect, no handle on original function, nothing to guess. \n\nSo best thing we can do is tell decorator writeers to 1) use python3 2) functools.wraps.\n"
  }
]
