[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20548097",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-20548097",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 20548097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTQ4MDk3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-06T03:22:16Z",
    "updated_at": "2013-07-06T03:22:16Z",
    "author_association": "MEMBER",
    "body": "nbconvert has landed, want to make the new PR to continue the conversation?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20556619",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-20556619",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 20556619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTU2NjE5",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-06T16:14:49Z",
    "updated_at": "2013-07-06T16:15:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, I follow the ongoing work. Great team!\n\nTry to find some time this evening to do the PR. But I'm not sure if this is to be included in 1.0 anyway. Let's see\n\nUpdate: Oh I just saw it is already assigned to 2.0! Fine than!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22827315",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-22827315",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 22827315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODI3MzE1",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-18T09:17:22Z",
    "updated_at": "2013-08-18T09:17:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Continuation from #3570:\n\nSummary of chat with @minrk:\n- Wait for input of @jdfreder, to have an idea on which kind of html tags are to be handled\n- Get pandoc to handle math in html inputs correctly to enable a markdown2html2latex conversion\n- Better communicate the \"new\" marked markdown syntax (docs and example notebooks) - includes tables!\n\nOptional workaround (not to prefered):\n- Similar it is currently done with js, extract_math | md2html | html2latex | insert_math\n\nNote: Many html attributes will not be handled correctly (whatever approach we will finally use) including width, height as these are not captured by pandoc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/23053707",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-23053707",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 23053707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDUzNzA3",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-21T21:57:27Z",
    "updated_at": "2013-08-21T21:57:27Z",
    "author_association": "MEMBER",
    "body": "Re-post from PR:\n\nSorry @jakobgager , this fell off my radar somehow.  _Off the top of my head_ I was having trouble with **img** and **table** html tags not being parsed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/23054286",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-23054286",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 23054286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDU0Mjg2",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-21T22:06:54Z",
    "updated_at": "2013-08-21T22:06:54Z",
    "author_association": "MEMBER",
    "body": "When, in the future, a PR is opened to implement something like this, we will need to remember that #4090 will have to act prior to the markdown filter.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/23632698",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-23632698",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 23632698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjMyNjk4",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-01T20:42:49Z",
    "updated_at": "2013-09-01T20:42:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I recently discovered the filter option of pandoc (will be a feature of 1.12) but a workaround is shown \"Scripting with pandoc\". \nRepost from jgm/pandoc#954:\n\nI slightly modified the json walking algorithm in jgm/pandoc-filters-python/pandoc.py see https://gist.github.com/jakobgager/2fa8d416f70155287c00\nAs I don't know the json format supplied by pandoc, I'm not sure if there arise some troubles! For my simple example (see below) it works with version 1.9.4.1 and 1.10.1.\n\nWith this approach and the filter https://gist.github.com/jakobgager/449484d26c3149edcf6b the input\n\n``` bash\necho 'foo $\\alpha$ <i>bar</i>' | pandoc -f markdown -t html -m | pandoc -f html -t json | python conv2Math.py | pandoc -f json -t latex\n```\n\nleads to \n\n``` latex\nfoo $\\alpha$ \\emph{bar}\n```\n\n(it might be noted that the \\ in the first echo call has to be escaped in csh but not in bash)\nIt also works with more complex examples like math and markdown in html tables. \n\n@minrk do you think we could use something like this?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/23747807",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-23747807",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 23747807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzQ3ODA3",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-03T21:19:22Z",
    "updated_at": "2013-09-03T21:19:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "One issue with the above approach is that this way you loose raw latex commands.\nBut as the notebook renders raw html nicely and raw latex not at all, I guess that this drawback is not that pronounced.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/23751264",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-23751264",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 23751264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzUxMjY0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-03T22:14:11Z",
    "updated_at": "2013-09-03T22:14:11Z",
    "author_association": "MEMBER",
    "body": "Raw latex tags should pass through in markdown cells and not be removed.\n\nOn Tue, Sep 3, 2013 at 2:19 PM, Jakob Gager notifications@github.comwrote:\n\n> One issue with the above approach is that this way you loose raw latex\n> commands.\n> But as the notebook renders raw html nicely and raw latex not at all, I\n> guess that this drawback is not that pronounced.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/3503#issuecomment-23747807\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/23766957",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-23766957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 23766957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzY2OTU3",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-04T05:33:07Z",
    "updated_at": "2013-09-04T05:33:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well currently, raw html tags are removed which IMHO is worse than removing raw latex!\nUnfortunately pandoc is a bit picky about such raw inclusions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/23771164",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-23771164",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 23771164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzcxMTY0",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-04T07:37:02Z",
    "updated_at": "2013-09-04T07:37:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, I see your concern is related to your citation PR #4090.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/23985013",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-23985013",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 23985013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTg1MDEz",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-07T08:15:23Z",
    "updated_at": "2013-09-07T08:15:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Repost from jgm/pandoc#954:\nOk, after digging around I found a 2-step solution which seems to work for my test cases and pandoc 1.10.1.\nThis way raw latex and math is preserved and html tags are converted. Should work fine with citations now. \n\nThe basic call is as follows:\n`pandoc -f markdown -t json text.mkd | ./concealLatex.py | pandoc -f json -t html -m | pandoc -f html -t json | ./revealLatex.py | pandoc -f json -t latex`\nQuite complex, isn't it :smile:\nThe required filters are here: https://gist.github.com/jakobgager/6473761\nRequires my pandoc_2.py https://gist.github.com/jakobgager/2fa8d416f70155287c00\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24091112",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24091112",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24091112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDkxMTEy",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T16:18:43Z",
    "updated_at": "2013-09-09T16:18:43Z",
    "author_association": "MEMBER",
    "body": "Not sure how I feel about this level of complexity.  It makes me think that\nit will be very fragile and that we don't have a good handle on exact\nwhat/how are are parsing.  Unfortunately I am mostly offline this week so\ncan't look at it further.  @jdfreder, what do you think?\n\nCheers,\n\nBrian\n\nOn Sat, Sep 7, 2013 at 1:15 AM, Jakob Gager notifications@github.comwrote:\n\n> Repost from jgm/pandoc#954 https://github.com/jgm/pandoc/issues/954:\n> Ok, after digging around I found a 2-step solution which seems to work for\n> my test cases and 1.10.1.\n> This way raw latex and math is preserved and html tags are converted.\n> Should work fine with citations now.\n> \n> The basic call is as follows:\n> pandoc -f markdown -t json text.mkd | ./concealLatex.py | pandoc -f json\n> -t html -m | pandoc -f html -t json | ./revealLatex.py | pandoc -f json -t\n> latex\n> Quite complex, isn't it [image: :smile:]\n> The required filters are here: https://gist.github.com/jakobgager/6473761\n> Requires my pandoc_2.py\n> https://gist.github.com/jakobgager/2fa8d416f70155287c00\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/3503#issuecomment-23985013\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24095940",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24095940",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24095940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDk1OTQw",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T17:09:35Z",
    "updated_at": "2013-09-09T17:09:35Z",
    "author_association": "MEMBER",
    "body": "@jakobgager , correct me if I'm wrong, right now this does this:\n\n`pandoc -f markdown -t json text.mkd` markdown to json\n`./concealLatex.py` convert all tex in the json to plain strings\n`pandoc -f json -t html -m` convert the json (markdown without tex) to html\n`pandoc -f html -t json` convert the results back to json.  At this point all the original markdown and html is html.\n`./revealLatex.py` convert all the plain text that looks like it was latex originally back into tex\n`pandoc -f json -t latex` convert the json (html and latex) into latex\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24114784",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24114784",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24114784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTE0Nzg0",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T21:05:52Z",
    "updated_at": "2013-09-09T21:05:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ellisonbg I totally agree with your feelings! This is currently way to much complicated, however I haven't found a better solution yet. The best way, for sure, would be to learn Haskell and try to get pandoc to NOT strip raw html :smirk:.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24115778",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24115778",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24115778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTE1Nzc4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T21:19:54Z",
    "updated_at": "2013-09-09T21:19:54Z",
    "author_association": "MEMBER",
    "body": "So you're saying: Learn You a Haskell for Great Good? ;-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24115825",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24115825",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24115825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTE1ODI1",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T21:20:33Z",
    "updated_at": "2013-09-09T21:20:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jdfreder you are right, that's what pandoc is supposed to do. \nSome comments:\n- The first markdown2json basically reads all information (including raw tex, raw html, equations, ...), so no stripping occurs at this point. \n- If I omit the conceal, raw latex gets stripped when converting json2html (of course raw html is preserved). As you mentioned, at this point everything is html.\n- The third html2json creates a dumb json (no more raw and math tags) but with tagged latex ($$$) and tagged math ($$). Finally, the reveal script converts these tags back to respective json tags. The json can be converted to latex. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24115950",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24115950",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24115950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTE1OTUw",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T21:22:30Z",
    "updated_at": "2013-09-09T21:34:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So you're saying: Learn You a Haskell for Great Good? ;-)\n\nTo be honest, I don't understand the real meaning of this sentence but the book and website is really great!\nAnd Haskell is weird but somehow compelling!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24123360",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24123360",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24123360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTIzMzYw",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T23:35:08Z",
    "updated_at": "2013-09-09T23:35:08Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg and @jakobgager ,\n\nI looked into this in great detail (I have a large nb filled with different attempts to get this right).  \n\n## The good\n\nI've found that this can actually be accomplished in 3 calls to pandoc (instead of 4) and 1 python file (instead of 2):\n1. markdown to html\n2. html to json\n3. python: fix json raw math tags\n4. json to latex\n\n## The bad\n\nAny way we approach it (from what I found), we are going to need to parse some of it ourselves using the pandoc JSON output or implement some sort of extension for pandoc in haskel.  I also tried many of the relevent markdown _extensions_ listed on [pandoc's website](http://johnmacfarlane.net/pandoc/README.html).\n\n## The ugly\n\nUsing this input\n\n``` markdown\n**foo** $\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq $ <b>b\\$ar</b> $$test$$\n```\n\nAnd this Python code\n\n``` python\na = json.loads(run(\"pandoc -f markdown -t html test.md --gladtex | pandoc -f html -t json -R\"))\n\ndef traverse_json(action, json_object):\n    action(json_object)\n    if isinstance(json_object, dict):\n        for key, value in json_object.items():\n            traverse_json(action, value)\n    elif isinstance(json_object, list):\n        for value in json_object:\n            traverse_json(action, value)\n\ndef fix_raw_math(items, html_math_type, latex_math_type):\n    raw_math = -1\n    raw_maths = []\n    for index, item in enumerate(items):\n\n        # Check if this is a RawInline item.\n        if isinstance(item, dict) and 'RawInline' in item:\n            raw_inline = item['RawInline']\n\n            # Only read the RawInline if it is HTML.\n            if raw_inline[0]==\"html\":\n                html = raw_inline[1]\n                if html == '<eq env=\"%s\">' % html_math_type:\n                    raw_math = index\n                elif html == '</eq>':\n                    if raw_math >= 0:\n                        raw_maths.append((raw_math, index))\n                    raw_math = -1\n\n    if len(raw_maths) > 0:\n        for raw_math in raw_maths[::-1]:\n\n            # Read math\n            latex = ''\n            for index in range(raw_math[0] + 1, raw_math[1]):\n                if isinstance(items[index], dict) and 'Str' in items[index]:\n                    latex += items[index]['Str']\n                elif items[index]==\"Space\":\n                    latex += ' '\n\n            # Remove math\n            for index in range(raw_math[0], raw_math[1]+1)[::-1]:\n                del items[index]\n\n            # Re-add math\n            items.insert(raw_math[0], {'Math': [latex_math_type, latex]})\n\ndef inline_math_action(value):\n    if isinstance(value, list):\n        fix_raw_math(value, 'math', 'InlineMath')\n        fix_raw_math(value, 'displaymath', 'DisplayMath')\n\n\nfrom IPython.nbconvert.utils.pandoc import pandoc\n\ntraverse_json(inline_math_action, a)\nprint(pandoc(json.dumps(a), 'json', 'latex'))\n```\n\nI was able to get the correct output\n\n``` latex\n\\textbf{foo} $\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq $\n\\textbf{b\\$ar} \\[test\\]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24123542",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24123542",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24123542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTIzNTQy",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T23:39:22Z",
    "updated_at": "2013-09-09T23:40:23Z",
    "author_association": "MEMBER",
    "body": "A little more detail, running :\n\n``` bash\npandoc -f markdown -t html test.md --gladtex | pandoc -f html -t json -R\n```\n\nProduces this output:\n\n``` python\n[{'docAuthors': [], 'docDate': [], 'docTitle': []},\n [{'Para': [{'Strong': [{'Str': 'foo'}]},\n    'Space',\n    {'RawInline': ['html', '<eq env=\"math\">']},\n    {'Str': '\\\\left('},\n    'Space',\n    {'Str': '\\\\sum_{k=1}^n'},\n    'Space',\n    {'Str': 'a_k'},\n    'Space',\n    {'Str': 'b_k'},\n    'Space',\n    {'Str': '\\\\right)^2'},\n    'Space',\n    {'Str': '\\\\leq'},\n    'Space',\n    {'RawInline': ['html', '</eq>']},\n    'Space',\n    {'Strong': [{'Str': 'b$ar'}]},\n    'Space',\n    {'RawInline': ['html', '<eq env=\"displaymath\">']},\n    {'Str': 'test'},\n    {'RawInline': ['html', '</eq>']}]}]]\n```\n\n**Running the Python logic above** just recognizes the RawInline HTML that pandoc adds and puts the code in the correct JSON blocks, producing this:\n\n``` python\n[{'docAuthors': [], 'docDate': [], 'docTitle': []},\n [{'Para': [{'Strong': [{'Str': 'foo'}]},\n    'Space',\n    {'Math': ['InlineMath',\n      '\\\\left( \\\\sum_{k=1}^n a_k b_k \\\\right)^2 \\\\leq ']},\n    'Space',\n    {'Strong': [{'Str': 'b$ar'}]},\n    'Space',\n    {'Math': ['DisplayMath', 'test']}]}]]\n```\n\nWhich pandoc can convert easily into the correct latex.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24137270",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24137270",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24137270,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTM3Mjcw",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T06:43:45Z",
    "updated_at": "2013-09-10T06:43:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great that you had a look on this too! \nSome comments:\n- Your approach highly resembles my first idea (see above) - the problem is, that the first `pandoc -f markdown -t html test.md --gladtex` call strips all raw latex (you haven't added any in your test case) - hence the citation PR won't work anymore. That's the reason I started with a markdown2json call.\n- I'm against using the `-R` parameter, since this introduces a high risk of getting some untranslatable html into the final latex file.\n\nbtw. what is the `run` method in your script?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24177043",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24177043",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24177043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTc3MDQz",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T16:58:09Z",
    "updated_at": "2013-09-10T16:58:09Z",
    "author_association": "MEMBER",
    "body": "I'm pretty sure the citation PR does not use raw latex, that was something we talked about at the last Google hangout meeting (or the meeting before).  See citation example - https://github.com/ipython/nbconvert-examples/blob/master/citations/Tools%20for%20the%20lifecycle%20of%20computational%20research.ipynb#L47\n\nAlso, the `-R` only creates RawInline elements for things that can't be converted to JSON.  During the stage of JSON to LaTeX, all RawInline items in the JSON get dropped religiously (since I don't use `-R` there).  The only ones that get acknowledged are those who verbatim match what the Py script looks for.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24177203",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24177203",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24177203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTc3MjAz",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T17:00:15Z",
    "updated_at": "2013-09-10T17:00:15Z",
    "author_association": "MEMBER",
    "body": "> btw. what is the run method in your script?\n\nAh, I was wondering if someone would ask about that :smile: \n\n``` python\nfrom IPython.utils.process import get_output_error_code\ndef run(command):\n    stdout, stderr, retcode = get_output_error_code(command)\n    return stdout\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24177942",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24177942",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24177942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTc3OTQy",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T17:11:21Z",
    "updated_at": "2013-09-10T17:11:21Z",
    "author_association": "MEMBER",
    "body": "> Your approach highly resembles my first idea (see above) - the problem is, that the first \n\nSorry for the confusion @jakobgager .  I thought that the only latex we supported was that that was embeded in $ $ and $$ $$ environments.  @ellisonbg if we want to support raw latex outside of $ $ and $$ $$ environments, I think @jakobgager 's second idea is the best way to do it now.  Otherwise, his first idea or the method I posted (almost the same) would be better.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24192624",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24192624",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24192624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTkyNjI0",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T20:41:25Z",
    "updated_at": "2013-09-10T20:41:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> all RawInline items in the JSON get dropped\n\nYou are right, I missed that.\nI think the only raw latex we currently use is `\\cite`, hence, a possible simplification would be to change the citation PR in a way, that the cite command does not get embedded as latex but as some tagged string. This can pass the conversion md2html2json unchanged and in the python script it gets converted to latex. \nSo we could use your approach.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24193043",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24193043",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24193043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTkzMDQz",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T20:46:22Z",
    "updated_at": "2013-09-10T20:46:22Z",
    "author_association": "MEMBER",
    "body": "> I think the only raw latex we currently use is \\cite\n\nI think we decided against that in one of the Google hangouts, see https://github.com/ipython/nbconvert-examples/blob/master/citations/Tools%20for%20the%20lifecycle%20of%20computational%20research.ipynb#L47 (that's how the citation PR works right now, HTML tags)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24193716",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24193716",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24193716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTkzNzE2",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T20:55:11Z",
    "updated_at": "2013-09-10T20:55:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Of course it is entered as html tags but #4090 converts these to \\cite and (actually) you posted above that \n\n> When, in the future, a PR is opened to implement something like this, we will need to remember that #4090 will have to act prior to the markdown filter.\n\nHence, the current markdown filter will face a raw latex \\cite, No? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24194571",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24194571",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24194571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTk0NTcx",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T21:06:21Z",
    "updated_at": "2013-09-10T21:06:21Z",
    "author_association": "MEMBER",
    "body": "> Hence, the current markdown filter will face a raw latex \\cite, No? \n\nOh, no I didn't realize it was still doing the conversion.  :confused: \n\nShouldn't that conversion be handled by us here, during the python filtering stuff?  It would be nice if pandoc had built in support for converting cite tags to tex.  I looks like http://johnmacfarlane.net/pandoc/README.html#citations is a bit much.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24196284",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24196284",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24196284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTk2Mjg0",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T21:30:29Z",
    "updated_at": "2013-09-10T21:30:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, it would be possible to do to the html citation to latex citation conversion during the python filtering, however it might be a bit more tricky as the json would consist of 3 cells instead of just 1:\n\n```\n{u'RawInline': [u'html', u'<cite data-cite=\"asdf\">']},\n{u'Str': u'qwer'},\n{u'RawInline': [u'html', u'</cite>']}\n```\n\nPandoc citation could be an option as well however I have no experience with that. If it's just to change the `\\cite{foo}` to `@foo` it would be trivial. But I guess it will be more complicated.\nAnd to make pandoc support our html citation would require someone to learn Haskell - again :sunglasses: \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24196703",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24196703",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24196703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTk2NzAz",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T21:36:26Z",
    "updated_at": "2013-09-10T21:36:26Z",
    "author_association": "MEMBER",
    "body": "> however it might be a bit more tricky as the json would consist of 3 cells instead of just 1:\n\nI have a rather generic method to do this in my solution above.  The only annoying part would be parsing the HTML tag, I guess we could use lxml like @ellisonbg use's in his PR - https://github.com/ipython/ipython/pull/4090/files#L2R36\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24196765",
    "html_url": "https://github.com/ipython/ipython/issues/3503#issuecomment-24196765",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3503",
    "id": 24196765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTk2NzY1",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-10T21:37:31Z",
    "updated_at": "2013-09-10T21:38:00Z",
    "author_association": "MEMBER",
    "body": "> have a rather generic method\n\nwell, it would need to be made a little bit more generic... :stuck_out_tongue_closed_eyes: \n"
  }
]
