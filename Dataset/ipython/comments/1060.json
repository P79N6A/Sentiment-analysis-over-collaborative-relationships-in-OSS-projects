[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2895321",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2895321",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2895321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTUzMjE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-28T10:38:48Z",
    "updated_at": "2011-11-28T10:38:48Z",
    "author_association": "MEMBER",
    "body": "Similar to the discussion about ipynbo files, I'd be wary of creating extra files in the working directory by default. But I agree that there should be an easy way to make importable .py files.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2895835",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2895835",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2895835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTU4MzU=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-28T11:43:01Z",
    "updated_at": "2011-11-28T11:43:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry. Wrong button.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2909289",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2909289",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2909289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDkyODk=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-28T23:19:06Z",
    "updated_at": "2011-11-28T23:19:06Z",
    "author_association": "MEMBER",
    "body": "I think this idea is worth thinking about as we really do want the notebooks to be usable for more \"library\" style code.  But I do worry about what @takluyver brought up about adding extra files to the working directory.  We would have to be very careful about not overwriting existing .py files a user has.  Are there other ways we could enable this type of library mode.  \n\nBut the implementation of this idea should not be too difficult if we want it on always.  Making it configurable from the notebook Ui would add a bit of work.  Making it configurable using the regular IPythyon config system would not be too bad.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2909569",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2909569",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2909569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDk1Njk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-28T23:44:00Z",
    "updated_at": "2011-11-28T23:44:00Z",
    "author_association": "MEMBER",
    "body": "yes, implementing this, especially if it's server-configurable or not configurable should be very easy (~2 extra lines in the save routine).  I do really worry about clutter, but at the same time this could be quite useful.\n\nI know that for my work, if every IPython notebook created 4 separate files next to each other (currently proposed: ipynb, ipynbo, autosaved backup, python script), I would be very angry.  That level of clutter is just not acceptable.  We should consider the cost of adding unrequested files in the working dir very high indeed.\n\nJust like @takluyver recommended using something akin to the `__pycache__` for output caching, and I hope very much that we do something similar for autosaved backups, perhaps the .py scripts should go in a location that we add to `sys.path`?  That's obviously adding a layer between using notebooks as modules and using scripts as modules, so I don't know if it would be ideal.\n\nAnother thing we should probably do, regardless of where we come down on this - support `%run notebook.ipynb`.  That certainly shouldn't rely on the .py file already having been created.\n\nOf course, since I would imagine this to be a minority use case (if not an uncommon one), if putting the script adjacent to the notebook is _off_ by default, I wouldn't object to that being the behavior.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2911540",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2911540",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2911540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTE1NDA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T03:15:31Z",
    "updated_at": "2011-11-29T03:15:31Z",
    "author_association": "MEMBER",
    "body": "I agree with @minrk 's comments about not wanting to clutter the\nworking directory.  I guess the thing that keeps coming back to me is\nif there is a better way of allowing notebooks to function as\nimportable modules.\n\nOn Mon, Nov 28, 2011 at 3:44 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> yes, implementing this, especially if it's server-configurable or not configurable should be very easy (~2 extra lines in the save routine).  I do really worry about clutter, but at the same time this could be quite useful.\n> \n> I know that for my work, if every IPython notebook created 4 separate files next to each other (currently proposed: ipynb, ipynbo, autosaved backup, python script), I would be very angry.  That level of clutter is just not acceptable.  We should consider the cost of adding unrequested files in the working dir very high indeed.\n\nOne option would be to create a visible subdirectory for all of the\n.py files.  Then at least the clutter consists of a single entry per\nworking directory rather than a file per notebook.\n\n> Just like @takluyver recommended using something akin to the `__pycache__` for output caching, and I hope very much that we do something similar for autosaved backups, perhaps the .py scripts should go in a location that we add to `sys.path`?  That's obviously adding a layer between using notebooks as modules and using scripts as modules, so I don't know if it would be ideal.\n\nHaving such a cache for the .py files also makes it difficult to\nversion control the entire thing in a clean way.  If someone was using\nthe .py files as library modules, they would certainly want those to\nbe visible in version control.\n\n> Another thing we should probably do, regardless of where we come down on this - support `%run notebook.ipynb`.  That certainly shouldn't rely on the .py file already having been created.\n\nYep, doing that won't be too difficult.\n\n> Of course, since I would imagine this to be a minority use case (if not an uncommon one), if putting the script adjacent to the notebook is _off_ by default, I wouldn't object to that being the behavior.\n\nI agree it should be off by default, but I guess I am _not quite_\nconvinced this is the way to go.  It feels like we are still missing\nsomething about how all of this would work.\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/1060#issuecomment-2909569\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2911763",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2911763",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2911763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTE3NjM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T03:50:38Z",
    "updated_at": "2011-11-29T03:50:38Z",
    "author_association": "MEMBER",
    "body": "On Mon, Nov 28, 2011 at 3:42 AM, Robert Kern\nreply@reply.github.com\nwrote:\n\n> I would probably opt for providing a script that extracts a .py file from the notebook file and a GUI option for exporting to a .py file.\n\nYes, we should certainly have a command-line form of this.  Note that\nthe gui option exists, if you click on the download button you can\nselect 'py' as the format.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2915992",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2915992",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2915992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU5OTI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T06:04:24Z",
    "updated_at": "2011-11-29T06:04:24Z",
    "author_association": "MEMBER",
    "body": "On Mon, Nov 28, 2011 at 3:19 PM, Brian E. Granger\nreply@reply.github.com\nwrote:\n\n> I think this idea is worth thinking about as we really do want the notebooks to be usable for more \"library\" style code.  But I do worry about what @takluyver brought up about adding extra files to the working directory.  We would have to be very careful about not overwriting existing .py files a user has.  Are there other ways we could enable this type of library mode.\n\nThe clutter issue is indeed a problem, and this should certainly never\nbe the default behavior.  One of the reasons I went with this approach\n(rather than files hidden in a subdir or similar) was that I'd like to\nsee a very low barrier to code reuse _between_ notebooks.  I'm already\nfinding myself doing a lot more copy/pasting than I'd like between\nnotebooks, simply because it's hard to import from a notebook.  So I\nthink we need to find a way to make that process as natural as\nimporting from a script, and I'd rather not introduce special\nfunctions to have to spell it like\n\n```\nfrom IPythhon.something import importnb\nfoo = importnb('foo')\n```\n\nalso because that would force us to reimplement a fair amount of machinery.\n\n> But the implementation of this idea should not be too difficult if we want it on always.  Making it configurable from the notebook Ui would add a bit of work.  Making it configurable using the regular IPythyon config system would not be too bad.\n\nI think that going with just our config system for now is perfectly\nOK.  Eventually we'll work out a system for configuring UI stuff, but\nfor now a regular server-side flag is more than enough.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2916130",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2916130",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2916130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTYxMzA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T06:07:43Z",
    "updated_at": "2011-11-29T06:07:43Z",
    "author_association": "MEMBER",
    "body": "On Mon, Nov 28, 2011 at 3:44 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> I know that for my work, if every IPython notebook created 4 separate files next to each other (currently proposed: ipynb, ipynbo, autosaved backup, python script), I would be very angry.  That level of clutter is just not acceptable.  We should consider the cost of adding unrequested files in the working dir very high indeed.\n\nI think the .py files have a stronger justification for being put next\nto the notebooks, and that is to be importable from other notebooks.\nIf we put them somewhere else, the import logic gets more complicated.\n The others could certainly go in directories elsewhere, and all of\nthis should certainly be off by default.\n\n> Just like @takluyver recommended using something akin to the `__pycache__` for output caching, and I hope very much that we do something similar for autosaved backups, perhaps the .py scripts should go in a location that we add to `sys.path`?  That's obviously adding a layer between using notebooks as modules and using scripts as modules, so I don't know if it would be ideal.\n\nYes, that's why I don't like much the idea of putting them elsewhere;\nbreaking the natural flow of the import logic seems like a real\ndrawback to me.\n\n> Another thing we should probably do, regardless of where we come down on this - support `%run notebook.ipynb`.  That certainly shouldn't rely on the .py file already having been created.\n\nThat, I completely agree on.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2916323",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2916323",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2916323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTYzMjM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T06:12:19Z",
    "updated_at": "2011-11-29T06:12:19Z",
    "author_association": "MEMBER",
    "body": "On Mon, Nov 28, 2011 at 7:15 PM, Brian E. Granger\nreply@reply.github.com\nwrote:\n\n> I agree with @minrk 's comments about not wanting to clutter the\n> working directory.  I guess the thing that keeps coming back to me is\n> if there is a better way of allowing notebooks to function as\n> importable modules.\n\nI still haven't really been able to find a way that makes import\nsemantics natural, and I don't like the idea of messing with sys.path\nunder the hood.  If we put the .py next to the .ipynb, all the natural\nintuition we have about how import works continues to be valid,\nwithout needing to add extra complexity.\n\n> I agree it should be off by default, but I guess I am _not quite_\n> convinced this is the way to go.  It feels like we are still missing\n> something about how all of this would work.\n\nI'd certainly love to find a solution that makes everyone happy, since\nI see some reservations still from you guys.  I do think that in the\nlong run, having this (in some form) would really be a killer feature.\n The more I use the nb for 'real work', the more I find myself wanting\nthis, so it's probably an indication that in the long run it will\nreally be important.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2917917",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2917917",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2917917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTc5MTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T06:51:40Z",
    "updated_at": "2011-11-29T06:51:40Z",
    "author_association": "MEMBER",
    "body": "> I still haven't really been able to find a way that makes import\n> semantics natural, and I don't like the idea of messing with sys.path\n> under the hood.  If we put the .py next to the .ipynb, all the natural\n> intuition we have about how import works continues to be valid,\n> without needing to add extra complexity.\n\nI think what's probably best, if we want to do anything magic, is just save the script in a special location that IPython has prepended to sys.path, just like we do with extensions.  Anything more complicated than that may not be worth it.  \nOtherwise, saving the script adjacent to the notebook as a non-default behavior is the easiest and most easily understood by users, as Fernando points out.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2927126",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2927126",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2927126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjcxMjY=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T10:17:26Z",
    "updated_at": "2011-11-29T10:17:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Writing a `sys.meta_path` import hook that imports directly from the notebook file wouldn't be too bad. Unlike many of the older forms of import hook, the `sys.meta_path` method works fairly robustly and plays nicely with others.\n\nhttp://www.python.org/dev/peps/pep-0302/\nhttp://docs.python.org/library/sys#sys.meta_path\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2927499",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2927499",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2927499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mjc0OTk=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T10:25:52Z",
    "updated_at": "2011-11-29T10:25:52Z",
    "author_association": "MEMBER",
    "body": "We could potentially save .py files in a subdirectory from the pwd called\nsomething like nblib or localnb, with a `__init__.py` file in there. Then\nimporting from one would look like `from localnb.foo import myfunc`.\n\nI think the bigger issue is that we need a good settings panel in the\nnotebook. Then it's as simple as having a checkbox for 'Make importable\nmodule on save'.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2942318",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-2942318",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 2942318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDIzMTg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T19:09:31Z",
    "updated_at": "2011-11-29T19:09:31Z",
    "author_association": "MEMBER",
    "body": "On Tue, Nov 29, 2011 at 2:17 AM, Robert Kern\nreply@reply.github.com\nwrote:\n\n> Writing a `sys.meta_path` import hook that imports directly from the notebook file wouldn't be too bad. Unlike many of the older forms of import hook, the `sys.meta_path` method works fairly robustly and plays nicely with others.\n> \n> http://www.python.org/dev/peps/pep-0302/\n> http://docs.python.org/library/sys#sys.meta_path\n\nI'd thought about that (Ilan told me about these guys, which I didn't\nknow about before), but what worries me about this approach is\ndebuggability.  I think the simple foo.ipynb -> foo.py approach will\nbe easier for users to understand if they need to debug anything\ncoming from the notebook.  %debug will work in a familiar fashion, the\nrelative paths will all be the same, and they can easily open the .py\nfile for inspection in an editor.\n\nWith an import hook, we'd probably want to create\nsemi-hidden/temporary files from the notebook, which adds complexity\nand makes debugging/understanding less transparent.  Do we make them\nwith tempfile, hence having random-looking names? If so, do we track\ntheir lifetime and try to clean them up on exit? If not, do we create\na bigger clutter problem by having all these junk-looking filenames\naround?  If we put them somewhere else, the logic with relative\nimports gets even worse...\n\nI'd love to be proven wrong, but every time I look at this, any\nsolution other than a straight mapping of X.ipynb to X.py and using\nthe standard, familiar import machinery and semantics seems to\nintroduce more new problems than it solves.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3375671",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-3375671",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 3375671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzU2NzE=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-05T20:17:59Z",
    "updated_at": "2012-01-05T20:17:59Z",
    "author_association": "MEMBER",
    "body": "I don't think we should do anything on this front yet.  We have a lot of redesigning of the notebook coming up and that will give us a chance to think about this further.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3377721",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-3377721",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 3377721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzc3MjE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-05T22:44:32Z",
    "updated_at": "2012-01-05T22:44:32Z",
    "author_association": "MEMBER",
    "body": "I just realized that we should probably close this issue.  We now have the `--script` option that does precisely what this issue was about, and I think that's a pretty good solution for now.  We can revisit more esoteric approaches later...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3379397",
    "html_url": "https://github.com/ipython/ipython/issues/1060#issuecomment-3379397",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1060",
    "id": 3379397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzkzOTc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-06T01:02:22Z",
    "updated_at": "2012-01-06T01:02:22Z",
    "author_association": "MEMBER",
    "body": "Closing now; we can open a new one later if we want fancier featuers, but for now the simple `--script` takes care of this particular point.\n"
  }
]
