[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12125408",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-12125408",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 12125408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTI1NDA4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-10T23:55:21Z",
    "updated_at": "2013-01-10T23:55:21Z",
    "author_association": "MEMBER",
    "body": "Sort of depends on what you are thinking.  Can you elaborate on the usage\ncases you are thinking about.\n\nOn Thu, Jan 10, 2013 at 3:21 PM, shreddd notifications@github.com wrote:\n\n> I was wondering if there were any plans for supporting pluggable\n> authentication in the notebook.\n> \n> I looked at the code and it doesn't seem too hard to support alternate\n> forms of authentication (eg. LDAP) by making callouts from\n> ipython.lib.security.passwd_check. If there is any interest I can probably\n> get this working. Also - any coding/style guidelines that I should follow\n> would be appreciated\n> \n> Thanks\n> -Shreyas\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2770.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12125677",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-12125677",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 12125677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTI1Njc3",
    "user": {
      "login": "shreddd",
      "id": 143514,
      "node_id": "MDQ6VXNlcjE0MzUxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/143514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shreddd",
      "html_url": "https://github.com/shreddd",
      "followers_url": "https://api.github.com/users/shreddd/followers",
      "following_url": "https://api.github.com/users/shreddd/following{/other_user}",
      "gists_url": "https://api.github.com/users/shreddd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shreddd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shreddd/subscriptions",
      "organizations_url": "https://api.github.com/users/shreddd/orgs",
      "repos_url": "https://api.github.com/users/shreddd/repos",
      "events_url": "https://api.github.com/users/shreddd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shreddd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-11T00:03:54Z",
    "updated_at": "2013-01-11T00:03:54Z",
    "author_association": "NONE",
    "body": "We have a number of users (at LBL/NERSC) that want to run ipython notebooks and rather than having them set up their own password hashes we'd like to use an existing password database to validate these credentials. This allows us to move away from the mode of users managing their own passwords and allows us to offer the notebook as a service.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12125905",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-12125905",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 12125905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTI1OTA1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-11T00:10:55Z",
    "updated_at": "2013-01-11T00:10:55Z",
    "author_association": "MEMBER",
    "body": "Let me make sure I understand you correctly: you want each user to be able to run their own notebook server, but to use their UNIX username and password to authenticate to the notebook.  Is this a fair statement?  That would very much fit into the model are are moving towards and we would be interested in supporting this type of authentication.  Here are some thoughts on this:\n\nWe should create an authentication object that inherits from IPython's Configurable class.  It should define a pretty generic auth interface that we can implement different subclasse for.  For your case, simple PAM based auth would probably work fine.  The username should be choosen to match the user that starts the notebook.  It won't be much code.\n\nThen in the main notebook app, we would need to define a configurable attribute that allows selection of which auth class to use.\n\nYou could then provide you users with a simple ipython_notebook_config.py file that sets the right options.\n\nHow does this sound?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12126157",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-12126157",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 12126157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTI2MTU3",
    "user": {
      "login": "shreddd",
      "id": 143514,
      "node_id": "MDQ6VXNlcjE0MzUxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/143514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shreddd",
      "html_url": "https://github.com/shreddd",
      "followers_url": "https://api.github.com/users/shreddd/followers",
      "following_url": "https://api.github.com/users/shreddd/following{/other_user}",
      "gists_url": "https://api.github.com/users/shreddd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shreddd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shreddd/subscriptions",
      "organizations_url": "https://api.github.com/users/shreddd/orgs",
      "repos_url": "https://api.github.com/users/shreddd/repos",
      "events_url": "https://api.github.com/users/shreddd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shreddd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-11T00:19:45Z",
    "updated_at": "2013-01-11T00:19:45Z",
    "author_association": "NONE",
    "body": "Hi Brian - that is pretty close to what I was thinking. The one minor difference was that I was thinking the user could actually pass in their username through the login interface, to allow for a more flexible login mechanism. (This could itself be configurable too).\n\nBut the actual authentication should be completely configurable, and should be able to talk to a wide set of backends that would return a True or False assertion.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12126895",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-12126895",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 12126895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTI2ODk1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-11T00:48:34Z",
    "updated_at": "2013-01-11T00:48:34Z",
    "author_association": "MEMBER",
    "body": "_for now_ I don't want to add the notion of users to the notebook.  We will\nget there, but for now we want to foces purely on the single user case\nwhere the notion of a username is not present.  The problem with adding the\nusername to the actual UI, is that users will being to think that if they\nenter a different username they will see different notebooks, when in\nreality, that server only knows about _one_ set of notebooks.\n\nOh crap, this won't work at all....to talk to your authentication service,\nthe notebook will have to run as root not a regular user.  Once you enter\nthat land, you have to deal with many of the complications of the full\nmultiuser notebook.  There are a lot of non-trivial things to think about.\n We have funding to do this work, but the multiuser work won't start until\nabout 1 year from now, and we really need to remain focused on other work\nuntil then.\n\nBecause of this complication, I would write look at writing a helper script\nfor you users that would create the notebook configuration file, set the\npassword, etc.  As a sysadmin, you could even write a cron job that creates\nthat config file for each user and makes sure the password field is in sync\nwith its LDAP hosted value.\n\nOne other question - do you need your notebook kernels ro run under the\nuser's regular UNIX accounts, in their home directory?  You just want to\nfind a convenient way of managing their passwords?  Are all of the\nnotebooks going to be run on a single host?\n\nOn Thu, Jan 10, 2013 at 4:19 PM, shreddd notifications@github.com wrote:\n\n> Hi Brian - that is pretty close to what I was thinking. The one minor\n> difference was that I was thinking the user could actually pass in their\n> username through the login interface, to allow for a more flexible login\n> mechanism. (This could itself be configurable too).\n> \n> But the actual authentication should be completely configurable, and\n> should be able to talk to a wide set of backends that would return a True\n> or False assertion.\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2770#issuecomment-12126157.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12127225",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-12127225",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 12127225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTI3MjI1",
    "user": {
      "login": "shreddd",
      "id": 143514,
      "node_id": "MDQ6VXNlcjE0MzUxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/143514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shreddd",
      "html_url": "https://github.com/shreddd",
      "followers_url": "https://api.github.com/users/shreddd/followers",
      "following_url": "https://api.github.com/users/shreddd/following{/other_user}",
      "gists_url": "https://api.github.com/users/shreddd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shreddd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shreddd/subscriptions",
      "organizations_url": "https://api.github.com/users/shreddd/orgs",
      "repos_url": "https://api.github.com/users/shreddd/repos",
      "events_url": "https://api.github.com/users/shreddd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shreddd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-11T01:00:37Z",
    "updated_at": "2013-01-11T01:00:37Z",
    "author_association": "NONE",
    "body": "Hi Brian - FYI - I have a prototype that uses LDAP authentication (running as a non-root user). You don't actually need to be root to do LDAP auth. :) \n\nMostly I was trying to get to the point where authentication was plugabble - i.e. instead of calling the standard passwd_check, you could call something else that returns True or False. I'll ping you directly via email to discuss this some more. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12143705",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-12143705",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 12143705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTQzNzA1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-11T13:14:39Z",
    "updated_at": "2013-01-11T13:14:39Z",
    "author_association": "MEMBER",
    "body": "You can spawn one server per user with a proxy and use url redirection on the proxy if you wish.\nI have a early prototype of somehing that can potentially do that if it interset you. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28706632",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-28706632",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 28706632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzA2NjMy",
    "user": {
      "login": "pelson",
      "id": 810663,
      "node_id": "MDQ6VXNlcjgxMDY2Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/810663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pelson",
      "html_url": "https://github.com/pelson",
      "followers_url": "https://api.github.com/users/pelson/followers",
      "following_url": "https://api.github.com/users/pelson/following{/other_user}",
      "gists_url": "https://api.github.com/users/pelson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pelson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pelson/subscriptions",
      "organizations_url": "https://api.github.com/users/pelson/orgs",
      "repos_url": "https://api.github.com/users/pelson/repos",
      "events_url": "https://api.github.com/users/pelson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pelson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-18T15:25:58Z",
    "updated_at": "2013-11-18T15:25:58Z",
    "author_association": "MEMBER",
    "body": "@shreddd - any chance you could provide the code to do LDAP auth? I'm looking at doing a similar thing for ActiveDirectory/Kerberos and expect the two to be almost identical.\n\nCheers!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28751715",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-28751715",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 28751715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzUxNzE1",
    "user": {
      "login": "shreddd",
      "id": 143514,
      "node_id": "MDQ6VXNlcjE0MzUxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/143514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shreddd",
      "html_url": "https://github.com/shreddd",
      "followers_url": "https://api.github.com/users/shreddd/followers",
      "following_url": "https://api.github.com/users/shreddd/following{/other_user}",
      "gists_url": "https://api.github.com/users/shreddd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shreddd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shreddd/subscriptions",
      "organizations_url": "https://api.github.com/users/shreddd/orgs",
      "repos_url": "https://api.github.com/users/shreddd/repos",
      "events_url": "https://api.github.com/users/shreddd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shreddd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-18T23:43:44Z",
    "updated_at": "2013-11-18T23:43:44Z",
    "author_association": "NONE",
    "body": "Hi Phil\n\nWe ended up abandoning the ipython ldap auth in favor of\nhttps://github.com/ptone/jiffylab\n\nWe are handling auth on the front end web server that mediates access.\n\n-Shreyas\n\nOn Mon, Nov 18, 2013 at 8:26 AM, Phil Elson notifications@github.comwrote:\n\n> @shreddd https://github.com/shreddd - any chance you could provide the\n> code to do LDAP auth? I'm looking at doing a similar thing for\n> ActiveDirectory/Kerberos and expect the two to be almost identical.\n> \n> Cheers!\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2770#issuecomment-28706632\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28796096",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-28796096",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 28796096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Nzk2MDk2",
    "user": {
      "login": "pelson",
      "id": 810663,
      "node_id": "MDQ6VXNlcjgxMDY2Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/810663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pelson",
      "html_url": "https://github.com/pelson",
      "followers_url": "https://api.github.com/users/pelson/followers",
      "following_url": "https://api.github.com/users/pelson/following{/other_user}",
      "gists_url": "https://api.github.com/users/pelson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pelson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pelson/subscriptions",
      "organizations_url": "https://api.github.com/users/pelson/orgs",
      "repos_url": "https://api.github.com/users/pelson/repos",
      "events_url": "https://api.github.com/users/pelson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pelson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-19T14:57:59Z",
    "updated_at": "2013-11-19T14:57:59Z",
    "author_association": "MEMBER",
    "body": "Thanks @shreddd - I'll take a look at that and figure out what is best to do. Out of interest, are you doing this for a public service, or is it for an internal/organisational deployment?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/72191565",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-72191565",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 72191565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMTkxNTY1",
    "user": {
      "login": "pelson",
      "id": 810663,
      "node_id": "MDQ6VXNlcjgxMDY2Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/810663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pelson",
      "html_url": "https://github.com/pelson",
      "followers_url": "https://api.github.com/users/pelson/followers",
      "following_url": "https://api.github.com/users/pelson/following{/other_user}",
      "gists_url": "https://api.github.com/users/pelson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pelson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pelson/subscriptions",
      "organizations_url": "https://api.github.com/users/pelson/orgs",
      "repos_url": "https://api.github.com/users/pelson/repos",
      "events_url": "https://api.github.com/users/pelson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pelson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-30T12:05:18Z",
    "updated_at": "2015-01-30T12:05:18Z",
    "author_association": "MEMBER",
    "body": "I think this can now be closed thanks to the addition of #6977.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/72239586",
    "html_url": "https://github.com/ipython/ipython/issues/2770#issuecomment-72239586",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2770",
    "id": 72239586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMjM5NTg2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-30T17:40:46Z",
    "updated_at": "2015-01-30T17:40:46Z",
    "author_association": "MEMBER",
    "body": "@pelson thanks for catching it.\n"
  }
]
