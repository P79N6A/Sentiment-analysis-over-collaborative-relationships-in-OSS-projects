[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239417753",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239417753",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239417753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTQxNzc1Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-12T10:53:10Z",
    "updated_at": "2016-08-12T10:53:10Z",
    "author_association": "MEMBER",
    "body": "This looks reasonable, but do you have a way to reproduce the issue, so I can test it interactively?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239421554",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239421554",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239421554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTQyMTU1NA==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-12T11:17:00Z",
    "updated_at": "2016-08-12T11:17:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This looks reasonable, but do you have a way to reproduce the issue, so I can test it interactively?\n\nThe easiest is using `alarm()`, see updated description above. Alternative: send a `SIGINT` directly to the process.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239424824",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239424824",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239424824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTQyNDgyNA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-12T11:37:36Z",
    "updated_at": "2016-08-12T11:37:36Z",
    "author_association": "MEMBER",
    "body": "Thanks. I have confirmed that this fixes it in the `alarm()` case. If you could just add a comment mentioning why we stop the event loop, I think this can be merged.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239426572",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239426572",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239426572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTQyNjU3Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-12T11:48:44Z",
    "updated_at": "2016-08-12T11:48:44Z",
    "author_association": "MEMBER",
    "body": "Thanks.\n\nPinging @jonathanslenders to be aware of this. I'll mark it for 5.2 in case he says it's the wrong way to do it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239925711",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239925711",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239925711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTkyNTcxMQ==",
    "user": {
      "login": "jonathanslenders",
      "id": 216638,
      "node_id": "MDQ6VXNlcjIxNjYzOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/216638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanslenders",
      "html_url": "https://github.com/jonathanslenders",
      "followers_url": "https://api.github.com/users/jonathanslenders/followers",
      "following_url": "https://api.github.com/users/jonathanslenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanslenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanslenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanslenders/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanslenders/orgs",
      "repos_url": "https://api.github.com/users/jonathanslenders/repos",
      "events_url": "https://api.github.com/users/jonathanslenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanslenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T20:53:10Z",
    "updated_at": "2016-08-15T20:53:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is okay to handle it this way, however, I think it can be (should be?) fixed in prompt_toolkit as well. (A try/finally somewhere should do it.)\n\nJust one remark, we are handling one specific case here. The one where a `KeyboardInterrupt` exception is raised. The signal handler could raise another exception as well, possibly breaking other code.\n\nIf I recall correctly, signal handlers should actually _never_ raise exceptions, because this breaks the API that functions expose. As a caller of a function, you assume a certain contract. This is defined by the inputs, the outputs and the exceptions that the function raises. As a caller of a function, you have then the responsibility to either handle these exceptions or let them propagate. If it you decide to let an exception propagate, then it becomes part of the callers API. Now, if a signal handler would throw in an exception, it will break the contract that these functions have with each other.\n\nSimilar, signal handlers should probably not acquire locks or call code that acquires locks, because the lock could be hold by the main thread, which is unable to release it as long as the signal handler runs. Signal handlers should probably also not touch global variables, if it's not able to do it atomically. So what you can do in a signal handler without breaking applications is essentially limited.\n\nAs far as I understand, a few things that are safe from a signal handler are: appending something to a list; writing something to a unix pipe, or setting a boolean flag.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239927220",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239927220",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239927220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTkyNzIyMA==",
    "user": {
      "login": "jonathanslenders",
      "id": 216638,
      "node_id": "MDQ6VXNlcjIxNjYzOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/216638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanslenders",
      "html_url": "https://github.com/jonathanslenders",
      "followers_url": "https://api.github.com/users/jonathanslenders/followers",
      "following_url": "https://api.github.com/users/jonathanslenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanslenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanslenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanslenders/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanslenders/orgs",
      "repos_url": "https://api.github.com/users/jonathanslenders/repos",
      "events_url": "https://api.github.com/users/jonathanslenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanslenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T20:58:53Z",
    "updated_at": "2016-08-15T20:58:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI: http://jvns.ca/blog/2016/06/13/should-you-be-scared-of-signals/\n\n> If you register a signal handler, it’s called in the middle of whatever code you happen to be running. This sets up some very onerous restrictions on what a signal handler can do: it can’t assume that any locks are unlocked, any complex data structures are in a reliable state, etc. The restrictions are stronger than the restrictions on thread-safe code, since the signal handler interrupts and stops the original code from running. So, for instance, it can’t even wait on a lock, because the code that’s holding the lock is paused until the signal handler completes. This means that a lot of convenient functions, including the stdio functions, malloc, etc., are unusable from a signal handler, because they take locks internally.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239927378",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239927378",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239927378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTkyNzM3OA==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T20:59:28Z",
    "updated_at": "2016-08-15T20:59:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Just one remark, we are handling one specific case here. The one where a KeyboardInterrupt exception is raised. The signal handler could raise another exception as well, possibly breaking other code.\n\nOr there could be other exceptions (unrelated to signals) due to bugs.\n\n> If I recall correctly, signal handlers should actually never raise exceptions, because this breaks the API that functions expose. As a caller of a function, you assume a certain contract. This is defined by the inputs, the outputs and the exceptions that the function raises. As a caller of a function, you have then the responsibility to either handle these exceptions or let them propagate. If it you decide to let an exception propagate, then it becomes part of the callers API. Now, if a signal handler would throw in an exception, it will break the contract that these functions have with each other.\n\nI agree in general, but I do think that `KeyboardInterrupt` is a special case. For non-interactive code, it's fine to not care about `KeyboardInterrupt`. However, for interactive programs like IPython, you should be prepared to get a `KeyboardInterrupt`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239927598",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239927598",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239927598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTkyNzU5OA==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T21:00:11Z",
    "updated_at": "2016-08-15T21:00:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> FYI: http://jvns.ca/blog/2016/06/13/should-you-be-scared-of-signals/\n\nThat's about the low-level Unix signals, not about how Python deals with signals. So I don't think it is very relevant.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239932431",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239932431",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239932431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTkzMjQzMQ==",
    "user": {
      "login": "jonathanslenders",
      "id": 216638,
      "node_id": "MDQ6VXNlcjIxNjYzOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/216638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanslenders",
      "html_url": "https://github.com/jonathanslenders",
      "followers_url": "https://api.github.com/users/jonathanslenders/followers",
      "following_url": "https://api.github.com/users/jonathanslenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanslenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanslenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanslenders/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanslenders/orgs",
      "repos_url": "https://api.github.com/users/jonathanslenders/repos",
      "events_url": "https://api.github.com/users/jonathanslenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanslenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T21:19:08Z",
    "updated_at": "2016-08-15T21:19:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @jdemeyer ,\n\nUnfortunately, no. Thinking about it, the pull request is wrong and it can still break stuff. It only hides whatever will break.\n\n> Or there could be other exceptions (unrelated to signals) due to bugs.\n\nIn case of a bug, these exception should propagate and probably crash the application. (See PEP20.)\n\n> That's about the low-level Unix signals, not about how Python deals with signals. So I don't think it is very relevant.\n\nThese are still signals. The only difference is that in Python, the signal handler is only called after the GIL is released. Everything else is exactly the same as a signal handler in C and it has the same restrictions.\n\nI think that you confuse what is the cause and the handler of `KeyboardInterrupt` in a normal situation.\nWhen using GNU readline, it's the readline code that raises KeyboardInterrupt (when Ctrl_c is pressed) and the application that should handle it. Not the other way around. What you simulated was the application that raised `KeyboardInterrupt` and prompt_toolkit (a readline replacement) that has to catch it.) In the case of readline, the `KeyboardInterrupt` exception is clearly part of the signature of the `(raw_)input` function. Every piece of code that calls this function is supposed to either handle that or let it propagate. Code that does not call `input` is _not_ supposed to handle `KeyboardInterrupt`. Really, there is no way that arbitrary code should be able to handle `KeyboardInterrupt` if it doesn't call `input`. This would require putting a `try/finally` around almost every line of code in the whole program.\n\nBy the way, by default, when calling `prompt_toolkit.shortcuts.prompt`, it will raise `KeyboardInterrupt` when Control-C has been pressed. It raises it because it is coded that way, and it's part of the `prompt` signature that it can raise that exception.\n\nI hope this makes sense.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239935575",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239935575",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239935575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTkzNTU3NQ==",
    "user": {
      "login": "jonathanslenders",
      "id": 216638,
      "node_id": "MDQ6VXNlcjIxNjYzOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/216638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanslenders",
      "html_url": "https://github.com/jonathanslenders",
      "followers_url": "https://api.github.com/users/jonathanslenders/followers",
      "following_url": "https://api.github.com/users/jonathanslenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanslenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanslenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanslenders/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanslenders/orgs",
      "repos_url": "https://api.github.com/users/jonathanslenders/repos",
      "events_url": "https://api.github.com/users/jonathanslenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanslenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T21:31:28Z",
    "updated_at": "2016-08-15T21:31:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, if we would merge this pull request, and somebody else would raise an exception from a signal handler like in your example. It won't give this exception, but it can turn any other data structure in an inconsistent state, causing indirectly arbitrary errors in all places of the code.\n\nTake for instance these two lines of code:\nhttps://github.com/jonathanslenders/python-prompt-toolkit/blob/master/prompt_toolkit/buffer.py#L427\nThese are supposed to be atomic. There is no lock around it, because these lines of code are not accessed from any other thread. But if a signal handler interferes it suddenly isn't atomic anymore. The data structure becomes corrupt, and any other exception could occur. In this case we could get an `IndexError`.\n\nMaybe you have ever seen a `@timeout` decorator that uses exceptions and signals to set time outs around functions. People try this, but it has exactly the same issues and is _not_ reliable.\n\nIt's the responsibility of the author of a signal handler to write code that is not just thread-safe, but even stronger, safe to put in a signal handler.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/239940802",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-239940802",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 239940802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTk0MDgwMg==",
    "user": {
      "login": "jonathanslenders",
      "id": 216638,
      "node_id": "MDQ6VXNlcjIxNjYzOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/216638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanslenders",
      "html_url": "https://github.com/jonathanslenders",
      "followers_url": "https://api.github.com/users/jonathanslenders/followers",
      "following_url": "https://api.github.com/users/jonathanslenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanslenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanslenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanslenders/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanslenders/orgs",
      "repos_url": "https://api.github.com/users/jonathanslenders/repos",
      "events_url": "https://api.github.com/users/jonathanslenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanslenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T21:51:51Z",
    "updated_at": "2016-08-15T21:51:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just curious. What is your use case?\nMaybe we could still merge it, while it's say 90% of the time probably going to be safe.\n\nI realize that the default signal handler for SIGINT actually does raise a KeyboardInterrupt, which is probably a case of practicality beats purity. But if that exception is caught at some point, the application is not guaranteed to remain in a consistent state.\n\nIf it is important, I guess we could replace some signal handlers right before calling prompt_toolkit, and execute them in a thread safe way.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/240025303",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-240025303",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 240025303,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDAyNTMwMw==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T07:32:40Z",
    "updated_at": "2016-08-16T07:32:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The only difference is that in Python, the signal handler is only called after the GIL is released.\n\nThis \"only\" difference is really a very major difference.\n\n> Everything else\n\nWhich is not much, except maybe the thing about locks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/240026296",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-240026296",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 240026296,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDAyNjI5Ng==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T07:37:53Z",
    "updated_at": "2016-08-16T07:37:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Just curious. What is your use case?\n\nMy main use case is `alarm()`. Typical example:\n\n```\nalarm(5); some_computation();\n```\n\nThis is meant to interrupt `some_computation()` after 5 seconds. However, if `some_computation()` happens to take less than 5 seconds, it will crash IPython. This used to work correctly in IPython 4 and earlier.\n\nThere is another issue with IPython 5 that it breaks GDB debugging because of CTRL-C not working anymore. But I have not investigated this further.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/240027989",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-240027989",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 240027989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDAyNzk4OQ==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T07:47:03Z",
    "updated_at": "2016-08-16T07:47:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It's the responsibility of the author of a signal handler to write code that is not just thread-safe, but even stronger, safe to put in a signal handler.\n\n`<rant>`\nPython has decided that it's OK to `raise KeyboardInterrupt` in a signal handler, since they do that by default. I would argue that it's the job of the language designer (in this case Python) to design a language which offers proper control over signals. I agree that it is impossible to write Python code which is robust under signals. I see this as a shortcoming in Python. While reading https://github.com/jonathanslenders/python-prompt-toolkit, I saw \"Pure Python\" listed as first feature and immediately thought: \"that's a bug, not a feature\". I am a big fan of [Cython](http://cython.org/), where it is possible to have full control over signal handling.\n`</rant>`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/240029045",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-240029045",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 240029045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDAyOTA0NQ==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T07:52:43Z",
    "updated_at": "2016-08-16T07:52:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So, if we would merge this pull request, and somebody else would raise an exception from a signal handler like in your example. It won't give this exception, but it can turn any other data structure in an inconsistent state, causing indirectly arbitrary errors in all places of the code.\n> \n> Maybe you have ever seen a @timeout decorator that uses exceptions and signals to set time outs around functions. People try this, but it has exactly the same issues and is not reliable.\n\nOf course you are right. Given that `KeyboardInterrupt` can already introduce corruption, I don't see the problem with this pull request, which seems to work fine in most cases. You can either try to fix most cases, or say \"we cannot fix everything, so we should just fix nothing instead\".\n\nRemember that this is about IPython, where (IMHO) user-friendlyness should be more important than complete robustness.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/240139757",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-240139757",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 240139757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDEzOTc1Nw==",
    "user": {
      "login": "jonathanslenders",
      "id": 216638,
      "node_id": "MDQ6VXNlcjIxNjYzOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/216638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanslenders",
      "html_url": "https://github.com/jonathanslenders",
      "followers_url": "https://api.github.com/users/jonathanslenders/followers",
      "following_url": "https://api.github.com/users/jonathanslenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanslenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanslenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanslenders/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanslenders/orgs",
      "repos_url": "https://api.github.com/users/jonathanslenders/repos",
      "events_url": "https://api.github.com/users/jonathanslenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanslenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T15:31:27Z",
    "updated_at": "2016-08-16T20:24:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't see the problem with this pull request, which seems to work fine in most cases. You can either try to fix most cases, or say \"we cannot fix everything, so we should just fix nothing instead\".\n\nAgreed. Definitely about user-friendlyness. But I'll try later today if there is something that I can do in prompt_toolkit to handle it in a safer way. (I have some ideas.) If I find a safer solution, I'd prefer that. Otherwise, we'll merge this as a best effort of what is technically possible.\n\nRegarding Python's decision on `KeyboardInterrupt`. I think that's mostly for use in the REPL, where you don't care if interrupted code ends up in a broken state, and where the practicality goes above the correctness. In a normal application, the only sensible actions for `KeyboardInterrupt` are to ignore it or to quit the application anyway.\nLooking at how rust (which is by design free of race conditions and thread safe) probably won't allow any custom code to be executed in a signal handler and enforces people to use signalfd should say enough.\nhttps://github.com/rust-lang/rfcs/issues/1368\n\nSorry if I sounded too negative in the first place. I really want to avoid that we are concealing/suppressing bugs, rather than solving them. But you're right that we should do the best effort to make it user-friendly anyway.\n\nEdit: It will be for tomorrow. It's too late right now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/240333207",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-240333207",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 240333207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDMzMzIwNw==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-17T07:20:08Z",
    "updated_at": "2016-08-17T07:20:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think that's mostly for use in the REPL, where you don't care if interrupted code ends up in a broken state, and where the practicality goes above the correctness.\n\nThis is **exactly** the use case of IPython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/240378815",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-240378815",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 240378815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDM3ODgxNQ==",
    "user": {
      "login": "jonathanslenders",
      "id": 216638,
      "node_id": "MDQ6VXNlcjIxNjYzOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/216638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanslenders",
      "html_url": "https://github.com/jonathanslenders",
      "followers_url": "https://api.github.com/users/jonathanslenders/followers",
      "following_url": "https://api.github.com/users/jonathanslenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanslenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanslenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanslenders/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanslenders/orgs",
      "repos_url": "https://api.github.com/users/jonathanslenders/repos",
      "events_url": "https://api.github.com/users/jonathanslenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanslenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-17T10:55:16Z",
    "updated_at": "2016-08-17T10:55:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, but this is meant for when the REPL executes code. (Because somebody presses Ctrl-c) It's not while reading the input, that's different.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/240491462",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-240491462",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 240491462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDQ5MTQ2Mg==",
    "user": {
      "login": "jonathanslenders",
      "id": 216638,
      "node_id": "MDQ6VXNlcjIxNjYzOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/216638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanslenders",
      "html_url": "https://github.com/jonathanslenders",
      "followers_url": "https://api.github.com/users/jonathanslenders/followers",
      "following_url": "https://api.github.com/users/jonathanslenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanslenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanslenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanslenders/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanslenders/orgs",
      "repos_url": "https://api.github.com/users/jonathanslenders/repos",
      "events_url": "https://api.github.com/users/jonathanslenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanslenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-17T17:50:04Z",
    "updated_at": "2016-08-17T17:50:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi all, I made a pull request to prompt_toolkit that should handle exceptions coming from signals in a safe way: https://github.com/jonathanslenders/python-prompt-toolkit/pull/382\n\n@jdemeyer: Could you test this pull request? (check out that prompt_toolkit branch and install it.)\n\nI'm not sure whether this is something I want to do by default for all prompt_toolkit applications or make it opt-in (for IPython). I guess it depends on the cost of replacing signal handlers.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/272170608",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-272170608",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 272170608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjE3MDYwOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-12T14:03:59Z",
    "updated_at": "2017-01-12T14:03:59Z",
    "author_association": "MEMBER",
    "body": "@jdemeyer are you happy to move the extra lines into a `finally:` block as @jonathanslenders  suggested?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/275939381",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-275939381",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 275939381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTkzOTM4MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-29T19:29:30Z",
    "updated_at": "2017-01-29T19:29:30Z",
    "author_association": "MEMBER",
    "body": "Should we bump this to 5.3 ?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/275948398",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-275948398",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 275948398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTk0ODM5OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-29T21:39:34Z",
    "updated_at": "2017-01-29T21:39:34Z",
    "author_association": "MEMBER",
    "body": "Continued in #10215 as I think we were just waiting on a simple change to merge this. Closing here."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/276011683",
    "html_url": "https://github.com/ipython/ipython/pull/9867#issuecomment-276011683",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9867",
    "id": 276011683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjAxMTY4Mw==",
    "user": {
      "login": "jdemeyer",
      "id": 3625785,
      "node_id": "MDQ6VXNlcjM2MjU3ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemeyer",
      "html_url": "https://github.com/jdemeyer",
      "followers_url": "https://api.github.com/users/jdemeyer/followers",
      "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
      "repos_url": "https://api.github.com/users/jdemeyer/repos",
      "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-30T09:11:53Z",
    "updated_at": "2017-01-30T09:11:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for that... I had a million other things on my mind."
  }
]
