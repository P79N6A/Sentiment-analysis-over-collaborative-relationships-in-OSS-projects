[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362759201",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-362759201",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 362759201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc1OTIwMQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T01:18:08Z",
    "updated_at": "2018-02-03T01:18:08Z",
    "author_association": "MEMBER",
    "body": "A case derived from `tests.categorical.test_operators.TestCategoricalOps.test_comparisons`, where it has the comment\r\n\r\n```\r\n# categorical cannot be compared to Series or numpy array, and also\r\n# not the other way around\r\n```\r\n\r\n```\r\ncat = Series(Categorical([1, 2, 3], ordered=True))\r\ns = Series([2, 2, 2])\r\n\r\n>>> s < cat\r\nTraceback (most recent call last):\r\n[...]\r\nTypeError: Cannot compare a Categorical for op __lt__ with type <type 'numpy.ndarray'>.\r\nIf you want to compare values, use 'np.asarray(cat) <op> other'.\r\n\r\n>>> s < pd.CategoricalIndex(cat)\r\n0    False\r\n1    False\r\n2     True\r\ndtype: bool\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363391316",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-363391316",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 363391316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzM5MTMxNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T11:14:03Z",
    "updated_at": "2018-02-06T11:14:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "there are some issues about this already. see if you can find them."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363483942",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-363483942",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 363483942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzQ4Mzk0Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T16:41:19Z",
    "updated_at": "2018-02-06T16:41:19Z",
    "author_association": "MEMBER",
    "body": "Closest issues with categorical label are #18050, #8995, neither of which seem to differentiate between the behavior of `Categorical.__op__` vs `CategoricalIndex.__op__` vs `Series[category].__op__`\r\n\r\n@TomAugspurger any thoughts on the One True Implementation for these operations?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363490242",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-363490242",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 363490242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzQ5MDI0Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T16:58:40Z",
    "updated_at": "2018-02-06T16:58:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "No strong thoughts, but I suppose a decent heuristic is \"what would the result be if NumPy had a categorical dtype?\" In that case, let's just do the same as `Series[int].op(Index[int])` and `Series[int].op(ndarray[int])`, etc. So\r\n\r\nself    | other   | return\r\n------- | ------- | ------\r\nseries  | ndarray | series\r\nseries  | index   | series\r\nindex   | series  | ndarray / extension array\r\nindex   | series  | ndarray / extension array\r\nndarray | series  | series\r\nndarray | index   | ndarray / extension array\r\n\r\n\r\nDoes that make sense?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363513640",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-363513640",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 363513640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzUxMzY0MA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T18:12:07Z",
    "updated_at": "2018-02-06T18:12:07Z",
    "author_association": "MEMBER",
    "body": "I should clarify.  The question isn't what the return type should be, but which operations are allowed at all.\r\n\r\n\r\nThe easy (i.e. pretty obviously wrong ATM) part is cases where `x < y` is allowed but `y > x` raises:\r\n```\r\ncat = pd.Categorical([1, 2, 3], ordered=True)\r\nidx = pd.CategoricalIndex(cat)\r\nser = pd.Series(cat)\r\n\r\n>>> cat < ser   # raises TypeError\r\n>>> ser > cat   # returns Series\r\n>>> cat < idx   # raises TypeError\r\n>>> idx > cat   # returns array\r\n>>> idx < ser   # raises TypeError\r\n>>> ser > idx   # raises TypeError\r\n```\r\n\r\nThe less obvious part is what casting rules are allowed.  ATM `CategoricalIndex.__op__` is much more forgiving about input dtypes and will cast `other` before dispatching to `Categorical.__op__`.\r\n\r\n```\r\n>>> ser < ser.astype('i8')   # raises TypeError\r\n>>> idx < idx.astype('i8')   # returns array\r\n>>> cat < cat.astype('i8')   # raises TypeError\r\n\r\n>>> ser == ser.astype('i8')  # returns Series\r\n>>> idx == idx.astype('i8')   # returns array\r\n>>> cat == cat.astype('i8')  # returns array\r\n```\r\n\r\nThe goal here is to have one implementation of each of these methods (ideally in Categorical) and then have the other classes wrap that instead of re-implementing and risking having the logic diverge."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/364675105",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-364675105",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 364675105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY3NTEwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-10T17:43:21Z",
    "updated_at": "2018-02-10T17:43:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Categorical is prob a bit strict about these checks ATM. Categorial and CI should behave exactly the same.\r\n\r\nThese should all (Series, Cat, CI) should all respect ordered (IOW they have to be the same). for comparison purposes.\r\n\r\n@jschendel "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367118645",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-367118645",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 367118645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzExODY0NQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T21:04:16Z",
    "updated_at": "2018-02-20T21:04:16Z",
    "author_association": "MEMBER",
    "body": "It looks like `Series.__cmp__(CategoricalIndex)` effectively calls `other = np.asarray(other)` on the CategoricalIndex, which I expect isn't the desired behavior."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/371986416",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-371986416",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 371986416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk4NjQxNg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T00:50:53Z",
    "updated_at": "2018-03-10T00:50:53Z",
    "author_association": "MEMBER",
    "body": "One more:\r\n\r\nWhat should `(DatetimeIndex|TimedeltaIndex|PeriodIndex).__(add|sub)__(Categorical|CategoricalIndex)` do?  I think right now they return `NotImplemented` which seems reasonable, but they do it in a catch-all block instead of intentionally and I don't think the case is tested.\r\n\r\n@jschendel are you the appropriate person to ping on this?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372065634",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19513#issuecomment-372065634",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19513",
    "id": 372065634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjA2NTYzNA==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T20:52:26Z",
    "updated_at": "2018-03-10T20:52:26Z",
    "author_association": "MEMBER",
    "body": "> @jschendel are you the appropriate person to ping on this?\r\n\r\nI don't think I have any type of definitive say on this; mostly worked on categorical vs. categorical comparisons.\r\n\r\nI agree that this probably shouldn't be supported.  I suppose you could perform the operation on the underlying category values, but it seems like you'd run into ambiguous corner cases pretty quickly.  For example, would you actually want to allow add/sub if the categories were ordered with a non-standard ordering, e.g. `Timestamp('2017-01-01') > Timestamp('2018-01-01')` ?  Not sure why anyone would ever do that, but could conceivably happen.\r\n\r\nAlso doesn't look like add/sub at the scalar level is implemented for `Timestamp|Timedelta|Period` vs. `Categorical|CategoricalIndex`, which I would expect to be implemented if we were to support the same operations on the index equivalent."
  }
]
