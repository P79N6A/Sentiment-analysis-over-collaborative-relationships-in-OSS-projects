[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72542040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9397#issuecomment-72542040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9397",
    "id": 72542040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTQyMDQw",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-02T21:31:17Z",
    "updated_at": "2015-02-02T21:31:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I typically do the same as you, but most often it's just a single group. In that case it's just `group = next(iter(gr))` which isn't bad. We  _could_ overload `__getitem__` so that `gr[:5]` is pretty much this, but I don't know if the use-case warrents that extra complexity.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73455064",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9397#issuecomment-73455064",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9397",
    "id": 73455064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDU1MDY0",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-09T04:08:15Z",
    "updated_at": "2015-02-09T04:08:15Z",
    "author_association": "MEMBER",
    "body": "This can be shortened by using the `toolz` library:\n\n``` python\nfrom toolz import take\npd.concat(list(take(3, group)))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75744627",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9397#issuecomment-75744627",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9397",
    "id": 75744627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzQ0NjI3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-24T12:03:03Z",
    "updated_at": "2015-02-24T12:03:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Example of getting the last group here: \n\nhttp://stackoverflow.com/questions/28694208/how-to-get-last-group-in-pandas-groupby/28695301#28695301\n\n```\nIn [12]: df = pd.DataFrame({'a':['1','2','2','4','5','2'], 'b':np.random.randn(6)})\n\nIn [13]: g = df.groupby('a')\n\nIn [14]: g.groups\nOut[14]: {'1': [0], '2': [1, 2, 5], '4': [3], '5': [4]}\n\nIn [15]: import itertools\n\nIn [16]: list(itertools.islice(g,len(g)-1,len(g)))\nOut[16]: \n[('5',    a         b\n  4  5 -0.644857)]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75784313",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9397#issuecomment-75784313",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9397",
    "id": 75784313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1Nzg0MzEz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-24T16:02:16Z",
    "updated_at": "2015-02-24T16:02:16Z",
    "author_association": "MEMBER",
    "body": "Do we want a convenience function here? \n\nJust putting some random ideas:\n- A `g.names` attribute returning the group names in the correct order? (`g.groups.keys()` is not ordered), so you can do `g.get_group(g.names[-1])` or  `g.get_group(g.names[0])`\n- A `get_igroup` method that lets you retrieve the group by order instead of name (or as an argument to `get_group`): `g.get_igroup(-1)`\n- A `split`-like functionality on the groupby object, returning a list of all groups: `g.split()[-1]` (but, this has to create all the groups to just get the last one)\n- Overload `__getitem__` (like for a DataFrame, a slice also slices the rows and not the columns) to slice the groups instead of the columns (currently this gives a TypeError: unhashable type)\n- An explicit slicing function, like `g.slice_groups(0, 1)` or `g.slice_groups(-1, None)`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418898264",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9397#issuecomment-418898264",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9397",
    "id": 418898264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODg5ODI2NA==",
    "user": {
      "login": "cchwala",
      "id": 102827,
      "node_id": "MDQ6VXNlcjEwMjgyNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/102827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cchwala",
      "html_url": "https://github.com/cchwala",
      "followers_url": "https://api.github.com/users/cchwala/followers",
      "following_url": "https://api.github.com/users/cchwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/cchwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cchwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cchwala/subscriptions",
      "organizations_url": "https://api.github.com/users/cchwala/orgs",
      "repos_url": "https://api.github.com/users/cchwala/repos",
      "events_url": "https://api.github.com/users/cchwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cchwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T22:11:21Z",
    "updated_at": "2018-09-06T07:25:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Getting groups by index would be useful for my application.\r\n\r\nI have implemented a simple function with the name `get_igroup()` as suggested by @jorisvandenbossche. The implementation is based on how `get_group()` does it via [`_get_indices()`](https://github.com/pandas-dev/pandas/blob/d83f53343f0baecc9aa4e7c22533c00b8cd9dbb2/pandas/core/groupby/groupby.py#L454)\r\n\r\n``` python\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\narrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],\r\n          ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]\r\ntuples = list(zip(*arrays))\r\nindex = pd.MultiIndex.from_tuples(tuples, names=['first', 'second'])\r\n\r\ns = pd.Series(np.random.randn(8), index=index)\r\n\r\nprint s\r\n\r\n\r\ndef get_igroup(g, i):\r\n    \"\"\" Get grouby group by index\r\n\r\n    g : pandas.grouby object\r\n    i : int\r\n    \"\"\"\r\n\r\n    keys = g.indices.keys()\r\n    keys.sort()\r\n    indices = g.indices.get(keys[i])\r\n    return g._selected_obj.take(indices)\r\n\r\n\r\nprint '\\n=================================='\r\nprint \"Testing with `.groupby('first')` \"\r\ng = s.groupby('first')\r\n\r\nfor i in [0, 1, -1]:\r\n    print '\\n------------------------------- \\nget_group for index=%d \\n' % i\r\n    print get_igroup(g, i).head()\r\n    \r\nprint '\\n=================================='\r\nprint \"Testing with `.groupby(['first', 'second'])` \"\r\ng = s.groupby(['first', 'second'])\r\n\r\n\r\nfor i in [0, 1, -1]:\r\n    print '\\n------------------------------- \\nget_group for index=%d \\n' % i\r\n    print get_igroup(g, i).head()\r\n\r\n```\r\n\r\nOutput of the script above: \r\n<details>\r\n\r\n```\r\nfirst  second\r\nbar    one      -0.376155\r\n       two      -0.521434\r\nbaz    one      -0.143541\r\n       two      -0.043723\r\nfoo    one       0.289646\r\n       two      -0.716117\r\nqux    one      -1.460004\r\n       two       0.729040\r\ndtype: float64\r\n\r\n==================================\r\nTesting with `.groupby('first')` \r\n\r\n------------------------------- \r\nget_group for index=0 \r\n\r\nfirst  second\r\nbar    one      -0.376155\r\n       two      -0.521434\r\ndtype: float64\r\n\r\n------------------------------- \r\nget_group for index=1 \r\n\r\nfirst  second\r\nbaz    one      -0.143541\r\n       two      -0.043723\r\ndtype: float64\r\n\r\n------------------------------- \r\nget_group for index=-1 \r\n\r\nfirst  second\r\nqux    one      -1.460004\r\n       two       0.729040\r\ndtype: float64\r\n\r\n==================================\r\nTesting with `.groupby(['first', 'second'])` \r\n\r\n------------------------------- \r\nget_group for index=0 \r\n\r\nfirst  second\r\nbar    one      -0.376155\r\ndtype: float64\r\n\r\n------------------------------- \r\nget_group for index=1 \r\n\r\nfirst  second\r\nbar    two      -0.521434\r\ndtype: float64\r\n\r\n------------------------------- \r\nget_group for index=-1 \r\n\r\nfirst  second\r\nqux    two       0.72904\r\ndtype: float64\r\n\r\n```\r\n\r\n</details>\r\n  \r\n@jreback If desired I could implement this or something similar via a PR. I am not sure about how much effort testing this would be, though.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418904601",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9397#issuecomment-418904601",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9397",
    "id": 418904601,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODkwNDYwMQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T22:41:08Z",
    "updated_at": "2018-09-05T22:41:08Z",
    "author_association": "MEMBER",
    "body": "I'm -1 on this as I don't think we make any guarantees about the ordering of groups within a groupby "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418994536",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9397#issuecomment-418994536",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9397",
    "id": 418994536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODk5NDUzNg==",
    "user": {
      "login": "cchwala",
      "id": 102827,
      "node_id": "MDQ6VXNlcjEwMjgyNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/102827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cchwala",
      "html_url": "https://github.com/cchwala",
      "followers_url": "https://api.github.com/users/cchwala/followers",
      "following_url": "https://api.github.com/users/cchwala/following{/other_user}",
      "gists_url": "https://api.github.com/users/cchwala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cchwala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cchwala/subscriptions",
      "organizations_url": "https://api.github.com/users/cchwala/orgs",
      "repos_url": "https://api.github.com/users/cchwala/repos",
      "events_url": "https://api.github.com/users/cchwala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cchwala/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-06T07:32:27Z",
    "updated_at": "2018-09-06T07:32:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@WillAyd: Since I sort the group keys, the resulting order of the index retrieval should be deterministic even though the keys are unordered at first. The sorting also works correctly for tuple keys, as you can see in my example. But I understand that this might have some edge cases which lead to inconsistencies."
  }
]
