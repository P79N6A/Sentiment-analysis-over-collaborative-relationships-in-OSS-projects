[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40805285",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40805285",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40805285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODA1Mjg1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T12:30:57Z",
    "updated_at": "2014-04-18T12:30:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "you shouldn't assign to an already created frame, that is very inefficient, instead\nbuild up a list and concat\n\n```\ndef main_func2(df1, df2, trail_num):\n    l = []\n    for inum in range(trail_num, len(df1)):\n        columns_subset = df2.iloc[inum].valid().index\n        dfslice = df1.filter(columns_subset)[inum - trail_num: inum]\n        slicestd = dfslice.std()\n        l.append(slicestd)\n    return pd.concat(l,axis=1)\n```\n\neven better why are you not doing this?\n\n```\npd.expanding_std(df1,3)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40816247",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40816247",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40816247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODE2MjQ3",
    "user": {
      "login": "vpatel34",
      "id": 4982696,
      "node_id": "MDQ6VXNlcjQ5ODI2OTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4982696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vpatel34",
      "html_url": "https://github.com/vpatel34",
      "followers_url": "https://api.github.com/users/vpatel34/followers",
      "following_url": "https://api.github.com/users/vpatel34/following{/other_user}",
      "gists_url": "https://api.github.com/users/vpatel34/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vpatel34/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vpatel34/subscriptions",
      "organizations_url": "https://api.github.com/users/vpatel34/orgs",
      "repos_url": "https://api.github.com/users/vpatel34/repos",
      "events_url": "https://api.github.com/users/vpatel34/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vpatel34/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T15:16:55Z",
    "updated_at": "2014-04-18T15:16:55Z",
    "author_association": "NONE",
    "body": "Thanks for the tip on using a list then concatenate!  As for your question, I used too simple of an example.  Here's something which I believe requires the approach I took:\n\n``` python\nimport pandas as pd\nimport numpy as np\n\ndef avg_covariance(df):\n    cov_matrix = df.cov()\n    avg_pairwise_cov = cov_matrix.sum(1)\n    return avg_pairwise_cov\n\ndef main_func4(df1, df2, trail_num):\n    l = []\n    for inum in range(trail_num, len(df1)):\n        columns_subset = df2.iloc[inum].valid().index\n        dfslice = df1.filter(columns_subset)[inum - trail_num: inum]\n        ser = avg_covariance(dfslice)\n        l.append(ser)\n    return pd.concat(l,axis=1)\n\n\nnp.random.seed(1234)\ndf1 = pd.DataFrame(np.random.randn(1000,100))\ndf2 = pd.DataFrame(np.random.randn(1000,100))\ndf2 = df2.apply(lambda x: np.where(abs(x)<0.3,np.nan,x))\n\nprint pd.__version__\n%timeit main_func4(df1,df2,3)\n```\n\nOutput1:\n0.12.0\n1 loops, best of 3: 2.28 s per loop\n\nOutput2:\n0.13.1\n1 loops, best of 3: 2.58 s per loop\n\nThe speed difference isn't that bad here, so I guess I'll go back and reprogram and see if this still is an issue using your list then concatenation method.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40819654",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40819654",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40819654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODE5NjU0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T15:58:38Z",
    "updated_at": "2014-04-18T15:58:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "you should also look at the pairwise cov methods\n\nthese do exactly this and in a vectorized manner\n\ndon't loop if you can avoid it\n\nclosing\npls reopen if u continue to find difficulties \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40820223",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40820223",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40820223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODIwMjIz",
    "user": {
      "login": "vpatel34",
      "id": 4982696,
      "node_id": "MDQ6VXNlcjQ5ODI2OTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4982696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vpatel34",
      "html_url": "https://github.com/vpatel34",
      "followers_url": "https://api.github.com/users/vpatel34/followers",
      "following_url": "https://api.github.com/users/vpatel34/following{/other_user}",
      "gists_url": "https://api.github.com/users/vpatel34/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vpatel34/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vpatel34/subscriptions",
      "organizations_url": "https://api.github.com/users/vpatel34/orgs",
      "repos_url": "https://api.github.com/users/vpatel34/repos",
      "events_url": "https://api.github.com/users/vpatel34/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vpatel34/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T16:05:26Z",
    "updated_at": "2014-04-18T16:07:38Z",
    "author_association": "NONE",
    "body": "Jreback, can you elaborate on which pairwise covariance method you are talking about?  I looked in the docs and I don't see what you mean.  I thought I'm already using the pairwise covariance method in cov_matrix = df.cov()?  Thanks!!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40821052",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40821052",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40821052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODIxMDUy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T16:16:00Z",
    "updated_at": "2014-04-18T16:16:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "http://pandas.pydata.org/pandas-docs/stable/computation.html#computing-rolling-pairwise-correlations\n\nthe API is slightly changing in 0.14 FYI\nand will also directly alko rolling pairwise cov\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40833534",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40833534",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40833534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODMzNTM0",
    "user": {
      "login": "vpatel34",
      "id": 4982696,
      "node_id": "MDQ6VXNlcjQ5ODI2OTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4982696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vpatel34",
      "html_url": "https://github.com/vpatel34",
      "followers_url": "https://api.github.com/users/vpatel34/followers",
      "following_url": "https://api.github.com/users/vpatel34/following{/other_user}",
      "gists_url": "https://api.github.com/users/vpatel34/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vpatel34/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vpatel34/subscriptions",
      "organizations_url": "https://api.github.com/users/vpatel34/orgs",
      "repos_url": "https://api.github.com/users/vpatel34/repos",
      "events_url": "https://api.github.com/users/vpatel34/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vpatel34/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T18:44:38Z",
    "updated_at": "2014-04-18T18:44:38Z",
    "author_association": "NONE",
    "body": "You're saying calculate a rolling pairwise correlation matrix for all values in df1, and then just select the subset of columns I want after that for the average correlation calculation?  I just did a bunch of testing on that assumption and it seems that way is much slower?  Thank you for your patience with me, as I am kind of lost here.\n\n``` python\nimport pandas as pd\nimport numpy as np\n\ndef avg_correlation(df):\n    corr_matrix = df.corr()\n    avg_pairwise_corr = corr_matrix.mean(0)\n    return avg_pairwise_corr\n\ndef main_func4(df1, df2, trail_num):\n    lst = []\n    for date_end in df1.index[trail_num-1:]:\n        date_end_loc = df1.index.get_loc(date_end)\n        date_start_loc = date_end_loc - trail_num + 1\n        date_start = df1.index[date_start_loc]\n        # Only calculate average correlation for the columns that have value\n        # 1 on date \"date_end\" in df2\n        columns_subset = df2.loc[date_end].valid().index\n        dfslice = df1.filter(columns_subset).loc[date_start:date_end]\n        sliceavgcorr = avg_correlation(dfslice)\n        sliceavgcorr.name = date_end\n        lst.append(sliceavgcorr)\n    return pd.concat(lst,axis=1).T\n\ndef main_func5(df1, df2, trail_num):\n    rolling_corr = pd.rolling_corr_pairwise(df1, trail_num, trail_num)\n    lst = []\n    for date_end in df1.index:\n        # Only calculate average correlation for the columns that have value\n        # 1 on date \"date_end\" in df2\n        columns_subset = df2.loc[date_end].valid().index\n        corr_matrix_filtered = rolling_corr.ix[date_end, columns_subset, columns_subset]\n        avgcorr = corr_matrix_filtered.mean(0)\n        avgcorr.name = date_end \n        lst.append(avgcorr)\n    return pd.concat(lst,axis=1).T\n\n\nnp.random.seed(1234)\nnumrows = 1000\nnumcols = 100\nindex = pd.date_range('1/1/2000',periods=numrows)\ncolumns = ['C'+str(num) for num in range(0,numcols)]\ndf1 = pd.DataFrame(np.random.randn(numrows,numcols), index=index,columns=columns)\ndf2 = pd.DataFrame(np.random.randn(numrows,numcols), index=index,columns=columns)\n# df2 is a random matrix of 1's and nans\ndf2 = df2.apply(lambda x: np.where(abs(x)<0.3,np.nan,1))    \n\nprint pd.__version__\n%timeit main_func4(df1,df2,3)\n\n0.13.1\n1 loops, best of 3: 2.99 s per loop\n\nprint pd.__version__\n%timeit main_func5(df1,df2,3)\n\n0.13.1\n1 loops, best of 3: 17.4 s per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40834952",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40834952",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40834952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODM0OTUy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T19:01:02Z",
    "updated_at": "2014-04-18T19:01:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "why are you looping at all?\ndoes pd.rolling_apply or pd.expanding_apply not do what u want?\n\nI have not looked at your calculation in detail but seems very straightforward \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40836595",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40836595",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40836595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODM2NTk1",
    "user": {
      "login": "vpatel34",
      "id": 4982696,
      "node_id": "MDQ6VXNlcjQ5ODI2OTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4982696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vpatel34",
      "html_url": "https://github.com/vpatel34",
      "followers_url": "https://api.github.com/users/vpatel34/followers",
      "following_url": "https://api.github.com/users/vpatel34/following{/other_user}",
      "gists_url": "https://api.github.com/users/vpatel34/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vpatel34/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vpatel34/subscriptions",
      "organizations_url": "https://api.github.com/users/vpatel34/orgs",
      "repos_url": "https://api.github.com/users/vpatel34/repos",
      "events_url": "https://api.github.com/users/vpatel34/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vpatel34/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T19:20:01Z",
    "updated_at": "2014-04-18T19:20:01Z",
    "author_association": "NONE",
    "body": "I should have made that more clear. I am looping because I only want to calculate average pairwise correlation for a certain subset of the columns on any given date, and that subset can change every day.  pd.rolling_apply or pd.rolling_corr_pairwise calculates for all columns.  That's why in main_func5(), after I calculate pd.rolling_corr_pairwise, I then go into a loop to assemble a dataframe with average pairwise correlations for the different subsets on each date.  I would love it if there's a way to do this without looping, if you have thoughts.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40837750",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40837750",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40837750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODM3NzUw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T19:36:14Z",
    "updated_at": "2014-04-18T19:36:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "not sure what u r doing so no idea\n\nbut you need to profile\n\nusing apply like u are is very inefficient\nyou can use where directly\n\nusing filter and then indexing is also very inefficient\n\nuse loc\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40839579",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6907#issuecomment-40839579",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6907",
    "id": 40839579,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODM5NTc5",
    "user": {
      "login": "vpatel34",
      "id": 4982696,
      "node_id": "MDQ6VXNlcjQ5ODI2OTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4982696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vpatel34",
      "html_url": "https://github.com/vpatel34",
      "followers_url": "https://api.github.com/users/vpatel34/followers",
      "following_url": "https://api.github.com/users/vpatel34/following{/other_user}",
      "gists_url": "https://api.github.com/users/vpatel34/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vpatel34/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vpatel34/subscriptions",
      "organizations_url": "https://api.github.com/users/vpatel34/orgs",
      "repos_url": "https://api.github.com/users/vpatel34/repos",
      "events_url": "https://api.github.com/users/vpatel34/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vpatel34/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T20:01:38Z",
    "updated_at": "2014-04-18T20:01:38Z",
    "author_association": "NONE",
    "body": "Ok thanks will do!\n"
  }
]
