[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385487959",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-385487959",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 385487959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTQ4Nzk1OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T18:31:53Z",
    "updated_at": "2018-04-30T18:31:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Taking a look now."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385492973",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-385492973",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 385492973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTQ5Mjk3Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T18:49:42Z",
    "updated_at": "2018-04-30T18:50:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, so something that confuses me here. I initially hacked this in with a `if isinstance(s, (ExtensionArray, Index)) and is_scalar(key):`.\r\n\r\nThat's mainly because this line failed:\r\n\r\n```\r\n            return self._engine.get_value(s, k,\r\n                                          tz=getattr(series.dtype, 'tz', None))\r\n ```\r\n\r\n`self._engine.get_value(s, k)` expects an ndarray, but we don't want to convert to an ndarray here, since that's expensive. It doesn't seem easy to let `self._engine.get_value` take an ndarray, but what if we do a bit of indirect indexing, by passing `np.arange(len(s)), k`? Something like\r\n\r\n\r\n```diff\r\ndiff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py\r\nindex 2ceec1592..b5b175c11 100644\r\n--- a/pandas/core/indexes/base.py\r\n+++ b/pandas/core/indexes/base.py\r\n@@ -36,6 +36,7 @@ from pandas.core.dtypes.common import (\r\n     is_period_dtype,\r\n     is_bool,\r\n     is_bool_dtype,\r\n+    is_extension_array_dtype,\r\n     is_signed_integer_dtype,\r\n     is_unsigned_integer_dtype,\r\n     is_integer_dtype, is_float_dtype,\r\n@@ -3068,21 +3069,21 @@ class Index(IndexOpsMixin, PandasObject):\r\n         # if we have something that is Index-like, then\r\n         # use this, e.g. DatetimeIndex\r\n         s = getattr(series, '_values', None)\r\n-        if isinstance(s, (ExtensionArray, Index)) and is_scalar(key):\r\n-            try:\r\n-                return s[key]\r\n-            except (IndexError, ValueError):\r\n+        is_extension = is_extension_array_dtype(series)\r\n \r\n-                # invalid type as an indexer\r\n-                pass\r\n+        if is_extension:\r\n+            s = np.arange(len(series))\r\n+        else:\r\n+            s = com._values_from_object(series)\r\n \r\n-        s = com._values_from_object(series)\r\n         k = com._values_from_object(key)\r\n-\r\n         k = self._convert_scalar_indexer(k, kind='getitem')\r\n         try:\r\n-            return self._engine.get_value(s, k,\r\n-                                          tz=getattr(series.dtype, 'tz', None))\r\n+            result = self._engine.get_value(\r\n+                s, k, tz=getattr(series.dtype, 'tz', None))\r\n+            if is_extension:\r\n+                result = series._values[result]\r\n+            return result\r\n         except KeyError as e1:\r\n             if len(self) > 0 and self.inferred_type in ['integer', 'boolean']:\r\n                 raise\r\n```\r\n\r\nThe basic idea is to index into the positions, and then do a secondary ExtensionArray.__getitem__ once you know the positions. Does that make any sense?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385493516",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-385493516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 385493516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTQ5MzUxNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T18:51:32Z",
    "updated_at": "2018-04-30T18:51:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, I think this can go in after the RC."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385502036",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-385502036",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 385502036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTUwMjAzNg==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-04-30T19:23:24Z",
    "updated_at": "2018-05-06T00:47:33Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20885?src=pr&el=h1) Report\n> Merging [#20885](https://codecov.io/gh/pandas-dev/pandas/pull/20885?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/bd4332f4bff135d4119291f66e98f76cc5f9a80e?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/20885/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/20885?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #20885      +/-   ##\n==========================================\n+ Coverage   91.81%   91.81%   +<.01%     \n==========================================\n  Files         153      153              \n  Lines       49481    49483       +2     \n==========================================\n+ Hits        45430    45434       +4     \n+ Misses       4051     4049       -2\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.21% <100%> (ø)` | :arrow_up: |\n| #single | `41.84% <0%> (-0.01%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/20885?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/indexes/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/20885/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9iYXNlLnB5) | `96.65% <100%> (ø)` | :arrow_up: |\n| [pandas/util/testing.py](https://codecov.io/gh/pandas-dev/pandas/pull/20885/diff?src=pr&el=tree#diff-cGFuZGFzL3V0aWwvdGVzdGluZy5weQ==) | `84.59% <0%> (+0.2%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20885?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20885?src=pr&el=footer). Last update [bd4332f...65087a6](https://codecov.io/gh/pandas-dev/pandas/pull/20885?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385568108",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-385568108",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 385568108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTU2ODEwOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T00:26:42Z",
    "updated_at": "2018-05-01T00:26:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "see also #14865 I believe this will also be solved by the same fix. If so, pls add that as a test (its for Categorical)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385683417",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-385683417",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 385683417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTY4MzQxNw==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T14:25:53Z",
    "updated_at": "2018-05-01T14:25:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback with respect to #14865, as @jorisvandenbossche stated in the original issue #20885 for this PR, I think they are separate issues, so I will not add additional tests."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385687863",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-385687863",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 385687863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTY4Nzg2Mw==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T14:43:22Z",
    "updated_at": "2018-05-01T14:43:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback with respect to your suggested change of using `s[self.get_loc[key]]` instead of `s[key]` for `Index`, it breaks two existing tests, so I think the fix as I've implemented it should be taken as is. (cc @TomAugspurger)\r\n\r\nIf you guys want me to do anything else with this PR, let me know, but IMHO, you ought to just merge it in."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/386159766",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-386159766",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 386159766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjE1OTc2Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T00:17:50Z",
    "updated_at": "2018-05-03T00:18:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "> it breaks two existing tests\r\n\r\nwhat does it break? I really dont' like treating ExtensionArray different from Index, if that's the case its a bug in the API (for indexing)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/386438422",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-386438422",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 386438422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQzODQyMg==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T21:13:12Z",
    "updated_at": "2018-05-06T00:11:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback The tests that fail are\r\n -  `pandas\\tests\\test_base.py` in `test_value_counts_unique_nunique`\r\n -  `tests/groupby/aggregate/test_other.py` in ` test_agg_timezone_round_trip`\r\n\r\nI've investigated the first one and here is what I have found out. (I think the second one is the same problem).  If we use the way you propose, where we use `get_loc(key)` on the `Index`, the example below fails on the expression `s2[0]`.\r\n\r\n\r\n\r\n```\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: def makeDateIndex(k=10, freq='B', name=None):\r\n   ...:     dt = pd.datetime(2000, 1, 1)\r\n   ...:     dr = pd.bdate_range(dt, periods=k, freq=freq, name=name)\r\n   ...:     return pd.DatetimeIndex(dr, name=name)\r\n   ...:\r\n   ...: dt_tz_index = makeDateIndex(10, name='a').tz_localize(tz='US/Eastern')\r\n   ...: s1 = pd.Series([i for i in range(len(dt_tz_index))], index=dt_tz_index)\r\n   ...:\r\n   ...: s2 = pd.Series(dt_tz_index, index=dt_tz_index)\r\n   ...:\r\n\r\nIn [3]: s1\r\nOut[3]:\r\na\r\n2000-01-03 00:00:00-05:00    0\r\n2000-01-04 00:00:00-05:00    1\r\n2000-01-05 00:00:00-05:00    2\r\n2000-01-06 00:00:00-05:00    3\r\n2000-01-07 00:00:00-05:00    4\r\n2000-01-10 00:00:00-05:00    5\r\n2000-01-11 00:00:00-05:00    6\r\n2000-01-12 00:00:00-05:00    7\r\n2000-01-13 00:00:00-05:00    8\r\n2000-01-14 00:00:00-05:00    9\r\nFreq: B, dtype: int64\r\n\r\nIn [4]: s2\r\nOut[4]:\r\na\r\n2000-01-03 00:00:00-05:00   2000-01-03 00:00:00-05:00\r\n2000-01-04 00:00:00-05:00   2000-01-04 00:00:00-05:00\r\n2000-01-05 00:00:00-05:00   2000-01-05 00:00:00-05:00\r\n2000-01-06 00:00:00-05:00   2000-01-06 00:00:00-05:00\r\n2000-01-07 00:00:00-05:00   2000-01-07 00:00:00-05:00\r\n2000-01-10 00:00:00-05:00   2000-01-10 00:00:00-05:00\r\n2000-01-11 00:00:00-05:00   2000-01-11 00:00:00-05:00\r\n2000-01-12 00:00:00-05:00   2000-01-12 00:00:00-05:00\r\n2000-01-13 00:00:00-05:00   2000-01-13 00:00:00-05:00\r\n2000-01-14 00:00:00-05:00   2000-01-14 00:00:00-05:00\r\nFreq: B, Name: a, dtype: datetime64[ns, US/Eastern]\r\n\r\nIn [5]: s1[0]\r\nOut[5]: 0\r\n\r\nIn [6]: s2[0]\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\base.py in get_loc(self, key, method, tolerance)\r\n   3062             try:\r\n-> 3063                 return self._engine.get_loc(key)\r\n   3064             except KeyError:\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10784)()\r\n    429\r\n--> 430     cpdef get_loc(self, object val):\r\n    431         if is_definitely_invalid_key(val):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10616)()\r\n    465             val = maybe_datetimelike_to_i8(val)\r\n--> 466             return self.mapping.get_item(val)\r\n    467         except (TypeError, ValueError):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15389)()\r\n    957\r\n--> 958     cpdef get_item(self, int64_t val):\r\n    959         cdef khiter_t k\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15333)()\r\n    963         else:\r\n--> 964             raise KeyError(val)\r\n    965\r\n\r\nKeyError: 0\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\datetimes.py in get_loc(self, key, method, tolerance)\r\n   1609         try:\r\n-> 1610             return Index.get_loc(self, key, method, tolerance)\r\n   1611         except (KeyError, ValueError, TypeError):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\base.py in get_loc(self, key, method, tolerance)\r\n   3064             except KeyError:\r\n-> 3065                 return self._engine.get_loc(self._maybe_cast_indexer(key))\r\n   3066\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10784)()\r\n    429\r\n--> 430     cpdef get_loc(self, object val):\r\n    431         if is_definitely_invalid_key(val):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10616)()\r\n    465             val = maybe_datetimelike_to_i8(val)\r\n--> 466             return self.mapping.get_item(val)\r\n    467         except (TypeError, ValueError):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15389)()\r\n    957\r\n--> 958     cpdef get_item(self, int64_t val):\r\n    959         cdef khiter_t k\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15333)()\r\n    963         else:\r\n--> 964             raise KeyError(val)\r\n    965\r\n\r\nKeyError: 0\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10434)()\r\n    457         try:\r\n--> 458             return self.mapping.get_item(val.value)\r\n    459         except KeyError:\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15389)()\r\n    957\r\n--> 958     cpdef get_item(self, int64_t val):\r\n    959         cdef khiter_t k\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15333)()\r\n    963         else:\r\n--> 964             raise KeyError(val)\r\n    965\r\n\r\nKeyError: 0\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\base.py in get_loc(self, key, method, tolerance)\r\n   3062             try:\r\n-> 3063                 return self._engine.get_loc(key)\r\n   3064             except KeyError:\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10784)()\r\n    429\r\n--> 430     cpdef get_loc(self, object val):\r\n    431         if is_definitely_invalid_key(val):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10521)()\r\n    459         except KeyError:\r\n--> 460             raise KeyError(val)\r\n    461         except AttributeError:\r\n\r\nKeyError: Timestamp('1969-12-31 19:00:00-0500', tz='US/Eastern')\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10434)()\r\n    457         try:\r\n--> 458             return self.mapping.get_item(val.value)\r\n    459         except KeyError:\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15389)()\r\n    957\r\n--> 958     cpdef get_item(self, int64_t val):\r\n    959         cdef khiter_t k\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15333)()\r\n    963         else:\r\n--> 964             raise KeyError(val)\r\n    965\r\n\r\nKeyError: 0\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\datetimes.py in get_loc(self, key, method, tolerance)\r\n   1618                 stamp = Timestamp(key, tz=self.tz)\r\n-> 1619                 return Index.get_loc(self, stamp, method, tolerance)\r\n   1620             except KeyError:\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\base.py in get_loc(self, key, method, tolerance)\r\n   3064             except KeyError:\r\n-> 3065                 return self._engine.get_loc(self._maybe_cast_indexer(key))\r\n   3066\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10784)()\r\n    429\r\n--> 430     cpdef get_loc(self, object val):\r\n    431         if is_definitely_invalid_key(val):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10521)()\r\n    459         except KeyError:\r\n--> 460             raise KeyError(val)\r\n    461         except AttributeError:\r\n\r\nKeyError: Timestamp('1969-12-31 19:00:00-0500', tz='US/Eastern')\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\datetimes.py in get_value(self, series, key)\r\n   1559         try:\r\n-> 1560             return com._maybe_box(self, Index.get_value(self, series, key),\r\n   1561                                   series, key)\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\base.py in get_value(self, series, key)\r\n   3087 #                    return s[key]\r\n-> 3088                     return s[self.get_loc(key)]\r\n   3089                 except (IndexError, ValueError):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\datetimes.py in get_loc(self, key, method, tolerance)\r\n   1620             except KeyError:\r\n-> 1621                 raise KeyError(key)\r\n   1622             except ValueError as e:\r\n\r\nKeyError: 0\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10434)()\r\n    457         try:\r\n--> 458             return self.mapping.get_item(val.value)\r\n    459         except KeyError:\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15389)()\r\n    957\r\n--> 958     cpdef get_item(self, int64_t val):\r\n    959         cdef khiter_t k\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item (pandas\\_libs\\hashtable.c:15333)()\r\n    963         else:\r\n--> 964             raise KeyError(val)\r\n    965\r\n\r\nKeyError: 0\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\datetimes.py in get_value(self, series, key)\r\n   1569             try:\r\n-> 1570                 return self.get_value_maybe_box(series, key)\r\n   1571             except (TypeError, ValueError, KeyError):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\datetimes.py in get_value_maybe_box(self, series, key)\r\n   1580         values = self._engine.get_value(com._values_from_object(series),\r\n\r\n-> 1581                                         key, tz=self.tz)\r\n   1582         return com._maybe_box(self, values, series, key)\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.IndexEngine.get_value (pandas\\_libs\\index.c:4847)()\r\n    104\r\n--> 105     cpdef get_value(self, ndarray arr, object key, object tz=None):\r\n    106         \"\"\"\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.IndexEngine.get_value (pandas\\_libs\\index.c:4530)()\r\n    112\r\n--> 113         loc = self.get_loc(key)\r\n    114         if PySlice_Check(loc) or cnp.PyArray_Check(loc):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\_libs\\index.pyx in pandas._libs.index.DatetimeEngine.get_loc (pandas\\_libs\\index.c:10521)()\r\n    459         except KeyError:\r\n--> 460             raise KeyError(val)\r\n    461         except AttributeError:\r\n\r\nKeyError: Timestamp('1969-12-31 19:00:00-0500', tz='US/Eastern')\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-6-ab7c8e26b0d3> in <module>()\r\n----> 1 s2[0]\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\series.py in __getitem__(self, key)\r\n    764         key = com._apply_if_callable(key, self)\r\n    765         try:\r\n--> 766             result = self.index.get_value(self, key)\r\n    767\r\n    768             if not is_scalar(result):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\indexes\\datetimes.py in get_value(self, series, key)\r\n   1570                 return self.get_value_maybe_box(series, key)\r\n   1571             except (TypeError, ValueError, KeyError):\r\n-> 1572                 raise KeyError(key)\r\n   1573\r\n   1574     def get_value_maybe_box(self, series, key):\r\n\r\nKeyError: 0\r\n```\r\n\r\nHere's an easier-to-read stack trace of calls for `s2[0]` in terms of where it bombs out:\r\n```\r\npandas\\core\\indexes\\base.py in get_loc(self, key, method, tolerance)\r\n--> 3063                 return self._engine.get_loc(key)\r\npandas\\core\\indexes\\datetimes.py in get_loc(self, key, method, tolerance)\r\n-->1610             return Index.get_loc(self, key, method, tolerance)\r\npandas\\core\\indexes\\base.py in get_value(self, series, key)\r\n--> 3088                     return s[self.get_loc(key)]\r\npandas\\core\\indexes\\datetimes.py in get_value(self, series, key)\r\n--> 1560             return com._maybe_box(self, Index.get_value(self, series, key),\r\n    1561                                   series, key)\r\npandas\\core\\series.py in __getitem__(self, key)\r\n--> 766             result = self.index.get_value(self, key)\r\n```\r\n\r\nSo what may be the error here is that if the values of a `Series` containing TZ-aware values end up being a `DateTimeIndex` and `get_loc(0)` isn't defined for an `Index`.  Note that in the code below, if you remove the `.tz_localize()` part, it works fine. \r\n\r\nMaybe when `DateTimeIndex` is based on `ExtensionArray`, then this code as I wrote it could change so that `ExtensionArray` and `Index` are handled the same way.\r\n\r\nOr maybe you know how to fix things for `DateTimeIndex`, but it's not clear what is the thing I should be testing to be sure that this issue is fixed. \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/386560276",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-386560276",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 386560276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjU2MDI3Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T10:20:39Z",
    "updated_at": "2018-05-04T10:20:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "this https://github.com/pandas-dev/pandas/pull/20885#issuecomment-386438422\r\n\r\nis a bug and should be fixed as a pre-cursor to this PR, @Dr-Irv pls make a separate issue (I thought we had one, but couldn't fin it)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/386621720",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-386621720",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 386621720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjYyMTcyMA==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T14:37:17Z",
    "updated_at": "2018-05-04T16:19:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback  I'm not sure how to report the issue.  The only way to replicate it is *if* we implement this PR as you suggested.  Should I create the issue that way?  \r\n\r\nI can't figure out how to demonstrate the bad behavior on 0.23rc2, or, equivalently, what test I could write that would verify that the bug illustrated above exists (since the bug only occurs if the PR is implemented in a different way)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/386721964",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-386721964",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 386721964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjcyMTk2NA==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T20:19:20Z",
    "updated_at": "2018-05-04T20:19:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Above, I mentioned that the change you want also breaks `pandas\\core\\indexes\\datetimes.py` in `test_agg_timezone_round_trip` .  I think that is related to the bug reported in #20949 . "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/386745027",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-386745027",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 386745027,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Njc0NTAyNw==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T21:54:23Z",
    "updated_at": "2018-05-04T21:54:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I've pushed a new commit here, as I found another bug in how I did things, so the new implementation looks more different for `Index` and `ExtensionArray` because of how the exceptions are handled.  I added another test that captured this difference.\r\n\r\nIn the case of `ExtensionArray`, if the key is a scalar, we have a `Series` backed by an `ExtensionArray`, so we first have to try to translate that key into an integer index to pass down to `ExtensionArray.__getitem__`.  If we can't do that, then if the scalar is an integer, we pass that integer down.  If that fails, we pass back whatever exception is raised by the `ExtensionArray.__getitem__()` implementation..\r\n\r\nIf the `Series` is backed by an `Index`, then we need to let the existing machinery for `Index` return the result, and that machinery uses deep pandas internals to get the right value whether it is a loc-type key or an integer.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/387246346",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-387246346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 387246346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzI0NjM0Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T00:25:21Z",
    "updated_at": "2018-05-08T00:25:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Dr-Irv ok this change looks ok. can you run the indexing asv's and report if anything is changing? this is a central piece of code so need to check."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/387425019",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-387425019",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 387425019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzQyNTAxOQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T14:38:28Z",
    "updated_at": "2018-05-08T14:38:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I hope I did this right.  I'm doing this on my 16GB 4 core laptop on Windows.  I compared upstream/master (last commit on May 5) to my latest commit. Here are the results:\r\n```\r\n      before           after         ratio\r\n     [bd4332f4]       [65087a6d]\r\n+        30.8±0μs         44.0±5μs     1.43  indexing.NumericSeriesIndexing.time_iloc_slice(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n-         516±0ms          453±0ms     0.88  indexing.NumericSeriesIndexing.time_loc_list_like(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n-        83.3±5μs         71.7±0μs     0.86  indexing.NumericSeriesIndexing.time_getitem_slice(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n-         109±2μs         93.9±0μs     0.86  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n-     1.09±0.04ms         934±10μs     0.85  indexing.NumericSeriesIndexing.time_loc_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n-        170±10μs          141±0μs     0.83  indexing.IntervalIndexing.time_getitem_list\r\n-         427±0μs         351±30μs     0.82  indexing.MultiIndexing.time_series_ix\r\n-         516±8ms          406±0ms     0.79  indexing.NumericSeriesIndexing.time_loc_array(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n-        498±50ns          382±0ns     0.77  indexing.MethodLookup.time_lookup_loc\r\n-        97.7±6μs         70.7±0μs     0.72  indexing.NumericSeriesIndexing.time_loc_slice(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n-         107±0μs         75.0±0μs     0.70  indexing.NumericSeriesIndexing.time_ix_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n-        562±20ms          383±4ms     0.68  indexing.NumericSeriesIndexing.time_ix_list_like(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n-         103±6μs         67.2±2μs     0.65  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n```\r\nSo many things got faster.  I'm not surprised by this, as we're not falling through exceptions any more when indexing by a scalar.\r\n\r\nI also reran just the one that got slower, and when I did that, it flipped to 62.3±4μs for master and 55.6±0μs for the new version, showing an improvement.\r\n\r\nI then ran the benchmarks again to better understand variability:\r\n```\r\n      before           after         ratio\r\n     [bd4332f4]       [65087a6d]\r\n+         567±0μs         758±50μs     1.34  indexing.DataFrameNumericIndexing.time_bool_indexer\r\n+        72.1±6μs         88.8±0μs     1.23  indexing.NumericSeriesIndexing.time_loc_slice(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n```\r\n\r\nAnd once more:\r\n```\r\n      before           after         ratio\r\n     [bd4332f4]       [65087a6d]\r\n+        2.15±0ms         62.5±4ms    29.09  indexing.NumericSeriesIndexing.time_loc_array(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n-        92.5±0μs         83.8±0μs     0.91  indexing.NonNumericSeriesIndexing.time_getitem_label_slice('datetime')\r\n```\r\nGiven the inconsistent results (probably affected by other background processes happening on my laptop), I think we're OK.\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/387702479",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-387702479",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 387702479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzcwMjQ3OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-09T10:59:37Z",
    "updated_at": "2018-05-09T10:59:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Dr-Irv IIRC there is a flag for affinity to help prevent this kind of variable, also I thin we have some asv options to run this many times. but close enough for now."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/387702607",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20885#issuecomment-387702607",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20885",
    "id": 387702607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzcwMjYwNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-09T11:00:08Z",
    "updated_at": "2018-05-09T11:00:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks!"
  }
]
