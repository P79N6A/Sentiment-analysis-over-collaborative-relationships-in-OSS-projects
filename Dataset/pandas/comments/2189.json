[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10161616",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2189#issuecomment-10161616",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2189",
    "id": 10161616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTYxNjE2",
    "user": {
      "login": "changhiskhan",
      "id": 759245,
      "node_id": "MDQ6VXNlcjc1OTI0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/759245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/changhiskhan",
      "html_url": "https://github.com/changhiskhan",
      "followers_url": "https://api.github.com/users/changhiskhan/followers",
      "following_url": "https://api.github.com/users/changhiskhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/changhiskhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/changhiskhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/changhiskhan/subscriptions",
      "organizations_url": "https://api.github.com/users/changhiskhan/orgs",
      "repos_url": "https://api.github.com/users/changhiskhan/repos",
      "events_url": "https://api.github.com/users/changhiskhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/changhiskhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-07T19:33:13Z",
    "updated_at": "2012-11-07T19:33:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that's caused by df2 having a non-unique index. When you join non-unique indices the result is a cartesian product (see [docs](http://pandas.pydata.org/pandas-docs/stable/merging.html#brief-primer-on-merge-methods-relational-algebra)). \n\nFor example:\n\n```\nIn [9]: from pandas import DataFrame\n\nIn [10]: idx = ['a', 'a', 'b', 'b']\n\nIn [11]: df1 = DataFrame(rand(len(idx), 2), index=idx, columns=['A', 'B'])\n\nIn [12]: df2 = DataFrame(rand(len(idx), 2), index=idx, columns=['X', 'Y'])\n\nIn [13]: df1.join(df2, how='left')\nOut[13]: \n          A         B         X         Y\na  0.522150  0.275144  0.625306  0.502149\na  0.522150  0.275144  0.770039  0.441860\na  0.483269  0.450600  0.625306  0.502149\na  0.483269  0.450600  0.770039  0.441860\nb  0.812180  0.448433  0.758224  0.661106\nb  0.812180  0.448433  0.293415  0.762360\nb  0.952718  0.799325  0.758224  0.661106\nb  0.952718  0.799325  0.293415  0.762360\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10164515",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2189#issuecomment-10164515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2189",
    "id": 10164515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTY0NTE1",
    "user": {
      "login": "saroele",
      "id": 562438,
      "node_id": "MDQ6VXNlcjU2MjQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/562438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saroele",
      "html_url": "https://github.com/saroele",
      "followers_url": "https://api.github.com/users/saroele/followers",
      "following_url": "https://api.github.com/users/saroele/following{/other_user}",
      "gists_url": "https://api.github.com/users/saroele/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saroele/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saroele/subscriptions",
      "organizations_url": "https://api.github.com/users/saroele/orgs",
      "repos_url": "https://api.github.com/users/saroele/repos",
      "events_url": "https://api.github.com/users/saroele/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saroele/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-07T20:51:16Z",
    "updated_at": "2012-11-07T20:51:16Z",
    "author_association": "NONE",
    "body": "The non-unique time-index is because the timeseries has discontinuities (continuous time, but steps in the values).  This is typically for on/off systems for example. At these discontinuities, I have the same time-index, twice, and two different values.\n\nIs there an easy way to obtain the 'expected' behaviour on join?  Does combine_first accept non-unique keys?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10166600",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2189#issuecomment-10166600",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2189",
    "id": 10166600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTY2NjAw",
    "user": {
      "login": "changhiskhan",
      "id": 759245,
      "node_id": "MDQ6VXNlcjc1OTI0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/759245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/changhiskhan",
      "html_url": "https://github.com/changhiskhan",
      "followers_url": "https://api.github.com/users/changhiskhan/followers",
      "following_url": "https://api.github.com/users/changhiskhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/changhiskhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/changhiskhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/changhiskhan/subscriptions",
      "organizations_url": "https://api.github.com/users/changhiskhan/orgs",
      "repos_url": "https://api.github.com/users/changhiskhan/repos",
      "events_url": "https://api.github.com/users/changhiskhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/changhiskhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-07T21:48:50Z",
    "updated_at": "2012-11-07T21:48:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "combine_first will align the two first so no (can't reindex non-uq).\n\nI'm assuming by \"expected\", you want the duplicated entries to be joined in the order as they appear right? You'll have to do some contortion here AFAIK. If you can assign number of observations per unique time that would work.  Otherwise you can do something like join the unique elements and then group the duplicates by time then join each group ignoring the index. If most things are duplicated you might even just group the whole thing. \n\n@wesm probably knows a better way if he wants to chime in.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10237034",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2189#issuecomment-10237034",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2189",
    "id": 10237034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjM3MDM0",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-09T17:18:13Z",
    "updated_at": "2012-11-09T17:18:13Z",
    "author_association": "MEMBER",
    "body": "It would be nice to have an \"as of join\" where we have the option to match duplicate observations in the order they're observed. \n\nThe bug you reported here seems to have been fixed by #2197. I ran your test script and the output looks good now:\n\n```\nIn [4]: cum\nOut[4]: \n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 229049 entries, 2010-01-01 00:00:00 to 2011-01-01 00:00:00\nData columns:\nSID0000    229049  non-null values\ndtypes: float64(1)\n```\n"
  }
]
