[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388324690",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21012#issuecomment-388324690",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21012",
    "id": 388324690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODMyNDY5MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T10:23:07Z",
    "updated_at": "2018-05-11T10:23:07Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report, can confirm this regression."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388326966",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21012#issuecomment-388326966",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21012",
    "id": 388326966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODMyNjk2Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T10:33:57Z",
    "updated_at": "2018-05-11T10:33:57Z",
    "author_association": "MEMBER",
    "body": "I suppose this is the cause: https://github.com/pandas-dev/pandas/pull/18848"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388532730",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21012#issuecomment-388532730",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21012",
    "id": 388532730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODUzMjczMA==",
    "user": {
      "login": "kittoku",
      "id": 38392245,
      "node_id": "MDQ6VXNlcjM4MzkyMjQ1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38392245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kittoku",
      "html_url": "https://github.com/kittoku",
      "followers_url": "https://api.github.com/users/kittoku/followers",
      "following_url": "https://api.github.com/users/kittoku/following{/other_user}",
      "gists_url": "https://api.github.com/users/kittoku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kittoku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kittoku/subscriptions",
      "organizations_url": "https://api.github.com/users/kittoku/orgs",
      "repos_url": "https://api.github.com/users/kittoku/repos",
      "events_url": "https://api.github.com/users/kittoku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kittoku/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-12T06:01:43Z",
    "updated_at": "2018-05-12T06:01:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for comments @jorisvandenbossche .\r\n\r\nI'm trying to make a PR, adding `__next__ `method like the following. But it still fails some tests. \r\n<details>\r\n\r\n```\r\nclass DatetimeIndex(DatelikeOps, TimelikeOps, DatetimeIndexOpsMixin,\r\n    ...\r\n    def __iter__(self):\r\n        \"\"\"\r\n        Return an iterator over the boxed values\r\n\r\n        Returns\r\n        -------\r\n        Timestamps : ndarray\r\n        \"\"\"\r\n\r\n        # convert in chunks of 10k for efficiency\r\n        chunksize = 10000\r\n        q, r = divmod(len(self), chunksize)\r\n        if r:\r\n            self._chunk_lengths = (chunksize,) * q + (r, 0)\r\n            self._stop_index = q + 1\r\n        else:\r\n            self._chunk_lengths = (chunksize,) * q + (0,)\r\n            self._stop_index = q\r\n\r\n        self._chunk_index = 0\r\n        self._iter_index = 0\r\n\r\n        return self\r\n\r\n    def __next__(self):\r\n        if self._chunk_index == self._stop_index:\r\n            raise StopIteration\r\n\r\n        if self._iter_index == 0:\r\n            start_i = self._chunk_index * self._chunk_lengths[0]\r\n            end_i = start_i + self._chunk_lengths[self._chunk_index]\r\n            self._chunk = libts.ints_to_pydatetime(self.asi8[start_i:end_i],\r\n                                                   tz=self.tz, freq=self.freq,\r\n                                                   box=\"timestamp\")\r\n\r\n        val = self._chunk[self._iter_index]\r\n        self._iter_index += 1\r\n\r\n        if self._iter_index == self._chunk_lengths[self._chunk_index]:\r\n            self._iter_index = 0\r\n            self._chunk_index += 1\r\n\r\n        return val\r\n```\r\n</details>\r\n\r\nIt is complicated, so any improvement or another PR are welcome.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388558356",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21012#issuecomment-388558356",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21012",
    "id": 388558356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODU1ODM1Ng==",
    "user": {
      "login": "cbertinato",
      "id": 20772838,
      "node_id": "MDQ6VXNlcjIwNzcyODM4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20772838?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cbertinato",
      "html_url": "https://github.com/cbertinato",
      "followers_url": "https://api.github.com/users/cbertinato/followers",
      "following_url": "https://api.github.com/users/cbertinato/following{/other_user}",
      "gists_url": "https://api.github.com/users/cbertinato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cbertinato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cbertinato/subscriptions",
      "organizations_url": "https://api.github.com/users/cbertinato/orgs",
      "repos_url": "https://api.github.com/users/cbertinato/repos",
      "events_url": "https://api.github.com/users/cbertinato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cbertinato/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-12T14:18:42Z",
    "updated_at": "2018-05-12T14:18:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not that it's likely to be a huge performance hit, but you could save some space by only tracking the current chunk length instead of keeping a list of lengths:\r\n```\r\nclass DatetimeIndex(DatelikeOps, TimelikeOps, DatetimeIndexOpsMixin,\r\n    ...\r\n    def __iter__(self):\r\n        \"\"\"\r\n        Return an iterator over the boxed values\r\n\r\n        Returns\r\n        -------\r\n        Timestamps : ndarray\r\n        \"\"\"\r\n\r\n        # convert in chunks of 10k for efficiency\r\n        self._iter_chunksize = 10000\r\n        self._stop_index = int(len(self) / self._iter_chunksize)\r\n        self._chunk_index = 0\r\n        self._iter_index = 0\r\n        return self\r\n\r\n    def __next__(self):\r\n        if self._chunk_index == self._stop_index:\r\n            raise StopIteration\r\n\r\n        if self._iter_index == 0:\r\n            start_i = self._chunk_index * self._iter_chunk_size\r\n            end_i = min((self._chunk_index + 1) * self._iter_chunksize, len(self))\r\n            self._chunk_len = end_i - start_i\r\n            self._chunk = libts.ints_to_pydatetime(self.asi8[start_i:end_i],\r\n                                                   tz=self.tz, freq=self.freq,\r\n                                                   box=\"timestamp\")\r\n\r\n        val = self._chunk[self._iter_index]\r\n        self._iter_index += 1\r\n\r\n        if self._iter_index == self._chunk_len:\r\n            self._iter_index = 0\r\n            self._chunk_index += 1\r\n\r\n        return val\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388586845",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21012#issuecomment-388586845",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21012",
    "id": 388586845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODU4Njg0NQ==",
    "user": {
      "login": "kittoku",
      "id": 38392245,
      "node_id": "MDQ6VXNlcjM4MzkyMjQ1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38392245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kittoku",
      "html_url": "https://github.com/kittoku",
      "followers_url": "https://api.github.com/users/kittoku/followers",
      "following_url": "https://api.github.com/users/kittoku/following{/other_user}",
      "gists_url": "https://api.github.com/users/kittoku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kittoku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kittoku/subscriptions",
      "organizations_url": "https://api.github.com/users/kittoku/orgs",
      "repos_url": "https://api.github.com/users/kittoku/repos",
      "events_url": "https://api.github.com/users/kittoku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kittoku/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-12T22:10:32Z",
    "updated_at": "2018-05-12T22:16:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you @cbertinato . This is simpler. But let `divmod`  remain because it cannot iterate over the whole index　when `r != 0` .\r\n```\r\n#add this part\r\nq, r = divmod(len(self), self._iter_chunksize)\r\nself._stop_index = q + (1 if r else 0)\r\n```\r\n\r\nBTW, my change fails **TestPanel.test_setitem, TestCategoricalRepr.test_categorical_index_repr_datetime, TestCategoricalRepr.test_categorical_index_repr_datetime_ordered**. It seems adding `__next__` causes the latter two (as follows).\r\n```\r\n#pandas/io/formats/printing.py line 153\r\ndef pprint_thing(thing, _nest_lvl=0, escape_chars=None, default_escapes=False,\r\n    ...\r\n    if (compat.PY3 and hasattr(thing, '__next__')) or hasattr(thing, 'next'): # -> True\r\n        return compat.text_type(thing)\r\n    ...\r\n```\r\n I'm not sure, but I think this failure is a features, not a bug.\r\n\r\nAnd now I have no idea  about the former one, TestPanel.test_setitem. Sorry.\r\n\r\n**pytest results:**\r\n<details>\r\n\r\n```\r\n___________________________ TestPanel.test_setitem ____________________________\r\n\r\nself = <pandas.tests.test_panel.TestPanel object at 0x0000000008AED8D0>\r\n\r\n    def test_setitem(self):\r\n        with catch_warnings(record=True):\r\n\r\n            # LongPanel with one item\r\n            lp = self.panel.filter(['ItemA', 'ItemB']).to_frame()\r\n            with pytest.raises(ValueError):\r\n>               self.panel['ItemE'] = lp\r\n\r\npandas\\tests\\test_panel.py:484:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\npandas\\core\\panel.py:603: in __setitem__\r\n    **self._construct_axes_dict_for_slice(self._AXIS_ORDERS[1:]))\r\npandas\\util\\_decorators.py:186: in wrapper\r\n    return func(*args, **kwargs)\r\npandas\\core\\frame.py:3563: in reindex\r\n    return super(DataFrame, self).reindex(**kwargs)\r\npandas\\core\\generic.py:3685: in reindex\r\n    fill_value, copy).__finalize__(self)\r\npandas\\core\\frame.py:3498: in _reindex_axes\r\n    fill_value, limit, tolerance)\r\npandas\\core\\frame.py:3506: in _reindex_index\r\n    tolerance=tolerance)\r\npandas\\core\\indexes\\multi.py:2104: in reindex\r\n    target = MultiIndex.from_tuples(target)\r\npandas\\core\\indexes\\multi.py:1352: in from_tuples\r\n    arrays = list(lib.to_object_array_tuples(tuples).T)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   tmp = len(rows[i])\r\nE   TypeError: object of type 'Timestamp' has no len()\r\n\r\npandas\\_libs\\src\\inference.pyx:1559: TypeError\r\n\r\n__________ TestCategoricalRepr.test_categorical_index_repr_datetime ___________\r\n\r\nself = <pandas.tests.categorical.test_repr.TestCategoricalRepr object at 0x0000000008401358>\r\n\r\n    def test_categorical_index_repr_datetime(self):\r\n        idx = date_range('2011-01-01 09:00', freq='H', periods=5)\r\n        i = CategoricalIndex(Categorical(idx))\r\n        exp = \"\"\"CategoricalIndex(['2011-01-01 09:00:00', '2011-01-01 10:00:00',\r\n                      '2011-01-01 11:00:00', '2011-01-01 12:00:00',\r\n                      '2011-01-01 13:00:00'],\r\n                     categories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 201\r\n1-01-01 13:00:00], ordered=False, dtype='category')\"\"\"  # noqa\r\n\r\n>       assert repr(i) == exp\r\nE       assert \"CategoricalI...e='category')\" == \"CategoricalIn...e='category')\"\r\nE         Skipping 188 identical leading characters in diff, use -v to show\r\nE         + ategories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13\r\n:00:00], ordered=False, dtype='category')\r\nE         - ategories=DatetimeIndex(['2011-01-01 09:00:00', '2011-01-01 10:00:00',\r\nE         -                '2011-01-01 11:00:00', '2011-01-01 12:00:00',\r\nE         -                '2011-01-01 13:00:00'],\r\nE         -               dtype='datetime64[ns]', freq='H'), ordered=False, dtype='category')\r\n\r\npandas\\tests\\categorical\\test_repr.py:392: AssertionError\r\n\r\n______ TestCategoricalRepr.test_categorical_index_repr_datetime_ordered _______\r\n\r\nself = <pandas.tests.categorical.test_repr.TestCategoricalRepr object at 0x0000000008401208>\r\n\r\n    def test_categorical_index_repr_datetime_ordered(self):\r\n        idx = date_range('2011-01-01 09:00', freq='H', periods=5)\r\n        i = CategoricalIndex(Categorical(idx, ordered=True))\r\n        exp = \"\"\"CategoricalIndex(['2011-01-01 09:00:00', '2011-01-01 10:00:00',\r\n                      '2011-01-01 11:00:00', '2011-01-01 12:00:00',\r\n                      '2011-01-01 13:00:00'],\r\n                     categories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 201\r\n1-01-01 13:00:00], ordered=True, dtype='category')\"\"\"  # noqa\r\n\r\n>       assert repr(i) == exp\r\nE       assert \"CategoricalI...e='category')\" == \"CategoricalIn...e='category')\"\r\nE         Skipping 188 identical leading characters in diff, use -v to show\r\nE         + ategories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13\r\n:00:00], ordered=True, dtype='category')\r\nE         - ategories=DatetimeIndex(['2011-01-01 09:00:00', '2011-01-01 10:00:00',\r\nE         -                '2011-01-01 11:00:00', '2011-01-01 12:00:00',\r\nE         -                '2011-01-01 13:00:00'],\r\nE         -               dtype='datetime64[ns]', freq='H'), ordered=True, dtype='category')\r\npandas\\tests\\categorical\\test_repr.py:412: AssertionError\r\n```\r\n\r\n</details>"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388618687",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21012#issuecomment-388618687",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21012",
    "id": 388618687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODYxODY4Nw==",
    "user": {
      "login": "kittoku",
      "id": 38392245,
      "node_id": "MDQ6VXNlcjM4MzkyMjQ1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38392245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kittoku",
      "html_url": "https://github.com/kittoku",
      "followers_url": "https://api.github.com/users/kittoku/followers",
      "following_url": "https://api.github.com/users/kittoku/following{/other_user}",
      "gists_url": "https://api.github.com/users/kittoku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kittoku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kittoku/subscriptions",
      "organizations_url": "https://api.github.com/users/kittoku/orgs",
      "repos_url": "https://api.github.com/users/kittoku/repos",
      "events_url": "https://api.github.com/users/kittoku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kittoku/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T11:04:34Z",
    "updated_at": "2018-05-13T11:04:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "This looks the cause of failure of **TestPanel.test_setitem**.\r\n```\r\n#pandas\\core\\indexes\\multi.py\r\ndef from_tuples(cls, tuples, sortorder=None, names=None):\r\n    ...\r\n    if not is_list_like(tuples):\r\n        raise TypeError('Input must be a list / sequence of tuple-likes.')\r\n    elif is_iterator(tuples): # -> unexpected True\r\n        tuples = list(tuples)\r\n```\r\nIt's a naive way, but adding `and not isinstance(tuples, DatetimeIndex)` to `elif` works.\r\nI guess there should be a better way to tell 1-dim iterators from 2-dim ones."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388644030",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21012#issuecomment-388644030",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21012",
    "id": 388644030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODY0NDAzMA==",
    "user": {
      "login": "cbertinato",
      "id": 20772838,
      "node_id": "MDQ6VXNlcjIwNzcyODM4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20772838?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cbertinato",
      "html_url": "https://github.com/cbertinato",
      "followers_url": "https://api.github.com/users/cbertinato/followers",
      "following_url": "https://api.github.com/users/cbertinato/following{/other_user}",
      "gists_url": "https://api.github.com/users/cbertinato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cbertinato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cbertinato/subscriptions",
      "organizations_url": "https://api.github.com/users/cbertinato/orgs",
      "repos_url": "https://api.github.com/users/cbertinato/repos",
      "events_url": "https://api.github.com/users/cbertinato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cbertinato/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T17:49:27Z",
    "updated_at": "2018-05-13T17:51:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "The issue is not so much about dimensionality as it is about the identity of the index as an iterator.  This leads to a somewhat deeper question: does it matter whether the index itself is an iterator?  Perhaps the answer is: if the tests pass, it doesn't matter.\r\n\r\nIf it does matter, then another solution is to make a separate iterator for indexes, instead of returning the index itself from `__iter__`.\r\n\r\nAnyhow, something along the lines of what you suggest would fix it, though something a bit more general, such as `not isinstance(tuples, Index)` might be better in case something like this crops up for other indexes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388654900",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21012#issuecomment-388654900",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21012",
    "id": 388654900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODY1NDkwMA==",
    "user": {
      "login": "kittoku",
      "id": 38392245,
      "node_id": "MDQ6VXNlcjM4MzkyMjQ1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38392245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kittoku",
      "html_url": "https://github.com/kittoku",
      "followers_url": "https://api.github.com/users/kittoku/followers",
      "following_url": "https://api.github.com/users/kittoku/following{/other_user}",
      "gists_url": "https://api.github.com/users/kittoku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kittoku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kittoku/subscriptions",
      "organizations_url": "https://api.github.com/users/kittoku/orgs",
      "repos_url": "https://api.github.com/users/kittoku/repos",
      "events_url": "https://api.github.com/users/kittoku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kittoku/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T20:47:58Z",
    "updated_at": "2018-05-13T20:47:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "A separate iterator sounds good.\r\nAll of the three test passed because DatetimeIndex itself is not a iterator.\r\nI'm going to post a PR later.\r\n "
  }
]
