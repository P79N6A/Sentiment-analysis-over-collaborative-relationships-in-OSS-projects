[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172283532",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12067#issuecomment-172283532",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12067",
    "id": 172283532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjI4MzUzMg==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-17T01:49:21Z",
    "updated_at": "2016-01-17T01:49:21Z",
    "author_association": "MEMBER",
    "body": "In general constructors in pandas are \"too smart\", but we are stuck in a lot of cases.\n\nI don't know that Index constructor idempotency is an API guarantee we necessarily need to make. It was part of the original effort to be similar to `np.array`. Further, are we expecting people to actually use `pd.RangeIndex` in many direct ways? I only ever thought of `RangeIndex` as being an Int64Index-like performance optimization. You can see my original patch here\n\nhttps://github.com/pydata/pandas/commit/ef878f050938e9497b4228d72b1b297feff22306\n\nFor internal pandas development, we should probably start biasing toward more precise internal APIs where possible, but when user convenience is concerned (where I've typically leaned toward more \"polymorphic\" / intuitive constructors at the expense of purity) there's a decent argument.\n\nSo I know it is a significant improvement and lowers memory usage, but is `RangeIndex` something we even wish to advertise heavily, since for most users it will just \"be there\" incidentally through use of `read_csv` or `DataFrame` or other constructors that create default indexes? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172286653",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12067#issuecomment-172286653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12067",
    "id": 172286653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjI4NjY1Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-17T03:18:02Z",
    "updated_at": "2016-01-17T03:18:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "`RangeIndex` was/is really an internal performance substitute for `Int64Index`. However we DO have an (maybe implicit) guarantee on idempotency for a `Index` objects. \n\nSo happy to discuss:\n- I think its much easier in a new issue, as I doubt that long twisting conversation (about multiple topics) was easy to follow\n- as discussed this is mostly internal, though we are exposing it as a `range-like` object, hence the default constructor\n- I agree with a bit too much magic in places, but I find this convenient and unambiguous, as I indicated to @shoyer , I don't find any good reason not to do this.\n- contrary to @shoyer 's statement, `RangeIndex(RangeIndex(...))` merely returns the original object (you can of course get a copy via `copy=True`, but it is `False` by default).\n- many-many times internally we have to guarantee that something is an index, usually via `_ensure_index`, but this goes thru `Index`, not always what you want. I don't think this is actually used very much (e.g. almost always `self._shallow_copy()` is called), but I don't see any good reason to break from the: `self._constructor(self)` possibility. Then you have special casing all around. Something which I feel is SO important at the size of the library. Special cases just causes bugs.\n\n@shoyer made two points: is this user-facing or a performance enhancement.\n\nIt is both, hence the intertanglement of the two.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172290518",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12067#issuecomment-172290518",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12067",
    "id": 172290518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjI5MDUxOA==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-17T04:19:02Z",
    "updated_at": "2016-01-17T04:19:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer `range` does the same (`10` in `range(10)` is/means `stop=10`).  Do you think adequate documentation would be a good enough compromise (current error message of `RangeIndex` constructor says `start` must be integers)?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172347264",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12067#issuecomment-172347264",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12067",
    "id": 172347264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjM0NzI2NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-17T16:31:52Z",
    "updated_at": "2016-01-17T16:31:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nIn [1]: Index(xrange(0,10))\nOut[1]: RangeIndex(start=0, stop=10, step=1)\n\nIn [5]: Index(pd.RangeIndex(0, 10))\nOut[5]: RangeIndex(start=0, stop=10, step=1)\n\nIn [2]: pd.RangeIndex(pd.RangeIndex(0,10))\nOut[2]: RangeIndex(start=0, stop=10, step=1)\n\nIn [3]: pd.RangeIndex.from_range(xrange(0,10))\nOut[3]: RangeIndex(start=0, stop=10, step=1)\n```\n\nto satisfy @shoyer concern about magic and my own about idempotency/consistency\n\nI would suggest we do this:\n\n```\n# [1] (though impl changes slightly),, but API the same\nIn [1]: Index(xrange(0,10))\nOut[1]: RangeIndex(start=0, stop=10, step=1)\n\nIn [5]: Index(pd.RangeIndex(xrange(0, 10)))\nOut[5]: RangeIndex(start=0, stop=10, step=1)\n\n# [2] stays the same\nIn [2]: pd.RangeIndex(pd.RangeIndex(0,10))\nOut[2]: RangeIndex(start=0, stop=10, step=1)\n\n# but also accepts range (so this covers [3] from above)\nIn [2]: pd.RangeIndex(xrange(0,10))\nOut[2]: RangeIndex(start=0, stop=10, step=1)\n\n# make the 'range like' constructor something else (from_steps)\nIn [3]: pd.RangeIndex.from_steps(0, 10)\nOut[3]: RangeIndex(start=0, stop=10, step=1)\n```\n- so this makes `RangeIndex` constructor very much like the other `Index` constructor\n\n```\ndef __new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=False, **kwargs):\n```\n- allows idempotency, and no possibility of confusion/magic\n- makes de-facto equal actions yield equal results (e.g. `xrange/RangeIndex`) have a single argument constructor from a 'range' object. These are quite similar, but very different from passing 3 integers.\n\nif consensus, this is a pretty easy change.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172358990",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12067#issuecomment-172358990",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12067",
    "id": 172358990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjM1ODk5MA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-17T17:55:55Z",
    "updated_at": "2016-01-17T17:55:55Z",
    "author_association": "MEMBER",
    "body": "@jreback the only downside of your new proposal is that the repr now no longer matches the constructor. I suppose we could make it `RangeIndex(range(0, 10, 1))` but that does look a little strange to me.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172360216",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12067#issuecomment-172360216",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12067",
    "id": 172360216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjM2MDIxNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-17T18:18:24Z",
    "updated_at": "2016-01-17T18:18:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nIn [20]: df.index\nOut[20]: RangeIndex(start=0, stop=5, step=1)\n```\n\nhmm, right. \n\ncould do\n\n```\nRangeIndex.from_steps(0, 10, 1)\n```\n\nbug agreed that is a bit more verbose\n\nof course could accept `start,stop,step` as `**kwargs` and correctly handle that\n(though we are then back to the original constructor that I had)\n"
  }
]
