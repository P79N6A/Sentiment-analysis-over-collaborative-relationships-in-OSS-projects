[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/39406780",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6773#issuecomment-39406780",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6773",
    "id": 39406780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDA2Nzgw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-03T02:33:16Z",
    "updated_at": "2014-04-03T02:33:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "changing the default would violate a core principle of pandas - that Nan's will propogate upon operations\n\ntry your example with a nan in the first series\nit should be propagated - otherwise you lose it's position - \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/39407299",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6773#issuecomment-39407299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6773",
    "id": 39407299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDA3Mjk5",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-03T02:45:02Z",
    "updated_at": "2014-04-03T02:45:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kernc I understand where you're coming from, but you usually _want_ `nan` so you can drop things that don't make sense (i.e., keep only the intersection of the data) or make a more interesting choice about how to fill (e.g., if you average two time series together and only some of the values match up, you might want to use one of the more exciting fill methods to handle it or do some kind of grouping including na values). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/39409818",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6773#issuecomment-39409818",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6773",
    "id": 39409818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDA5ODE4",
    "user": {
      "login": "kernc",
      "id": 684364,
      "node_id": "MDQ6VXNlcjY4NDM2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/684364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kernc",
      "html_url": "https://github.com/kernc",
      "followers_url": "https://api.github.com/users/kernc/followers",
      "following_url": "https://api.github.com/users/kernc/following{/other_user}",
      "gists_url": "https://api.github.com/users/kernc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kernc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kernc/subscriptions",
      "organizations_url": "https://api.github.com/users/kernc/orgs",
      "repos_url": "https://api.github.com/users/kernc/repos",
      "events_url": "https://api.github.com/users/kernc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kernc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-03T03:44:32Z",
    "updated_at": "2014-04-03T03:47:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Is this correct?\n\n``` python\n>>> data = pd.Series([np.nan, 0, 0])\n>>> data\n0   NaN\n1     0\n2     0\ndtype: float64\n>>> data.add(additional_data, fill_value=0)\n0   NaN\n1     3\n2     0\ndtype: float64\n```\n\nThis works as expected; already-NaNs do, as they should, stay NaNs.\n\nThis may be related to the [4th example here](http://pandas.pydata.org/pandas-docs/version/0.13.1/basics.html#missing-data-operations-with-fill-values) that really confuses me:\n\n``` python\n>>> d1\n    0   1\n0   1 NaN\n1 NaN   0\n\n[2 rows x 2 columns]\n>>> d2\n   0   1\n0  1 NaN\n1  1 NaN\n\n[2 rows x 2 columns]\n>>> d1.add(d2, fill_value=0)\n   0   1\n0  2 NaN\n1  1   0\n\n[2 rows x 2 columns]\n>>> d2.add(d1, fill_value=0)\n   0   1\n0  2 NaN\n1  1   0\n\n[2 rows x 2 columns]\n```\n\nWhat _arbitrary_ decision is this that when either _one_ (the left or the right operand) is NaN, the value is filled, but when both are NaN, it's NaN? What does this XOR behavior base on? Why not fill both?\n\n@jtratner I understand. I'm looking at a case of adding some partly-defined data to some existing data of the same kind, and I'm relying on indexes. In `d1.add(d2)`, I would expect NaNs in `d1` to always remain NaNs (i.e. `fill_value` only ever applied to NaNs in `d2`). Obviously, this would not be a commutative operation anymore (exclusively due to the `fill_value` parameter working only on the second operand, not due to default 0).\nI understand the timeseries case â€” one may want to interpolate those NaNs, for instance. I still think the default `fill_value` should be `0` (by mathematical definition above) and apply to the second operand only (to propagate the **real, explicit NaNs** from the first operand as opposed to implied missing indexes from the second). But I guess I'm looking for some other method then? :-]\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/39443404",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6773#issuecomment-39443404",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6773",
    "id": 39443404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDQzNDA0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-03T12:11:08Z",
    "updated_at": "2014-04-03T12:11:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kernc - the 4th example\n\nmakes perfect sense as the fill applies to the rhs ONLY. When you operate on a `nan` and a value the nan wins (as pandas by definition ALWAYS propogates nans). \n\nHere's an example from [here](http://pandas.pydata.org/pandas-docs/version/0.13.1/basics.html#combining-overlapping-data-sets)\n\n```\nIn [10]:    df1 = DataFrame({'A' : [1., np.nan, 3., 5., np.nan],\n   ....:                     'B' : [np.nan, 2., 3., np.nan, 6.]})\n\nIn [11]:    df2 = DataFrame({'A' : [5., 2., 4., np.nan, 3., 7.],\n   ....:                     'B' : [np.nan, np.nan, 3., 4., 6., 8.]})\n```\n\nEven with filling both sides via fillna you see that the frames DON'T align. This is an extermely important point. Its not that the values are missing (which is what nan represents), but that they don't overlap. This is the core principle of pandas.\n\n```\nIn [15]: df1.fillna(0) + df2.fillna(0)\nOut[15]: \n    A   B\n0   6   0\n1   2   2\n2   7   6\n3   5   4\n4   3  12\n5 NaN NaN\n\n[6 rows x 2 columns]\nIn [16]: df1.add(df2,fill_value=0)\nOut[16]: \n   A   B\n0  6 NaN\n1  2   2\n2  7   6\n3  5   4\n4  3  12\n5  7   8\n\n[6 rows x 2 columns]\n\nIn [17]: df1.fillna(0).add(df2,fill_value=0)\nOut[17]: \n   A   B\n0  6   0\n1  2   2\n2  7   6\n3  5   4\n4  3  12\n5  7   8\n\n[6 rows x 2 columns]\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/39510025",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6773#issuecomment-39510025",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6773",
    "id": 39510025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTEwMDI1",
    "user": {
      "login": "kernc",
      "id": 684364,
      "node_id": "MDQ6VXNlcjY4NDM2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/684364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kernc",
      "html_url": "https://github.com/kernc",
      "followers_url": "https://api.github.com/users/kernc/followers",
      "following_url": "https://api.github.com/users/kernc/following{/other_user}",
      "gists_url": "https://api.github.com/users/kernc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kernc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kernc/subscriptions",
      "organizations_url": "https://api.github.com/users/kernc/orgs",
      "repos_url": "https://api.github.com/users/kernc/repos",
      "events_url": "https://api.github.com/users/kernc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kernc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-03T21:56:24Z",
    "updated_at": "2014-04-03T21:56:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I understand: marking missing data is more important from a statistician's point of view, which is who pandas is primarily written for.\n\nThe one last thing I disagree with in your example is that\n\n> the fill applies to the rhs ONLY.\n\nWere that true, wouldn't your second example read:\n\n```\nIn [16]: df1.add(df2, fill_value=0)\nOut[16]: \n    A   B\n0   6 NaN\n1 NaN   2\n2   7   6\n3   5 NaN\n4 NaN  12\n5 NaN NaN\n\n[6 rows x 2 columns]\n```\n\nI.e. all the NaNs from `df1` persist.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/39510840",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6773#issuecomment-39510840",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6773",
    "id": 39510840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTEwODQw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-03T22:05:19Z",
    "updated_at": "2014-04-03T22:05:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "sorry...you are right about that example.\n\nI don't think we can (or should) change this default (you do have valid points though), but this is a fundamental issue. And some things may simply be arbitrarily defined.\n\nthat said. If you would like to send an e-mail to the mailing list to get wider opinion on this. feel free. if consensus is to make the change then we can reopen.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/39511549",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6773#issuecomment-39511549",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6773",
    "id": 39511549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTExNTQ5",
    "user": {
      "login": "kernc",
      "id": 684364,
      "node_id": "MDQ6VXNlcjY4NDM2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/684364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kernc",
      "html_url": "https://github.com/kernc",
      "followers_url": "https://api.github.com/users/kernc/followers",
      "following_url": "https://api.github.com/users/kernc/following{/other_user}",
      "gists_url": "https://api.github.com/users/kernc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kernc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kernc/subscriptions",
      "organizations_url": "https://api.github.com/users/kernc/orgs",
      "repos_url": "https://api.github.com/users/kernc/repos",
      "events_url": "https://api.github.com/users/kernc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kernc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-03T22:12:46Z",
    "updated_at": "2014-04-03T22:12:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am absolutely not yet familiar enough with pandas or statistician's work to be in a position to do so. If I failed to convince you, that's good enough for me. :smile: For now.\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/39511673",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6773#issuecomment-39511673",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6773",
    "id": 39511673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTExNjcz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-03T22:14:08Z",
    "updated_at": "2014-04-03T22:14:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "hah hah !\n\nok....do like these discussions though.....API design is tricky as have many use cases\n\nkeep em coming\n"
  }
]
