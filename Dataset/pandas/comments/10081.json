[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100054795",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100054795",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100054795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDA1NDc5NQ==",
    "user": {
      "login": "cgevans",
      "id": 2054509,
      "node_id": "MDQ6VXNlcjIwNTQ1MDk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2054509?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgevans",
      "html_url": "https://github.com/cgevans",
      "followers_url": "https://api.github.com/users/cgevans/followers",
      "following_url": "https://api.github.com/users/cgevans/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgevans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgevans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgevans/subscriptions",
      "organizations_url": "https://api.github.com/users/cgevans/orgs",
      "repos_url": "https://api.github.com/users/cgevans/repos",
      "events_url": "https://api.github.com/users/cgevans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgevans/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-08T00:32:07Z",
    "updated_at": "2015-05-08T00:32:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interestingly, my initial thought that this was because Pandas' split just iterates through in Python was wrong: Using the obvious and pure Python `[ x.split('.') for x in list(df['ip'])]` is actually 400 times faster than using Pandas. Thus there's something else that's causing the problem.\n\nIt seems like vast amounts of time are spent in `maybe_convert_objects` and `_possibly_cast_to_datetime`, amongst other things. I'll have to look into it further.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100055173",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100055173",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100055173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDA1NTE3Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-08T00:35:55Z",
    "updated_at": "2015-05-08T00:35:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "it seems that this operation creates a Series then passes to the DataFrame constructor. No need to do this, the list-like operation should effectively be this.\n\n```\nIn [33]: %timeit pd.DataFrame([ x.split('.') for x in list(df['ip']) ])\n100 loops, best of 3: 13.4 ms per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100055454",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100055454",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100055454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDA1NTQ1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-08T00:39:09Z",
    "updated_at": "2015-05-08T00:39:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "simple change fixes this.\n\n```\nIn [8]: %timeit df['ip'].str.split('.',return_type='frame')\n100 loops, best of 3: 20 ms per loop\n\nIn [9]: quit()\n[jreback-~/pandas] git diff\ndiff --git a/pandas/core/strings.py b/pandas/core/strings.py\nindex 6e603f6..b8ea27f 100644\n--- a/pandas/core/strings.py\n+++ b/pandas/core/strings.py\n@@ -723,7 +723,7 @@ def str_split(arr, pat=None, n=None, return_type='series'):\n             regex = re.compile(pat)\n             f = lambda x: regex.split(x, maxsplit=n)\n     if return_type == 'frame':\n-        res = DataFrame((Series(x) for x in _na_map(f, arr)), index=arr.index)\n+        res = DataFrame([x for x in _na_map(f, arr)], index=arr.index)\n     else:\n         res = _na_map(f, arr)\n     return res\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100057160",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100057160",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100057160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDA1NzE2MA==",
    "user": {
      "login": "cgevans",
      "id": 2054509,
      "node_id": "MDQ6VXNlcjIwNTQ1MDk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2054509?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgevans",
      "html_url": "https://github.com/cgevans",
      "followers_url": "https://api.github.com/users/cgevans/followers",
      "following_url": "https://api.github.com/users/cgevans/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgevans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgevans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgevans/subscriptions",
      "organizations_url": "https://api.github.com/users/cgevans/orgs",
      "repos_url": "https://api.github.com/users/cgevans/repos",
      "events_url": "https://api.github.com/users/cgevans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgevans/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-08T00:55:14Z",
    "updated_at": "2015-05-08T00:56:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems like avoiding the list creation could be done as well, though it may not make much difference, and I'm not quite sure how Pandas handles iterators internally:\n\n```\ndiff --git a/pandas/core/strings.py b/pandas/core/strings.py\nindex 6e603f6..8fb7f10 100644\n--- a/pandas/core/strings.py\n+++ b/pandas/core/strings.py\n@@ -723,7 +723,7 @@ def str_split(arr, pat=None, n=None, return_type='series'):\n             regex = re.compile(pat)\n             f = lambda x: regex.split(x, maxsplit=n)\n     if return_type == 'frame':\n-        res = DataFrame((Series(x) for x in _na_map(f, arr)), index=arr.index)\n+        res = DataFrame((x for x in _na_map(f, arr)), index=arr.index)\n     else:\n         res = _na_map(f, arr)\n     return res\n```\n\nAh; it just converts to a list. Oh well.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100087480",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100087480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100087480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDA4NzQ4MA==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-08T03:22:28Z",
    "updated_at": "2015-05-08T03:22:28Z",
    "author_association": "MEMBER",
    "body": "Because this changes current behavior (non-str values are all converted to str), it may be an option to prepare a shortpath for all-string values. On my environment, numpy's string method is faster than above workaround.\n\n```\n%timeit df[['ip0', 'ip1', 'ip2', 'ip3']] = \\\n    pd.read_table(StringIO(df['ip'].to_csv(None,index=None)),sep='.')\n# 10 loops, best of 3: 80.9 ms per loop\n\n%timeit pd.DataFrame(np.core.defchararray.split(df['ip'].values.astype(str), '.'))\n# 10 loops, best of 3: 29.9 ms per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100185719",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100185719",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100185719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDE4NTcxOQ==",
    "user": {
      "login": "cgevans",
      "id": 2054509,
      "node_id": "MDQ6VXNlcjIwNTQ1MDk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2054509?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgevans",
      "html_url": "https://github.com/cgevans",
      "followers_url": "https://api.github.com/users/cgevans/followers",
      "following_url": "https://api.github.com/users/cgevans/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgevans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgevans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgevans/subscriptions",
      "organizations_url": "https://api.github.com/users/cgevans/orgs",
      "repos_url": "https://api.github.com/users/cgevans/repos",
      "events_url": "https://api.github.com/users/cgevans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgevans/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-08T10:27:36Z",
    "updated_at": "2015-05-08T10:27:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "sinhrks: the CSV write/read method is a horrible hack. I don't think jrevack's legitimate solution changes current behavior, and it is significantly faster than the hack, likely in line with numpy's performance.\n\njreback: while I'd be happy to do a PR for this if necessary, I assume you have it dealt with?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100193528",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100193528",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100193528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDE5MzUyOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-08T10:53:46Z",
    "updated_at": "2015-05-08T10:53:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "pull requests are welcome on this \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100422882",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100422882",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100422882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDQyMjg4Mg==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-09T04:20:37Z",
    "updated_at": "2015-05-09T04:25:03Z",
    "author_association": "MEMBER",
    "body": "@cgevans Thanks for your cooperation :) What I meant in `current behavior` is:\n\n```\ns = pd.Series([1.1, '2.2'])\n\n# current behavior (non-strings are left as NaN)\ns.str.split('.', expand=True)\n#      0    1\n# 0  NaN  NaN\n# 1    2    2\n\n# numpy (non-strings are forced to be converted)\npd.DataFrame(list(np.core.defchararray.split(s.values.astype(str), '.')))\n#    0  1\n# 0  1  1\n# 1  2  2\n\n# cant use numpy method without changing dtype\npd.DataFrame(list(np.core.defchararray.split(s.values, '.')))\n# TypeError: string operation on non-string array\n```\n\nI think [numpy funcs](http://docs.scipy.org/doc/numpy/reference/routines.char.html) can be used when the values are all string or unicode (maybe regular case). One idea is to use `pandas.lib.is_string_array` for check and use numpy logic if possible. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100428946",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-100428946",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 100428946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDQyODk0Ng==",
    "user": {
      "login": "cgevans",
      "id": 2054509,
      "node_id": "MDQ6VXNlcjIwNTQ1MDk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2054509?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgevans",
      "html_url": "https://github.com/cgevans",
      "followers_url": "https://api.github.com/users/cgevans/followers",
      "following_url": "https://api.github.com/users/cgevans/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgevans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgevans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgevans/subscriptions",
      "organizations_url": "https://api.github.com/users/cgevans/orgs",
      "repos_url": "https://api.github.com/users/cgevans/repos",
      "events_url": "https://api.github.com/users/cgevans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgevans/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-09T05:16:16Z",
    "updated_at": "2015-05-09T05:49:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sinhrks, I think what you're showing is behavior in branches for 10085 / 9847 , not the current pydata/master. I don't have those branches, and am not sure where that work is right now. But I think what you keep referring to as changing behavior is the workaround in the first post here, which is not what I'm discussing, and not what jreback is discussing. I'll make a PR momentarily.\n\nWith that said, there is a NaN issue that I'm working on addressing, but it's not quite the same.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/105062820",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-105062820",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 105062820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTA2MjgyMA==",
    "user": {
      "login": "cgevans",
      "id": 2054509,
      "node_id": "MDQ6VXNlcjIwNTQ1MDk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2054509?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgevans",
      "html_url": "https://github.com/cgevans",
      "followers_url": "https://api.github.com/users/cgevans/followers",
      "following_url": "https://api.github.com/users/cgevans/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgevans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgevans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgevans/subscriptions",
      "organizations_url": "https://api.github.com/users/cgevans/orgs",
      "repos_url": "https://api.github.com/users/cgevans/repos",
      "events_url": "https://api.github.com/users/cgevans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgevans/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-24T21:18:00Z",
    "updated_at": "2015-05-24T21:18:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looking into this further, the problem is not necessarily the string operations themselves, but oddness and seeming inconsistencies with DataFrame construction.\n\nIn the current code, `str_split` itself takes a series, splits each string into lists of strings, and returns an ndarray of dtype `'object'`. If there are nans in the input data, these stay as nans, and are not lists.\n\nIf you take this array of list objects (and potentially nans), and input it to pd.DataFrame, it will output a frame with one column, containing the objects. No expansion takes place.\n\nIf you convert the array to a list (of list objects) and input it to pd.DataFrame, it will output a frame with multiple columns, containing the values in the list objects. Shorter lists will be padded with `None`s. If there are any nan values, the constructor fails, because it assumes the nan value should be a list with a length.\n\nIf you instead convert the array to a list of Series objects, and input it to pd.DataFrame, it will output a frame with multiple columns, containing the values of the series objects. Shorter lists will be padded **with `NaN`s**, not `None`s. NaN values are expanded to rows of all NaNs.\n\nThis thus leads to a few questions:\n- Is having None for missing values from a list of lists, and NaN for missing values from a list of Series, the desired behavior, or should the DataFrame constructor only use one of them? \n- Is there a way to handle NaN values when constructing a DataFrame from a list of lists?\n- While I can somewhat understand the differences in behavior, do we want all these slightly different input types containing the same data to lead to different DataFrames?\n\nHere is an example:\n\n```\nIn [1]: import pandas as pd\n\nIn [2]: import pandas.core.strings as st\n\nIn [3]: import numpy as np\n\nIn [4]: s4 = pd.Series(['asdf.asdf','asdf',np.nan,'asdf.asdf.asdf','asdf.asdf.asdf'])\n\nIn [5]: s4.str.split('.')\nOut[5]:\n0          [asdf, asdf]\n1                [asdf]\n2                   NaN\n3    [asdf, asdf, asdf]\n4    [asdf, asdf, asdf]\ndtype: object\n\nIn [6]: s4.str.split('.',expand=True)\nOut[6]:\n      0     1     2\n0  asdf  asdf   NaN\n1  asdf   NaN   NaN\n2   NaN   NaN   NaN\n3  asdf  asdf  asdf\n4  asdf  asdf  asdf\n\nIn [7]: st.str_split(s4,'.')\nOut[7]:\narray([['asdf', 'asdf'], ['asdf'], nan, ['asdf', 'asdf', 'asdf'],\n       ['asdf', 'asdf', 'asdf']], dtype=object)\n\nIn [8]: pd.DataFrame( st.str_split(s4,'.') )\nOut[8]:\n                    0\n0        [asdf, asdf]\n1              [asdf]\n2                 NaN\n3  [asdf, asdf, asdf]\n4  [asdf, asdf, asdf]\n\nIn [9]: pd.DataFrame( list( st.str_split(s4,'.') ) )\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-41-0aa1ea9b709b> in <module>()\n----> 1 pd.DataFrame( list( st.str_split(s4,'.') ) )\n\n/Users/cge/Dev/pandas/pandas/core/frame.pyc in __init__(self, data, index, columns, dtype, copy)\n    249             if len(data) > 0:\n    250                 if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n--> 251                     arrays, columns = _to_arrays(data, columns, dtype=dtype)\n    252                     columns = _ensure_index(columns)\n    253\n\n/Users/cge/Dev/pandas/pandas/core/frame.pyc in _to_arrays(data, columns, coerce_float, dtype)\n   4907     if isinstance(data[0], (list, tuple)):\n   4908         return _list_to_arrays(data, columns, coerce_float=coerce_float,\n-> 4909                                dtype=dtype)\n   4910     elif isinstance(data[0], collections.Mapping):\n   4911         return _list_of_dict_to_arrays(data, columns,\n\n/Users/cge/Dev/pandas/pandas/core/frame.pyc in _list_to_arrays(data, columns, coerce_float, dtype)\n   4988     else:\n   4989         # list of lists\n-> 4990         content = list(lib.to_object_array(data).T)\n   4991     return _convert_object_array(content, columns, dtype=dtype,\n   4992                                  coerce_float=coerce_float)\n\n/Users/cge/Dev/pandas/pandas/src/inference.pyx in pandas.lib.to_object_array (pandas/lib.c:58812)()\n   1090     k = 0\n   1091     for i from 0 <= i < n:\n-> 1092         tmp = len(rows[i])\n   1093         if tmp > k:\n   1094             k = tmp\n\nTypeError: object of type 'float' has no len()\n\nIn [10]: s4[2] = 'asdf'\n\nIn [11]: pd.DataFrame( list( st.str_split(s4,'.') ) )\nOut[11]:\n      0     1     2\n0  asdf  asdf  None\n1  asdf  None  None\n2  asdf  None  None\n3  asdf  asdf  asdf\n4  asdf  asdf  asdf\n\nIn [12]: pd.DataFrame( [pd.Series(x) for x in st.str_split(s4,'.')] )\nOut[12]:\n      0     1     2\n0  asdf  asdf   NaN\n1  asdf   NaN   NaN\n2  asdf   NaN   NaN\n3  asdf  asdf  asdf\n4  asdf  asdf  asdf\n\nIn [13]: s4[2] = np.nan\n\nIn [14]: pd.DataFrame( [pd.Series(x) for x in st.str_split(s4,'.')] )\nOut[14]:\n      0     1     2\n0  asdf  asdf   NaN\n1  asdf   NaN   NaN\n2   NaN   NaN   NaN\n3  asdf  asdf  asdf\n4  asdf  asdf  asdf\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/105484516",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10081#issuecomment-105484516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10081",
    "id": 105484516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTQ4NDUxNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T10:39:57Z",
    "updated_at": "2015-05-26T10:39:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "`np.nan` is the marker for missing values. `None` is accepted (and converted), however it is somewhat ambiguous as it _can_ also be a 'valid' element. `list-of-lists` needs specific conversions, e.g. to see if for example a list is a `Series`.\n"
  }
]
