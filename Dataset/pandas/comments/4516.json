[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22363578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22363578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22363578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzYzNTc4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-08T22:39:03Z",
    "updated_at": "2013-08-08T22:39:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's how to figure out the problem\n\nbig file like this best to read it in chunks, and set the index at the end\n(it SHOULD be a bit faster and will have lower peak memory too)\n\n```\ndf_iter = pd.read_csv(\n    './sales-large.csv',\n    header = None,\n    na_values = ['NULL'],\n    names = [\n        'salesperson',\n        'customer',\n        'invoice_date',\n        'ship_date',\n        'product',\n        'quantity',\n        'price',\n        ],\n    parse_dates = [\n        'invoice_date',\n        'ship_date',\n        ],\n    chunksize=100000,\n    )\n```\n\nRead from the iterator; you have duplicate values, this will show you where they are\n\n```\nfor df in df_iter:\n    dups = df.duplicated(['salesperson','customer','invoice_date','ship_date'])\n    dups[dups]\n\n    dfs.append(df)\n```\n\nThe above is for you to inspect, but here's to create a non-duplicated frame\n\n```\ndf = pd.concat([ df for df in df_iter ]).drop_duplicates(['salesperson','customer','invoice_date','ship_date'])\n```\n\nSet the index at the very end\n\n```\ndf = df.set_index([\n    'salesperson',\n    'customer',\n    'invoice_date',\n    'ship_date',\n    ])\n```\n\nIt actually is not sorted, but doesn't matter (though you prob DO want to sort it)\n\n```\ndf.index.lexsort_depth\n```\n\nRunning the above script \n\n```\n[goat-jreback-~] python gen.py\n0\nproduct     0.00000\nquantity    1.00000\nprice       0.49057\nName: (A00000, A, 2011-03-01 00:00:00, 2011-03-06 00:00:00), dtype: float64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22365935",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22365935",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22365935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzY1OTM1",
    "user": {
      "login": "highpost",
      "id": 5192798,
      "node_id": "MDQ6VXNlcjUxOTI3OTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/highpost",
      "html_url": "https://github.com/highpost",
      "followers_url": "https://api.github.com/users/highpost/followers",
      "following_url": "https://api.github.com/users/highpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/highpost/subscriptions",
      "organizations_url": "https://api.github.com/users/highpost/orgs",
      "repos_url": "https://api.github.com/users/highpost/repos",
      "events_url": "https://api.github.com/users/highpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/highpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-08T23:28:24Z",
    "updated_at": "2013-08-08T23:28:24Z",
    "author_association": "NONE",
    "body": "Thanks, Jeff. I hate it when it's pilot error.\n\nOn Thu, Aug 8, 2013 at 3:39 PM, jreback notifications@github.com wrote:\n\n> Here's how to figure out the problem\n> \n> big file like this best to read it in chunks, and set the index at the end\n> \n> df_iter = pd.read_csv(\n>     './sales-large.csv',\n>     header = None,\n>     na_values = ['NULL'],\n>     names = [\n>         'salesperson',\n>         'customer',\n>         'invoice_date',\n>         'ship_date',\n>         'product',\n>         'quantity',\n>         'price',\n>         ],\n>     parse_dates = [\n>         'invoice_date',\n>         'ship_date',\n>         ],\n>     chunksize=100000,\n>     )\n> \n> Read from the iterator; you have duplicate values, this will show you\n> where they are\n> \n> for df in df_iter:\n>     dups = df.duplicated(['salesperson','customer','invoice_date','ship_date'])\n>     dups[dups]\n> \n> ```\n> dfs.append(df)\n> ```\n> \n> The above is for you to inspect, but here's to create a non-duplicated\n> frame\n> \n> df = pd.concat([ df for df in df_iter ]).drop_duplicates(['salesperson','customer','invoice_date','ship_date'])\n> \n> Set the index at the very ends\n> \n> df = df.set_index([\n>     'salesperson',\n>     'customer',\n>     'invoice_date',\n>     'ship_date',\n>     ])\n> \n> It actually is not sorted, but doesn't matter (though you prob DO want to\n> sort it)\n> \n> df.index.lexsort_depth\n> \n> Running the above script\n> \n> [goat-jreback-~] python gen.py\n> 0\n> product     0.00000\n> quantity    1.00000\n> price       0.49057\n> Name: (A00000, A, 2011-03-01 00:00:00, 2011-03-06 00:00:00), dtype: float64\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/4516#issuecomment-22363578\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22393125",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22393125",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22393125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzkzMTI1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-09T13:11:53Z",
    "updated_at": "2013-08-09T13:11:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@DanSears this actually is a bug, has to do with how a frame with a multi-index is reindexed when there are multiple dtypes in the data (e.g. in the example below there are floats and ints). This is not implemented, but not too hard. thanks for the report.\n\nIn your case, depending no how you are going to access the data, I actually wouldn't set an index at all. \n\nWhat are you going to do with this data, eg. are you going to simple look up fields like you posted?\n\n```\nIn [6]: df = DataFrame([['foo','bar',1.0,1],['foo','bar',2.0,2],['bah','bam',3.0,3],\n   ...: ['bah','bam',4.0,4],['foo','bar',5.0,5],['bah','bam',6.0,6]],\n   ...: columns=list('ABCD'))\n\nIn [8]: df\nOut[8]: \n     A    B  C  D\n0  foo  bar  1  1\n1  foo  bar  2  2\n2  bah  bam  3  3\n3  bah  bam  4  4\n4  foo  bar  5  5\n5  bah  bam  6  6\nIn [9]: df = df.set_index(['A','B'])\n\nIn [10]: df\nOut[10]: \n         C  D\nA   B        \nfoo bar  1  1\n    bar  2  2\nbah bam  3  3\n    bam  4  4\nfoo bar  5  5\nbah bam  6  6\n\nIn [11]: df.sortlevel(0)\nException: Reindexing only valid with uniquely valued Index objects\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22394918",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22394918",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22394918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzk0OTE4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-09T13:43:18Z",
    "updated_at": "2013-08-09T13:43:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@DanSears If youd like to give a try with #4522, this fixes the issue \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22400822",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22400822",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22400822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDAwODIy",
    "user": {
      "login": "highpost",
      "id": 5192798,
      "node_id": "MDQ6VXNlcjUxOTI3OTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/highpost",
      "html_url": "https://github.com/highpost",
      "followers_url": "https://api.github.com/users/highpost/followers",
      "following_url": "https://api.github.com/users/highpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/highpost/subscriptions",
      "organizations_url": "https://api.github.com/users/highpost/orgs",
      "repos_url": "https://api.github.com/users/highpost/repos",
      "events_url": "https://api.github.com/users/highpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/highpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-09T15:12:50Z",
    "updated_at": "2013-08-09T15:12:50Z",
    "author_association": "NONE",
    "body": "Right now I'm just learning pandas and MultiIndexing looks pretty\ninnovative. I anticipate doing lookups like this to replace SQL selects and\nso I mocked up the test data with multiple datetimes. But while my test\ndata passes sort(1) and uniq(1), it has a bug where its second datetime\ncolumn is not unique and so pandas objects. I'll update the awk script soon.\n\nThanks for looking into this. I'll definitely test anything you come up\nwith.\n\n--Dan\n\nOn Fri, Aug 9, 2013 at 6:12 AM, jreback notifications@github.com wrote:\n\n> @DanSears https://github.com/DanSears this actually is a bug, has to do\n> with how a frame with a multi-index is reindexed when there are multiple\n> dtypes in the data (e.g. in the example below there are floats and ints).\n> This is not implemented, but not too hard. thanks for the report.\n> \n> In your case, depending no how you are going to access the data, I\n> actually wouldn't set an index at all.\n> \n> What are you going to do with this data, eg. are you going to simple look\n> up fields like you posted?\n> \n> In [6]: df = DataFrame([['foo','bar',1.0,1],['foo','bar',2.0,2],['bah','bam',3.0,3],\n>    ...: ['bah','bam',4.0,4],['foo','bar',5.0,5],['bah','bam',6.0,6]],\n>    ...: columns=list('ABCD'))\n> \n> In [8]: df\n> Out[8]:\n>      A    B  C  D\n> 0  foo  bar  1  1\n> 1  foo  bar  2  2\n> 2  bah  bam  3  3\n> 3  bah  bam  4  4\n> 4  foo  bar  5  5\n> 5  bah  bam  6  6\n> In [9]: df = df.set_index(['A','B'])\n> \n> In [10]: df\n> Out[10]:\n>          C  D\n> A   B\n> foo bar  1  1\n>     bar  2  2\n> bah bam  3  3\n>     bam  4  4\n> foo bar  5  5\n> bah bam  6  6\n> \n> In [11]: df.sortlevel(0)\n> Exception: Reindexing only valid with uniquely valued Index objects\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/4516#issuecomment-22393125\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22401961",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22401961",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22401961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDAxOTYx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-09T15:30:34Z",
    "updated_at": "2013-08-09T15:30:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@DanSears \n\nhaving dups in a multi-index is ok, but reallly depends on what you are doing with it.\n\ntry things like this:\n\n`df[(df['salesperson'] == 'foo') & (df['invoice_date']>Timestamp('20130101'))]` for _selecting_\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22751173",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22751173",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22751173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzUxMTcz",
    "user": {
      "login": "highpost",
      "id": 5192798,
      "node_id": "MDQ6VXNlcjUxOTI3OTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/highpost",
      "html_url": "https://github.com/highpost",
      "followers_url": "https://api.github.com/users/highpost/followers",
      "following_url": "https://api.github.com/users/highpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/highpost/subscriptions",
      "organizations_url": "https://api.github.com/users/highpost/orgs",
      "repos_url": "https://api.github.com/users/highpost/repos",
      "events_url": "https://api.github.com/users/highpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/highpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-16T07:16:36Z",
    "updated_at": "2013-08-16T07:16:36Z",
    "author_association": "NONE",
    "body": "Sorry for the delay, but I've been testing your fix and here are my results.\n\nI updated my test script and data generation script and I'm pretty sure the data is sorted correctly :) . The test script works fine for smaller datasets, but if I increase the dataset size I get:\n\n```\nindex out of bounds\n```\n\nYou can make smaller datasets by chopping up the CSV file with something like \"head -1000000\". Actually, it blows up between 999999 and 1000000 lines!\n\nHere's load-sales.py\n\n```\n#!/usr/bin/env python\n\nimport numpy as np\nimport pandas as pd\nfrom memory_profiler import profile\n\npd.set_option('display.height',            400)\npd.set_option('display.width',             400)\npd.set_option('display.max_rows',         1000)\npd.set_option('display.max_columns',        30)\npd.set_option('display.line_width',        200)\n\n# @profile\ndef load_data():\n    try:\n        df_iter = pd.read_csv(\n            './sales-sorted.csv',\n            header = None,\n            na_values = ['NULL'],\n            names = [\n                'salesperson',\n                'customer',\n                'invoice_date',\n                'price',\n                'ship_date',\n                'product',\n                'quantity',            \n            ],\n            parse_dates = [\n                'invoice_date',        \n                'ship_date',\n            ],\n            chunksize = 1000,\n        )\n\n        #\n        # aggregate the chunks\n        #\n        df = pd.concat(\n            [df for df in df_iter],\n            ignore_index = True)\n\n      # df = pd.concat(\n      #     [df for df in df_iter],\n      #     ignore_index = True).drop_duplicates([\n      #         'salesperson',\n      #         'customer',\n      #         'invoice_date',\n      #         'ship_date',\n      #     ])\n\n        #\n        # apply the MultiIndex\n        #\n        df = df.set_index([\n            'salesperson',\n            'customer',\n            'invoice_date',\n            'price',\n            'ship_date',\n        ])\n\n        print(df.loc[(\n            'A00000',                        # salesperson\n            'A',                             # customer\n            pd.datetime(2011,3,1,0,0,0),     # invoice_date\n            1.56,                            # price\n            pd.datetime(2011,3,6,0,0,0),     # ship_date\n        )])\n\n    except Exception as e:\n        print(e)\n\nif __name__== '__main__':\n    load_data()\n```\n\nand here's the test data generation script:\n\n```\n#!/usr/bin/env bash\n\n# 'salesperson',\n# 'customer',\n# 'invoice_date',\n# 'price',\n# 'ship_date',\n# 'product',\n# 'quantity',\n\nawk \"BEGIN {                                                                                              \\\n          prices[0] = 1.1;                                                                                \\\n          prices[1] = 2.2;                                                                                \\\n          prices[2] = 3.3;                                                                                \\\n          prices[3] = 4.4;                                                                                \\\n          prices[4] = 5.5;                                                                                \\\n          prices[5] = 6.6;                                                                                \\\n          prices[6] = 7.7;                                                                                \\\n          prices[7] = 8.8;                                                                                \\\n          prices[8] = 9.9;                                                                                \\\n          prices[9] = 10.0;                                                                               \\\n                                                                                                          \\\n          n_sa = 300;                                                                                     \\\n          n_cu = 300;                                                                                     \\\n          n_in = 10;                                                                                      \\\n          n_pr = 10;                                                                                      \\\n                                                                                                          \\\n          for (i = 0; i < n_sa; i++) {                                                                    \\\n              for (j = 0; j < n_cu; j++) {                                                                \\\n                  for (k = 1; k <= n_in; k++) {                                                           \\\n                      for (l = 0; l < n_pr; l++) {                                                        \\\n                          printf(\\\"%d,%d,2011-03-%02d 00:00:00,%0.2f,2011-03-%02d 00:00:00,%d,%d\\n\\\",     \\\n                              i, j, k, prices[l], k+5, l + 1, 1 + int(rand() * 10))                       \\\n                      }                                                                                   \\\n                  }                                                                                       \\\n              }                                                                                           \\\n          }                                                                                               \\\n      }\"\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22762792",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22762792",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22762792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzYyNzky",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-16T12:22:29Z",
    "updated_at": "2013-08-16T12:22:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "the problem is the price field is a `float`. which is part of an index. This does very weird things in indicies and make them very slow. Make it a column instead and do a boolean search on it. see [here](http://pandas.pydata.org/pandas-docs/dev/indexing.html#fallback-indexing)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22767928",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22767928",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22767928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzY3OTI4",
    "user": {
      "login": "highpost",
      "id": 5192798,
      "node_id": "MDQ6VXNlcjUxOTI3OTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/highpost",
      "html_url": "https://github.com/highpost",
      "followers_url": "https://api.github.com/users/highpost/followers",
      "following_url": "https://api.github.com/users/highpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/highpost/subscriptions",
      "organizations_url": "https://api.github.com/users/highpost/orgs",
      "repos_url": "https://api.github.com/users/highpost/repos",
      "events_url": "https://api.github.com/users/highpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/highpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-16T14:16:21Z",
    "updated_at": "2013-08-16T14:16:21Z",
    "author_association": "NONE",
    "body": "Thanks.\n\n--Dan\n\nOn Fri, Aug 16, 2013 at 5:22 AM, jreback notifications@github.com wrote:\n\n> the problem is the price field is a float. which is part of an index.\n> This does very weird things in indicies and make them very slow. Make it a\n> column instead and do a boolean search on it. see herehttp://pandas.pydata.org/pandas-docs/dev/indexing.html#fallback-indexing\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/4516#issuecomment-22762792\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22812119",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22812119",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22812119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODEyMTE5",
    "user": {
      "login": "highpost",
      "id": 5192798,
      "node_id": "MDQ6VXNlcjUxOTI3OTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/highpost",
      "html_url": "https://github.com/highpost",
      "followers_url": "https://api.github.com/users/highpost/followers",
      "following_url": "https://api.github.com/users/highpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/highpost/subscriptions",
      "organizations_url": "https://api.github.com/users/highpost/orgs",
      "repos_url": "https://api.github.com/users/highpost/repos",
      "events_url": "https://api.github.com/users/highpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/highpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-17T13:46:31Z",
    "updated_at": "2013-08-17T13:46:31Z",
    "author_association": "NONE",
    "body": "I converted the price column to an integer (x100) and I'm still getting the same result. That is, for data files below 1 million lines it works. But above 1M I get:\n\n```\nindex out of bounds\n```\n\nchange to load-sales.py:\n\n```\nprint(df.loc[(\n    'A00000',                        # salesperson\n    'A',                             # customer\n    pd.datetime(2011,3,1,0,0,0),     # invoice_date\n    156,                             # price (x100)\n    pd.datetime(2011,3,6,0,0,0),     # ship_date\n)])\n```\n\nchange to sales-gen.sh:\n\n```\nprintf(\\\"%d,%d,2011-03-%02d 00:00:00,%d,2011-03-%02d 00:00:00,%d,%d\\n\\\",        \\\n    i, j, k, int(prices[l] * 100), k+5, l + 1, 1 + int(rand() * 10))            \\\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22812484",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22812484",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22812484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODEyNDg0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-17T14:11:44Z",
    "updated_at": "2013-08-17T14:11:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "the salesperson/customer fields are now integers? A00000, A are not there in your file at all?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22812562",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22812562",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22812562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODEyNTYy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-17T14:16:20Z",
    "updated_at": "2013-08-17T14:16:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Heres a couple of more tipes\n\naccess the data like this (which is in effect a short-cut for the type of lookup y ou are doing)\n`df.xs(('A00000','A', pd.datetime(2011,3,1,0,0,0), 156, pd.datetime(2011,3,6,0,0,0))`\n\n```\n<class 'pandas.core.frame.DataFrame'>\nMultiIndex: 9000000 entries, (0, 0, 2011-03-01 00:00:00, 110, 2011-03-06 00:00:00) to (299, 299, 2011-03-10 00:00:00, 1000, 2011-03-15 00:00:00)\nColumns: 2 entries, product to quantity\ndtypes: int64(2)\n\nx = df.reset_index()\nx\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 9000000 entries, 0 to 8999999\nColumns: 7 entries, salesperson to quantity\ndtypes: datetime64[ns](2), int64(5)\n\nx.head()\n   salesperson  customer        invoice_date  price           ship_date  product  quantity\n0            0         0 2011-03-01 00:00:00    110 2011-03-06 00:00:00        1        10\n1            0         0 2011-03-01 00:00:00    220 2011-03-06 00:00:00        2         6\n2            0         0 2011-03-01 00:00:00    330 2011-03-06 00:00:00        3         5\n3            0         0 2011-03-01 00:00:00    440 2011-03-06 00:00:00        4         4\n4            0         0 2011-03-01 00:00:00    550 2011-03-06 00:00:00        5         6\n```\n\nNow just boolean search (to make sure that the key is in fact there; you can search with one of more keys\n\n```\nx[x.salesperson == 'A00000']\n*** TypeError: Could not compare <type 'str'> type with Series\n```\n\nunique values in a column\n\n```\npd.Series(x.salesperson.unique())\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22813998",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4516#issuecomment-22813998",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4516",
    "id": 22813998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODEzOTk4",
    "user": {
      "login": "highpost",
      "id": 5192798,
      "node_id": "MDQ6VXNlcjUxOTI3OTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/highpost",
      "html_url": "https://github.com/highpost",
      "followers_url": "https://api.github.com/users/highpost/followers",
      "following_url": "https://api.github.com/users/highpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/highpost/subscriptions",
      "organizations_url": "https://api.github.com/users/highpost/orgs",
      "repos_url": "https://api.github.com/users/highpost/repos",
      "events_url": "https://api.github.com/users/highpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/highpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-17T15:39:38Z",
    "updated_at": "2013-08-17T15:39:38Z",
    "author_association": "NONE",
    "body": "You're right, I had copied the wrong snippet. The following query works:\n\n```\nprint(df.loc[(\n    0,                               # salesperson\n    0,                               # customer\n    pd.datetime(2011,3,1,0,0,0),     # invoice_date\n    770,                             # price (x100)\n    pd.datetime(2011,3,6,0,0,0),     # ship_date\n)])\n```\n\nThanks for your help with this!\n\n--Dan\n\nOn Sat, Aug 17, 2013 at 7:16 AM, jreback notifications@github.com wrote:\n\n> Heres a couple of more tipes\n> \n> access the data like this (which is in effect a short-cut for the type of\n> lookup y ou are doing)\n> df.xs(('A00000','A', pd.datetime(2011,3,1,0,0,0), 156,\n> pd.datetime(2011,3,6,0,0,0))\n> \n> <class 'pandas.core.frame.DataFrame'>\n> MultiIndex: 9000000 entries, (0, 0, 2011-03-01 00:00:00, 110, 2011-03-06 00:00:00) to (299, 299, 2011-03-10 00:00:00, 1000, 2011-03-15 00:00:00)\n> Columns: 2 entries, product to quantity\n> dtypes: int64(2)\n> \n> x = df.reset_index()\n> x\n> \n> <class 'pandas.core.frame.DataFrame'>\n> Int64Index: 9000000 entries, 0 to 8999999\n> Columns: 7 entries, salesperson to quantity\n> dtypes: datetime64[ns](2), int64(5)\n> \n> x.head()\n>    salesperson  customer        invoice_date  price           ship_date  product  quantity\n> 0            0         0 2011-03-01 00:00:00    110 2011-03-06 00:00:00        1        10\n> 1            0         0 2011-03-01 00:00:00    220 2011-03-06 00:00:00        2         6\n> 2            0         0 2011-03-01 00:00:00    330 2011-03-06 00:00:00        3         5\n> 3            0         0 2011-03-01 00:00:00    440 2011-03-06 00:00:00        4         4\n> 4            0         0 2011-03-01 00:00:00    550 2011-03-06 00:00:00        5         6\n> \n> Now just boolean search (to make sure that the key is in fact there; you\n> can search with one of more keys\n> \n> x[x.salesperson == 'A00000']\n> **\\* TypeError: Could not compare <type 'str'> type with Series\n> \n> unique values in a column\n> \n> pd.Series(x.salesperson.unique())\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/4516#issuecomment-22812562\n> .\n"
  }
]
