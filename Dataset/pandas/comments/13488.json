[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/227016181",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13488#issuecomment-227016181",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13488",
    "id": 227016181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzAxNjE4MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T19:39:48Z",
    "updated_at": "2016-06-19T19:39:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "simply `df.fillna(0).add(s)`.\n\nI'll mark it, but these things are generally would need outside patches.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373223859",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13488#issuecomment-373223859",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13488",
    "id": 373223859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIyMzg1OQ==",
    "user": {
      "login": "MTKnife",
      "id": 7341559,
      "node_id": "MDQ6VXNlcjczNDE1NTk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7341559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MTKnife",
      "html_url": "https://github.com/MTKnife",
      "followers_url": "https://api.github.com/users/MTKnife/followers",
      "following_url": "https://api.github.com/users/MTKnife/following{/other_user}",
      "gists_url": "https://api.github.com/users/MTKnife/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MTKnife/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MTKnife/subscriptions",
      "organizations_url": "https://api.github.com/users/MTKnife/orgs",
      "repos_url": "https://api.github.com/users/MTKnife/repos",
      "events_url": "https://api.github.com/users/MTKnife/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MTKnife/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T00:52:06Z",
    "updated_at": "2018-03-15T13:54:42Z",
    "author_association": "NONE",
    "body": "> simply df.fillna(0).add(s).\r\n\r\nThat works for some use cases, but it doesn't work when you want to add two objects with different indices.  E.g.:\r\n\r\nfoo = DataFrame([[1, 2, 3], [4, 5, 6]])\r\nbar = Series([7, 8, 9, 10])\r\n\r\nIf I want to add these two together, I'd like to be able to assume that missing columns in \"foo\" are 0 values (it's the kind of thing that can happen easily when you're adding new data to old data--in my case, a vocabulary that expands over time), like this:\r\n\r\nfoo.add(bar, axis = 0, fill_value = 0)\r\n\r\nYes, I can still do this by reindexing \"foo\" before calling \"add\", but that involves more work than a simple \"fillna\") call.  Not only is it a pain, but it prevents me from taking advantage of polymorphism:  for example, right now I'm working on an application where the argument of an \"add\" can be either a DataFrame or a Series, and the app worked fine while the argument was a DataFrame, leaving me with a bug that I discovered only when I accidentally supplied a set of arguments that created a Series."
  }
]
