[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/448063542",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24314#issuecomment-448063542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24314",
    "id": 448063542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODA2MzU0Mg==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T01:34:48Z",
    "updated_at": "2018-12-18T01:34:48Z",
    "author_association": "MEMBER",
    "body": "This should raise, as `bins` should not be specified as an integer when the input data contains infinity.  The error message could certainly be improved though.\r\n\r\nA more concise example of the error in question:\r\n```python\r\nIn [2]: pd.cut([0, 1, 2, 3, 4, np.inf], bins=3)\r\n---------------------------------------------------------------------------\r\nValueError: Bin edges must be unique: array([nan, inf, inf, inf]).\r\nYou can drop duplicate edges by setting the 'duplicates' kwarg\r\n\r\nIn [3]: pd.cut([0, 1, 2, 3, 4, np.inf], bins=3, duplicates='drop')\r\n---------------------------------------------------------------------------\r\nValueError: missing values must be missing in the same location both left and right sides\r\n```\r\nNote that `duplicates='drop'` is just delaying the error from `[2]`.\r\n\r\nAs to why this is invalid, from the documentation for [`cut`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.cut.html) we have the following description for `bins`:\r\n>**bins** : _int, sequence of scalars, or pandas.IntervalIndex_\r\n>The criteria to bin by.\r\n> - int : Defines the number of equal-width bins in the range of x. The range of x is extended by .1% on each side to include the minimum and maximum values of x.\r\n\r\nSpecifying `bins` as an integer means getting that number of equal width bins that the span the range of the input data, but when your input data contains infinity then the range is infinite, so each bucket would also need to be infinite, which doesn't make sense.\r\n\r\nThe way to handle this would be to specify `bins` using one of the alternative options, or to use [`qcut`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.cut.html):\r\n```python\r\nIn [4]: pd.cut([0, 1, 2, 3, 4, np.inf], bins=[-1, 2, np.inf])\r\nOut[4]:\r\n[(-1.0, 2.0], (-1.0, 2.0], (-1.0, 2.0], (2.0, inf], (2.0, inf], (2.0, inf]]\r\nCategories (2, interval[float64]): [(-1.0, 2.0] < (2.0, inf]]\r\n\r\nIn [5]: pd.qcut([0, 1, 2, 3, 4, np.inf], q=3)\r\nOut[5]:\r\n[(-0.001, 1.667], (-0.001, 1.667], (1.667, 3.333], (1.667, 3.333], (3.333, inf], (3.333, inf]]\r\nCategories (3, interval[float64]): [(-0.001, 1.667] < (1.667, 3.333] < (3.333, inf]]\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/448064399",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24314#issuecomment-448064399",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24314",
    "id": 448064399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODA2NDM5OQ==",
    "user": {
      "login": "vaughnkoch",
      "id": 390917,
      "node_id": "MDQ6VXNlcjM5MDkxNw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/390917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vaughnkoch",
      "html_url": "https://github.com/vaughnkoch",
      "followers_url": "https://api.github.com/users/vaughnkoch/followers",
      "following_url": "https://api.github.com/users/vaughnkoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/vaughnkoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vaughnkoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vaughnkoch/subscriptions",
      "organizations_url": "https://api.github.com/users/vaughnkoch/orgs",
      "repos_url": "https://api.github.com/users/vaughnkoch/repos",
      "events_url": "https://api.github.com/users/vaughnkoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vaughnkoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T01:39:18Z",
    "updated_at": "2018-12-18T01:39:18Z",
    "author_association": "NONE",
    "body": "That makes sense, thanks for sharing.\r\n\r\nWhat do you think of having it just ignore inf values (and if there no binnable values, then raise?)\r\nIf you have inf values in the source data, the caller has to do extra work to remove them anyways, which pandas could do as well. Then you could just put that in the docs that inf is converted to NA.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/448069194",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24314#issuecomment-448069194",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24314",
    "id": 448069194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODA2OTE5NA==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T02:03:44Z",
    "updated_at": "2018-12-18T02:03:44Z",
    "author_association": "MEMBER",
    "body": "> What do you think of having it just ignore inf values (and if there no binnable values, then raise?)\r\n\r\nI'd be a bit hesitant to silently ignore infinite values.  This would make the handling of infinity a bit inconsistent within `cut` since infinity is valid for other ways of using `cut`.  It would also make it harder for users to diagnose if they're using the wrong combination of parameters with `cut`, or if something is wrong with their assumptions about their data (infinity being present when it shouldn't).  Additionally, I'm not aware of any other methods that handle infinity in a similar way (could be forgetting something), so it'd be setting a new precedence within the codebase in regards to infinity.\r\n\r\nAll that being said, I wouldn't necessarily be opposed to changing the behavior in that regard if a consensus is reached to support it.  I think it would warrant a larger discussion though.  Feel free to open a new issue regarding the proposed behavior if it's something you feel strongly about, so it has more visibility to the other devs."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/448070297",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24314#issuecomment-448070297",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24314",
    "id": 448070297,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODA3MDI5Nw==",
    "user": {
      "login": "vaughnkoch",
      "id": 390917,
      "node_id": "MDQ6VXNlcjM5MDkxNw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/390917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vaughnkoch",
      "html_url": "https://github.com/vaughnkoch",
      "followers_url": "https://api.github.com/users/vaughnkoch/followers",
      "following_url": "https://api.github.com/users/vaughnkoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/vaughnkoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vaughnkoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vaughnkoch/subscriptions",
      "organizations_url": "https://api.github.com/users/vaughnkoch/orgs",
      "repos_url": "https://api.github.com/users/vaughnkoch/repos",
      "events_url": "https://api.github.com/users/vaughnkoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vaughnkoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T02:09:45Z",
    "updated_at": "2018-12-18T02:09:45Z",
    "author_association": "NONE",
    "body": "What about having the default be to raise (with an informative error message), but to add an additional optional parameter to pd.cut which would then ignore infs? That way, if someone uses the option, they're explicitly saying infs can be ignored, and if they get the error otherwise, it'll be an easy change instead of having to put an extra line to drop infs."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/448439995",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24314#issuecomment-448439995",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24314",
    "id": 448439995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODQzOTk5NQ==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-19T01:49:50Z",
    "updated_at": "2018-12-19T01:49:50Z",
    "author_association": "MEMBER",
    "body": "Yes, that would be a more viable alternative.  Would still like a new issue opened regarding it for more discussion.  To be honest, I don't think this would be a high priority item to be filled, unless it's something you'd be willing to contribute, given that it's a rather specific request that I don't think would be frequently used.  Also keep in mind that there's a bit of maintenance burden associated with adding keyword arguments like this; the user workaround is a single line of code, but implementing this in the codebase requires quite a bit more work, and would need to be maintained going forward."
  }
]
