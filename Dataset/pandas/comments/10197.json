[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/104647072",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10197#issuecomment-104647072",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10197",
    "id": 104647072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDY0NzA3Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T12:19:39Z",
    "updated_at": "2015-05-22T12:19:39Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report! \nHowever, I don't think it is a false warning in this case, as the multi-index tuples are converted to strings (eg `\"('FIRST', 'ONE')\"`) when used as column names for the sql table. So in those names, there _are_ spaces.  \n\nIn general, multi-index columns are not really supported by `to_sql` (but it works, given that they are converted to somewhat awkward strings)\n\nExample (reading the table back into pandas, from your example above):\n\n```\nIn [77]: df = pd.read_sql(\"SELECT * FROM tmp_table\", con)\n\nIn [79]: df\nOut[79]:\nEmpty DataFrame\nColumns: [index, ('FIRST', 'ONE'), ('FIRST', 'TWO'), ('SECOND', 'ONE'), ('SECOND', 'TWO')]\nIndex: []\n\nIn [80]: df.columns\nOut[80]:\nIndex([u'index', u'('FIRST', 'ONE')', u'('FIRST', 'TWO')',\n       u'('SECOND', 'ONE')', u'('SECOND', 'TWO')'],\n      dtype='object')\n```\n\nSo when looking at the `.columns` attribute, you can see it are now actually strings and no longer tuples.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/104673179",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10197#issuecomment-104673179",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10197",
    "id": 104673179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDY3MzE3OQ==",
    "user": {
      "login": "elDan101",
      "id": 8281969,
      "node_id": "MDQ6VXNlcjgyODE5Njk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8281969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elDan101",
      "html_url": "https://github.com/elDan101",
      "followers_url": "https://api.github.com/users/elDan101/followers",
      "following_url": "https://api.github.com/users/elDan101/following{/other_user}",
      "gists_url": "https://api.github.com/users/elDan101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elDan101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elDan101/subscriptions",
      "organizations_url": "https://api.github.com/users/elDan101/orgs",
      "repos_url": "https://api.github.com/users/elDan101/repos",
      "events_url": "https://api.github.com/users/elDan101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elDan101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T14:24:14Z",
    "updated_at": "2015-05-22T14:24:14Z",
    "author_association": "NONE",
    "body": "Ok, I realised this now too. Sorry for that. \nI still use MultiIndex with SQL. When I read from the database, I needed to implementent a \"MultiIndex recovery\" to obtain the same table. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/104693074",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10197#issuecomment-104693074",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10197",
    "id": 104693074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDY5MzA3NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T15:34:56Z",
    "updated_at": "2015-05-22T15:34:56Z",
    "author_association": "MEMBER",
    "body": "@elDan101 Personally, I think the easiest will be to first join the MultiIndex with eg `_` before writing to sql, and then you can easily split it again to a multiindex afterwards.\n\nSomething like\n\n```\n# before\ndf.columns = [a + '_' + b for a, b in df.columns]\n\n# after\ndf.columns = df.columns.split('_')\n```\n\n(only works of course if you don't have `_` in your names itself)\n"
  }
]
