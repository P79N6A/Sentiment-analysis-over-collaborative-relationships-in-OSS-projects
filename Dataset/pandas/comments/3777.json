[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19065142",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19065142",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19065142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDY1MTQy",
    "user": {
      "login": "twiecki",
      "id": 674200,
      "node_id": "MDQ6VXNlcjY3NDIwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/674200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/twiecki",
      "html_url": "https://github.com/twiecki",
      "followers_url": "https://api.github.com/users/twiecki/followers",
      "following_url": "https://api.github.com/users/twiecki/following{/other_user}",
      "gists_url": "https://api.github.com/users/twiecki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/twiecki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/twiecki/subscriptions",
      "organizations_url": "https://api.github.com/users/twiecki/orgs",
      "repos_url": "https://api.github.com/users/twiecki/repos",
      "events_url": "https://api.github.com/users/twiecki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/twiecki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-06T18:35:03Z",
    "updated_at": "2013-06-06T18:35:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Seems like its `numpy` related. Is this expected slicing behavior?!\n\n``` python\nIn [11]: x = np.arange(3**3).reshape((3, 3, 3))\n\nIn [12]: x.shape\nOut[12]: (3, 3, 3)\n\nIn [15]: x[[0, 1], :, :].shape\nOut[15]: (2, 3, 3)\n\nIn [16]: x[:, :, [0,1]].shape\nOut[16]: (3, 3, 2)\n\nIn [17]: x[[0,1], :, [0,1]].shape\nOut[17]: (2, 3)\n\nIn [20]: x[[0,1], :, 0:2].shape\nOut[20]: (2, 3, 2)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19065436",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19065436",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19065436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDY1NDM2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-06T18:39:32Z",
    "updated_at": "2013-06-06T18:39:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "hah...just about to write back\n\n1) this wasn't implemented\n2) its a bit harder than I though to fix, so have to push to 0.12\n\nits straightforward to align the rhs (e.g. the other panel), but then I have to assign the values\nwhich is actually non-trivial because you are assigning in a non-contiguos was (potentially)\nand have to do a multi-dim put\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19065560",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19065560",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19065560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDY1NTYw",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-06T18:41:21Z",
    "updated_at": "2013-06-06T18:41:21Z",
    "author_association": "MEMBER",
    "body": "possibly related: #3738 \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19065902",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19065902",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19065902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDY1OTAy",
    "user": {
      "login": "twiecki",
      "id": 674200,
      "node_id": "MDQ6VXNlcjY3NDIwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/674200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/twiecki",
      "html_url": "https://github.com/twiecki",
      "followers_url": "https://api.github.com/users/twiecki/followers",
      "following_url": "https://api.github.com/users/twiecki/following{/other_user}",
      "gists_url": "https://api.github.com/users/twiecki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/twiecki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/twiecki/subscriptions",
      "organizations_url": "https://api.github.com/users/twiecki/orgs",
      "repos_url": "https://api.github.com/users/twiecki/repos",
      "events_url": "https://api.github.com/users/twiecki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/twiecki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-06T18:46:31Z",
    "updated_at": "2013-06-06T18:46:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suppose one can only fancy-index in one dimension at a time.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19066797",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19066797",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19066797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDY2Nzk3",
    "user": {
      "login": "twiecki",
      "id": 674200,
      "node_id": "MDQ6VXNlcjY3NDIwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/674200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/twiecki",
      "html_url": "https://github.com/twiecki",
      "followers_url": "https://api.github.com/users/twiecki/followers",
      "following_url": "https://api.github.com/users/twiecki/following{/other_user}",
      "gists_url": "https://api.github.com/users/twiecki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/twiecki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/twiecki/subscriptions",
      "organizations_url": "https://api.github.com/users/twiecki/orgs",
      "repos_url": "https://api.github.com/users/twiecki/repos",
      "events_url": "https://api.github.com/users/twiecki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/twiecki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-06T19:00:33Z",
    "updated_at": "2013-06-06T19:00:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems in my case there is a work-around:\n\n``` python\nwp.update(wp2.loc[['Item1', 'Item2'], :, ['A', 'B']])\n```\n\nWould there be any problem with this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19067030",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19067030",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19067030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDY3MDMw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-06T19:04:06Z",
    "updated_at": "2013-06-06T19:04:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "ahh..yes..that is a good solution\n\nfyi....will be a fair amount slower as its basically going frame-by-frame which then goes series by series....\nso if this panel is big at all won't be fast\n\nanother way to approach this is to break the panel into frames, copy/update them as needed, then concat back together\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19068504",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19068504",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19068504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDY4NTA0",
    "user": {
      "login": "twiecki",
      "id": 674200,
      "node_id": "MDQ6VXNlcjY3NDIwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/674200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/twiecki",
      "html_url": "https://github.com/twiecki",
      "followers_url": "https://api.github.com/users/twiecki/followers",
      "following_url": "https://api.github.com/users/twiecki/following{/other_user}",
      "gists_url": "https://api.github.com/users/twiecki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/twiecki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/twiecki/subscriptions",
      "organizations_url": "https://api.github.com/users/twiecki/orgs",
      "repos_url": "https://api.github.com/users/twiecki/repos",
      "events_url": "https://api.github.com/users/twiecki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/twiecki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-06T19:30:22Z",
    "updated_at": "2013-06-06T19:30:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, thanks for the info!\n\nI might wait until 0.12 then if the performance hit is not too dramatic for my case.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19342866",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19342866",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19342866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQyODY2",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-12T17:52:43Z",
    "updated_at": "2013-06-12T17:52:43Z",
    "author_association": "NONE",
    "body": "I just noticed this issue (or something related) silently caused one of my processing flows to assign erroneous data. \n\nI find myself constantly wanting to group on several columns, compute a new column based on grouped data, and assign that result column back to the original data frame, indexing the original DataFrame using the groups multi-index name. This worked in 0.10.0.\n\nAssignment to a df column indexed using .ix[] a multi-index tuple and a column name used to work. E.G. df.ix[(1,2,3,4), 'new_col'] = np.arange(100). Now (in Pandas 0.11.0) it just replaced the entire assignment by repeating the first entry in the np.array. Is there any fix to this in a dev version? I might have to drop down 0.10.0.\n\n``` python\n\nIn [1]: import numpy as np\n\nIn [3]: print pd.__version__\n0.11.0\n\nIn [4]: # Generate Test DataFrame\n   ...: NUM_ROWS = 100000\n   ...: \n\nIn [5]: NUM_COLS = 10\n\nIn [6]: col_names = ['A'+num for num in map(str,np.arange(NUM_COLS).tolist())]\n\nIn [7]: index_cols = col_names[:5]\n\nIn [8]: # Set DataFrame to have 5 level Hierarchical Index.\n   ...: # Sort the index!\n   ...: df = pd.DataFrame(np.random.randint(5, size=(NUM_ROWS,NUM_COLS)), dtype=np.int64, columns=col_names)\n   ...: \n\nIn [9]: df = df.set_index(index_cols).sort_index()\n\nIn [10]: df\nOut[10]: <class 'pandas.core.frame.DataFrame'>\nMultiIndex: 100000 entries, (0, 0, 0, 0, 0) to (4, 4, 4, 4, 4)\nData columns (total 5 columns):\nA5    100000  non-null values\nA6    100000  non-null values\nA7    100000  non-null values\nA8    100000  non-null values\nA9    100000  non-null values\ndtypes: int64(5)\n\nIn [11]: # Group by first 4 index columns.\n   ....: grp = df.groupby(level=index_cols[:4])\n   ....: \n\nIn [12]: # Find index of largest group.\n   ....: big_loc = grp.size().idxmax()\n   ....: \n\nIn [13]: # Create new empty column in DataFrame\n   ....: df['new_col'] = np.nan\n   ....: \n\nIn [14]: # Loop through groups and assign to orignal array to new_col column\n   ....: for name, df2 in grp:\n   ....:     new_vals = np.arange(df2.shape[0])\n   ....:     print 'Group: ', name\n   ....:     print 'Expected:\\n', pd.Series(new_vals).value_counts()\n   ....:     df.ix[name, 'new_col'] = new_vals #This used to work, but now only assigns the first number from the np.array\n   ....:     print '\\nAssigned:\\n', df.ix[name, 'new_col'].value_counts()\n   ....:     print '\\n'\n   ....: \nGroup:  (0, 0, 0, 0)\nExpected:\n155    1\n48     1\n55     1\n54     1\n53     1\n52     1\n51     1\n50     1\n49     1\n47     1\n57     1\n46     1\n45     1\n44     1\n43     1\n...\n113    1\n112    1\n111    1\n110    1\n109    1\n108    1\n107    1\n106    1\n105    1\n104    1\n103    1\n102    1\n101    1\n100    1\n0      1\nLength: 156, dtype: int64\n\nAssigned:\n0    156\ndtype: int64\n\n\nGroup:  (0, 0, 0, 1)\nExpected:\n147    1\n54     1\n52     1\n51     1\n50     1\n49     1\n48     1\n47     1\n46     1\n45     1\n44     1\n43     1\n42     1\n41     1\n40     1\n...\n108    1\n107    1\n106    1\n105    1\n104    1\n103    1\n101    1\n94     1\n100    1\n99     1\n98     1\n97     1\n96     1\n95     1\n0      1\nLength: 148, dtype: int64\n\nAssigned:\n0    148\ndtype: int64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19343045",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-19343045",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 19343045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQzMDQ1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-12T17:55:10Z",
    "updated_at": "2013-06-12T17:55:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dragoljub It think the issue is related to #3668, which has been fixed in master and will be in upcoming 0.11.1 (very soon)\n\nThe issue described here is related to Panel <-> Panel assignment via ix/loc\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20010594",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-20010594",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 20010594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDEwNTk0",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-25T21:58:32Z",
    "updated_at": "2013-06-25T21:58:32Z",
    "author_association": "NONE",
    "body": "Any idea if the nightly builds at http://pandas.pydata.org/pandas-build/dev/ have this update? I have not seen any updated binary since April.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23891692",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23891692",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23891692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODkxNjky",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-05T18:42:18Z",
    "updated_at": "2013-09-05T18:42:18Z",
    "author_association": "NONE",
    "body": "I'm seeing this issue again: \nWhen iterating through a DataFrame's groupby object and indexing the orignal DataFrame with the returned groupby index tuple. If there is a better way of iterating through groups and updating/adding columns for each group in the original DataFrame I'm all ears.\n\n``` python\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd\n\nIn [3]: print pd.__version__\n0.12.0\n\nIn [4]: # Generate Test DataFrame\n   ...: NUM_ROWS = 100000\n   ...: \n\nIn [5]: NUM_COLS = 10\n\nIn [6]: col_names = ['A'+num for num in map(str,np.arange(NUM_COLS).tolist())]\n\nIn [7]: index_cols = col_names[:5]\n\nIn [8]: # Set DataFrame to have 5 level Hierarchical Index.\n   ...: # Sort the index!\n   ...: df = pd.DataFrame(np.random.randint(5, size=(NUM_ROWS,NUM_COLS)), dtype=np.int64, columns=col_names)\n   ...: \n\nIn [9]: df = df.set_index(index_cols).sort_index()\n\nIn [10]: df\nOut[10]: <class 'pandas.core.frame.DataFrame'>\nMultiIndex: 100000 entries, (0, 0, 0, 0, 0) to (4, 4, 4, 4, 4)\nData columns (total 5 columns):\nA5    100000  non-null values\nA6    100000  non-null values\nA7    100000  non-null values\nA8    100000  non-null values\nA9    100000  non-null values\ndtypes: int64(5)\n\nIn [11]: # Group by first 4 index columns.\n   ....: grp = df.groupby(level=index_cols[:4])\n   ....: \n\nIn [12]: # Find index of largest group.\n   ....: big_loc = grp.size().idxmax()\n   ....: \n\nIn [13]: # Create new empty column in DataFrame\n   ....: df['new_col'] = np.nan\n   ....: \n\nIn [14]: # Loop through groups and assign to orignal array to new_col column\n   ....: for name, df2 in grp:\n   ....:     new_vals = np.arange(df2.shape[0])\n   ....:     print 'Group: ', name\n   ....:     print 'Expected:\\n', pd.Series(new_vals).value_counts()\n   ....:     df.ix[name, 'new_col'] = new_vals #This used to work, but now only assigns the first number from the np.array\n   ....:     print '\\nAssigned:\\n', df.ix[name, 'new_col'].value_counts()\n   ....:     print '\\n'\n   ....: \n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-14-06123ee45450> in <module>()\n      4     print 'Group: ', name\n      5     print 'Expected:\\n', pd.Series(new_vals).value_counts()\n----> 6     df.ix[name, 'new_col'] = new_vals #This used to work, but now only assigns the first number from the np.array\n      7     print '\\nAssigned:\\n', df.ix[name, 'new_col'].value_counts()\n      8     print '\\n'\n\nC:\\Python27\\lib\\site-packages\\pandas\\core\\indexing.pyc in __setitem__(self, key, value)\n     86             indexer = self._convert_to_indexer(key)\n     87 \n---> 88         self._setitem_with_indexer(indexer, value)\n     89 \n     90     def _has_valid_tuple(self, key):\n\nC:\\Python27\\lib\\site-packages\\pandas\\core\\indexing.pyc in _setitem_with_indexer(self, indexer, value)\n    156                 # we have an equal len list/ndarray\n    157                 elif len(labels) == 1 and (\n--> 158                     len(self.obj[labels[0]]) == len(value) or len(plane_indexer[0]) == len(value)):\n    159                     setter(labels[0], value)\n    160 \n\nTypeError: object of type 'slice' has no len()\nGroup:  (0, 0, 0, 0)\nExpected:\n162    1\n40     1\n58     1\n57     1\n56     1\n55     1\n54     1\n53     1\n52     1\n51     1\n50     1\n49     1\n48     1\n47     1\n46     1\n...\n117    1\n116    1\n115    1\n114    1\n113    1\n111    1\n103    1\n110    1\n109    1\n108    1\n107    1\n106    1\n105    1\n104    1\n0      1\nLength: 163, dtype: int64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23968876",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23968876",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23968876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTY4ODc2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-06T20:59:10Z",
    "updated_at": "2013-09-06T20:59:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dragoljub this is a bug, fixing in master...but I wouldn't do it this way anyhow....do somethign like\nI think is what you want. or can at least get you there\n\n```\nIn [2]: NUM_ROWS = 100\n\nIn [3]: NUM_COLS = 10\n\nIn [4]: col_names = ['A'+num for num in map(str,np.arange(NUM_COLS).tolist())]\n\nIn [5]: index_cols = col_names[:5]\n\nIn [6]: df = DataFrame(np.random.randint(5, size=(NUM_ROWS,NUM_COLS)), dtype=np.int64, columns=col_names)\n\nIn [7]: df = df.set_index(index_cols).sort_index()\n\nIn [8]: grp = df.groupby(level=index_cols[:4])\n\nIn [9]: f_index = np.arange(5)\n\nIn [10]: def f(name,df2):\n   ....:                 return Series(np.arange(df2.shape[0]),name=df2.index.values[0]).reindex(f_index)\n   ....: \n\nIn [11]: new_df = pd.concat([ f(name,df2) for name, df2 in grp ],axis=1).T\n\nIn [12]: df\nOut[12]: \n<class 'pandas.core.frame.DataFrame'>\nMultiIndex: 100 entries, (0, 0, 0, 3, 0) to (4, 4, 3, 1, 0)\nData columns (total 5 columns):\nA5    100  non-null values\nA6    100  non-null values\nA7    100  non-null values\nA8    100  non-null values\nA9    100  non-null values\ndtypes: int64(5)\n\nIn [13]: new_df\nOut[13]: \n<class 'pandas.core.frame.DataFrame'>\nIndex: 90 entries, (0, 0, 0, 3, 0) to (4, 4, 3, 1, 0)\nData columns (total 5 columns):\n0    90  non-null values\n1    9  non-null values\n2    1  non-null values\n3    0  non-null values\n4    0  non-null values\ndtypes: float64(5)\n\nIn [14]: df['x0'] = new_df[0]\n\nIn [15]: df['x1'] = new_df[1]\n\nIn [16]: df\nOut[16]: \n<class 'pandas.core.frame.DataFrame'>\nMultiIndex: 100 entries, (0, 0, 0, 3, 0) to (4, 4, 3, 1, 0)\nData columns (total 7 columns):\nA5    100  non-null values\nA6    100  non-null values\nA7    100  non-null values\nA8    100  non-null values\nA9    100  non-null values\nx0    91  non-null values\nx1    10  non-null values\ndtypes: float64(2), int64(5)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23972364",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23972364",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23972364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTcyMzY0",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-06T22:04:03Z",
    "updated_at": "2013-09-06T22:04:03Z",
    "author_association": "NONE",
    "body": "Looks interesting. The ultimate goal I have is to apply various machine learning/clustering etc algorithm across a DataFrame's subgroups, where each algorithm returns a series of results (one for each row in a subgroup). I think the ultimate solution would be the flexible-apply function (http://pandas.pydata.org/pandas-docs/dev/groupby.html#flexible-apply) df.groupby([['a','b','c','d']]).apply(my_ml_function) which would expect a function to return the results series and then the groupby apply method would combine everything into a data frame with the new column labeled 'my_ml_function' with the results for each application of my_ml_function. \n\nMaybe I just need to think about it differently and expect the results of flexible apply to be a long series of results and then just join the results back to the original DataFrame. It would be nice to have the option to just augment the data frame with just the column I wish to add. :)\n\nThen one command could run a bunch of analytics across subgroups while keeping results joined to the original data, for plotting etc.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23972741",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23972741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23972741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTcyNzQx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-06T22:11:28Z",
    "updated_at": "2013-09-06T22:11:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can do this now. What is too complicated is your assignment method. Just compute what you need in the apply (which is essentially what I did, but more 'manually') and create the resulting structure.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23974794",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23974794",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23974794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc0Nzk0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-06T23:01:19Z",
    "updated_at": "2013-09-06T23:01:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dragoljub see PR #4766 for the fixes for this issue (on master)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23975358",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23975358",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23975358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc1MzU4",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-06T23:16:12Z",
    "updated_at": "2013-09-06T23:40:29Z",
    "author_association": "NONE",
    "body": "WOW! df.apply() is awesome! Last time I checked apply did not work with MultiIndex. For anyone who is interested here is an example of applying ~625 clustering jobs across 625 groups in a 100k element DataFrame. The syntax is great, the semantics is powerful. There is just one little thing. There is no lazy way to add a named series as a column to a DataFrame in-place. It seems like we have a df.pop() method maybe we need a df.push() method to do something as simple as df[series.name] = series. df.append() takes a data frame and takes longer and returns a copy. Why does pandas seem to be doing away with in-place methods? \n\n``` python\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd\n\nIn [3]: from sklearn.cluster import DBSCAN as DBSCAN\n\nIn [4]: print pd.__version__\n0.12.0\n\nIn [5]: # Generate Test DataFrame\n   ...: NUM_ROWS = 100000\n   ...: \n\nIn [6]: NUM_COLS = 10\n\nIn [7]: col_names = ['A'+num for num in map(str,np.arange(NUM_COLS).tolist())]\n\nIn [8]: index_cols = col_names[:5]\n\nIn [9]: # Set DataFrame to have 5 level Hierarchical Index.\n   ...: # Sort the index!\n   ...: df = pd.DataFrame(np.random.randint(5, size=(NUM_ROWS,NUM_COLS)), dtype=np.int64, columns=col_names)\n   ...: \n\nIn [10]: df = df.set_index(index_cols).sort_index()\n\nIn [11]: df\n\nOut[11]: <class 'pandas.core.frame.DataFrame'>\nMultiIndex: 100000 entries, (0, 0, 0, 0, 0) to (4, 4, 4, 4, 4)\nData columns (total 5 columns):\nA5    100000  non-null values\nA6    100000  non-null values\nA7    100000  non-null values\nA8    100000  non-null values\nA9    100000  non-null values\ndtypes: int64(5)\n\nIn [12]: # Group by first 4 index columns.\n   ....: grp = df.groupby(level=index_cols[:4])\n   ....: \n\nIn [13]: # Find index of largest group.\n   ....: big_loc = grp.size().idxmax()\n   ....: \n\nIn [14]: # Create function to apply clustering on groups\n   ....: def grp_func(df):\n   ....:     \"\"\"Run clustering on subgroup and return series of results.\"\"\"\n   ....:     db = DBSCAN(eps=1, min_samples=1, metric='euclidean').fit(df.values)\n   ....:     return pd.Series(db.labels_, name='cluster_id')\n   ....: \n   ....: # Apply clustering on each subgroup of DataFrame\n   ....: \n\nIn [15]: %time out = grp.apply(grp_func)\nCPU times: user 33.32 s, sys: 0.00 s, total: 33.32 s\nWall time: 33.32 s\n\nIn [16]: # Add Cluster ID column to orignal df, too bad this creates a copy...\n   ....: %timeit df.join(out)\n   ....: \n1 loops, best of 3: 217 ms per loop\n\nIn [17]: # Much faster but you have to specify column name :(\n   ....: %timeit df['cluster_id'] = out\n   ....: \n10 loops, best of 3: 48.3 ms per loop\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23976143",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23976143",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23976143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc2MTQz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-06T23:40:03Z",
    "updated_at": "2013-09-06T23:40:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "try `df.insert(loc,column,value)`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23976802",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23976802",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23976802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc2ODAy",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-07T00:01:35Z",
    "updated_at": "2013-09-07T00:03:03Z",
    "author_association": "NONE",
    "body": "Thanks! Not sure how I missed insert. Still, having to specify location and column_name is too much work. :smile_cat: \n\nAnyone for adding a df.push() method?\ndf.push(series): Appends series as a column to the end of a data frame, using the series name and checks for index alignment (I'm pretty sure df.insert() ensures index alignment..). This is essentially a df.insert shortcut something like:\n\n``` python\ndf.insert(len(df.columns), series.name, series)\n```\n\nor maybe we can just add defaults to loc and column parameters?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23976884",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23976884",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23976884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc2ODg0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-07T00:04:01Z",
    "updated_at": "2013-09-07T00:04:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "use `join`\n\n```\nIn [3]: df = DataFrame(randn(10,2),columns=list('AB'))\n\nIn [4]: s = Series(randn(5),name='foo')\n\nIn [5]: df.join(s)\nOut[5]: \n          A         B       foo\n0 -1.544531 -1.000338 -0.155670\n1 -0.307918  0.070451 -1.074536\n2  0.704317 -1.254720 -1.201768\n3 -1.022448 -0.991398  1.531125\n4 -1.294532 -1.244509 -0.696183\n5 -1.578079  1.447263       NaN\n6 -0.820401  1.134300       NaN\n7 -0.690274  0.248999       NaN\n8 -1.209722 -0.242846       NaN\n9  0.599999 -0.300904       NaN\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23976964",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23976964",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23976964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc2OTY0",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-07T00:07:45Z",
    "updated_at": "2013-09-07T00:08:05Z",
    "author_association": "NONE",
    "body": "Join returns a copy (which I don't need) and therefore appears to be 4x slower than simply inserting a column with alignment. Unless of course the assign statement does not align on MultiIndex.\n\n``` python\nIn [16]: # Add Cluster ID column to orignal df, too bad this creates a copy...\n   ....: %timeit df.join(out)\n   ....: \n1 loops, best of 3: 217 ms per loop\n\nIn [17]: # Much faster but you have to specify column name :(\n   ....: %timeit df['cluster_id'] = out\n   ....: \n10 loops, best of 3: 48.3 ms per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23977245",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23977245",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23977245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc3MjQ1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-07T00:17:27Z",
    "updated_at": "2013-09-07T00:17:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "assignment does not copy (though it may do an internal copy), e.g. if you already have float data and add a float column then it will 'copy' it but its pretty cheap\n\njoin will for sure copy\n\ninplace operations are not generally a good thing; state can change when least expected so avoid if at all possible.\n\nwhy is it a problem to specify the column name? that seems a natural thing IMHO.\n\nand your timings on the assignment are not valid (they happen to be faster, but not that much faster).\n\nbecause only the first time is it a valid timeing, aftern that its a set, not an insert (which is where the copying happens). A set will just operwrite the data, but an insert can copy it.\n\nYou need to do the timings in a separate function, where you first copy the frame, then do an action on it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23977859",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-23977859",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 23977859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc3ODU5",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-07T00:35:10Z",
    "updated_at": "2013-09-07T00:35:10Z",
    "author_association": "NONE",
    "body": "Interesting. Good info Jeff. I guess I'm trying to avoid specifying the column name again because in my apply function I set the series name and want that to just propagate. I profiled it again with the functions you described and got similar results.\n\n``` python\n\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd\n\nIn [3]: from sklearn.cluster import DBSCAN as DBSCAN\n\nIn [4]: print pd.__version__\n0.12.0\n\nIn [5]: # Generate Test DataFrame\n   ...: NUM_ROWS = 100000\n   ...: \n\nIn [6]: NUM_COLS = 10\n\nIn [7]: col_names = ['A'+num for num in map(str,np.arange(NUM_COLS).tolist())]\n\nIn [8]: index_cols = col_names[:5]\n\nIn [9]: # Set DataFrame to have 5 level Hierarchical Index.\n   ...: # Sort the index!\n   ...: df = pd.DataFrame(np.random.randint(5, size=(NUM_ROWS,NUM_COLS)), dtype=np.int64, columns=col_names)\n   ...: \n\nIn [10]: df = df.set_index(index_cols).sort_index()\n\nIn [11]: df\n\nOut[11]: <class 'pandas.core.frame.DataFrame'>\nMultiIndex: 100000 entries, (0, 0, 0, 0, 0) to (4, 4, 4, 4, 4)\nData columns (total 5 columns):\nA5    100000  non-null values\nA6    100000  non-null values\nA7    100000  non-null values\nA8    100000  non-null values\nA9    100000  non-null values\ndtypes: int64(5)\n\nIn [12]: # Group by first 4 index columns.\n   ....: grp = df.groupby(level=index_cols[:4])\n   ....: \n\nIn [13]: # Find index of largest group.\n   ....: big_loc = grp.size().idxmax()\n   ....: \n\nIn [14]: # Create function to apply clustering on groups\n   ....: def grp_func(df):\n   ....:     \"\"\"Run clustering on subgroup and return series of results.\"\"\"\n   ....:     db = DBSCAN(eps=1, min_samples=1, metric='euclidean').fit(df.values)\n   ....:     return pd.Series(db.labels_, name='cluster_id')\n   ....: \n   ....: # Apply clustering on each subgroup of DataFrame\n   ....: \n\nIn [15]: %time out = grp.apply(grp_func)\nCPU times: user 34.27 s, sys: 0.00 s, total: 34.27 s\nWall time: 34.27 s\n\nIn [16]: # Add Cluster ID column to orignal df, too bad this creates a copy...\n   ....: %timeit df.join(out)\n   ....: \n1 loops, best of 3: 232 ms per loop\n\nIn [17]: # Much faster but you have to specify column name :(\n   ....: #%timeit df[out.name] = out\n   ....: \n   ....: # Here is another way to insert\n   ....: #%time df.insert(len(df.columns), out.name + '_2', out)\n   ....: \n   ....: def insert_col(df, ser):\n   ....:     df2 = df.copy()\n   ....:     ser2 = ser.copy()\n   ....:     df2[ser2.name] = ser2\n   ....:     return df2\n   ....:     \n   ....: \n\nIn [18]: def join_col(df, ser):\n   ....:     df2 = df.copy()\n   ....:     ser2 = ser.copy()\n   ....:     df2.join(ser2)\n   ....:     return df2\n   ....: \n\nIn [19]: %timeit dfa = insert_col(df, out)\n10 loops, best of 3: 53.5 ms per loop\n\nIn [20]: %timeit dfb = join_col(df, out)\n1 loops, best of 3: 223 ms per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314395729",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3777#issuecomment-314395729",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3777",
    "id": 314395729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDM5NTcyOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-11T09:58:31Z",
    "updated_at": "2017-07-11T09:58:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing as Panel deprecated"
  }
]
