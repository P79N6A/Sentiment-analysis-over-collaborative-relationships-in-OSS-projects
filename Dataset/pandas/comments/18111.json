[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/341922641",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18111#issuecomment-341922641",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18111",
    "id": 341922641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTkyMjY0MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-04T19:14:53Z",
    "updated_at": "2017-11-04T19:14:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "if you change https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/hashtable_class_helper.pxi.in#L840\r\nfrom ``_checknan`` to ``checknull`` (cimported from ``lib``) then this should work. ``_checknan`` is basically a fancy ``isnan``, while ``checknul`` is used everywhere and is dtype aware."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/341939613",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18111#issuecomment-341939613",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18111",
    "id": 341939613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTkzOTYxMw==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-05T00:16:08Z",
    "updated_at": "2017-11-05T00:16:08Z",
    "author_association": "MEMBER",
    "body": "I replaced `_checknan` with `checknull`, but the issue still exists.\r\n\r\nI found one issue in `_ensure_arraylike` in [`pandas/core/algorithms.py`](https://github.com/pandas-dev/pandas/blob/master/pandas/core/algorithms.py#L176) where numpy coerced the False to 0 like so:\r\n\r\n```\r\nIn [4]: np.asarray([0, False])\r\nOut[4]: array([0, 0])\r\n```\r\n\r\nIncluding `'mixed-integer'` in https://github.com/pandas-dev/pandas/blob/master/pandas/core/algorithms.py#L171 ensures that the array is object dtyped and False is not coerced.\r\n\r\nHowever that didn't sufficiently fix the issue. I don't entirely understand what's happening here https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/hashtable_class_helper.pxi.in#L841-L844 where the issue may be, but is it also problematic that False and 0 have the same hash?\r\n\r\n```\r\nIn [6]: hash(0) == hash(False)\r\nOut[6]: True\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412647443",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18111#issuecomment-412647443",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18111",
    "id": 412647443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjY0NzQ0Mw==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T20:11:24Z",
    "updated_at": "2018-08-13T20:11:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "The first issue can be side-stepped with an explicit cast to numpy-array:\r\n\r\n```\r\n>>> pd.unique(np.array([False, 0, 0.0], dtype=np.object))\r\narray([False], dtype=object)\r\n```\r\n\r\nI'm not sure the result is unexpected. `False == 0` and `False == 0.0` evaluates to True in python, and because the underlying hash-map uses the Python's [PyObject_RichCompareBool](https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/src/klib/khash_python.h#L44) we get the result we get.\r\n\r\nThe result is similar for \r\n\r\n```\r\n>>> pd.unique(np.array([True, 1, 1.0], dtype=np.object))\r\narray([True], dtype=object)\r\n```\r\n\r\nSo there are probably two alternatives:\r\n\r\n 1. Leave it as it is. If the user doesn't like the Python's equivalence of False and 0 (and True and 1), they should do preprocessing.\r\n 2.  Considering this case in pyobject_cmp(...), we already have a special handling for float-nans. It didn't hurt the performance. \r\n\r\nTo me, first option seems to be totally Ok."
  }
]
