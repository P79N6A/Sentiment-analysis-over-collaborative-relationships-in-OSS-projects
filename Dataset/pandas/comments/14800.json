[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/271569115",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14800#issuecomment-271569115",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14800",
    "id": 271569115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTU2OTExNQ==",
    "user": {
      "login": "m-charlton",
      "id": 7031487,
      "node_id": "MDQ6VXNlcjcwMzE0ODc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7031487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m-charlton",
      "html_url": "https://github.com/m-charlton",
      "followers_url": "https://api.github.com/users/m-charlton/followers",
      "following_url": "https://api.github.com/users/m-charlton/following{/other_user}",
      "gists_url": "https://api.github.com/users/m-charlton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m-charlton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m-charlton/subscriptions",
      "organizations_url": "https://api.github.com/users/m-charlton/orgs",
      "repos_url": "https://api.github.com/users/m-charlton/repos",
      "events_url": "https://api.github.com/users/m-charlton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m-charlton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T12:59:13Z",
    "updated_at": "2017-01-10T12:59:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can do this, just looking at the `_DeprecateModule` class and its use."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/271848939",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14800#issuecomment-271848939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14800",
    "id": 271848939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTg0ODkzOQ==",
    "user": {
      "login": "m-charlton",
      "id": 7031487,
      "node_id": "MDQ6VXNlcjcwMzE0ODc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7031487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m-charlton",
      "html_url": "https://github.com/m-charlton",
      "followers_url": "https://api.github.com/users/m-charlton/followers",
      "following_url": "https://api.github.com/users/m-charlton/following{/other_user}",
      "gists_url": "https://api.github.com/users/m-charlton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m-charlton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m-charlton/subscriptions",
      "organizations_url": "https://api.github.com/users/m-charlton/orgs",
      "repos_url": "https://api.github.com/users/m-charlton/repos",
      "events_url": "https://api.github.com/users/m-charlton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m-charlton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-11T11:47:39Z",
    "updated_at": "2017-01-11T11:47:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think using the existing `pandas.util.depr_module._DeprecatedModule`\r\nclass will work in this scenario.\r\n\r\n`_DeprecatedModule` is currently used to deprecate a complete module, `pandas.core.dateutils`, \r\nand in this respect it performs as expected.\r\n\r\nThis scenario involves selectively deprecating individual exceptions in one module\r\n`pandas.core.common` and redirecting calls of exceptions in `pandas.api.exceptions`\r\nto `pandas.core.common`.\r\n\r\nSo when I execute the following:\r\n\r\n```python\r\nfrom pandas.core.common import PandasError\r\n```\r\n\r\nI should get: \r\n\r\n```\r\nFutureWarning: pandas.core.common.PandasError is deprecated. Please use \r\n`pandas.api.exceptions.PandasError` instead. \r\n```\r\n\r\nIf I import `pandas.api.exceptions.PandasError` then I should *not* see any\r\nFutureWarning message. \r\n\r\nThis is how I'm using `_DeprecatedModule`, it could of course be incorrect: \r\n\r\n```python\r\n# module: pandas.api.exceptions\r\nfrom pandas.util.depr_module import _DeprecatedModule\r\n\r\nexceptions = _DeprecatedModule('pandas.core.common')\r\n\r\nPandasError = exceptions.PandasError\r\n\r\n```\r\n\r\nWhen I import `pandas.api.exceptions.PandasError` then I get the following:\r\n\r\n```\r\nFutureWarning: pandas.core.common.PandasError is deprecated. Please use pandas.core.common.PandasError instead.\r\n  PandasError = exceptions.PandasError\r\n```\r\n\r\nSeveral problems with the above:\r\n\r\n1. The warning message should not appear when I import `pandas.api.exceptions.PandasError` only when I import `pandas.core.common.PandasError`.\r\n2. The warning message should say `Please use pandas.api.exceptions.PandasError instead.` not `Please use pandas.core.common.PandasError instead.`\r\n\r\nThe only way I could I could see fixing (2) is by passing in the name of the module where the \r\nexceptions are being moved, in this case that would be `pandas.api.exceptions`.\r\n\r\nI'm trying to think of solution which satisfies the following criteria:\r\n\r\n1. Not break existing code which uses exceptions from `pandas.common.core`\r\n2. Issues a warning message when an attempt is made to import an exception from `pandas.common.core`\r\n3. Does not issue a warning message when importing an exception from `pandas.api.exceptions`\r\n4. Avoids any code duplication between `pandas.common.core` and `pandas.api.exceptions`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/271997975",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14800#issuecomment-271997975",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14800",
    "id": 271997975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTk5Nzk3NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-11T21:20:09Z",
    "updated_at": "2017-01-11T21:20:09Z",
    "author_association": "MEMBER",
    "body": "We had quite a long discussion in https://github.com/pandas-dev/pandas/pull/14479 about deprecating an Exception (and the conclusion was more or less that it is not possible), but not sure if it is fully similar situation, as there it was about renaming a warning, where here it is about moving it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272001407",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14800#issuecomment-272001407",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14800",
    "id": 272001407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjAwMTQwNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-11T21:32:48Z",
    "updated_at": "2017-01-11T21:32:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@m-charlton you might be able to easily do this by:\r\n\r\na) moving the exception definition to ``pandas.api.exceptions``\r\nb) in ``pandas.core.common`` put a similar wrapper to what we do for the function deprecations"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272438170",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14800#issuecomment-272438170",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14800",
    "id": 272438170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQzODE3MA==",
    "user": {
      "login": "m-charlton",
      "id": 7031487,
      "node_id": "MDQ6VXNlcjcwMzE0ODc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7031487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m-charlton",
      "html_url": "https://github.com/m-charlton",
      "followers_url": "https://api.github.com/users/m-charlton/followers",
      "following_url": "https://api.github.com/users/m-charlton/following{/other_user}",
      "gists_url": "https://api.github.com/users/m-charlton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m-charlton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m-charlton/subscriptions",
      "organizations_url": "https://api.github.com/users/m-charlton/orgs",
      "repos_url": "https://api.github.com/users/m-charlton/repos",
      "events_url": "https://api.github.com/users/m-charlton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m-charlton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T13:02:30Z",
    "updated_at": "2017-01-13T13:02:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Had a look at the way functions are deprecated in `pandas.core.common` and this\r\napproach will not work for classes, I suspect that the function already exists\r\nat import time and there is something to decorate. \r\n\r\nThe function deprecation warnings would appear every time an attempt to invoke \r\none of these functions was made, as expected.\r\n\r\nWhen deprecating an exception you'd want the deprecation warning to appear on\r\neach import, not each time the exception was raised. \r\n\r\nIf warnings were added at import time: \r\n\r\n```python\r\n# module: pandas.core.common \r\n\r\nclass PandasError(Exception):\r\n  warnings.warn('...', DeprecationWarning)\r\n  ...\r\n```  \r\n\r\nThen you'd see a warning anytime anything from the enclosing module were \r\nimported, which is not ideal.\r\n\r\nUsing the imported referenced exception in `pandas.api.exceptions`\r\n\r\n```python\r\n#module: pandas.api.exceptions\r\nimport pandas.core.common\r\n...\r\nPandasError = pandas.core.common.PandasError\r\n``` \r\n\r\nWill still result in a warning message being issued, if of course \r\nDeprecationWarning is enabled.\r\n\r\nI don't know if there is some decorator/metaclass *magic* which could be used.  \r\n\r\nShort of duplicating code in `pandas.api.exceptions`, which I think would create\r\nmore problems than it solves, I don't see an elegant solution to this problem.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272452810",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14800#issuecomment-272452810",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14800",
    "id": 272452810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQ1MjgxMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T14:18:04Z",
    "updated_at": "2017-01-13T14:18:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@m-charlton maybe was not clear here.\r\n\r\n I want to completely move all of the exceptions to ``pandas.api.exceptions``, THEN,\r\n\r\nwe want to have a warning message printed when someone does\r\n``from pandas.core.common import ParserError`` (or whatever).\r\n\r\nThis is the purpose of the ``_DeprecateModule``; it essentially puts a proxy behind the module to intercept getattr requests in the name space, which is exactly what we want. (the method I used to deprecate the functions like ``is_datetime64_dtype`` and such in ``pandas.core.common`` is 'easier' in that we can return a proxy function to provide the warning.\r\n\r\nTHEN\r\n\r\ninternaly in pandas we will always import from ``pandas.api.exceptions``. so no duplication of code and no warnings from our internal code, ONLY if someone externally imports it.\r\n\r\nThis is almost exactly what we did with ``pandas.core.datetools`` (which in addition to functions & names *inside* the module, we also deprecated the actual module itself)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272843081",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14800#issuecomment-272843081",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14800",
    "id": 272843081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Mjg0MzA4MQ==",
    "user": {
      "login": "m-charlton",
      "id": 7031487,
      "node_id": "MDQ6VXNlcjcwMzE0ODc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7031487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m-charlton",
      "html_url": "https://github.com/m-charlton",
      "followers_url": "https://api.github.com/users/m-charlton/followers",
      "following_url": "https://api.github.com/users/m-charlton/following{/other_user}",
      "gists_url": "https://api.github.com/users/m-charlton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m-charlton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m-charlton/subscriptions",
      "organizations_url": "https://api.github.com/users/m-charlton/orgs",
      "repos_url": "https://api.github.com/users/m-charlton/repos",
      "events_url": "https://api.github.com/users/m-charlton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m-charlton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-16T11:54:08Z",
    "updated_at": "2017-01-16T11:54:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "My bad, that makes more sense. Will start work now."
  }
]
