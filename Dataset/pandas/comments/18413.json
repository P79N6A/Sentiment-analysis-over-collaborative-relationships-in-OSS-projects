[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/347001261",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18413#issuecomment-347001261",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18413",
    "id": 347001261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzAwMTI2MQ==",
    "user": {
      "login": "ssche",
      "id": 7367411,
      "node_id": "MDQ6VXNlcjczNjc0MTE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7367411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssche",
      "html_url": "https://github.com/ssche",
      "followers_url": "https://api.github.com/users/ssche/followers",
      "following_url": "https://api.github.com/users/ssche/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssche/subscriptions",
      "organizations_url": "https://api.github.com/users/ssche/orgs",
      "repos_url": "https://api.github.com/users/ssche/repos",
      "events_url": "https://api.github.com/users/ssche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-26T11:19:58Z",
    "updated_at": "2017-11-26T11:19:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Has anyone had a chance to look at this? Can it be reproduced? If so, is there a workaround or some suggestions?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/347016895",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18413#issuecomment-347016895",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18413",
    "id": 347016895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzAxNjg5NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-26T15:37:53Z",
    "updated_at": "2017-11-26T15:37:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "looks like a bug. The issue is the categories are an empty array; when this is stored, pytables cannot write a zero-len array, so on readback the categories are ``None``. \r\n\r\n```\r\nIn [2]: pd.read_hdf('foo.h5', 'bar')\r\nOut[2]: \r\n     a    b\r\n0    a  NaN\r\n1    b  NaN\r\n2    c  NaN\r\n3  NaN  NaN\r\n\r\nIn [3]: pd.read_hdf('foo.h5', 'bar').dtypes\r\nOut[3]: \r\na    category\r\nb    category\r\ndtype: object\r\n```\r\n\r\npatch\r\n```\r\ndiff --git a/pandas/io/pytables.py b/pandas/io/pytables.py\r\nindex 2a66aea..2ae3765 100644\r\n--- a/pandas/io/pytables.py\r\n+++ b/pandas/io/pytables.py\r\n@@ -2137,10 +2137,13 @@ class DataCol(IndexCol):\r\n                 # if we have stored a NaN in the categories\r\n                 # then strip it; in theory we could have BOTH\r\n                 # -1s in the codes and nulls :<\r\n-                mask = isna(categories)\r\n-                if mask.any():\r\n-                    categories = categories[~mask]\r\n-                    codes[codes != -1] -= mask.astype(int).cumsum().values\r\n+                if categories is None:\r\n+                    categories = []\r\n+                else:\r\n+                    mask = isna(categories)\r\n+                    if mask.any():\r\n+                        categories = categories[~mask]\r\n+                        codes[codes != -1] -= mask.astype(int).cumsum().values\r\n \r\n                 self.data = Categorical.from_codes(codes,\r\n                                                    categories=categories,\r\n```\r\n\r\nif you can submit a PR would be great."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349180126",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18413#issuecomment-349180126",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18413",
    "id": 349180126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTE4MDEyNg==",
    "user": {
      "login": "ssche",
      "id": 7367411,
      "node_id": "MDQ6VXNlcjczNjc0MTE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7367411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssche",
      "html_url": "https://github.com/ssche",
      "followers_url": "https://api.github.com/users/ssche/followers",
      "following_url": "https://api.github.com/users/ssche/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssche/subscriptions",
      "organizations_url": "https://api.github.com/users/ssche/orgs",
      "repos_url": "https://api.github.com/users/ssche/repos",
      "events_url": "https://api.github.com/users/ssche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T03:01:17Z",
    "updated_at": "2017-12-05T04:14:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I tried, but am struggling with a new test case which is not passing. It seems to be related to being able to store NaN-only categorical columns now (only fails when including column 'b' in the test case [`test_categorical_nan_only_columns`](https://github.com/ssche/pandas/blob/gh18413/pandas/tests/io/test_pytables.py#L4930)). I can't see where the axes are different... Any help would be appreciated.\r\n\r\n```\r\n______________________________________________ TestHDFStore.test_categorical_nan_only_columns ______________________________________________\r\n\r\nself = <pandas.tests.io.test_pytables.TestHDFStore object at 0x7f844c87ff90>\r\n\r\n    def test_categorical_nan_only_columns(self):\r\n        # GH18413\r\n        # Check that read_hdf with categorical columns with NaN-only values can\r\n        # be read back.\r\n        df = pd.DataFrame({\r\n            'a': ['a', 'b', 'c', np.nan],\r\n            'b': [np.nan, np.nan, np.nan, np.nan],\r\n            'c': [1, 2, 3, 4]\r\n        })\r\n        df['a'] = df.a.astype('category')\r\n        df['b'] = df.b.astype('category')\r\n        expected = df.copy()\r\n        with ensure_clean_path(self.path) as path:\r\n            df.to_hdf(path, 'df', format='table', data_columns=True)\r\n            result = read_hdf(path, 'df')\r\n            print 'result', result.dtypes\r\n            print 'expected', expected.dtypes\r\n>           tm.assert_frame_equal(result, expected)\r\n\r\npandas/tests/io/test_pytables.py:4947: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\npandas/util/testing.py:1390: in assert_frame_equal\r\n    obj='DataFrame.iloc[:, {idx}]'.format(idx=i))\r\npandas/util/testing.py:1235: in assert_series_equal\r\n    assert_attr_equal('dtype', left, right)\r\npandas/util/testing.py:1001: in assert_attr_equal\r\n    raise_assert_detail(obj, msg, left_attr, right_attr)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nobj = 'Attributes', message = 'Attribute \"dtype\" are different', left = 'CategoricalDtype(categories=[], ordered=False)'\r\nright = 'CategoricalDtype(categories=[], ordered=False)', diff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n    \r\n        msg = \"\"\"{obj} are different\r\n    \r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n    \r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n    \r\n>       raise AssertionError(msg)\r\nE       AssertionError: Attributes are different\r\nE       \r\nE       Attribute \"dtype\" are different\r\nE       [left]:  CategoricalDtype(categories=[], ordered=False)\r\nE       [right]: CategoricalDtype(categories=[], ordered=False)\r\n\r\npandas/util/testing.py:1086: AssertionError\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349181311",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18413#issuecomment-349181311",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18413",
    "id": 349181311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTE4MTMxMQ==",
    "user": {
      "login": "ssche",
      "id": 7367411,
      "node_id": "MDQ6VXNlcjczNjc0MTE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7367411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssche",
      "html_url": "https://github.com/ssche",
      "followers_url": "https://api.github.com/users/ssche/followers",
      "following_url": "https://api.github.com/users/ssche/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssche/subscriptions",
      "organizations_url": "https://api.github.com/users/ssche/orgs",
      "repos_url": "https://api.github.com/users/ssche/repos",
      "events_url": "https://api.github.com/users/ssche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T03:09:12Z",
    "updated_at": "2017-12-05T03:09:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually, I found a difference (there may be more).\r\n```python\r\n    def test_categorical_nan_only_columns(self):\r\n        # GH18413\r\n        # Check that read_hdf with categorical columns with NaN-only values can\r\n        # be read back.\r\n        df = pd.DataFrame({\r\n            'a': ['a', 'b', 'c', np.nan],\r\n            'b': [np.nan, np.nan, np.nan, np.nan],\r\n            'c': [1, 2, 3, 4]\r\n        })\r\n        df['a'] = df.a.astype('category')\r\n        df['b'] = df.b.astype('category')\r\n        expected = df.copy()\r\n        with ensure_clean_path(self.path) as path:\r\n            df.to_hdf(path, 'df', format='table')\r\n            result = read_hdf(path, 'df', data_columns=True)\r\n            print 'result', result.b.dtype, type(result.b.dtype)\r\n            print 'expected', expected.b.dtype, type(expected.b.dtype)\r\n            print result.b.dtype == expected.b.dtype\r\n            print result.b.dtype.categories\r\n            print expected.b.dtype.categories\r\n            tm.assert_frame_equal(result, expected, check_dtype=False)\r\n```\r\nshows\r\n\r\n```\r\nresult category <class 'pandas.core.dtypes.dtypes.CategoricalDtype'>\r\nexpected category <class 'pandas.core.dtypes.dtypes.CategoricalDtype'>\r\nFalse\r\nIndex([], dtype='object')\r\nFloat64Index([], dtype='float64')\r\n```\r\nIs this expected behaviour? Does it also need to be addressed and if so some pointer of where to look would be helpful..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349280312",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18413#issuecomment-349280312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18413",
    "id": 349280312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTI4MDMxMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T11:43:50Z",
    "updated_at": "2017-12-05T11:43:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "in the patch use Index([]) rather than [] for the empty categories\r\nI think we just fixed this"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349490633",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18413#issuecomment-349490633",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18413",
    "id": 349490633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTQ5MDYzMw==",
    "user": {
      "login": "ssche",
      "id": 7367411,
      "node_id": "MDQ6VXNlcjczNjc0MTE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7367411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssche",
      "html_url": "https://github.com/ssche",
      "followers_url": "https://api.github.com/users/ssche/followers",
      "following_url": "https://api.github.com/users/ssche/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssche/subscriptions",
      "organizations_url": "https://api.github.com/users/ssche/orgs",
      "repos_url": "https://api.github.com/users/ssche/repos",
      "events_url": "https://api.github.com/users/ssche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T00:41:39Z",
    "updated_at": "2017-12-06T00:41:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I had to make it a `Index([], dtype=np.float64)` because that's the type that is read back from the hdf5 store."
  }
]
