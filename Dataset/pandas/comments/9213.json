[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69285508",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-69285508",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 69285508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5Mjg1NTA4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-09T02:38:17Z",
    "updated_at": "2015-01-09T02:38:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "you should simply use `.loc/.iloc` to be very explicity (and avoid `.ix` which does fallback indexing, which is even more confusing). `[]` tries to do the right things, but in edge and ambiguous cases it is not always possible.\n\nIf you would like to propose an addition to the docs that you think is more clear. all ears.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72076683",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-72076683",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 72076683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMDc2Njgz",
    "user": {
      "login": "ischwabacher",
      "id": 4306187,
      "node_id": "MDQ6VXNlcjQzMDYxODc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4306187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischwabacher",
      "html_url": "https://github.com/ischwabacher",
      "followers_url": "https://api.github.com/users/ischwabacher/followers",
      "following_url": "https://api.github.com/users/ischwabacher/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischwabacher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischwabacher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischwabacher/subscriptions",
      "organizations_url": "https://api.github.com/users/ischwabacher/orgs",
      "repos_url": "https://api.github.com/users/ischwabacher/repos",
      "events_url": "https://api.github.com/users/ischwabacher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischwabacher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-29T18:24:50Z",
    "updated_at": "2015-01-29T18:24:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's frustrating also that there's no concise way to index `df.ix[:-1,'a']` such that the operation succeeds when `df.index` is an `Int64Index`, especially when you want to write to this subobject, because the obvious solution `df.iloc[:-1].loc[:,'a']` is a chained index.\n\nThe only spelling I can think of for this is `df.iloc.loc[:-1,'a']`, which seems kind of wacky but might be doable.  At least you can assign to this without having to call `__getitem__`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72211720",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-72211720",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 72211720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMjExNzIw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-30T14:48:05Z",
    "updated_at": "2015-01-30T14:48:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ischwabacher \n\n```\nIn [9]: df = DataFrame(np.arange(10).reshape(5,2),columns=list('ab'))\n\nIn [10]: df\nOut[10]: \n   a  b\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n\nIn [11]: df.loc[df.index[:-1],'a'] *= 2\n\nIn [12]: df\nOut[12]: \n    a  b\n0   0  1\n1   4  3\n2   8  5\n3  12  7\n4   8  9\n```\n\nI think the indexing is already quite confusing. I supposed we could add a flag, something like\n\n`df.ix(strict=False)[:-1,'a']` to do this. Not that difficult and would have API compat.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72228118",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-72228118",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 72228118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMjI4MTE4",
    "user": {
      "login": "ischwabacher",
      "id": 4306187,
      "node_id": "MDQ6VXNlcjQzMDYxODc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4306187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischwabacher",
      "html_url": "https://github.com/ischwabacher",
      "followers_url": "https://api.github.com/users/ischwabacher/followers",
      "following_url": "https://api.github.com/users/ischwabacher/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischwabacher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischwabacher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischwabacher/subscriptions",
      "organizations_url": "https://api.github.com/users/ischwabacher/orgs",
      "repos_url": "https://api.github.com/users/ischwabacher/repos",
      "events_url": "https://api.github.com/users/ischwabacher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischwabacher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-30T16:30:07Z",
    "updated_at": "2015-01-30T16:30:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess that works, even though it feels inefficient (said the premature optimizer!).  But for the `strict=False` idea, what does this do:\n\n```\nIn [1]: import pandas as pd\n\nIn [2]: df = pd.DataFrame(index=[0, 3, 1, 2], columns=['a', 'b'])\n\nIn [3]: df\nOut[3]: \n     a    b\n0  NaN  NaN\n3  NaN  NaN\n1  NaN  NaN\n2  NaN  NaN\n\nIn [4]: df.ix(strict=False)[:2,'a']\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/76308857",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-76308857",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 76308857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzA4ODU3",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-27T00:40:20Z",
    "updated_at": "2015-02-27T00:49:43Z",
    "author_association": "NONE",
    "body": "@dandavison  \n\nLooking at this more carefully, it seems you've indeed stumbled on the ambiguity that occurs when your indicies are numeric types.  When you do `s[0]` there is no label equal to 0, so pandas looks up by index.  When you do `s[1]`, because 1 is actually being used to label your `Series`, it looks up by value.  When I spoke to you, I didn't realize this is the same issue I encountered early on when working with spectral data in pandas.  Soon thereafter, Jeff introduced `.loc` and `.iloc` and a nice guide to indexing and selecting data in pandas (http://pandas.pydata.org/pandas-docs/dev/indexing.html).   To avoid this problem, you might consider using labels instead of integers.  However, if you continue to use numeric labels, then as Jeff said, always use `.iloc` and `.loc` for index and label slicing, respectively.\n\n@jreback  @shoyer  `.iloc` and `.loc` have been around long enough that most of the userbase is probably comfortable with them.  Would it be too aggressive to say that item slicing (`__getitem__`) is deprecated?   Would it be possible to at least raise a warning or even an error that forbids users to call `__getitem__` on objects with numeric labels?  Would you consider this a corner case for the most part?  All my data is numerically labeled, so I'm biased.\n\nWhen new users learn pandas, they are instinctively going to slice with `[ ]`, and since this usually outputs the desired result, they're not going to anticipate this cornercase, even if they've heard of `.loc` and `.iloc`.  When I teach undergrads pandas slicing, I hammer this point to them now because it is such a pitfall.  \n\nIn regard to the less extreme suggestion of changing the docs, I think the most simple change would be to introduce `.iloc` and `.loc` earlier in the docs.  Their current order is categorically well-designed, but human beings are predisposed to pay more attention to what comes first.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/76359323",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-76359323",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 76359323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzU5MzIz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-27T09:05:21Z",
    "updated_at": "2015-02-27T09:05:21Z",
    "author_association": "MEMBER",
    "body": "I only use `__getitem__` for two use-cases that I know are safe:\n1. Getting columns by label from a frame, by supplying either a single column name or a list of column names.\n2. Indexing with a boolean array of the same length as the frame/series.\n\nI agree, the current indexing semantics are a land-mine. Now that I think about it, I'm not even sure (1) is safe if my column labels are integers, though I guess I usually use strings.\n\nIt would definitely be a good idea to mention `.loc` and `.iloc` as preferred options in the docs -- if you have concrete suggestions, please make a PR for that.\n\nWe might also consider making a thorough list of what `__getitem__` behavior could be deprecated. Though honestly, it's hard to see how that could be done smoothly without breaking lots of code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/76359905",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-76359905",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 76359905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzU5OTA1",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-27T09:10:18Z",
    "updated_at": "2015-02-27T09:10:18Z",
    "author_association": "MEMBER",
    "body": "In any case, good `__getitem__` documentation with a clear description of what it does in all cases is missing (docs are quite thorough on ix/loc/iloc etc, but not on []). I was starting with this in #9316, but have still to add `__getitem__`. I was yesterday also making an overview of all possible cases, will make a new issue about this. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/76360119",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-76360119",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 76360119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzYwMTE5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-27T09:12:04Z",
    "updated_at": "2015-02-27T09:12:04Z",
    "author_association": "MEMBER",
    "body": "Your case (1) is in any case safe I think, as this is always label based (so when having an integer column axis, it also works on the labels, not integer location)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/76445164",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-76445164",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 76445164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NDQ1MTY0",
    "user": {
      "login": "dandavison",
      "id": 52205,
      "node_id": "MDQ6VXNlcjUyMjA1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/52205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dandavison",
      "html_url": "https://github.com/dandavison",
      "followers_url": "https://api.github.com/users/dandavison/followers",
      "following_url": "https://api.github.com/users/dandavison/following{/other_user}",
      "gists_url": "https://api.github.com/users/dandavison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dandavison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dandavison/subscriptions",
      "organizations_url": "https://api.github.com/users/dandavison/orgs",
      "repos_url": "https://api.github.com/users/dandavison/repos",
      "events_url": "https://api.github.com/users/dandavison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dandavison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-27T18:24:23Z",
    "updated_at": "2015-02-27T18:25:55Z",
    "author_association": "NONE",
    "body": "> Would it be too aggressive to say that item slicing (__getitem__) is deprecated?\n> \n> We might also consider making a thorough list of what __getitem__ behavior could be deprecated. Though honestly, it's hard to see how that could be done smoothly without breaking lots of code.\n\nPython developers new to pandas are always going to use `[` unless it raises an exception. If pandas is going to become a widely-used python library in production code then I think that it's essential that `[` at least has the same semantics for all inputs. In general I really appreciate pandas, but I don't feel comfortable recommending it for use in my organization with the current behavior.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/76451507",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9213#issuecomment-76451507",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9213",
    "id": 76451507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NDUxNTA3",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-27T19:01:29Z",
    "updated_at": "2015-02-27T19:01:29Z",
    "author_association": "NONE",
    "body": "To bikeshed further, if one had to choose between index or value slicing, what do you guys think the `[]` should return?  While I believe value slicing is more useful, index lookup is the default for most applications, especially `numpy`.  It might be easy to just stick with the mantra `[ ] is identical to numpy`.  That would be easy for most users to digest, and then one could just refer to the `numpy` docs.  Of course this would break much backwards compat. and require serious refactoring, so it's obviously easier said than done.\n\n@dandavison  While I don't speak for the pandas development team, I can say from experience that this particular behavior is not indicative of my overall personal experiences with `pandas`, and the library does have a lot to offer.  Hopefully your team will keep a foot in the door so-to-speak.  As someone with moderate experience working with `numpy, IPython and matplotlib`, workflows with `pandas` usually feel more natural than those without.  Of course I don't have the constraint of writing production quality workflows :)\n"
  }
]
