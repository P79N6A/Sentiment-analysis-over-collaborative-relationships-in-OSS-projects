[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3721087",
    "html_url": "https://github.com/pandas-dev/pandas/pull/715#issuecomment-3721087",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/715",
    "id": 3721087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjEwODc=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-30T15:17:44Z",
    "updated_at": "2012-01-30T15:17:44Z",
    "author_association": "MEMBER",
    "body": "you're going to want to reorder those comparisons because `a == b` needs to short circuit first (if you explore the performance a bit you will see why). also fairly certain that's going to hurt performance everywhere, will need to do some explorations\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3721115",
    "html_url": "https://github.com/pandas-dev/pandas/pull/715#issuecomment-3721115",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/715",
    "id": 3721115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjExMTU=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-30T15:19:18Z",
    "updated_at": "2012-01-30T15:19:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's why I didn't commit master :) yeah, should definitely look at perf implications\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3725757",
    "html_url": "https://github.com/pandas-dev/pandas/pull/715#issuecomment-3725757",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/715",
    "id": 3725757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjU3NTc=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-30T19:23:50Z",
    "updated_at": "2012-01-30T19:27:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Benchmarks w/o change:\n\n   #define kh_python_hash_equal(a, b) ((a == b) || PyObject_RichCompareBool(a, b, Py_EQ))\n\n   khash, preallocate  khash  \n   100    0.001453            0.002522\n   1000   0.001632            0.002654\n   5000   0.001664            0.003382\n   10000  0.001709            0.003914\n   25000  0.002176            0.005938\n   50000  0.004211            0.009230\n\nAfter change:\n\n#define kh_python_hash_equal(a, b) ((a == b) || PyObject_RichCompareBool(a, b, Py_EQ) || (PyObject_Hash(a) == PyObject_Hash(b)))\n\n   khash, preallocate  khash  \n   100    0.001533            0.002443  \n   1000   0.001596            0.002734  \n   5000   0.001713            0.003516  \n   10000  0.002130            0.004592  \n   25000  0.002327            0.006968  \n   50000  0.004822            0.009667 \n\nDifference:\n\nIn [12]: df2/df1-1\nOut[12]: \n   khash,  preallocate  khash  \n0  0       0.05506     -0.03132\n1  0      -0.02206      0.03014\n2  0       0.02945      0.03962\n3  0       0.24634      0.17322\n4  0       0.06939      0.17346\n5  0       0.14510      0.04735\n\nThis latter actually breaks one random test, still have to figure out what's going on.\n\n```\n======================================================================\nERROR: test_crosstab_margins (pandas.tools.tests.test_pivot.TestCrosstab)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/adam/code/pandas/pandas/tools/tests/test_pivot.py\", line 213, in test_crosstab_margins\n    margins=True)\n  File \"/home/adam/code/pandas/pandas/tools/pivot.py\", line 258, in crosstab\n    aggfunc=len, margins=margins)\n  File \"/home/adam/code/pandas/pandas/tools/pivot.py\", line 100, in pivot_table\n    cols=cols, aggfunc=aggfunc)\n  File \"/home/adam/code/pandas/pandas/tools/pivot.py\", line 171, in _add_margins\n    row_margin[k] = grand_margin[k[0]]\n  File \"/home/adam/code/pandas/pandas/core/series.py\", line 381, in __setitem__\n    raise KeyError('%s not in this series!' % str(key))\nKeyError: \"('__dummy__', 'All', '') not in this series!\"\n\n----------------------------------------------------------------------\nRan 1378 tests in 25.483s\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3725820",
    "html_url": "https://github.com/pandas-dev/pandas/pull/715#issuecomment-3725820",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/715",
    "id": 3725820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjU4MjA=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-30T19:27:28Z",
    "updated_at": "2012-01-30T19:27:28Z",
    "author_association": "MEMBER",
    "body": "Hm. it's not terrible. i need to think a bit-- I'm not sure that making `PyObjectHashTable` NaN-friendly is the right solution (especially if it requires calling `PyObject_Hash` twice with every lookup as in this case). MIght be worth adding an NA check inside the unique function (`if val == val`)-- part of me thinks that `Series.unique` should simply ignore NA values (or maybe have a `skipna` option)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3725895",
    "html_url": "https://github.com/pandas-dev/pandas/pull/715#issuecomment-3725895",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/715",
    "id": 3725895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjU4OTU=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-30T19:31:08Z",
    "updated_at": "2012-01-30T19:31:08Z",
    "author_association": "MEMBER",
    "body": "For reference R's `unique` does include NAs in the output so I guess excluding altogether is out. Maybe tracking whether or not NA has been seen in a bint or something. hmm\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3729613",
    "html_url": "https://github.com/pandas-dev/pandas/pull/715#issuecomment-3729613",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/715",
    "id": 3729613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mjk2MTM=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-30T22:49:04Z",
    "updated_at": "2012-01-30T22:49:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I tried \n\n```\n    for i in range(n):\n        val = values[i]\n        if val != val:\n            if not seen_na:\n                uniques.append(val)\n                seen_na = 1\n        else:\n            k = kh_get_pymap(self.table, <PyObject*>val)\n            if k == self.table.n_buckets:\n                k = kh_put_pymap(self.table, <PyObject*>val, &ret)\n                uniques.append(val)\n```\n\nLooks like:\n\n```\nIn [3]: old\nOut[3]: \n   khash,  preallocate  khash   \n0  100     0.001466     0.001812\n1  1000    0.001569     0.002154\n2  5000    0.001637     0.002761\n3  10000   0.001692     0.003246\n4  25000   0.002096     0.005000\n5  50000   0.004288     0.008018\n\nIn [4]: new\nOut[4]: \n   khash,  preallocate  khash   \n0  100     0.002091     0.002336\n1  1000    0.002269     0.002703\n2  5000    0.002314     0.003464\n3  10000   0.002403     0.003969\n4  25000   0.002861     0.005787\n5  50000   0.005137     0.008969\n\nIn [5]: new/old-1\nOut[5]: \n   khash,  preallocate  khash \n0  0       0.4263       0.2892\n1  0       0.4461       0.2549\n2  0       0.4136       0.2546\n3  0       0.4202       0.2227\n4  0       0.3650       0.1574\n5  0       0.1980       0.1186\n```\n"
  }
]
