[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309645098",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309645098",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309645098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTY0NTA5OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T04:59:32Z",
    "updated_at": "2017-06-20T04:59:39Z",
    "author_association": "MEMBER",
    "body": "Apparently, >200 (!) of our tests didn't take heed of the warning to pass in `inplace=True`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309646509",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309646509",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309646509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTY0NjUwOQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T05:11:28Z",
    "updated_at": "2017-06-20T05:13:17Z",
    "author_association": "MEMBER",
    "body": "Also, I must say that the docstring for `inplace` is not very intuitive IMO.  I would have expected that `inplace=False` would return the result of the computation and not the other way around.\r\n\r\n@jreback @jorisvandenbossche : Thoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309667508",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309667508",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309667508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTY2NzUwOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T07:23:12Z",
    "updated_at": "2017-06-20T07:23:50Z",
    "author_association": "MEMBER",
    "body": "Whoops, sorry, all my comments were in light of me thinking it was about `DataFrame.eval` method, not top-level `pandas.eval`. \r\n\r\nAnyhow, the frame method also has to be updated, and there the comments will be sensible :-) (edit: but actually the docstring there is already much clearer!)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309672578",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309672578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309672578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTY3MjU3OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T07:47:33Z",
    "updated_at": "2017-06-20T07:59:10Z",
    "author_association": "MEMBER",
    "body": "@jorisvandenbossche : Actually ignore my previous comment.  That doesn't make much sense to me at all still.  The documentation says \"whether to return a new DataFrame or mutate the existing.\"  Which condition means return a new `DataFrame`?\r\n\r\nIf you say it's `inplace=False`, then why are we returning `target` in `pd.eval` (and not `ret`)?  Also, why are we returning anything when `inplace=True` in `pd.eval`?\r\n\r\nIMO, it should be that `ret` is returned when `inplace=False`, and nothing is returned when `inplace=True` because `target` should be modified.  In fact, I might go as far as to say that `inplace=True` only when `target` is not a primitive (and raise otherwise).  Otherwise, not really sure what this means here:\r\n\r\n~~~python\r\n>>> import pandas as pd\r\n>>> c = pd.eval('1 + 2', inplace=True)\r\n>>> c\r\n3\r\n>>> c = pd.eval('1 + 2', inplace=False)\r\n>>> c\r\n>>>\r\n~~~"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309678667",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309678667",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309678667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTY3ODY2Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T08:14:10Z",
    "updated_at": "2017-06-20T08:14:10Z",
    "author_association": "MEMBER",
    "body": "cc @chris-b1 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309751220",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309751220",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309751220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTc1MTIyMA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T13:21:43Z",
    "updated_at": "2017-06-20T13:22:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "My thought is that `inplace` should only be part of the api for `DataFrame.eval` - there it works as expected, and consistent with other uses of `inplace`.  For `pd.eval` it is simply an implementation detail (since `DataFrame.eval` calls it) - I should not have added it to the docstring.\r\n\r\nIn fact, `pd.eval` should probably raise if `inplace` is passed in (so keep the default = None) without a `target`.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309797813",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309797813",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309797813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTc5NzgxMw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T15:34:22Z",
    "updated_at": "2017-06-20T15:34:22Z",
    "author_association": "MEMBER",
    "body": "@chris-b1 : I think we are mostly aligned in our thought process, and I think (if nobody objects) that we should address the issue now in this PR instead of waiting.\r\n\r\nI don't think adding `inplace` to the doc-string was a bad idea.  It's just that I don't understand why it behaves so counter-intuitively to what I would think `inplace` does in `pd.eval`.  Why is it that `target` is returned when `inplace=False`?  It should be the other way around.\r\n\r\nI agree that we should only allow `inplace=True` when `target` is not a primitive.  Furthermore, we should be returning anything when `inplace=True` because we assume that `target` itself has been modified.\r\n\r\nWhat do you think?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309807969",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309807969",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309807969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTgwNzk2OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T16:07:00Z",
    "updated_at": "2017-06-20T16:07:00Z",
    "author_association": "MEMBER",
    "body": "The question we should ask: what is the usecase of `inplace`? (is there actually a usecase?) \r\nI don't see one, so I agree with @chris-b1 we better remove it from the docstring / document it as no effect.\r\n\r\nPossible usecases:\r\n\r\n* expression without assignment:\r\n  * this should always return something, as there is no object to return to (passing a target also, logically, does not do anything with the target). So `inplace` makes no sense in this case.\r\n  * The reason that `inplace=False` actually suppresses the return value is just a bug in the current implementation. The code does:\r\n\r\n    ```\r\n    if not inplace and inplace is not None:\r\n        return target\r\n\r\n    return ret\r\n    ```\r\n\r\n    which fails for inplace=False without a target.\r\n\r\n* expression with assignment:\r\n  * for this case, you are obliged to pass a `target`, so why would you not want to modify this target?\r\n  * That's my first thought, but OK, here might indeed be a possible usecase: eg you want to add a column to an existing dataframe, but still want to take a copy of it first, and then return the modified result instead of modifying inplace. Similar as we do with eg `assign`\r\n\r\nSo actions I would take:\r\n\r\n- Fix the bug with inplace in case of no assignment. And I would even additionally raise an error if `inplace` is specified in such a case\r\n- Update the docstring to make it clear that `inplace` is only relevant for the case where a `target` is passed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309828462",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309828462",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309828462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTgyODQ2Mg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T17:21:45Z",
    "updated_at": "2017-06-20T17:22:38Z",
    "author_association": "MEMBER",
    "body": "@jorisvandenbossche : Well that touches upon #16529, but in any case, it can be used when `target` is a `DataFrame` object, so I wouldn't say that it has no use case at this point.\r\n\r\nI agree that we should update the docstring to say that `inplace` has no meaning when `target` isn't a non-primitive object (passing in `target=1` also makes no sense).\r\n\r\nAlso, the fix for that bug *should be* the following:\r\n~~~python\r\n<if target is None or is some primitive>:\r\n   inplace = False\r\n...\r\nif not inplace:\r\n   return ret\r\n~~~\r\n\r\nThere should be no condition for returning anything if `inplace=True` because we assume that `target` itself is modified inplace.\r\n\r\nHow does that sound?  @chris-b1 thoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309924234",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309924234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309924234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTkyNDIzNA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T23:57:09Z",
    "updated_at": "2017-06-20T23:57:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would suggest\r\n\r\n - `DataFrame.eval`, change `inplace` default to `False`\r\n - `pd.eval`\r\n\r\n    - keep default for `inplace` as `None`\r\n    - if `inplace` kw is passed with no target, raise\r\n    \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309927708",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309927708",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309927708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTkyNzcwOA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-21T00:21:59Z",
    "updated_at": "2017-06-21T00:21:59Z",
    "author_association": "MEMBER",
    "body": "@chris-b1 : I agree with `inplace=False`, but I don't agree with your suggestion about `inplace=None`.  The only time I would consider raising is when `inplace=True` (`inplace=False` shouldn't care about `target`) and `target` is something that you can't modify in-place.  Also, I think we should default `inplace=False` to `pd.eval`, as that is consistent with what we have for other `inplace` defaults."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309978871",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-309978871",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 309978871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTk3ODg3MQ==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2017-06-21T06:43:07Z",
    "updated_at": "2017-07-06T16:07:41Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=h1) Report\n> Merging [#16732](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/329fdaae294ae3dc45d4d7301f0f1eec2d26cb4b?src=pr&el=desc) will **increase** coverage by `0.02%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/16732/graphs/tree.svg?width=650&src=pr&token=eZ4WkYLtcO&height=150)](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #16732      +/-   ##\n==========================================\n+ Coverage   90.94%   90.97%   +0.02%     \n==========================================\n  Files         161      161              \n  Lines       49272    49283      +11     \n==========================================\n+ Hits        44811    44834      +23     \n+ Misses       4461     4449      -12\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `88.74% <100%> (+0.02%)` | :arrow_up: |\n| #single | `40.16% <5%> (-0.01%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/computation/eval.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvY29tcHV0YXRpb24vZXZhbC5weQ==) | `96.93% <100%> (+2.37%)` | :arrow_up: |\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `97.71% <100%> (+0.04%)` | :arrow_up: |\n| [pandas/io/common.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2lvL2NvbW1vbi5weQ==) | `67.79% <0%> (-2.12%)` | :arrow_down: |\n| [pandas/core/indexes/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9iYXNlLnB5) | `95.8% <0%> (-0.01%)` | :arrow_down: |\n| [pandas/core/window.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvd2luZG93LnB5) | `96.49% <0%> (ø)` | :arrow_up: |\n| [pandas/core/groupby.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZ3JvdXBieS5weQ==) | `92.07% <0%> (ø)` | :arrow_up: |\n| [pandas/core/indexes/multi.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9tdWx0aS5weQ==) | `96.65% <0%> (ø)` | :arrow_up: |\n| [pandas/core/dtypes/common.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZHR5cGVzL2NvbW1vbi5weQ==) | `94.79% <0%> (+0.04%)` | :arrow_up: |\n| [pandas/core/indexes/timedeltas.py](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy90aW1lZGVsdGFzLnB5) | `90.58% <0%> (+0.19%)` | :arrow_up: |\n| ... and [2 more](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=footer). Last update [329fdaa...c6f5bcd](https://codecov.io/gh/pandas-dev/pandas/pull/16732?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310214686",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310214686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310214686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDIxNDY4Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-21T21:47:17Z",
    "updated_at": "2017-06-21T21:47:17Z",
    "author_association": "MEMBER",
    "body": "@jreback @jorisvandenbossche : Could you run the failing build on Travis?  It doesn't seem related to my changes at all whatsoever."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310310009",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310310009",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310310009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDMxMDAwOQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T08:17:51Z",
    "updated_at": "2017-06-22T08:17:51Z",
    "author_association": "MEMBER",
    "body": "Thanks to whoever reran the build!  Everything is green now and ready for review."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310400422",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310400422",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310400422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQwMDQyMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T14:39:37Z",
    "updated_at": "2017-06-22T14:39:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't really recall why there is a ``target`` object for assignment here at all. maybe @cpcloud remembers.\r\n\r\nThis seems odd to have ``target`` AND ``inplace``. Since inplace is our standard, would deprecate ``target``, default ``inplace=False``"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310401433",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310401433",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310401433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQwMTQzMw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T14:42:51Z",
    "updated_at": "2017-06-22T14:42:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "`target` is on `pd.eval` because `DataFrame.eval` calls it internally, and it is used to set the scope to calling df."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310405311",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310405311",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310405311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQwNTMxMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T14:56:00Z",
    "updated_at": "2017-06-22T14:56:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> target is on pd.eval because DataFrame.eval calls it internally, and it is used to set the scope to calling df.\r\n\r\nso then either pass a private arg ``_target``, then this is no problem. or do a wrapper method that ``DataFrame.eval`` calls (that handles the ``target`` stuff) rather than the public ``eval`` (maybe a bit more work, but prob 'cleaner')"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310406328",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310406328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310406328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQwNjMyOA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T14:59:22Z",
    "updated_at": "2017-06-22T15:01:56Z",
    "author_association": "MEMBER",
    "body": "> so then either pass a private arg _target, then this is no problem. or do a wrapper method that DataFrame.eval calls\r\n\r\nUmmm, `target` is pretty ingrained in the code.  I think the \"cleanest\" is to enforce `target` being a `DataFrame` (similar to what we do with `pd.merge` for example) and change the signature as follows:\r\n\r\n~~~python\r\ndef eval(target, parser=...):\r\n~~~\r\n\r\nHowever, you MUST then have item assignment if this is the case for it to make any sense.  I don't know how many people use `pd.eval` (and what the use-case is beyond `DataFrame`)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310407708",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310407708",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310407708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQwNzcwOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T15:03:41Z",
    "updated_at": "2017-06-22T15:03:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gfyoung not sure what you mean the ``target`` argument itself is almost the last kwarg."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310408474",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310408474",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310408474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQwODQ3NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T15:06:20Z",
    "updated_at": "2017-06-22T15:06:20Z",
    "author_association": "MEMBER",
    "body": "@jreback : I'm saying that we should change the signature to place the `target` as the first-class citizen in this function by putting it at the start of the signature just like we do in `pd.merge` for example.  That would help to clear up a lot of confusion regarding the specifications surrounding `pd.eval`.\r\n\r\nIn addition, we should require that `target` is a `DataFrame` (just like we do in `pd.merge`) as well as enforce that each line of the expressions have item assignment for this to make any sense (though I don't know how much `pd.eval` is used beyond this context of `DataFrame` item assignment)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310414595",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310414595",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310414595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQxNDU5NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T15:26:53Z",
    "updated_at": "2017-06-22T15:26:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @jreback : I'm saying that we should change the signature to place the target as the first-class citizen in this function by putting it at the start of the signature just like we do in pd.merge for example. That would help to clear up a lot of confusion regarding the specifications surrounding pd.eval.\r\n\r\nseems rather extreme change for limited upside. \r\n\r\n> In addition, we should require that target is a DataFrame (just like we do in pd.merge) as well as enforce that each line of the expressions have item assignment for this to make any sense (though I don't know how much pd.eval is used beyond this context of DataFrame item assignment).\r\n\r\nyes"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310421218",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310421218",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310421218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQyMTIxOA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T15:48:23Z",
    "updated_at": "2017-06-22T15:48:31Z",
    "author_association": "MEMBER",
    "body": "> seems rather extreme change for limited upside.\r\n\r\nReally?  It's literally just moving the position of the parameter to indicate importance:\r\n\r\n~~~python\r\ndef eval(target, expr,...)\r\n~~~"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310428377",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310428377",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310428377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQyODM3Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T16:13:03Z",
    "updated_at": "2017-06-22T16:13:03Z",
    "author_association": "MEMBER",
    "body": "> Really?\r\n\r\nThat breaks all user code that uses `eval`, so indeed rather invasive?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310428702",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310428702",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310428702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQyODcwMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T16:14:11Z",
    "updated_at": "2017-06-22T16:14:11Z",
    "author_association": "MEMBER",
    "body": "I don't think we need to change anything about `target`. It's probably not something a lot of people use or find useful, but it is there for internal use and for the power user, so just lets leave it there. \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310430758",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310430758",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310430758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQzMDc1OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T16:21:54Z",
    "updated_at": "2017-06-22T16:21:54Z",
    "author_association": "MEMBER",
    "body": "> That breaks all user code that uses eval, so indeed rather invasive?\r\n\r\nRight, but as this is for a major version release, an API change like this isn't too drastic, is it?\r\n\r\n> It's probably not something a lot of people use or find useful, but it is there for internal use and for the power user, so just lets leave it there.\r\n\r\nThat's fair.  As the implementation stands, I don't mind leaving it there.  However, I do think we will want to consider restricting it to just `DataFrame`, in which it should move up in the signature."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310432132",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310432132",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310432132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQzMjEzMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T16:26:49Z",
    "updated_at": "2017-06-22T16:26:49Z",
    "author_association": "MEMBER",
    "body": "> Right, but as this is for a major version release, an API change like this isn't too drastic, is it?\r\n\r\nWell, even for a major release we don't just want to break something, it has to have a good reason. And I don't think there is a good reason here. And more importantly, it is even an optional argument, so IMO that makes no sense to put it first.\r\n\r\n>  However, I do think we will want to consider restricting it to just DataFrame, in which it should move up in the signature.\r\n\r\nWhy is moving needed? I don't see any relation with restricting what you can pass to `target` and the need to move `target` in the signature"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310432220",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310432220",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310432220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQzMjIyMA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T16:27:07Z",
    "updated_at": "2017-06-22T16:27:07Z",
    "author_association": "MEMBER",
    "body": "So judging from the conversation, it seems like any drastic changes to `pd.eval` in terms of aligning it with other top-level functions `pd.merge` are probably not going to happen.\r\n\r\nHowever, I'm okay with leaving the implementation as is (and not verify `target`)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310432678",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310432678",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310432678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQzMjY3OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T16:28:49Z",
    "updated_at": "2017-06-22T16:29:14Z",
    "author_association": "MEMBER",
    "body": "@jorisvandenbossche (in response to your comment) : I was proposing that we could drastically modify `pd.eval` to operate just on `DataFrame` (so require `target`), which is why we would move it up on the signature.  This is to align the behavior and signature with other top-level functions like `pd.merge`, which operate solely on `DataFrame`.\r\n\r\nHowever, I'm okay with leaving this discussion for a subsequent PR (if necessary)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310433572",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310433572",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310433572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQzMzU3Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T16:31:54Z",
    "updated_at": "2017-06-22T16:31:54Z",
    "author_association": "MEMBER",
    "body": "I just don't see any argument for such a drastic change.\r\n\r\n> I was proposing that we could drastically modify pd.eval to operate just on DataFrame (so require target), \r\n\r\nAh, OK, then it makes some sense. But, for that you can already use `DataFrame.eval`. Further, that defeats the purpose of `eval` to just execute the expression without a dataframe as the context (it can be used for that, so probably people do it). \r\nIt is true that now the equivalence between `pd.eval` and `DataFrame.eval` is not as consistent as eg with `merge` (pd.merge(df, ..) is indeed just df.merge(..)), but I don't think it is worth it for `eval` to change this.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310434556",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16732#issuecomment-310434556",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16732",
    "id": 310434556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQzNDU1Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T16:35:44Z",
    "updated_at": "2017-06-22T16:35:44Z",
    "author_association": "MEMBER",
    "body": "@jorisvandenbossche : Fair enough.  I think this PR does enough as it is, hence why I'm fine with leaving this discussion for another time."
  }
]
