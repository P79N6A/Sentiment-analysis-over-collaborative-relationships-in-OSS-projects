[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367998396",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-367998396",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 367998396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk5ODM5Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T12:38:33Z",
    "updated_at": "2018-02-23T12:38:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> wouldn't it be better to use that as the main one (e.g. make them EA aware)?\r\n\r\nI thought about doing that for the test cases we've written. Decimal('NaN') is the problem I've hit since we don't compare NaNs \"correctly\". But I don't think it'd be worthwhile putting in fixes for those specific ones since,\r\n\r\n1.) It's only solving the problem for our specific functions. 3rd party libraries writing EAs would have no way to fix it.\r\n2.) It's complicating our assert_*_equal methods for very little gain.\r\n\r\n> (otherwise easy to accidently NOT use self.assert_*\r\n\r\nYes, this is going to be a problem going forward. I'm not sure how best to avoid it, but avoiding a `tm` import is a good start."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367998555",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-367998555",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 367998555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk5ODU1NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T12:39:29Z",
    "updated_at": "2018-02-23T12:41:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I could also add a linting rule that looks for `tm.assert*` in these submodules. Thoughts?\r\n\r\nEdit: ahh that may be hard since in a followup I define `assert_*_equal` for DecimalArray, but it uses `tm.assert_*_` internally."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367998591",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-367998591",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 367998591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk5ODU5MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T12:39:42Z",
    "updated_at": "2018-02-23T12:39:42Z",
    "author_association": "MEMBER",
    "body": "> why are we advertising this kind of api for testing? when we always use tm.assert_*? this is too easy to get wrong. wouldn't it be better to use that as the main one (e.g. make them EA aware)?\r\n\r\nIt's only for testing extension arrays (so for developers), not public API for users. \r\nThe problem is that we cannot know in general how an extension array will be laid out internally, so we cannot make our test methods fully aware of them.\r\n\r\nAlthough, one alternative would be to define a `equals` method on ExtensionArray that deals with NaNs."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367999879",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-367999879",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 367999879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk5OTg3OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T12:46:11Z",
    "updated_at": "2018-02-23T12:46:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Although, one alternative would be to define a equals method on ExtensionArray that deals with NaNs.\r\n\r\nAnd then just call `.equals` on it in `assert_series_equal` if they're an extension dtype? I could get behind that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368001407",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-368001407",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 368001407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODAwMTQwNw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T12:53:35Z",
    "updated_at": "2018-02-23T12:53:35Z",
    "author_association": "MEMBER",
    "body": "I am only not sure I am fully convinced myself :). The problem with and `.equals` method like that, it that it does not leave the space for an element-wise equals method. But of course with `Series.equals` already there, it might also be confusing that add such a method as an extension author. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368020543",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-368020543",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 368020543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODAyMDU0Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T14:17:14Z",
    "updated_at": "2018-02-23T14:17:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> does not leave the space for an element-wise equals method\r\n\r\nI think following the lead of `Categorical` is best here. `.equals` for returning True/False and `.__eq__` for elementwise.\r\n\r\nThat said, `.equals` isn't great for the `assert_*_equal` methods since we want an informative traceback.\r\n\r\nI should be able to add a linting rule that looks for `tm.assert_*_equal` only the the `extension/base` module. Then we're free to use it in `extension/decimal.py`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368022221",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-368022221",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 368022221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODAyMjIyMQ==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-02-23T14:23:40Z",
    "updated_at": "2018-02-24T00:43:18Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19863?src=pr&el=h1) Report\n> :exclamation: No coverage uploaded for pull request base (`master@01e99de`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/19863/graphs/tree.svg?token=eZ4WkYLtcO&src=pr&height=150&width=650)](https://codecov.io/gh/pandas-dev/pandas/pull/19863?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##             master   #19863   +/-   ##\n=========================================\n  Coverage          ?   91.64%           \n=========================================\n  Files             ?      150           \n  Lines             ?    48946           \n  Branches          ?        0           \n=========================================\n  Hits              ?    44858           \n  Misses            ?     4088           \n  Partials          ?        0\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.02% <ø> (?)` | |\n| #single | `41.81% <ø> (?)` | |\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19863?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19863?src=pr&el=footer). Last update [01e99de...e0164a4](https://codecov.io/gh/pandas-dev/pandas/pull/19863?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368022451",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-368022451",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 368022451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODAyMjQ1MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T14:24:27Z",
    "updated_at": "2018-02-23T14:24:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, this should now fail if tests in `extension/base/*.py` use `tm.assert_(frame|series)_equal`. I've excluded `base/base.py` since that's where the defaults are set."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368026185",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-368026185",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 368026185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODAyNjE4NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T14:37:28Z",
    "updated_at": "2018-02-23T14:37:28Z",
    "author_association": "MEMBER",
    "body": "> I think following the lead of Categorical is best here. .equals for returning True/False and .__eq__ for elementwise.\r\n\r\nBut, `__eq__` has no flexibilty regarding NaNs, so that's a reason one would want a element-wise `equals` (and from that, you can always do a `.all()` to get a single boolean). Anyhow, the existing behaviour is of course there, but if I would design it from scratch, not sure if I would do `equals` as it is now."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368026564",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-368026564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 368026564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODAyNjU2NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T14:38:41Z",
    "updated_at": "2018-02-23T14:38:41Z",
    "author_association": "MEMBER",
    "body": "But for this PR, I would personally for now do like you did here. We can later still discuss if we want an `equals` method or not."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368235333",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19863#issuecomment-368235333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19863",
    "id": 368235333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODIzNTMzMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-24T15:19:22Z",
    "updated_at": "2018-02-24T15:19:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks!"
  }
]
