[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451311543",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24603#issuecomment-451311543",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24603",
    "id": 451311543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTMxMTU0Mw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-03T23:31:00Z",
    "updated_at": "2019-01-03T23:31:00Z",
    "author_association": "MEMBER",
    "body": "@qwhelan thanks for opening this.  Do you have any idea how expensive the searchsorted calls are?  i.e. are we sure this is worth optimizing?\r\n\r\nSome more context: we have a ~7 places in tslibs that do something like this:\r\n\r\n```\r\n    cdef ndarray[int64_t] pos\r\n \r\n   trans, deltas, typ = get_dst_info(tz)\r\n\r\n    for i in range(N):\r\n        val = arr[i]\r\n        if val == iNAT:\r\n            result[i] = iNaT\r\n        else:\r\n            pos = trans.searchsorted(val, side='right') - 1\r\n            result[i] = some_func_of(val + deltas[pos])\r\n```\r\n\r\nThe alternative would be to do the `trans.searchsorted` call outside of the loop.  So the tradeoff is more calls vs unnecessary calculations when there are many `iNaT` values\r\n\r\nSome notes based on the last time I looked at this:\r\n\r\n- `trans.searchsorted` is a python-space call, so has more overhead than a C-space call would\r\n- cnp.PyArray_SearchSorted's signature does not seem to care about whether it takes a scalar or an array.  Presumably there is a lower-level function that takes only the scalar.  If we could call that instead, that'd shave some overhead.\r\n- At one point there was a problem with cython's numpy.pxd file not having the right signature for PyArray_SearchSorted, or NumPy changing the signature, or something.  Not sure if this has been resolved.  https://stackoverflow.com/questions/28184211/calling-pyarray-searchsorted-from-cython-3-or-4-arguments/28184301\r\n- If we were to make it one call up-front, there might be some mileage to be gained from the fact that often we are passing arrays known to be monotonic.  To actually get that mileage would probably require implementing our own cython searchsorted, which I would not want to do unless profiling shows it would be a huge perf win.\r\n- If we were to go down that road, caching might also be useful since it is the same handful of `trans` arrays being searched repeatedly.\r\n- IIRC searchsorted is the last thing left in tslibs that makes us cimport ndarray.  Without that, we might be able to use memoryviews more directly, which _might_ have perf or compat upsides.\r\n\r\nBig picture, we need to get a handle on how costly these searchsorted calls are."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451316734",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24603#issuecomment-451316734",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24603",
    "id": 451316734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTMxNjczNA==",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-03T23:59:44Z",
    "updated_at": "2019-01-03T23:59:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel Thanks for your notes - I agree on most points. A couple points of clarification regarding numpy's implementation:\r\n\r\n- `PyArray_SearchSorted` actually casts scalars into arrays; there's no lower-level function that takes only scalars\r\n- The reason for the above is that the monotonicity speedup is already implemented by numpy here: https://github.com/numpy/numpy/blob/3e1a15791a58d33563e18f72aeb296946407b0e7/numpy/core/src/npysort/binsearch.c.src#L56"
  }
]
