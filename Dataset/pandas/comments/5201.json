[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26207817",
    "html_url": "https://github.com/pandas-dev/pandas/pull/5201#issuecomment-26207817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5201",
    "id": 26207817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA3ODE3",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-12T22:58:04Z",
    "updated_at": "2013-10-12T22:58:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "whoops, broke something!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26208932",
    "html_url": "https://github.com/pandas-dev/pandas/pull/5201#issuecomment-26208932",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5201",
    "id": 26208932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA4OTMy",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-13T00:23:35Z",
    "updated_at": "2013-10-13T00:23:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "This goes back to at least 0.11. I need to throw out what I have, but I'll reopen this once I fix it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26209436",
    "html_url": "https://github.com/pandas-dev/pandas/pull/5201#issuecomment-26209436",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5201",
    "id": 26209436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA5NDM2",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-13T01:07:19Z",
    "updated_at": "2013-10-13T01:07:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "It turns out this is non-trivial. There are a bunch of places that just assume it's okay to pass dtypes with lists and work assuming this casting to object and then need to handle edge cases &c.\n\n``` python\n    def insert(self, loc, item):\n        \"\"\"\n        Make new Index inserting new item at location\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        index = np.asarray(self)\n        # because numpy is fussy with tuples\n        item_idx = Index([item], dtype=index.dtype)\n        new_index = np.concatenate((index[:loc], item_idx, index[loc:]))\n        return Index(new_index, name=self.name)\n```\n\none example has item as `date1` and then the `item_idx` line just works no matter what because it gets casted to object index. e.g. this example:\n\n``` python\nIn [3]: ind = pd.Index(range(10))\nIn [4]: ind\nOut[4]: Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype='int64')\nIn [5]: ind.insert(5, 5)\nOut[5]: Int64Index([0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9], dtype='int64')\nIn [6]: ind.insert(5, 'apples')\nOut[6]: Index([0, 1, 2, 3, 4, u'apples', 5, 6, 7, 8, 9], dtype='object')\n```\n\nIf I can make everything pass just by comparing dtype, then I'll do it, but otherwise I don't want to screw with something that is assumed in many places.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26209468",
    "html_url": "https://github.com/pandas-dev/pandas/pull/5201#issuecomment-26209468",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5201",
    "id": 26209468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA5NDY4",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-13T01:10:30Z",
    "updated_at": "2013-10-13T01:10:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "More generally, the question is whether the Index constructor should raise when passing a non-matching dtype, just like numpy constructor raises with:  `np.array(['apples'], dtype='int64')`.  Currently, it sometimes returns object Index and sometimes just fails utterly.\n\nRight now it only raises if the conversion causes a `ValueError` rather than `TypeError` (because the try/except only catches TypeError).\n\n``` python\nIn [3]: import numpy as np\n\nIn [4]: ind = pd.Index(np.array([1, 2, 3]), dtype='datetime64[ns]')\n\nIn [5]: ind\nOut[5]: Index([1, 2, 3], dtype='object')\n\nIn [6]: ind = pd.Index(np.array(['a', 'b', 'c'], dtype='int64')\n   ...: )\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-6-dab2e51f9808> in <module>()\n----> 1 ind = pd.Index(np.array(['a', 'b', 'c'], dtype='int64')\n      2 )\n\nValueError: invalid literal for long() with base 10: 'a'\n\nIn [7]: ind = pd.Index(np.array(['a', 'b', 'c'], dtype='datetime64[ns]')\n)\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-7-f598c33a6c8a> in <module>()\n----> 1 ind = pd.Index(np.array(['a', 'b', 'c'], dtype='datetime64[ns]')\n      2 )\n\nValueError: Error parsing datetime string \"a\" at position 0\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26209540",
    "html_url": "https://github.com/pandas-dev/pandas/pull/5201#issuecomment-26209540",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5201",
    "id": 26209540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA5NTQw",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-13T01:17:19Z",
    "updated_at": "2013-10-13T01:17:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud btw -this could be why those alignment tests fail weirdly only on certain machines. I'm guessing they're being passed an explicit dtype and then returning object Index instead of raising.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26209831",
    "html_url": "https://github.com/pandas-dev/pandas/pull/5201#issuecomment-26209831",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5201",
    "id": 26209831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA5ODMx",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-13T01:46:29Z",
    "updated_at": "2013-10-13T01:46:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Diff for me to remember with test cases.\n\n``` diff\ndiff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py\nindex cd26016..0f30845 100644\n--- a/pandas/tests/test_index.py\n+++ b/pandas/tests/test_index.py\n@@ -48,6 +48,56 @@ class TestIndex(unittest.TestCase):\n         for name, ind in self.indices.items():\n             setattr(self, name, ind)\n\n+    def test_explicit_dtype_in_constructor(self):\n+        # first, smoke tests to make sure result is the same\n+        # (with NON-ndarray)\n+        pairs = [(np.dtype(unicode), self.unicodeIndex),\n+                 (np.dtype(str), self.strIndex),\n+                 ('datetime64[ns]', self.dateIndex),\n+                 (np.dtype(int), self.intIndex),\n+                 (np.dtype(float), self.floatIndex),\n+                 (np.dtype(object), self.empty),\n+                 (np.dtype(object), self.tuples)]\n+        for dtype, original_index in pairs:\n+            new_index = Index(list(original_index), dtype=str(dtype))\n+            # key is that type is the same\n+            tm.assert_isinstance(new_index, type(original_index))\n+            tm.assert_index_equal(new_index, original_index)\n+\n+        # float coerces to Float64Index (even if it could be Int64)\n+        ind = Index([1, 3, 5], dtype=float)\n+        expected = Float64Index([1., 3., 5.])\n+        tm.assert_isinstance(ind, Float64Index)\n+        tm.assert_index_equal(ind, expected)\n+\n+        # These don't need to stay the same if new Index types are added\n+        # object-like without explicit dtype\n+        ind = Index(['s', 5, 3, None])\n+        assert ind.dtype == np.object_\n+        assert type(ind) is Index, \"Expected Index type, found %s\" % type(ind)\n+        tm.assert_almost_equal(ind.values, ['s', 5, 3, None])\n+\n+        # int with nan goes to Float64Index\n+        vals = [1, 3, 5, np.nan, 3, -3, -4]\n+        ind1 = Index(vals, dtype=float)\n+        # as should list-like without dtype\n+        ind2 = Index(vals)\n+\n+        for ind in (ind1, ind2):\n+            tm.assert_almost_equal(ind.values, vals)\n+            tm.assert_isinstance(ind1, Float64Index)\n+\n+        # doesn't rescue with explicit (but wrong) dtype\n+        with tm.assertRaises(ValueError):\n+            Index(vals, dtype=int)\n+\n+        # bad dtypes with list-likes\n+        with tm.assertRaisesRegexp(TypeError, \"data type .banana\"):\n+            Index(['apple', 1, 2], dtype='banana')\n+\n+        with tm.assertRaisesRegexp(TypeError, \"data type .ribbit\"):\n+            Index(range(3), dtype='ribbit')\n+\n     def test_wrong_number_names(self):\n         def testit(ind):\n             ind.names = [\"apple\", \"banana\", \"carrot\"]\n```\n"
  }
]
