[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/147138349",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11284#issuecomment-147138349",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11284",
    "id": 147138349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzEzODM0OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-11T00:09:11Z",
    "updated_at": "2015-10-11T00:10:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are quite a few example in the tests, but the following are quite common things to do and yet the syntax that `PyTables` forces is quite specialized and error prone. The key here is that type inference and conversion can be done on the associated selectors, basically you can say hey this column is a `datetime` so let's do appropraite conversion on the input arguments, which is orthogonal to the actual representation inside the data store.\n\nFurther we can all more natural syntax (the 'and' and the 'in' clauses), function evaluation, and automatic variable interpretation. \n\nI have printed the generated query underneath for convenience.\n\n```\nIn [4]: df = DataFrame({'A' : pd.date_range('20130101',periods=3), 'B' : list('abc')})\n\nIn [5]: df.to_hdf('test.h5','df',mode='w',format='table',data_columns=True)\n\nIn [6]: pd.read_hdf('test.h5','df',where='B in [\"a\",\"c\"]')\n((B == \"a\") | (B == \"c\"))\nOut[6]: \n           A  B\n0 2013-01-01  a\n2 2013-01-03  c\n\nIn [7]: pd.read_hdf('test.h5','df',where='A>\"20130101\" and A<=pd.Timestamp(\"20130103\")')\n((A > 1356998400000000000) & (A <= 1357171200000000000))\nOut[7]: \n           A  B\n1 2013-01-02  b\n2 2013-01-03  c\n```\n\nSo these are really for user convience. Surely you _could_ write the actual query, but would you actually want to?\n\nSo you have your title backwards. pandas query syntax is MUCH more expressive that PyTables would ever hope to be (or should be IMHO, it does a great job for the limited dtype support)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/147139698",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11284#issuecomment-147139698",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11284",
    "id": 147139698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzEzOTY5OA==",
    "user": {
      "login": "BrenBarn",
      "id": 1439047,
      "node_id": "MDQ6VXNlcjE0MzkwNDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrenBarn",
      "html_url": "https://github.com/BrenBarn",
      "followers_url": "https://api.github.com/users/BrenBarn/followers",
      "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions",
      "organizations_url": "https://api.github.com/users/BrenBarn/orgs",
      "repos_url": "https://api.github.com/users/BrenBarn/repos",
      "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrenBarn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-11T00:17:05Z",
    "updated_at": "2015-10-11T00:17:05Z",
    "author_association": "NONE",
    "body": "I agree that is convenient.  What I'm saying is that it is _inconvenient_ not to be able to do other equally reasonable and very simple things like `where=\"A<B+2\"` or `where=\"A+B<2\"`.\n\nIdeally the pandas query syntax could eventually be expanded to allow arbitrary expressions.  But in the absence of that I think it makes sense to allow a bypass for the large number of potential cases which use more complicated expression syntax and thus are currently (as I understand it) not available at all via the pandas syntax.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/147140323",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11284#issuecomment-147140323",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11284",
    "id": 147140323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzE0MDMyMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-11T00:19:30Z",
    "updated_at": "2015-10-11T00:19:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "well, I don't think it very hard to add what you are talking about, just a matter of no-one ever requested and I didn't have as a test case.\n\nI would certainly agree that pandas syntax _should_ be a super-set. I don't think it very hard to get there, your other issue #11283 would likely solve the problem.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/147141160",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11284#issuecomment-147141160",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11284",
    "id": 147141160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzE0MTE2MA==",
    "user": {
      "login": "BrenBarn",
      "id": 1439047,
      "node_id": "MDQ6VXNlcjE0MzkwNDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrenBarn",
      "html_url": "https://github.com/BrenBarn",
      "followers_url": "https://api.github.com/users/BrenBarn/followers",
      "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions",
      "organizations_url": "https://api.github.com/users/BrenBarn/orgs",
      "repos_url": "https://api.github.com/users/BrenBarn/repos",
      "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrenBarn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-11T00:22:00Z",
    "updated_at": "2015-10-11T00:22:00Z",
    "author_association": "NONE",
    "body": "The other issue won't solve the problem; that just fixes the case where you're doing a comparison against a single value that happens to be a numpy value.\n\nIs there an existing issue for adding various sorts of expressions to the query syntax?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/147142056",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11284#issuecomment-147142056",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11284",
    "id": 147142056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzE0MjA1Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-11T00:41:55Z",
    "updated_at": "2015-10-11T00:41:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "oh, that seemed to cover what I think you were looking. I can reopen this if you'd like to address what you think are missing.\n"
  }
]
