[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/268777947",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14953#issuecomment-268777947",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14953",
    "id": 268777947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODc3Nzk0Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-22T11:08:30Z",
    "updated_at": "2016-12-22T11:08:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "so this is a 'feature', in that view propogation in numpy is a feature. As a user you have to be congnizant of it, and it can make things quite performant. Pandas does not own a passed in numpy array and thus it IS externally visible.\r\n\r\nIn general, using ``inplace=True`` ops are not idiomatic to pandas, virtually all operations return new data (which is copied).\r\n\r\nNote that view propogation is only true in some cases: single dtyped, no prior modification, no dtype changes on the op, and non-object types.\r\n\r\n```\r\nIn [1]: a = np.array([1,2,3, np.nan])\r\n   ...: b = pd.DataFrame(a)\r\n   ...: b.fillna(4, inplace=True)\r\n\r\n# this is the viewed array\r\nIn [2]: b.values.base\r\nOut[2]: array([ 1.,  2.,  3.,  4.])\r\n\r\nIn [3]: a2 = np.array(['a', 'b', 'c'])\r\n\r\n# not true for object dtypes\r\nIn [4]: b2 = pd.DataFrame(a2)\r\n\r\nIn [5]: b2.loc[0, 0] = 'foo'\r\n\r\nIn [6]: b2\r\nOut[6]: \r\n     0\r\n0  foo\r\n1    b\r\n2    c\r\n\r\nIn [7]: a2\r\nOut[7]: \r\narray(['a', 'b', 'c'], \r\n      dtype='<U1')\r\n```\r\n\r\nThis happens to be only in-place in pandas itself and not numpy.\r\n```\r\nIn [8]: a = np.array([1,2,3, np.nan])   ...: \r\n\r\nIn [9]: b = pd.DataFrame(a)\r\n\r\nIn [10]: b +=1 \r\n\r\nIn [11]: a\r\nOut[11]: array([  1.,   2.,   3.,  nan])\r\n\r\nIn [13]: b.values.base\r\nOut[13]: array([[  2.,   3.,   4.,  nan]])\r\n```\r\n"
  }
]
