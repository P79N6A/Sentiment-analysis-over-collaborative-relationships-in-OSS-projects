[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137246289",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137246289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137246289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzI0NjI4OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T21:13:40Z",
    "updated_at": "2015-09-02T21:13:40Z",
    "author_association": "MEMBER",
    "body": "It looks like this does deal with @nickeubank's most recent issue, where changes on the original dataframe don't change the intermediate, even if it was created with a view? How do you do that?\n\n```\nIn [1]: from pandas import DataFrame\n\nIn [2]: df = DataFrame({'col1':[1,2], 'col2':[3,4]})\n\nIn [3]: intermediate = df.loc[1:1,]\n\nIn [4]: intermediate\nOut[4]:\n   col1  col2\n1     2     4\n\nIn [5]: df\nOut[5]:\n   col1  col2\n0     1     3\n1     2     4\n\nIn [6]: df.iloc[0, 0] = -99\n\nIn [7]: intermediate\nOut[7]:\n   col1  col2\n1     2     4\n\nIn [8]: df\nOut[8]:\n   col1  col2\n0   -99     3\n1     2     4\n```\n\nIt looks like currently accessing a column as a series returns a view, which is good. But is also seems like accessing a row as a series can sometimes also return a view, which is not what we want (that should always be a copy or copy-on-write):\n\n```\nIn [14]: df = DataFrame({'col1':[1,2], 'col2':[3,4]})\n\n# this is the first row\nIn [15]: s2 = df.loc[0]\n\nIn [16]: s2\nOut[16]:\ncol1    1\ncol2    3\nName: 0, dtype: int64\n\nIn [17]: s2.iloc[0] = -99\n\nIn [18]: df\nOut[18]:\n   col1  col2\n0   -99     3\n1     2     4\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137260991",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137260991",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137260991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzI2MDk5MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T22:15:42Z",
    "updated_at": "2015-09-02T22:15:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer \n\n```\nIn [1]: df = DataFrame({'col1':[1,2], 'col2':[3,4]})\n\nIn [2]: s2 = df.loc[0]\n\nIn [3]: s2.iloc[0] = -99\n\nIn [4]: s2\nOut[4]: \ncol1   -99\ncol2     3\nName: 0, dtype: int64\n\nIn [5]: df\nOut[5]: \n   col1  col2\n0     1     3\n1     2     4\n```\n\nalso deprecated `is_copy` -> `_parent`\n\nthe implementation is this:\n\nevery type of operation that returns something which is not a 'view', IOW, not a column or a slice of a column (for a DataFrame). sets `_parent` to a weakref back to the parent. So in the above case (after [2] but before [3]).\n\n```\nIn [8]: s2._parent\nOut[8]: <weakref at 0x106820cb0; to 'DataFrame' at 0x1068588d0>\n```\n\nThen [3] will do a check (so all actual set operations, including inplace) will see that we have a ref. So do this funky `gc.get_referrers` to eliminate cases like `df = df[...]`. but a case like above still has `s2` in the namspace. So then you can determinate if its a chain indexing operation, if so `raise SettingWithCopyError`, else you copy the data (e.g. copy-on-write), and reset `._parent=None`.\n\nNow we don't actually see the `SettingWithCopyErrors` why, because these are caught by the actual indexing operation (e.g. `__setitem__` on a frame), at which point you just `df.loc[self.index,key] = value` and you are done (similarly with `Series`).\n\nthe hard part was actually putting in place all of the checks on when to record the `._parent`, which is already existing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137263235",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137263235",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137263235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzI2MzIzNQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T22:28:59Z",
    "updated_at": "2015-09-02T22:29:05Z",
    "author_association": "MEMBER",
    "body": "This solution is pretty dark magic. Even though it is (sort of) technically feasible, I'm not sure it's a good idea.\n\nPeople certainly do put DataFrames in built-in data structures like lists, so @JanSchulz's example where this breaks will assuredly come up:\n\n```\nl = [df[...]]\nl[0][...] = \"x\"\n```\n\nMaybe another approach would be to try to make views/copies more predictable, by, for example, disabling automatic block consolidation?\n\nAnother possibility would be to make creating a view turn both the original object AND the new selection into copy-on-write. This would eliminate the need to look at the garbage collector, though it could make repeated modification/indexing of a dataframe very inefficient, e.g.,\n\n``` python\ndf = pd.DataFrame({'A': np.random.randn(10000)})\nfor i in df.index:\n   # this assignment now does a complete copy every time!\n   df.loc[i, 'B'] = df.loc[i:(i + 1), 'A'].sum() > 0\n```\n\nOn the other hand, R users seem to deal with copy-on-write like this just fine....\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137265494",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137265494",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137265494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzI2NTQ5NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T22:44:37Z",
    "updated_at": "2015-09-02T22:44:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer consolidation are on the agenda, but certainly not in the next week. they are a whole can of worms.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137487796",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137487796",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137487796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzQ4Nzc5Ng==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T15:36:29Z",
    "updated_at": "2015-09-03T15:36:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback wow, this is amazing. I can't believe you implemented this in a day! I'll leave the issues of internal implementation to you more experienced developers, but will be sure to help with the doc updates when we settle on final behaviors!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137564533",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137564533",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137564533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzU2NDUzMw==",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T20:28:07Z",
    "updated_at": "2015-09-04T07:18:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is a bit more magic (as in \"I don't really understand all what's happening here, but it seems to work...\") which gets even references to df slices in lists/dicts or attributes in objects:\n\n```\ndef get_all_names_for_obj(__really_unused_name__342424__, exclude=None, __cache_123__=None, depth=2):\n    \"\"\"Returns True if the argument is referenced from a container\"\"\"\n    removals = [\"__really_unused_name__342424__\", \"__really_unused_name__xxxxx__\", \"__v__\", \"self\", \n                \"__globals__\", \"func_globals\", \"__self__\", \"im_self\", \"cell_contents\", '__dict__'\n                \"user_ns\", 'namespace', 'user_global']\n    if exclude:\n        removals.extend(exclude)\n    if __cache_123__ is None:\n        __cache_123__ = []\n        __cache_123__.append(__cache_123__)\n\n    gc.collect(2)\n    refs = gc.get_referrers(__really_unused_name__342424__)\n    __cache_123__.append(refs)\n\n    names = []\n    container_names = []\n    for ref in refs:\n        if ref in __cache_123__:\n            continue\n        __cache_123__.append(ref)\n        if id(ref) == globals().get(\"__ID_D__\", None):\n            print(inspect.isframe(ref), isinstance(ref, collections.Mapping), \n                  isinstance(ref, collections.Sequence), isinstance(ref, object),\n                  ref)\n            pass\n        try:\n            if inspect.isframe(ref):\n                for name, __really_unused_name__xxxxx__ in ref.f_locals.iteritems():\n                    if __really_unused_name__xxxxx__ is __really_unused_name__342424__:\n                        names.append(name)\n            elif depth < 1:\n                # don't try to get too deep into container ref cycles...\n                continue\n            elif isinstance(ref, collections.Mapping):\n                _names = list(get_all_names_for_obj(ref, exclude={\"ref\", \"refs\"}, __cache_123__=__cache_123__, depth=depth-1))\n                if len(_names) == 0:\n                    continue\n                for _name in _names:\n                    name_in_map = \"<unknown>\"\n                    for k, __v__ in ref.items():\n                        if __v__ is __really_unused_name__342424__:\n                            # we don't want to catch whatever['namespace'] and similar things\n                            if name_in_map not in removals:\n                                name_in_map = k\n                                # only catch the first instance\n                                break\n                    if name_in_map != \"<unknown>\":\n                        # check that we don't have class backing dict (xxx.__dict__)  \n                        # -> this should end up as xxx.<name_in_map>\n                        if _name[-9:] == \".__dict__\":\n                            container_names.append(\"%s.%s\" % (_name[:-9], name_in_map))\n                        else:\n                            container_names.append(\"%s['%s']\" % (_name, name_in_map))\n            elif isinstance(ref, collections.Sequence):\n                _names = list(get_all_names_for_obj(ref, exclude={\"ref\", \"refs\"} ,__cache_123__=__cache_123__, depth=depth-1))\n                if len(_names) == 0:\n                    continue\n                for _name in _names:\n                    item_pos = ref.index(__really_unused_name__342424__)\n                    container_names.append(\"%s[%s]\" % (_name, item_pos))\n            elif isinstance(ref, object) or isinstance(old(), types.InstanceType):\n                _names = list(get_all_names_for_obj(ref, exclude={\"ref\", \"refs\"}, __cache_123__=__cache_123__, depth=depth-1))\n                if len(_names) == 0:\n                    continue\n                for _name in _names:\n                    for n in dir(ref):\n                        if getattr(ref, n, None) is __really_unused_name__342424__:\n                            if n in removals:\n                                continue\n                            container_names.append(\"%s.%s\" % (_name, n))\n            else:\n                _names = list(get_all_names_for_obj(ref, exclude={\"ref\"}, __cache_123__=__cache_123__, depth=depth-1))\n                container_names.append(\"<included in item of type %s with name(s) %s>\" % (type(ref), _names))\n        finally:\n            __cache_123__.remove(ref)\n            del ref\n    __cache_123__.remove(refs)\n    for name, __really_unused_name__xxxxx__ in globals().iteritems():\n        if __really_unused_name__xxxxx__ is __really_unused_name__342424__:\n            names.append(name)\n\n    return list((set(names) | set(container_names)) - set(removals))\n```\n\nExamples:\n\n```\nclass whatever(object):\n    def is_item_in_refs(self, item):\n        import gc\n        refs = gc.get_referrers(self)\n        for ref in refs:\n            if item is ref:\n                print(ref)\n\n    def print_names(self):\n        print(\",\".join(get_all_names_for_obj(self)))\n\n    def __getitem__(self, val):\n        import gc\n        ref = gc.get_referrers(self)[0]\n        double_slice = getattr(ref,'im_func',None) is not None\n        print(\"__getitem__: %s, %s\" % (double_slice, get_all_names_for_obj(self)))\n        ww = whatever()\n        #return w2\n        return ww\n\n    def __setitem__(self, key, val):\n        import gc\n        ref = gc.get_referrers(self)[0]\n        double_slice = getattr(ref,'im_func',None) is not None\n        print(\"__setitem__: %s, %s\" % (double_slice, get_all_names_for_obj(self)))\n\nw = whatever()\nl=[w]\nd={\"w\":w}\nclass c(object):\n    pass\no = c()\nsetattr(o, \"w\", w)\no.w\nw.print_names()\n\nwxw3x = whatever()\nwxw3x[1] = 3\nwxw3x[1][1] = 3\nw2 = wxw3x[1]\nw3 = w2\nw2[1] = 3\n\nd = {\"w\" : whatever()}\nd[\"w\"][0] = 1\nd[\"w\"][0][0] = 1\nd[\"x\"] = d[\"w\"][0]\nl = [d[\"x\"]]\nd[\"x\"][1] = 1\n```\n\nThe performance penalty of `get_all_names_for_obj(self)` is probably very measureable (at least it's not instant in the notebook, haven't use timeit yet)...\n\nThe three additional lines in each method in `whatever` is what @jreback started with (but I couldn't really get to work here). But if it gets really well tested it might be worth to get back to it as it is much simpler and if the tests scream when python changes the implementation details of `gc.get_referrers(self)[0]` or changes in pandas code result in \"wrong\" results, then this is IMO better...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137569555",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137569555",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137569555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzU2OTU1NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T20:45:56Z",
    "updated_at": "2015-09-03T20:45:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback is this planned for 0.17? My first-take reaction to skimming the implementation is worry that it's fragile and will be hard to maintain (not that I'll really be the on maintaining it :smile:).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137569972",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137569972",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137569972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzU2OTk3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T20:47:47Z",
    "updated_at": "2015-09-03T20:47:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger I didn't tag it. Still needs some work. Its not much more fragile that the current `SettingWithCopyWarning`, so not sure that's really all that big of a deal.\n\nLet me see how much can fix for next week. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137589314",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137589314",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137589314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzU4OTMxNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T22:18:42Z",
    "updated_at": "2015-09-03T22:18:42Z",
    "author_association": "MEMBER",
    "body": "I would think it's not yet for 0.17? Certainly if we want to get a release candidate out soon to have a release the coming month. For such a change, I think we should take some more time.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137589733",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137589733",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137589733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzU4OTczMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T22:21:29Z",
    "updated_at": "2015-09-03T22:21:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes 0.17 is already quite full and has lots of depreciations and such\n\nnot sure of philosophy for changes in releases\neg is it better to put lots of pain in 1 or just spread it out (pain as in adjusting to some API changes )\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137611325",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-137611325",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 137611325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzYxMTMyNQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-04T00:36:03Z",
    "updated_at": "2015-09-04T00:36:03Z",
    "author_association": "MEMBER",
    "body": "As I noted before, as much as I want this to work, I have serious reservations about the approach here. As frustrating as the status quo is, if we can't do copy-on-write right, maybe we shouldn't do it at all...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139150014",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-139150014",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 139150014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTE1MDAxNA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-10T07:44:58Z",
    "updated_at": "2015-09-10T07:44:58Z",
    "author_association": "MEMBER",
    "body": "Explicitly calling `gc.collect(2)` can have serious (and surprising) performance implications: https://github.com/pydata/pandas/issues/11045\n\nIt seems like a bad idea to bake this into every `__setitem__` call.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139185058",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-139185058",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 139185058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTE4NTA1OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-10T09:41:23Z",
    "updated_at": "2015-09-10T09:41:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "thrn kindly shoe another way to do this\n\ncorrectness is the most important thing here\nthis is a known effect - this is user error\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139273470",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-139273470",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 139273470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTI3MzQ3MA==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-10T15:03:10Z",
    "updated_at": "2015-09-10T15:03:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would it be possible to simplify the implementation of we didn't try to\nalso get single-line chain indexing to work?\nOn Thu, Sep 10, 2015 at 2:41 AM Jeff Reback notifications@github.com\nwrote:\n\n> thrn kindly shoe another way to do this\n> \n> correctness is the most important thing here\n> this is a known effect - this is user error\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/pull/10973#issuecomment-139185058.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139308478",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-139308478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 139308478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTMwODQ3OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-10T16:54:27Z",
    "updated_at": "2015-09-10T16:54:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "maybe, put this aside for bit. as going to do the release candidate for 0.17.0 shortly.\n\n@nickeubank fee free to give a go!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139430668",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-139430668",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 139430668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTQzMDY2OA==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-11T02:11:53Z",
    "updated_at": "2015-09-11T02:11:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that makes sense -- not something to rush!\n\n@jreback will definitely take a look! This will definitely be the farthest I've gone into the pandas internals, but worth a shot. :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/140872353",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-140872353",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 140872353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDg3MjM1Mw==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-16T20:11:44Z",
    "updated_at": "2015-09-16T20:11:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer If we dropped the `gc.collect()` call, how would you feel about this? If there are still fragility issues that worry you, would you mind detailing them a little?\n\nRe: `gc.collect`: unless I'm wrong, we're only using that to detect super-egregious chained indexing. If that's the constraint, we could either (a) not worry about that warning, or (b) pull back on all chained-indexing issues, and leave `df.loc[1:1,]['col1'] = -99` to always fail. That would give us a good, consistent behavior without resort to `gc.collect()`. \n\nAlso relatedly: weren't we using `gc.collect` on every _setitem_ on a copy previously to run the SettingOnACopy error? (line 1276 of core/generic.py)?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/140985723",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-140985723",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 140985723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDk4NTcyMw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-17T06:49:28Z",
    "updated_at": "2015-09-17T06:49:28Z",
    "author_association": "MEMBER",
    "body": "`gc.collect` can have unfortunate performance implications, but `gc.get_referrers` is even worse -- it doesn't even work reliably! See @JanSchulz's notes about objects in lists or dicts. I was initially enthusiastic about copy-on-write, but it's a very tough fit for Python.\n\nMy inclination is that a better approach would be to come up with a simpler, more consistent set of rules that determine whether we make copies or views. This is closer to the approach of NumPy and xray. We'll hurt performance when we turn some cases that currently use views into copies, but it will be a net win for predictability.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/140995548",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-140995548",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 140995548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDk5NTU0OA==",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-17T07:54:06Z",
    "updated_at": "2015-09-17T07:54:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about adding two (additional) entries: one for setting, one for getting? Setting fails if a copy must be made, getting always returns a copy? This is kind of like the `.ix` vs `.loc/.iloc` thing...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/141118048",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-141118048",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 141118048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTExODA0OA==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-17T15:13:11Z",
    "updated_at": "2015-09-17T15:13:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer  Ah, I see -- thank you for clarifying! Helpful to know your specific concerns. \n\nI agree we don't want to do anything that will introduce new fragilities, but I'm not quite ready to abandon copy-on-write just because our first attempt at implementation failed. As @jreback, there are some pretty huge performance gains from views, and if we can find a way to keep them when possible it'd be nice. Now that I understand the source of the concern, let me give a little more thought to alternatives -- if our only major concern is the reliance on `gc.get_referrers()`, maybe we can find a work-around. \n\nOut of curiosity, as we're getting pretty deep into _python_ internals, is there a forum where we might be able to seek guidance from people who do work on the language itself, rather than higher-level tools like `pandas`? We only have 4 people on this thread -- maybe if we widened the pool someone might have a suggestion of a more robust tool. \n\nSimilarly, any idea if this gets better in Python 3? I recognize Python 2 is likely to hang around for a while, so even if the `gc` analogue in Python 3 were better we would still have issues to address, just wondering if we need different solutions for the two environments. \n\n@JanSchulz I think different indexers is a reasonable solution down the road, btw! Not quite ready to go there yet, but a good thought!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/141523112",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-141523112",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 141523112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTUyMzExMg==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-18T18:12:24Z",
    "updated_at": "2015-09-18T18:12:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JanSchulz @shoyer @jreback \n\nBrainstorming a little: the primary role of `gc.get_referrers()` seems to be to find all the variables that point to a `view` so they can be redirected when the `view` is converted to a `copy`. \n\nRather than trying to accomplish the redirect from `view` to `copy` by changing variable pointers, might it be possible to make the redirect happen at the other end, either by putting the new copy at the same memory address as the view, or more realistically (since I assume you can't guarantee space at that address) by leaving a redirect at the memory address of the `view`? In other words, do the redirect in the heap rather than the stack?\n\nRelatedly: this seems perfectly analogous to the behavior provided by `inplace`. Could we leverage that machinery?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/141544850",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-141544850",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 141544850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTU0NDg1MA==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-18T19:28:12Z",
    "updated_at": "2015-09-18T20:20:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "CMIIW, `gc.get_referrers` is used here to differentiate between chained indexing and chained indexing in two steps. This is very difficult in Python because assignment is just name binding. To solve this you'd like some global analogue of class attributes without any naming restriction, so that some action is triggered during assignment. The solution in this PR requires inspecting the surrounding scopes and frames is really going out of our way to see how the code is actually written. Even without the garbage collection calls I think calling `inspect` is probably not too performant.\n\nI don't have a better solution to make all that work, and there probably isn't one.  @nickeubank Assignment in Python has no modification hooks, so I think even if the C API was exposing more functionalities, this would still not be easy to pull off (assignment still happens in Python).  AFAIK P3 is no different, and we shouldn't be relying on language internals anyways. \n\nIf we want `df.loc[1:1,]['col1'] = -99` and `a=df.loc[1:1,]; a['col1]=-99` to be different (without introspection), then `a` needs to be something like a class attribute, not a free name. pandas could provide that container, but probably very few would use that (instead of `a=df.loc[1:1,]`, we'd have `a.df = df.loc[1:1,]`).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/141545599",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-141545599",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 141545599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTU0NTU5OQ==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-18T19:32:19Z",
    "updated_at": "2015-09-18T19:48:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kawochen Thanks for the followup! \n\nSo would we be ok (i.e. not need `gc`) if we DIDN'T care about making `df.loc[1:1,]['col1'] = -99` and `a=df.loc[1:1,]; a['col1]=-99` different? \n\nThis has come up before, and I think most people are ok with `df.loc[1:1,]['col1'] = -99` failing, since it would be consistent with our general memory model (in the same way that `df.column.replace()`  would fail it it didn't come with any assignment).\n\nEDIT for clarity: By \"ok\", I mean can we do copy-on-write safely without replying on the `gc` library if we're ok with `df.loc[1:1,]['col1'] = -99` \"failing\" (i.e. not leading to any persistent changes to `df`)? (In principle at least -- obviously still need to implement. :)). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/141555799",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-141555799",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 141555799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTU1NTc5OQ==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-18T20:18:22Z",
    "updated_at": "2015-09-18T20:18:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK lemme read all the discussion in the original issue before polluting this PR with my nonsense--I don't seem to fully understand what the end goal is. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/141556122",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-141556122",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 141556122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTU1NjEyMg==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-18T20:20:07Z",
    "updated_at": "2015-09-18T20:33:40Z",
    "author_association": "CONTRIBUTOR",
    "body": ":) @kawochen haha - ok! The issue that gave rise to this (#10954) may be more helpful than this PR. This PR is amazing, but also did more than I think was required in that it would support chain indexing, but if we can support copy-on-write if we drop that, that'd be great!  \n\n(Do not take confusion on my part as a sign you don't know what's going on -- I'm very interested in this from a design perspective, but am a little out of my depth with the machinery)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143832803",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-143832803",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 143832803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MzgzMjgwMw==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-28T18:18:26Z",
    "updated_at": "2015-09-28T18:18:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kawochen did you ever have a chance to look this over and figure out if you'd found a solution?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/144162236",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-144162236",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 144162236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDE2MjIzNg==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T19:23:15Z",
    "updated_at": "2015-09-29T20:33:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer @jreback Reading this over more carefully, I'm pretty sure that we only use gc to make it possible to do chained indexing on a single line (i.e. `df.loc[1:1,]['col1'] = -99`). @shoyer, if that's your main objection, then I think we can still figure this out if we just let chained-indexing fail. As we've said before, failure is consistent with other pandas behaviors so doesn't necessarily need a warning as long as the behavior is consistent. \n\nIn light of that, might I suggest a way forward? \n- we stop supporting single-lined chained indexing so we don't need to rely on `gc` to test for the weird chained-indexing cases. (If we don't worry about that, perhaps we can do something as simple as add a `if self._is_view: self.copy()` in the setter?)\n- we think about a way to guard against _forward_ propagation of change through views, which this implementation doesn't yet cover.\n\nBy the latter, I mean preventing the following:\n\n```\ndf = pd.DataFrame({'col1':[1,2], 'col2':[3,4]})\nintermediate = df.loc[1:1,]\n\ndf['col1'] = -99\nintermediate\n\nOut[2]: \n   col1  col2\n1   -99       4\n```\n\nI've been trying to do a little implementation myself, but I'm not sure I'm quite capable yet. Nevertheless, here are some thoughts I've been wrestling with:\n- It seems like the key to avoiding forward propagation is to create a property that's analogous to @jreback 's `_parent` property for the opposite direction (might I suggest we call it `_children`?). Essentially, it would be a list, associated with each Frame, of references to any `views` that refer back to the Frame. Doing this is one of the places I've really struggled with, but maybe @JanSchulz has a hack for this since he seems to be the reference wizard?\n- Then, when setting values, the first thing to do is check if a frame has any `_children` objects. If so, before setting values, one converts the `_children` views into copies, and resets `_children` to an empty list. \n- One option is to have views remove themselves from the `_children` list managed by their `_parent` whenever they stop being views to keep that list clean, but there's little harm in not doing that -- provided that when one sets values, one checks whether children are views before copying, there wouldn't be much of a performance hit to the `_children` list being populated with references to items that used to be views but are now copies. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/144174958",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-144174958",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 144174958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDE3NDk1OA==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T20:04:29Z",
    "updated_at": "2015-09-29T20:04:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nickeubank I'm still not sure how to reconcile the various 'desired' features with how Python works.  Forbidding chained indexing sounds like a huge change.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/144186653",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-144186653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 144186653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDE4NjY1Mw==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T20:46:09Z",
    "updated_at": "2015-09-29T21:26:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kawochen I'm not sure I'd characterize it as a huge change since we don't really support it now -- it _sometimes_ works, but not consistently. In fact, that's part of what started this discussion (see #10954 )\n\nI think the consensus from the prior discussion (@jreback @shoyer can weigh in if they want) is:\n- The current unpredictability of behavior is a problem. \n- Copy-on-write seems like a good solution, if feasible. It would make behavior predictable, but still allow pandas to use `views` to maximize performance when `views` and `copies` behave in the same manner (like during read-only operations)\n- Fully supporting single-lined chained-indexing would be great if possible, but if we are unable to do so, that is an acceptable change. The reason is that `df[1:2,]['col1']=-99` not making any real changes is entirely consist with other behaviors, like the fact that `df.replace('z','a')` (without reassignment) also fails.\n\n@jreback made this implementation that preserved chained-indexing, but it seems to rely on `gc.get_referrers()`, which as the [official docs](https://docs.python.org/2/library/gc.html) point out should probably not be used except for debugging, and makes @shoyer uncomfortable, so in light of the consensus _something_ needs to change, and copy-on-write seems desirable, I'm suggesting letting go of chained-indexing might be a good solution. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/144197248",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10973#issuecomment-144197248",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10973",
    "id": 144197248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDE5NzI0OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T21:31:23Z",
    "updated_at": "2015-09-29T21:31:23Z",
    "author_association": "MEMBER",
    "body": "> Fully supporting single-lined chained-indexing would be great if possible, but if we are unable to do so, that is an acceptable change. The reason is that df[1:2,]['col1']=-99 not making any real changes is entirely consist with other behaviors, like the fact that df.replace('z','a') (without reassignment) also fails.\n\nIt's simply not possible to make chained indexing always work if indexing can ever return a copy instead of a view. This is the limitation of how Python works. Nor is it really possible or desirable to make chained indexing always fail, unless we remove all use of views (which is a non-starter). Copy on write isn't really feasible with mainstream methods in Python.\n\nThe most important thing is that chained indexing should fail or succeed _predictably_. It doesn't need to _always_ fail, but the few cases where it will succeed should be obviously identifiable.\n"
  }
]
