[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102660196",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102660196",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102660196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjY2MDE5Ng==",
    "user": {
      "login": "su9204",
      "id": 3474325,
      "node_id": "MDQ6VXNlcjM0NzQzMjU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3474325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/su9204",
      "html_url": "https://github.com/su9204",
      "followers_url": "https://api.github.com/users/su9204/followers",
      "following_url": "https://api.github.com/users/su9204/following{/other_user}",
      "gists_url": "https://api.github.com/users/su9204/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/su9204/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/su9204/subscriptions",
      "organizations_url": "https://api.github.com/users/su9204/orgs",
      "repos_url": "https://api.github.com/users/su9204/repos",
      "events_url": "https://api.github.com/users/su9204/events{/privacy}",
      "received_events_url": "https://api.github.com/users/su9204/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T18:04:16Z",
    "updated_at": "2015-05-16T18:04:16Z",
    "author_association": "NONE",
    "body": "How do I label it as Bug?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102712537",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102712537",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102712537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcxMjUzNw==",
    "user": {
      "login": "mortada",
      "id": 1642081,
      "node_id": "MDQ6VXNlcjE2NDIwODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortada",
      "html_url": "https://github.com/mortada",
      "followers_url": "https://api.github.com/users/mortada/followers",
      "following_url": "https://api.github.com/users/mortada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortada/subscriptions",
      "organizations_url": "https://api.github.com/users/mortada/orgs",
      "repos_url": "https://api.github.com/users/mortada/repos",
      "events_url": "https://api.github.com/users/mortada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T23:59:23Z",
    "updated_at": "2015-05-16T23:59:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "For `numpy` arrays, this is the behavior:\n\n```\nIn [1]: import numpy as np\nIn [2]: a = np.array(np.ones(500) * 20150515061816532, dtype='int64')\nIn [3]: a.sum()\nOut[3]: -8371486542801285616\nIn [4]: a.mean()\nOut[4]: 20150515061816532.0\n```\n\nNote that the `sum()` does still overflow, but the `mean()` is done with floating point calculations\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102713288",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102713288",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102713288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcxMzI4OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T00:16:24Z",
    "updated_at": "2015-05-17T00:16:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that we could do the mean calc in np.errstate context manager - and catch the OverFlow (then do the calc as float); u normally have to do this in the same dtype\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102716289",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102716289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102716289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcxNjI4OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T00:48:37Z",
    "updated_at": "2015-05-17T00:48:37Z",
    "author_association": "MEMBER",
    "body": "I agree that we could probably fix `mean` (since it should be done with floating point), but I don't see how we can fix `test1.sum()`, unless we always convert sums to floating point. Otherwise we end up with methods with inconsistent type signatures.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102717579",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102717579",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102717579,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcxNzU3OQ==",
    "user": {
      "login": "su9204",
      "id": 3474325,
      "node_id": "MDQ6VXNlcjM0NzQzMjU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3474325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/su9204",
      "html_url": "https://github.com/su9204",
      "followers_url": "https://api.github.com/users/su9204/followers",
      "following_url": "https://api.github.com/users/su9204/following{/other_user}",
      "gists_url": "https://api.github.com/users/su9204/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/su9204/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/su9204/subscriptions",
      "organizations_url": "https://api.github.com/users/su9204/orgs",
      "repos_url": "https://api.github.com/users/su9204/repos",
      "events_url": "https://api.github.com/users/su9204/events{/privacy}",
      "received_events_url": "https://api.github.com/users/su9204/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T01:01:34Z",
    "updated_at": "2015-05-17T01:02:05Z",
    "author_association": "NONE",
    "body": "I don't see any reason why _sum_ should not be in floating points space. When you need to sum up thousands of large numbers, say, trading volumes (int type) of all stocks across a market, it could potentially overflow. If the user, want int type, he/she can always try after the fact. Trying to maintain the sum in the integer space is simply wrong, and could cause uncaught error, imaging that overflown number get fed into next stage.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102718180",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102718180",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102718180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcxODE4MA==",
    "user": {
      "login": "mortada",
      "id": 1642081,
      "node_id": "MDQ6VXNlcjE2NDIwODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortada",
      "html_url": "https://github.com/mortada",
      "followers_url": "https://api.github.com/users/mortada/followers",
      "following_url": "https://api.github.com/users/mortada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortada/subscriptions",
      "organizations_url": "https://api.github.com/users/mortada/orgs",
      "repos_url": "https://api.github.com/users/mortada/repos",
      "events_url": "https://api.github.com/users/mortada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T01:09:34Z",
    "updated_at": "2015-05-17T01:09:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback it doesn't seem like `np.errstate` would be able to catch int overflow for the reasons mentioned here: http://mail.scipy.org/pipermail/numpy-discussion/2009-April/041691.html \n\n```\nIn [1]: import numpy as np\n\nIn [2]: np.int64(2**62) + np.int64(2**62)\n/Users/mortada_mehyar/anaconda/bin/ipython:1: RuntimeWarning: overflow encountered in long_scalars\n  #!/bin/bash /Users/mortada_mehyar/anaconda/bin/python.app\nOut[2]: -9223372036854775808\n\nIn [3]: np.array([2**62, 2**62], dtype=np.int64)\nOut[3]: array([4611686018427387904, 4611686018427387904])\n\nIn [4]: np.array([2**62, 2**62], dtype=np.int64).sum()\nOut[4]: -9223372036854775808\n```\n\nNote that the last line does not produce a warning because it's an array operation. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102719110",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102719110",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102719110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcxOTExMA==",
    "user": {
      "login": "su9204",
      "id": 3474325,
      "node_id": "MDQ6VXNlcjM0NzQzMjU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3474325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/su9204",
      "html_url": "https://github.com/su9204",
      "followers_url": "https://api.github.com/users/su9204/followers",
      "following_url": "https://api.github.com/users/su9204/following{/other_user}",
      "gists_url": "https://api.github.com/users/su9204/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/su9204/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/su9204/subscriptions",
      "organizations_url": "https://api.github.com/users/su9204/orgs",
      "repos_url": "https://api.github.com/users/su9204/repos",
      "events_url": "https://api.github.com/users/su9204/events{/privacy}",
      "received_events_url": "https://api.github.com/users/su9204/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T01:17:29Z",
    "updated_at": "2015-05-17T01:17:55Z",
    "author_association": "NONE",
    "body": "@mortada @jreback \nEven if np.errstatee could catch this, one possibly should not do it. It is inconsistent. We can't say, ok, let me try this first, it may return you integer, or it may return you float.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102719767",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102719767",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102719767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcxOTc2Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T01:22:59Z",
    "updated_at": "2015-05-17T01:22:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@qqsusu you are missing the point here\nswitching to floats loses precision so you never want to do this unless you have to\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102832821",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102832821",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102832821,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjgzMjgyMQ==",
    "user": {
      "login": "mortada",
      "id": 1642081,
      "node_id": "MDQ6VXNlcjE2NDIwODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortada",
      "html_url": "https://github.com/mortada",
      "followers_url": "https://api.github.com/users/mortada/followers",
      "following_url": "https://api.github.com/users/mortada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortada/subscriptions",
      "organizations_url": "https://api.github.com/users/mortada/orgs",
      "repos_url": "https://api.github.com/users/mortada/repos",
      "events_url": "https://api.github.com/users/mortada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T18:19:26Z",
    "updated_at": "2015-05-17T18:19:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I feel the same way as what @shoyer described above - we could change `mean` to always do floating point calculations. This would be consistent with `numpy` too.\n\nHowever with `sum` it doesn't seem right to always convert to floats. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102833533",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102833533",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102833533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjgzMzUzMw==",
    "user": {
      "login": "mortada",
      "id": 1642081,
      "node_id": "MDQ6VXNlcjE2NDIwODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortada",
      "html_url": "https://github.com/mortada",
      "followers_url": "https://api.github.com/users/mortada/followers",
      "following_url": "https://api.github.com/users/mortada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortada/subscriptions",
      "organizations_url": "https://api.github.com/users/mortada/orgs",
      "repos_url": "https://api.github.com/users/mortada/repos",
      "events_url": "https://api.github.com/users/mortada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T18:32:56Z",
    "updated_at": "2015-05-17T18:32:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@qqsusu here's an example where precision would be lost by doing floats:\n\n```\nIn [1]: import numpy as np\nIn [2]: a = 2 ** 55\nIn [2]: np.int64(a + 10) - np.int64(a)\nOut[2]: 10\n\nIn [3]: np.float64(a + 10) - np.float(a)\nOut[3]: 8.0\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102834383",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102834383",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102834383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjgzNDM4Mw==",
    "user": {
      "login": "mortada",
      "id": 1642081,
      "node_id": "MDQ6VXNlcjE2NDIwODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortada",
      "html_url": "https://github.com/mortada",
      "followers_url": "https://api.github.com/users/mortada/followers",
      "following_url": "https://api.github.com/users/mortada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortada/subscriptions",
      "organizations_url": "https://api.github.com/users/mortada/orgs",
      "repos_url": "https://api.github.com/users/mortada/repos",
      "events_url": "https://api.github.com/users/mortada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T18:46:47Z",
    "updated_at": "2015-05-17T18:46:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about this as a proposal for `sum`:\n\nIf the dtype is int, we compute an additional sum with floats and compare that with the sum using ints. If they are different, we throw a warning. The returned value is still int, the same as before.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102988851",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-102988851",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 102988851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjk4ODg1MQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-18T09:20:38Z",
    "updated_at": "2015-05-18T09:20:38Z",
    "author_association": "MEMBER",
    "body": "> If the dtype is int, we compute an additional sum with floats and compare that with the sum using ints. If they are different, we throw a warning. The returned value is still int, the same as before.\n\nCompute the sum twice for dtype=int? That would be a serious performance regression.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/103025336",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-103025336",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 103025336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzAyNTMzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-18T11:32:26Z",
    "updated_at": "2015-05-18T11:32:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "xref is #9442 (for timedelta, though that is easily handled by other means).\n\nso `mean` is easy, just cast to float, then astype back to the input type if they are equal (the scalar result).\n\nyou might want to see what/if the [bottleneck](https://github.com/kwgoodman/bottleneck) guys do about this. (I suspect they don't do anything as numpy does not do anything).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/103087260",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-103087260",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 103087260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzA4NzI2MA==",
    "user": {
      "login": "mortada",
      "id": 1642081,
      "node_id": "MDQ6VXNlcjE2NDIwODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortada",
      "html_url": "https://github.com/mortada",
      "followers_url": "https://api.github.com/users/mortada/followers",
      "following_url": "https://api.github.com/users/mortada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortada/subscriptions",
      "organizations_url": "https://api.github.com/users/mortada/orgs",
      "repos_url": "https://api.github.com/users/mortada/repos",
      "events_url": "https://api.github.com/users/mortada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-18T14:59:22Z",
    "updated_at": "2015-05-18T14:59:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer yeah definitely a performance hit, especially for something as basic as `.sum()`. Just for the sake of argument, I suppose it's possible to have something like a `verify_results` kwarg that lets the user choose whether to run this check or not. And by default it'd be False. However one can argue that the user can easily just do the floating `sum` check themselves without needing this kwarg. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/103143575",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-103143575",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 103143575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzE0MzU3NQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-18T17:34:45Z",
    "updated_at": "2015-05-18T17:34:45Z",
    "author_association": "MEMBER",
    "body": "@jreback NumPy casts to float for computing mean, but it doesn't convert back to int -- nor should/does pandas:\n\n```\nIn [11]: x = np.arange(11)\n\nIn [12]: x\nOut[12]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])\n\nIn [13]: np.mean(x)\nOut[13]: 5.0\n\nIn [14]: pd.Series(x).mean()\nOut[14]: 5.0\n```\n\nBottleneck does handle `nanmean` properly on integer arrays (no overflow), so this bug in pandas only appears when our implementation of `mean` is used (if bottleneck is not installed). We should probably just be using `np.mean` for integer dtypes, because there's no possibility of missing values with integers.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/103586094",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-103586094",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 103586094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU4NjA5NA==",
    "user": {
      "login": "mortada",
      "id": 1642081,
      "node_id": "MDQ6VXNlcjE2NDIwODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortada",
      "html_url": "https://github.com/mortada",
      "followers_url": "https://api.github.com/users/mortada/followers",
      "following_url": "https://api.github.com/users/mortada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortada/subscriptions",
      "organizations_url": "https://api.github.com/users/mortada/orgs",
      "repos_url": "https://api.github.com/users/mortada/repos",
      "events_url": "https://api.github.com/users/mortada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T16:45:07Z",
    "updated_at": "2015-05-19T16:45:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok I submitted a PR for `mean` (with `sum` unchanged)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/103589806",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-103589806",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 103589806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU4OTgwNg==",
    "user": {
      "login": "su9204",
      "id": 3474325,
      "node_id": "MDQ6VXNlcjM0NzQzMjU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3474325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/su9204",
      "html_url": "https://github.com/su9204",
      "followers_url": "https://api.github.com/users/su9204/followers",
      "following_url": "https://api.github.com/users/su9204/following{/other_user}",
      "gists_url": "https://api.github.com/users/su9204/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/su9204/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/su9204/subscriptions",
      "organizations_url": "https://api.github.com/users/su9204/orgs",
      "repos_url": "https://api.github.com/users/su9204/repos",
      "events_url": "https://api.github.com/users/su9204/events{/privacy}",
      "received_events_url": "https://api.github.com/users/su9204/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T16:54:30Z",
    "updated_at": "2015-05-19T16:55:17Z",
    "author_association": "NONE",
    "body": "We still need to raise an OverflowError for the sum overflow when it occurs. As long  as things does not fail silently, it should be Ok.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/103590948",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-103590948",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 103590948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU5MDk0OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T16:59:31Z",
    "updated_at": "2015-05-19T16:59:31Z",
    "author_association": "MEMBER",
    "body": "@qqsusu How would you propose checking for sum overflow? Numpy's sum [notes](http://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html): \"Arithmetic is modular when using integer types, and no error is raised on overflow.\"\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/103598916",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-103598916",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 103598916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU5ODkxNg==",
    "user": {
      "login": "su9204",
      "id": 3474325,
      "node_id": "MDQ6VXNlcjM0NzQzMjU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3474325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/su9204",
      "html_url": "https://github.com/su9204",
      "followers_url": "https://api.github.com/users/su9204/followers",
      "following_url": "https://api.github.com/users/su9204/following{/other_user}",
      "gists_url": "https://api.github.com/users/su9204/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/su9204/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/su9204/subscriptions",
      "organizations_url": "https://api.github.com/users/su9204/orgs",
      "repos_url": "https://api.github.com/users/su9204/repos",
      "events_url": "https://api.github.com/users/su9204/events{/privacy}",
      "received_events_url": "https://api.github.com/users/su9204/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T17:16:08Z",
    "updated_at": "2015-05-19T17:18:25Z",
    "author_association": "NONE",
    "body": "@shoyer I am just throwing out some thinking / pseudo code here:\nassuming data type int64,\nsum = // some number; assuming sum > 0 here, one can check for negative sum as well.\ninside the loop, for each number x to be added to sum\nif( x > INT64_MAX - sum) {\n   raise OverflowError;\n} else {\n  sum += x;\n}\n\n//continue;\n\nsimilar logic, for adding two numbers, x and y\n\nif (x > INT64_MAX - y) {\n   raise error;\n} else {\n   return x + y;\n}\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/103600567",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10155#issuecomment-103600567",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10155",
    "id": 103600567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzYwMDU2Nw==",
    "user": {
      "login": "mortada",
      "id": 1642081,
      "node_id": "MDQ6VXNlcjE2NDIwODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortada",
      "html_url": "https://github.com/mortada",
      "followers_url": "https://api.github.com/users/mortada/followers",
      "following_url": "https://api.github.com/users/mortada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortada/subscriptions",
      "organizations_url": "https://api.github.com/users/mortada/orgs",
      "repos_url": "https://api.github.com/users/mortada/repos",
      "events_url": "https://api.github.com/users/mortada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T17:21:08Z",
    "updated_at": "2015-05-19T17:21:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@qqsusu as I mentioned in a comment above, this wouldn't actually be feasible because it'd be a huge performance hit, and that's why numpy also does not raise on int overflow for the array case. You can find the explanation here: \n\nhttp://mail.scipy.org/pipermail/numpy-discussion/2009-April/041691.html\n\n```\nUnlike true floating point errors (where the hardware FPU sets a flag\nwhenever it does an atomic operation that overflows), we need to\nimplement the integer overflow detection ourselves. We do it on the\nscalars, but not arrays because it would be too slow to implement for\nevery atomic operation on arrays.\n```\n"
  }
]
