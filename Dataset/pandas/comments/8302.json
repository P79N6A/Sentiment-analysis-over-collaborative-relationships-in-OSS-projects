[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57405988",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8302#issuecomment-57405988",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8302",
    "id": 57405988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDA1OTg4",
    "user": {
      "login": "staple",
      "id": 307174,
      "node_id": "MDQ6VXNlcjMwNzE3NA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/307174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/staple",
      "html_url": "https://github.com/staple",
      "followers_url": "https://api.github.com/users/staple/followers",
      "following_url": "https://api.github.com/users/staple/following{/other_user}",
      "gists_url": "https://api.github.com/users/staple/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/staple/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/staple/subscriptions",
      "organizations_url": "https://api.github.com/users/staple/orgs",
      "repos_url": "https://api.github.com/users/staple/repos",
      "events_url": "https://api.github.com/users/staple/events{/privacy}",
      "received_events_url": "https://api.github.com/users/staple/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-01T01:03:15Z",
    "updated_at": "2014-10-01T01:03:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, I'd like to take a crack at this one.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57540413",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8302#issuecomment-57540413",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8302",
    "id": 57540413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTQwNDEz",
    "user": {
      "login": "staple",
      "id": 307174,
      "node_id": "MDQ6VXNlcjMwNzE3NA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/307174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/staple",
      "html_url": "https://github.com/staple",
      "followers_url": "https://api.github.com/users/staple/followers",
      "following_url": "https://api.github.com/users/staple/following{/other_user}",
      "gists_url": "https://api.github.com/users/staple/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/staple/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/staple/subscriptions",
      "organizations_url": "https://api.github.com/users/staple/orgs",
      "repos_url": "https://api.github.com/users/staple/repos",
      "events_url": "https://api.github.com/users/staple/events{/privacy}",
      "received_events_url": "https://api.github.com/users/staple/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-01T21:19:22Z",
    "updated_at": "2014-10-01T21:19:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "It looks like most aggregation functions are implemented in NDFrame and accept standardized arguments. All and any, however, are implemented separately in Series (via IndexOpsMixin) and DataFrame. The Series implementations forward to the corresponding numpy implementations, and so accept a different set of arguments.\n\nCurrently most of the aggregation functions accept something like:\naxis, skipna, level, numeric_only, *kwargs\nhttp://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.sum.html\n(there are minor differences between functions)\n\nWhile any/all accept:\naxis, out, keepdims\nhttp://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.any.html\nhttp://docs.scipy.org/doc/numpy/reference/generated/numpy.any.html\n\nThe request in this ticket is for any/all to accept the level argument. It seems like we might want to implement any/all the same way the other aggregation functions are implemented in NDFrame rather than as thin wrappers around the numpy implementations. Would it make sense to:\n\n1) Make any/all support the union of argument accepted by numpy and the standard aggregation functions.\nor\n2) Deprecate support for the numpy only arguments, and only support the standard aggregation arguments. (This means deprecating support for ‘out’ and ‘keepdims’.) There seems to be some precedent for this option, as for example Series.sum does not accept 'out' and 'keepdims' while ndarray.sum does. In a very cursory scan I didn’t see any cases where pandas internally depends on using the out and keepdims arguments on Series’ any/all.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57544396",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8302#issuecomment-57544396",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8302",
    "id": 57544396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTQ0Mzk2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-01T21:46:39Z",
    "updated_at": "2014-10-01T21:46:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@staple `any/all` is just historical that they just forward to the numpy accessors. You can simply write them _llike_ `sum/mean/etc` (eg.. use a function generator) and accept these level. no need to deprecate anything. (just accept `**kwargs` for compat). These also can be different (and should be)\n\n`skipna` doesn't make any sense (these are boolean arrays ater all).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57596704",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8302#issuecomment-57596704",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8302",
    "id": 57596704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTk2NzA0",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-02T08:14:33Z",
    "updated_at": "2014-10-02T08:14:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm also not sure if `numeric_only` makes sense for them.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57926815",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8302#issuecomment-57926815",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8302",
    "id": 57926815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTI2ODE1",
    "user": {
      "login": "staple",
      "id": 307174,
      "node_id": "MDQ6VXNlcjMwNzE3NA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/307174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/staple",
      "html_url": "https://github.com/staple",
      "followers_url": "https://api.github.com/users/staple/followers",
      "following_url": "https://api.github.com/users/staple/following{/other_user}",
      "gists_url": "https://api.github.com/users/staple/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/staple/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/staple/subscriptions",
      "organizations_url": "https://api.github.com/users/staple/orgs",
      "repos_url": "https://api.github.com/users/staple/repos",
      "events_url": "https://api.github.com/users/staple/events{/privacy}",
      "received_events_url": "https://api.github.com/users/staple/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-05T05:00:12Z",
    "updated_at": "2014-10-05T05:00:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I noticed that in DataFrame's any / all, there is an implementation for parameters `skipna` and `numeric_only`. My guess is it will make sense to generalize this implementation into NDFrame, preserving the `skipna` and `numeric_only` arguments and thereby making them available for Series as well.\n\nAdditionally, we can continue to support Series' existing special arguments from ndarray.any/all via kwargs, which will allow named arguments to be handled the way they were before. But unnamed arguments, for example, `series.all(0, type(True), g, True)` will not behave the same. This might not be a big deal, but I wanted to at least check to see if an api change like this requires any special actions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57940792",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8302#issuecomment-57940792",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8302",
    "id": 57940792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTQwNzky",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-05T15:58:26Z",
    "updated_at": "2014-10-05T15:58:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@staple \n\nok, start by moving `DataFrame.any/all` to `core/generic.py` this exposes them generally (and I think they will simply work), but you will need to define them like `.sum/.mean` etc are defined (e.g. in `make_stat_function`(its possible you will need to define a new function, say `make_stat_bool_function` to handle this slightly differently), try to conform to how `any/all` work now.\n\nThen, in `core/base.py` you can remove this `_unbox` stuff, and define `any/all` which will ONLY apply to `Index` (fyi, prob no tests for this). as the `Series` definition will be taken from `core/generic.py` (its defined after the `core/base.py`)\n\nso this definitely needs cleanup as was never done originally.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58928083",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8302#issuecomment-58928083",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8302",
    "id": 58928083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTI4MDgz",
    "user": {
      "login": "staple",
      "id": 307174,
      "node_id": "MDQ6VXNlcjMwNzE3NA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/307174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/staple",
      "html_url": "https://github.com/staple",
      "followers_url": "https://api.github.com/users/staple/followers",
      "following_url": "https://api.github.com/users/staple/following{/other_user}",
      "gists_url": "https://api.github.com/users/staple/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/staple/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/staple/subscriptions",
      "organizations_url": "https://api.github.com/users/staple/orgs",
      "repos_url": "https://api.github.com/users/staple/repos",
      "events_url": "https://api.github.com/users/staple/events{/privacy}",
      "received_events_url": "https://api.github.com/users/staple/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-13T17:41:14Z",
    "updated_at": "2014-10-13T17:41:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, please see my PR https://github.com/pydata/pandas/pull/8550\n"
  }
]
