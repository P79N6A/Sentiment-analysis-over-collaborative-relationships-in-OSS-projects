[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429536056",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-429536056",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 429536056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTUzNjA1Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T11:57:32Z",
    "updated_at": "2018-10-13T11:57:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pandas-dev/pandas-core here's a proposal: Everything goes at the top level.\r\n\r\n1. That's one extra `*_array` per array.\r\n2. One extra Dtype per array (more for IntegerArray)\r\n3. (Maybe) add the actual Array itself to the top-level.\r\n\r\n---\r\n\r\nThis is consistent with Categorical and SparseArray, meaning we wouldn't have to deprecate those if we want all the arrays in one place.\r\n\r\nI'm concerned about nesting them in `pandas.api.types.extensions.*` In the past, users have had reservations about reaching that far into pandas' namespace. I think that's fine for library developers subclassing ExtensionArray, but not for interactive use.\r\n\r\nSo we add\r\n\r\n1. categorical_array\r\n2. CategoricalDtype\r\n3. period_array\r\n4. PeriodDtype\r\n5. datetime_array\r\n6. DatetimeDtype\r\n7. sparse_array\r\n8. interval_array\r\n9. IntervalDtype\r\n10. integer_array\r\n11. IntegerDtype(...) (several of theses)\r\n\r\n\r\nI don't think we need a timedelta_array / TimedeltaDtype in the public API. These shouldn't be user-facing at all.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429557194",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-429557194",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 429557194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU1NzE5NA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T16:52:38Z",
    "updated_at": "2018-10-13T16:52:38Z",
    "author_association": "MEMBER",
    "body": "> Do users see these when they do .values or any operation returning an array\r\n\r\nI would be ecstatic if we got to a place where a) `.values` always points to an EA, or at least a lossless non-costly array and b) `._values` were rendered unnecessary.  Even better if `.get_values()` also become a synonym.\r\n\r\n> or a top-ish-level pd.array([...], dtype) method)?\r\n\r\nA lot of the pandas-internal EA code could be simplified if there were something analogous to `Index.__new__` that returned the appropriately-typed array"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429627828",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-429627828",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 429627828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTYyNzgyOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T13:46:50Z",
    "updated_at": "2018-10-14T13:46:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think we should leave the dtypes themselves in pandas.api.types\r\n\r\nno objection to the *_array in the pandas namespace"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429650038",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-429650038",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 429650038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTY1MDAzOA==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T18:28:27Z",
    "updated_at": "2018-10-14T18:28:27Z",
    "author_association": "MEMBER",
    "body": "+1 on making these public in general.\r\n\r\n>  8. interval_array\r\n\r\nThis does not currently exist and I'm a little confused as to what it would look like if implemented.  I understand how this makes sense for the non-interval EA's, as they are usually constructed in a fairly direct manner.  With intervals, my impression is that users have generally been using the `IntervalIndex.from_*` methods as opposed to the constructor itself, and I imagine the same will hold for `IntervalArray`.\r\n\r\nSeems like trying to support all these construction methods in a single `interval_array` function would be a bit convoluted.  Or am I missing something here?  If not, my preference would be to expose the actual `IntervalArray` class itself.\r\n\r\n> I think we should leave the dtypes themselves in pandas.api.types\r\n\r\nI agree, these don't seem to provide much additional utility in general. We could maybe make an exception for `CategoricalDtype` though, as it's useful for creating non-default categoricals via `astype`; this is what the [docs](https://pandas.pydata.org/pandas-docs/stable/categorical.html#controlling-behavior) recommend as well.  The other dtypes don't have similar non-default behavior iirc, so should be fine just directing users to the string equivalent when specifying dtypes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429650920",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-429650920",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 429650920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTY1MDkyMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T18:39:51Z",
    "updated_at": "2018-10-14T18:39:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with @jschendel that CategoricalDtype is especially useful on its own and should be in the top-level namespace."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429651034",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-429651034",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 429651034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTY1MTAzNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T18:41:20Z",
    "updated_at": "2018-10-14T18:41:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also agreed that IntervalArray's alternative constructors are especially useful, and conflating them in a single `interval_array` method isn't a great idea."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436443057",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436443057",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436443057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQ0MzA1Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T23:09:59Z",
    "updated_at": "2018-11-06T23:09:59Z",
    "author_association": "MEMBER",
    "body": "> That's one extra *_array per array.\r\n\r\nI have the feeling that adding a function for each array type is some API bloat. I think it would be nice to restrict ourselves to a general `array(..)` function, if that would be sufficient. It is eg also what `pyarrow` has to convert python array-likes (pure python/numpy/pandas containers) to an arrow array. \r\n\r\nI suppose the main drawback of having a single function vs specialized functions for each array is the ability of having additional kwargs? (eg `freq` for `period_array`, or `tz` for `datetime_array`)\r\n\r\nFurther, I think we also need to discuss and somewhat define the \"scope\" of those `.._array()` functions. Although it might differ for each data type, I think we should have some general idea on this. \r\nFor example, is this function expected to do parsing of strings? (`period_array` does a limited form (only default format), `integer_array` does not; of course for periods this is a more typical use case) Is this function expected to accept \"low-level values\" (eg ordinals for `period_array`, ints for `datetime_array`) ...\r\n\r\nI think for me the core use case that should certainly be covered is the round trip to/from \"python objects\" (so something like `pd.array(np.asarray(EA, dtype=object), dtype=EA.dtype)` should always work). Kind of the public version of `_from_sequence`. \r\nBut strictly this use case is of course more limited than eg what `period_array` already can do.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436444542",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436444542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436444542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQ0NDU0Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T23:16:09Z",
    "updated_at": "2018-11-06T23:16:09Z",
    "author_association": "MEMBER",
    "body": "Another remark about where to put them in our API: I don't think those belong in `pandas.api.extension`. \r\nYes, we call them ExtensionArrays, and they are *extending* the numpy arrays, but they are a fundamental part of pandas, not a kind of secondary extension of pandas. For me, `pandas.api.extension` exposes the API for external people to *extend pandas*. \r\n\r\nFrom the existing submodules, I would say that `pandas.api.types` is more fitting, but we might also consider adding something like `pandas.api.arrays` or even `pandas.arrays` (although that might feel strange to put the dtype objects)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436456784",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436456784",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436456784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQ1Njc4NA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T00:15:00Z",
    "updated_at": "2018-11-07T00:15:00Z",
    "author_association": "MEMBER",
    "body": "> Yes, we call them ExtensionArrays, and they are extending the numpy arrays, but they are a fundamental part of pandas, not a kind of secondary extension of pandas.\r\n\r\n+1 on being clear about this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436603378",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436603378",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436603378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjYwMzM3OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T12:11:09Z",
    "updated_at": "2018-11-07T12:13:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "On the idea of a single `pd.array()` function, that's fine, but would require adding all of the types to the top-level so that users can easily do\r\n\r\n```python\r\narr = pd.array([1, 2, 3], type=pd.Int64())\r\n```\r\n\r\n- Categorical: fine. Requires a bit more typing to get `CategoricalDtype(..., ordered=...)`\r\n- Integer: fine, unless we want to accept a mask for the missing / valid values\r\n- period: fine\r\n- Sparse: not great, since the main SparseArray constructor accepts `sparse_index` and `kind` (and `index` which was want to remove).\r\n- Interval: not being considered? Since it requires the alternative constructors?\r\n- Datetime: Probably not sufficient, if we want to handle `errors`, `dayfirst`, `year first`, `utc`, etc.\r\n\r\nI'd really like to avoid `pd.array(data, type, **kwargs)` if we can avoid it...\r\n\r\nI think that a simple `array(data, type)` would suffice for categorical, period, integer (unless we want to support a `mask=` argument like pyarrow), datetime / timedelta, sparse."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436604221",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436604221",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436604221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjYwNDIyMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T12:14:48Z",
    "updated_at": "2018-11-07T12:14:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I hate `.api` every time I type it. Python has a way of saying somethings in the API: it doesn't start with an underscore :)\r\n\r\nSo what do people think? `pandas.array(...)` or `pandas[.api].arrays.period_array, pandas[.api].arrays.integer_array, ...`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436670424",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436670424",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436670424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjY3MDQyNA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T15:49:56Z",
    "updated_at": "2018-11-07T15:49:56Z",
    "author_association": "MEMBER",
    "body": "what do I get if I write `arr = pd.array([2.0, 3.5], dtype='f8')`?  i.e. do we raise or just return a numpy array?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436674013",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436674013",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436674013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjY3NDAxMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T15:58:56Z",
    "updated_at": "2018-11-07T15:58:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "numpy array I would assume.\n\nOn Wed, Nov 7, 2018 at 9:50 AM jbrockmendel <notifications@github.com>\nwrote:\n\n> what do I get if I write arr = pd.array([2.0, 3.5], dtype='f8')? i.e. do\n> we raise or just return a numpy array?\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436670424>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIq00zi6gcJZ894vDNG4OVH-xQG0dks5uswErgaJpZM4W9Utk>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436998809",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436998809",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436998809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjk5ODgwOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T13:46:34Z",
    "updated_at": "2018-11-08T13:46:34Z",
    "author_association": "MEMBER",
    "body": "> On the idea of a single pd.array() function, that's fine, but would require adding all of the types to the top-level\r\n\r\nSomehow this is maybe fine, as we then not have a bunch of `.._array` functions top-level and could have the dtypes top-level instead.\r\n\r\n> Integer: fine, unless we want to accept a mask for the missing / valid values\r\n\r\nUnless we are fine with a `mask` argument for all? (like `pyarrow.array(..)` has). It's probably mainly useful for integer though ..\r\n\r\n> Datetime: Probably not sufficient, if we want to handle errors, dayfirst, year first, utc, etc.\r\n\r\nFor that we already have `to_datetime`?\r\n\r\nRelated to that, want to repeat my question of above (https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436443057) on the \"scope\" of those functions. Should a `datetime_array` or `array` function be able to handle errors, parse custom formats, etc like `to_datetime` and `DatetimeIndex` now do? Or maybe we can simply keep it on actual datetime-like scalar objects (numpy scalars, pd.Timestamp, datetime.datetime), since we already have `to_datetime` to do string parsing.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436999385",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-436999385",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 436999385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjk5OTM4NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T13:48:29Z",
    "updated_at": "2018-11-08T13:48:29Z",
    "author_association": "MEMBER",
    "body": ">  Requires a bit more typing to get CategoricalDtype(..., ordered=...)\r\n\r\nWould something like `pd.array(..., dtype=pd.types.categorical(ordered=True))` be less typing / easier to read? (note the factory function instead of class constructor, but put it in a `types` submodule as top-level this might be confusing)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437028782",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-437028782",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 437028782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzAyODc4Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T15:08:31Z",
    "updated_at": "2018-11-08T15:08:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Somehow this is maybe fine, as we then not have a bunch of .._array functions top-level and could have the dtypes top-level instead.\r\n\r\nYeah, I think it would be one or the other (except for IntervalArray, which will be special).\r\n\r\n> Unless we are fine with a mask argument for all? (like pyarrow.array(..) has). It's probably mainly useful for integer though ..\r\n\r\nWhen you say \"mainly useful for integer\", you mean mainly useful\r\n\r\n> [...] scope [...]\r\n\r\nI'm not sure what's best here. I think list / object array of scalars, clearly. For convenience, I think unboxing Series / Index, and idempotenecy is nice. So all of\r\n\r\n- `pd.array(Series[period])`\r\n- `pd.array(Index[period])`\r\n- `pd.array(a_period_array)`\r\n\r\nwould work.\r\n\r\n> pd.array(..., dtype=pd.types.categorical(ordered=True))\r\n\r\nTo be clear, you can do `dtype=CategoricalDtype(ordered=True)`, and the categories will be inferred from the data. I would favor that over a new `.types.categorical(...)` method."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437029789",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-437029789",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 437029789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzAyOTc4OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T15:11:25Z",
    "updated_at": "2018-11-08T15:11:25Z",
    "author_association": "MEMBER",
    "body": "> To be clear, you can do dtype=CategoricalDtype(ordered=True), and the categories will be inferred from the data\r\n\r\nYep, I know, I was only looking at readability / writability of `dtype=pd.api.types.CategoricalDtype(ordered=True)` vs `dtype=pd.types.categorical(ordered=True)`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437031147",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-437031147",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 437031147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzAzMTE0Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T15:14:59Z",
    "updated_at": "2018-11-08T15:14:59Z",
    "author_association": "MEMBER",
    "body": "> For convenience, I think unboxing Series / Index, and idempotenecy is nice. So all of\r\n\r\nYes, for sure that as well (next to the list of scalars). \r\nBut we could opt to keep it at those two cases: list of scalars (and of course some \"coercion\" can be done like int to float or round float to int) and unboxing containers that already have the dtype (without the more advanced parsing)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437414185",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-437414185",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 437414185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQxNDE4NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T16:28:08Z",
    "updated_at": "2018-11-09T16:28:08Z",
    "author_association": "MEMBER",
    "body": "One additional thing that we didn't really discuss yet: I think the idea for now is that this will also return *numpy* arrays. \r\n\r\nThere are clear advantages of having that behaviour (knowing that you can give it any data and will give you a usable array-like regardless of the data type and this being what would otherwise also be stored in a Series if you passed it there). \r\nBut it can also give dubious cases that we need to discuss:\r\n\r\n* What should be the return value of `pd.array([1, 2, 3])` ? numpy array or IntegerArray ?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437415162",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-437415162",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 437415162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQxNTE2Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T16:31:10Z",
    "updated_at": "2018-11-09T16:31:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "We mentioned it briefly on the call, and Jeff was for it returning ndarrays.\r\n\r\n> pd.array([1, 2, 3]) ? numpy array or IntegerArray ?\r\n\r\nIn https://github.com/pandas-dev/pandas/pull/23581/files#diff-69ac57923b848af43df327c311b79db4R18 we have a nice, succinct description of what `dtype` does. If you don't specify it, the dtype is inferred from `np.array()`. I'd like to be out of the inference business as much as possible, and determining that `[1, 2, 3]` should be an IntegerArray would require looking into the data."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437418041",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-437418041",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 437418041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQxODA0MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T16:40:02Z",
    "updated_at": "2018-11-09T16:40:02Z",
    "author_association": "MEMBER",
    "body": "> I'd like to be out of the inference business as much as possible,\r\n\r\nAlso not for built-in EAs? \r\nFor example, passing a list/array of Period objects could easily be detected and converted into a PeriodArray."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437418528",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-437418528",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 437418528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQxODUyOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T16:41:32Z",
    "updated_at": "2018-11-09T16:41:32Z",
    "author_association": "MEMBER",
    "body": "> would require looking into the data.\r\n\r\nYes, but only if there is no `dtype` provided (and anyway, then it's numpy that looks into the data). We have a `infer_dtype` that works nicely for this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437420473",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22860#issuecomment-437420473",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22860",
    "id": 437420473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQyMDQ3Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T16:47:52Z",
    "updated_at": "2018-11-09T16:47:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm yea, you're right. It would be strange for `Series[List[Period]]` to be a Period dtype, but pd.array(List[Period]])` to not.... So we'll need to do some inference...\r\n\r\nOK, two problems then: that'll put pandas EAs on a different level from 3rd party EAs (unless we let `infer_dtype` be extensible, but I don't think that's easily possible).\r\n\r\nAnd then the problem of `array([1, 2, 3])`. Let's just follow series here?"
  }
]
