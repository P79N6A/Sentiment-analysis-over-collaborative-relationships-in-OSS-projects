[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61455172",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8717#issuecomment-61455172",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8717",
    "id": 61455172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDU1MTcy",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-03T09:35:24Z",
    "updated_at": "2014-11-03T09:35:24Z",
    "author_association": "MEMBER",
    "body": "@jreback Once you have `df`, doing the original `df.loc[df.groupby(level='host').idxmax()['no']]` looks more clear (or more self-explaining) to me personally than the alternatives you propose.  \n\nBut, thinking more in general, I think this would be a kind of `filter` method. Not the `filter` we have now (filter whole groups), but one that filters rows within groups (with a specific filter criterium depending on the group). \nThat is something I always felt confusing with `groupby().filter()` to remember which of the two types it was.\n\n```\n# accepting function applied on each group returning True/False for each row\ndf.groupby().filter_within_group(lambda x: x['col'] > x['col'].mean())\n\n# accepting function applied on each group returning labels of the index to include\n# (could these both types be in one function?)\ndf.groupby().filter_within_group(lambda x: x['col'].idxmax())\n```\n\nBut maybe `.loc()` would be a good name for that, or something like `.select()`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61466610",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8717#issuecomment-61466610",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8717",
    "id": 61466610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDY2NjEw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-03T11:39:21Z",
    "updated_at": "2014-11-03T11:39:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "`df.groupby(..).filterby(lambda x: x['col'].idxmax())`\n`df.groupby(..).where(lambda x: x['col'].idxmax())`\n\nnot sure we can do this w/o the lamda, though maybe\n\n`df.groupby(..).where('idxmax',column='col')`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61472878",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8717#issuecomment-61472878",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8717",
    "id": 61472878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDcyODc4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-03T12:48:17Z",
    "updated_at": "2014-11-03T12:48:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "SQL calls this `HAVING`, so:\n\n`df.groupby(..).having(lambda x: x['col'].idxmax())`\n\nI think I like this the best or `.where`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61478849",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8717#issuecomment-61478849",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8717",
    "id": 61478849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDc4ODQ5",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-03T13:47:14Z",
    "updated_at": "2014-11-03T13:49:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would `.having` or `.where` return a GroupBy object (a subset of the original? GroupBy) This is something I've found a bit difficult in pandas. Filtering (subselecting) a DataFrame based on a groupwide calculation, and aggregating / transformaing them. e.g. Taking the groupwise minimum of those above the groupwise mean.\n\n```\ndf.groupby('group_col').having(lambda x: x > x.mean()).min()\n```\n\nwould be better than the current\n\n```\ndf.groupby('group_col').filter(lambda x: x > x.mean()).groupby('group_col').min()\n```\n\nwhich requires a second groupby. I didn't test that specific example btw.\n"
  }
]
