[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/395636458",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21373#issuecomment-395636458",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21373",
    "id": 395636458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTYzNjQ1OA==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T03:38:02Z",
    "updated_at": "2018-06-08T03:38:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd be happy to see pandas using interface. It's a pretty lightweight dependency, and we've been using it fairly happily for internal projects at Quantopian for while now.\r\n\r\nOne thing that might be worth thinking about is what using interface would mean for cross-pandas-version compatibility for ExtensionArray authors. If pandas added a new required method/attribute to the ExtensionArray interface, for example, would you want older versions of ExtensionArray-implementing packages to crash at import time if they're run in an enviroment with a newer version of pandas? That might be preferable to crashing later at \"runtime\" when pandas tries to call a method that's not defined, but we should make sure that that's the behavior we want here."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/395834903",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21373#issuecomment-395834903",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21373",
    "id": 395834903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTgzNDkwMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T17:41:25Z",
    "updated_at": "2018-06-08T17:41:25Z",
    "author_association": "MEMBER",
    "body": "> One thing that might be worth thinking about is what using interface would mean for cross-pandas-version compatibility for ExtensionArray authors.\r\n\r\nI think we want that extension authors can implement ExtensionArrays that are compatible with multiple versions of pandas. Of course you can still add or not a method to the class based on the pandas version, but that makes it a bit more complex.\r\n\r\nHowever, the restriction on the exact signature seems more annoying when we change that between versions.\r\n\r\n(so it seems `interface` is maybe more suited to be used *within* package)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/395842058",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21373#issuecomment-395842058",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21373",
    "id": 395842058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTg0MjA1OA==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T18:05:39Z",
    "updated_at": "2018-06-08T18:05:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interface doesn't necessarily require the *exact* signature to match: it requires that the implementation method can be called in any way that would be a valid call for the method declared in the interface. So, for example, your implementation can add an additional parameter to the method if it provides a default:\r\n\r\n```python\r\nIn [1]: from interface import *\r\n\r\nIn [2]: class IFoo(Interface):\r\n   ...:     def method(self, a, b):\r\n   ...:         pass\r\n   ...:\r\n\r\nIn [3]: class Impl(implements(IFoo)):\r\n   ...:     def method(self, a, b, c=3):\r\n   ...:         pass\r\nIn [4]:\r\n```\r\nbut this will cause an error:\r\n\r\n```python\r\nIn [4]: class Impl(implements(IFoo)):\r\n   ...:     def method(self, a, b, c):\r\n   ...:         pass\r\n   ...:\r\n   ...:\r\n---------------------------------------------------------------------------\r\nInvalidImplementation                     Traceback (most recent call last)\r\n... (stack trace omitted)\r\nInvalidImplementation:\r\nclass Impl failed to implement interface IFoo:\r\n\r\nThe following methods of IFoo were implemented with invalid signatures:\r\n  - method(self, a, b, c) != method(self, a, b)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/395845324",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21373#issuecomment-395845324",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21373",
    "id": 395845324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTg0NTMyNA==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T18:17:07Z",
    "updated_at": "2018-06-08T18:17:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the interesting question w/r/t cross-version compatibility is **when** you want an error to be raised if an ExtensionArray implementation doesn't match the required interface. Do you want that to be an import-time failure, or a runtime failure? \r\n\r\nIf you control both the implementation and the interface, my experience has generally been that you want to be informed about failures as early as possible, because that reduces the possibility for latent bugs lurking in untested codepaths. \r\n\r\nThings get a little murkier once you start splitting implementations and interfaces across libraries. Turning a bad implementation into a runtime failure means that a user can't use *any* features of the broken library, even though it might be the case that only *some* of the features are actually broken. Some users might be happy to make that trade-off in exchange for extra safety guarantees (it's probably the trade-off that I would want if I wrote an ExtensionArray that was used at Quantopian for example), but others might prefer if we were less strict."
  }
]
