[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51111581",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51111581",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51111581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTExNTgx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T20:18:09Z",
    "updated_at": "2014-08-04T20:18:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "groupby first calls the function as a DataFrame (to evaluate it as a single block)\n\nthen will call it series by series if that doesn't work\n\nI don't think this is a bug but rather state being captured in the closure\n\nbut u would have to step thru and see\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51112360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51112360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51112360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTEyMzYw",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T20:24:24Z",
    "updated_at": "2014-08-04T20:24:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "What does \"it doesn't work\" mean here?  In each case, the `how` function is called exactly once, _and it's called with a different type object_.  So it's definitely not branching on anything that function is doing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51115778",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51115778",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51115778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTE1Nzc4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T20:51:25Z",
    "updated_at": "2014-08-04T20:51:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, a very odd bug\n\nso, every function has a `__name__` attribute, but:\n\n`partial(f,...)` does not, this ends up raising internally and takes another path (that is wrong).\n\nThe reason for this is convience feature I think something like this:\n\n```\ndf = DataFrame({'foo' : [1,2], 'bar' :[3,4]})\ndf.groupby('foo').aggregate([np.sum,lambda x: x+1])\n```\n\ne.g. it figures out the name of the `np.sum` function is `sum` (duh!). the lambdas name is '<lambda>'\nbut a partial function doesn't have a name (not sure why)...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51116026",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51116026",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51116026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTE2MDI2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T20:53:30Z",
    "updated_at": "2014-08-04T20:53:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dsm054 want to take a stab at fixing?\n\nsearch for `__name__` and need to deal with that if doesn't exist. Could see if its a partial then look inside the partial to get the name I guess.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51118716",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51118716",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51118716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTE4NzE2",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T21:15:09Z",
    "updated_at": "2014-08-04T21:15:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Class instances don't have a default `__name__`, so `functools.partial` instances aren't different from any other class which supports `__call__`.  We shouldn't care what's providing us an answer, only that it does..\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51123706",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51123706",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51123706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTIzNzA2",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T21:57:40Z",
    "updated_at": "2014-08-04T21:57:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, I've got a working branch with tests, but am I alone in thinking the API for this is actually a little strange?  If I pass a `lambda` or a `partial` I don't really have a good way of changing the name, because the dict syntax is already being used to mean columns.  Anyway, setting that aside:\n\n(1) What do we want to do for names of things which don't really have them?  At the moment we can't pass multiple lambdas.\n\n(2) Is there a good place to toss a small utility function like `get_callable_name`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51124633",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51124633",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51124633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTI0NjMz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T22:05:51Z",
    "updated_at": "2014-08-04T22:05:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "The problem is that they NEED to be put in a dict ATM, somewhat related here: https://github.com/pydata/pandas/issues/6515\n\nI think it might be better to simply number the columns if they don't have a name (and de-annomize the lambdas too).\n\ne.g. my example above with `[np.sum, lambda x: x+1]` instead of yielding `['sum','<lambda>']`\nreally should yield `['sum',1]` I think (or maybe `['sum',0]`)\n\nor maybe `['sum','aggregate_1']`\n\nI think this is why @wesm punted on this, have to name them _something_.\n\n1) dunno (but if you create a naming scheme then you prob _can_ have multiple lambdas)\n2) maybe `core/common.py`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51126032",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51126032",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51126032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTI2MDMy",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T22:19:57Z",
    "updated_at": "2014-08-04T22:19:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "We could add a layer of nesting, e.g. `{\"neat_name\": {\"foo\": sum}, \"neat_name2\": {\"bar\": lambda x: x.sum()}}` but even though that seems natural enough to me it does flip the meaning of the outermost keys.  Probably better to leave it alone, and add a different method if necessary.\n\nIf we're fixing duplicate names of the empty variety, should we also allow multiple sums (e.g. `sum`, `np.sum`) and use the same convention applied to duplicate columns when reading (e.g. `sum, sum.1`)?  If so, then the result of passing `sum, np.sum, lambda x: x.sum()` will be `sum`, `sum.1`, `aggregate_0` (or 1?), which I could live with.  If those columns have duplicates (say, because you already have a column with one of those names), then simply raise and leave it to the user to fix.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51128255",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51128255",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51128255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTI4MjU1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T22:44:40Z",
    "updated_at": "2014-08-04T22:45:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep, I would be ok with `aggregate_0`, maybe could allow a `Series` which solves the problem nicely\n\n`df.groupby(....).agg(Series([np.sum,sum,lambda x:x.sum()],['numpy_num','reg_sum','lambda_sum']))`\n\nor a dict too (I don't think you need a _nested_ dict?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51701914",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51701914",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51701914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzAxOTE0",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-09T23:56:49Z",
    "updated_at": "2014-08-09T23:56:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like the Series idea.  Any objection to my submitting a PR to fix the original bug first, and then opening a followup ENH?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51702342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7929#issuecomment-51702342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7929",
    "id": 51702342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzAyMzQy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-10T00:25:53Z",
    "updated_at": "2014-08-10T00:25:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "sure on both counts!\n"
  }
]
