[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8716653",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1939#issuecomment-8716653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1939",
    "id": 8716653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTY2NTM=",
    "user": {
      "login": "chrisjbillington",
      "id": 1044087,
      "node_id": "MDQ6VXNlcjEwNDQwODc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1044087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisjbillington",
      "html_url": "https://github.com/chrisjbillington",
      "followers_url": "https://api.github.com/users/chrisjbillington/followers",
      "following_url": "https://api.github.com/users/chrisjbillington/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisjbillington/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisjbillington/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisjbillington/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisjbillington/orgs",
      "repos_url": "https://api.github.com/users/chrisjbillington/repos",
      "events_url": "https://api.github.com/users/chrisjbillington/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisjbillington/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-20T04:39:34Z",
    "updated_at": "2012-09-20T04:39:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also can't seem to reproduce with a heirarchical indexed (both columns and rows) dataframe, like this:\n\n``` python\nimport pandas\nimport pickle\nfrom dateutil.parser import parse\n\nimport numpy\n\ndata = {('x','y'): [(1,2,3,4),(4,5,6,7),(7,8,9,10)],\n        ('sequence',''): [parse('20120920120000'), parse('20120920120000'), parse('20120920130000')],\n        ('run time',''): [parse('20120920121000'), parse('20120920122000'), parse('20120920131000')]}\n\n# convert to numpy.int32s:\nfor i, data_tuple in enumerate(data['x','y'][:]):\n    data['x','y'][i] = tuple(numpy.int32(n) for n in data_tuple)\n\nindex = pandas.MultiIndex.from_tuples(sorted(data.keys()))\ndf = pandas.DataFrame(data,columns=index)\ndf.set_index(['sequence','run time'], inplace=True, drop=False)\n\ndf2 = pickle.loads(pickle.dumps(df))\n\nprint df['x','y']\nprint df2['x','y']\n```\n\nI'm not sure what it is about my dataframe that distinguishes it from this test-case. Both use tuples of numpy.int32s and have a datetime multiindex. They're pretty similar really, not sure why one shows the bug and the other doesn't.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8740939",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1939#issuecomment-8740939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1939",
    "id": 8740939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDA5Mzk=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-20T18:36:18Z",
    "updated_at": "2012-09-20T18:36:18Z",
    "author_association": "MEMBER",
    "body": "Well, this isn't great. I'm looking at it now and will try to figure out what's wrong\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8741425",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1939#issuecomment-8741425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1939",
    "id": 8741425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDE0MjU=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-20T18:50:56Z",
    "updated_at": "2012-09-20T18:50:56Z",
    "author_association": "MEMBER",
    "body": "Well. You aren't going to like it:\n\nSee this structured array:\n\n```\narr = np.array([(0, 0, 811532298, 687868416), (0, 0, 58785802, 0),\n       (0, 0, 58064906, 0), (0, 0, 58130442, 0), (0, 0, 58523658, 0),\n       (0, 0, 58130442, 0), (0, 0, 58195978, 0), (0, 0, 58064906, 0),\n       (0, 0, 58130442, 0), (0, 0, 58589194, 0), (0, 0, 58195978, 0),\n       (0, 0, 58064906, 0), (0, 0, 58720266, 0), (0, 0, 58589194, 0),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692),\n       (0, 0, 1443954698, 32692), (0, 0, 1443954698, 32692)], \n      dtype=[('left', '<i4'), ('top', '<i4'), ('right', '<i4'), ('bottom', '<i4')])\n```\n\nIf you convert this to an array of `numpy.void` objects as you have in your case, it won't survive the pickle roundtrip:\n\n```\nIn [151]: pickle.loads(pickle.dumps(np.array(list(arr), dtype=object)))\nOut[151]: \narray([(0, 0, 56421320, 0), (1443987992, 32692, 1443987992, 32692),\n       (1443988136, 32692, 1443988136, 32692), (0, 0, 60521864, 0),\n       (0, 0, 60519736, 0), (0, 0, 60521808, 0), (0, 0, 58343584, 0),\n       (0, 0, 58344424, 0), (0, 0, 58344144, 0), (0, 0, 58344648, 0),\n       (0, 0, 872947192, 32692), (0, 0, 59774320, 0),\n       (0, 0, 872947136, 32692), (0, 0, 872947640, 32692),\n       (0, 0, 58003984, 0), (0, 0, 872947528, 32692),\n       (0, 0, 872947304, 32692), (1443988024, 32692, 60157744, 0),\n       (1443987992, 32692, 1443987992, 32692),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 872947416, 32692),\n       (0, 0, 872947584, 32692), (1443987992, 32692, 1443987992, 32692),\n       (0, 0, 873103464, 32692), (0, 0, 873103520, 32692),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 873103632, 32692),\n       (0, 0, 873103688, 32692), (0, 0, 55044944, 0),\n       (0, 0, 873103800, 32692), (0, 0, 873103856, 32692),\n       (0, 0, 58536576, 0), (0, 0, 873103968, 32692),\n       (0, 0, 873104024, 32692), (0, 0, 59227184, 0),\n       (0, 0, 873104136, 32692), (0, 0, 1443988088, 32692),\n       (0, 0, 873104248, 32692), (0, 0, 873104304, 32692),\n       (0, 0, 873104360, 32692), (0, 0, 873104416, 32692),\n       (0, 0, 873104472, 32692), (0, 0, 873104528, 32692),\n       (0, 0, 873104584, 32692), (0, 0, 873104640, 32692),\n       (0, 0, 873104696, 32692), (0, 0, 873104752, 32692),\n       (0, 0, 58699600, 0), (0, 0, 873104864, 32692),\n       (0, 0, 873104920, 32692), (0, 0, 873104976, 32692),\n       (0, 0, 873105032, 32692), (0, 0, 873105088, 32692),\n       (0, 0, 873105144, 32692), (0, 0, 873105200, 32692),\n       (0, 0, 873105256, 32692), (0, 0, 873105312, 32692),\n       (0, 0, 873105368, 32692), (0, 0, 873105424, 32692),\n       (0, 0, 873105480, 32692), (0, 0, 873105536, 32692),\n       (0, 0, 873105592, 32692)], dtype=object)\n\nIn [152]: pickle.loads(pickle.dumps(np.array(list(arr), dtype=object)))\nOut[152]: \narray([(0, 0, 56418800, 0), (0, 0, 55244256, 0),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 60521864, 0),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 60521808, 0),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 58343584, 0),\n       (1443987992, 32692, 1443987992, 32692),\n       (1443988024, 32692, 58917296, 0),\n       (1443988024, 32692, 1443988024, 32692), (0, 0, 872947472, 32692),\n       (0, 0, 872947360, 32692), (0, 0, 872947640, 32692),\n       (0, 0, 872947416, 32692), (0, 0, 872947136, 32692),\n       (0, 0, 872947024, 32692), (1443988024, 32692, 58179680, 0),\n       (1443987992, 32692, 1443987992, 32692),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 872947304, 32692),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 873104864, 32692),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 873103856, 32692),\n       (1443987992, 32692, 1443987992, 32692), (0, 0, 1443988088, 32692),\n       (0, 0, 873105424, 32692), (0, 0, 873105200, 32692),\n       (0, 0, 873105592, 32692), (0, 0, 873105032, 32692),\n       (0, 0, 873105144, 32692), (0, 0, 873105256, 32692),\n       (0, 0, 873104192, 32692), (0, 0, 873103688, 32692),\n       (0, 0, 873104528, 32692), (0, 0, 873105368, 32692),\n       (0, 0, 873103800, 32692), (0, 0, 873105088, 32692),\n       (0, 0, 873105648, 32692), (0, 0, 873104024, 32692),\n       (0, 0, 873104752, 32692), (0, 0, 873104248, 32692),\n       (0, 0, 873104304, 32692), (0, 0, 873103968, 32692),\n       (0, 0, 873104360, 32692), (0, 0, 59774848, 0),\n       (0, 0, 1443988136, 32692), (0, 0, 873103912, 32692),\n       (0, 0, 873103744, 32692), (0, 0, 873103408, 32692),\n       (0, 0, 873103520, 32692), (0, 0, 873103576, 32692),\n       (0, 0, 873104080, 32692), (0, 0, 873105312, 32692),\n       (0, 0, 873104920, 32692), (0, 0, 873104136, 32692),\n       (0, 0, 873104696, 32692), (0, 0, 873104976, 32692),\n       (0, 0, 873104472, 32692), (0, 0, 873103464, 32692),\n       (0, 0, 873104640, 32692)], dtype=object)\n```\n\nBasically, pickling `numpy.void` objects, at least in NumPy 1.6.1, is horribly broken. I honestly don't know how it could be screwed up because all you have to do is serialize the bytes and the dtype:\n\n```\nIn [190]: arr[-1]\nOut[190]: (0, 0, 1443954698, 32692)\n\nIn [191]: type(arr[-1])\nOut[191]: numpy.void\n\nIn [192]: arr[-1].dtype\nOut[192]: dtype([('left', '<i4'), ('top', '<i4'), ('right', '<i4'), ('bottom', '<i4')])\n\nIn [193]: arr[-1].tostring()\nOut[193]: '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\n\\x00\\x11V\\xb4\\x7f\\x00\\x00'\n```\n\nBut I digress. Not sure what to tell you\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8754344",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1939#issuecomment-8754344",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1939",
    "id": 8754344,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTQzNDQ=",
    "user": {
      "login": "chrisjbillington",
      "id": 1044087,
      "node_id": "MDQ6VXNlcjEwNDQwODc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1044087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisjbillington",
      "html_url": "https://github.com/chrisjbillington",
      "followers_url": "https://api.github.com/users/chrisjbillington/followers",
      "following_url": "https://api.github.com/users/chrisjbillington/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisjbillington/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisjbillington/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisjbillington/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisjbillington/orgs",
      "repos_url": "https://api.github.com/users/chrisjbillington/repos",
      "events_url": "https://api.github.com/users/chrisjbillington/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisjbillington/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-21T03:48:04Z",
    "updated_at": "2012-09-21T03:48:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your help Wes, I didn't realise the objects were a numpy.void type, and hadn't heard of that bug. It does seem pretty silly that the bug still exists after four years, but it doesn't seem to have gotten much attention, maybe I'll try to draw some to it. \n\nI'm just going to workaround it for the moment by converting any numpy.void types found during construction of the DataFrame to a custom class which implements mostly the same functionality, ie named and ordered fields. My code now looks like this, for anyone who's interested (For context, each row in the DataFrame comes from a dictionary which in turn comes from attributes in a HDF5 file. Each row in the DataFrame represents one HDF5 file.):\n\n``` python\nclass Fields(object):\n    \"\"\"A workaraound for the fact that numpy.void objects cannot be\n    correctly unpickled (a bug in numpy) and therefore cannot be sent\n    to other processes over the network. This class implements the same\n    functionality mostly. Basically the thing you get back looks like a\n    tuple but can be indexed with either names of the fields or integers,\n    much like a single row of a numpy structured array. Whenever this\n    module encounters a numpy.void type when reading attributes from a\n    HDF5 file, it converts it to one of these.\"\"\"\n\n    def __init__(self, data):\n        self.data_by_name = {}\n        self.data_by_index = tuple(data)\n        self.dtype = data.dtype\n        for name in data.dtype.names:\n            self.data_by_name[name] = data[name]\n\n    def __getitem__(self, key):\n        if isinstance(key,int):\n            return self.data_by_index[key]\n        else:\n            return self.data_by_name[key]\n\n    def __repr__(self):\n        return str(self.data_by_index)\n\ndef workaround_numpy_void_bug(dictionary):\n    # numpy.void objects undergo data corruption when pickled and\n    # unpickled.  h5py returns numpy.void objects for attributes\n    # which are its 'compound' datatype.  We'll convert any we find to our\n    # home-cooked Fields class (defined above), which provides mostly\n    # the same functionality. This will be removed if and when numpy fix their bug.\n    for key, value in dictionary.items():\n        if isinstance(value, void):\n            dictionary[key] = Fields(value)\n```\n\n The clients always have access to this module, so they can unpickle just fine.\n"
  }
]
