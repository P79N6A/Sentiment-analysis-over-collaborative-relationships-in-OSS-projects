[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265721210",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265721210",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265721210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTcyMTIxMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-08T11:43:06Z",
    "updated_at": "2016-12-09T09:11:02Z",
    "author_association": "MEMBER",
    "body": "The first \"series vs dataframe\" issue is as expected / follows from the second issue. `__getitem__`/`[]` indexing does not work exactly the same for series vs dataframe (http://pandas.pydata.org/pandas-docs/stable/indexing.html#basics). When provided a single key, Series will get a single value, while dataframe will try to get a column. And there is no column named \"2016-12-07 09:00:00\", hence the KeyError. \r\nSo this behaviour follows from the fact that in your first example, \"2016-12-07 09:00:00\" is not interpreted as a slice, but as a single key. Given that, the behaviour is as expected.\r\n\r\nBut, you are correct there might be an inconsistency in determining whether the string is a single key or a slice between the regular and irregular datetimeindex. The problem is that it is very difficult for pandas to guess/determine this when the index has no frequency.  "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265726957",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265726957",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265726957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTcyNjk1Nw==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-08T12:17:30Z",
    "updated_at": "2016-12-08T12:17:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "For the first part, I completely agree. I forgot that `[]` for dataframe select columns if argument is not a slice (shame on me), this explains the behavior nicely. (And now I understand the rationale behind the Warning in the docs I quoted.)\r\n\r\nFor the second part, is it true that for irregular indexes any string is considered to be slice, and for regular ones only those strings that provide date-time specification with precision less then frequency is considered to be slice?\r\n\r\nWhy it is not possible to consider string a key (not a slice) if it is casted to date-time that is exactly the same as one of keys in the index for irregular indexes?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265732177",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265732177",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265732177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTczMjE3Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-08T12:47:28Z",
    "updated_at": "2016-12-08T12:47:28Z",
    "author_association": "MEMBER",
    "body": "> And now I understand the rationale behind the Warning in the docs I quoted.\r\n\r\nIf you have ideas to rephrase this to make it clearer, very welcome!\r\n\r\n> Why it is not possible to consider string a key (not a slice) if it is casted to date-time that is exactly the same as one of keys in the index for irregular indexes?\r\n\r\nI am not exactly sure how it is implemented in the code, but imagine the following case: you have a timeseries with index [\"2016-01-01 00:00\", \"2016-01-01 12:00\", \"2016-01-01 23:00\", \"2016-01-02 05:00\", \"2016-01-02 18:00\"] (some irregular hours over two days). \r\nIf you would index this with the key \"2016-01-01\", this can be interpreted as \"give me all the data of the 1st of January\", so in this case: a slice (which is what pandas does). But if you would also want to check if the provided key exactly matches with one of the labels of the index, pandas parses this key -> `pd.Timestamp(\"2016-01-01\")`, which gives you \"2016-01-01 00:00:00\" (because pandas does not have different resolution in its datetime data type) and this would match with one of the elements (so: not a slice). So which one of the two would the user want? \r\n(to put it in other words, pandas cannot make a distinction between `s[\"2016-01-01\"]` (logically a slice) and `s[\"2016-01-01 00:00\"]` (logically a single element))"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265756166",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265756166",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265756166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTc1NjE2Ng==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-08T14:43:35Z",
    "updated_at": "2016-12-08T14:43:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I'm going to improve the docs according to our discussion after I understand all the details.\r\n\r\nYour explanation sounds reasonable, but I cannot get why all these arguments do not apply to the case of regular index? In fact, *pandas* can detect the resolution of a string-represented timestamp, this is done in function `pandas.tseries.tools.parse_time_string()` and it allows `pandas` to distinct `s[\"2016-01-01\"]` and `s[\"2016-01-01 00:00\"]` in case `s` is indexed with regular index:\r\n\r\n```python\r\nseries = pd.Series([1, 2, 3], pd.DatetimeIndex(['2016-12-07 00:00:00',\r\n                                                '2016-12-07 01:00:00',\r\n                                                '2016-12-07 02:00:00']))\r\nprint(series[\"2016-12-07 00:00:00\"])\r\n# 1\r\nprint(series[\"2016-12-07 00:00\"])\r\n# 1\r\nprint(series[\"2016-12-07\"])\r\n# 2016-12-07 00:00:00    1\r\n# 2016-12-07 01:00:00    2\r\n# 2016-12-07 02:00:00    3\r\n# dtype: int64\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265899082",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265899082",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265899082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTg5OTA4Mg==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-09T00:36:19Z",
    "updated_at": "2016-12-09T00:36:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Finally, it seems that I got it. The code I'm interested in is [the following](https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/index.py#L1296):\r\n\r\n```python\r\n    def _partial_date_slice(self, reso, parsed, use_lhs=True, use_rhs=True):\r\n        is_monotonic = self.is_monotonic\r\n        if ((reso in ['day', 'hour', 'minute'] and\r\n             not (self._resolution < Resolution.get_reso(reso) or\r\n                  not is_monotonic)) or\r\n            (reso == 'second' and\r\n             not (self._resolution <= Resolution.RESO_SEC or\r\n                  not is_monotonic))):\r\n            # These resolution/monotonicity validations came from GH3931,\r\n            # GH3452 and GH2369.\r\n            raise KeyError\r\n```\r\n\r\nraising `KeyError` here means that the timestamp cannot be coerced to a slice. The condition basically says that if the resolution of the timestamp (that we remember from the string) is less precise than the resolution of the index, it is slice, otherwise it is not. That sounds very reasonable.\r\n\r\nI'm not sure yet, why `second` resolution uses different condition (non-strict inequality instead of strict one), but basically I understand what's going on here.\r\n\r\nI'll try to improve the docs soon and prepare PR that will refer to this issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265904997",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265904997",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265904997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTkwNDk5Nw==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-09T01:12:45Z",
    "updated_at": "2016-12-09T01:12:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Btw, could anybody tell, why `second` resolution is treated in such a different way here? I tried to figure it out myself (looking at PRs mentioned near the code), but didn't succeed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265951736",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265951736",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265951736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTk1MTczNg==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-09T07:32:58Z",
    "updated_at": "2016-12-09T07:32:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "I finally discovered that this was PR #3931\r\n\r\n@jreback, could you please comment on this? Why do we introduce the inconsistence like this:\r\n\r\n```python\r\nseries = pd.Series([1, 2, 3, 4], pd.DatetimeIndex(['2016-12-06 23:59:00',\r\n                                                   '2016-12-07 01:00:00',\r\n                                                   '2016-12-07 01:01:00',\r\n                                                   '2016-12-07 01:02:01']))\r\n\r\nprint(type(series[\"2016-12-07 01:01:00\"]))\r\n# <class 'pandas.core.series.Series'>\r\n\r\nseries = pd.Series([1, 2, 3, 4], pd.DatetimeIndex(['2016-12-07',\r\n                                                   '2016-12-08',\r\n                                                   '2016-12-09',\r\n                                                   '2016-12-10']))\r\nprint(type(series[\"2016-12-07\"]))\r\n\r\n# <class 'numpy.int64'>\r\n```\r\nWhy `second` frequency is treated in different way?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265968411",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265968411",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265968411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTk2ODQxMQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-09T09:17:27Z",
    "updated_at": "2016-12-09T09:17:27Z",
    "author_association": "MEMBER",
    "body": "@ischurov Thanks for digging in! So indeed, it had in the end nothing to do with the irregular/regular index (only the resolution of the index is different due to the irregularity, and this impact how the slice is determined), but the different treatment of second resolution or higher resolutions.\r\n\r\nI am not sure why this was added differently as the other resolution, and this seems rather inconsistent to me.\r\n\r\nBy the way, apart from clarification in the docs, some comprehensive tests looping over some combinations of different resolutions is also welcome"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265995893",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265995893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265995893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTk5NTg5Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-09T11:47:13Z",
    "updated_at": "2016-12-09T11:47:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "if you look at the PR, DataFrames need to have a slice here (and not a single indexer). So I think this could fix the inconsistent case you enumerate above (e.g. seconds is an exact match in which case you raise ``KeyError``; this may be counter intuitive in *how* to do it, but it goes to another path that converts to a timestamp and just looks for an exact match, if its there it returns the value, otherwise raises).\r\n\r\nSo obviously this is not tested on series.\r\n\r\nBut I think you'd have to introduce some logic  to actually return a slice when selecting for a DataFrame, which in this case IS a slice.\r\n\r\nThe other resolutions, day, hour, minute, cannot by definition ever have an exact match directly (because they always have a seconds component attached which you don't know). However seconds is special in that it *could* fully represented and actually be an exact match.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265997892",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265997892",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265997892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTk5Nzg5Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-09T11:58:58Z",
    "updated_at": "2016-12-09T11:58:58Z",
    "author_association": "MEMBER",
    "body": "> if you look at the PR, DataFrames need to have a slice here (and not a single indexer).\r\n\r\nWhy is that? \r\nThe example you give at the top of that PR is:\r\n\r\n```\r\nIn [11]: df = DataFrame(randn(5,5),columns=['open','high','low','close','volume'],index=date_range('2012-01-02 18:01:00',periods=5,tz='US/Central',freq='s'))\r\n\r\nIn [12]: df\r\nOut[12]: \r\n                               open      high       low     close    volume\r\n2012-01-02 18:01:00-06:00  0.131243  0.301542  0.128027  0.804162  1.296658\r\n2012-01-02 18:01:01-06:00  0.341487  1.548695  0.703234  0.904201  1.422337\r\n2012-01-02 18:01:02-06:00 -1.050453 -1.884035  1.537788 -0.821058  0.558631\r\n2012-01-02 18:01:03-06:00  0.846885  1.045378 -0.722903 -0.613625 -0.476531\r\n2012-01-02 18:01:04-06:00  1.186823 -0.018299 -0.513886 -1.103269 -0.311907\r\n\r\nIn [14]: df['2012-01-02 18:01:02']\r\nOut[14]: \r\n                               open      high       low     close    volume\r\n2012-01-02 18:01:02-06:00 -1.050453 -1.884035  1.537788 -0.821058  0.558631\r\n```\r\n\r\nSo AFAIK the PR made possible to slice the above dataframe with that string index. However, I would argue that in this case this is no slice at all, but a single key (as both the indexer key as the index is of second resolution, so the result of such a string key will always be slice of length 1 ?)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265999315",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-265999315",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 265999315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTk5OTMxNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-09T12:07:20Z",
    "updated_at": "2016-12-09T12:07:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "for a dataframe by definition is IS a slice always as it cannot be an exact match (wrong axis for exact matching); it can only ever be a slice\r\n\r\nwhile for a series both are possible"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/266037484",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-266037484",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 266037484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjAzNzQ4NA==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-09T15:14:33Z",
    "updated_at": "2016-12-09T15:14:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "As the issue is marked as *bug*, may I ask, what is the desired behavior?\r\n\r\nActually, I believe this is not `Series` issue, it's `DataFrame` issue as well. I believe the following logic is consistent:\r\n\r\n- If timestamp resolution is strictly greater (less precise) than index resolution, timetamp is a slice as it can (in theory) correspond to more than one elements in the index. For `Series`, `[]` should return `Series`, for `DataFrame` — `DataFrame`.\r\n- If timestamp resolution is equal to index resolution, then timestamp is considered as an attempt to get a kind of \"exact match\". For `Series`, `[]` should return scalar, for `DataFrame` — try to find column with this key (if any), and most probably raise `KeyError`.\r\n- If timestamp resolution is strictly less than index resolution, `KeyError` have to be raised in both cases.\r\n\r\nOne can argue that if the resolution is greater than `second`, no exact match possible. However, I believe that it's an implementation detail — how timestamps are presented internally — and from user's point of view if the resolution of index is e.g. hour, then \"2016-01-01 01\" is in fact exact match."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/266243833",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-266243833",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 266243833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjI0MzgzMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-10T22:16:36Z",
    "updated_at": "2016-12-10T22:16:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ischurov so can you show some short test cases that replicate the logic you have presented (and show what is changing from current)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/266267959",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-266267959",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 266267959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjI2Nzk1OQ==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-11T07:32:04Z",
    "updated_at": "2016-12-11T07:32:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback see PR #14856. I added several [tests](https://github.com/pandas-dev/pandas/pull/14856/files#diff-db69b090c3ef26a0c2111e1c0a5909e3) to check partial string indexing with respect to the logic stated above. With current code, only `test_partial_slice_second` fails. The proposed solution is as simple as [this](https://github.com/pandas-dev/pandas/pull/14856/files#diff-23ecb29e7ceba52109a365e447400d2e)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/266268591",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-266268591",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 266268591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjI2ODU5MQ==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-11T07:51:26Z",
    "updated_at": "2016-12-11T07:51:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Here is a super short summary of what's changed:\r\n\r\nLet\r\n```python\r\ndf = DataFrame({'a': [1, 2, 3]},\r\n                       DatetimeIndex(['2011-12-31 23:59:59',\r\n                                      '2012-01-01 00:00:00',\r\n                                      '2012-01-01 00:00:01']),\r\n                       dtype=np.int64)\r\n```\r\nThen `df['a']['2011-12-31 23:59:59']` should return `np.int64` object `1` (now returns `Series`) and `df['2011-12-31 23:59:59']` should raise `KeyError` (now return `DataFrame`)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/266457231",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-266457231",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 266457231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjQ1NzIzMQ==",
    "user": {
      "login": "davidandreoletti",
      "id": 1195702,
      "node_id": "MDQ6VXNlcjExOTU3MDI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1195702?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidandreoletti",
      "html_url": "https://github.com/davidandreoletti",
      "followers_url": "https://api.github.com/users/davidandreoletti/followers",
      "following_url": "https://api.github.com/users/davidandreoletti/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidandreoletti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidandreoletti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidandreoletti/subscriptions",
      "organizations_url": "https://api.github.com/users/davidandreoletti/orgs",
      "repos_url": "https://api.github.com/users/davidandreoletti/repos",
      "events_url": "https://api.github.com/users/davidandreoletti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidandreoletti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-12T15:18:27Z",
    "updated_at": "2016-12-12T15:18:54Z",
    "author_association": "NONE",
    "body": "I reported the behaviour on StackOverflow (and @ischurov raised it here), so I believe I am not influenced by Pandas design decision/culture. As a new comer, I expected the indexing/selection to return a consistent datatype (using the example in the response above):\r\n\r\n- if the index value (eg: `'2012-01-01 00:00:00'`) has the same resolution as the values in the DataFrame's index and the index value has an exact match then return a single scalar value.\r\n- Otherwise, return a Series containing all scalar values that can match the index value's resolution. This means that if the index value is has a higher resolution than the index value then a empty series is returned.\r\n\r\nMy suggestion differs from @ischurov's [proposition](https://github.com/pandas-dev/pandas/issues/14826#issuecomment-266037484) on KeyError. IMHO, if KeyError is too be used then I would expect it to be raised when the index value is not the same resolution as the DataFrame's Index resolution.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/267048363",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-267048363",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 267048363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzA0ODM2Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-14T14:32:57Z",
    "updated_at": "2016-12-14T14:32:57Z",
    "author_association": "MEMBER",
    "body": "> if KeyError is too be used then I would expect it to be raised when the index value is not the same resolution as the DataFrame's Index resolution.\r\n\r\nI don't really understand this comment. If the resolution of the indexer is lower than of the Index, you get a slice, if it is higher, you get a KeyError. So KeyError is already used in certain cases where the resolutions differ.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/268883767",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14826#issuecomment-268883767",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14826",
    "id": 268883767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODg4Mzc2Nw==",
    "user": {
      "login": "ischurov",
      "id": 2717321,
      "node_id": "MDQ6VXNlcjI3MTczMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2717321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischurov",
      "html_url": "https://github.com/ischurov",
      "followers_url": "https://api.github.com/users/ischurov/followers",
      "following_url": "https://api.github.com/users/ischurov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischurov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischurov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischurov/subscriptions",
      "organizations_url": "https://api.github.com/users/ischurov/orgs",
      "repos_url": "https://api.github.com/users/ischurov/repos",
      "events_url": "https://api.github.com/users/ischurov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischurov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-22T20:27:58Z",
    "updated_at": "2016-12-22T20:27:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "As a follow-up: are there any reasons why `DatetimeIndex` resolution cannot be less precise than `day`? \r\n\r\nWe added it to the docs but actually I'm not sure what is the reason for this?\r\n\r\n```python\r\n    series_monthly = pd.Series([1, 2, 3],\r\n                              pd.DatetimeIndex(['2011-12',\r\n                                                '2012-01',\r\n                                                '2012-02']))\r\n    series_monthly.index.resolution # returns \"day\"\r\n```"
  }
]
