[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318107765",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-318107765",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 318107765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODEwNzc2NQ==",
    "user": {
      "login": "drafter250",
      "id": 11748615,
      "node_id": "MDQ6VXNlcjExNzQ4NjE1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11748615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drafter250",
      "html_url": "https://github.com/drafter250",
      "followers_url": "https://api.github.com/users/drafter250/followers",
      "following_url": "https://api.github.com/users/drafter250/following{/other_user}",
      "gists_url": "https://api.github.com/users/drafter250/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drafter250/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drafter250/subscriptions",
      "organizations_url": "https://api.github.com/users/drafter250/orgs",
      "repos_url": "https://api.github.com/users/drafter250/repos",
      "events_url": "https://api.github.com/users/drafter250/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drafter250/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T16:27:28Z",
    "updated_at": "2017-07-26T16:27:28Z",
    "author_association": "NONE",
    "body": "I thought The main usage of this feature was to mitigate memory usage in case of large DataFrames?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318114346",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-318114346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 318114346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODExNDM0Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T16:50:42Z",
    "updated_at": "2017-07-26T16:50:42Z",
    "author_association": "MEMBER",
    "body": "> I thought The main usage of this feature was to mitigate memory usage in case of large DataFrames?\r\n\r\nI think @jreback might know more about the initial usage, but generally from previous discussion, this parameter is misused and is more prone to introducing bugs."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/323890422",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-323890422",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 323890422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzg5MDQyMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-22T01:02:49Z",
    "updated_at": "2017-08-22T01:02:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "inplace does not generally do anything inplace\r\nbut makes a copy and reassigns the pointer\r\n\r\nmutating code is much harder to debug (not to mentiin more complicated to support actual inplace ops)\r\n\r\nso except for inplace indexing generally these operations are simply more verbose and serve just to provide corner cases for testing "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443556059",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443556059",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443556059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzU1NjA1OQ==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T00:16:18Z",
    "updated_at": "2018-12-03T00:16:18Z",
    "author_association": "MEMBER",
    "body": "@pandas-dev/pandas-core I think this was agreed during the sprint at Scipy, but I'm not sure if it was discussed when to deprecate the inplace parameters. Is it something we want to do before 1.0?\r\n\r\nPersonally I think the sooner, the better, since the decision is made."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443557689",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443557689",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443557689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzU1NzY4OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T00:35:28Z",
    "updated_at": "2018-12-03T00:35:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is going to cause major downstream complaints, but I agree this should be sooner rather than later.\r\n\r\nWould accept a FutureWarning for this for 0.24.0 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443700101",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443700101",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443700101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzcwMDEwMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T12:53:41Z",
    "updated_at": "2018-12-03T12:53:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "A few questions:\r\n\r\n1. There are some places (`.where` comes to mind, `fillna`? Maybe others?) where the operation can truly be done inplace. I don't think those should be deprecated.\r\n2. Following 1. is it possible to *detect* when we're doing an \"inplace\" operation on a copy? Could we only warn in those cases?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443702372",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443702372",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443702372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzcwMjM3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T13:02:01Z",
    "updated_at": "2018-12-03T13:02:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There are some places (.where comes to mind, fillna? Maybe others?) where the operation can truly be done inplace. I don't think those should be deprecated.\r\n\r\nthis is a very limited number, and though possible to detect (e.g. a Series of a single dtype, or a DataFrame of a single dtype), IMHO is not worth leaving this option. just adding code complexity w/o any real perf benefit. So -1 on doing this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443703608",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443703608",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443703608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzcwMzYwOA==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T13:06:29Z",
    "updated_at": "2018-12-03T13:06:29Z",
    "author_association": "MEMBER",
    "body": "In my opinion, ideally we should always do the operation in place if possible, but still return a new object.\r\n\r\nSo, `df = df.fillna(0)` wouldn't copy memory (assuming no type change), and if the user does want to modify a copy, they should do `df2 = df.copy().fillna(0)`.\r\n\r\nNot sure if in practice can be complex to implement in some cases. But if that makes sense, we should deprecate all `inplace` arguments."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443705474",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443705474",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443705474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzcwNTQ3NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T13:13:36Z",
    "updated_at": "2018-12-03T13:13:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So, df = df.fillna(0) wouldn't copy memory (assuming no type change), and if the user does want to modify a copy, they should do df2 = df.copy().fillna(0).\r\n\r\nthis is too complex. You either do it inplace or you don't. The keyword controls it. If we remove the keyword then it should *never* modify the original."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443762773",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443762773",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443762773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzc2Mjc3Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T16:02:08Z",
    "updated_at": "2018-12-03T16:02:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> just adding code complexity w/o any real perf benefit.\r\n\r\nIt depends on the application, but not having to copy can be a pretty big win, right? :)\r\n\r\nStill, I agree that this is tough (impossible) to detect ahead of time. Is it feasible to detect it after the fact, and raise a `PerformanceWarning` in those cases (possibly elevating the an error later, if that makes sense)? In a simplified BlockManager world (one block per column) we could maybe keep a weakref from the column to the *actual* data (ndarray or the EA's data). \r\n\r\n```python\r\ndef fillna(self, **kwargs):\r\n    # in BlockManager.fillna\r\n    ref_to_data = self._get_ref_to_data()\r\n    result = self.apply('fillna', **kwargs)\r\n    new_data = self._get_ref_to_data()\r\n    if ref_to_data != new_data and inplace:\r\n         warnings.warn(PerformanceWarning)\r\n```\r\n\r\nIf so, I would prefer to go that route, rather than having users change code."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443763553",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443763553",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443763553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzc2MzU1Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T16:04:10Z",
    "updated_at": "2018-12-03T16:04:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am really -1 on this in any users code. So while this may have to be an extended deprecation cycle I think its worth it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443783295",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443783295",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443783295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzc4MzI5NQ==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T16:55:42Z",
    "updated_at": "2018-12-03T17:45:54Z",
    "author_association": "MEMBER",
    "body": "This is the list of methods functions in the public API with a parameter named `inplace`.\r\n\r\n**EDITED: Moved the lists to the description**\r\n\r\nThose are not really in place, and should be deprecated:\r\n- pandas.eval\r\n- pandas.Series.clip\r\n- pandas.Series.clip_lower\r\n- pandas.Series.clip_upper\r\n- pandas.Series.drop\r\n- pandas.Series.drop_duplicates\r\n- pandas.Series.rename_axis\r\n- pandas.Series.reset_index\r\n- pandas.Series.set_axis\r\n- pandas.Series.mask\r\n- pandas.Series.dropna\r\n- pandas.Series.interpolate\r\n- pandas.Series.sort_values\r\n- pandas.Series.sort_index\r\n- pandas.Series.replace\r\n- pandas.DataFrame.mask\r\n- pandas.DataFrame.query\r\n- pandas.DataFrame.clip\r\n- pandas.DataFrame.clip_lower\r\n- pandas.DataFrame.clip_upper\r\n- pandas.DataFrame.eval\r\n- pandas.DataFrame.drop\r\n- pandas.DataFrame.drop_duplicates\r\n- pandas.DataFrame.rename\r\n- pandas.DataFrame.rename_axis\r\n- pandas.DataFrame.reset_index\r\n- pandas.DataFrame.set_axis\r\n- pandas.DataFrame.set_index\r\n- pandas.DataFrame.dropna\r\n- pandas.DataFrame.replace\r\n- pandas.DataFrame.interpolate\r\n- pandas.DataFrame.sort_values\r\n- pandas.DataFrame.sort_index\r\n- pandas.Index.rename\r\n- pandas.Index.set_names\r\n- pandas.MultiIndex.set_levels\r\n- pandas.MultiIndex.set_labels\r\n- pandas.core.resample.Resampler.interpolate\r\n\r\nCan be really in place (under discussion):\r\n- pandas.Series.where\r\n- pandas.Series.fillna\r\n- pandas.DataFrame.where\r\n- pandas.DataFrame.fillna\r\n\r\nRemoved with `Panel`:\r\n- pandas.Panel.clip\r\n- pandas.Panel.clip_lower\r\n- pandas.Panel.clip_upper\r\n- pandas.Panel.drop\r\n- pandas.Panel.dropna\r\n- pandas.Panel.sort_index\r\n\r\nIf that sounds good, I'll create a PR to raise `FutureWarning` for the ones that we all agree should be deprecated (the first list). Then we can follow up with the rest.\r\n\r\nLet me know if there are more from the first list that you want to postpone to the second phase.\r\n\r\n@jorisvandenbossche may be you also want to take a look here."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443795689",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443795689",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443795689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzc5NTY4OQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T17:29:24Z",
    "updated_at": "2018-12-03T18:15:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@datapythonista @jreback\r\nAnother method that should be part of this discussion is `.update`, which is AFAICT the only method that's inplace by default, and does not even have an `inplace`-kwarg. Adding that has met resistance in #22286, but one could deprecate the whole method and replace it with `df.coalesce`: #22812"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443798653",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443798653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443798653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzc5ODY1Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T17:37:57Z",
    "updated_at": "2018-12-03T17:37:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@datapythonista how'd you define that list of methods that are not really inplace? I haven't looked closely, but things like `Series.rename_axis` should be doable without copying data. I believe `clip` / `clip_lower` as well.\r\n\r\n---\r\n\r\n> I am really -1 on this in any users code.\r\n\r\nSo that argument is independent of whether or not any operation *can* be inplace, and we should discuss that. i.e. that it's the \"opinion of pandas\" that inplace is an anti-pattern to be avoided at all time.\r\n\r\nPersonally, I'm not sure about that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443800056",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443800056",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443800056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzgwMDA1Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T17:42:09Z",
    "updated_at": "2018-12-03T17:42:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "my point is this adds a lot of complexity \r\nsure it’s opionated but so what \r\n\r\ncomplexity is killing the ability of most folks to make modifications \r\n\r\nthis simplifies the model a great deal"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443800165",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443800165",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443800165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzgwMDE2NQ==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T17:42:25Z",
    "updated_at": "2018-12-03T17:42:25Z",
    "author_association": "MEMBER",
    "body": "I just started the list of the actual inplace methods with the ones you said. There are some I can guess they should be able to be in place, like `replace`, but thought you or Jeff would know from the top of your head, so didn't want to guess.\r\n\r\nWill move the lists to the description, and try to get it closer to reality, feel free to edit afterwards."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443814703",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-443814703",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 443814703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzgxNDcwMw==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T18:24:31Z",
    "updated_at": "2018-12-03T18:24:31Z",
    "author_association": "MEMBER",
    "body": "I updated the description with what I think it's non-controversial, and the rest. Let me know if there is anything that seems to be in the wrong place."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/450596477",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-450596477",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 450596477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDU5NjQ3Nw==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-31T00:19:29Z",
    "updated_at": "2018-12-31T00:19:43Z",
    "author_association": "MEMBER",
    "body": "Is the list of the methods I defined as non-controversial, non-controversial enough so we can deprecate them already (they are listed in the description)?\r\n\r\nI assume the rest needs some more discussion?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451001804",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16529#issuecomment-451001804",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16529",
    "id": 451001804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTAwMTgwNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-02T22:13:45Z",
    "updated_at": "2019-01-02T22:13:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, haven't had a chance to look. Dumping some thoughts below.\r\n\r\n---\r\n\r\nIMO, inplace is currently overloaded for two uses: shorter code\r\nfrom not having to repeat the names of identifiers, and (possibly) avoiding\r\na data copy.\r\n\r\n1. **Avoid typing the name of the identifier twice**. We write\r\n\r\n```python\r\nmy_df_with_a_really_long_name.dropna(inplace=True)\r\n```\r\n\r\nversus\r\n\r\n```python\r\nmy_df_with_a_really_long_name = my_df_with_a_really_long_name.dropna()\r\n```\r\n\r\nIn this case, inplace serves a role similar to inplace operators on\r\nmutable objects (e.g. int).\r\n\r\n```python\r\nmy_long_id = 5\r\nmy_long_id += 1\r\n```\r\n\r\nThis inplace operation doesn't mutate the object (you can't mutate an int).\r\n\r\n2. **(Possibly) avoiding a copy**. Some methods, like DataFrame.where, may\r\n   avoid a memory copy by mutating data in place.\r\n\r\n```python\r\nIn [42]: arr = np.arange(12, dtype='float').reshape(4, 3)\r\n\r\nIn [43]: df = pd.DataFrame(arr, copy=False)\r\n\r\nIn [44]: np.shares_memory(df._data.blocks[0].values, arr)\r\nOut[44]: True\r\n\r\nIn [45]: df.where(df > 5, inplace=True)\r\n\r\nIn [46]: arr\r\nOut[46]:\r\narray([[nan, nan, nan],\r\n       [nan, nan, nan],\r\n       [ 6.,  7.,  8.],\r\n       [ 9., 10., 11.]])\r\n\r\nIn [47]: np.shares_memory(df._data.blocks[0].values, arr)\r\nOut[47]: True\r\n```\r\n\r\nPersonally, I don't really care about use-case 1. I'd recommend people chain\r\nmethods.\r\n\r\nI care a great deal about use-case 2. I'd love it if pandas could, optionally,\r\ndo zero-copy operations. But this is a hard problem.\r\n\r\n---\r\n\r\nSo if I were designing the API today, I would use the keyword `copy=True`, rather\r\nthan `inplace=False`. Operations would never mutate data in place by default, but\r\nwould provide that option when it's feasible. I likely wouldn't include the\r\n`inplace` keyword, and would instead instruct people to use method chaining.\r\n\r\nBut given the current situation, I *might* prefer having both inplace and copy.\r\nThen we can leave `inplace` for \"update the object associated with this name\",\r\nregardless of whether data is copied, and `copy` for \"mutate data in place, and\r\nreturn a new dataframe that's a view on the same data.\" But I'm less certain about\r\nhow to move forward than I am about what I would do if starting from scratch.\r\n\r\n\r\n"
  }
]
