[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59668582",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8572#issuecomment-59668582",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8572",
    "id": 59668582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjY4NTgy",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-19T22:32:02Z",
    "updated_at": "2014-10-19T22:32:02Z",
    "author_association": "MEMBER",
    "body": "I think this is a good idea, but we'll need to do it carefully.\n\nI'm guessing the `method` argument is there to provide some description of the context? The difficulties with propagating metadata is that there are some many edge cases. For example, to handle units, it's not enough to know that both units are the same -- you also need to what sort of operation is being performed (e.g., `+` vs `*` vs `==`). And perhaps you might prefer to raise rather than propagate the wrong units, etc.\n\nWhen I implemented this in xray, I didn't want to deal with these issues, so I took the more conservative approach of dropping custom metadata (other than name) in _all_ binary arithmetic and aggregations. See http://xray.readthedocs.org/en/stable/faq.html#what-is-your-approach-to-metadata\n\nI think this sort of hook system is a good idea to let someone else deal with the complexity. [`__numpy_ufunc__`](http://docs.scipy.org/doc/numpy-dev/reference/arrays.classes.html#numpy.class.__numpy_ufunc__) (arriving in numpy 1.10) may provide a useful reference design -- I know astropy is planning on using it for their `Quantities` class.\n\nRE: your specific design. I would rather make users define a custom subclass, e.g., `UnitsDataFrame = pd.add_metadata(pd.DataFrame, {'unit': unit_meta})`, then use some sort of global state.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59736743",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8572#issuecomment-59736743",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8572",
    "id": 59736743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzM2NzQz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T12:05:48Z",
    "updated_at": "2014-10-20T12:05:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer the design for this was for users to subclass / monkey-patch `DataFrame` and replace `__finalize__` with a completely new routine that handles whatever behavior the user wants. I am proposing an extension to allow a method by method interaction to be specified, e.g. `method='merge'|'add'` are passed, and then let the user provide a routine to handle it.\n\nThis is just a dispatch to user interaction, like: hey I have these 2 objects which I am adding, how do you want to combine the meta-data. It will drop by default, this just allows a 'plug-in' type of mechanism.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59840563",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8572#issuecomment-59840563",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8572",
    "id": 59840563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODQwNTYz",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T21:12:15Z",
    "updated_at": "2014-10-20T21:14:07Z",
    "author_association": "NONE",
    "body": "Hi,\n\nReally glad to see the subclassing and **finalize** behavior come into fruition.\n\nI'm not sure I fully understand the scope of this general metadata problem, but in my experience, the relation of metadata to the results of `__finalize__` can get very complex, so any solution you come up with should error on the side of conservative as Stephan mentioned.  As a user of such functionality, I'd prefer my metadata to cause errors in operations that are not directly supported rather than having a general schema in place that might lead to convoluted, hard-to-find bugs.  For example, in a spectroscopy library, if the user adds two objects that have different unit systems, I'd rather an error get raised rather than a decision be made for me based on Pandas' metadata handling system.\n\nFrom studying GeoPandas as well as pyuvvis, I get the impression that most pandas-subclassing libraries are going to use a relatively limited set of operations from the API, so maybe it's a good idea to make them work out all of the usecases for metadata as they go, and just provide context and suggestions in the docs?\n\nSorry if this is not germane to the issue at hand ;0\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59848835",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8572#issuecomment-59848835",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8572",
    "id": 59848835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODQ4ODM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T22:15:14Z",
    "updated_at": "2014-10-20T22:15:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hugadams \n\nthis modification / doc update is for the USER to really do all of the work. pandas provides a framework if you will. but the USER decides ALL interactions with metadata (otherwise they are NOT propogated). So it is basically wide open for the USER to provide a mechanism to propogate some / raise an error if needed etc. I guess some docs are in order!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59982065",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8572#issuecomment-59982065",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8572",
    "id": 59982065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTgyMDY1",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-21T19:15:32Z",
    "updated_at": "2014-10-21T19:15:32Z",
    "author_association": "NONE",
    "body": "Sounds great\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318490763",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8572#issuecomment-318490763",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8572",
    "id": 318490763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODQ5MDc2Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-27T21:24:21Z",
    "updated_at": "2017-07-27T21:25:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Resurrecting this with a bit of an alternate / synthesis of previous ideas. The basic idea is to push metadata propagation onto the subclasses, as was previously suggested. The new proposal is for pandas to provide a bit more infrastructure for subclasses, which would remove the need for any global state.\r\n\r\n---\r\n\r\nThe `._metadata` works pretty well for many things. As an example, here's a subclassed DataFrame that have \"colors\". You can only add dataframes of the same color\r\n\r\n```python\r\nimport pandas as pd\r\n\r\n\r\nclass SubclassedDataFrame2(pd.DataFrame):\r\n\r\n    # normal properties\r\n    _metadata = ['color']\r\n\r\n    def __init__(self, *args, color=None, **kwargs):\r\n        self.color = color\r\n        super().__init__(*args, **kwargs)\r\n\r\n    @property\r\n    def _constructor(self):\r\n        return SubclassedDataFrame2\r\n\r\n    def __add__(self, other):\r\n        if self.color != other.color:\r\n            raise ValueError\r\n        return super().__add__(self, other)\r\n\r\n>>> a = SubclassedDataFrame2({\"A\": [1, 2], \"B\": [3, 4]}, color='red')\r\n```\r\n\r\nFor things like `__getitem__` the metadata propagates nicely:\r\n\r\n```python\r\n>>> a[['A']].color\r\nred\r\n```\r\n\r\nBut binary operations don't propagate the metadata\r\n\r\n```python\r\n>>> (a + a).color  # None\r\n```\r\n\r\nWe could patch `SubclassedDataFrame.__add__` to manually add it ourselves, but that would get old doing it for every method.\r\n\r\nA potential solution is for pandas to provide a `Metadata` class, that subclasses could use to indicate if / how metadata should be propagated for any given operation. The base class would be something like\r\n\r\n```python\r\nclass Metadata:\r\n\r\n    def __init__(self, name):\r\n        self.name = name\r\n\r\n    def __repr__(self):\r\n        return \"Metadata({})\".format(self.name)\r\n\r\n    def __add__(self, left, right):\r\n        return None  # do not propogate\r\n```\r\n\r\nand subclasses would override the methods they want\r\n\r\n```python\r\nclass ColorMetadata(Metadata):\r\n\r\n    def __add__(self, left, right):\r\n        if set(left.color, right.color) == {\"blue\", \"yellow\"}:\r\n            return 'green'\r\n        elif set(left.color, right.color) == {\"blue\", \"red\"}:\r\n            return \"purple\"\r\n        ...\r\n\r\n    def concat(self, left, right):\r\n        return '-'.join([left.color, right.color])\r\n```\r\n\r\nSo when defining a subclass, it would be `_metadata = [ColorMetadata('color')]`, and pandas would call the appropriate method to figure out how to propagate metadata.\r\n\r\n```python\r\n\r\n>>> b = SubclassedDataFrame2({\"A\": [1, 2], \"C\": [5, 6]}, color='blue')\r\n>>> print((a + b).color)\r\npurple\r\n```\r\n\r\nthoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318762251",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8572#issuecomment-318762251",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8572",
    "id": 318762251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODc2MjI1MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-28T21:07:51Z",
    "updated_at": "2017-07-28T21:07:51Z",
    "author_association": "MEMBER",
    "body": "This is a solid approach.  Have you thought about how to handle Series-level metadata when that Series becomes a column in a DataFrame?  e.g.\r\n\r\n```\r\nc = SubclassedDataFrame2({\"A\": a[\"A\"], \"C\": b[\"C\"]})\r\n```\r\n\r\nHere `a[\"A\"].color == 'red'` and `b[\"C\"].color == 'blue'`.  What is `c.color`?  Do we still have `c[\"A\"].color == a[\"A\"].color`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318882930",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8572#issuecomment-318882930",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8572",
    "id": 318882930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODg4MjkzMA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-30T06:54:55Z",
    "updated_at": "2017-07-30T06:54:55Z",
    "author_association": "MEMBER",
    "body": "An issue that comes up with the column-specific metadata is that `_constructor_sliced` may need to be axis-specific."
  }
]
