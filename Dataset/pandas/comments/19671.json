[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/365235224",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19671#issuecomment-365235224",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19671",
    "id": 365235224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTIzNTIyNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-13T11:13:13Z",
    "updated_at": "2018-02-13T11:13:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "we had an old issue about this, but can't seem to find it. so \r\n\r\n```\r\nIn [1]: pd.to_datetime('M1701')\r\nOut[1]: Timestamp('1701-01-01 00:00:00')\r\n```\r\n\r\nis a legit (though maybe weird) parse by ``dateutil``. When iterows happens a ``Series`` is constructed of the appropriate type. Since all of the elements are combined into a single dtype, they are upcast, here the should be upcast to ``object`` type.\r\n\r\nlove for you to take a look."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/365514594",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19671#issuecomment-365514594",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19671",
    "id": 365514594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTUxNDU5NA==",
    "user": {
      "login": "minggli",
      "id": 14131823,
      "node_id": "MDQ6VXNlcjE0MTMxODIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14131823?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minggli",
      "html_url": "https://github.com/minggli",
      "followers_url": "https://api.github.com/users/minggli/followers",
      "following_url": "https://api.github.com/users/minggli/following{/other_user}",
      "gists_url": "https://api.github.com/users/minggli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minggli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minggli/subscriptions",
      "organizations_url": "https://api.github.com/users/minggli/orgs",
      "repos_url": "https://api.github.com/users/minggli/repos",
      "events_url": "https://api.github.com/users/minggli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minggli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-14T07:03:32Z",
    "updated_at": "2018-02-14T07:03:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "hope don't mind if I jump into this issue. since Series are constructed row by row of the frame, the dtype is inferred case by case. as @jreback has rightly put 'M1701' is inferred as datetime whereas 'M1609' is object. so I think the issue here is that dtype upcast for each Series is not always consistent as it's evaluated individually in `Series` > `_sanitize_array` > `_try_cast` > `maybe_cast_to_datetime`. quite interesting but goes quite deep in terms of when to cast datetime and when not to.\r\n\r\nA potential fix could be to pass numpy.dtype (self.values.dtype in iterrows) to create Series so that all series (i.e. rows of the dataframe) generated by iterrows will have consistent upcast across columns. Although numpy seems to upcast numeric (e.g. int to float), it doesn't handle datetime inference. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/365574273",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19671#issuecomment-365574273",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19671",
    "id": 365574273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTU3NDI3Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-14T11:24:21Z",
    "updated_at": "2018-02-14T11:24:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's the basic problem. We do inference on mixed strings & datetimes upon construction. This allows one to pass 'NaT and/or mixed datetimelike (e.g. you can also pass ``dateitime.date`` and ``dateime.datetime`` and ``np.datetime64``'. However we should make this much more strict, so that we don't fully parse strings. It *still* needs to hit ``to_datetime`` (which is where the conversion happens).\r\n\r\n```\r\nIn [1]: pd.Series(['M1701', pd.Timestamp('20130101')])\r\nOut[1]: \r\n0   1701-01-01\r\n1   2013-01-01\r\ndtype: datetime64[ns]\r\n```\r\n\r\nso @minggli its the logic actually in ``to_datetime(arr, errors='raise')``. I think we need to expose ``require_iso8601`` and pass this thru as True."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366631743",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19671#issuecomment-366631743",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19671",
    "id": 366631743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjYzMTc0Mw==",
    "user": {
      "login": "minggli",
      "id": 14131823,
      "node_id": "MDQ6VXNlcjE0MTMxODIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14131823?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minggli",
      "html_url": "https://github.com/minggli",
      "followers_url": "https://api.github.com/users/minggli/followers",
      "following_url": "https://api.github.com/users/minggli/following{/other_user}",
      "gists_url": "https://api.github.com/users/minggli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minggli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minggli/subscriptions",
      "organizations_url": "https://api.github.com/users/minggli/orgs",
      "repos_url": "https://api.github.com/users/minggli/repos",
      "events_url": "https://api.github.com/users/minggli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minggli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-19T09:24:48Z",
    "updated_at": "2018-02-19T09:24:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for the delay. raised a PR exposing require_iso8601 in dataframe.iterrows(), to_datetime,  and Series APIs."
  }
]
