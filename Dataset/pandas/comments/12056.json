[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172058178",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172058178",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172058178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA1ODE3OA==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T19:17:52Z",
    "updated_at": "2016-01-15T19:29:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think you have misunderstood `abc`.  These classes have special `__subclasshook__` so that you don't have to inherit from them to be a subclass of them.  \ne.g. \n\n```\nIn [172]: issubclass(pandas.Series, collections.Container)\nOut[172]: True\n```\n\nSo perhaps we can think about whether we want to make `pandas` objects satisfy the necessary contracts.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172070037",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172070037",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172070037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA3MDAzNw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T20:00:50Z",
    "updated_at": "2016-01-30T23:45:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cheers @kawochen. It looks like `Mapping` doesn't implement that (its `__subclasshook__` falls back to Sized). \nI'm not sure why that is. It could be because it has some Mixin methods on top of its abstract methods? Whatever the reason, I'm fairly confident DataFrame satisfies the contracts\n\n``` python\n\nIn [21]: df = pd.DataFrame()\n\nIn [22]: isinstance(df, collections.Mapping)\nOut[22]: False\n\nIn [23]: isinstance(df, collections.Sized)\nOut[23]: True\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172070422",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172070422",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172070422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA3MDQyMg==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T20:01:56Z",
    "updated_at": "2016-01-15T20:14:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MaximilianR nope it doesn't have `items`\nedit: OK actually I don't know why.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172071578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172071578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172071578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA3MTU3OA==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T20:04:46Z",
    "updated_at": "2016-01-15T20:04:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree `hasattr` isn't pretty.  We can think about defining a few custom abstract base classes for `pandas` using `__subclasshook__` to replace those and functions like `is_dict_like`.  I don't know about performance, but it's probably just an extra indirection.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172082131",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172082131",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172082131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA4MjEzMQ==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T20:23:36Z",
    "updated_at": "2016-01-15T20:26:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kawochen have a look at the `Mapping.__subclasshook__` - it can never return `True`:\n\n``` python\nIn [27]: collections.Mapping.__subclasshook__??\nSignature: collections.Mapping.__subclasshook__(C)\nSource:\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            if any(\"__len__\" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\nFile:      /Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/_collections_abc.py\nType:      method\n```\n\nSo I think for these, you would need to inherit from `Mapping`. Still open to being wrong though\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172084277",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172084277",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172084277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA4NDI3Nw==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T20:29:26Z",
    "updated_at": "2016-01-15T20:29:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "oh you are right.  It looks like you'd need to call `collections.Mapping.register(DataFrame)`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172085547",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172085547",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172085547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA4NTU0Nw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T20:33:11Z",
    "updated_at": "2016-01-15T20:33:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Or add that as one of the classes `DataFrame` inherits from. That's fairly canonical, there's an example on the collections page: https://docs.python.org/3/library/collections.abc.html (although the benefits described are slightly orthogonal)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172086476",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172086476",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172086476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA4NjQ3Ng==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T20:37:17Z",
    "updated_at": "2016-01-15T20:37:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm `DataFrame.values` is not callable though.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/172086887",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-172086887",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 172086887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA4Njg4Nw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T20:39:18Z",
    "updated_at": "2016-01-15T20:40:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's true. It does break the contract a bit. I still think it's better than what exists now, albeit not perfect. \n\nAnd `.values` -> `.data` in pandas 1.0??\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330753150",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12056#issuecomment-330753150",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12056",
    "id": 330753150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDc1MzE1MA==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-20T05:59:03Z",
    "updated_at": "2017-09-20T05:59:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I also think that `pandas.DataFrame` should register with abstract classes.\r\n\r\nI think the following would work:\r\n\r\n```python\r\nSequence.register(pandas.DataFrame)\r\n```\r\n\r\nTo my understanding it exposes everything necessary."
  }
]
