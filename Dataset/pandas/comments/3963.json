[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19729721",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3963#issuecomment-19729721",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3963",
    "id": 19729721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NzI5NzIx",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-20T04:02:03Z",
    "updated_at": "2013-06-20T04:02:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Doing a bit of digging around, looks like it's a unicode thing.\n\nThe error is coming here, line 1919 in pandas/build/lib.macosx-10.8-x86_64-3.3/pandas/io/parsers.py:\n\n``` python\n\n    def next(self):\n        line = next(self.f)\n        # Note: 'colspecs' is a sequence of half-open intervals.\n        return [line[fromm:to].strip(self.filler or ' ')\n                for (fromm, to) in self.colspecs]\n```\n\nhere, `line` is a bytecode string: \n\n``` python\nipdb> line\nb'1111111111\\n'\n```\n\nI'm not sure what the preferred way of dealing with this is, but\n\n``` python\n\nipdb> line.decode('utf-8')[fromm:to].strip(' ')\n'11111'\n```\n\nworks.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19729848",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3963#issuecomment-19729848",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3963",
    "id": 19729848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NzI5ODQ4",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-20T04:07:15Z",
    "updated_at": "2013-06-20T04:07:15Z",
    "author_association": "MEMBER",
    "body": "should probably be\n\n``` python\nimport pandas.core.common as com\ncom.pprint_thing(line[fromm:to]).strip(self.filler or ' ')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/24035874",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3963#issuecomment-24035874",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3963",
    "id": 24035874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDM1ODc0",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T02:36:51Z",
    "updated_at": "2013-09-09T02:36:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "basically, the problem is that you can't mix `bytes` and `str` in Python 3:\n\n``` python\nIn [12]: b'abcd'.strip('')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-12-e487f65c9b72> in <module>()\n----> 1 b'abcd'.strip('')\n\nTypeError: Type str doesn't support the buffer API\n\nIn [13]: # Whereas it works with bytes\n\nIn [14]: b'adbc'.strip(b'')\nOut[14]: b'adbc'\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/24073724",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3963#issuecomment-24073724",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3963",
    "id": 24073724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDczNzI0",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T13:30:10Z",
    "updated_at": "2013-09-09T15:59:35Z",
    "author_association": "NONE",
    "body": "I'm reopening, since after staring at #4784 for a bit I think it's (and my +1 of it) wrong.\n\nThe use of next(f) when f is a BytesIO object seem dodgy, \nand since next(f) doesn't strip the newline (it can't reliably), the decoding\nmay fail. I'm also not sure that the use of `strip()`  is well-defined here either.\n\nAn example to illustrate some of this:\n\n```\n#!/usr/bin/env python3.3\nfrom io import BytesIO\nfrom encodings.aliases import aliases\n\nfor enc in set(aliases.values()):\n    try:\n        # print(enc, next(BytesIO(\"1234\\nabcd\".encode(enc)))[:-1].decode(enc)=='1234')\n        bs=BytesIO(\"1234\\nabcd\".encode(enc))\n        line=next(bs)\n        res=line.strip().decode(enc)\n        if res!='1234':\n            print(enc, res)\n    except LookupError:\n        pass\n    except UnicodeDecodeError:\n        print(\"%s failed\" % enc)\n```\n\nI think `TextIOWrapper` is the correct solution here, you can't get lines until you have text\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/24092784",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3963#issuecomment-24092784",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3963",
    "id": 24092784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDkyNzg0",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T16:35:40Z",
    "updated_at": "2013-09-09T16:35:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@y-p `TextIOWrapper` is what I tried first (in #4783) and it works perfectly in 3.3 (though we'd need to edit it to use the specified encoding if and only if one is provided). However, `bz2` doesn't play nice with it because it doesn't support a `read1()` method. (`gzip` is fine).\n\nTwo options:\n1.  Make a subclass of `io.TextIOWrapper` that detects whether the passed buffer defines `read1()` and calls `read()` instead if it's not defined.\n2.  Special case `bz2` and create a wrapper class that proxies everything to the internal `bz2` reader, but calls `read()` when `read1()` is asked for.\n\nEither way would work - (1) is probably more explicit though. If `bz2` is the only place where we'll need this, probably makes more sense to do (2)...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/24097707",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3963#issuecomment-24097707",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3963",
    "id": 24097707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDk3NzA3",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T17:29:48Z",
    "updated_at": "2013-09-09T17:29:48Z",
    "author_association": "NONE",
    "body": "So you did, didn't see it earlier.\n\nI would be fine with correct code that only works on 3.3 and raising an error (or just blowing up) otherwise. \nBuilding a compat layer for 3.2 seems like wasted effort. \n"
  }
]
