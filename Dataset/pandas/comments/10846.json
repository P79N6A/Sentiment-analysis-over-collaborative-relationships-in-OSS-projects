[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/132367327",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-132367327",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 132367327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjM2NzMyNw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T21:52:55Z",
    "updated_at": "2015-08-18T21:53:59Z",
    "author_association": "MEMBER",
    "body": "I think this is a good idea. \n\nIn practice, wouldn't this only be a `Select` object? As it only makes sense for Executables that return values to provide this to `read_sql`, and other Executables as insert, update, delete don't do this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/132370220",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-132370220",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 132370220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjM3MDIyMA==",
    "user": {
      "login": "zyzhu2000",
      "id": 12415238,
      "node_id": "MDQ6VXNlcjEyNDE1MjM4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12415238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zyzhu2000",
      "html_url": "https://github.com/zyzhu2000",
      "followers_url": "https://api.github.com/users/zyzhu2000/followers",
      "following_url": "https://api.github.com/users/zyzhu2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/zyzhu2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zyzhu2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zyzhu2000/subscriptions",
      "organizations_url": "https://api.github.com/users/zyzhu2000/orgs",
      "repos_url": "https://api.github.com/users/zyzhu2000/repos",
      "events_url": "https://api.github.com/users/zyzhu2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zyzhu2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T22:07:12Z",
    "updated_at": "2015-08-21T20:17:08Z",
    "author_association": "NONE",
    "body": "Yes it should only be a Select or Text object. I especially like sqlalchemy's way to standardize parameters with text(). For example, I can just write text('select \\* from tbl where name=:value') regardless of actual backends. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136100360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-136100360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 136100360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjEwMDM2MA==",
    "user": {
      "login": "stephenpascoe",
      "id": 677427,
      "node_id": "MDQ6VXNlcjY3NzQyNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/677427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephenpascoe",
      "html_url": "https://github.com/stephenpascoe",
      "followers_url": "https://api.github.com/users/stephenpascoe/followers",
      "following_url": "https://api.github.com/users/stephenpascoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephenpascoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephenpascoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephenpascoe/subscriptions",
      "organizations_url": "https://api.github.com/users/stephenpascoe/orgs",
      "repos_url": "https://api.github.com/users/stephenpascoe/repos",
      "events_url": "https://api.github.com/users/stephenpascoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephenpascoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-30T09:05:23Z",
    "updated_at": "2015-08-30T09:05:23Z",
    "author_association": "NONE",
    "body": "I'm going to look at this for EuroSciPy sprints.  Maybe get some tests in place at least.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136128547",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-136128547",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 136128547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjEyODU0Nw==",
    "user": {
      "login": "stephenpascoe",
      "id": 677427,
      "node_id": "MDQ6VXNlcjY3NzQyNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/677427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephenpascoe",
      "html_url": "https://github.com/stephenpascoe",
      "followers_url": "https://api.github.com/users/stephenpascoe/followers",
      "following_url": "https://api.github.com/users/stephenpascoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephenpascoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephenpascoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephenpascoe/subscriptions",
      "organizations_url": "https://api.github.com/users/stephenpascoe/orgs",
      "repos_url": "https://api.github.com/users/stephenpascoe/repos",
      "events_url": "https://api.github.com/users/stephenpascoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephenpascoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-30T11:00:44Z",
    "updated_at": "2015-08-30T11:00:44Z",
    "author_association": "NONE",
    "body": "I've got a test describing what I think we want at https://github.com/stephenpascoe/pandas/commit/2a0bfff3f841e287e7a6e95f7be7847b5dda924c\nAm I on the right track?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136419784",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-136419784",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 136419784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQxOTc4NA==",
    "user": {
      "login": "zyzhu2000",
      "id": 12415238,
      "node_id": "MDQ6VXNlcjEyNDE1MjM4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12415238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zyzhu2000",
      "html_url": "https://github.com/zyzhu2000",
      "followers_url": "https://api.github.com/users/zyzhu2000/followers",
      "following_url": "https://api.github.com/users/zyzhu2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/zyzhu2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zyzhu2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zyzhu2000/subscriptions",
      "organizations_url": "https://api.github.com/users/zyzhu2000/orgs",
      "repos_url": "https://api.github.com/users/zyzhu2000/repos",
      "events_url": "https://api.github.com/users/zyzhu2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zyzhu2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T16:21:24Z",
    "updated_at": "2015-08-31T16:21:24Z",
    "author_association": "NONE",
    "body": "I have read the above link. It is not the same as what I was thinking. SQLAlchemy allows us to create statements using objects, similar to creating ASTs. \n\nOne example of executing the 'select' statement can be found in the SQLAlchemy  document.\n    >>> from sqlalchemy.sql import select\n    >>> s = select([users])\n    >>> result = conn.execute(s) \n\nThe above code is found here: http://docs.sqlalchemy.org/en/rel_1_0/core/tutorial.html\n\nIf we could pass the object s into pd.read_sql() as parameter sql, that would be very nice. \n\nIn addtion to the select object, it is also possible to pass the text object.\n\n> > > from sqlalchemy import text\n> > > sql = text(\"select \\* from mytable where id=:myid\")\n> > > result = conn.execute(sql, myid=x)\n\nNote in the above code, we could always pass parameters in the syntax of \":myid\" in the sql statement, regardless of the actual backend. SQLAlchemy will do the conversion to the proper db specific format inside.\n\nNow if we could write something like:\n\n> > > pd.read_sql(sql, params={'myid' : my_id})\n\nThat would be great, \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137074340",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137074340",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137074340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzA3NDM0MA==",
    "user": {
      "login": "scls19fr",
      "id": 109167,
      "node_id": "MDQ6VXNlcjEwOTE2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/109167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scls19fr",
      "html_url": "https://github.com/scls19fr",
      "followers_url": "https://api.github.com/users/scls19fr/followers",
      "following_url": "https://api.github.com/users/scls19fr/following{/other_user}",
      "gists_url": "https://api.github.com/users/scls19fr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scls19fr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scls19fr/subscriptions",
      "organizations_url": "https://api.github.com/users/scls19fr/orgs",
      "repos_url": "https://api.github.com/users/scls19fr/repos",
      "events_url": "https://api.github.com/users/scls19fr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scls19fr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T13:18:16Z",
    "updated_at": "2015-09-02T13:18:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like this idea of `text` object. But I wonder if it will protect against SQL injection. see https://github.com/pydata/pandas/issues/10899\n\nWhat could happened if\n\n```\nmyid = \"1; DROP TABLE test_table;\"\n```\n\n?\n\nI think according http://stackoverflow.com/questions/19314342/python-sqlalchemy-pass-parameters-in-connection-execute that it's safer than `sql.format(...)`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137075891",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137075891",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137075891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzA3NTg5MQ==",
    "user": {
      "login": "scls19fr",
      "id": 109167,
      "node_id": "MDQ6VXNlcjEwOTE2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/109167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scls19fr",
      "html_url": "https://github.com/scls19fr",
      "followers_url": "https://api.github.com/users/scls19fr/followers",
      "following_url": "https://api.github.com/users/scls19fr/following{/other_user}",
      "gists_url": "https://api.github.com/users/scls19fr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scls19fr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scls19fr/subscriptions",
      "organizations_url": "https://api.github.com/users/scls19fr/orgs",
      "repos_url": "https://api.github.com/users/scls19fr/repos",
      "events_url": "https://api.github.com/users/scls19fr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scls19fr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T13:21:14Z",
    "updated_at": "2015-09-02T13:21:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I won't be \n\n```\npd.read_sql(sql, params={'myid' : my_id})\n```\n\nbut\n\n```\npd.read_sql(sql, engine, params={'myid' : my_id})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137139621",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137139621",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137139621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzEzOTYyMQ==",
    "user": {
      "login": "zyzhu2000",
      "id": 12415238,
      "node_id": "MDQ6VXNlcjEyNDE1MjM4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12415238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zyzhu2000",
      "html_url": "https://github.com/zyzhu2000",
      "followers_url": "https://api.github.com/users/zyzhu2000/followers",
      "following_url": "https://api.github.com/users/zyzhu2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/zyzhu2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zyzhu2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zyzhu2000/subscriptions",
      "organizations_url": "https://api.github.com/users/zyzhu2000/orgs",
      "repos_url": "https://api.github.com/users/zyzhu2000/repos",
      "events_url": "https://api.github.com/users/zyzhu2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zyzhu2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T15:47:00Z",
    "updated_at": "2015-09-02T16:37:52Z",
    "author_association": "NONE",
    "body": "@scls19fr , regarding the SQL injection problem, I think the text() object idea will in fact prevent the SQL injection attack. If you pass in myid=\"1; DROP table test_table\" , the execution will fail. The reason is that the parameter :myid in  \"select \\* from mytable where id=:myid\" is a real parameter for the underlying DBAPI. For example, in the case of SQL Server, the above will be translated to \"select \\* from mytable where id=?\", this statement is then passed to MS SQL Server, along with the value of the parameter.  \n\nThis is very different from  \"select \\* from mytable where id=%s\" % (my_id), which suffers the SQL injection problem.\n\nThe stackoverflow article you cited in fact talks about how to prevent SQL Inject attack using the text() object instead of raw string. \n\ntext() is way safer than raw string. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137152769",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137152769",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137152769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzE1Mjc2OQ==",
    "user": {
      "login": "scls19fr",
      "id": 109167,
      "node_id": "MDQ6VXNlcjEwOTE2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/109167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scls19fr",
      "html_url": "https://github.com/scls19fr",
      "followers_url": "https://api.github.com/users/scls19fr/followers",
      "following_url": "https://api.github.com/users/scls19fr/following{/other_user}",
      "gists_url": "https://api.github.com/users/scls19fr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scls19fr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scls19fr/subscriptions",
      "organizations_url": "https://api.github.com/users/scls19fr/orgs",
      "repos_url": "https://api.github.com/users/scls19fr/repos",
      "events_url": "https://api.github.com/users/scls19fr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scls19fr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T16:21:37Z",
    "updated_at": "2015-09-02T16:21:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think so. Doc should also be improved accordingly. The use of [prepared statement / bind variable](https://en.wikipedia.org/wiki/Prepared_statement) should be shown in doc to avoid [SQL Injection](https://en.wikipedia.org/wiki/SQL_injection).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137164720",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137164720",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137164720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzE2NDcyMA==",
    "user": {
      "login": "stephenpascoe",
      "id": 677427,
      "node_id": "MDQ6VXNlcjY3NzQyNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/677427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephenpascoe",
      "html_url": "https://github.com/stephenpascoe",
      "followers_url": "https://api.github.com/users/stephenpascoe/followers",
      "following_url": "https://api.github.com/users/stephenpascoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephenpascoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephenpascoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephenpascoe/subscriptions",
      "organizations_url": "https://api.github.com/users/stephenpascoe/orgs",
      "repos_url": "https://api.github.com/users/stephenpascoe/repos",
      "events_url": "https://api.github.com/users/stephenpascoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephenpascoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T16:43:07Z",
    "updated_at": "2015-09-02T16:43:07Z",
    "author_association": "NONE",
    "body": "I believe we can already do this.  E.g. see https://github.com/stephenpascoe/pandas/commit/bebc6a69a34118439fb38c7a659c4744bf0e5a15. These tests pass on my system.\n\nI.e. this should work:\n\n```\nfrom sqlalchemy import text\nsql = text(\"select * from mytable where id=:myid\")\nresult = pd.read_sql(sql, engine, params={'myid': my_id})\n```\n\nThe tests show we can also make this work for `sqlalchemy.select()` statements if you use `sqlalchemy.bindparam()`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137191611",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137191611",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137191611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzE5MTYxMQ==",
    "user": {
      "login": "zyzhu2000",
      "id": 12415238,
      "node_id": "MDQ6VXNlcjEyNDE1MjM4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12415238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zyzhu2000",
      "html_url": "https://github.com/zyzhu2000",
      "followers_url": "https://api.github.com/users/zyzhu2000/followers",
      "following_url": "https://api.github.com/users/zyzhu2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/zyzhu2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zyzhu2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zyzhu2000/subscriptions",
      "organizations_url": "https://api.github.com/users/zyzhu2000/orgs",
      "repos_url": "https://api.github.com/users/zyzhu2000/repos",
      "events_url": "https://api.github.com/users/zyzhu2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zyzhu2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T17:59:21Z",
    "updated_at": "2015-09-02T17:59:21Z",
    "author_association": "NONE",
    "body": "I would avoid bindparam() if at all possible. If we use bindparam(), sqlalchemy will try to 'bind the parameters' to SQL, whereas if we don't use it, the underlying SQL database will do the work. The latter will be faster and possibly safer. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137409515",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137409515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137409515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzQwOTUxNQ==",
    "user": {
      "login": "stephenpascoe",
      "id": 677427,
      "node_id": "MDQ6VXNlcjY3NzQyNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/677427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephenpascoe",
      "html_url": "https://github.com/stephenpascoe",
      "followers_url": "https://api.github.com/users/stephenpascoe/followers",
      "following_url": "https://api.github.com/users/stephenpascoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephenpascoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephenpascoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephenpascoe/subscriptions",
      "organizations_url": "https://api.github.com/users/stephenpascoe/orgs",
      "repos_url": "https://api.github.com/users/stephenpascoe/repos",
      "events_url": "https://api.github.com/users/stephenpascoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephenpascoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T11:09:33Z",
    "updated_at": "2015-09-03T11:09:33Z",
    "author_association": "NONE",
    "body": "I don't understand this.  In the example tests these two sqlalchemy objects are equivalent:\n\n```\nname_text = sqlalchemy.text('select * from iris where name=:name')\nname_select = sqlalchemy.select([iris]).where(iris.c.Name == sqlalchemy.bindparam('name'))\n```\n\nThey both generate virtually the same SQL.  `name_text` is a `TextClause` instance whereas `name_select` is a `Selectable` but they both inherit from `Executable` so can be executed on the engine.  See [Selectables](http://docs.sqlalchemy.org/en/rel_1_0/core/selectable.html) and [bindparam](http://docs.sqlalchemy.org/en/rel_1_0/core/sqlelement.html?highlight=bindparam#sqlalchemy.sql.expression.bindparam).  I don't believe there would be any performance difference between these two statements.\n\nI think there may be a way of adding `bindparams()` calls within pandas so that, if a param hasn't been bound to the `FromClause` when passed to `read_sql`, it will be added.  This would make Selectables easier to use.  I'm working on a patch for this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137420561",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137420561",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137420561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzQyMDU2MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T12:22:50Z",
    "updated_at": "2015-09-03T12:22:50Z",
    "author_association": "MEMBER",
    "body": "If `text` objects already work, always good to explicitly add a test for that! (so it keeps working)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137481216",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137481216",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137481216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzQ4MTIxNg==",
    "user": {
      "login": "zyzhu2000",
      "id": 12415238,
      "node_id": "MDQ6VXNlcjEyNDE1MjM4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12415238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zyzhu2000",
      "html_url": "https://github.com/zyzhu2000",
      "followers_url": "https://api.github.com/users/zyzhu2000/followers",
      "following_url": "https://api.github.com/users/zyzhu2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/zyzhu2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zyzhu2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zyzhu2000/subscriptions",
      "organizations_url": "https://api.github.com/users/zyzhu2000/orgs",
      "repos_url": "https://api.github.com/users/zyzhu2000/repos",
      "events_url": "https://api.github.com/users/zyzhu2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zyzhu2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T15:14:48Z",
    "updated_at": "2015-09-03T15:18:41Z",
    "author_association": "NONE",
    "body": "@stephenpascoe , I mean `bindparam()` should be avoided in any case, whether or not we use `select` object or `text` object, if possible.\n\nWithout losing generality, let's say `myid=1` for the below example. \n\nIf we just do the following, without calling bindparam(),\n\n```\nfrom sqlalchemy import text\nsql = text(\"select * from mytable where id=:myid\")\nresult = conn.execute(sql, myid=x)\n```\n\nthen sqlalchemy will translate the SQL statement to DB specific format along with the unbound parameters. For example, in the case of Microsoft SQL Server, the above will be translated to \n\n```\nSELECT * from mytable where id=?  \n```\n\nand the value 1 will be passed to Microsoft SQL server along with the above sql statement. Microsoft SQL server will then bind the parameter to the SQL statement. \n\nIn comparison, with bindparam(), sqlalchemy will try to bind the parameters itself. if we do bindparam(), the sqlahcmely statement\n\n```\nsql = text(\"select * from mytable where id=:myid\")\n```\n\n will be translated to something like\n\n```\nSELECT * from mytable where id=1\n```\n\nBEFORE passing to MS SQL server..\n\nIn addition, `bindparam()` has a lot of limitations of data types it supports. \n\nSo the approach without using `bindparam()` is more efficient, supports more data types, and perhaps more secure. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137502221",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137502221",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137502221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzUwMjIyMQ==",
    "user": {
      "login": "stephenpascoe",
      "id": 677427,
      "node_id": "MDQ6VXNlcjY3NzQyNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/677427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephenpascoe",
      "html_url": "https://github.com/stephenpascoe",
      "followers_url": "https://api.github.com/users/stephenpascoe/followers",
      "following_url": "https://api.github.com/users/stephenpascoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephenpascoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephenpascoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephenpascoe/subscriptions",
      "organizations_url": "https://api.github.com/users/stephenpascoe/orgs",
      "repos_url": "https://api.github.com/users/stephenpascoe/repos",
      "events_url": "https://api.github.com/users/stephenpascoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephenpascoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T16:22:22Z",
    "updated_at": "2015-09-03T16:22:22Z",
    "author_association": "NONE",
    "body": "@zyzhu2000 I'm sorry but I think you are mistaken.  If you look at the documentation for [bindparam] it explains that it's purpose is exactly what you want: to allow a value to be bound to a parameter at execution time (and by the database when supported).\n\nEither way, I don't think this ticket is the right place for debating sqlalchemy internals.\n\nI've played around with adding `where` clauses automatically for Selectables and it isn't working.  You end up creating a self-referencing select statement.  Therefore I've submitted PR #10983 to provide tests and documentation of existing functionality.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137517017",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10846#issuecomment-137517017",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10846",
    "id": 137517017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzUxNzAxNw==",
    "user": {
      "login": "zyzhu2000",
      "id": 12415238,
      "node_id": "MDQ6VXNlcjEyNDE1MjM4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12415238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zyzhu2000",
      "html_url": "https://github.com/zyzhu2000",
      "followers_url": "https://api.github.com/users/zyzhu2000/followers",
      "following_url": "https://api.github.com/users/zyzhu2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/zyzhu2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zyzhu2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zyzhu2000/subscriptions",
      "organizations_url": "https://api.github.com/users/zyzhu2000/orgs",
      "repos_url": "https://api.github.com/users/zyzhu2000/repos",
      "events_url": "https://api.github.com/users/zyzhu2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zyzhu2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T17:16:46Z",
    "updated_at": "2015-09-03T17:16:46Z",
    "author_association": "NONE",
    "body": "@stephenpascoe , I think you are right about `bindparam()`.  I must have mistaken `bindparam()` with something else. Sorry about that.\n"
  }
]
