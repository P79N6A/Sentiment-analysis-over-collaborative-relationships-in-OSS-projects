[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64126271",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8881#issuecomment-64126271",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8881",
    "id": 64126271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTI2Mjcx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-23T17:31:41Z",
    "updated_at": "2014-11-23T17:31:41Z",
    "author_association": "MEMBER",
    "body": "@jsphon could you kindly reformat your post so the code gets parsed correctly?\n\nI'm sure numba could help -- it's very good at this sort of thing (see also [my related project](https://github.com/shoyer/numbagg)). But, on the other hand, my experience is that it is not faster than Cython, which is what pandas already uses for this sort of thing.\n\nI believe the fastest way to create a new series is to simply use the `pd.Series` constructor directly, possibly with `fastpath=True`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64186308",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8881#issuecomment-64186308",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8881",
    "id": 64186308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTg2MzA4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T12:17:58Z",
    "updated_at": "2014-11-24T12:17:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jsphon we will be interacting more fully with `numba` in the future. Mostly of better handing of UDF (user-defined-functions), e.g. when you pass an apply to a `DataFrame`/ grouper. As @shoyer points out, it is not any more efficient to replace the already existing / testsing / working with multi-dtype / returning the correct types for say a `.max()` operation. It _is_ possible to get a small speedup over the cython code, but this would have to be integrated at a somewhat deeper level, and IMHO is not really worth it. Mainly because for the moment, `numba` needs to be an optional dep of pandas (as not _everyone_ uses `conda` yet to install pandas).\n\nThat said I will mark this as a performance enhancement for discussions / options for 0.16.\n\nE.g. what I would actually like to see is an example using `numba` for the Performance Enhancement section of the docs for DataFrame.apply / groupby.apply.\n\nBasically do a non-trivial function which is not efficient currently. Interested?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64279497",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8881#issuecomment-64279497",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8881",
    "id": 64279497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mjc5NDk3",
    "user": {
      "login": "jsphon",
      "id": 5187727,
      "node_id": "MDQ6VXNlcjUxODc3Mjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5187727?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jsphon",
      "html_url": "https://github.com/jsphon",
      "followers_url": "https://api.github.com/users/jsphon/followers",
      "following_url": "https://api.github.com/users/jsphon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsphon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jsphon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsphon/subscriptions",
      "organizations_url": "https://api.github.com/users/jsphon/orgs",
      "repos_url": "https://api.github.com/users/jsphon/repos",
      "events_url": "https://api.github.com/users/jsphon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jsphon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T22:46:57Z",
    "updated_at": "2014-11-24T22:46:57Z",
    "author_association": "NONE",
    "body": "@jreback I'm not sure Numba could easily improve the DataFrame.apply and GroupBy.apply functions, as the applied functions would need to be compiled by Numba for a decent performance improvement to occur.\n\nAlso, one of the reasons why the optimised groupby methods work (such as the ones in my example above) is because they only iterate over the dataframe once.\n\nFrom what I recall, the groupby.apply method iterates over each group, then does a .take to get the group's members, and then applies the function to the members. All these steps add up, especially on large dataframes.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64280315",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8881#issuecomment-64280315",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8881",
    "id": 64280315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjgwMzE1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T22:53:22Z",
    "updated_at": "2014-11-24T22:53:22Z",
    "author_association": "MEMBER",
    "body": "@jsphon numpy's `take` method is actually generally faster than array based indexing, and also takes time linear in the number of accessed elements. So pandas is also only iterating over each group once.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64280482",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8881#issuecomment-64280482",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8881",
    "id": 64280482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjgwNDgy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T22:54:33Z",
    "updated_at": "2014-11-24T22:54:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jsphon If you will re-read what I said, is that I _don't_ think numbizing will actually help (though maybe a bit). Certainly you can special case things. I just think it will in the end of the day actually make much of a substantive different given the code complexity.\n\nThese iterations you are talking about are all in cython already, so you are talking a very-very small speedup here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64280891",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8881#issuecomment-64280891",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8881",
    "id": 64280891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjgwODkx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T22:57:57Z",
    "updated_at": "2014-11-24T22:57:57Z",
    "author_association": "MEMBER",
    "body": "Also, to be entirely fair, there _are_ some cases with numba may be able to speed things up. But for  simple examples like the ones you showed I've found the highly optimized Cython in [bottleneck](https://github.com/kwgoodman/bottleneck) to be faster than numba.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65894269",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8881#issuecomment-65894269",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8881",
    "id": 65894269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODk0MjY5",
    "user": {
      "login": "jsphon",
      "id": 5187727,
      "node_id": "MDQ6VXNlcjUxODc3Mjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5187727?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jsphon",
      "html_url": "https://github.com/jsphon",
      "followers_url": "https://api.github.com/users/jsphon/followers",
      "following_url": "https://api.github.com/users/jsphon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsphon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jsphon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsphon/subscriptions",
      "organizations_url": "https://api.github.com/users/jsphon/orgs",
      "repos_url": "https://api.github.com/users/jsphon/repos",
      "events_url": "https://api.github.com/users/jsphon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jsphon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-06T11:48:24Z",
    "updated_at": "2014-12-06T11:48:24Z",
    "author_association": "NONE",
    "body": "If anyone is interested, I have put some faster groupby aggregation functions here:\n\nhttps://github.com/jsphon/NumbaOptimisations/blob/master/groupby\nhttps://github.com/jsphon/NumbaOptimisations/blob/master/groupby_example\n\nThey are only faster for large groupbys. Getting the argmin and argmax are especially faster due to some quirk of numpy.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65913519",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8881#issuecomment-65913519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8881",
    "id": 65913519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTEzNTE5",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-06T20:55:57Z",
    "updated_at": "2014-12-06T20:55:57Z",
    "author_association": "MEMBER",
    "body": "@jsphon Thanks for sharing!\n\nThe difference in speed for argmin/argmax is because those functions do not have specialized grouped versions written in Cython. See [here](https://github.com/pydata/pandas/blob/7bd1b241c3992a7bb1cbd81b429dcdc5b9ef8e6e/pandas/src/generate_code.py#L1327) for an example of how this is done in pandas. If you would like to see faster argmax/argmin grouped aggregations in pandas, that would be the most straightforward way to add it.\n\nEven though it is linear time either way, it does indeed make a big difference whether you do the grouped aggregation going through the array in sequence or by group (the former is much faster because it uses contiguous memory access).\n"
  }
]
