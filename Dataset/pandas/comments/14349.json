[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251584092",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251584092",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251584092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTU4NDA5Mg==",
    "user": {
      "login": "jzwinck",
      "id": 1216791,
      "node_id": "MDQ6VXNlcjEyMTY3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1216791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzwinck",
      "html_url": "https://github.com/jzwinck",
      "followers_url": "https://api.github.com/users/jzwinck/followers",
      "following_url": "https://api.github.com/users/jzwinck/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzwinck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzwinck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzwinck/subscriptions",
      "organizations_url": "https://api.github.com/users/jzwinck/orgs",
      "repos_url": "https://api.github.com/users/jzwinck/repos",
      "events_url": "https://api.github.com/users/jzwinck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzwinck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T05:17:29Z",
    "updated_at": "2016-10-05T05:17:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have observed that this does not happen if a reference to the NumPy array is held:\n\n```\narr = np.zeros(1000, 'V4')\nprint(pd.DataFrame({'a': arr}))\n```\n\nThat code behaves as expected, simply printing zeros.  But if you do this:\n\n```\narr = np.zeros(1000, 'V4')\ndf = pd.DataFrame({'a': arr})\ndel arr\nprint(df)\n```\n\nYou're back to crashing or non-determinism.  So the problem seems to be that Pandas is holding a dangling (count=0) reference to data from NumPy.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251633444",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251633444",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251633444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTYzMzQ0NA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T10:01:15Z",
    "updated_at": "2016-10-05T10:01:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe you're already aware, but void types aren't really supported, what you're actually getting is that array cast to an `object` dtype.   Which won't be very performant and won't (I think?) preserve the memory layout either if you were planning on casting it later.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251647798",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251647798",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251647798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTY0Nzc5OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T11:20:09Z",
    "updated_at": "2016-10-05T11:20:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is a duplicate of #13447 . void is not a supported dtype. as I said in that issue, you can cast if you want. Further this _could_ be checked more aggressively in construction. I'll mark it for that enhancement.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251656320",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251656320",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251656320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTY1NjMyMA==",
    "user": {
      "login": "jzwinck",
      "id": 1216791,
      "node_id": "MDQ6VXNlcjEyMTY3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1216791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzwinck",
      "html_url": "https://github.com/jzwinck",
      "followers_url": "https://api.github.com/users/jzwinck/followers",
      "following_url": "https://api.github.com/users/jzwinck/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzwinck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzwinck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzwinck/subscriptions",
      "organizations_url": "https://api.github.com/users/jzwinck/orgs",
      "repos_url": "https://api.github.com/users/jzwinck/repos",
      "events_url": "https://api.github.com/users/jzwinck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzwinck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T12:08:51Z",
    "updated_at": "2016-10-05T12:09:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chris-b1 Yes I am aware that the void dtype is said to be unsupported.  However it should not be nondeterministic, and it should not segfault.  The problem we have here is that Pandas is holding a reference it does not own, and this should be fixable.\n\n@jreback I do not want the solution to be simply refusing to construct a DataFrame.  Instead, at a minimum I would want a way to tell Pandas to construct the DataFrame with the columns it can use, and omit the ones it cannot use.  If it simply raises an exception every time it sees a void dtype, this will not be usable, but having it accept the data it can accept and omit the data it cannot accept would be OK with me.\n\nOr, even better, just fix the reference counting bug.  I'm not asking Pandas to \"support\" void any more or less than it does now, just that it should not crash the Python runtime.\n\nA patch to make Pandas fail to construct DataFrames that it was previously able to construct would be a step backward.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251657844",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251657844",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251657844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTY1Nzg0NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T12:16:46Z",
    "updated_at": "2016-10-05T12:16:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "if u want to submit a pull request great\nvoid is completely unsupported \nit may happen to work sometimes but this is not support\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251883820",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251883820",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251883820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTg4MzgyMA==",
    "user": {
      "login": "jzwinck",
      "id": 1216791,
      "node_id": "MDQ6VXNlcjEyMTY3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1216791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzwinck",
      "html_url": "https://github.com/jzwinck",
      "followers_url": "https://api.github.com/users/jzwinck/followers",
      "following_url": "https://api.github.com/users/jzwinck/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzwinck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzwinck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzwinck/subscriptions",
      "organizations_url": "https://api.github.com/users/jzwinck/orgs",
      "repos_url": "https://api.github.com/users/jzwinck/repos",
      "events_url": "https://api.github.com/users/jzwinck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzwinck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T07:07:49Z",
    "updated_at": "2016-10-06T07:08:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is another example, which has the same problem despite not explicitly using void:\n\n```\nprint(pd.DataFrame({'a': np.zeros(1000, [('x', 'i1', 4), ('y', 'i4')])}))\n```\n\nThe fundamental error is creation of an ObjectBlock which contains 1000 buffer readers which hold raw pointers into the passed array, with no reference count increment upon that array.\n\nA simple solution is the following patch to `internals.py`:\n\n```\nif len(object_items) > 0:\n    object_blocks = _simple_blockify(object_items, np.object_)\n+    for i in range(len(object_items)):\n+       object_blocks[i].reference_holder = object_items[i]\n```\n\nThen, each ObjectBlock does hold a reference to the input data.  This prevents the undefined behavior, and actually prints the correct values.\n\nI also tried changing `_simple_blockify()` there to `_multi_blockify()`, which makes construction work properly and preserves the `V4` dtype, but the problem is other parts of the code like Series don't like this, because `V4` is similar to `(i1, 4)` rather than `i4`, and \"compound\" dtypes are not supported either.\n\nThis also works, in `_stack_arrays()`:\n\n```\nfor i, arr in enumerate(arrays):\n    if issubclass(arr.dtype.type, np.void):\n        stacked[i] = None\n    else:\n        stacked[i] = _asarray_compat(arr)\n```\n\nWhat that does is to simply store `None` instead of the void data.\n\nOthers possible solutions include:\n- Adding a VoidBlock type (I expect @jreback will not like this because it looks like \"support\" for void).\n- Making the DataFrame constructor skip void columns automatically.  This would be OK with me, and perhaps smarter than storing a column full of `None` as above.\n\nDo any of these solutions appeal to you, @chris-b1 and @jreback ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251919630",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251919630",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251919630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTkxOTYzMA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T10:04:33Z",
    "updated_at": "2016-10-06T10:04:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it would be reasonable to make sure the right reference is held - I guess the issue that when you assign into an object array the refcount of the assigned values isn't incremented (is that a numpy bug?)  \n\n```\nv = np.zeros(1000, 'V4')\nstacked = np.empty((1,1000), dtype='O')\nstacked[0] = v\ndel v\n\nIn [8]: stacked\nOut[8]: \narray([array([ -80,  -45, -128,   32], dtype=int8),\n       array([-31,   1,   0,   0], dtype=int8),\n       array([  0, -18, -46,  27], dtype=int8),\n       array([-31,   1,   0,   0], dtype=int8),\n       array([-36,  18,   0,   0], dtype=int8)], dtype=object)\n```\n\nNot completely opposed to a having a `bytes` type, it just would be a lot of work for a fairly specialized use, especially where there are plans to revamp the type system,  See also \nhttps://github.com/pydata/pandas-design/issues/24 and feel free to comment there.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251920182",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251920182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251920182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTkyMDE4Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T10:07:28Z",
    "updated_at": "2016-10-06T10:07:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jzwinck you are just showing a variation on #13296. We are not supporting invalid dtypes. Sure they can be added, but this is quite a bit of work, in this case for almost no gain.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251943986",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251943986",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251943986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTk0Mzk4Ng==",
    "user": {
      "login": "jzwinck",
      "id": 1216791,
      "node_id": "MDQ6VXNlcjEyMTY3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1216791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzwinck",
      "html_url": "https://github.com/jzwinck",
      "followers_url": "https://api.github.com/users/jzwinck/followers",
      "following_url": "https://api.github.com/users/jzwinck/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzwinck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzwinck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzwinck/subscriptions",
      "organizations_url": "https://api.github.com/users/jzwinck/orgs",
      "repos_url": "https://api.github.com/users/jzwinck/repos",
      "events_url": "https://api.github.com/users/jzwinck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzwinck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T12:12:51Z",
    "updated_at": "2016-10-06T12:12:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback how about this idea?\n\n> Making the DataFrame constructor skip void columns automatically. This would be OK with me, and perhaps smarter than storing a column full of None as above.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251944478",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251944478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251944478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTk0NDQ3OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T12:15:28Z",
    "updated_at": "2016-10-06T12:15:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "just raise is simpler, better and more logical\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251948389",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251948389",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251948389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTk0ODM4OQ==",
    "user": {
      "login": "jzwinck",
      "id": 1216791,
      "node_id": "MDQ6VXNlcjEyMTY3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1216791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzwinck",
      "html_url": "https://github.com/jzwinck",
      "followers_url": "https://api.github.com/users/jzwinck/followers",
      "following_url": "https://api.github.com/users/jzwinck/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzwinck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzwinck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzwinck/subscriptions",
      "organizations_url": "https://api.github.com/users/jzwinck/orgs",
      "repos_url": "https://api.github.com/users/jzwinck/repos",
      "events_url": "https://api.github.com/users/jzwinck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzwinck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T12:35:03Z",
    "updated_at": "2016-10-06T12:35:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I do not like that at all, because it means that I can no longer rely on being able to construct a DataFrame from an ndarray--sometimes it will raise an exception even if the dimensions make sense.  If Pandas can't support void, I would very much prefer that the column either be filled with `None` (which I gave the code for above), or be omitted automatically so I can move on with my life and not always need to loop over the dtype first to look for columns which Pandas can't use.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251949034",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251949034",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251949034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTk0OTAzNA==",
    "user": {
      "login": "jzwinck",
      "id": 1216791,
      "node_id": "MDQ6VXNlcjEyMTY3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1216791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzwinck",
      "html_url": "https://github.com/jzwinck",
      "followers_url": "https://api.github.com/users/jzwinck/followers",
      "following_url": "https://api.github.com/users/jzwinck/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzwinck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzwinck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzwinck/subscriptions",
      "organizations_url": "https://api.github.com/users/jzwinck/orgs",
      "repos_url": "https://api.github.com/users/jzwinck/repos",
      "events_url": "https://api.github.com/users/jzwinck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzwinck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T12:37:49Z",
    "updated_at": "2016-10-06T12:38:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I should also mention that one of the common ways that void columns appear is via `align=True` dtypes in NumPy.  That is, if I create an \"aligned\" structured or recarray in NumPy, it will often have some void columns (sometimes with no name, sometimes with a name like f1, f2, depending on how it was born).  It's not that I'm deliberately creating void columns just to mess up Pandas.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251952621",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-251952621",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 251952621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTk1MjYyMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T12:53:42Z",
    "updated_at": "2016-10-06T12:53:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jzwinck then you are in charge of this in your code. pandas doesn't support void, full stop.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/252537547",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14349#issuecomment-252537547",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14349",
    "id": 252537547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjUzNzU0Nw==",
    "user": {
      "login": "jzwinck",
      "id": 1216791,
      "node_id": "MDQ6VXNlcjEyMTY3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1216791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzwinck",
      "html_url": "https://github.com/jzwinck",
      "followers_url": "https://api.github.com/users/jzwinck/followers",
      "following_url": "https://api.github.com/users/jzwinck/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzwinck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzwinck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzwinck/subscriptions",
      "organizations_url": "https://api.github.com/users/jzwinck/orgs",
      "repos_url": "https://api.github.com/users/jzwinck/repos",
      "events_url": "https://api.github.com/users/jzwinck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzwinck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-10T04:46:39Z",
    "updated_at": "2016-10-10T04:46:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chris-b1 I have created the above issue, https://github.com/numpy/numpy/issues/8129 due to what does look like a bug in NumPy.  Thank you for raising the possibility that the root cause is a NumPy bug--I didn't see that initially.  I'd appreciate your thoughts on that ticket if you have any.\n\nAs for this ticket, I am closing it because the very, very last thing I would ever want to happen would be for DataFrame construction to fail just because a void column exists.  I now believe the best way to resolve this issue is in NumPy.\n"
  }
]
