[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/384757763",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20831#issuecomment-384757763",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20831",
    "id": 384757763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDc1Nzc2Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T19:11:31Z",
    "updated_at": "2018-04-26T19:11:31Z",
    "author_association": "MEMBER",
    "body": "@mdickinson Thanks for raising the issue. Your completely right this is inconsistent, and thus behaviour you cannot rely upon. \r\n\r\nTrying to guess the (historical) origin of the issue: in the case of non-identical index with duplicates, the full combinatorial re-alignment is indeed reasonable, and the only thing we can do (except for raising an error). It is also consistent with indexing.\r\nOn the other hand, the fact that, *when* the index is identical, you don't get such a combinatorial explosion makes a DataFrame with duplicate index values somewhat more reasonable to work with. \r\n\r\nIn general, duplicate index values is not really recommended (given out default mode of doing alignment on all operation), but if you have a DataFrame with for example duplicate values in the index, the fact that you can still for example sum two columns (`df_with_dupe_index['c'] = df_with_dupe_index['a'] + df_with_dupe_index['b']`) makes a dataframe with duplicate index values somewhat workable.\r\n\r\nSo I am not sure what would be the best we can do here. Removing this \"feature\" to treat identical indexes with duplicate values as if they didn't have duplicate values will for sure break a lot of code. \r\nSo if we want to change something, I would rather change the first to error. But I am also not sure that is desirable in all cases."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385236114",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20831#issuecomment-385236114",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20831",
    "id": 385236114,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTIzNjExNA==",
    "user": {
      "login": "corranwebster",
      "id": 600761,
      "node_id": "MDQ6VXNlcjYwMDc2MQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/600761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/corranwebster",
      "html_url": "https://github.com/corranwebster",
      "followers_url": "https://api.github.com/users/corranwebster/followers",
      "following_url": "https://api.github.com/users/corranwebster/following{/other_user}",
      "gists_url": "https://api.github.com/users/corranwebster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/corranwebster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/corranwebster/subscriptions",
      "organizations_url": "https://api.github.com/users/corranwebster/orgs",
      "repos_url": "https://api.github.com/users/corranwebster/repos",
      "events_url": "https://api.github.com/users/corranwebster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/corranwebster/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-29T08:50:51Z",
    "updated_at": "2018-04-29T08:50:51Z",
    "author_association": "NONE",
    "body": "A possible partial solution to this may be to follow something like Numpy's broadcasting semantics: allow alignment with multiple values either by:\r\n\r\n- exact match of number of indexes with a particular value; or\r\n- allow multiples of a value in one index to match when there is a singleton entry in the other by broadcasting the single index value.\r\n\r\nEverything else is an error.\r\n\r\nSo in this case, everything works as it currently does when things match:\r\n```\r\n>>> s1 = pd.Series(range(5), list('abbbb'))\r\n>>> s2 = pd.Series(range(5), list('abbbb'))\r\n>>> s1 + s2\r\na    0\r\nb    2\r\nb    4\r\nb    6\r\nb    8\r\ndtype: int64\r\n```\r\nand this is also allowed (and also matches current behaviour):\r\n```\r\n>>> s3 = pd.Series(range(5), list('abbbb'))\r\n>>> s4 = pd.Series(range(2), list('ab'))\r\n>>> s3 + s4\r\na    0\r\nb    2\r\nb    3\r\nb    4\r\nb    5\r\ndtype: int64\r\n```\r\nand as is this:\r\n```\r\n>>> s4 + s3\r\na    0\r\nb    2\r\nb    3\r\nb    4\r\nb    5\r\ndtype: int64\r\n```\r\nbut\r\n```\r\n>>> s5 = pd.Series(range(3), list('abb'))\r\n>>> s6 = pd.Series(range(4), list('abbb'))\r\n>>> s5 + s6\r\n```\r\nraises an exception just as if you tried to add a length 3 Numpy array to a length 4 Numpy array.\r\n\r\nDoing this would break backwards compatibility, but would preserve some useful behaviour of the current implementation; and has the advantage of following existing conventions for similar situations in related codebases which allows users to reason about the behaviour."
  }
]
