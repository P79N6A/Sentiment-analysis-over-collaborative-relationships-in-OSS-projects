[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/347301474",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18516#issuecomment-347301474",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18516",
    "id": 347301474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzMwMTQ3NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T19:38:24Z",
    "updated_at": "2017-11-27T19:38:24Z",
    "author_association": "MEMBER",
    "body": "Yeah, that's indeed a little odd.  Strings are not necessarily first-class citizens compared to numeric types in the `pandas` world unfortunately.\r\n\r\nHave a look though and see what you can find out.  A PR would be greatly appreciated!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348209562",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18516#issuecomment-348209562",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18516",
    "id": 348209562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODIwOTU2Mg==",
    "user": {
      "login": "Khris777",
      "id": 7723080,
      "node_id": "MDQ6VXNlcjc3MjMwODA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7723080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Khris777",
      "html_url": "https://github.com/Khris777",
      "followers_url": "https://api.github.com/users/Khris777/followers",
      "following_url": "https://api.github.com/users/Khris777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Khris777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Khris777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Khris777/subscriptions",
      "organizations_url": "https://api.github.com/users/Khris777/orgs",
      "repos_url": "https://api.github.com/users/Khris777/repos",
      "events_url": "https://api.github.com/users/Khris777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Khris777/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T14:48:43Z",
    "updated_at": "2017-11-30T14:48:43Z",
    "author_association": "NONE",
    "body": "It seems like `\\x` is interpreted as hexadecimal escape in sre_parse.py which is a part of Python, the code just checks if the second character is `x` and then interprets it as a hex escape.\r\nHaven't looked further for now.\r\n\r\n```\r\ndef _escape(source, escape, state):\r\n    # handle escape code in expression\r\n    code = CATEGORIES.get(escape)\r\n    if code:\r\n        return code\r\n    code = ESCAPES.get(escape)\r\n    if code:\r\n        return code\r\n    try:\r\n        c = escape[1:2]\r\n        if c == \"x\":\r\n            # hexadecimal escape\r\n            escape += source.getwhile(2, HEXDIGITS)\r\n            if len(escape) != 4:\r\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\r\n            return LITERAL, int(escape[2:], 16)\r\n...\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348416625",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18516#issuecomment-348416625",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18516",
    "id": 348416625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODQxNjYyNQ==",
    "user": {
      "login": "Khris777",
      "id": 7723080,
      "node_id": "MDQ6VXNlcjc3MjMwODA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7723080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Khris777",
      "html_url": "https://github.com/Khris777",
      "followers_url": "https://api.github.com/users/Khris777/followers",
      "following_url": "https://api.github.com/users/Khris777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Khris777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Khris777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Khris777/subscriptions",
      "organizations_url": "https://api.github.com/users/Khris777/orgs",
      "repos_url": "https://api.github.com/users/Khris777/repos",
      "events_url": "https://api.github.com/users/Khris777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Khris777/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-01T06:54:34Z",
    "updated_at": "2017-12-01T06:56:04Z",
    "author_association": "NONE",
    "body": "Okay, this is not a pandas issue, this behaviour stems straight from Python's own `re` module:\r\n\r\n```\r\nimport re\r\n\r\npat = re.compile(\"\\\\x\")\r\n```\r\nthrows the same `incomplete escape \\x` error.\r\n\r\nBut doing this:\r\n```\r\npat = re.compile(r\"\\\\x\")\r\npat.search(\"\\\\x2f\")\r\n```\r\nsucceeds: `<_sre.SRE_Match object; span=(0, 2), match='\\\\x'>`\r\n\r\nSame goes for `pat = re.compile(\"\\\\\\\\x\")`.\r\n\r\nAnd oddly enough it doesn't matter if you match with `\"\\\\x2f\"` or `r\"\\\\x2f\"`\r\n\r\nSo in conclusion:\r\n\r\n- Matching using `\"\\\\x\"`, or `r\"\\x\"` results in an error as Python is recognizing `\"\\x\"` as a hex escape.\r\n- Matching using `r\"\\\\x\"` or `\"\\\\\\\\x\"` circumvents this problem with the odd effect that it matches both `\"\\\\x2f\"` and `r\"\\\\x2f\"` (which is equivalent to `\"\\\\\\\\x2f\"`).\r\n\r\nThe [docs](https://docs.python.org/3/library/re.html) say this:\r\n\r\n> If you’re not using a raw string to express the pattern, remember that Python also uses the backslash as an escape sequence in string literals; if the escape sequence isn’t recognized by Python’s parser, the backslash and subsequent character are included in the resulting string. However, if Python would recognize the resulting sequence, the backslash should be repeated twice. This is complicated and hard to understand, so it’s highly recommended that you use raw strings for all but the simplest expressions."
  }
]
