[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253668681",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253668681",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253668681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY2ODY4MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:25:46Z",
    "updated_at": "2016-10-13T23:25:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls show the error\n\nnote we have no support for 3.6 atm (it may work but not tested at all)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253668829",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253668829",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253668829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY2ODgyOQ==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:26:39Z",
    "updated_at": "2016-10-13T23:26:39Z",
    "author_association": "NONE",
    "body": "sorry, updated with the error message. i believe python 3.6.0 is a detail, i encountered this error on 3.5 too.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253669040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253669040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253669040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY2OTA0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:28:09Z",
    "updated_at": "2016-10-13T23:28:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes 3.6 doesn't matter\n\nhow is that cryptic?\n\nyou get a KeyError\nblah doesn't exist\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253669372",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253669372",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253669372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY2OTM3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:30:19Z",
    "updated_at": "2016-10-13T23:30:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "http://pandas.pydata.org/pandas-docs/stable/groupby.html#applying-different-functions-to-dataframe-columns\n\nyou have to have a valid column name when aggregating in a dataframe and a dict of name to function\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253669667",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253669667",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253669667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY2OTY2Nw==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:32:18Z",
    "updated_at": "2016-10-13T23:32:39Z",
    "author_association": "NONE",
    "body": "So the name of the column in the dict has to be the name of a column in the `DataFrame`. However if I do things like `.agg([np.sum, lambda x: func1(x), func2])` i get three columns, the second of which will have `<lambda>` as name. Wouldn't it be wise to have (as an option) something that allows the opposite behaviour? As in, passing a dictionary like `{\"col\": lambda x: func1(x)}` to obtain a column named `col` with `func1` as its result?\n\nApologies if there is already an option to do so.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253670137",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253670137",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253670137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MDEzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:35:18Z",
    "updated_at": "2016-10-13T23:35:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "a list works because it applies to all columns\n\nwhile a dict is selective at mapping column to function\n\npretty straightforward / you are suggesting something even more confusing\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253670548",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253670548",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253670548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MDU0OA==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:37:49Z",
    "updated_at": "2016-10-13T23:37:49Z",
    "author_association": "NONE",
    "body": "Sure. Until you try doing this\n\n``` python\nfunc1 = lambda x: x.sum()/x.std()\nfunc2 = lambda x: x.mean()/x.std()\n\n(\n    pd.DataFrame({\"u\": [2,1,4,2,5], \"v\": [3,1,5,2,3], \"a\": [\"a\", \"a\", \"b\", \"a\", \"b\"]})\n    .groupby(\"a\")\n    .agg([np.sum, np.mean, func1, func2])\n)\n```\n\nand you see it throwing this error: `SpecificationError: Function names must be unique, found multiple named <lambda>`.\n\nI don't think that aggregating by some random function and renaming the aggregated column is that weird ...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253670776",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253670776",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253670776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MDc3Ng==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:39:23Z",
    "updated_at": "2016-10-13T23:40:52Z",
    "author_association": "NONE",
    "body": "What I mean is something like this\n\n``` python\n(\n    pd.DataFrame({\"u\": [2,1,4,2,5], \"v\": [3,1,5,2,3], \"a\": [\"a\", \"a\", \"b\", \"a\", \"b\"]})\n    .groupby(\"a\")\n    .agg2({\"s\": np.sum, \"m\": np.mean, \"f1\": func1, \"f2\": func2})\n)\n```\n\nReturning an object with (in this case) a multi-index on the column level, with s, m, f1 and f2 below each column – which would be exactly like `agg`'s behaviour with `[np.sum, np.mean]` as an argument.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253671130",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253671130",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253671130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MTEzMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:41:21Z",
    "updated_at": "2016-10-13T23:41:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls read the docs you can do exactly that if u use a series groupby\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253671239",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253671239",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253671239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MTIzOQ==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:41:56Z",
    "updated_at": "2016-10-13T23:42:04Z",
    "author_association": "NONE",
    "body": "I know it works _exactly this way_ with `Series`. I am not sure why there can't be a similar option for `DataFrame`s?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253672140",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253672140",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253672140,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MjE0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:47:50Z",
    "updated_at": "2016-10-13T23:47:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can pass a nested dictionary\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253672427",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253672427",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253672427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MjQyNw==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:50:04Z",
    "updated_at": "2016-10-13T23:50:04Z",
    "author_association": "NONE",
    "body": "Ok so this does exactly what I wanted:\n\n``` python\nfunc1 = lambda x: x.sum()/x.std()\nfunc2 = lambda x: x.mean()/x.std()\n\nd = {\"s\": np.sum, \"m\": np.mean, \"f1\": func1, \"f2\": func2}\n\n(\n    pd.DataFrame({\"u\": [2,1,4,2,5], \"v\": [3,1,5,2,3], \"a\": [\"a\", \"a\", \"b\", \"a\", \"b\"]})\n    .groupby(\"a\")\n    .agg({\"u\": d, \"v\": d})\n)\n```\n\nWould you still think it's completely pointless to have something like `.agg2(d)` with the same behaviour?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253672481",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253672481",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253672481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MjQ4MQ==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:50:25Z",
    "updated_at": "2016-10-13T23:50:25Z",
    "author_association": "NONE",
    "body": "Pointless / confusing\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253673191",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253673191",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253673191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MzE5MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:55:11Z",
    "updated_at": "2016-10-13T23:55:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "too confusing to have another function which does exactly the same thing\n\nhowever the documentation could use an update on the nested dict case with a dataframe \nif you would like to do a pr \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253673445",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253673445",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253673445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3MzQ0NQ==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T23:56:53Z",
    "updated_at": "2016-10-13T23:57:28Z",
    "author_association": "NONE",
    "body": "I can update the documentation. I didn't mean to necessarily create another function but to try and non-destructively add this option to `agg`, as the above example falls to pieces when a `DataFrame` has more columns than just `u` and `v`. Thanks anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253827661",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253827661",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253827661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzgyNzY2MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-14T15:05:40Z",
    "updated_at": "2016-10-14T15:05:40Z",
    "author_association": "MEMBER",
    "body": "@myyc I certainly understand the usecase, but the problem is basically that it is not possible to support this with the same API, as you wouldn't be able to make the distinction anymore between\"do you want to apply this function to the specific column?\" or \"do you want to give this name to the result of this function?\" \nWe already had some discussion about this before, see eg https://github.com/pandas-dev/pandas/issues/9052 (specifically this post https://github.com/pandas-dev/pandas/issues/9052 where I give an overview of the different possibilities)\n\nI was just thinking. A possible way to be able to give a list of functions to be applied to all columns ánd being able to name the result would be to accept dicts of tuples in this list of functions. Currently you can pass a function or a string (for certain known functions), we could maybe extend this to dicts or typles like:\n\n```\ndf.groupby(..).agg(['mean', np.mean, {'average': np.mean}, ('average', np.mean)])\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253874388",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253874388",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253874388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mzg3NDM4OA==",
    "user": {
      "login": "myyc",
      "id": 5025392,
      "node_id": "MDQ6VXNlcjUwMjUzOTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5025392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myyc",
      "html_url": "https://github.com/myyc",
      "followers_url": "https://api.github.com/users/myyc/followers",
      "following_url": "https://api.github.com/users/myyc/following{/other_user}",
      "gists_url": "https://api.github.com/users/myyc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myyc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myyc/subscriptions",
      "organizations_url": "https://api.github.com/users/myyc/orgs",
      "repos_url": "https://api.github.com/users/myyc/repos",
      "events_url": "https://api.github.com/users/myyc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myyc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-14T17:56:44Z",
    "updated_at": "2016-10-14T17:56:44Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche Yeah I think that would do the trick, although the syntax is a bit weird (e.g. what happens if you pass stuff like `[np.mean, {'average': np.mean, 'avg': np.mean}]`?).\n\nI understand it's impossible with the current system, but don't you think that my proposal (i.e. hypothetically changing `DataFrameGroupBy.agg` altogether) would make it consistent with `SeriesGroupBy.agg`? I don't have usage data to back this change obviously.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253899445",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14421#issuecomment-253899445",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14421",
    "id": 253899445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mzg5OTQ0NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-14T19:33:06Z",
    "updated_at": "2016-10-14T19:33:06Z",
    "author_association": "MEMBER",
    "body": "> the syntax is a bit weird (e.g. what happens if you pass stuff like [np.mean, {'average': np.mean, 'avg': np.mean}]?).\n\nWell yes, that would be a bit strange, as I think we should only accept dicts of length 1 (therefore tuples are maybe more natural, but the dicts are more like how it works for series)\n\nIMO, both usages of the dict are useful (eg myself, I think I more use the dict to specify different functions for different columns, certainly if you have different data types in different column that should be aggregated differently, this is very handy. For correct naming I just use a `def ..` function instead of lambda functions). \nAnd unfortunately, both usages are not compatible with each other. So switching the one usage with the other, does not seem like a clear win to me (breaking code + how do you then specify different functions for different columns?) \nIt would make it indeed more consistent with the series version, but IMO that's not enough to be worth it.\n"
  }
]
