[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/271871634",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15105#issuecomment-271871634",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15105",
    "id": 271871634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTg3MTYzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-11T13:44:33Z",
    "updated_at": "2017-01-11T13:44:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "can you show an example. These are ordered by the index and not sorted. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/271925029",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15105#issuecomment-271925029",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15105",
    "id": 271925029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTkyNTAyOQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-11T16:56:19Z",
    "updated_at": "2017-01-11T16:56:19Z",
    "author_association": "MEMBER",
    "body": "Indeed, as @jreback points out we don't sort when stacking or unstacking. Rather, levels are sorted internally in a MultiIndex when a MultiIndex is constructed (e.g., with `from_arrays` or `from_product`).\r\n\r\nThis is a confusing implementation detail that leaks into the public API. The `levels` of a MultiIndex only look sorted if you look at the low-level MultiIndex repr, not the values in a series/dataframe:\r\n```\r\nIn [4]: index = pd.MultiIndex.from_arrays([['b', 'a'], [1, 0]])\r\n\r\nIn [5]: index\r\nOut[5]:\r\nMultiIndex(levels=[['a', 'b'], [0, 1]],\r\n           labels=[[1, 0], [1, 0]])\r\n\r\nIn [6]: index.to_series()\r\nOut[6]:\r\nb  1    (b, 1)\r\na  0    (a, 0)\r\ndtype: object\r\n```\r\n\r\nSee https://github.com/pandas-dev/pandas/issues/14903 and https://github.com/pandas-dev/pandas/issues/14672 for related discussion.\r\n\r\nI see a few alternatives for cleaning this up:\r\n\r\n1. Add a `sort_levels=False` argument to `from_arrays` and `from_product`, to allow not sorting levels at MultiIndex construction time. The downside is that this means that some MultiIndex indexing operations will be slow, which defeats part of the purpose of a MultiIndex, but it could still be nice to have the option.\r\n2. Add a `sort=False` or `reorder=False` option (maybe make this the default?) to stack/unstack/pivot, which would ensure that unstacked columns appear in order of appearance in the MultiIndex rather than sorted order (as you suggest here).\r\n3. Alternatively, we could do nothing and encourage using `Categorical` dtype to preserve level order, e.g., use `pd.Categorical(['b', 'a'], categories=['b', 'a'])` rather than just `['b', 'a']`. But this is pretty cumbersome and doesn't make the default behavior any more intuitive."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272323040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15105#issuecomment-272323040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15105",
    "id": 272323040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjMyMzA0MA==",
    "user": {
      "login": "naught101",
      "id": 167164,
      "node_id": "MDQ6VXNlcjE2NzE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/167164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naught101",
      "html_url": "https://github.com/naught101",
      "followers_url": "https://api.github.com/users/naught101/followers",
      "following_url": "https://api.github.com/users/naught101/following{/other_user}",
      "gists_url": "https://api.github.com/users/naught101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naught101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naught101/subscriptions",
      "organizations_url": "https://api.github.com/users/naught101/orgs",
      "repos_url": "https://api.github.com/users/naught101/repos",
      "events_url": "https://api.github.com/users/naught101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naught101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T00:03:42Z",
    "updated_at": "2017-01-13T00:03:42Z",
    "author_association": "NONE",
    "body": "2 - that would basically imply that the stack/unstack/pivot operation would record the order of index elements of the input, and re-order the output based on that, is that correct? That would be fine, I think."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272323384",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15105#issuecomment-272323384",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15105",
    "id": 272323384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjMyMzM4NA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T00:06:04Z",
    "updated_at": "2017-01-13T00:06:04Z",
    "author_association": "MEMBER",
    "body": "> 2 - that would basically imply that the stack/unstack/pivot operation would record the order of index elements of the input, and re-order the output based on that, is that correct? That would be fine, I think.\r\n\r\nCorrect, yes. One downside of this approach is that it is slightly slower to construct the new labels. It requires a pass over the full index using `pd.unique`, rather than just using the unique set of labels."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/273629724",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15105#issuecomment-273629724",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15105",
    "id": 273629724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzYyOTcyNA==",
    "user": {
      "login": "naught101",
      "id": 167164,
      "node_id": "MDQ6VXNlcjE2NzE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/167164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naught101",
      "html_url": "https://github.com/naught101",
      "followers_url": "https://api.github.com/users/naught101/followers",
      "following_url": "https://api.github.com/users/naught101/following{/other_user}",
      "gists_url": "https://api.github.com/users/naught101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naught101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naught101/subscriptions",
      "organizations_url": "https://api.github.com/users/naught101/orgs",
      "repos_url": "https://api.github.com/users/naught101/repos",
      "events_url": "https://api.github.com/users/naught101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naught101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-18T23:01:09Z",
    "updated_at": "2017-01-18T23:01:09Z",
    "author_association": "NONE",
    "body": "There's a good example of this here, I think: https://stackoverflow.com/questions/28686053/pandas-pivot-table-reoganize-order-of-multi-index"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/273655341",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15105#issuecomment-273655341",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15105",
    "id": 273655341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzY1NTM0MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-19T01:26:31Z",
    "updated_at": "2017-01-19T01:26:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "So this is quite straightforward to provide categorical orderings.\r\nThis currently has a small bug, see #15058, but does work (even though indexing generally requires lexsorting, this is compatible). So This is a reasonable soln.\r\n\r\n```\r\nIn [31]: index = pd.MultiIndex.from_tuples(list(zip(['a', 'a', 'a', 'b', 'b', 'b'],\r\n    ...:                                       [0, 0, 0, 1, 1, 1],\r\n    ...:                                       ['x', 'xx', 'xxx', 'x', 'xx', 'xxx'])),\r\n    ...:                                       names=['A', 'B', 'C'])\r\n    ...: df = pd.DataFrame(np.random.rand(6, 3), index = index)\r\n    ...: \r\n    ...: \r\n\r\nIn [32]: df\r\nOut[32]: \r\n                0         1         2\r\nA B C                                \r\na 0 x    0.179126  0.320740  0.048524\r\n    xx   0.448321  0.755726  0.685202\r\n    xxx  0.058184  0.984778  0.432928\r\nb 1 x    0.279140  0.876715  0.249856\r\n    xx   0.185775  0.403420  0.729933\r\n    xxx  0.133858  0.652050  0.960392\r\n\r\nIn [33]: df = df.reset_index()\r\n\r\nIn [34]: df = df.assign(C=df.C.astype('category', categories=['xxx', 'xx', 'x']))\r\n\r\nIn [35]: df\r\nOut[35]: \r\n   A  B    C         0         1         2\r\n0  a  0    x  0.179126  0.320740  0.048524\r\n1  a  0   xx  0.448321  0.755726  0.685202\r\n2  a  0  xxx  0.058184  0.984778  0.432928\r\n3  b  1    x  0.279140  0.876715  0.249856\r\n4  b  1   xx  0.185775  0.403420  0.729933\r\n5  b  1  xxx  0.133858  0.652050  0.960392\r\n\r\nIn [36]: df.dtypes\r\nOut[36]: \r\nA      object\r\nB       int64\r\nC    category\r\n0     float64\r\n1     float64\r\n2     float64\r\ndtype: object\r\n\r\nIn [37]: df.sort_values(['A', 'B', 'C'])\r\nOut[37]: \r\n   A  B    C         0         1         2\r\n2  a  0  xxx  0.058184  0.984778  0.432928\r\n1  a  0   xx  0.448321  0.755726  0.685202\r\n0  a  0    x  0.179126  0.320740  0.048524\r\n5  b  1  xxx  0.133858  0.652050  0.960392\r\n4  b  1   xx  0.185775  0.403420  0.729933\r\n3  b  1    x  0.279140  0.876715  0.249856\r\n```"
  }
]
