[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/130181467",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-130181467",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 130181467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDE4MTQ2Nw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-12T06:10:35Z",
    "updated_at": "2015-08-12T06:10:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback ready to go, cheers for the comments\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/130338036",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-130338036",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 130338036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDMzODAzNg==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-12T15:12:55Z",
    "updated_at": "2015-08-15T00:17:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback:\n\n`Period` didn't work for `DatetimeIndex`, because it tried to coerce to `Timestamp` and fails\n\nSo I changed the `get_loc` in `DatetimeIndex` to check if it's a Period and call `to_timestamp()` if so\n\n~~Is that the best way? I'm not sure why `Timestamp(period)` isn't the same as `period.to_timestamp()`? Feels like this is a hack because of that issue (but imagine there's a good reason)~~ (EDIT: without a `freq`, there's too much ambiguity. I've since added a `freq` check \n\n``` python\n>>> pd.Timestamp(period_index[1])\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-24-22f6327b2caf> in <module>()\n----> 1 pd.Timestamp(period_index[1])\n\npandas/tslib.pyx in pandas.tslib.Timestamp.__new__ (pandas/tslib.c:7638)()\n\npandas/tslib.pyx in pandas.tslib.convert_to_tsobject (pandas/tslib.c:21357)()\n\nValueError: Cannot convert Period to Timestamp unambiguously. Use to_timestamp\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/130877868",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-130877868",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 130877868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDg3Nzg2OA==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-13T23:23:14Z",
    "updated_at": "2015-08-13T23:23:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback updated, cheers!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/131439776",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-131439776",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 131439776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTQzOTc3Ng==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-15T20:07:22Z",
    "updated_at": "2015-08-15T20:07:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback updated, cheers!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/132160747",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-132160747",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 132160747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjE2MDc0Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T10:33:29Z",
    "updated_at": "2015-08-18T10:33:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@maximilianr In fact I would go further. I would say ALL `Period(...) in DatetimeIndex` should be `False`.\n\nWe cannot compare a Timespan with a Point index; If we do also something like that (e.g. `IntervalIndex`, which is eventually going to be the super-class of `PeriodIndex`, cc @shoyer ), then should have a method for doing it as its non-obvious how it should work.\n\nI don't think this worked before so this is not an API change then, right?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/132283004",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-132283004",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 132283004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjI4MzAwNA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T17:12:51Z",
    "updated_at": "2015-08-18T17:12:51Z",
    "author_association": "MEMBER",
    "body": "I agree with @jreback. It doesn't make sense for a period to be contained in any timestamp, because periods represent spans of time and timestamps represent instants in time.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/132581047",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-132581047",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 132581047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjU4MTA0Nw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T12:54:51Z",
    "updated_at": "2015-08-19T12:54:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, @jreback, @shoyer, and you're confident these shouldn't be `True` either? I had thought the intention was fairly clear here, but can appreciate the principle of Period vs Timestamp.\n\n``` python\nIn [5]: pd.date_range('2013-01-01', periods=10, freq='D')\nOut[5]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06', '2013-01-07', '2013-01-08',\n               '2013-01-09', '2013-01-10'],\n              dtype='datetime64[ns]', freq='D', tz=None)\n\nIn [6]: pd.Period('2013-01-02','D') in _\nOut[6]: True\n```\n\n``` python\nIn [9]: pd.date_range('2013-01', periods=10, freq='M')\nOut[9]: \nDatetimeIndex(['2013-01-31', '2013-02-28', '2013-03-31', '2013-04-30',\n               '2013-05-31', '2013-06-30', '2013-07-31', '2013-08-31',\n               '2013-09-30', '2013-10-31'],\n              dtype='datetime64[ns]', freq='M', tz=None)\n\nIn [10]: pd.Period('2013-02','M') in _\nOut[10]: True\n```\n\nIn which case, if we're considering the `in` to mean 'within the span represented by the index', rather than 'is one of the values in the index', should this be `True`? Because it's a stamp within the period / interval? \n(although we could leave the implementation of this to a separate PR / `IntervalIndex`)\n\n``` python\nIn [2]: pd.period_range('2013-01',periods=10,freq='M')\nOut[2]: \nPeriodIndex(['2013-01', '2013-02', '2013-03', '2013-04', '2013-05', '2013-06',\n             '2013-07', '2013-08', '2013-09', '2013-10'],\n            dtype='int64', freq='M')\n\nIn [3]: pd.Timestamp('2013-01-03','D') in _\nOut[3]: False\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/132604372",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-132604372",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 132604372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjYwNDM3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T13:46:12Z",
    "updated_at": "2015-08-19T13:46:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@maximilianr I think all of those 3 examples should be `False`. `in` needs to be pretty strict.\n- `in` won't do a point time (`Timestamp`) in a span (`Period`), this should be left to another (named) method (`.isin` sounds good but already taken)\n- similarly just because the freq of a span and a point time match, doesn't meet my definition of strictness (aside from the fact that it makes the `in` operation communitive which is a good property). The basic issues that full-overlap cannot be distinguished from partial overlap , e.g. what if the freq matches but only 1 point is in the `DatetimeIndex`, or what if you have a monthly freq `DatetimeIndex` does a quarterly freq `Period` match that for `in`? (assume that all months in the quarter are present). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/132638023",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-132638023",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 132638023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjYzODAyMw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T15:26:38Z",
    "updated_at": "2015-11-22T09:02:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, that makes sense @jreback. I think it follows that `PeriodIndex.__contains__` allowing `Timestamp` is also invalid. So this should actually be `False`:\n\n``` python\nIn [16]: pd.period_range('2013-01',periods=10,freq='D')\nOut[16]: \nPeriodIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n             '2013-01-05', '2013-01-06', '2013-01-07', '2013-01-08',\n             '2013-01-09', '2013-01-10'],\n            dtype='int64', freq='D')\n\nIn [17]: pd.Timestamp('2013-01-03') in _\nOut[17]: False\n```\n\nWhile this should be `True`, because the stamp vs period nature of a string isn't yet defined? \n\n``` python\nIn [19]: '2013-01-03' in _\nOut[19]: True\n```\n\nHow about for `datetime` objects? I would have thought those would be similar to strings.\n\nAgreed on the additional method, `within` could be the name, with a `partial` arg stating whether a partial overlap was acceptable. But that's for the next one / `IntervalIndex`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/132642234",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-132642234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 132642234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjY0MjIzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T15:39:38Z",
    "updated_at": "2015-08-19T15:39:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@maximilianr \n\n`Timestamp` are a sub-class of `datetime`, so they should be treated exactly the same.\n\nHowever a string can be directly coerced to a `Period` (with the frequency of the period), so is deemed acceptable.\n\nIIRC the original issue was:\n\n```\nperiod_index\nOut[9]:\nPeriodIndex(['2015-01-01', '2015-01-02', '2015-01-05', '2015-01-06',\n             '2015-01-07', '2015-01-08', '2015-01-09', '2015-01-12',\n             '2015-01-13', '2015-01-14', '2015-01-15', '2015-01-16',\n             '2015-01-19', '2015-01-20', '2015-01-21', '2015-01-22',\n             '2015-01-23', '2015-01-26', '2015-01-27', '2015-01-28',\n             '2015-01-29', '2015-01-30'],\n            dtype='int64', freq='B')\nIn [10]:\n\n'2015-01-06' in period_index\nOut[10]:\nTrue\nIn [15]:\n\ndt = datetime.datetime(2015,1,6) \ndt\nOut[15]:\ndatetime.datetime(2015, 1, 6, 0, 0)\nIn [16]:\n\ndt in period_index\nOut[16]:\nFalse\nIn [17]:\n\nd = datetime.date(2015,1,6) \nd\nOut[17]:\ndatetime.date(2015, 1, 6)\nIn [18]:\n\nd in period_index\nOut[18]:\nFalse\n```\n\nSo we are back full-circle. If we don't allow `Timestamp/datetime.datetime` then `datetime.date` should not be allowed either. And the converse should be True (IOW if we DO allow `Timestamp` then it is ok).\n\nAnd from your example above.\n\n```\nIn [1]: p = pd.period_range('2013-01',periods=10,freq='D')\n\nIn [2]: p\nOut[2]: PeriodIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06', '2013-01-07', '2013-01-08', '2013-01-09', '2013-01-10'], dtype='int64', freq='D')\n\nIn [3]: '2013-01-02' in p\nOut[3]: True\n\nIn [4]: Timestamp('2013-01-02') in p\nOut[4]: False\n\nIn [5]: Timestamp('2013-01-02').to_pydatetime() in p\nOut[5]: False\n```\n\nSay we allowed [4], and [5] to be `True`. What would you do here? \n\n```\nIn [3-1]: '2013-01-02 10:00:00' in p\nIn [4-1]: Timestamp('2013-01-02 10:00:00') in p\nIn [5-1]: Timestamp('2013-01-02 10:00:00').to_pydatetime() in p\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/133207414",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-133207414",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 133207414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzIwNzQxNA==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-20T23:04:19Z",
    "updated_at": "2015-08-20T23:04:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I agree overall. \n\nBut there's one case here that remains clear in the specific; I'm not sure if it's too specific to be generalizable though.\n\nA `datetime.date` seems similar in many ways to a day `Period`. It's a discrete ordinal within a countable set, rather than a single point within a continuous span (which is the difference between this and your most recent example). It's not exactly the same, but it's certainly comparable.\n\nSo I would propose that the following is `True`:\n\n``` python\nIn [11]: pd.period_range('2001-01-01', freq='D', periods=20)\nOut[11]: \nPeriodIndex(['2001-01-01', '2001-01-02', '2001-01-03', '2001-01-04',\n             '2001-01-05', '2001-01-06', '2001-01-07', '2001-01-08',\n             '2001-01-09', '2001-01-10', '2001-01-11', '2001-01-12',\n             '2001-01-13', '2001-01-14', '2001-01-15', '2001-01-16',\n             '2001-01-17', '2001-01-18', '2001-01-19', '2001-01-20'],\n            dtype='int64', freq='D')\n\nIn [12]: datetime.date(2001,1,3) in _\nOut[12]: True\n```\n\nIn our case, our dates come from our DB as `datetime.date`s, and most of our pandas data is in `PeriodIndex` form - this is the case that inspired the issue & PR.\n\nIf there were other comparable types, like a `datetime.month`, then I'd hold the parallel logic (but there aren't).\n\nWhat are your thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/133208033",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-133208033",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 133208033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzIwODAzMw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-20T23:09:30Z",
    "updated_at": "2015-08-20T23:09:30Z",
    "author_association": "MEMBER",
    "body": "@maximilianr I would be inclined to agree if not for this fact:\n\n```\nIn [36]: import datetime\n\nIn [37]: issubclass(datetime.date, datetime.datetime)\nOut[37]: False\n\nIn [38]: issubclass(datetime.datetime, datetime.date)\nOut[38]: True\n```\n\nIn Python, datetime is a subclass of date, not the other way around. This seems highly strange to me...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/133211131",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-133211131",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 133211131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzIxMTEzMQ==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-20T23:33:02Z",
    "updated_at": "2015-08-20T23:33:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer Yes that is odd. \nDoes that matter in this case though? We could just check `type(key)==datetime.date`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/133221733",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-133221733",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 133221733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzIyMTczMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-21T00:03:25Z",
    "updated_at": "2015-08-21T00:03:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@maximilianr why don't you just\n\n```\nIn [1]: Period(datetime.date(2015,1,1),'M')\nOut[1]: Period('2015-01', 'M')\n```\n\nto the keys.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/133225337",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-133225337",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 133225337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzIyNTMzNw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-21T00:19:03Z",
    "updated_at": "2015-08-21T00:19:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback That's what we do - and this is one of those things we have that seems like it should be in the library for all...\n\nBut your guys' call - if you think it doesn't make sense then we should close\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/134784495",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-134784495",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 134784495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDc4NDQ5NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-26T01:23:14Z",
    "updated_at": "2015-08-26T01:23:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@maximilianr I don't think we can make this change on ONLY `datetime.date` w/o making it on `datetime.datetime` and `Timestamp` as that's way confusing. This brings up the timespan / point-in-time argument. So I think let's close this for now (i'll leave the issue open though) and can revisit in the future.\n\n@maximilianr thanks for the discussion.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/134797294",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10801#issuecomment-134797294",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10801",
    "id": 134797294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDc5NzI5NA==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-26T02:38:41Z",
    "updated_at": "2015-08-26T02:38:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, cheers @jreback \n"
  }
]
