[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/263927492",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14775#issuecomment-263927492",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14775",
    "id": 263927492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzkyNzQ5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T16:51:44Z",
    "updated_at": "2016-11-30T16:51:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "after you reset, you need to ``.sort_index()`` to assure lexsorted-ness. I believe a performance warning is issued if that is not the case (though don't really remember)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264018724",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14775#issuecomment-264018724",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14775",
    "id": 264018724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDAxODcyNA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T22:36:03Z",
    "updated_at": "2016-11-30T22:36:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, I think one problem is here:\r\nhttps://github.com/pandas-dev/pandas/blob/2bd9c95ffe6e026c035327246a63c8a89e858ddb/pandas/indexes/base.py#L2644\r\n\r\nIf the levels are the same, we try and do a 'simple' join, but it involves populating a huge and expensive hash table of tuples, xref #13904.  I think that could be easily fixed (the join case - not the general issue).  This would explain why the joins on non-identical levels are faster.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264170618",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14775#issuecomment-264170618",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14775",
    "id": 264170618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDE3MDYxOA==",
    "user": {
      "login": "SReicheltPTV",
      "id": 24275372,
      "node_id": "MDQ6VXNlcjI0Mjc1Mzcy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/24275372?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SReicheltPTV",
      "html_url": "https://github.com/SReicheltPTV",
      "followers_url": "https://api.github.com/users/SReicheltPTV/followers",
      "following_url": "https://api.github.com/users/SReicheltPTV/following{/other_user}",
      "gists_url": "https://api.github.com/users/SReicheltPTV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SReicheltPTV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SReicheltPTV/subscriptions",
      "organizations_url": "https://api.github.com/users/SReicheltPTV/orgs",
      "repos_url": "https://api.github.com/users/SReicheltPTV/repos",
      "events_url": "https://api.github.com/users/SReicheltPTV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SReicheltPTV/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T13:15:57Z",
    "updated_at": "2016-12-01T13:15:57Z",
    "author_association": "NONE",
    "body": "> after you reset, you need to .sort_index() to assure lexsorted-ness.\r\n\r\nThanks for this info; that sounds very plausible. (I didn't get any performance warnings, though.)\r\nHere are the updated results:\r\n[test_join_results_sorted.txt](https://github.com/pandas-dev/pandas/files/624623/test_join_results_sorted.txt)\r\nUnfortunately, it doesn't usually seem to help much, and the sorting itself takes even longer than the inefficient join.\r\n\r\n> If the levels are the same, we try and do a 'simple' join, but it involves populating a huge and expensive hash table of tuples, xref #13904.\r\n\r\nAh, so I suppose the large differences between subsequent tries are also due to the calculation of this hash table.\r\n\r\n> I think that could be easily fixed (the join case - not the general issue). This would explain why the joins on non-identical levels are faster.\r\n\r\nWouldn't we then run into the problem that \"merging with more than one level overlap is not implemented\", though?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/342536548",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14775#issuecomment-342536548",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14775",
    "id": 342536548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjUzNjU0OA==",
    "user": {
      "login": "kongscn",
      "id": 3240086,
      "node_id": "MDQ6VXNlcjMyNDAwODY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3240086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kongscn",
      "html_url": "https://github.com/kongscn",
      "followers_url": "https://api.github.com/users/kongscn/followers",
      "following_url": "https://api.github.com/users/kongscn/following{/other_user}",
      "gists_url": "https://api.github.com/users/kongscn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kongscn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kongscn/subscriptions",
      "organizations_url": "https://api.github.com/users/kongscn/orgs",
      "repos_url": "https://api.github.com/users/kongscn/repos",
      "events_url": "https://api.github.com/users/kongscn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kongscn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T16:21:20Z",
    "updated_at": "2017-11-07T16:21:20Z",
    "author_association": "NONE",
    "body": "Any update? I'm facing the same problem on multi-index joins with 0.21.0, about 6M rows of each dataframe.\r\n@jreback is right about sort. But by using `pd.merge` I can get roughly the same performance as joining two dataframes with sorted index(even slightly better).\r\nIt can be confirmed by `prun` that a significant amount of time is used for index-ordering tasks, which is not really bound to a `join` task. Though this is kind of one-time job and future performance may benefit, the cost is just too high in a `join`.\r\n```\r\n1755 function calls (1726 primitive calls) in 16.401 seconds\r\n\r\n   Ordered by: internal time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        2   10.127    5.063   10.127    5.063 {built-in method numpy.core.multiarray.lexsort}\r\n        2    4.343    2.172    4.343    2.172 {pandas._libs.lib.fast_zip}\r\n        1    0.837    0.837    0.837    0.837 {pandas._libs.join.left_join_indexer_unique_object}\r\n```\r\nIt takes only about 2 sec for `pd.merge` for the same job. It's comparable to joining tasks with sorted index."
  }
]
