[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/138629260",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-138629260",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 138629260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODYyOTI2MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-08T16:46:28Z",
    "updated_at": "2015-09-08T16:46:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls show an example. This generally is just an indexer, e.g.\n\n```\nIn [23]: np.random.seed(1234)\n\nIn [24]: df = DataFrame({'A' : np.random.randn(10)})\n\nIn [25]: df[df.A>0.5]\nOut[25]: \n          A\n2  1.432707\n5  0.887163\n6  0.859588\n\nIn [26]: indexer = df>0.5\n\nIn [27]: indexer\nOut[27]: \n       A\n0  False\n1  False\n2   True\n3  False\n4  False\n5   True\n6   True\n7  False\n8  False\n9  False\n\nIn [28]: df.loc[indexer.A]\nOut[28]: \n          A\n2  1.432707\n5  0.887163\n6  0.859588\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/138636543",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-138636543",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 138636543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODYzNjU0Mw==",
    "user": {
      "login": "alzmcr",
      "id": 4122640,
      "node_id": "MDQ6VXNlcjQxMjI2NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4122640?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alzmcr",
      "html_url": "https://github.com/alzmcr",
      "followers_url": "https://api.github.com/users/alzmcr/followers",
      "following_url": "https://api.github.com/users/alzmcr/following{/other_user}",
      "gists_url": "https://api.github.com/users/alzmcr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alzmcr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alzmcr/subscriptions",
      "organizations_url": "https://api.github.com/users/alzmcr/orgs",
      "repos_url": "https://api.github.com/users/alzmcr/repos",
      "events_url": "https://api.github.com/users/alzmcr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alzmcr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-08T17:08:44Z",
    "updated_at": "2015-09-08T17:27:53Z",
    "author_association": "NONE",
    "body": "```\nimport pandas as pd\nimport numpy as np\nimport itertools\n\ndef search_sorted_subsets_field(df, field, keywords):\n    subsets = []\n    for keyword in keywords:\n        left_bound = df[field].searchsorted(keyword,'left')[0]\n        right_bound = df[field].searchsorted(keyword,'right')[0]\n        if (right_bound-left_bound) > 0:\n            subsets.append(df[left_bound:right_bound])\n    return subsets\n\ndef search_sorted_subsets(df, searches):\n    subsets = [df]\n    for field, values in searches:\n        subsets = list(itertools.chain(*[search_sorted_subsets_field(subset, field, values) for subset in subsets]))\n    return pd.DataFrame(np.vstack(subsets) if len(subsets)>0 else None,columns=df.columns).convert_objects()\n\nsearches = [\n    ['A',[1300,1400]],\n    ['B', [2300]]\n]\n\ndf = pd.DataFrame(np.array([range(1000,2000),range(2000,3000)]).T,columns=['A','B'])\n\nprint search_sorted_subsets(df, searches)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/138642473",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-138642473",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 138642473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODY0MjQ3Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-08T17:31:55Z",
    "updated_at": "2015-09-08T17:32:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "why wouldn't you simply write a boolean expression? you can even do this dynamically, see [here](http://pandas.pydata.org/pandas-docs/stable/cookbook.html#building-criteria)\n\n```\nIn [12]: df[(df.A>=1300)&(df.A<1400)&(df.B==2300)]\nOut[12]: \n        A     B\n300  1300  2300\n```\n\nfurthermore your example above discards the index\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/138825354",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-138825354",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 138825354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODgyNTM1NA==",
    "user": {
      "login": "alzmcr",
      "id": 4122640,
      "node_id": "MDQ6VXNlcjQxMjI2NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4122640?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alzmcr",
      "html_url": "https://github.com/alzmcr",
      "followers_url": "https://api.github.com/users/alzmcr/followers",
      "following_url": "https://api.github.com/users/alzmcr/following{/other_user}",
      "gists_url": "https://api.github.com/users/alzmcr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alzmcr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alzmcr/subscriptions",
      "organizations_url": "https://api.github.com/users/alzmcr/orgs",
      "repos_url": "https://api.github.com/users/alzmcr/repos",
      "events_url": "https://api.github.com/users/alzmcr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alzmcr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-09T08:31:59Z",
    "updated_at": "2015-09-09T08:43:59Z",
    "author_association": "NONE",
    "body": "Sorry - I was in rush yesterday so I couldn't explain in detail.\n\nIf you increase the size of the DataFrame you'll start noticing significant change in performance.\n\n```\nIn [7]: df = pd.DataFrame(np.array([range(1000,299000),range(2000,300000)]).T,columns=['A','B'])\n\nIn [8]: %timeit _=df[(df.A>=1300)&(df.A<1400)&(df.B==2300)]\n100 loops, best of 3: 12.9 ms per loop\n\nIn [9]: %timeit _=search_sorted_subsets(df, searches)\n1000 loops, best of 3: 1.48 ms per loop\n```\n\nAnd if you keep increasing the length of the DataFrame, the difference would be even bigger.\nThat's why this topic is call \"fast search\", not just search! I hope this made the point :)\n\nUsing bitwise operation between long series of booleans get can expensive, and the above example is the proof. I haven't found a way to take advantage of precomputed index to navigate and search terms in a data frame. You can sort the field you'll be searching as I did, in order to create a \"rudimentary\" sorted index...but I guess would be a very interesting feature to have in pandas.\n\nI currently use pandas to store a seriously huge DataFrame in memory, which then I need to query multiple times in order to get very few rows out of it, filtering on a number of columns!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/138878283",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-138878283",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 138878283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODg3ODI4Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-09T11:13:46Z",
    "updated_at": "2015-09-09T11:13:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well you ought to look here: http://pandas.pydata.org/pandas-docs/stable/advanced.html#using-slicers.\n\nYou are assuming things are sorted, and that they are monotonic increasing, these things are relatively expensive to compute.\n\nHowever, in general you cannot assume sortedness., so in this case using searchsorted is a good idea. \n\nThe slicers can take advantage of this and will scale much better than boolean indexing. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/138889948",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-138889948",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 138889948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODg4OTk0OA==",
    "user": {
      "login": "alzmcr",
      "id": 4122640,
      "node_id": "MDQ6VXNlcjQxMjI2NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4122640?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alzmcr",
      "html_url": "https://github.com/alzmcr",
      "followers_url": "https://api.github.com/users/alzmcr/followers",
      "following_url": "https://api.github.com/users/alzmcr/following{/other_user}",
      "gists_url": "https://api.github.com/users/alzmcr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alzmcr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alzmcr/subscriptions",
      "organizations_url": "https://api.github.com/users/alzmcr/orgs",
      "repos_url": "https://api.github.com/users/alzmcr/repos",
      "events_url": "https://api.github.com/users/alzmcr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alzmcr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-09T12:12:13Z",
    "updated_at": "2015-09-09T12:12:34Z",
    "author_association": "NONE",
    "body": "I wasn't aware of the slicer and how to use them - thanks! Although even using slicer and taking advantages of using sorted columns, is not as fast using \"precompute indices\".\n\nI agree it's an **expensive** procedure, but would be very beneficial when you'll need to query the same DataFrame many many many times.\n\n```\nIn [25]: %timeit _=search_with_index(data, searches)\n100 loops, best of 3: 6.43 ms per loop\n\nIn [26]: %timeit _=data1.loc[(slice(0.1,0.3),slice(0.1,0.3)),:]\n10 loops, best of 3: 22.5 ms per loop\n```\n\nUp to **x3 times** in this case with an other rusty and quick index implementation. So I'm not sure if that can be implemented with some better algos at some points! :)\n\n```\nimport itertools\nimport numpy as np\nimport pandas as pd\n\ndef build_index(df, columns=None):\n    if columns is None: columns = df.columns.tolist()\n    # initialize index dictionary if not present\n    if (not hasattr(df,'adhoc_indexes')): df.adhoc_indexes = {}\n    for col in columns:\n        index = {}\n        for val in df[col].unique():\n            index[val] = df[df[col]==val].index.tolist()\n        df.adhoc_indexes[col] = index\n\ndef search_with_index(df, searches):\n    idx = []\n    for col,values in searches:\n        # check if index for current column exists, if doesn't create it on the fly\n        if (not hasattr(df,'adhoc_indexes')) or (col not in df.adhoc_indexes):\n            build_index(df, columns=[col])\n        # get indices for current column\n        idx.append(\n            set(itertools.chain(*[df.adhoc_indexes[col][val] for val in values]))\n        )\n    # get the intersections of the indices and return the requested rows from the dataframe\n    return df.iloc[list(set.intersection(*idx))]\n\ndata = np.random.random((1000000,5)).round(2)\ndata = pd.DataFrame(data,columns=[col for col in 'ABCDFGHILK'[:data.shape[1]]])\ndata1 = data.copy().set_index(['A','B']).sort_index()\n\n#searches = [['A',[0.1,0.3]]]\nsearches = [['A',[0.1,0.3]],['B',[0.1,0.3]]]\n\n# build index\nbuild_index(data, ['A','B'])\n\n# timings\n%timeit _=search_with_index(data, searches)\n\n%timeit _=data1.loc[(slice(0.1,0.3),slice(0.1,0.3)),:]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/138893889",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-138893889",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 138893889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODg5Mzg4OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-09T12:25:53Z",
    "updated_at": "2015-09-09T12:25:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "You are just caching lookups. frames already do this in a quite general way.\n\n```\nIn [19]: %time build_index(data, ['A','B'])\nCPU times: user 852 ms, sys: 30.4 ms, total: 882 ms\nWall time: 882 ms\n```\n\nYou can certainly poke around if you'd like to try to implement some speedups. But  your usecase is fairly narrow and no idea what an API would be useful / look-like.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/293857989",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-293857989",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 293857989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mzg1Nzk4OQ==",
    "user": {
      "login": "alzmcr",
      "id": 4122640,
      "node_id": "MDQ6VXNlcjQxMjI2NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4122640?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alzmcr",
      "html_url": "https://github.com/alzmcr",
      "followers_url": "https://api.github.com/users/alzmcr/followers",
      "following_url": "https://api.github.com/users/alzmcr/following{/other_user}",
      "gists_url": "https://api.github.com/users/alzmcr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alzmcr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alzmcr/subscriptions",
      "organizations_url": "https://api.github.com/users/alzmcr/orgs",
      "repos_url": "https://api.github.com/users/alzmcr/repos",
      "events_url": "https://api.github.com/users/alzmcr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alzmcr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-13T10:56:18Z",
    "updated_at": "2017-04-13T10:56:18Z",
    "author_association": "NONE",
    "body": "Since I've noticed this have been move here, I ended up addressing this problem using some runtime pandas already have for group by to speed everything even more up.\r\n\r\n```\r\ndef search_dataframe_index(df, params):\r\n    fields = tuple([x[0] for x in params])\r\n    values = [x[1] for x in params]\r\n\r\n    if not hasattr(df, '_search_groups'):\r\n        df._search_groups = dict()\r\n\r\n    if not fields in df._search_groups:\r\n        # Building index for %s\" % str(fields))\r\n        df._search_groups[fields] = df.reset_index().groupby(fields).groups\r\n\r\n    irows = []\r\n    for i in itertools.product(*values):\r\n        if i in df._search_groups[fields]:\r\n            irows.append(df._search_groups[fields][i])\r\n\r\n    return df.take(list(itertools.chain(*irows)))\r\n\r\n# NEW METHOD - first time for caching\r\n%time _=search_dataframe_index(data, searches)\r\nCPU times: user 2.28 s, sys: 205 ms, total: 2.49 s\r\nWall time: 2.49 s\r\n\r\n# NEW METHOD - average performance\r\n%timeit _=search_dataframe_index(data, searches)\r\n1000 loops, best of 3: 275 µs per loop\r\n\r\n# PREVIOUS\r\n%timeit _=search_with_index(data, searches)\r\n100 loops, best of 3: 3.15 ms per loop\r\n\r\n%timeit _=data1.loc[(slice(0.1,0.3),slice(0.1,0.3)),:]\r\n10 loops, best of 3: 57.3 ms per loop\r\n\r\n```\r\nIs much faster when searching, bust is quite 'slow' when creating the 'index'. Still, in my production case brought down the processing time from 1 hour to 5 minutes :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/311969175",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-311969175",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 311969175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTk2OTE3NQ==",
    "user": {
      "login": "humford",
      "id": 8173548,
      "node_id": "MDQ6VXNlcjgxNzM1NDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8173548?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/humford",
      "html_url": "https://github.com/humford",
      "followers_url": "https://api.github.com/users/humford/followers",
      "following_url": "https://api.github.com/users/humford/following{/other_user}",
      "gists_url": "https://api.github.com/users/humford/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/humford/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/humford/subscriptions",
      "organizations_url": "https://api.github.com/users/humford/orgs",
      "repos_url": "https://api.github.com/users/humford/repos",
      "events_url": "https://api.github.com/users/humford/events{/privacy}",
      "received_events_url": "https://api.github.com/users/humford/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-29T13:38:50Z",
    "updated_at": "2017-06-29T13:38:50Z",
    "author_association": "NONE",
    "body": "@alzmcr Did you put this change into a PR?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/311970566",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-311970566",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 311970566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTk3MDU2Ng==",
    "user": {
      "login": "alzmcr",
      "id": 4122640,
      "node_id": "MDQ6VXNlcjQxMjI2NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4122640?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alzmcr",
      "html_url": "https://github.com/alzmcr",
      "followers_url": "https://api.github.com/users/alzmcr/followers",
      "following_url": "https://api.github.com/users/alzmcr/following{/other_user}",
      "gists_url": "https://api.github.com/users/alzmcr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alzmcr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alzmcr/subscriptions",
      "organizations_url": "https://api.github.com/users/alzmcr/orgs",
      "repos_url": "https://api.github.com/users/alzmcr/repos",
      "events_url": "https://api.github.com/users/alzmcr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alzmcr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-29T13:43:58Z",
    "updated_at": "2017-06-29T13:43:58Z",
    "author_association": "NONE",
    "body": "@humford nope but I could, I already have all the code. It's just a matter of deciding if it's elegant enough storing additional elements for indexing within a data frame and probably a better name for the function."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/311976403",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-311976403",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 311976403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTk3NjQwMw==",
    "user": {
      "login": "humford",
      "id": 8173548,
      "node_id": "MDQ6VXNlcjgxNzM1NDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8173548?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/humford",
      "html_url": "https://github.com/humford",
      "followers_url": "https://api.github.com/users/humford/followers",
      "following_url": "https://api.github.com/users/humford/following{/other_user}",
      "gists_url": "https://api.github.com/users/humford/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/humford/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/humford/subscriptions",
      "organizations_url": "https://api.github.com/users/humford/orgs",
      "repos_url": "https://api.github.com/users/humford/repos",
      "events_url": "https://api.github.com/users/humford/events{/privacy}",
      "received_events_url": "https://api.github.com/users/humford/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-29T14:04:17Z",
    "updated_at": "2017-06-29T14:04:17Z",
    "author_association": "NONE",
    "body": "@alzmcr In regards to the previous discussion, do you know where/how this might fit into the repo? It seems like this has been added to a release milestone and you've documented a pretty remarkable speed up so I think a PR might allow a more focused discussion on implementation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383591211",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-383591211",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 383591211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzU5MTIxMQ==",
    "user": {
      "login": "shishirpy",
      "id": 1947809,
      "node_id": "MDQ6VXNlcjE5NDc4MDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1947809?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shishirpy",
      "html_url": "https://github.com/shishirpy",
      "followers_url": "https://api.github.com/users/shishirpy/followers",
      "following_url": "https://api.github.com/users/shishirpy/following{/other_user}",
      "gists_url": "https://api.github.com/users/shishirpy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shishirpy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shishirpy/subscriptions",
      "organizations_url": "https://api.github.com/users/shishirpy/orgs",
      "repos_url": "https://api.github.com/users/shishirpy/repos",
      "events_url": "https://api.github.com/users/shishirpy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shishirpy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T14:16:49Z",
    "updated_at": "2018-04-23T14:16:49Z",
    "author_association": "NONE",
    "body": "@alzmcr Could you give an example with a data set? I am finding it hard to understand what the parameter `param` look like?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/384201515",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-384201515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 384201515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDIwMTUxNQ==",
    "user": {
      "login": "alzmcr",
      "id": 4122640,
      "node_id": "MDQ6VXNlcjQxMjI2NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4122640?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alzmcr",
      "html_url": "https://github.com/alzmcr",
      "followers_url": "https://api.github.com/users/alzmcr/followers",
      "following_url": "https://api.github.com/users/alzmcr/following{/other_user}",
      "gists_url": "https://api.github.com/users/alzmcr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alzmcr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alzmcr/subscriptions",
      "organizations_url": "https://api.github.com/users/alzmcr/orgs",
      "repos_url": "https://api.github.com/users/alzmcr/repos",
      "events_url": "https://api.github.com/users/alzmcr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alzmcr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-25T08:19:31Z",
    "updated_at": "2018-04-25T08:19:31Z",
    "author_association": "NONE",
    "body": "@shishirpy a full example is at line: https://github.com/pandas-dev/pandas/issues/11026#issuecomment-138889948 - It's confusing as in the example are called **searches** and in the function name are called **params**. \r\n\r\nI would love to open a PR, but I'm struggling with time and would be the first time here!\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426316059",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11026#issuecomment-426316059",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11026",
    "id": 426316059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjMxNjA1OQ==",
    "user": {
      "login": "kokes",
      "id": 8451755,
      "node_id": "MDQ6VXNlcjg0NTE3NTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8451755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kokes",
      "html_url": "https://github.com/kokes",
      "followers_url": "https://api.github.com/users/kokes/followers",
      "following_url": "https://api.github.com/users/kokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/kokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kokes/subscriptions",
      "organizations_url": "https://api.github.com/users/kokes/orgs",
      "repos_url": "https://api.github.com/users/kokes/repos",
      "events_url": "https://api.github.com/users/kokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-02T15:23:14Z",
    "updated_at": "2018-10-02T15:23:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Remember that the index needs to be updated upon each mutation of its parent DataFrame/column."
  }
]
