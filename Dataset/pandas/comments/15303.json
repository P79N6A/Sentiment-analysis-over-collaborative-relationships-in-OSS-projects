[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/277401817",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15303#issuecomment-277401817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15303",
    "id": 277401817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzQwMTgxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-04T00:43:54Z",
    "updated_at": "2017-02-04T00:43:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is an alternative and probably more correct.\r\n```\r\nIn [3]: s.dt.to_period('M').dt.to_timestamp()\r\nOut[3]: \r\nDatetimeIndex(['2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01',\r\n               ...\r\n               '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01', '2017-01-01'],\r\n              dtype='datetime64[ns]', length=721, freq=None)\r\n```\r\n\r\nThe issue is rounding is pretty tricky and I would argue unexpected for Months. You can easily have round up on the 15th for some months and down for others. You could argue that ``.ceil/.floor`` are unambiguous though.\r\n\r\nIf you want to implement something reasonable would be fine. (you could prob just do the ``.to_period`` transform under the hood)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/317209061",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15303#issuecomment-317209061",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15303",
    "id": 317209061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzIwOTA2MQ==",
    "user": {
      "login": "rosnfeld",
      "id": 5356340,
      "node_id": "MDQ6VXNlcjUzNTYzNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5356340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rosnfeld",
      "html_url": "https://github.com/rosnfeld",
      "followers_url": "https://api.github.com/users/rosnfeld/followers",
      "following_url": "https://api.github.com/users/rosnfeld/following{/other_user}",
      "gists_url": "https://api.github.com/users/rosnfeld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rosnfeld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rosnfeld/subscriptions",
      "organizations_url": "https://api.github.com/users/rosnfeld/orgs",
      "repos_url": "https://api.github.com/users/rosnfeld/repos",
      "events_url": "https://api.github.com/users/rosnfeld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rosnfeld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-22T20:40:49Z",
    "updated_at": "2017-07-22T20:40:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Taking a look at this: if the date is `'2017-01-23 12:34:56'`, what should `floor` and `ceil` return for a frequency like `'M'` (`MonthEnd`)? If you're doing `.dt.to_period('M').dt.to_timestamp()`, then you get `'2017-01-01'` - but that's not a `MonthEnd` value. Similarly if you took the `end_time` of that period, you'd get `'2017-01-31 23:59:59.999999999'`, also not a `MonthEnd`. I think you actually want `'2016-12-31 00:00:00'` (for `floor`) and `'2017-01-31 00:00:00'` (for `ceil`) - right? So I am not sure that `to_period` is the key here.\r\n\r\nWhile I wrote this issue for `Series`, upon playing with this further I've noticed that it also affects `DatetimeIndex` and individual `Timestamp` values. I have a fix for individual values (e.g. `pd.to_datetime('2017-01-23 12:34:56').ceil('M')` now behaves as I think is right in the paragraph above), but I'm actually not sure how to fix the `Series`/`DatetimeIndex` case.\r\n\r\nMy patch currently affects the `Timestamp._round()` code in `tslib.pyx`, and goes something like the following, using the offset `rollforward/rollback` to stay on-offset for at least the `floor` and `ceil` cases:\r\n```\r\n        from pandas.tseries.offsets import Tick\r\n        offset = to_offset(freq)\r\n\r\n        if not isinstance(offset, Tick):\r\n            offset.normalize = True\r\n\r\n            if rounder == np.ceil:\r\n                return offset.rollforward(self)\r\n\r\n            if rounder == np.floor:\r\n                return offset.rollback(self)\r\n\r\n            raise ValueError('Can only round to Tick offsets')\r\n```\r\nThere is a very similar `TimelikeOps._round()` method in `datetimelike.py`, but I can't do the same change there, as the offset `rollforward/rollback` methods only work on `Timestamp`. Suggestions are welcome - not sure how one normally \"scales up\" more complicated individual operations like this to Series in a performant way. Also not sure if there is a cleaner/more obvious way to do what I've done in the single `Timestamp` case."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/327443501",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15303#issuecomment-327443501",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15303",
    "id": 327443501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzQ0MzUwMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-06T10:30:55Z",
    "updated_at": "2017-09-06T10:30:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rosnfeld \r\n\r\nThis is how you work with dti/Series; its very similar.\r\n```\r\nIn [10]: i = pd.to_datetime(['2017-01-23 12:34:56'])\r\n\r\nIn [11]: i\r\nOut[11]: DatetimeIndex(['2017-01-23 12:34:56'], dtype='datetime64[ns]', freq=None)\r\n\r\nIn [12]: i.normalize() + pd.offsets.MonthBegin()\r\nOut[12]: DatetimeIndex(['2017-02-01'], dtype='datetime64[ns]', freq=None)\r\n\r\nIn [13]: i.normalize() + pd.offsets.MonthEnd()\r\nOut[13]: DatetimeIndex(['2017-01-31'], dtype='datetime64[ns]', freq=None)\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/345549038",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15303#issuecomment-345549038",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15303",
    "id": 345549038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTU0OTAzOA==",
    "user": {
      "login": "rosnfeld",
      "id": 5356340,
      "node_id": "MDQ6VXNlcjUzNTYzNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5356340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rosnfeld",
      "html_url": "https://github.com/rosnfeld",
      "followers_url": "https://api.github.com/users/rosnfeld/followers",
      "following_url": "https://api.github.com/users/rosnfeld/following{/other_user}",
      "gists_url": "https://api.github.com/users/rosnfeld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rosnfeld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rosnfeld/subscriptions",
      "organizations_url": "https://api.github.com/users/rosnfeld/orgs",
      "repos_url": "https://api.github.com/users/rosnfeld/repos",
      "events_url": "https://api.github.com/users/rosnfeld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rosnfeld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-19T20:58:22Z",
    "updated_at": "2017-11-19T20:58:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "(got motivated to come back to this issue as I hit it again...)\r\n\r\nThanks @jreback - I am very close now. Only issue is that adding the offset isn't idempotent/doesn't handle the exact boundary properly. That is, in the single `Timestamp` case, `timestamp.ceil('M').ceil('M')` the second application correctly does nothing, but in the series case `series.dt.ceil('M').dt.ceil('M')` rolls the month again, since it adds another offset.\r\n\r\n`offset.rollforward(timestamp)` is smart enough to call `offset.onOffset(timestamp)` to catch this case. I guess I need a series equivalent that somehow incorporates this kind of logic... but may be tricky to do in an efficient way."
  }
]
