[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456256632",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456256632",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456256632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjI1NjYzMg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T03:11:34Z",
    "updated_at": "2019-01-22T03:11:34Z",
    "author_association": "MEMBER",
    "body": "> this is a step backwards\r\n\r\n@jreback you don't _have_ to convince me of anything, clearly this won't be implemented if you're not on board.\r\n\r\nBut if you _want_ to convince me that your way makes sense, you need to lay out a coherent argument for when we should and should not use fixtures.\r\n\r\n- For singleton fixtures like this, what upside do we get that we don't get from a simple function call?\r\n- Why use fixtures for some singletons but not for others?\r\n   - Should we get rid of the tm.makeFooBar functions?\r\n   - Many tests call `pd.Timestamp.now()`; should we make a fixture for that?\r\n   - If \"no\" for either of these, why are they different from the fixtures affected by this PR?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456257824",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456257824",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456257824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjI1NzgyNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T03:19:28Z",
    "updated_at": "2019-01-22T03:19:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "have a look in tests/frame and u will easily see zillions of places these should be used but are simply not yet changed over from the old syntax\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456258172",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456258172",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456258172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjI1ODE3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T03:21:39Z",
    "updated_at": "2019-01-22T03:21:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes we should really get rid of the makeFoo functions - they r a holdover from a time before fixtures - the only stopping block is they r semi public \r\n\r\nTimestamp.now is too simple to be used as a fixture "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456261246",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456261246",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456261246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjI2MTI0Ng==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T03:41:31Z",
    "updated_at": "2019-01-22T03:41:31Z",
    "author_association": "MEMBER",
    "body": "> have a look in tests/frame and u will easily see zillions of places these should be used but are simply not yet changed over from the old syntax\r\n\r\n\"should be used\" is basically what I'm asking you to define in a non-tautological way.\r\n\r\nIf \"the old syntax\" is \"a python function\", then I see no upside to the change and would really like to understand the reasoning."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456261448",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456261448",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456261448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjI2MTQ0OA==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-01-22T03:42:58Z",
    "updated_at": "2019-01-22T03:42:58Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=h1) Report\n> Merging [#24873](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/12bb6d0536b947f74b66ebe18b5f451bfdd7453f?src=pr&el=desc) will **decrease** coverage by `49.5%`.\n> The diff coverage is `21.62%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/24873/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=tree)\n\n```diff\n@@             Coverage Diff             @@\n##           master   #24873       +/-   ##\n===========================================\n- Coverage   92.38%   42.88%   -49.51%     \n===========================================\n  Files         166      166               \n  Lines       52412    52449       +37     \n===========================================\n- Hits        48423    22491    -25932     \n- Misses       3989    29958    +25969\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `?` | |\n| #single | `42.88% <21.62%> (-0.02%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/util/testing.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL3V0aWwvdGVzdGluZy5weQ==) | `49.91% <21.62%> (-38.13%)` | :arrow_down: |\n| [pandas/io/formats/latex.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL2Zvcm1hdHMvbGF0ZXgucHk=) | `0% <0%> (-100%)` | :arrow_down: |\n| [pandas/core/categorical.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvY2F0ZWdvcmljYWwucHk=) | `0% <0%> (-100%)` | :arrow_down: |\n| [pandas/io/sas/sas\\_constants.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL3Nhcy9zYXNfY29uc3RhbnRzLnB5) | `0% <0%> (-100%)` | :arrow_down: |\n| [pandas/tseries/plotting.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL3RzZXJpZXMvcGxvdHRpbmcucHk=) | `0% <0%> (-100%)` | :arrow_down: |\n| [pandas/tseries/converter.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL3RzZXJpZXMvY29udmVydGVyLnB5) | `0% <0%> (-100%)` | :arrow_down: |\n| [pandas/io/formats/html.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL2Zvcm1hdHMvaHRtbC5weQ==) | `0% <0%> (-99.35%)` | :arrow_down: |\n| [pandas/core/groupby/categorical.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZ3JvdXBieS9jYXRlZ29yaWNhbC5weQ==) | `0% <0%> (-95.46%)` | :arrow_down: |\n| [pandas/io/sas/sas7bdat.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL3Nhcy9zYXM3YmRhdC5weQ==) | `0% <0%> (-91.17%)` | :arrow_down: |\n| [pandas/io/sas/sas\\_xport.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL3Nhcy9zYXNfeHBvcnQucHk=) | `0% <0%> (-90.15%)` | :arrow_down: |\n| ... and [124 more](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=footer). Last update [12bb6d0...14d2941](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456261450",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456261450",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456261450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjI2MTQ1MA==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-01-22T03:42:59Z",
    "updated_at": "2019-01-22T04:20:13Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=h1) Report\n> Merging [#24873](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/12bb6d0536b947f74b66ebe18b5f451bfdd7453f?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/24873/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #24873      +/-   ##\n==========================================\n+ Coverage   92.38%   92.39%   +<.01%     \n==========================================\n  Files         166      166              \n  Lines       52412    52449      +37     \n==========================================\n+ Hits        48423    48461      +38     \n+ Misses       3989     3988       -1\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.82% <100%> (ø)` | :arrow_up: |\n| #single | `42.87% <21.62%> (-0.03%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/util/testing.py](https://codecov.io/gh/pandas-dev/pandas/pull/24873/diff?src=pr&el=tree#diff-cGFuZGFzL3V0aWwvdGVzdGluZy5weQ==) | `88.52% <100%> (+0.48%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=footer). Last update [12bb6d0...14d2941](https://codecov.io/gh/pandas-dev/pandas/pull/24873?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456371739",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456371739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456371739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjM3MTczOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T11:48:13Z",
    "updated_at": "2019-01-22T11:48:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "we prefer fixtures over functions almost always:\r\n\r\n- they are amenable to hierarchical grouping, locally one can override another definition if needed\r\n- you don’t have one giant file with imports of these; they can be grouped naturally in conftests which are automatically used\r\n- they provide nice composition with other fixtures and parameters\r\n- a test writer doesn’t have to worry about side effect / test setup or teardown \r\n- they less verbose than a full function call online the test\r\n- they live in the arguments as a fixture should\r\n\r\ni am just really repeating the goodness of using fixtures over functions - they are strictly better for testing\r\n\r\nsingletons are not really a special case - they provide nice utility; again w/o having to have special import files scattered about - which inevitably leads to users actually calling these functions \r\n\r\nso I am -1 on this PR and any like it; we have been moving in the opposite direction for many years \r\n\r\nfixtures, organized well are a huge boon to testing\r\n\r\nsure you create singleton fixtures when you FIRST make a function into a fixture - this just means that you need to move more boilerplate code into fixtures"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456372387",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456372387",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456372387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjM3MjM4Nw==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T11:50:33Z",
    "updated_at": "2019-01-22T11:50:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "> yes we should really get rid of the makeFoo functions - they r a holdover from a time before fixtures - the only stopping block is they r semi public\r\n\r\ni think that `only stopping block is they r semi public` is maybe the key to why it maybe difficult to fully adopt the pytest idiom for pandas. There are just too many downstream packages.\r\n\r\nin a pytestonic world i assume that _all_ the functions in tm would be in conftest, even the assert functions and that pandas.util.testing would be no more.\r\n\r\npersonally i use the assert functions such as tm.assert_frame_equal to check a personal library and being able to import pandas.util.testing makes this easy. \r\n\r\n> Broken off of #24769 where we have learned that some test behavior depends on whether or not a fixture is being used.\r\n\r\n> I claim that this is another point in favor of not using fixtures...\r\n\r\ni think that the opposite is true. the idea of fixtures is to make the testing more robust. the fixtures are functions that are run and a return value is the parameter used in the test. the default 'scope' (fixture scope is different to lexical scope etc) for a fixture is function scope which means that the fixture function is executed for each test producing a 'new' value. compared to the unittest class style using the setup method and making 'fixtures' class attributes the pytest approach is more robust. in theory we do not need to use copy() methods to 'protect' the fixture when executing tests.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456467118",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456467118",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456467118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjQ2NzExOA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T16:34:19Z",
    "updated_at": "2019-01-22T16:34:19Z",
    "author_association": "MEMBER",
    "body": "> in a pytestonic world\r\n\r\nIn cases where \"pytestonic\" and \"pythonic\" don't coincide, my default is to prefer pythonic.  The point of the conversation (since the PR is going nowhere) is to understand why I should care about pytestonic.\r\n\r\n> you don’t have one giant file with imports of these\r\n\r\nSo when I read through a test I don't immediately know where a name is defined?  I don't see this as a plus.\r\n\r\n> they provide nice composition with other fixtures and parameters\r\n\r\nI am specifically focusing on fixtures without any parametrization or composition.\r\n\r\n> a test writer doesn’t have to worry about side effect / test setup or teardown\r\n\r\nSame with a function call...\r\n\r\n> they less verbose than a full function call online the test\r\n\r\nNot for the ones that get inlined.  Inlining `empty_frame = DataFrame({})` is way less verbose than a fixture.\r\n\r\nFor non-inlined fixtures, I'll give you this one, sort of.  But there is a tradeoff with clarity.  Consider two implementations of the same test.\r\n\r\n```\r\ndef test_td64ser_div_numeric_scalar(self, tdser):\r\n        expected = Series(['29.5D', '29.5D', 'NaT'], dtype='timedelta64[ns]')\r\n        result = tdser / 2\r\n        tm.assert_equal(result, expected)\r\n\r\ndef test_td64ser_div_numeric_scalar(self):\r\n        tdser = pd.Series(['59 Days', '59 Days', 'NaT'], dtype='timedelta64[ns]')\r\n        expected = Series(['29.5D', '29.5D', 'NaT'], dtype='timedelta64[ns]')\r\n        result = tdser / 2\r\n        tm.assert_equal(result, expected)\r\n```\r\n\r\nThe second (my preferred) has one extra line, and so is technically more verbose.  But the reader doesn't have to check what `tdser` means or dig up where it was defined.\r\n\r\n> they live in the arguments as a fixture should\r\n\r\n@jreback this is a circular argument.\r\n\r\nBesides which, flake8 won't tell us when we have unused test arguments (which does occur in these files).\r\n\r\n> i am just really repeating the goodness of using fixtures over functions - they are strictly better for testing\r\n\r\n@jreback this.  This is what I'm trying to understand.\r\n\r\n> which inevitably leads to users actually calling these functions\r\n\r\nThe pythonic way to handle this is an underscore.\r\n\r\n> i think that the opposite is true. the idea of fixtures is to make the testing more robust. [... juxtaposition with unittest class style]\r\n\r\n@simonjayhawkins The most optimistic interpretation of the disagreement is that we are not talking about the same thing, so let's double-check.  I am talking about the fact that in #24769 there is a fixture `float_frame` and an identical function `get_float_frame` such that\r\n\r\n```\r\ndef test_foo(self, float_frame):\r\n   [...]\r\n\r\ndef test_foo2(self):\r\n    float_frame = get_float_frame()\r\n    [...]\r\n```\r\n\r\nhas one passing and the other failing.  The behavior of the first test is reachable AFAICT _only_ via the pytest command line, which doesn't match _any_ user's runtime environment.  If it doesn't match the behavior a user sees, then it is testing behavior I couldn't care less about.\r\n\r\nIf \"the opposite is true\", please tell me why I should care about behavior that _only_ occurs via the pytest CLI.  (and if it is not the case that it occurs only via the pytest CLI, please help me fix the extant test failure in #24769)\r\n\r\nHow many other tests do we have that are silently testing behavior that doesn't match what users will actually see?\r\n\r\n@jorisvandenbossche am I missing something here?  I'm trying not to rule out the possibility that jreback knows something I don't, but am still completely missing it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456470244",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456470244",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456470244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjQ3MDI0NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T16:41:57Z",
    "updated_at": "2019-01-22T16:41:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I haven't read through everything, but I mostly agree with\n@jbrockmendel's sentiments.\n\nIn cases where we aren't using the advanced features of a fixture (setup,\nteardown, parametrization), a function call should be equivalent.\nAnd I generally find function calls easier to reason about that fixtures\n(as they're easier to goto the definition if needed).\n\n\n\nOn Tue, Jan 22, 2019 at 10:34 AM jbrockmendel <notifications@github.com>\nwrote:\n\n> in a pytestonic world\n>\n> In cases where \"pytestonic\" and \"pythonic\" don't coincide, my default is\n> to prefer pythonic. The point of the conversation (since the PR is going\n> nowhere) is to understand why I should care about pytestonic.\n>\n> you don’t have one giant file with imports of these\n>\n> So when I read through a test I don't immediately know where a name is\n> defined? I don't see this as a plus.\n>\n> they provide nice composition with other fixtures and parameters\n>\n> I am specifically focusing on fixtures without any parametrization or\n> composition.\n>\n> a test writer doesn’t have to worry about side effect / test setup or\n> teardown\n>\n> Same with a function call...\n>\n> they less verbose than a full function call online the test\n>\n> Not for the ones that get inlined. Inlining empty_frame = DataFrame({})\n> is way less verbose than a fixture.\n>\n> For non-inlined fixtures, I'll give you this one, sort of. But there is a\n> tradeoff with clarity. Consider two implementations of the same test.\n>\n> def test_td64ser_div_numeric_scalar(self, tdser):\n>\n>         expected = Series(['29.5D', '29.5D', 'NaT'], dtype='timedelta64[ns]')\n>\n>         result = tdser / 2\n>\n>         tm.assert_equal(result, expected)\n>\n>\n>\n> def test_td64ser_div_numeric_scalar(self):\n>\n>         tdser = pd.Series(['59 Days', '59 Days', 'NaT'], dtype='timedelta64[ns]')\n>\n>         expected = Series(['29.5D', '29.5D', 'NaT'], dtype='timedelta64[ns]')\n>\n>         result = tdser / 2\n>\n>         tm.assert_equal(result, expected)\n>\n>\n> The second (my preferred) has one extra line, and so is technically more\n> verbose. But the reader doesn't have to check what tdser means or dig up\n> where it was defined.\n>\n> they live in the arguments as a fixture should\n>\n> @jreback <https://github.com/jreback> this is a circular argument.\n>\n> Besides which, flake8 won't tell us when we have unused test arguments\n> (which does occur in these files).\n>\n> i am just really repeating the goodness of using fixtures over functions -\n> they are strictly better for testing\n>\n> @jreback <https://github.com/jreback> this. This is what I'm trying to\n> understand.\n>\n> which inevitably leads to users actually calling these functions\n>\n> The pythonic way to handle this is an underscore.\n>\n> i think that the opposite is true. the idea of fixtures is to make the\n> testing more robust. [... juxtaposition with unittest class style]\n>\n> @simonjayhawkins <https://github.com/simonjayhawkins> The most optimistic\n> interpretation of the disagreement is that we are not talking about the\n> same thing, so let's double-check. I am talking about the fact that in\n> #24769 <https://github.com/pandas-dev/pandas/pull/24769> there is a\n> fixture float_frame and an identical function get_float_frame such that\n>\n> def test_foo(self, float_frame):\n>\n>    [...]\n>\n>\n>\n> def test_foo2(self):\n>\n>     float_frame = get_float_frame()\n>\n>     [...]\n>\n>\n> has one passing and the other failing. The behavior of the first test is\n> reachable AFAICT *only* via the pytest command line, which doesn't match\n> *any* user's runtime environment. If it doesn't match the behavior a user\n> sees, then it is testing behavior I couldn't care less about.\n>\n> If \"the opposite is true\", please tell me why I should care about behavior\n> that *only* occurs via the pytest CLI. (and if it is not the case that it\n> occurs only via the pytest CLI, please help me fix the extant test failure\n> in #24769 <https://github.com/pandas-dev/pandas/pull/24769>)\n>\n> How many other tests do we have that are silently testing behavior that\n> doesn't match what users will actually see?\n>\n> @jorisvandenbossche <https://github.com/jorisvandenbossche> am I missing\n> something here? I'm trying not to rule out the possibility that jreback\n> knows something I don't, but am still completely missing it.\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456467118>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIlbNMWPmyh1QBf8durCX5lKtOna-ks5vFz2VgaJpZM4aL1xB>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456573644",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456573644",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456573644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjU3MzY0NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T21:39:24Z",
    "updated_at": "2019-01-22T21:39:24Z",
    "author_association": "MEMBER",
    "body": "> In cases where we aren't using the advanced features of a fixture (setup,\r\nteardown, parametrization), a function call should be equivalent.\r\n\r\nI agree with this sentiment as well.  That being said, I have to agree that we probably haven't given these fixtures enough of a chance to be used elsewhere in the codebase.\r\n\r\nIn addition, I wonder if we really should be placing ALL of these functions in `testing.py`.  Just like we don't put all of our fixtures in our top-level `conftest.py`, I don't see why we couldn't \"scope\" these objects to particular testing directories."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456574150",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456574150",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456574150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjU3NDE1MA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T21:41:02Z",
    "updated_at": "2019-01-22T21:41:02Z",
    "author_association": "MEMBER",
    "body": "BTW, I would like to remind everyone that @jbrockmendel had this original issue (#23701) around this exact topic that he recently re-opened.  I think we should continue the conversation there if we are currently at an impasse."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456611381",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456611381",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456611381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjYxMTM4MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T23:54:10Z",
    "updated_at": "2019-01-22T23:54:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel your example doesn't make much sense.\r\n```\r\ndef test_foo(self, float_frame):\r\n   [...]\r\n\r\ndef test_foo2(self):\r\n    float_frame = get_float_frame()\r\n    [...]\r\n\r\n```\r\n\r\nthese should be identically, but we prefer the first is much more informative, scopes very nicely, plays nicely with fixtures, doesn't have the test writer worry about setup/teardown.\r\n\r\nif you write tests and run them using ``pytest`` I am not sure why you are even making a claim that 'calling directly' functions are better? I am not getting your point here. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456641936",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456641936",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456641936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjY0MTkzNg==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T02:15:00Z",
    "updated_at": "2019-01-23T02:15:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I agree with this sentiment as well. That being said, I have to agree that we probably haven't given these fixtures enough of a chance to be used elsewhere in the codebase.\r\n\r\ninterestingly, i've only just realised that there is only one fixture in the codebase that is used with '@pytest.mark.parametrize(..., indirect=True)..... and i'm guilty!\r\n\r\nthe case where i've used it is not a good example to demonstrate the power of this capability. perhaps some of the singleton fixtures in question should be constructed to allow indirect parametrization and more benefit could then be gained from using fixtures."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456770668",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456770668",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456770668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njc3MDY2OA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T11:39:50Z",
    "updated_at": "2019-01-23T11:39:50Z",
    "author_association": "MEMBER",
    "body": "Late to the discussion but FWIW also -1 on the change, mostly citing [this comment](https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456371739)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456787752",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456787752",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456787752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njc4Nzc1Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T12:42:57Z",
    "updated_at": "2019-01-23T12:42:57Z",
    "author_association": "MEMBER",
    "body": "I am also following @jbrockmendel reasoning here. As Tom said, fixtures are really cool for the more advanced cases (ones that yield with a setup/teardown, parametrized ones, tempdir, ...). \r\nBut for simple, test data generation I often find that the way we use fixtures makes it much harder to read and understand the test (what is the data being used, where is it defined, ..?)\r\n\r\nSo I would be +1 on a more selective use of fixtures."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456788508",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456788508",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456788508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njc4ODUwOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T12:45:39Z",
    "updated_at": "2019-01-23T12:45:39Z",
    "author_association": "MEMBER",
    "body": "> these should be identically,\r\n\r\n@jbrockmendel do we already understand *why* they are not identical (there were occasional failures?)\r\n\r\n> [jreback] these should be identically, but we prefer the first is much more informative, scopes very nicely, plays nicely with fixtures, doesn't have the test writer worry about setup/teardown.\r\n\r\nI think we are talking here about fixtures with simple data generation, so in that case there is no setup/teardown involved, it wouldn't need to integrate with other fixtures, .. (and personally I would argue it is also not more informative, but rather less, as the function-way shows where the function is coming from).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456891775",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456891775",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456891775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg5MTc3NQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T17:25:55Z",
    "updated_at": "2019-01-23T17:25:55Z",
    "author_association": "MEMBER",
    "body": "> do we already understand why they are not identical (there were occasional failures?)\r\n\r\n@jorisvandenbossche I don't have a handle on it.  @simonjayhawkins is helping troubleshoot it over in #24769.  Haven't given up on figuring it out, but in the interim I'm counting this as a point against unnecessary fixturization.\r\n\r\n@WillAyd you reference [this comment](https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456371739), can I ask what part of that you find compelling?  I addressed it [here](https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456467118).\r\n\r\n> That being said, I have to agree that we probably haven't given these fixtures enough of a chance to be used elsewhere in the codebase.\r\n\r\n@gfyoung I'm not quite clear on what you mean by this.  Any singleton fixture changed into a regular function can still be used elsewhere in the codebase.\r\n\r\n@jreback re:\r\n> your example doesn't make much sense [...] these should be identically, but we prefer the first is much more informative, scopes very nicely, plays nicely with fixtures, doesn't have the test writer worry about setup/teardown.\r\n> if you write tests and run them using pytest I am not sure why you are even making a claim that 'calling directly' functions are better? I am not getting your point here.\r\n\r\n\"should behave identically\" --> yah, they should.  and the fact that they _dont_ in at least one case suggests we should be testing the one that matches users runtime envirionment.\r\n\r\n\"first is much more informative\" --> in what way?  The only difference in the code is that it is less obvious where the thing is defined.\r\n\r\n\"scopes very nicely\" --> honestly not sure what this means\r\n\r\n\"plays nicely with fixtures\" --> again, this is a circular argument.\r\n\r\n\"doesn't have the test writer worry about setup/teardown\" --> again, this is no different from a regular function\r\n\r\n\"run them using pytest\" --> usually I run them using pytest.  but when one fails I want to be able to copy/paste it line-by-line in the REPL.  And again, we have at least one case in which the called-via-pytest behavior doesn't match the regular-python-function behavior.  This is _bad_.\r\n\r\n> I am not sure why you are even making a claim that 'calling directly' functions are better? I am not getting your point here.\r\n\r\nZen of python ring a bell?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456894525",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456894525",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456894525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg5NDUyNQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T17:33:41Z",
    "updated_at": "2019-01-23T17:36:15Z",
    "author_association": "MEMBER",
    "body": "@jbrockmendel\r\n\r\n> Any singleton fixture changed into a regular function can still be used elsewhere in the codebase.\r\n\r\nMy point is that while I agree that truly singleton fixtures should be replaced, I'm not sure the current fixtures that we're removing are truly singletons, given how non-pytest-idiomatic some of the codebase still is.\r\n\r\n> \"run them using pytest\" --> usually I run them using pytest. but when one fails I want to be able to copy/paste it line-by-line in the REPL.\r\n\r\nThis sounds like you just don't like fixtures in any way, eh? 😉 \r\n\r\nBTW, I should point out that REPL isn't the only way to debug these tests (print statements, `pdb`)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456895979",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456895979",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456895979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg5NTk3OQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T17:37:45Z",
    "updated_at": "2019-01-23T17:37:45Z",
    "author_association": "MEMBER",
    "body": "> I'm not sure the current fixtures that we're removing are truly singletons\r\n\r\nHuh?\r\n\r\n> This sounds like you just don't like fixtures in any way, eh? 😉\r\n\r\nI've come around to understand their usefulness in specific use cases.  These are not those cases.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456897877",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456897877",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456897877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg5Nzg3Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T17:43:26Z",
    "updated_at": "2019-01-23T17:43:26Z",
    "author_association": "MEMBER",
    "body": ">  I'm not sure the current fixtures that we're removing are truly singletons,\r\n\r\nI think we are again speaking about a different sort of \"singleton\" ? (see https://github.com/pandas-dev/pandas/pull/24769#issuecomment-454177497)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456902657",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456902657",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456902657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjkwMjY1Nw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T17:56:36Z",
    "updated_at": "2019-01-23T17:56:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Regarding singletons-or-not, and the larger context of dependency injection in the frame/series tests (currently mostly through `TestData`-fixturesque-attributes), I'll quote my comment from #24769 that hasn't received a response there:\r\n\r\n> @jreback @jbrockmendel @simonjayhawkins \r\nThere reason most of the fixtures coming out of `TestData` are singletons at all is that there is an ongoing (*cough*) transition from the old `TestData`-attributes-as-fixtures towards proper fixtures, see #22236 (where @jreback asked me to open the following) #22471 #22550.\r\nI haven't touched these issues that much anymore, since it was supposed to be a \"good first issue\" (and had some response along those lines for a while), and I was busy with other PRs.\r\n\r\nThat being said, I do find it hard to parse if a test requires specific properties of a fixture to work (e.g. specific column names or values), where one has to then go check in the respective `conftest.py` to figure out what's happening.\r\n\r\nIn that sense, I'd argue for fixtures that are minimal to the requirements of the test they're used in. If that means they're module-specific (and get moved there!), that's fine for me.\r\n\r\nFixtures are excellent for parametrisation though, and we should probably use a whole lot more of that, to increase breadth and the chance to catch edge cases early.\r\n\r\nOTOH, if widespread fixturization is not seen as a positive, then #22471 #22550 should be re-discussed and maybe closed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456907273",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456907273",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456907273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjkwNzI3Mw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T18:09:44Z",
    "updated_at": "2019-01-23T18:09:44Z",
    "author_association": "MEMBER",
    "body": "@h-vetinari I have no objection to moving away from the class attributes usage.  My problems are specifically with\r\n\r\n- never-used fixtures (#24885)\r\n- fixtures that can be inlined with strict performance+clarity improvements (#24886)\r\n- other fixtures that can be made into simple python function calls without pytest cognitive+perf overhead, e.g. this from `tests.groupby.conftest`:\r\n\r\n```\r\n@pytest.fixture\r\ndef ts():\r\n    return tm.makeTimeSeries()\r\n```\r\n\r\nFixtures which actually _use_ any of the useful features of pytest.fixture, e.g. parametrization, are orthogonal to the issue/PR(s)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456911467",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24873#issuecomment-456911467",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24873",
    "id": 456911467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjkxMTQ2Nw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T18:21:42Z",
    "updated_at": "2019-01-23T18:21:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel \r\nI'm broadly in agreement, but only wanted to point out is that the unused fixtures you mention have been put in place by #22236 to start the transition #22471 (for frames; similarly by #22526 / #22550 for Series).\r\n\r\nI'll note that while those PRs/issues have me as the OP, the fixturisation was orthogonal to my goal with #22236, and is the result of review requirements."
  }
]
