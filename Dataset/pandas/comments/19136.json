[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/355982758",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-355982758",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 355982758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTk4Mjc1OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T14:35:36Z",
    "updated_at": "2018-01-08T14:35:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Or documentation should specify that reset_index() doesn't work with specific types of columns.\r\n\r\nI think that's my preference, but I don't feel strongly about it. I'd just rather not lose all the categorical information.\r\n\r\nWe could give an example like\r\n\r\n```python\r\ngrouped.rename(columns=str).reset_index().head()\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/356056559",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-356056559",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 356056559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjA1NjU1OQ==",
    "user": {
      "login": "maykulkarni",
      "id": 4528636,
      "node_id": "MDQ6VXNlcjQ1Mjg2MzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4528636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maykulkarni",
      "html_url": "https://github.com/maykulkarni",
      "followers_url": "https://api.github.com/users/maykulkarni/followers",
      "following_url": "https://api.github.com/users/maykulkarni/following{/other_user}",
      "gists_url": "https://api.github.com/users/maykulkarni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maykulkarni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maykulkarni/subscriptions",
      "organizations_url": "https://api.github.com/users/maykulkarni/orgs",
      "repos_url": "https://api.github.com/users/maykulkarni/repos",
      "events_url": "https://api.github.com/users/maykulkarni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maykulkarni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T18:44:56Z",
    "updated_at": "2018-01-08T18:44:56Z",
    "author_association": "NONE",
    "body": "Hi, I'd like to take this up"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/356111976",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-356111976",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 356111976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjExMTk3Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T22:06:49Z",
    "updated_at": "2018-01-08T22:06:49Z",
    "author_association": "MEMBER",
    "body": "@maykulkarni : Go for it!  No need to ask for permission if no one has said they are working on it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/356890389",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-356890389",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 356890389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njg5MDM4OQ==",
    "user": {
      "login": "Stanpol",
      "id": 708533,
      "node_id": "MDQ6VXNlcjcwODUzMw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/708533?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Stanpol",
      "html_url": "https://github.com/Stanpol",
      "followers_url": "https://api.github.com/users/Stanpol/followers",
      "following_url": "https://api.github.com/users/Stanpol/following{/other_user}",
      "gists_url": "https://api.github.com/users/Stanpol/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Stanpol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Stanpol/subscriptions",
      "organizations_url": "https://api.github.com/users/Stanpol/orgs",
      "repos_url": "https://api.github.com/users/Stanpol/repos",
      "events_url": "https://api.github.com/users/Stanpol/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Stanpol/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T10:20:01Z",
    "updated_at": "2018-01-11T10:20:01Z",
    "author_association": "NONE",
    "body": "Actually, CategoricalIndex columns break other things as well, like assigning a new column.\r\n\r\n```\r\ndf=pd.DataFrame({'Year': np.random.randint(2000,2017,10000), 'Month': np.random.randint(1,12,10000), 'Data': np.random.randint(0,100,10000)})\r\ngrouped=df.groupby(['Year','Month', pd.cut(df.Data, range(0,100,10))]).size().unstack()\r\n\r\ngrouped.assign(A=1)\r\n\r\n# TypeError: cannot determine next label for type <class 'str'>\r\n```\r\n\r\nMaybe Error text should be more meaningful? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357700777",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-357700777",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 357700777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzcwMDc3Nw==",
    "user": {
      "login": "Gijs-Koot",
      "id": 4848325,
      "node_id": "MDQ6VXNlcjQ4NDgzMjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4848325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gijs-Koot",
      "html_url": "https://github.com/Gijs-Koot",
      "followers_url": "https://api.github.com/users/Gijs-Koot/followers",
      "following_url": "https://api.github.com/users/Gijs-Koot/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gijs-Koot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gijs-Koot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gijs-Koot/subscriptions",
      "organizations_url": "https://api.github.com/users/Gijs-Koot/orgs",
      "repos_url": "https://api.github.com/users/Gijs-Koot/repos",
      "events_url": "https://api.github.com/users/Gijs-Koot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gijs-Koot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T14:39:52Z",
    "updated_at": "2018-01-15T14:39:52Z",
    "author_association": "NONE",
    "body": "Hi, I ran into a similar problem, but I get a different error message. This seems to happens with a `MultiIndex` of categoricals. \r\n\r\n        test = pd.DataFrame({\r\n            \"a\": pd.Series([\"a_1\", \"a_2\"], dtype = \"category\"),\r\n            \"b\": pd.Series([\"b_1\", \"b_2\"], dtype = \"category\")\r\n        })\r\n\r\n        problem = test.groupby([\"a\", \"b\"]).size().unstack(1)\r\n        problem\r\n\r\nThis looks good, but \r\n\r\n        problem.reset_index()\r\n\r\nthows the following error\r\n\r\n        TypeError: cannot insert an item into a CategoricalIndex that is not already an existing category\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380908428",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-380908428",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 380908428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDkwODQyOA==",
    "user": {
      "login": "akielbowicz",
      "id": 30580760,
      "node_id": "MDQ6VXNlcjMwNTgwNzYw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30580760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akielbowicz",
      "html_url": "https://github.com/akielbowicz",
      "followers_url": "https://api.github.com/users/akielbowicz/followers",
      "following_url": "https://api.github.com/users/akielbowicz/following{/other_user}",
      "gists_url": "https://api.github.com/users/akielbowicz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akielbowicz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akielbowicz/subscriptions",
      "organizations_url": "https://api.github.com/users/akielbowicz/orgs",
      "repos_url": "https://api.github.com/users/akielbowicz/repos",
      "events_url": "https://api.github.com/users/akielbowicz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akielbowicz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T18:52:22Z",
    "updated_at": "2018-04-12T18:52:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Gijs-Koot \r\n I had the same problem, and found a work around after I read this post\r\n[Category Type Error](https://stackoverflow.com/questions/34901708/typeerror-cannot-append-a-non-category-item-to-a-categoricalindex)\r\n\r\n```python\r\ndef reset_index(df):\r\n  '''Returns DataFrame with index as columns'''\r\n  index_df = df.index.to_frame(index=False)\r\n  df = df.reset_index(drop=True)\r\n  #  In merge is important the order in which you pass the dataframes\r\n  # if the index contains a Categorical. \r\n  # pd.merge(df, index_df, left_index=True, right_index=True) does not work\r\n  return pd.merge(index_df, df, left_index=True, right_index=True)\r\n```\r\n\r\nIt works and keeps the categorical type:\r\n```python\r\nproblem\r\n```\r\n| b  |  b_1 |   b_2 |\r\n|----:|------:|------:|\r\n| **a** |\r\n| **a_1** |     1 |   NaN |\r\n| **a_2** |   NaN |     1 |\r\n\r\n```python\r\nsolved = reset_index(problem)\r\nsolved\r\n```\r\n|    | a   |   b_1 |   b_2 |\r\n|---:|:----|------:|------:|\r\n|  **0** | a_1 |     1 |   NaN |\r\n|  **1** | a_2 |   NaN |     1 |\r\n\r\n```python\r\nsolved.info()\r\n```\r\n\r\n\r\n><class 'pandas.core.frame.DataFrame'>\r\n>RangeIndex: 2 entries, 0 to 1\r\n>Data columns (total 3 columns):\r\n>a      2 non-null category\r\n>b_1    1 non-null float64\r\n>b_2    1 non-null float64\r\n>dtypes: category(1), float64(2)\r\n>memory usage: 210.0 bytes"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438519671",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-438519671",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 438519671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODUxOTY3MQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T02:56:54Z",
    "updated_at": "2018-11-14T02:56:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "The same error occurs when using `pivot()`, so you don't need to use `groupby()`:\r\n```\r\nIn [1]: import pandas as pd\r\n   ...: pd.__version__\r\n   ...:\r\nOut[1]: '0.23.4'\r\n\r\nIn [2]: df = pd.DataFrame({\"C1\" : ['A0', 'A0', 'A0', 'A1', 'A1'],\r\n   ...:                    \"C2\" : ['C', 'F', 'O', 'C', 'F'],\r\n   ...:                    \"V\" : [(i+1)/10.0 for i in range(5)]\r\n   ...:                   })\r\n   ...: df\r\n   ...:\r\nOut[2]:\r\n   C1 C2    V\r\n0  A0  C  0.1\r\n1  A0  F  0.2\r\n2  A0  O  0.3\r\n3  A1  C  0.4\r\n4  A1  F  0.5\r\n\r\nIn [3]: df.C1 = df.C1.astype('category')\r\n   ...: df.C2 = df.C2.astype(\"category\")\r\n   ...: df = df.set_index(['C1'])\r\n   ...: df\r\n   ...:\r\nOut[3]:\r\n   C2    V\r\nC1\r\nA0  C  0.1\r\nA0  F  0.2\r\nA0  O  0.3\r\nA1  C  0.4\r\nA1  F  0.5\r\n\r\nIn [4]: piv = df.pivot(columns=\"C2\", values=\"V\")\r\n   ...: piv\r\n   ...:\r\nOut[4]:\r\nC2    C    F    O\r\nC1\r\nA0  0.1  0.2  0.3\r\nA1  0.4  0.5  NaN\r\n\r\nIn [5]: piv.reset_index()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-5-76239aefc8a2> in <module>\r\n----> 1 piv.reset_index()\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py in reset_index(self, level, drop, inplace, col_level, col_fill)\r\n   4137                 # to ndarray and maybe infer different dtype\r\n   4138                 level_values = _maybe_casted_values(lev, lab)\r\n-> 4139                 new_obj.insert(0, name, level_values)\r\n   4140\r\n   4141         new_obj.index = new_index\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py in insert(self, loc, column, value, allow_duplicates)\r\n   3220         value = self._sanitize_column(column, value, broadcast=False)\r\n   3221         self._data.insert(loc, column, value,\r\n-> 3222                           allow_duplicates=allow_duplicates)\r\n   3223\r\n   3224     def assign(self, **kwargs):\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals.py in insert(self, loc, item, value, allow_duplicates)\r\n   4342\r\n   4343         # insert to the axis; this could possibly raise a TypeError\r\n-> 4344         new_axis = self.items.insert(loc, item)\r\n   4345\r\n   4346         block = make_block(values=value, ndim=self.ndim,\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\category.py in insert(self, loc, item)\r\n    765         code = self.categories.get_indexer([item])\r\n    766         if (code == -1) and not (is_scalar(item) and isna(item)):\r\n--> 767             raise TypeError(\"cannot insert an item into a CategoricalIndex \"\r\n    768                             \"that is not already an existing category\")\r\n    769\r\n\r\nTypeError: cannot insert an item into a CategoricalIndex that is not already an existing category\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438530569",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-438530569",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 438530569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODUzMDU2OQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T04:08:23Z",
    "updated_at": "2018-11-14T04:08:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger I'm not sure this is a \"good first issue\" with \"Effort: Low\".  I thought I would fix it by changing the error message, but in the various examples given above, the error messages are different, and the paths that raise the `TypeError` are different as well.  So I fear there are a lot of potential places that we need to worry about.\r\n\r\nFundamentally, I have to wonder if we should allow a `CategoricalIndex` as the index for the columns.  So maybe a better fix would be that we raise errors if a user tries to make the columns backed by a `CategoricalIndex`, and if we do it internally in pandas (such as due to a `groupby()` or `pivot()`), we silently convert the index for the columns to use string names and make it a regular `Index`.\r\n\r\nThis needs some discussion.  I ran into this problem in some work that I'm doing, and now I have a workaround by doing `rename(columns=str)`, but I don't think the solution for pandas is to document that, given the wide variety of error messages that can occur.\r\n\r\nYour thoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438683478",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-438683478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 438683478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODY4MzQ3OA==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T14:37:41Z",
    "updated_at": "2018-11-14T14:47:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "So I did a little more investigation, and I think the fundamental problem is that `unstack()` and `pivot()` are creating `CategoricalIndex` for the columns.  \r\n\r\nNote that when the columns are backed by a `DateTimeIndex` and you create a new column that is a string (via `assign()` or `reset_index()` or `df['A']=...`), then pandas does convert the `DateTimeIndex` to an `Index` of string objects.\r\n\r\nSo I see four possible solutions:\r\n1) Have `pivot()` and `unstack()` change the `CategoricalIndex` to a regular `Index` .  \r\n2) Do (1), but add keyword arguments to control the behavior.\r\n3) Modify various operations like `reset_index()` and `assign()` and `df['A']=...`  that create new columns to convert the `CategoricalIndex` to `Index` silently, just like is done for `DateTimeIndex`\r\n4) Modify various operations like `reset_index()` and `assign()` and `df['A']=...`  that create new columns to create a new category if the columns are backed by a `CategoricalIndex`\r\n\r\nIMHO, (1) is easiest, and I think it makes the most sense.  With respect to (3), it seems it would be a bit of work to figure out all the places that new columns are created.\r\n\r\n@TomAugspurger Need your opinion on this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438803352",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19136#issuecomment-438803352",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19136",
    "id": 438803352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODgwMzM1Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T20:17:01Z",
    "updated_at": "2018-11-14T20:17:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think that's my preference, but I don't feel strongly about it. I'd just rather not lose all the categorical information.\r\n\r\nI think my opinion has changed since writing this. `reset_index` should work basically like concat, and upcast to object-dtype if needed.\r\n\r\n---\r\n\r\n\r\nThere are two issues in the original post. First, there's a bug in `CategoricalIndex[Interval].__contains__`: https://github.com/pandas-dev/pandas/issues/23705\r\n\r\nSecond, there's the issue of what to do for `reset_index` when the cols are categorical. In that case, I think we should convert to object dtype (drop the categorical info).\r\n\r\nSimple test case:\r\n\r\n```python\r\nIn [21]: pd.DataFrame(columns=pd.Categorical(['a', 'b'])).reset_index()\r\n```\r\n\r\n```pytb\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-21-5bd5a62d9f80> in <module>()\r\n----> 1 pd.DataFrame(columns=pd.Categorical(['a', 'b'])).reset_index()\r\n\r\n~/sandbox/pandas/pandas/core/frame.py in reset_index(self, level, drop, inplace, col_level, col_fill)\r\n   4274                 # to ndarray and maybe infer different dtype\r\n   4275                 level_values = _maybe_casted_values(lev, lab)\r\n-> 4276                 new_obj.insert(0, name, level_values)\r\n   4277\r\n   4278         new_obj.index = new_index\r\n\r\n~/sandbox/pandas/pandas/core/frame.py in insert(self, loc, column, value, allow_duplicates)\r\n   3343         value = self._sanitize_column(column, value, broadcast=False)\r\n   3344         self._data.insert(loc, column, value,\r\n-> 3345                           allow_duplicates=allow_duplicates)\r\n   3346\r\n   3347     def assign(self, **kwargs):\r\n\r\n~/sandbox/pandas/pandas/core/internals/managers.py in insert(self, loc, item, value, allow_duplicates)\r\n   1164\r\n   1165         # insert to the axis; this could possibly raise a TypeError\r\n-> 1166         new_axis = self.items.insert(loc, item)\r\n   1167\r\n   1168         block = make_block(values=value, ndim=self.ndim,\r\n\r\n~/sandbox/pandas/pandas/core/indexes/category.py in insert(self, loc, item)\r\n    792         code = self.categories.get_indexer([item])\r\n    793         if (code == -1) and not (is_scalar(item) and isna(item)):\r\n--> 794             raise TypeError(\"cannot insert an item into a CategoricalIndex \"\r\n    795                             \"that is not already an existing category\")\r\n    796\r\n\r\nTypeError: cannot insert an item into a CategoricalIndex that is not already an existing category\r\n\r\n```\r\n\r\n---\r\n\r\n@Dr-Irv I don't think we should change the behavior of `pivot` or `unstack`. I'm hopeful that 3 won't be too difficult. I think that `BlockManager.insert` may need to become aware of how to cast between indexes with multiple types."
  }
]
