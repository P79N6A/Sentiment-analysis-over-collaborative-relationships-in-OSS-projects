[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408809761",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-408809761",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 408809761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODgwOTc2MQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T09:51:42Z",
    "updated_at": "2018-07-30T09:51:42Z",
    "author_association": "MEMBER",
    "body": "@glyg thanks for the detailed report, very useful.\r\n\r\nMixed dtype assignments currently take unnecessarily expensive paths, and while most indexing code will have to be rewritten to (for instance) separate actual indexing from (multiple dtype) setting, I tend to think this specific issue might have a simpler and more immediate fix. As a bare minimum, there should be a test somewhere that checks whether the object has mixed dtype, and it should be changed to check whether _the columns being assigned to_ have mixed dtype."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408811904",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-408811904",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 408811904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODgxMTkwNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T09:59:33Z",
    "updated_at": "2018-07-30T09:59:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "This fixes, though has a couple of test failures, which look like easy adjustments at first glance. I don't really remember the rationale for this, was an edge though.\r\n\r\n```\r\ndiff --git a/pandas/core/indexing.py b/pandas/core/indexing.py\r\nindex 13c019dea..7bf1b07d8 100755\r\n--- a/pandas/core/indexing.py\r\n+++ b/pandas/core/indexing.py\r\n@@ -590,7 +590,7 @@ class _NDFrameIndexer(_NDFrameIndexerBase):\r\n \r\n                     # note that this coerces the dtype if we are mixed\r\n                     # GH 7551\r\n-                    value = np.array(value, dtype=object)\r\n+                    value = np.asarray(value)\r\n                     if len(labels) != value.shape[1]:\r\n                         raise ValueError('Must have equal len keys and value '\r\n                                          'when setting with an ndarray')\r\n@@ -598,7 +598,7 @@ class _NDFrameIndexer(_NDFrameIndexerBase):\r\n                     for i, item in enumerate(labels):\r\n \r\n                         # setting with a list, recoerces\r\n-                        setter(item, value[:, i].tolist())\r\n+                        setter(item, value[:, i])\r\n \r\n                 # we have an equal len list/ndarray\r\n                 elif can_do_equal_len():\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408814898",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-408814898",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 408814898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODgxNDg5OA==",
    "user": {
      "login": "glyg",
      "id": 1426279,
      "node_id": "MDQ6VXNlcjE0MjYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1426279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyg",
      "html_url": "https://github.com/glyg",
      "followers_url": "https://api.github.com/users/glyg/followers",
      "following_url": "https://api.github.com/users/glyg/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyg/subscriptions",
      "organizations_url": "https://api.github.com/users/glyg/orgs",
      "repos_url": "https://api.github.com/users/glyg/repos",
      "events_url": "https://api.github.com/users/glyg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T10:11:32Z",
    "updated_at": "2018-07-30T10:11:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, I'm giving it a try. Should I try to fix the tests?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408835723",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-408835723",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 408835723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODgzNTcyMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T11:44:44Z",
    "updated_at": "2018-07-30T11:44:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@glyg you have to evaluate any failing tests to see if you are truly changing things or test was wrong or whatever."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408836355",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-408836355",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 408836355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODgzNjM1NQ==",
    "user": {
      "login": "glyg",
      "id": 1426279,
      "node_id": "MDQ6VXNlcjE0MjYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1426279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyg",
      "html_url": "https://github.com/glyg",
      "followers_url": "https://api.github.com/users/glyg/followers",
      "following_url": "https://api.github.com/users/glyg/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyg/subscriptions",
      "organizations_url": "https://api.github.com/users/glyg/orgs",
      "repos_url": "https://api.github.com/users/glyg/repos",
      "events_url": "https://api.github.com/users/glyg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T11:47:35Z",
    "updated_at": "2018-07-30T11:47:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I can already confirm your patch fixes the performance issue. I'm running the whole test suite now, will look into the failing ones."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408890576",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-408890576",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 408890576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODg5MDU3Ng==",
    "user": {
      "login": "glyg",
      "id": 1426279,
      "node_id": "MDQ6VXNlcjE0MjYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1426279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyg",
      "html_url": "https://github.com/glyg",
      "followers_url": "https://api.github.com/users/glyg/followers",
      "following_url": "https://api.github.com/users/glyg/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyg/subscriptions",
      "organizations_url": "https://api.github.com/users/glyg/orgs",
      "repos_url": "https://api.github.com/users/glyg/repos",
      "events_url": "https://api.github.com/users/glyg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T14:49:57Z",
    "updated_at": "2018-07-30T14:49:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "So there are effectively type problems with this patch:\r\n```python\r\nfrom pandas import Categorical, Index, DataFrame\r\nimport pandas.util.testing as tm\r\n\r\n# changed multiple rows\r\ncats2 = Categorical([\"a\", \"a\", \"b\", \"b\", \"a\", \"a\", \"a\"],\r\n                    categories=[\"a\", \"b\"])\r\nidx2 = Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\r\nvalues2 = [1, 1, 2, 2, 1, 1, 1]\r\nexp_multi_row = DataFrame({\"cats\": cats2,\r\n                           \"values\": values2}, index=idx2)\r\ncats = Categorical([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"],\r\n                   categories=[\"a\", \"b\"])\r\nidx = Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\r\nvalues = [1, 1, 1, 1, 1, 1, 1]\r\norig = DataFrame({\"cats\": cats, \"values\": values}, index=idx)\r\n\r\ndf = orig.copy()\r\ndf.iloc[2:4, :] = [[\"b\", 2], [\"b\", 2]]\r\n\r\ntm.assert_frame_equal(df, exp_multi_row)\r\n```\r\nfails with the following traceback:\r\n\r\n```python-traceback\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-12-afb32e7007b4> in <module>()\r\n     18 df.iloc[2:4, :] = [[\"b\", 2], [\"b\", 2]]\r\n     19 \r\n---> 20 tm.assert_frame_equal(df, exp_multi_row)\r\n\r\n~/miniconda3/envs/py36/lib/python3.6/site-packages/pandas-0.13.0+9365.gcffaa593f.dirty-py3.6-linux-x86_64.egg/pandas/util/testing.py in assert_frame_equal(left, right, check_dtype, check_index_type, check_column_type, check_frame_type, check_less_precise, check_names, by_blocks, check_exact, check_datetimelike_compat, check_categorical, check_like, obj)\r\n   1391                 check_datetimelike_compat=check_datetimelike_compat,\r\n   1392                 check_categorical=check_categorical,\r\n-> 1393                 obj='DataFrame.iloc[:, {idx}]'.format(idx=i))\r\n   1394 \r\n   1395 \r\n\r\n~/miniconda3/envs/py36/lib/python3.6/site-packages/pandas-0.13.0+9365.gcffaa593f.dirty-py3.6-linux-x86_64.egg/pandas/util/testing.py in assert_series_equal(left, right, check_dtype, check_index_type, check_series_type, check_less_precise, check_names, check_exact, check_datetimelike_compat, check_categorical, obj)\r\n   1227             pass\r\n   1228         else:\r\n-> 1229             assert_attr_equal('dtype', left, right)\r\n   1230 \r\n   1231     if check_exact:\r\n\r\n~/miniconda3/envs/py36/lib/python3.6/site-packages/pandas-0.13.0+9365.gcffaa593f.dirty-py3.6-linux-x86_64.egg/pandas/util/testing.py in assert_attr_equal(attr, left, right, obj)\r\n    958     else:\r\n    959         msg = 'Attribute \"{attr}\" are different'.format(attr=attr)\r\n--> 960         raise_assert_detail(obj, msg, left_attr, right_attr)\r\n    961 \r\n    962 \r\n\r\n~/miniconda3/envs/py36/lib/python3.6/site-packages/pandas-0.13.0+9365.gcffaa593f.dirty-py3.6-linux-x86_64.egg/pandas/util/testing.py in raise_assert_detail(obj, message, left, right, diff)\r\n   1052         msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n   1053 \r\n-> 1054     raise AssertionError(msg)\r\n   1055 \r\n   1056 \r\n\r\nAssertionError: Attributes are different\r\n\r\nAttribute \"dtype\" are different\r\n[left]:  object\r\n[right]: int64\r\n```\r\n\r\nSo the edge case was the one provoking #7551 and your patch reverts it.\r\n\r\nI don't really know how to proceed from here.\r\nGuillaume"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/421415570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-421415570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 421415570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQxNTU3MA==",
    "user": {
      "login": "glyg",
      "id": 1426279,
      "node_id": "MDQ6VXNlcjE0MjYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1426279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyg",
      "html_url": "https://github.com/glyg",
      "followers_url": "https://api.github.com/users/glyg/followers",
      "following_url": "https://api.github.com/users/glyg/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyg/subscriptions",
      "organizations_url": "https://api.github.com/users/glyg/orgs",
      "repos_url": "https://api.github.com/users/glyg/repos",
      "events_url": "https://api.github.com/users/glyg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T16:38:42Z",
    "updated_at": "2018-09-14T16:38:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "So here is my attempt at solving this issue, by applying the patch iff the value to be set is of mixed datatypes.\r\n\r\n```diff\r\n@@ -587,18 +587,24 @@ class _NDFrameIndexer(_NDFrameIndexerBase):\r\n \r\n                 # we have an equal len ndarray/convertible to our labels\r\n                 elif np.array(value).ndim == 2:\r\n-\r\n-                    # note that this coerces the dtype if we are mixed\r\n-                    # GH 7551\r\n-                    value = np.array(value, dtype=object)\r\n-                    if len(labels) != value.shape[1]:\r\n-                        raise ValueError('Must have equal len keys and value '\r\n-                                         'when setting with an ndarray')\r\n-\r\n-                    for i, item in enumerate(labels):\r\n-\r\n-                        # setting with a list, recoerces\r\n-                        setter(item, value[:, i].tolist())\r\n+                    if len({type(v) for v in value[0]}) > 1:\r\n+                        # note that this coerces the dtype if we are mixed\r\n+                        # GH 7551\r\n+                        value = np.array(value, dtype=object)\r\n+                        if len(labels) != value.shape[1]:\r\n+                            raise ValueError('Must have equal len keys and value '\r\n+                                            'when setting with an ndarray')\r\n+                        for i, item in enumerate(labels):\r\n+                            # setting with a list, recoerces\r\n+                            setter(item, value[:, i].tolist())\r\n+                    else:\r\n+                        value = np.array(value)\r\n+                        if len(labels) != value.shape[1]:\r\n+                            raise ValueError('Must have equal len keys and value '\r\n+                                            'when setting with an ndarray')\r\n+                        for i, item in enumerate(labels):\r\n+                            # setting with a list, recoerces\r\n+                            setter(item, value[:, i])\r\n```\r\n\r\nI test type uniqueness with  `len({type(v) for v in value[0]}) > 1` which will produce a false negative if one of the columns in value has mixed datatypes, but I don't see an efficient way to test that, given that value can be any list-like object. Should I still open a PR with that?\r\n\r\nPerformance-wise, the patch is doing some good:\r\n<details>\r\n\r\n* iterate over columns:\r\n3.37 ms ± 429 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n\r\n* columns as list :\r\n7.97 ms ± 506 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n\r\n* with loc:\r\n8.09 ms ± 581 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n\r\n* with loc and `get_indexer`:\r\n7.41 ms ± 83.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n\r\n</details>"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/421912106",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-421912106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 421912106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTkxMjEwNg==",
    "user": {
      "login": "glyg",
      "id": 1426279,
      "node_id": "MDQ6VXNlcjE0MjYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1426279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyg",
      "html_url": "https://github.com/glyg",
      "followers_url": "https://api.github.com/users/glyg/followers",
      "following_url": "https://api.github.com/users/glyg/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyg/subscriptions",
      "organizations_url": "https://api.github.com/users/glyg/orgs",
      "repos_url": "https://api.github.com/users/glyg/repos",
      "events_url": "https://api.github.com/users/glyg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-17T07:19:23Z",
    "updated_at": "2018-09-17T07:19:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "PS: all indexing tests pass with this patch"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444028520",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22126#issuecomment-444028520",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22126",
    "id": 444028520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDAyODUyMA==",
    "user": {
      "login": "glyg",
      "id": 1426279,
      "node_id": "MDQ6VXNlcjE0MjYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1426279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyg",
      "html_url": "https://github.com/glyg",
      "followers_url": "https://api.github.com/users/glyg/followers",
      "following_url": "https://api.github.com/users/glyg/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyg/subscriptions",
      "organizations_url": "https://api.github.com/users/glyg/orgs",
      "repos_url": "https://api.github.com/users/glyg/repos",
      "events_url": "https://api.github.com/users/glyg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T09:19:59Z",
    "updated_at": "2018-12-04T09:19:59Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I test type uniqueness with len({type(v) for v in value[0]}) > 1 which will produce a false negative if one of the columns in value has mixed datatypes, but I don't see an efficient way to test that, given that value can be any list-like object. Should I still open a PR with that?\r\n\r\nThinking about this (yes 4 months latter :sweat_smile:) , I realized that my reservations were pointless, as if one of the columns have mixed data types, then the only way all the columns have the same type is if it's `object`, thus making the patch useless. So the test is good. Should I open a PR? "
  }
]
