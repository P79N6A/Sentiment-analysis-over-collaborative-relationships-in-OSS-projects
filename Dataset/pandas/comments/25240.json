[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462087202",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25240#issuecomment-462087202",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25240",
    "id": 462087202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjA4NzIwMg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-09T23:00:06Z",
    "updated_at": "2019-02-09T23:07:13Z",
    "author_association": "MEMBER",
    "body": "Hmm...I'm not sure why the `str` accessor is even available in `s2`, since the values are `list`, not `string`.\r\n\r\nThat looks like a bug to me.\r\n\r\ncc @jreback"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462125840",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25240#issuecomment-462125840",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25240",
    "id": 462125840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjEyNTg0MA==",
    "user": {
      "login": "fran6w",
      "id": 4402700,
      "node_id": "MDQ6VXNlcjQ0MDI3MDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4402700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fran6w",
      "html_url": "https://github.com/fran6w",
      "followers_url": "https://api.github.com/users/fran6w/followers",
      "following_url": "https://api.github.com/users/fran6w/following{/other_user}",
      "gists_url": "https://api.github.com/users/fran6w/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fran6w/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fran6w/subscriptions",
      "organizations_url": "https://api.github.com/users/fran6w/orgs",
      "repos_url": "https://api.github.com/users/fran6w/repos",
      "events_url": "https://api.github.com/users/fran6w/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fran6w/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-10T11:51:59Z",
    "updated_at": "2019-02-10T11:51:59Z",
    "author_association": "NONE",
    "body": "In fact, I have looked at the file core/string.py, lines 1729+, try:\r\n\r\nimport pd\r\nhelp(pd.Series.str.get)\r\n\r\nThe str_get() function is documented and explains that it is able to extract element from each component at specified position. Examples with strings, list, tuple, dict.\r\n\r\nMy opinion is that the str accessor has indeed a broader use than it is explained in the main pandas documentation, e.g., https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462163494",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25240#issuecomment-462163494",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25240",
    "id": 462163494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjE2MzQ5NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-10T19:27:59Z",
    "updated_at": "2019-02-10T19:27:59Z",
    "author_association": "MEMBER",
    "body": "@fran6w : Ah, I see.  In this case, I think we just need to document this much more thoroughly at the link you provided above.  Thus, I'm less inclined to believe your example is buggy and is in fact expected behavior, in light of the behavior of `str_get`.\r\n\r\ncc @jreback "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462247870",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25240#issuecomment-462247870",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25240",
    "id": 462247870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjI0Nzg3MA==",
    "user": {
      "login": "fran6w",
      "id": 4402700,
      "node_id": "MDQ6VXNlcjQ0MDI3MDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4402700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fran6w",
      "html_url": "https://github.com/fran6w",
      "followers_url": "https://api.github.com/users/fran6w/followers",
      "following_url": "https://api.github.com/users/fran6w/following{/other_user}",
      "gists_url": "https://api.github.com/users/fran6w/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fran6w/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fran6w/subscriptions",
      "organizations_url": "https://api.github.com/users/fran6w/orgs",
      "repos_url": "https://api.github.com/users/fran6w/repos",
      "events_url": "https://api.github.com/users/fran6w/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fran6w/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-11T08:24:07Z",
    "updated_at": "2019-02-11T08:24:07Z",
    "author_association": "NONE",
    "body": "Indeed. Updating the documentation would be great.\r\n\r\nBTW, if you take this example below, the global behavior of the str accessor remains strange. For instance, the contains(regex=False) method works fine for Series of list (or dict).\r\n\r\nimport pandas as pd\r\ns1 = pd.Series(['AA/aa', 'BB/bb', 'CC/cc'])\r\ns2 = s1.str.split('/')\r\ns2.str.contains('AA', regex=False)\r\n\r\nResult:\r\n0     True\r\n1    False\r\n2    False\r\ndtype: bool\r\n\r\nIn fact, the str accessor works fine in cases where the \"string\" function implementation used after \"str\" is compatible the actual objects type in the Series... In the case of contains(regex=False), the branch of the code uses a lambda (f = lambda x: pat in x) which appears to work with list or dict as well.\r\n\r\nIMHO, those are working side effects..."
  }
]
