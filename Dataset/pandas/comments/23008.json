[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427605209",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23008#issuecomment-427605209",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23008",
    "id": 427605209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzYwNTIwOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-06T20:48:34Z",
    "updated_at": "2018-10-06T20:49:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "``.apply`` already accepts a ufunc and defers to it, have you tried? can you show a complete usecase. the group indexers are *already* available on the ``GroupBy`` objects as well."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427606844",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23008#issuecomment-427606844",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23008",
    "id": 427606844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzYwNjg0NA==",
    "user": {
      "login": "tunnij",
      "id": 711638,
      "node_id": "MDQ6VXNlcjcxMTYzOA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/711638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tunnij",
      "html_url": "https://github.com/tunnij",
      "followers_url": "https://api.github.com/users/tunnij/followers",
      "following_url": "https://api.github.com/users/tunnij/following{/other_user}",
      "gists_url": "https://api.github.com/users/tunnij/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tunnij/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tunnij/subscriptions",
      "organizations_url": "https://api.github.com/users/tunnij/orgs",
      "repos_url": "https://api.github.com/users/tunnij/repos",
      "events_url": "https://api.github.com/users/tunnij/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tunnij/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-06T21:15:26Z",
    "updated_at": "2018-10-06T21:15:26Z",
    "author_association": "NONE",
    "body": "I'll come up with some runnable code but will take a look at ufunc and what I can do with the group indexers.\r\n\r\nThe original situation I had was that I had a large dataframe (approx. 40 million rows) and was trying to perform an idxmin() on the groups. The performance of idxmin() vs just a regular min() was quite quite large and so I wanted to see what I could do to speed it up.\r\n\r\nThe original code looked something like this (original_df has an int index a, b, c are strings, d is a float):\r\n`original_df.loc[original_df.groupby(['a', 'b', 'c'])['d'].idxmin()]`\r\n\r\nTwo things that I observed:\r\n\r\n1. the idxmin() call itself is quite slow. For my dataset approx. 1 minute vs running .min() taking approx. 10 seconds.\r\n2. performing the .loc with the resulting multiindexed pd.Series is slow when compared to indexing with a pd.Series constructed from the ints with no index on it.\r\n\r\nNumber lead me to believe that as the implementation of groupby.min is cyhonized that I might be able to achieve similar performance with numba compiled func being given just the int index values and the values of my column 'd'."
  }
]
