[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11329964",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2517#issuecomment-11329964",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2517",
    "id": 11329964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzI5OTY0",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-13T10:42:56Z",
    "updated_at": "2012-12-13T10:42:56Z",
    "author_association": "NONE",
    "body": "Hi, thanks for the bug report.\nCan you test if 7e56b05 solves your problem?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11332126",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2517#issuecomment-11332126",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2517",
    "id": 11332126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzMyMTI2",
    "user": {
      "login": "akloster",
      "id": 171319,
      "node_id": "MDQ6VXNlcjE3MTMxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/171319?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akloster",
      "html_url": "https://github.com/akloster",
      "followers_url": "https://api.github.com/users/akloster/followers",
      "following_url": "https://api.github.com/users/akloster/following{/other_user}",
      "gists_url": "https://api.github.com/users/akloster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akloster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akloster/subscriptions",
      "organizations_url": "https://api.github.com/users/akloster/orgs",
      "repos_url": "https://api.github.com/users/akloster/repos",
      "events_url": "https://api.github.com/users/akloster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akloster/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-13T12:06:09Z",
    "updated_at": "2012-12-13T12:07:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, I don't think it does. Maybe I am misunderstanding something.\n\nThe tests I see in this commit don't expose the ordering issue. The default ordering of dicts seem to be more or less alphabetical or numerical, depending on the indices. In the code above I am reversing the indices from their natural order, and I would expect the dataframe to have the same row-ordering as the .keys() list. However, the dataframe has the normal ordering of the strings.\n\nI'm using the \"columns\" orientation for the input data, anyway. Maybe I shouldn't expect the indices to be in their original order, then.\n\nThis is an interactive session to show the issue:\n\n``` python\n# -*- coding: utf-8 -*-\n# <nbformat>3.0</nbformat>\n\n# <codecell>\n\nfrom collections import OrderedDict\nfrom pandas import *\n\n# <codecell>\n\nindices = [str(i)+\"a\" for i in reversed(range(5))]\na = OrderedDict(zip(indices,range(5)))\nb = OrderedDict(zip(indices,range(10,15)))\nprint a.keys()\nprint b.keys()\nprint a\nprint b\n\n# <codecell>\n\nodict = OrderedDict()\nodict['b'] = b\nodict['a'] = a\nDataFrame(odict)\n\n# <codecell>\n\n\n# <codecell>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11332373",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2517#issuecomment-11332373",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2517",
    "id": 11332373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzMyMzcz",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-13T12:16:39Z",
    "updated_at": "2012-12-13T12:16:39Z",
    "author_association": "NONE",
    "body": "The ordering of dict keys is undefined, and is downright random in 3.3 and after.\nThe tests changes are only there to make existing tests pass with the changes \nto df.from_dict()\nIf this doesn't fix the issue you mentioned, I'm not sure I understand.\nWhen you pass in an ordereddict, the columns in the resulting dataframe should\nmatch the ordering of keys in the OrderedDict. \n\nCould you post a short example of what you are trying to do, what is the result\nand what you expected to see?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11332480",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2517#issuecomment-11332480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2517",
    "id": 11332480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzMyNDgw",
    "user": {
      "login": "akloster",
      "id": 171319,
      "node_id": "MDQ6VXNlcjE3MTMxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/171319?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akloster",
      "html_url": "https://github.com/akloster",
      "followers_url": "https://api.github.com/users/akloster/followers",
      "following_url": "https://api.github.com/users/akloster/following{/other_user}",
      "gists_url": "https://api.github.com/users/akloster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akloster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akloster/subscriptions",
      "organizations_url": "https://api.github.com/users/akloster/orgs",
      "repos_url": "https://api.github.com/users/akloster/repos",
      "events_url": "https://api.github.com/users/akloster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akloster/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-13T12:21:40Z",
    "updated_at": "2012-12-13T12:21:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I showed an example in the code above. What I care about is ordering of both columns and rows. what I am currently doing in my project is that I keep a list of the column and row indices, and then reindex the resulting dataframe with these.\n\nIt's probably more of a feature than a bug. There are cases where you pass in simple dictionaries, but also where you would pass in OrderedDicts. Maybe the expectation that both axes' ordering be honored is too much.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11333312",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2517#issuecomment-11333312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2517",
    "id": 11333312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzMzMzEy",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-13T12:54:13Z",
    "updated_at": "2012-12-13T14:40:31Z",
    "author_association": "NONE",
    "body": "It's possible to get the result you're after if you specify the `index` arg to DataFrame:\n\n``` python\nIn [5]: \n   ...: from collections import OrderedDict\n   ...: from pandas import *\n   ...: \n   ...: # <codecell>\n   ...: \n   ...: indices = [str(i)+\"a\" for i in reversed(range(5))]\n   ...: a = OrderedDict(zip(indices,range(5)))\n   ...: b = OrderedDict(zip(indices,range(10,15)))\n   ...: print a.keys()\n   ...: print b.keys()\n   ...: print a\n   ...: print b\n   ...: \n   ...: # <codecell>\n   ...: \n   ...: odict = OrderedDict()\n   ...: odict['b'] = b\n   ...: odict['a'] = a\n   ...: DataFrame(odict,index=indices)\n['4a', '3a', '2a', '1a', '0a']\n['4a', '3a', '2a', '1a', '0a']\nOrderedDict([('4a', 0), ('3a', 1), ('2a', 2), ('1a', 3), ('0a', 4)])\nOrderedDict([('4a', 10), ('3a', 11), ('2a', 12), ('1a', 13), ('0a', 14)])\nOut[5]: \n     b  a\n4a  10  0\n3a  11  1\n2a  12  2\n1a  13  3\n0a  14  4\n2a  14  4\n```\n\nor just use a dict of lists, with the labels provided by the index argument:\n\n``` python\nindices = [str(i)+\"a\" for i in reversed(range(5))]\na = range(5)\nb = range(10,15)\nodict = OrderedDict()\nodict['b'] = b\nodict['a'] = a\nDataFrame(odict,index=indices)\n\nOut[13]: \n     b  a\n4a  10  0\n3a  11  1\n2a  12  2\n1a  13  3\n0a  14  4\n```\n\nThe reson for the sorting I believe is that providing a dict of dicts to the constructor, enables you\nto have different row labels present in different columns,and the index \nproduced is a union of all the keys present, with missing values marked as Nan:\n\n``` python\n\nIn [4]: \n   ...: from collections import OrderedDict\n   ...: from pandas import *\n   ...: \n   ...: # <codecell>\n   ...: \n   ...: indices = [str(i)+\"a\" for i in reversed(range(5))]\n   ...: a = OrderedDict(zip(indices[:2],range(5)))\n   ...: b = OrderedDict(zip(indices[2:],range(10,15)))\n   ...: print a.keys()\n   ...: print b.keys()\n   ...: print a\n   ...: print b\n   ...: \n   ...: # <codecell>\n   ...: \n   ...: odict = OrderedDict()\n   ...: odict['b'] = b\n   ...: odict['a'] = a\n   ...: DataFrame(odict,index=indices)\n['4a', '3a']\n['2a', '1a', '0a']\nOrderedDict([('4a', 0), ('3a', 1)])\nOrderedDict([('2a', 10), ('1a', 11), ('0a', 12)])\nOut[4]: \n     b   a\n4a NaN   0\n3a NaN   1\n2a  10 NaN\n1a  11 NaN\n0a  12 NaN\n```\n\nIt's a more general case, and it's not clear what the ordering should be in that case.\n\njust to be clear,the above fix just guarantees that the ordering of columns will be [b,a]. \nwhich was a bug, even if not the one you meant.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11363025",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2517#issuecomment-11363025",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2517",
    "id": 11363025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzYzMDI1",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-14T02:29:47Z",
    "updated_at": "2012-12-14T02:29:47Z",
    "author_association": "MEMBER",
    "body": "fixed by the pull request\n"
  }
]
