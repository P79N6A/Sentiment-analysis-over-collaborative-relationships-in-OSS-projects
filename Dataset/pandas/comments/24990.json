[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458382822",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458382822",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458382822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM4MjgyMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T02:26:55Z",
    "updated_at": "2019-01-29T02:26:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dycw is \"DataFrame ops with scalars are slower\" a fair summary of the issue? Anything else from your post that's important?\r\n\r\ncc @jbrockmendel. Is this related to the fix for the broadcasting? We're spending a lot of time in `dispatch_to_series`, via `_combine_const`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458383506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458383506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458383506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM4MzUwNg==",
    "user": {
      "login": "dycw",
      "id": 10572122,
      "node_id": "MDQ6VXNlcjEwNTcyMTIy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10572122?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dycw",
      "html_url": "https://github.com/dycw",
      "followers_url": "https://api.github.com/users/dycw/followers",
      "following_url": "https://api.github.com/users/dycw/following{/other_user}",
      "gists_url": "https://api.github.com/users/dycw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dycw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dycw/subscriptions",
      "organizations_url": "https://api.github.com/users/dycw/orgs",
      "repos_url": "https://api.github.com/users/dycw/repos",
      "events_url": "https://api.github.com/users/dycw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dycw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T02:30:10Z",
    "updated_at": "2019-01-29T02:30:10Z",
    "author_association": "NONE",
    "body": "@TomAugspurger Yes, I believe *all* ops should be impacted, beyond __add__. My test also showed regression with Series too, albeit not orders of magnitude."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458384919",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458384919",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458384919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM4NDkxOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T02:37:25Z",
    "updated_at": "2019-01-29T02:37:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> My test also showed regression with Series too, albeit not orders of magnitude.\r\n\r\nWe'll see what profiling shows, but that's likely a different issue. 0.24.0 changed more operations to operation column-wise, so this slowdown scales with the number of columns, which wouldn't affect series."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458385658",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458385658",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458385658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM4NTY1OA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T02:41:25Z",
    "updated_at": "2019-01-29T02:41:25Z",
    "author_association": "MEMBER",
    "body": "> Is this related to the fix for the broadcasting? We're spending a lot of time in dispatch_to_series, via _combine_const.\r\n\r\nYes, we are doing the operation column-by-column, which definitely has a perf hit in few-row/many-column cases like this.  Locally I'm only seeing about a 10x difference, can't speak to the 3000x.\r\n\r\nside-note: instantiating the DataFrame `pd.DataFrame(np.nan, index=range(1), columns=range(5000), dtype=float)` is about 10% slower in 0.24.0.\r\n\r\nIn the short-medium run, operating column-wise is the only way we could find to make Series and DataFrame behavior consistent.\r\n\r\nmedium-long run I think the way to address this perf issue is to dispatch to blocks instead of columns.  This is a big part of why I want EA to be able to handle 2D arrays."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458386338",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458386338",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458386338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM4NjMzOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T02:45:15Z",
    "updated_at": "2019-01-29T02:45:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are EAs being 1-d prohibiting blockwise application of these ops? I would think those are orthogonal.\r\n\r\nEach EA column would be done on its own. But a frame with 1,000 float columns and one EA would end up with two calls to `__add__`, one for each block."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458392631",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458392631",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458392631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM5MjYzMQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T03:21:16Z",
    "updated_at": "2019-01-29T03:21:16Z",
    "author_association": "MEMBER",
    "body": "> Are EAs being 1-d prohibiting blockwise application of these ops? I would think those are orthogonal.\r\n\r\nI could have made this clearer.\r\n\r\nThe functions in core.ops that define arithmetic/comparison ops for Series are pretty easy to adapt to the 2D case (in fact, some are already dim-agnostic).  The path I have in mind is:\r\n\r\n- Allow 2D EAs\r\n- Blocks currently backed by numpy arrays instead become backed by PandasArrays\r\n- define arithmetic/comparison ops directly on PandasArray\r\n- DataFrame and Series both dispatch to underlying block(s), which in turn dispatch to their EAs.\r\n- (side-note) Index also gets its arithmetic/comparison ops from the EA that backs it, closing a whole mess of issues/xfails.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458393645",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458393645",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458393645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM5MzY0NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T03:27:35Z",
    "updated_at": "2019-01-29T03:27:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Allow 2D EAs\r\n\r\nFirst, assume a can opener :) (fellow economists should get that).\r\n\r\nMore seriously, I've been thinking of ways we could opt *pandas* into 2D arrays, without putting that complexity on users. Nothing concrete yet though. In particular, it's not clear to me that a 2D EA isn't just re-inventing Block. I'd be interested in seeing if we can get ops working blockwise with the current mix of ndarray-backed Blocks and EA-backed ops (though this isn't a high priority for me right now)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458403962",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458403962",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458403962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQwMzk2Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T04:30:57Z",
    "updated_at": "2019-01-29T04:30:57Z",
    "author_association": "MEMBER",
    "body": "> More seriously, I've been thinking of ways we could opt pandas into 2D arrays, without putting that complexity on users.\r\n\r\nMaybe we should discuss this in a dedicated Issue?  I like this as a potential compromise on the 1D vs drop-in-for-ndarray tradeoff.  It would make it feasible for me to put together a proof of concept for the block-based arithmetic.\r\n\r\n> just re-inventing Block\r\n\r\nBlock would be a much simpler beast if it a) didn't have to carry around `mgr_locs` and b) didn't have to worry about 1D blocks inside a DataFrame.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458450983",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458450983",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458450983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQ1MDk4Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T08:30:03Z",
    "updated_at": "2019-01-29T08:30:03Z",
    "author_association": "MEMBER",
    "body": "> First, assume a can opener :) (fellow economists should get that).\r\n\r\n@TomAugspurger : Had to interject, but I approve 🙂 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458519819",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24990#issuecomment-458519819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24990",
    "id": 458519819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODUxOTgxOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T12:19:54Z",
    "updated_at": "2019-01-29T12:19:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with @TomAugspurger here. This has been a big box of works (more than a can :>) for quite some time. Blocks are rather efficient for *some* operations but have some costs:\r\n\r\n- assembling the blocks can be pretty expense (think initial copy from 1-d arrays)\r\n- shape mutating causes copies\r\n- setting is overly complicated, now blocks need to be split\r\n- adds contributor overhead because of the complexity\r\n- blocks implement lazy consolidation to mitigate some of the above costs\r\n\r\nSo its not a simple, 'just use 2-D EA'. as you can see some obvious benefits, but there is a really long tail of hidden costs.\r\n\r\nI have basically switched my view over the years from being pro-blocks (for getting perf benefits), to pro-columns because of the simplicity, sure we do have *some* perf costs but IMHO this is easily out-weighted by reduced complexity.\r\n\r\nAnyhow, let's open a dedicated issue about this.\r\n"
  }
]
