[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286513274",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15687#issuecomment-286513274",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15687",
    "id": 286513274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjUxMzI3NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T18:17:55Z",
    "updated_at": "2017-03-14T18:17:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is a dupe of #15622 \r\n\r\nyes the bug here is that it is constructed in a different order when concat is used (though still lexsorted). ``.concat`` is used inside ``groupby.apply`` here"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286591037",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15687#issuecomment-286591037",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15687",
    "id": 286591037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjU5MTAzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T23:13:34Z",
    "updated_at": "2017-03-14T23:13:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "actually this is not a dupe of #15622, rather this is correct.\r\n\r\n@8one6 see below. lexsortedness has to do with the label orderings w.r.t. to the levels (which may or may not be sorted). see if the below makes sense to you\r\n\r\n```\r\n# the result from above\r\nIn [7]: res\r\nOut[7]: \r\n                       near       far\r\nletter size                          \r\na      big   newz  0.978738  2.240893\r\n             newa  1.764052  0.400157\r\n       small newz  0.950088 -0.151357\r\n             newa  1.867558 -0.977278\r\nb      big   newz  0.144044  1.454274\r\n             newa -0.103219  0.410599\r\n       small newz  0.443863  0.333674\r\n             newa  0.761038  0.121675\r\n\r\n# just setting names and a count\r\nIn [8]: res.index.names=['letter','size','other']\r\n\r\nIn [9]: res['count'] = np.arange(len(res))\r\n\r\nIn [10]: res\r\nOut[10]: \r\n                        near       far  count\r\nletter size  other                           \r\na      big   newz   0.978738  2.240893      0\r\n             newa   1.764052  0.400157      1\r\n       small newz   0.950088 -0.151357      2\r\n             newa   1.867558 -0.977278      3\r\nb      big   newz   0.144044  1.454274      4\r\n             newa  -0.103219  0.410599      5\r\n       small newz   0.443863  0.333674      6\r\n             newa   0.761038  0.121675      7\r\n```\r\n\r\nThis is a resort based on the 3 columns, we are reconstructing things here (IOW starting new), NOT from the existing levels\r\n```\r\nIn [11]: res.reset_index().sort_values(['letter', 'size', 'other'])\r\nOut[11]: \r\n  letter   size other      near       far  count\r\n1      a    big  newa  1.764052  0.400157      1\r\n0      a    big  newz  0.978738  2.240893      0\r\n3      a  small  newa  1.867558 -0.977278      3\r\n2      a  small  newz  0.950088 -0.151357      2\r\n5      b    big  newa -0.103219  0.410599      5\r\n4      b    big  newz  0.144044  1.454274      4\r\n7      b  small  newa  0.761038  0.121675      7\r\n6      b  small  newz  0.443863  0.333674      6\r\n\r\n# if we set it again, its sorted (we set it this way)\r\nIn [12]: res.reset_index().sort_values(['letter', 'size', 'other']).set_index(['letter', 'size', 'other'])\r\nOut[12]: \r\n                        near       far  count\r\nletter size  other                           \r\na      big   newa   1.764052  0.400157      1\r\n             newz   0.978738  2.240893      0\r\n       small newa   1.867558 -0.977278      3\r\n             newz   0.950088 -0.151357      2\r\nb      big   newa  -0.103219  0.410599      5\r\n             newz   0.144044  1.454274      4\r\n       small newa   0.761038  0.121675      7\r\n             newz   0.443863  0.333674      6\r\n\r\n# this IS lexsorted\r\nIn [13]: res.reset_index().sort_values(['letter', 'size', 'other']).set_index(['letter', 'size', 'other']).index.is_lexsorted()\r\nOut[13]: True\r\n\r\nIn [14]: res.reset_index().sort_values(['letter', 'size', 'other']).set_index(['letter', 'size', 'other']).index\r\nOut[14]: \r\nMultiIndex(levels=[['a', 'b'], ['big', 'small'], ['newa', 'newz']],\r\n           labels=[[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]],\r\n           names=['letter', 'size', 'other'])\r\n\r\n# as is the original (but notice that the levels themselves are ordered differently).\r\nIn [15]: res.index.is_lexsorted()\r\nOut[15]: True\r\n\r\nIn [16]: res.index\r\nOut[16]: \r\nMultiIndex(levels=[['a', 'b'], ['big', 'small'], ['newz', 'newa']],\r\n           labels=[[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]],\r\n           names=['letter', 'size', 'other'])\r\n```\r\n\r\nI agree this is a tricky concept and we don't reorder level values when sorting."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286591411",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15687#issuecomment-286591411",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15687",
    "id": 286591411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjU5MTQxMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T23:15:20Z",
    "updated_at": "2017-03-14T23:15:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is also related to this: https://github.com/pandas-dev/pandas/issues/14672 (or maybe that will make more sense)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286594411",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15687#issuecomment-286594411",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15687",
    "id": 286594411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjU5NDQxMQ==",
    "user": {
      "login": "8one6",
      "id": 4360170,
      "node_id": "MDQ6VXNlcjQzNjAxNzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4360170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/8one6",
      "html_url": "https://github.com/8one6",
      "followers_url": "https://api.github.com/users/8one6/followers",
      "following_url": "https://api.github.com/users/8one6/following{/other_user}",
      "gists_url": "https://api.github.com/users/8one6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/8one6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/8one6/subscriptions",
      "organizations_url": "https://api.github.com/users/8one6/orgs",
      "repos_url": "https://api.github.com/users/8one6/repos",
      "events_url": "https://api.github.com/users/8one6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/8one6/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T23:30:11Z",
    "updated_at": "2017-03-14T23:30:11Z",
    "author_association": "NONE",
    "body": "First off, thanks for taking the timer to answer this.\r\n\r\nBut can you help me get my head around this: Are you saying this behavior is correct as above (i.e. that the goal of `sort_index` is to sort things in the order specified in the internals of the `MultiIndex`), or are you agreeing that the example above demonstrates a bug (and that `sort_index` should always return something that is sorted in the traditional use of the term...that is alphabetically)?\r\n\r\nIf the former, let me raise my hand to say \"isn't this going to confuse a ton of people\"?  And if the former, is there another method which would achieve the simple end of \"sorting the index\" in the usual way?  And if the former, can we try to put this in the docs somewhere?  If we're going this way, then I think the intended behavior of `sort_index` is likely to get users into a lot of trouble with unexpected behaviors.\r\n\r\nIf the latter, what, if anything, can be done to fix the current behavior?\r\n\r\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286595215",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15687#issuecomment-286595215",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15687",
    "id": 286595215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjU5NTIxNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T23:34:17Z",
    "updated_at": "2017-03-14T23:34:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "well its currently the former. and yes its confusing. I believe its this ways because this can have a detrimental effect on performance (though its only if you are actually sorting that this matters).\r\n\r\nI will reopen this because I think I can fix this and actually make it sort w/o regard to the lexsortedness."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286596480",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15687#issuecomment-286596480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15687",
    "id": 286596480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjU5NjQ4MA==",
    "user": {
      "login": "8one6",
      "id": 4360170,
      "node_id": "MDQ6VXNlcjQzNjAxNzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4360170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/8one6",
      "html_url": "https://github.com/8one6",
      "followers_url": "https://api.github.com/users/8one6/followers",
      "following_url": "https://api.github.com/users/8one6/following{/other_user}",
      "gists_url": "https://api.github.com/users/8one6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/8one6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/8one6/subscriptions",
      "organizations_url": "https://api.github.com/users/8one6/orgs",
      "repos_url": "https://api.github.com/users/8one6/repos",
      "events_url": "https://api.github.com/users/8one6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/8one6/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T23:41:10Z",
    "updated_at": "2017-03-14T23:42:35Z",
    "author_association": "NONE",
    "body": "I think I can (if I twist my head around funny) understand a context where a person might want to take advantage of the existing behavior.  For example it could be a bit like an ordered categorical, where I just decide that for me the fruits `['grape', 'apple', 'cantaloupe']` should be considered in that order within their level (maybe i'm thinking about ordering fruits based on size).  And then maybe, just maybe, when I sort a `MultiIndex` that contains those as a level, that I want them to come out in this very not alphabetical ordering.\r\n\r\nBut I'd stress that a) I can't imagine that's the more common use case and b) as of now I think the behavior is totally undocumented.  I don't fully understand how the guts work here...but if I can help by proofreading new documentation or testing new functions, I'd love to.\r\n\r\nComing at this from my use cases, I would think that it is incredibly rare to see people deliberately creating ordered levels on a `MultiIndex` in any context other than an explicit call to the constructor.  So for me, I'd love to see `sort_index` always do a \"natural\", \"alphabetical\" sort (leaving it to others to decide on how to compare across `type`s).  And perhaps there could be a `sort_index_bespoke` or something, or a kwarg for `sort_index` itself that would preserve the current behavior for those (uncommon?) cases where it is really desired.\r\n\r\nI've found myself using the hack of \r\n```\r\ndf.loc[sorted(df.index), :]\r\n```\r\nbut that's just ugly, right?"
  }
]
