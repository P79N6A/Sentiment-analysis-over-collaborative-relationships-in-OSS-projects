[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367886914",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19850#issuecomment-367886914",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19850",
    "id": 367886914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzg4NjkxNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T02:04:55Z",
    "updated_at": "2018-02-23T02:04:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is not implemented in any way. It IS possible, but slightly non-trivial to actually make this work properly. it is similar to #13208. We don't have the support for this in indexing. If you have interest in making this happen, then please submit a PR."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367934440",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19850#issuecomment-367934440",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19850",
    "id": 367934440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzkzNDQ0MA==",
    "user": {
      "login": "jaumebonet",
      "id": 3973674,
      "node_id": "MDQ6VXNlcjM5NzM2NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3973674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaumebonet",
      "html_url": "https://github.com/jaumebonet",
      "followers_url": "https://api.github.com/users/jaumebonet/followers",
      "following_url": "https://api.github.com/users/jaumebonet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaumebonet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaumebonet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaumebonet/subscriptions",
      "organizations_url": "https://api.github.com/users/jaumebonet/orgs",
      "repos_url": "https://api.github.com/users/jaumebonet/repos",
      "events_url": "https://api.github.com/users/jaumebonet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaumebonet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T07:45:30Z",
    "updated_at": "2018-02-23T07:45:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see.  \r\nI guess adding it to indexing is a bit out of my knowledge of pandas.  \r\nRegardless, seeing the issue you point out, making the two-line change I'm proposing would allow users to apply the workaround of #13208 to `_constructor_sliced`. Something like this:\r\n```python\r\n    @property\r\n    def _constructor_sliced(self):\r\n        def f(*args, **kwargs):\r\n        # adapted from https://github.com/pandas-dev/pandas/issues/13208#issuecomment-326556232\r\n            return DesignSeries(*args, **kwargs).__finalize__(self, method='inherit')\r\n        return f\r\n```\r\nwhich right now won't work, allows to process the inheritance in `__finalize__`.  It is not a full-fledge automatic solution but would facilitate working with derived classes.  \r\nI've tried locally and it seems to work for me. I would be happy to send a PR with this if it makes sense for you guys."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367935587",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19850#issuecomment-367935587",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19850",
    "id": 367935587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzkzNTU4Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T07:52:12Z",
    "updated_at": "2018-02-23T07:52:12Z",
    "author_association": "MEMBER",
    "body": "See https://github.com/pandas-dev/pandas/pull/18258 where `from_array` was deprecated. The main problem in replacing `_constructor_sliced._from_array` with just `_constructor_sliced` is that that handles sparse arrays a bit differently. So that is something we need to solve."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367950529",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19850#issuecomment-367950529",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19850",
    "id": 367950529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk1MDUyOQ==",
    "user": {
      "login": "jaumebonet",
      "id": 3973674,
      "node_id": "MDQ6VXNlcjM5NzM2NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3973674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaumebonet",
      "html_url": "https://github.com/jaumebonet",
      "followers_url": "https://api.github.com/users/jaumebonet/followers",
      "following_url": "https://api.github.com/users/jaumebonet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaumebonet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaumebonet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaumebonet/subscriptions",
      "organizations_url": "https://api.github.com/users/jaumebonet/orgs",
      "repos_url": "https://api.github.com/users/jaumebonet/repos",
      "events_url": "https://api.github.com/users/jaumebonet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaumebonet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T09:03:49Z",
    "updated_at": "2018-02-23T09:04:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "oh! I see!\r\nI don't get how I missed it before.\r\nCouldn't this be added to the Series' `__new__`?   \r\nKind of like:\r\n```python\r\ndef __new__( cls, *args, **kwargs ):\r\n    # arr is mandatory, first argument or key `arr`.\r\n    if isinstance(kwargs.get('arr', args[0]), ABCSparseArray):\r\n        from pandas.core.sparse.series import SparseSeries\r\n        cls = SparseSeries\r\n    obj = object.__new__(cls)\r\n    obj.__init__(*args, **kwargs)\r\n    return obj\r\n```\r\nThis way the check is kept in the constructor itself.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367957426",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19850#issuecomment-367957426",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19850",
    "id": 367957426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk1NzQyNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T09:33:33Z",
    "updated_at": "2018-02-23T09:33:33Z",
    "author_association": "MEMBER",
    "body": "That's a possibility indeed, but a change in API that we need to discuss (I am not familiar enough with sparse to really understand the possible consequences). \r\nEg currently you can actually hold spars array data in a normal Series:\r\n\r\n```\r\nIn [27]: s = pd.Series(pd.SparseArray([1, 0, 0, 2, 0]))\r\n\r\nIn [28]: s\r\nOut[28]: \r\n0    1\r\n1    0\r\n2    0\r\n3    2\r\n4    0\r\ndtype: int64\r\n\r\nIn [29]: s.dtype\r\nOut[29]: dtype('int64')\r\n\r\nIn [30]: s.ftype\r\nOut[30]: 'int64:sparse'\r\n\r\nIn [31]: s.values\r\nOut[31]: \r\n[1, 0, 0, 2, 0]\r\nFill: 0\r\nIntIndex\r\nIndices: array([0, 3], dtype=int32)\r\n```\r\n\r\nbut I am not fully sure what the difference / (dis)advantage of that is compared to SparseSeries.\r\n\r\nProbably best to open a separate issue about that first."
  }
]
