[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366683592",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19756#issuecomment-366683592",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19756",
    "id": 366683592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjY4MzU5Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-19T12:47:23Z",
    "updated_at": "2018-02-19T12:47:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is strange, but why are you passing `cumsum` to `.agg`? It's expected that the aggregation function aggregates the array, and `cumsum` doesn't."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366731638",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19756#issuecomment-366731638",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19756",
    "id": 366731638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjczMTYzOA==",
    "user": {
      "login": "Airatvi",
      "id": 6471997,
      "node_id": "MDQ6VXNlcjY0NzE5OTc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6471997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Airatvi",
      "html_url": "https://github.com/Airatvi",
      "followers_url": "https://api.github.com/users/Airatvi/followers",
      "following_url": "https://api.github.com/users/Airatvi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Airatvi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Airatvi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Airatvi/subscriptions",
      "organizations_url": "https://api.github.com/users/Airatvi/orgs",
      "repos_url": "https://api.github.com/users/Airatvi/repos",
      "events_url": "https://api.github.com/users/Airatvi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Airatvi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-19T15:49:13Z",
    "updated_at": "2018-02-19T15:49:13Z",
    "author_association": "NONE",
    "body": "1) Is DataFrame.agg  just version of DataFrame.apply which allows different aggregations per column? If not what is the right way to do it?\r\n2) If not it should be explicitly prohibited I guess. I have seen what this behavior  is used.\r\n3) The documentation says that it returns DataFrame, should be \"Series or DataFrame\" in this case.\r\nhttps://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.agg.html\r\n4) And finally it seems the problem is not with misuse. Example with actual aggregation:\r\n#### Code Sample, a copy-pastable example if possible\r\n\r\n```python\r\nimport pandas as pd\r\ndf=pd.DataFrame([1, 2], columns=['a'])\r\nprint(df.agg({'a': lambda x: x.sum()}))\r\nprint(df.agg({'a': lambda x: 3}))\r\n#################################################output\r\na    3\r\ndtype: int64\r\n   a\r\n0  3\r\n1  3\r\n```\r\n#### Problem description\r\n\r\nFunctions (lambda ...) which return the same numbers, give different results. It seems that  somehow second agg was called with axis=1.\r\n\r\n#### Expected Output\r\n```python\r\na    3\r\ndtype: int64\r\na    3\r\ndtype: int64\r\n```\r\n\r\n#### Output of ``pd.show_versions()``\r\n\r\n<details>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.6.2.final.0\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 4.13.5-1-ARCH\r\nmachine: x86_64\r\nprocessor:\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\n\r\npandas: 0.22.0\r\npytest: 3.2.2\r\npip: 9.0.1\r\nsetuptools: 36.5.0\r\nCython: None\r\nnumpy: 1.14.0\r\nscipy: 1.0.0\r\npyarrow: None\r\nxarray: None\r\nIPython: 5.3.0\r\nsphinx: None\r\npatsy: None\r\ndateutil: 2.6.1\r\npytz: 2018.3\r\nblosc: None\r\nbottleneck: None\r\ntables: 3.4.2\r\nnumexpr: 2.6.4\r\nfeather: None\r\nmatplotlib: 2.1.2\r\nopenpyxl: 2.4.5\r\nxlrd: 1.0.0\r\nxlwt: None\r\nxlsxwriter: None\r\nlxml: 4.1.1\r\nbs4: 4.6.0\r\nhtml5lib: 0.999999999\r\nsqlalchemy: 1.1.6\r\npymysql: None\r\npsycopg2: None\r\njinja2: 2.9.6\r\ns3fs: None\r\nfastparquet: None\r\npandas_gbq: None\r\npandas_datareader: None\r\nNone\r\n\r\n</details>"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366962672",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19756#issuecomment-366962672",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19756",
    "id": 366962672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njk2MjY3Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T12:29:47Z",
    "updated_at": "2018-02-20T12:29:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is DataFrame.agg just version of DataFrame.apply which allows different aggregations per column? If not what is the right way to do it?\r\n\r\nI believe so, but I wouldn't rely on implementation details.\r\n\r\n> If not it should be explicitly prohibited I guess. I have seen what this behavior is used.\r\n\r\nThat's what I would have expected, but perhaps it's difficult to check this.\r\n\r\n> And finally it seems the problem is not with misuse. Example with actual aggregation:\r\n\r\nThat does indeed look buggy.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367203641",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19756#issuecomment-367203641",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19756",
    "id": 367203641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzIwMzY0MQ==",
    "user": {
      "login": "Yalniza",
      "id": 36686204,
      "node_id": "MDQ6VXNlcjM2Njg2MjA0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/36686204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Yalniza",
      "html_url": "https://github.com/Yalniza",
      "followers_url": "https://api.github.com/users/Yalniza/followers",
      "following_url": "https://api.github.com/users/Yalniza/following{/other_user}",
      "gists_url": "https://api.github.com/users/Yalniza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Yalniza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Yalniza/subscriptions",
      "organizations_url": "https://api.github.com/users/Yalniza/orgs",
      "repos_url": "https://api.github.com/users/Yalniza/repos",
      "events_url": "https://api.github.com/users/Yalniza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Yalniza/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T03:38:02Z",
    "updated_at": "2018-02-21T03:38:02Z",
    "author_association": "NONE",
    "body": "❤✋"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/467807736",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19756#issuecomment-467807736",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19756",
    "id": 467807736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzgwNzczNg==",
    "user": {
      "login": "plankthom",
      "id": 1620679,
      "node_id": "MDQ6VXNlcjE2MjA2Nzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1620679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plankthom",
      "html_url": "https://github.com/plankthom",
      "followers_url": "https://api.github.com/users/plankthom/followers",
      "following_url": "https://api.github.com/users/plankthom/following{/other_user}",
      "gists_url": "https://api.github.com/users/plankthom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plankthom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plankthom/subscriptions",
      "organizations_url": "https://api.github.com/users/plankthom/orgs",
      "repos_url": "https://api.github.com/users/plankthom/repos",
      "events_url": "https://api.github.com/users/plankthom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plankthom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-27T10:23:43Z",
    "updated_at": "2019-02-27T10:48:27Z",
    "author_association": "NONE",
    "body": "I suspect the cause is in [Series.aggregate](https://github.com/pandas-dev/pandas/blob/aa084162bcaa7ce0efdc044bc8077f6bfca70674/pandas/core/series.py#L3515).\r\n```\r\n            try:\r\n                result = self.apply(func, *args, **kwargs)\r\n            except (ValueError, AttributeError, TypeError):\r\n                result = func(self, *args, **kwargs)\r\n```\r\nWhich mixes up aggregating (evaluate a function on the whole series) and applying (evaluate over each element).\r\nMy workaround is to assert in my custom aggregation function that a Series is expected (cfr [this stackoverflow item](https://stackoverflow.com/questions/54890646/pandas-fails-to-aggregate-with-a-list-of-aggregation-functions), in order to get into the second branch of the statement\r\n"
  }
]
