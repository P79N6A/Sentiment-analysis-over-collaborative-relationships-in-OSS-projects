[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101106498",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101106498",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101106498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTEwNjQ5OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T02:32:49Z",
    "updated_at": "2015-05-12T02:32:49Z",
    "author_association": "MEMBER",
    "body": "Hadley Wickham is brilliant at API design, so I'm always happy to use his work for inspiration. Concrete suggestions would be helpful.\n\nAt the very least, `gather` looks like a broadly useful method to add to pandas dataframes. It seems like an improved version of `melt`, which we already borrowed from Hadley. So +1 from me, though I'd wait for a few other core devs to chime in (@TomAugspurger?) before you start writing your PR.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101233644",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101233644",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101233644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTIzMzY0NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T10:42:02Z",
    "updated_at": "2015-05-12T10:42:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "This already exists (sort of). as `wide_to_long`. +1 on changing the name to `gather`, better API (this uses regexes to 'infer' the variable names).\n\n```\nIn [26]: df\nOut[26]: \n    a   b    names\n0  67  56   Wilbur\n1  80  90  Petunia\n2  64  50  Gregory\n\nIn [27]: df2 = df.rename(columns={'a' : 'A1', 'b' : 'B2'})\n\nIn [28]: df2\nOut[28]: \n   A1  B2    names\n0  67  56   Wilbur\n1  80  90  Petunia\n2  64  50  Gregory\n\nIn [29]: pd.wide_to_long(df2,['A|B'],'names','heartrate')\nOut[29]: \n                   A|B\nnames   heartrate     \nWilbur  1           67\nPetunia 1           80\nGregory 1           64\nWilbur  2           56\nPetunia 2           90\nGregory 2           50\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101246780",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101246780",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101246780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTI0Njc4MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T11:36:57Z",
    "updated_at": "2015-05-12T11:36:57Z",
    "author_association": "MEMBER",
    "body": "I just wanted to give the same reference to `wide_to_long` \nBut I think that is exactly an example of how to _not_ do it (in the sense of \"I have a specific case, lets add a function for that\"). To be clear, at least not for the scope of pandas (or at least top-level namespace of pandas).\n\nIn that sense, I am -1 on just adding 'yet another reshape-like' function, before thinking it a bit more through (but I fully agree that the current reshape functionality (`melt` and `wide_to_long`) can use some love to make it more flexible and user friendly):\n- Is it possible to improve `melt` without breaking back compat (I don't know if I find the name 'gather' that much better)\n- How do we keep the interface somewhat consistent between the 'opposite' functions (pivot, pivot_table, `spread` in tidyr)\n- Maybe someone should rather write a 'pandas-tidy' package that implements these functions based on pandas first?\n- Go through the different problem cases of reshaping, see how it can currently done in pandas, what is good, what is lacking, and how can we improve this?\n\nThe problem is a bit that pandas is becoming a monolithic package. Hadley Wickham has indeed very nice API's (and we can learn a lot from that to strive for in pandas). But, if he has a new idea, he just starts a new package. For example, the current `melt` function in pandas is based on his older `reshape(2)` package. Now you have `tidyr`, and we could get inspiration from there. But then maybe next, there is another package, en want can't keep adding functions .. (or, we can, but the question is if we want this). \nBut of course, this is a much more general discussion ..\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101270342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101270342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101270342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTI3MDM0Mg==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T13:12:54Z",
    "updated_at": "2015-05-12T13:13:50Z",
    "author_association": "NONE",
    "body": "-1 on my own suggestion and  further overloading the pandas namespace and +1 on using simple, composable building block abstractions and maybe starting a new package. Pydata is great for consistency, but R has more rapid diffuse iterative innovation...I wonder if we can help foster the latter. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101294306",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101294306",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101294306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTI5NDMwNg==",
    "user": {
      "login": "kay1793",
      "id": 9023555,
      "node_id": "MDQ6VXNlcjkwMjM1NTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9023555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kay1793",
      "html_url": "https://github.com/kay1793",
      "followers_url": "https://api.github.com/users/kay1793/followers",
      "following_url": "https://api.github.com/users/kay1793/following{/other_user}",
      "gists_url": "https://api.github.com/users/kay1793/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kay1793/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kay1793/subscriptions",
      "organizations_url": "https://api.github.com/users/kay1793/orgs",
      "repos_url": "https://api.github.com/users/kay1793/repos",
      "events_url": "https://api.github.com/users/kay1793/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kay1793/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T14:02:29Z",
    "updated_at": "2015-05-12T14:03:06Z",
    "author_association": "NONE",
    "body": "That's well put, but I'm forced to strongly disagree. While as you say R unarguably benefits from a rapid diffuse iterative innovation, If you really examine the issue closely you must realize that pydata tools tend to intentionally embrace a more focused decentralized convergent behaviour-driven amalgamation approach, one that is **inherently** _aspect-oriented_ and inline with the best-of-breed theories of **cloud-first** which rain supreme over this exciting new age of _\"stuff\"_.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101303521",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101303521",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101303521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTMwMzUyMQ==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T14:38:58Z",
    "updated_at": "2015-05-12T14:38:58Z",
    "author_association": "NONE",
    "body": "Sorry, I don't understand what that means.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101435862",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101435862",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101435862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTQzNTg2Mg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T22:04:39Z",
    "updated_at": "2015-05-12T22:04:39Z",
    "author_association": "MEMBER",
    "body": "Indeed, a separate package is probably a better place to start. The only unfortunate bit about doing this outside of pandas is that users can't do method chaining with third party packages.\n\n@kay1793 Please don't troll.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101456716",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101456716",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101456716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTQ1NjcxNg==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T23:18:57Z",
    "updated_at": "2015-05-12T23:39:02Z",
    "author_association": "NONE",
    "body": "But what good trolling it was :) No I'm just kidding, it was rude and it had me going because he almost had a point there.\n\nThis method chaining issue perfectly illustrates my somewhat densely articulated point: In R, new packages spring up all the time, iterate on other packages and are connected using pipes. In python (statsmodels for example) users go through a long and arduous PR process to include in packages,  thus then increasing maintenance burden and decreasing motivation/ sense of ownership to maintain my own code.  \n\nWhile the code quality is more variable and APIs are less consistent, the vibrant package landscape, binded by cran and piping, makes up for it in a sense. Sure we can write our own libraries in python, but without a CRAN like thing, they end up languishing unmaintained in corners of github. In the meantime, its harder to push to the primary packages and innovation there diminishes as maintenance takes up a higher proportion of reviewer time.  \n\nForgive me for the digression, but I think this is tangentially related and critical for pydata. The end result is that it seems the landscape in R is advancing much faster (aided in no small part by Dr. Wickham of course). Other variables include additional R moocs, but my point stands regardless. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101460276",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101460276",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101460276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTQ2MDI3Ng==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T23:36:34Z",
    "updated_at": "2015-05-12T23:36:34Z",
    "author_association": "MEMBER",
    "body": "@datnamer I agree. I recently made a similar argument as part of a push by @mrocklin for adding macros to Python: https://mail.python.org/pipermail/python-ideas/2015-March/032822.html\n\nThere may also be less extreme ways to achieve the same result... if you have ideas about things we can do, I'm all ears.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101461662",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101461662",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101461662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTQ2MTY2Mg==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T23:48:21Z",
    "updated_at": "2015-05-12T23:49:07Z",
    "author_association": "NONE",
    "body": "@shoyer:  Hmmm.... I really think the core pandas guys, Matt Rocklin, Travis,  the Pandas people  etc need to get together for a serious brainstorming session on this if python is to keep up in the near and distant future. \n\nWe need to encourage innovation, modularity and ease of use. \n\nI think the low hanging fruit is to improve the sense of connectivity, idea dispersion and utilization of third party packages in the pydata community. Some sort of pydata bloggers and a CRAN like task view database is important. \n\nRegarding the chaining issue... I'm not so up on the technical details....but this looks promising: https://github.com/dalejung/naginpy   Is there any reason it can't be built out and/or work interactively? Can context managers be used in some way? \n\nIs Matt Rocklin still pursuing this macro idea? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101462717",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101462717",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101462717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTQ2MjcxNw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-12T23:54:22Z",
    "updated_at": "2015-05-12T23:54:22Z",
    "author_association": "MEMBER",
    "body": "This seems like a great topic for a BoF session at SciPy 2015... anyone else interested in co-organizing?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101464734",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101464734",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101464734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTQ2NDczNA==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-13T00:08:43Z",
    "updated_at": "2015-05-13T00:08:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is Matt Rocklin still pursuing this macro idea?\n\nIn my free time, which is to say \"Not at the moment\".  But I was pleasantly surprised by a warm response to the idea by a number of people at PyCon.  I'll send out feelers to see if anyone is gung ho about pushing it forward.  I think that the next step is to spec out a design and actually implement a proof of concept.  CPython hackers welcome.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101491657",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101491657",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101491657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTQ5MTY1Nw==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-13T03:01:11Z",
    "updated_at": "2015-05-13T03:01:11Z",
    "author_association": "NONE",
    "body": "Interesting. I wonder if @dalejung has thoughts on this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101630156",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101630156",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101630156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTYzMDE1Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-13T11:12:48Z",
    "updated_at": "2015-05-13T11:12:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > > While the code quality is more variable and APIs are less consistent, the vibrant package landscape, binded by cran and piping, makes up for it in a sense. Sure we can write our own libraries in python, but without a CRAN like thing, they end up languishing unmaintained in corners of github. In the meantime, its harder to push to the primary packages and innovation there diminishes as maintenance takes up a higher proportion of reviewer time.\n\nEvery heard of PyPI? You are WAY underestimating the importance of consistent API's. R has succeeded to some extent, **IN SPITE** of this major major problem. In fact, I would argue that they are moving more and more toward curated type of packages (e.g. `dplyr`), that HAVE a consistent API scheme. If something is worthwhile & popular then you would expect that it would eventually be included in a mainstream package. \n\n`pandas` is exactly this model.\n\nThe point of a 'curated' model is that not only do you get consistency, you get a best practices one-way-to-do-it. You don't have to search around and figure out 'how do I do X'. You get support and bug fixes. How many one-of-a-kind R packages have this? Sure they may have some value to a small group of people, great. But truly is this a package system that you would want to actually rely upon?\n\nThe biggest benefit, however, of a package like _pandas_ is that you get distribution. Once a feature is accepted into pandas, then it immediately becomes available to a pretty large community, is announced at release time, and is supported. I think you'd have a hard time saying the same about virtually any grass-roots packages (in R or Python), unless, they are more 'mainstream'.\n\nmy 2c. (and I do agree that the StatsModels is not iterating fast enough for the community, but there also is not a lot of community support, as compared to say scikit-learn or many R packages).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101871398",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10109#issuecomment-101871398",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10109",
    "id": 101871398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg3MTM5OA==",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T01:12:04Z",
    "updated_at": "2015-05-14T01:12:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've gone the way of adding the wackiness through integrated tooling. I'm not sure what the likelihood of Python adding macro capabilities and even then I imagine they'd be too sensible for my tastes. The features I want out of a lab environment are commonly bad practice for library development :/\n"
  }
]
