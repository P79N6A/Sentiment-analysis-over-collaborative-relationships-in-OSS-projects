[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4707136",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-4707136",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 4707136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDcxMzY=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T00:01:02Z",
    "updated_at": "2012-03-27T00:01:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cool stuff, I can see this being useful, notwithstanding the black magic aspect of it. I also see the failures. Looks like the symbol table is getting screwed up somehow within nose - thinking 'myspace' for instance is global. Weird.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4707224",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-4707224",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 4707224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDcyMjQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T00:07:46Z",
    "updated_at": "2012-03-27T00:10:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Python does a compile-time optimisation where local variables are loaded in a different way, that doesn't work if they're modified dynamically (LOAD_FAST in the byte code). We've run into this with IPython as well, and there doesn't seem to be any way round it.\n\nIt's not safe to assume that column names are valid variable names, or even that they're strings. See the checks we do for tab completion of column names as attributes: https://github.com/wesm/pandas/blob/master/pandas/core/frame.py#L4131\n\nOverall, I'm mildly against including this 'feature' - I've always been advised to avoid attach in R, and it breaks the strong conventions about namespaces in Python. If you give your dataframe a short name, it's only two more characters to refer to `d.column`. Plus you run into bizarre bugs like the one you found, because Python isn't designed to support this kind of thing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4708711",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-4708711",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 4708711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDg3MTE=",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T02:41:29Z",
    "updated_at": "2012-03-27T02:41:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, Thomas, that makes sense. To be honest, I'm probably a -0 on including it as a method so as not to encourage it's use. Might it make sense as a utility function with some more restrictive checks and a big honking warning? I think if you're conservative with using attach in R, it's ok.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4709542",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-4709542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 4709542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDk1NDI=",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T04:05:38Z",
    "updated_at": "2012-03-27T04:05:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Alternatively, it could work as a context manager and let the Series be available in the context.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4712934",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-4712934",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 4712934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTI5MzQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T09:39:35Z",
    "updated_at": "2012-03-27T09:39:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd be inclined to make a standalone function, and put it in a 'recipe' somewhere that we can point people to if they really want that behaviour. Putting in pandas in any form would imply that it worked reliably, which I don't think it can.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5036422",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5036422",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5036422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzY0MjI=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-09T23:53:39Z",
    "updated_at": "2012-04-09T23:53:39Z",
    "author_association": "NONE",
    "body": "I don't like 'attach' much, but I do like R's much more sensible 'with' function: I write things like\n\n```\nwith(mydf[, mydf$Age > 30], plot(Response ~ Dosage))\n```\n\nall the time. (Actually I would write that 'with(subset(mydef, Age > 30), plot(Response ~ Dosage)), taking advantage of subset()'s magic with()-like powers. But you can't have everything.)\n\n@takluyver No, it is possible to reliably inject local variables. The annoying thing is that which variables are considered \"local\" is defined at compile-time, though, so generally most variables that one might want to create will turn out to be \"global\". Which is also okay -- we can reliably inject global variables. We can even restore them again afterward, if we're careful (got to watch out for that DataFrame({\"**builtins**\": [1, 2, 3]})!). But! This cannot be done in a way that is _threadsafe_ -- that's the unsolvable problem.\n\nI guess lots of use cases for this don't care about thread-safety though, and I'd like to write\n\n```\nwith mydf[mydf.Age > 30]: plot(Dosage, Response)\n```\n\nSo here you go: https://gist.github.com/2347382\n\nWritten as standalone right now, syntax is currently 'with data(mydf): ...'. I'd suggest keeping it as a class in its own file, as per the comments at the top, but then adding **enter** and **exit** methods to DataFrame that delegate to it, so that 'with mydf: ...' will work. Doesn't know anything about Series or Panel -- should it?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5036440",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5036440",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5036440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzY0NDA=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-09T23:54:55Z",
    "updated_at": "2012-04-09T23:54:55Z",
    "author_association": "NONE",
    "body": "...that's `__enter__` and `__exit__` methods, of course.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5043444",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5043444",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5043444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDM0NDQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-10T11:09:11Z",
    "updated_at": "2012-04-10T11:09:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I've got to hand it to you that it's possible. But as I think you've already spotted, it's not a solution I think we should be promoting to users:\n- It still breaks the Python convention that variables shouldn't just pop out of nowhere. Being able to easily find where a variable comes from is valuable.\n- Some variables go to locals, some to globals, so there's plenty of potential for unexpected side effects. If I have a column called `len`, and code inside a `with` block calls/yields to other code in the same module, it can suddenly blow up in all sorts of novel and unhelpful ways.\n- As you say, it's not thread safe.\n- Using ctypes to reach into Python's C API makes it implementation specific. (Of course, so does using Cython at the moment, but I understand the Cython people are working on ways to support PyPy, at least).\n\nI can see there are use cases where none of those would be a problem, but I think it's dangerous to offer something like that unless it works really well. Once people have learnt it, it looks easy and simple enough that they'll carry on using it, and when it all goes wrong, it won't be obvious that their casual `with df:` was the culprit.\n\nPerhaps one way forward would be to add a method which generates (textual) code to unpack the columns, like `foo, bar, baz = mydf.cols` (that's hypothetical, and doesn't work at present). With appropriate integration with IPython, you could call a magic function like `%attach mydf`, and it drops the unpacking line in the start of the next cell, ready for you to add your code beneath.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5044335",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5044335",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5044335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDQzMzU=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-10T12:12:40Z",
    "updated_at": "2012-04-10T12:12:40Z",
    "author_association": "NONE",
    "body": "I'm not worried about variables popping out of nowhere, since the 'with mydf:' is a pretty huge signpost, and the ctypes thing is academic since there's no prospect of PyPy and numpy reconciliation anytime soon... and anyway PyPy will need _some_ way to implement locals(). But ugh, yeah, the part where the new variables leak to call-or-yielded-to functions is horrible, I can't believe I missed that. :-(\n\nThinking out loud...\n\nRefusing to overwrite any existing globals would substantially reduce this problem; then the only way code outside the with: block could be affected would be (1) if they were accessing an undefined global, they'd get some random Series object instead of raising a NameError. (2) if they were injecting a new variable into the global namespace, then they could accidentally overwrite one of our globals. The former I could ignore. The latter is... well, a terrible idea, but I suppose you can't actually stop people from using global variables, though plenty of people have tried. I dunno, they're pretty obscure cases, but I'm not entirely comfortable with them.\n\nOkay, so maybe there's no viable way to do this in CPython for \"real\" code. It'd still be really nice to have something like it for one-off interactive uses. Which is much simpler. Perhaps a %with magic? The primary use case for me is working with complicated subsets of data -- in the example above, you can see how with\n\n```\nwith mydf[mydf.Age > 30]: plot(Dosage, Response)\n```\n\nis already much simpler to deal with than\n\n```\nplot(mydf.Dosage[mydf.Age > 30], mydf.Response[mydf.Age > 30])\n```\n\nand you can see how this advantage grows _dramatically_ as the complexity of the subsetting expression grows. And it's not just that only having to type it once is quicker -- it's a huge win interactively, because you can hit up-arrow, tweak the subsetting expression _in one place_, and re-run. But this is also why I'm not so sure about the 'attach' style usage -- I want to be able to re-run stuff quickly with slightly different data-frames, and the 'attach' syntax makes that cumbersome. Then again, maybe I should just get in the habit of always writing `tmp = mydf; ...<code involving tmp>...`.\n\nI don't think the generate-explicit-unpacking-code idea is really addressing this use case. There might be less sophisticated users for whom the real advantage of 'attach' is just that you don't have to remember to type `mydf.` all the time, and it might be nice for them. But they might be better off just learning to type `mydf.` :-).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5045130",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5045130",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5045130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDUxMzA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-10T13:00:11Z",
    "updated_at": "2012-04-10T13:00:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "`with mydf:` might be a pretty huge signpost to you and me, but if you're not familiar with what it's doing, it doesn't look dangerous. Even people familiar with context managers wouldn't go looking for that as the culprit for unexpected variable changes. Refusing to overwrite any globals would help, but then you get the other problem - naive coders wondering why their `id` or `zip` or `format` column doesn't work properly.\n\nI'd probably go down the `tmp` route myself - especially using something like the IPython notebook, where you can easily have more than one line in a cell, so it would look like:\n\n```\ng = mydf[mydf.Age > 30]\nplot(g.Dosage, g.Response)\n```\n\nA magic command would be another route to go, although supporting your example could be tricky, because you need to separate the context part (`mydf[mydf.Age > 30]`) from the execution part (`plot(Dosage, Response)`), so you'd need to parse the input to some extent. I suspect that's possible, though. But I wouldn't call it `%with`, because reusing a keyword seems like a very bad idea. Maybe something like `%indf`.\n\nIt would be relatively simple to write an `%attach` style magic, which would print the names of the variables it had created. I think this would be OK, because it's hopefully clear that magic functions are intended only for interactive use, not for production code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5070207",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5070207",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5070207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzAyMDc=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-11T14:40:09Z",
    "updated_at": "2012-04-11T14:40:09Z",
    "author_association": "NONE",
    "body": "You could keep the colon, so it looked like `%indf mydf[mydf.Age > 30]: ...`. That'd make parsing trivial, since a python expression cannot contain a colon token. (You'd need to tokenize in case there was a colon embedded in a string or something, but that's just a matter of `import tokenize`.) That might also be nice in that it would make it natural to trigger ipython's multi-line statement mode: type `%indf <whatever>:` and hit enter, then you can type multiple lines and later you can get them all back at once by hitting up-arrow once?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5071157",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5071157",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5071157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzExNTc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-11T15:15:55Z",
    "updated_at": "2012-04-11T15:15:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "mydf[15:25] has a colon in valid syntax, and it's the same token with tokenize ;-). I'm sure there's a way to handle that, but it's not entirely trivial. We could pick a completely unused token (I think $ is one), but it would be less intuitive.\n\nI think magic commands at present are a single-line thing, though we're thinking about 'cell-level' magics.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5072667",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5072667",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5072667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzI2Njc=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-11T16:20:01Z",
    "updated_at": "2012-04-11T16:20:01Z",
    "author_association": "NONE",
    "body": "On Wed, Apr 11, 2012 at 4:15 PM, Thomas Kluyver\nreply@reply.github.com\nwrote:\n\n> mydf[15:25] has a colon in valid syntax, and it's the same token with tokenize ;-). I'm sure there's a way to handle that, but it's not entirely trivial. We could pick a completely unused token (I think $ is one), but it would be less intuitive.\n\nBah, I am forgetting all the obvious things today.\n\nIt's still pretty easy to handle, you just have to count parentheses\nnesting. But not as trivial, yeah.\n\n> I think magic commands at present are a single-line thing, though we're thinking about 'cell-level' magics.\n\nOh, too bad. I'm still a luddite running ipython in a terminal, so I\ndon't know about these \"cell\" things.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5073220",
    "html_url": "https://github.com/pandas-dev/pandas/pull/971#issuecomment-5073220",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/971",
    "id": 5073220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzMyMjA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-11T16:45:18Z",
    "updated_at": "2012-04-11T16:45:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, cells aren't as important in the terminal, but the new notebook in particular is designed around cells. It just means the code at an `In [1]:` prompt that's executed in one block.\n"
  }
]
