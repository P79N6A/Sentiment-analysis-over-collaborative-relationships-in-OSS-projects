[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/354270274",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-354270274",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 354270274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDI3MDI3NA==",
    "user": {
      "login": "J535D165",
      "id": 12981139,
      "node_id": "MDQ6VXNlcjEyOTgxMTM5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12981139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/J535D165",
      "html_url": "https://github.com/J535D165",
      "followers_url": "https://api.github.com/users/J535D165/followers",
      "following_url": "https://api.github.com/users/J535D165/following{/other_user}",
      "gists_url": "https://api.github.com/users/J535D165/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/J535D165/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/J535D165/subscriptions",
      "organizations_url": "https://api.github.com/users/J535D165/orgs",
      "repos_url": "https://api.github.com/users/J535D165/repos",
      "events_url": "https://api.github.com/users/J535D165/events{/privacy}",
      "received_events_url": "https://api.github.com/users/J535D165/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-28T10:56:21Z",
    "updated_at": "2017-12-28T10:56:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "It would be nice to have the possibility to change the representation through `pandas.options`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367473389",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-367473389",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 367473389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzQ3MzM4OQ==",
    "user": {
      "login": "J535D165",
      "id": 12981139,
      "node_id": "MDQ6VXNlcjEyOTgxMTM5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12981139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/J535D165",
      "html_url": "https://github.com/J535D165",
      "followers_url": "https://api.github.com/users/J535D165/followers",
      "following_url": "https://api.github.com/users/J535D165/following{/other_user}",
      "gists_url": "https://api.github.com/users/J535D165/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/J535D165/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/J535D165/subscriptions",
      "organizations_url": "https://api.github.com/users/J535D165/orgs",
      "repos_url": "https://api.github.com/users/J535D165/repos",
      "events_url": "https://api.github.com/users/J535D165/events{/privacy}",
      "received_events_url": "https://api.github.com/users/J535D165/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T21:10:40Z",
    "updated_at": "2018-02-21T21:10:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Any thoughts on the desired behaviour @jorisvandenbossche? I think that tuples are a good choice.\r\n\r\nThe tuple output is also close to the workaround many people use:\r\n\r\n``` python\r\nIn [15]: x = numpy.arange(10000)\r\n\r\nIn [16]: pandas.MultiIndex.from_arrays([x, x]).values\r\nOut[16]: \r\narray([(0, 0), (1, 1), (2, 2), ..., (9997, 9997), (9998, 9998),\r\n       (9999, 9999)], dtype=object)\r\n```\r\n\r\n@rockg @hoechenberger"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367477569",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-367477569",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 367477569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzQ3NzU2OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T21:25:37Z",
    "updated_at": "2018-02-21T21:25:37Z",
    "author_association": "MEMBER",
    "body": "I personally also think that tuples would be good representation. \r\n\r\nThe main 'problem' with it is that something like `MultiIndex([('A', 1), ('A', 2), ('B', 1)])` looks like code that can be ran as well, while this is not a valid construction. Which might be confusing (and also goes against the python idiom of the repr being unambiguous (but that's something we are already violating with other reprs as well))."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412669885",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-412669885",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 412669885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjY2OTg4NQ==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T21:24:37Z",
    "updated_at": "2018-08-13T22:32:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've made a suggestion that works locally but would appreciate input as to the exact format.\r\n\r\nI too like the tuple format the best, but the tuples should IMO be vertically stacked, so the user at a glance can see both the individual level (vertically) and each row (horizontally).\r\n\r\nVarious attributes should also be shown at the bottom, to mirror CategoricalIndex.\r\n\r\nAn example with a reasonably complex MultiIndex:\r\n\r\n```\r\n>>> n = 100\r\n>>> c = pd.CategoricalIndex(list('abcdefghijklmnop' * n), name='a')\r\n>>> i = pd.Index(c.codes, name='b')\r\n>>> pd.MultiIndex.from_arrays([c, i])\r\nMultiIndex([ ('a', 0),\r\n             ('b', 1),\r\n             ('c', 2),\r\n             ('d', 3),\r\n             ('e', 4),\r\n             ('f', 5),\r\n             ('g', 6),\r\n             ('h', 7),\r\n             ('i', 8),\r\n             ('j', 9),\r\n            ...\r\n             ('g', 6),\r\n             ('h', 7),\r\n             ('i', 8),\r\n             ('j', 9),\r\n            ('k', 10),\r\n            ('l', 11),\r\n            ('m', 12),\r\n            ('n', 13),\r\n            ('o', 14),\r\n            ('p', 15)],\r\n           levels=[\r\n             CategoricalIndex(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\r\n                  'm', 'n', 'o', 'p'],\r\n                 categories=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', ...], ordered=False, name='a', dtype='category'),\r\n             Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], dtype='int64', name='b'),\r\n           ],\r\n           names=['a', 'b'],\r\n           length=1600)\r\n```\r\n\r\nI like that levels has type information. The individual  levels should concatenate their value on the first line, but otherwise I like this. Thoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413155186",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-413155186",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 413155186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzE1NTE4Ng==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T10:19:20Z",
    "updated_at": "2018-08-15T10:19:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Any comment on the proposed format?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413158549",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-413158549",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 413158549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzE1ODU0OQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T10:32:26Z",
    "updated_at": "2018-08-15T10:32:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "What do you do if not all combinations are present? Probably still need to show `labels=`, no?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413168971",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-413168971",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 413168971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzE2ODk3MQ==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T11:21:13Z",
    "updated_at": "2018-08-15T11:21:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not IMO. I see labels as an implementation detail, similar to CategoricalIndex.codes. There is even an approved issue (#13443) to change the name of ``labels`` to ``codes``.\r\n\r\nSo, IMO we should absolutely not show labels in the repr, it just confuses.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413172623",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-413172623",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 413172623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzE3MjYyMw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T11:38:19Z",
    "updated_at": "2018-08-15T11:38:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fair enough. Plus, there'll be the repr of the tuples already."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413175048",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-413175048",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 413175048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzE3NTA0OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T11:51:03Z",
    "updated_at": "2018-08-15T11:51:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@topper-123 a note on impl\r\n\r\nwe already have all of the machinery to do this\r\npls DO NOT write much custom code\r\n\r\nsee what we are doing for all other Indexes and follow the pattern / subclassing\r\n\r\nthis is a hard problem because of display wrapping and indentation - but it is already solved"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413177203",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-413177203",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 413177203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzE3NzIwMw==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T12:01:59Z",
    "updated_at": "2018-08-15T12:02:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I did that mostly, though I had a problem with wrapping each value in a new line, rather than wrapping several values, as other indexes do. I'll look into it, it I can get that part unified with the rest also."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/415977096",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-415977096",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 415977096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTk3NzA5Ng==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-25T15:30:42Z",
    "updated_at": "2018-08-25T15:37:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Current proposal looks like this:\r\n\r\n```python\r\n>>> n = 1_000_000\r\n>>> ci = pd.CategoricalIndex(list('a' * n) + (['bcd'] * n), categories=['a', 'bcd'], ordered=True)\r\n>>> dti =pd.date_range('2000-01-01', freq='s', periods=2000000)\r\n>>> mi = pd.MultiIndex.from_arrays([ci, ci.codes+9, dti, dti, dti], names = ['a', 'b', 'x', 'x2', 'x3'])\r\n>>> mi\r\nMultiIndex([(  'a',  9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', ...),\r\n            (  'a',  9, '2000-01-01 00:00:01', '2000-01-01 00:00:01', ...),\r\n            (  'a',  9, '2000-01-01 00:00:02', '2000-01-01 00:00:02', ...),\r\n            (  'a',  9, '2000-01-01 00:00:03', '2000-01-01 00:00:03', ...),\r\n            (  'a',  9, '2000-01-01 00:00:04', '2000-01-01 00:00:04', ...),\r\n            (  'a',  9, '2000-01-01 00:00:05', '2000-01-01 00:00:05', ...),\r\n            (  'a',  9, '2000-01-01 00:00:06', '2000-01-01 00:00:06', ...),\r\n            (  'a',  9, '2000-01-01 00:00:07', '2000-01-01 00:00:07', ...),\r\n            (  'a',  9, '2000-01-01 00:00:08', '2000-01-01 00:00:08', ...),\r\n            (  'a',  9, '2000-01-01 00:00:09', '2000-01-01 00:00:09', ...),\r\n            ...\r\n            ('bcd', 10, '2000-01-24 03:33:10', '2000-01-24 03:33:10', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:11', '2000-01-24 03:33:11', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:12', '2000-01-24 03:33:12', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:13', '2000-01-24 03:33:13', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:14', '2000-01-24 03:33:14', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:15', '2000-01-24 03:33:15', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:16', '2000-01-24 03:33:16', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:17', '2000-01-24 03:33:17', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:18', '2000-01-24 03:33:18', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:19', '2000-01-24 03:33:19', ...)],\r\n           dtype='object', names=['a', 'b', 'x', 'x2', 'x3'], length=2000000)\r\n```\r\n\r\nSo we now got:\r\n* item formatting according to each level's formatting rule,\r\n* right-justification for each tuple column,\r\n* row-wise truncation according to ``pd.options.display.max_seq_items``,\r\n* column-wise truncation according to ``pd.options.display.width``,\r\n\r\nComments on the look of this?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444824490",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-444824490",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 444824490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDgyNDQ5MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T10:27:56Z",
    "updated_at": "2018-12-06T10:27:56Z",
    "author_association": "MEMBER",
    "body": "@pandas-dev/pandas-core I would like to draw some attention to this. \r\n\r\nTL;DR: There is a PR implementing a new MultiIndex repr (https://github.com/pandas-dev/pandas/pull/22511), which is a kind of stuck because I want more feedback on the proposed repr.\r\n\r\n---\r\n\r\nThe MultiIndex repr can use some improvement, see top post (https://github.com/pandas-dev/pandas/issues/13480#issue-161016520) for some reasons.\r\n\r\n@topper-123 made a concrete proposal 3 months ago (see the post above this one for details), and has a PR implementing it (https://github.com/pandas-dev/pandas/pull/22511):\r\n\r\n```\r\nMultiIndex([(  'a',  9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', ...),\r\n            (  'a',  9, '2000-01-01 00:00:01', '2000-01-01 00:00:01', ...),\r\n            (  'a',  9, '2000-01-01 00:00:02', '2000-01-01 00:00:02', ...),\r\n            (  'a',  9, '2000-01-01 00:00:03', '2000-01-01 00:00:03', ...),\r\n            (  'a',  9, '2000-01-01 00:00:04', '2000-01-01 00:00:04', ...),\r\n            (  'a',  9, '2000-01-01 00:00:05', '2000-01-01 00:00:05', ...),\r\n            (  'a',  9, '2000-01-01 00:00:06', '2000-01-01 00:00:06', ...),\r\n            (  'a',  9, '2000-01-01 00:00:07', '2000-01-01 00:00:07', ...),\r\n            (  'a',  9, '2000-01-01 00:00:08', '2000-01-01 00:00:08', ...),\r\n            (  'a',  9, '2000-01-01 00:00:09', '2000-01-01 00:00:09', ...),\r\n            ...\r\n            ('bcd', 10, '2000-01-24 03:33:10', '2000-01-24 03:33:10', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:11', '2000-01-24 03:33:11', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:12', '2000-01-24 03:33:12', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:13', '2000-01-24 03:33:13', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:14', '2000-01-24 03:33:14', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:15', '2000-01-24 03:33:15', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:16', '2000-01-24 03:33:16', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:17', '2000-01-24 03:33:17', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:18', '2000-01-24 03:33:18', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:19', '2000-01-24 03:33:19', ...)],\r\n           dtype='object', names=['a', 'b', 'x', 'x2', 'x3'], length=2000000)\r\n```\r\n\r\nI have some remarks on that proposal (summarized here from https://github.com/pandas-dev/pandas/pull/22511#pullrequestreview-157176267):\r\n\r\n- It looks like valid code but it is actually not:\r\n  - The main reason is because the default constructor does not accept a list of tuples (`MI.from_tuples` does that), although there is an issue to discuss to change this: https://github.com/pandas-dev/pandas/issues/23887. So depending on that, this might be a moot argument. \r\n  - Even regardless of the above, due to truncation symbols and the length indication, it is often still not valid code. But this is of course exactly the same situation as with other Index reprs.\r\n\r\n- When you have more levels, the tuples in the repr get truncated (as in the example above). This has the consequence that for such cases, you don't see anything in the default repr about this level, except the name (but for example not even the type). Of course, this will typically not be an issue with MIs with 2-3 levels.\r\nFor a DataFrame the situation can be similar (columns not visible in the default repr), but you have eg the `info()` method to get an overview of the columns and its types. So this could be an argument to add a similar method to MI, but it could maybe also be included in the main repr? (see below)\r\n\r\nThe MultiIndex is a more complex object than a normal Index (multiple levels -> multiple dtypes and names, typically repeated values in a level), so therefore we could consider also a more advanced repr for it.\r\n\r\nJust as an example of what another repr for the MultiIndex could be, here a small mock-up (inspired on `info` and on the repr of xarrays objects where the different dimensions are listed, initially posted here: https://github.com/pandas-dev/pandas/pull/22511#issuecomment-424794876):\r\n\r\n```\r\n<pandas.MultiIndex>\r\nLevels (5):\r\n    * a: category (2) ['a', 'abc']\r\n    * b: int64 (2) [9, 10]\r\n    * dti_1: datetime64[ns] (2000) ['2000-01-01 00:00:00', ... ] \r\n    * dti_2: datetime64[ns] (2000) ['2000-01-01 00:00:00', ... ] \r\n    * dti_3: datetime64[ns] (2000) ['2000-01-01 00:00:00', ... ] \r\n[('a',    9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', '2000-01-01 00:00:00'),\r\n ('a',    9, '2000-01-01 00:00:01', '2000-01-01 00:00:01', '2000-01-01 00:00:01'),\r\n ('a',    9, '2000-01-01 00:00:02', '2000-01-01 00:00:02', '2000-01-01 00:00:02'),\r\n ...,\r\n ('abc', 10, '2000-01-01 00:33:17', '2000-01-01 00:33:17', '2000-01-01 00:33:17'),\r\n ('abc', 10, '2000-01-01 00:33:18', '2000-01-01 00:33:18', '2000-01-01 00:33:18'),\r\n ('abc', 10, '2000-01-01 00:33:19', '2000-01-01 00:33:19', '2000-01-01 00:33:19')],\r\nLenght: 2000\r\n```\r\n\r\nThe formatting is certainly not yet perfect, but it's to give an idea. I personally think the above is more *informative* than the other proposed repr (it includes an easier overview of the different levels, it includes information about the dtypes of the levels, ..).\r\n\r\nMy main issue is that I would just like to have at least *some* discussion on this. We actually never discussed the initial proposal of @topper-123, and also never really discussed my other idea. \r\n*What do we think is the best / most informative repr for the MultiIndex?*\r\n\r\nAnd to be a clear: I am not saying that my idea is necessarily better, I mainly want us to have at least a bit of discussion about it, as we should not change a repr lightly (and if we change it now, we should not change it again for some time). I certainly find what is in the PR an clear improvement over master (it is also based on what I initially proposed myself when originally opening this issue).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444849272",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-444849272",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 444849272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDg0OTI3Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T12:03:54Z",
    "updated_at": "2018-12-06T12:03:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I didn't realize that @topper-123's proposed repr would truncate past\ncertain levels, but that is of course unavoidable. Does #22511\n<https://github.com/pandas-dev/pandas/pull/22511>\ninclude a system like DataFrame, where large reprs are automatically\ntruncated?\n\nIMO, the most important part of a MutlIndex repr is seeing the name and\ntype of each level, and a few values\nif possible. If you need to see more values, then it can be used as the\nindex for a Series, and you'll get the\n(maybe sparsified) version of what's above.\n\nOn Thu, Dec 6, 2018 at 4:28 AM Joris Van den Bossche <\nnotifications@github.com> wrote:\n\n> @pandas-dev/pandas-core\n> <https://github.com/orgs/pandas-dev/teams/pandas-core> I would like to\n> draw some attention to this.\n>\n> TL;DR: There is a PR implementing a new MultiIndex repr (#22511\n> <https://github.com/pandas-dev/pandas/pull/22511>), which is a kind of\n> stuck because I want more feedback on the proposed repr.\n> ------------------------------\n>\n> The MultiIndex repr can use some improvement, see top post (#13480\n> (comment)\n> <https://github.com/pandas-dev/pandas/issues/13480#issue-161016520>) for\n> some reasons.\n>\n> @topper-123 <https://github.com/topper-123> made a concrete proposal 3\n> months ago (see the post above this one for details), and has a PR\n> implementing it (#22511 <https://github.com/pandas-dev/pandas/pull/22511>\n> ):\n>\n> MultiIndex([(  'a',  9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', ...),\n>             (  'a',  9, '2000-01-01 00:00:01', '2000-01-01 00:00:01', ...),\n>             (  'a',  9, '2000-01-01 00:00:02', '2000-01-01 00:00:02', ...),\n>             (  'a',  9, '2000-01-01 00:00:03', '2000-01-01 00:00:03', ...),\n>             (  'a',  9, '2000-01-01 00:00:04', '2000-01-01 00:00:04', ...),\n>             (  'a',  9, '2000-01-01 00:00:05', '2000-01-01 00:00:05', ...),\n>             (  'a',  9, '2000-01-01 00:00:06', '2000-01-01 00:00:06', ...),\n>             (  'a',  9, '2000-01-01 00:00:07', '2000-01-01 00:00:07', ...),\n>             (  'a',  9, '2000-01-01 00:00:08', '2000-01-01 00:00:08', ...),\n>             (  'a',  9, '2000-01-01 00:00:09', '2000-01-01 00:00:09', ...),\n>             ...\n>             ('bcd', 10, '2000-01-24 03:33:10', '2000-01-24 03:33:10', ...),\n>             ('bcd', 10, '2000-01-24 03:33:11', '2000-01-24 03:33:11', ...),\n>             ('bcd', 10, '2000-01-24 03:33:12', '2000-01-24 03:33:12', ...),\n>             ('bcd', 10, '2000-01-24 03:33:13', '2000-01-24 03:33:13', ...),\n>             ('bcd', 10, '2000-01-24 03:33:14', '2000-01-24 03:33:14', ...),\n>             ('bcd', 10, '2000-01-24 03:33:15', '2000-01-24 03:33:15', ...),\n>             ('bcd', 10, '2000-01-24 03:33:16', '2000-01-24 03:33:16', ...),\n>             ('bcd', 10, '2000-01-24 03:33:17', '2000-01-24 03:33:17', ...),\n>             ('bcd', 10, '2000-01-24 03:33:18', '2000-01-24 03:33:18', ...),\n>             ('bcd', 10, '2000-01-24 03:33:19', '2000-01-24 03:33:19', ...)],\n>            dtype='object', names=['a', 'b', 'x', 'x2', 'x3'], length=2000000)\n>\n> I have some remarks on that proposal (summarized here from #22511 (review)\n> <https://github.com/pandas-dev/pandas/pull/22511#pullrequestreview-157176267>\n> ):\n>\n>    -\n>\n>    It looks like valid code but it is actually not:\n>    - The main reason is because the default constructor does not accept a\n>       list of tuples (MI.from_tuples does that), although there is an\n>       issue to discuss to change this: #23887\n>       <https://github.com/pandas-dev/pandas/issues/23887>. So depending\n>       on that, this might be a moot argument.\n>       - Even regardless of the above, due to truncation symbols and the\n>       length indication, it is often still not valid code. But this is of course\n>       exactly the same situation as with other Index reprs.\n>    -\n>\n>    When you have more levels, the tuples in the repr get truncated (as in\n>    the example above). This has the consequence that for such cases, you don't\n>    see anything in the default repr about this level, except the name (but for\n>    example not even the type). Of course, this will typically not be an issue\n>    with MIs with 2-3 levels.\n>    For a DataFrame the situation can be similar (columns not visible in\n>    the default repr), but you have eg the info() method to get an\n>    overview of the columns and its types. So this could be an argument to add\n>    a similar method to MI, but it could maybe also be included in the main\n>    repr? (see below)\n>\n> The MultiIndex is a more complex object than a normal Index (multiple\n> levels -> multiple dtypes and names, typically repeated values in a level),\n> so therefore we could consider also a more advanced repr for it.\n>\n> Just as an example of what another repr for the MultiIndex could be, here\n> a small mock-up (inspired on info and on the repr of xarrays objects\n> where the different dimensions are listed, initially posted here: #22511\n> (comment)\n> <https://github.com/pandas-dev/pandas/pull/22511#issuecomment-424794876>):\n>\n> <pandas.MultiIndex>\n> Levels (5):\n>     * a: category (2) ['a', 'abc']\n>     * b: int64 (2) [9, 10]\n>     * dti_1: datetime64[ns] (2000) ['2000-01-01 00:00:00', ... ]\n>     * dti_2: datetime64[ns] (2000) ['2000-01-01 00:00:00', ... ]\n>     * dti_3: datetime64[ns] (2000) ['2000-01-01 00:00:00', ... ]\n> [('a',    9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', '2000-01-01 00:00:00'),\n>  ('a',    9, '2000-01-01 00:00:01', '2000-01-01 00:00:01', '2000-01-01 00:00:01'),\n>  ('a',    9, '2000-01-01 00:00:02', '2000-01-01 00:00:02', '2000-01-01 00:00:02'),\n>  ...,\n>  ('abc', 10, '2000-01-01 00:33:17', '2000-01-01 00:33:17', '2000-01-01 00:33:17'),\n>  ('abc', 10, '2000-01-01 00:33:18', '2000-01-01 00:33:18', '2000-01-01 00:33:18'),\n>  ('abc', 10, '2000-01-01 00:33:19', '2000-01-01 00:33:19', '2000-01-01 00:33:19')],\n> Lenght: 2000\n>\n> The formatting is certainly not yet perfect, but it's to give an idea. I\n> personally think the above is more *informative* than the other proposed\n> repr (it includes an easier overview of the different levels, it includes\n> information about the dtypes of the levels, ..).\n>\n> My main issue is that I would just like to have at least *some*\n> discussion on this. We actually never discussed the initial proposal of\n> @topper-123 <https://github.com/topper-123>, and also never really\n> discussed my other idea.\n> *What do we think is the best / most informative repr for the MultiIndex?*\n>\n> And to be a clear: I am not saying that my idea is necessarily better, I\n> mainly want us to have at least a bit of discussion about it, as we should\n> not change a repr lightly (and if we change it now, we should not change it\n> again for some time). I certainly find what is in the PR an clear\n> improvement over master (it is also based on what I initially proposed\n> myself when originally opening this issue).\n>\n> —\n> You are receiving this because you are on a team that was mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/13480#issuecomment-444824490>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIv1AI9IujTnrViHEwcJYNM_37lAoks5u2PE4gaJpZM4I46bJ>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444850859",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-444850859",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 444850859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDg1MDg1OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T12:10:36Z",
    "updated_at": "2018-12-06T12:10:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche I actually like the bottom repr (xarray like), but I agree that is maybe more food for a ``.info()`` method; also it gives the impression to me that MI is *accessed* via columns, rather than a row-accessed based tuple.\r\n\r\nI would go with @topper-123 repr, with 1 change. Let's drop ``dtype``, and replace with ``dtypes=list_of_dtypes 1 for each level``, similar to how names is 1 for each level.\r\n\r\nI also don't mind/care that @topper-123 repr is not actually executable, this principle is *just* true for short Index reprs, and is not true for EA at all. So I don't think this is a consideration."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444861665",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-444861665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 444861665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDg2MTY2NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T12:55:26Z",
    "updated_at": "2018-12-06T12:55:26Z",
    "author_association": "MEMBER",
    "body": "> Does #22511 include a system like DataFrame, where large reprs are automatically truncated?\r\n\r\n@TomAugspurger What do you mean exactly? \r\nIt has two ways of truncation (see also the bullet points in https://github.com/pandas-dev/pandas/issues/13480#issuecomment-415977096): 1) it only shows up to `pd.options.display.max_seq_items` number of items of the index (here the number of tuples), and otherwise the first 10 / last 10, similar to all the other Index reprs (the main difference here is that each tuples is always put on a new line). \r\nAnd 2) it has truncation for the width, showing only those items of a single tuple that fit in `pd.options.display.width` (and this is the one where certain levels might be \"hidden\").\r\n\r\n> IMO, the most important part of a MutlIndex repr is seeing the name and type of each level, and a few values if possible\r\n\r\nThe current repr in https://github.com/pandas-dev/pandas/pull/22511 only shows the names (and the values if fitting in the width of the console)\r\n\r\n> I actually like the bottom repr (xarray like), but I agree that is maybe more food for a .info() method;\r\n\r\nIf we go with #22511, I think adding an `info` method that returns something like that would be a good idea. However, I still like to argue that it might be more informative to simply have this as the default repr, without the need of an additional `info` method.\r\n\r\n> also it gives the impression to me that MI is accessed via columns, rather than a row-accessed based tuple.\r\n\r\nI think if it is combined with some values as tuples, I personally don't think it would be too much of a problem. We could maybe also put the preview of values as tuples on top, and the overview of levels below it.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444863323",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-444863323",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 444863323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDg2MzMyMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T13:02:16Z",
    "updated_at": "2018-12-06T13:02:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @TomAugspurger What do you mean exactly?\r\n\r\nOh, I was thinking in the past, when we had `pd.options.display.large_repr = 'info'`, and we would automatically switch over to the info repr for large dataframes. I'd forgotten we no longer do that now that (by default) now that we truncate.\r\n\r\n> However, I still like to argue that it might be more informative to simply have this as the default repr, without the need of an additional info method.\r\n\r\nI think I agree with this... Personally, when I need to see the values of a MultiIndex I stick it in a Series `pd.Series(1, index=mi)`, and you get the nice sparsified view of the values."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445280501",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-445280501",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 445280501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTI4MDUwMQ==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-07T16:09:49Z",
    "updated_at": "2018-12-07T16:41:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm in agreement with @jreback. I also like having a ``dtypes`` attribute. The repr above would become:\r\n\r\n```\r\nMultiIndex([(  'a',  9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', ...),\r\n            (  'a',  9, '2000-01-01 00:00:01', '2000-01-01 00:00:01', ...),\r\n            (  'a',  9, '2000-01-01 00:00:02', '2000-01-01 00:00:02', ...),\r\n            (  'a',  9, '2000-01-01 00:00:03', '2000-01-01 00:00:03', ...),\r\n            (  'a',  9, '2000-01-01 00:00:04', '2000-01-01 00:00:04', ...),\r\n            (  'a',  9, '2000-01-01 00:00:05', '2000-01-01 00:00:05', ...),\r\n            (  'a',  9, '2000-01-01 00:00:06', '2000-01-01 00:00:06', ...),\r\n            (  'a',  9, '2000-01-01 00:00:07', '2000-01-01 00:00:07', ...),\r\n            (  'a',  9, '2000-01-01 00:00:08', '2000-01-01 00:00:08', ...),\r\n            (  'a',  9, '2000-01-01 00:00:09', '2000-01-01 00:00:09', ...),\r\n            ...\r\n            ('bcd', 10, '2000-01-24 03:33:10', '2000-01-24 03:33:10', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:11', '2000-01-24 03:33:11', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:12', '2000-01-24 03:33:12', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:13', '2000-01-24 03:33:13', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:14', '2000-01-24 03:33:14', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:15', '2000-01-24 03:33:15', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:16', '2000-01-24 03:33:16', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:17', '2000-01-24 03:33:17', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:18', '2000-01-24 03:33:18', ...),\r\n            ('bcd', 10, '2000-01-24 03:33:19', '2000-01-24 03:33:19', ...)],\r\n           dtypes=['category', 'int64', 'datetime64[ns]', 'datetime64[ns]',\r\n                   'datetime64[ns]'],\r\n           names=['a', 'b', 'x', 'x2', 'x3'], length=2000000)\r\n```\r\n\r\nThat would mean adding a ``MultiIndex.dtypes`` property. If there's agreement/acceptance on this, I could look into it.  \r\n\r\nEDIT: other indexes use Index.dtype.name and not just index.dtype in their repr, changed it to be similar."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445286424",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-445286424",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 445286424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTI4NjQyNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-07T16:27:25Z",
    "updated_at": "2018-12-07T16:27:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "maybe could have a way to display the names & dtypes in a nicer way here as well (in a combined way)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445288061",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-445288061",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 445288061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTI4ODA2MQ==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-07T16:32:39Z",
    "updated_at": "2018-12-07T16:32:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, some levels may not have a name. What did you have in mind?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445291248",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-445291248",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 445291248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTI5MTI0OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-07T16:42:36Z",
    "updated_at": "2018-12-07T16:42:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm yeah \r\n\r\nmaybe just zip them? into a tulple list"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445301274",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-445301274",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 445301274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTMwMTI3NA==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-07T17:15:00Z",
    "updated_at": "2018-12-07T17:17:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that would confuse. If we simply use dtypes and names, people can look up individually using MultiIndex.dtypes and MultiIndex.names. I think that would be nice and simple.\r\n\r\nBTW, I did the repr above slightly different, if you didn’t notice."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445563000",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-445563000",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 445563000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTU2MzAwMA==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-09T19:11:39Z",
    "updated_at": "2018-12-09T19:11:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've been thinking a bit more about dtypes in the repr.\r\n\r\nHaving dtypes in the repr would make it not possible to recreate multiindexes from their repr (after implementing #23887 and possibly setting ``options.display.max_seq_items``). So there's a trade-off involved.\r\n\r\nI agree with @jorisvandenbossche that the current proposal is real-looking and therefore should be creatable from the repr, if possible. This is also a good/common convention in Python. \r\n\r\nSo I'm leaning towards not having dtypes in the repr after all would be the best trade-off.\r\n\r\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445579035",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-445579035",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 445579035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTU3OTAzNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-09T22:44:10Z",
    "updated_at": "2018-12-09T22:44:10Z",
    "author_association": "MEMBER",
    "body": "(forgot to post, comment of a day ago; not yet an answer on the last comment of @topper-123 )\r\n\r\n> Let's drop dtype, and replace with dtypes=list_of_dtypes 1 for each level, similar to how names is 1 for each level.\r\n\r\nI have the feeling that adding this additional information for a MultiIndex somewhat bumps into the limits of what the current constructor-like Index repr can handle. Why do we necessarily want to keep to the python-code-like repr if we are adding a lot of \"keywords\" that are not actually keywords? (although the same is already true for \"length\" for normal Index) \r\nGoing away from \"looking like python code\" would give a lot more flexibility to make a clear overview of the level and its dtypes.\r\n\r\n> maybe could have a way to display the names & dtypes in a nicer way here as well (in a combined way)\r\n\r\nWell, that's basically what I tried with my proposal (not saying it was the best attempt, but that was at least the *idea* of it. \r\nSomething like\r\n\r\n```\r\nLevels (3):\r\n    * a: category (2) ['a', 'abc']\r\n    * b: int64 (2) [9, 10]\r\n    * dti_1: datetime64[ns] (2000) ['2000-01-01 00:00:00', ... ] \r\n```\r\n\r\nalthough I don't know how to make it clear that the numbers between brackets are the number of unique values in the level. \r\n\r\nI am not sure you can have such a combination with python-like code. @jreback What would you propose how it looks like? (a dict?)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447308300",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-447308300",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 447308300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzMwODMwMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-14T12:16:49Z",
    "updated_at": "2018-12-14T12:16:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am -1 on the xarray like constructor. I think it’s completely misleading as this is a row oriented object.  I would be +1 on the proposed repr as is (w/o the dtype=‘object’) and +0 on adding a .info()\r\n\r\nI completely discount the point of non-executable nature of this code as this is irrelevant; any index is non repr after truncation; furthermore there is a deliberate efffort to make non repr Arrays as well.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447310609",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-447310609",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 447310609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzMxMDYwOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-14T12:27:17Z",
    "updated_at": "2018-12-14T12:27:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Personally, I don't have a strong preference. I find the \"info\" style one a\nbit more informative at a glance,\nbut if that's available as a .info method then that's fine too.\n\nWe'll need to see what Joris thinks.\n\nAnd just to be clear, thanks for your work on this @topper-123. Either way,\nthis is a big improvement over the current repr.\n\nOn Fri, Dec 14, 2018 at 6:16 AM Jeff Reback <notifications@github.com>\nwrote:\n\n> I am -1 on the xarray like constructor. I think it’s completely misleading\n> as this is a row oriented object. I would be +1 on the proposed repr as is\n> (w/o the dtype=‘object’) and +0 on adding a .info()\n>\n> I completely discount the point of non-executable nature of this code as\n> this is irrelevant; any index is non repr after truncation; furthermore\n> there is a deliberate efffort to make non repr Arrays as well.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/13480#issuecomment-447308300>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIjq0v347ua5LrN-i9v3pGe6cPQzMks5u45a1gaJpZM4I46bJ>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447653652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-447653652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 447653652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY1MzY1Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T15:51:48Z",
    "updated_at": "2018-12-16T15:51:48Z",
    "author_association": "MEMBER",
    "body": "> [@topper-123] I agree with @jorisvandenbossche that the current proposal is real-looking and therefore should be creatable from the repr, if possible. This is also a good/common convention in Python.\r\n\r\nTo be clear: I am not saying that the repr should be executable (as my proposed actually isn't). I am mainly trying to argue that we shouldn't jump through hoops and end up with a less informative repr only to keep it \"python code-like\" (eg adding the multiple dtypes in a keyword), while it is not executable anyway. \r\nSo if we want to add information about dtypes (which I think would be informative), why not step away from the restriction of having it python-code-like?\r\n\r\n> [@jreback] I completely discount the point of non-executable nature of this code as this is irrelevant; any index is non repr after truncation; \r\n\r\nYes, I understand that. But that is not the only argument. The main reason for having the overview of the levels is to be more informative + counteract that the repr in the PR can hide levels.\r\n\r\n> furthermore there is a deliberate efffort to make non repr Arrays as well.\r\n\r\n@jreback What do you mean here?\r\n\r\n> I am -1 on the xarray like constructor. I think it’s completely misleading as this is a row oriented object\r\n\r\nAbove you said \"actually like the bottom repr (xarray like)\", or would you still like it as info object? \r\nTo be clear, I don't propose showing *only* the xarray-like levels overview as in https://github.com/pandas-dev/pandas/issues/13480#issuecomment-445579035. My original proposal was to combine that with the snapshot of values as @topper-123 developed in the PR. As I already said above (https://github.com/pandas-dev/pandas/issues/13480#issuecomment-444861665), my feeling is that by combining those two, it should make it clear that this is also a row oriented object (and in the end, we still store a MultiIndex level by level, so it also *has* a column-oriented aspect).\r\n\r\n> And just to be clear, thanks for your work on this @topper-123. Either way, this is a big improvement over the current repr.\r\n\r\nBig +1 !"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447670847",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-447670847",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 447670847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY3MDg0Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T19:55:09Z",
    "updated_at": "2018-12-16T19:55:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Above you said \"actually like the bottom repr (xarray like)\", or would you still like it as info object?\r\n\r\n``.info()`` could be added but that is not the subject of this issue / PR.\r\n\r\nI have already stated that I am -1 on the xarray like repr as the default as its amazingly confusing for a row-oriented object.\r\n\r\nWe have spent an enormous amount of time on this. @jorisvandenbossche Either propose a new PR, or accept the existing. \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447671478",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-447671478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 447671478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY3MTQ3OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T20:04:18Z",
    "updated_at": "2018-12-16T20:04:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Joris did propose an alternative... Regardless, this seems worth taking the\ntime to get it right.\n\nOn Sun, Dec 16, 2018 at 1:55 PM Jeff Reback <notifications@github.com>\nwrote:\n\n> Above you said \"actually like the bottom repr (xarray like)\", or would you\n> still like it as info object?\n>\n> .info() could be added but that is not the subject of this issue / PR.\n>\n> I have already stated that I am -1 on the xarray like repr as the default\n> as its amazingly confusing for a row-oriented object.\n>\n> We have spent an enormous amount of time on this. @jorisvandenbossche\n> <https://github.com/jorisvandenbossche> Either propose a new PR, or\n> accept the existing.\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/13480#issuecomment-447670847>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIl701dzDRoyeD2gVBZbxhUZrX02Lks5u5qUhgaJpZM4I46bJ>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447675143",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13480#issuecomment-447675143",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13480",
    "id": 447675143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY3NTE0Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T20:56:37Z",
    "updated_at": "2018-12-16T20:56:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Joris did propose an alternative... Regardless, this seems worth taking the\r\ntime to get it right.\r\n\r\nAnd I have numerous times been -1 on that.\r\n"
  }
]
