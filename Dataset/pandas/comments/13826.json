[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235888420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13826#issuecomment-235888420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13826",
    "id": 235888420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTg4ODQyMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-28T13:05:08Z",
    "updated_at": "2016-07-28T13:05:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi,\n\n> but I feel that the current interface is somewhat non-intuitive and limited.\n\nI would love to hear what parts of that API you found non-intuitive / limited.\nI know that the documentation can be improved.\n\nI could be wrong, but one issue with your proposed API is that it doesn't allow for styles that are functions of entire rows / columns.\nThe `draw_element(value, col_name, row_name)` has no access to the column, row, or table that `value` came from. Indeed, my initial implementation was quite similar to what you've proposed, before I switched to the current API, which I think is more flexible.\n\nYour first example is written as\n\n``` python\ndef color_negative_red(val):\n    color = 'red' if val < 0 else 'black'\n    return 'color: %s' % color\n\ndf.style.applymap(color_negative_red)\n```\n\nWhich I think is readable and consistent with the general pandas API.\n\nCould you show an example of the output from your second column. If I understand correctly, it would be a single column? The current API does limit the output of `.style` to be the same shape as the input. Though there's nothing to prevent you from collapsing the data to a single column before calling `.style`.\n\nIn general, I'm looking for use-cases and feedback on what parts are difficult, so please share and let me know if I got anything wrong.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235892431",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13826#issuecomment-235892431",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13826",
    "id": 235892431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTg5MjQzMQ==",
    "user": {
      "login": "nadavbra",
      "id": 14159329,
      "node_id": "MDQ6VXNlcjE0MTU5MzI5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14159329?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nadavbra",
      "html_url": "https://github.com/nadavbra",
      "followers_url": "https://api.github.com/users/nadavbra/followers",
      "following_url": "https://api.github.com/users/nadavbra/following{/other_user}",
      "gists_url": "https://api.github.com/users/nadavbra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nadavbra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nadavbra/subscriptions",
      "organizations_url": "https://api.github.com/users/nadavbra/orgs",
      "repos_url": "https://api.github.com/users/nadavbra/repos",
      "events_url": "https://api.github.com/users/nadavbra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nadavbra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-28T13:21:43Z",
    "updated_at": "2016-07-28T13:21:43Z",
    "author_association": "NONE",
    "body": "I don't think that my second example can be implemented with the current API.\n\nSuppose that you have the following simple 2X2 dataframe:\n**dna_seq length**\nACGTGCA 7\nACC 3\n\nMy code above in intended to produce the following HTML output:\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;dna_seq&lt;/th&gt;\n            &lt;th&gt;length&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span style = \"color: blue;\"&gt;A&lt;/span&gt;&lt;span style = \"color: red;\"&gt;C&lt;/span&gt;&lt;span style = \"color: green;\"&gt;G&lt;/span&gt;&lt;span style = \"color: yellow;\"&gt;T&lt;/span&gt;&lt;span style = \"color: green;\"&gt;G&lt;/span&gt;&lt;span style = \"color: red;\"&gt;C&lt;/span&gt;&lt;span style = \"color: blue;\"&gt;A&lt;/span&gt;&lt;/td&gt;\n            &lt;td&gt;7&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span style = \"color: blue;\"&gt;A&lt;/span&gt;&lt;span style = \"color: red;\"&gt;C&lt;/span&gt;&lt;span style = \"color: red;\"&gt;C&lt;/span&gt;&lt;/td&gt;\n            &lt;td&gt;3&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235899281",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13826#issuecomment-235899281",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13826",
    "id": 235899281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTg5OTI4MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-28T13:47:45Z",
    "updated_at": "2016-07-28T13:47:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the example, here's how I would write that\n\n``` python\ndef formatter(v):\n    cmap = {\"A\": \"blue\", \"C\": \"red\", \"G\": \"green\", \"T\": \"yellow\"}\n    return ''.join(['<span style=\"color: {}\">{}</span>'.format(cmap[s], s)\n                   for s in v])\n\n\ndf.style.format({\"dna_seq\": formatter})\n```\n\n![screen shot 2016-07-28 at 8 44 46 am](https://cloud.githubusercontent.com/assets/1312546/17214643/94c90eda-549f-11e6-964c-0da6a84b7b1c.png)\n\n[gist](https://gist.github.com/8e457dca4f490eee6d973362d52d626c)\n This does stretch the current API a bit, since `.apply` / `.applymap` assumes you're returning CSS, not generating new `div`s / `span`s each with their own style. One thing that might be impossible (at least more difficult) is if the `formatter` function needed to rely on any information not in the actual cell value. The row / column name or position for example.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235899678",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13826#issuecomment-235899678",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13826",
    "id": 235899678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTg5OTY3OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-28T13:49:09Z",
    "updated_at": "2016-07-28T13:49:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "One question on your API. Say I wanted to apply multiple styles to a single cell. If I do `df.style.draw_element = func1`, then `df.style.draw_element = func2`, is the first overridden? It'd be a bit strange to have assignment append rather than overwrite, but how would you layer styles?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235927391",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13826#issuecomment-235927391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13826",
    "id": 235927391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTkyNzM5MQ==",
    "user": {
      "login": "nadavbra",
      "id": 14159329,
      "node_id": "MDQ6VXNlcjE0MTU5MzI5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14159329?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nadavbra",
      "html_url": "https://github.com/nadavbra",
      "followers_url": "https://api.github.com/users/nadavbra/followers",
      "following_url": "https://api.github.com/users/nadavbra/following{/other_user}",
      "gists_url": "https://api.github.com/users/nadavbra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nadavbra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nadavbra/subscriptions",
      "organizations_url": "https://api.github.com/users/nadavbra/orgs",
      "repos_url": "https://api.github.com/users/nadavbra/repos",
      "events_url": "https://api.github.com/users/nadavbra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nadavbra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-28T15:18:27Z",
    "updated_at": "2016-07-28T15:18:27Z",
    "author_association": "NONE",
    "body": "Thank you for the code example you gave. I didn't understand from the documentation that you could use `df.style.format` to inject HTML code. This actually solves the main limitation I thought that existed in the API.\n\nI've just faced another problem though (maybe it should be discussed in another thread): it seems that `df.style.format` works on the entire dataframe, and doesn't support compact display like the automatic behavior when you have large dataframes (i.e. I would expect it to call my custom function only for values it's going to present anyway). \n\nAs for your question, according to the API I suggested, the whole point was to have a single global formatting function, so indeed in your example **func2** would override **func1**. If you want to have both, each for a different column, you could do the following:\n\n``` python\ndef draw_element(value, col_name, row_name):\n    if col_name == 'col1':\n        return func1(value, col_name, row_name)\n    elif col_name == 'col2':\n        return func2(value, col_name, row_name)\n    else:\n        return str(value)\n\ndf.style.draw_element = draw_element\n```\n\nAlternatively, you could expend the API further and supply **df.style** with a dictionary that maps each column to a different style function. Then each column will use its own specific **draw_element** function, or the default **draw_element** function if none is given for it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235929445",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13826#issuecomment-235929445",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13826",
    "id": 235929445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTkyOTQ0NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-28T15:25:05Z",
    "updated_at": "2016-07-28T15:25:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> it seems that df.style.format works on the entire dataframe\n\nTruncation isn't implemented yet, though would be welcome if anyone is interested in implementing it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/321507843",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13826#issuecomment-321507843",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13826",
    "id": 321507843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTUwNzg0Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-10T09:59:50Z",
    "updated_at": "2017-08-10T09:59:50Z",
    "author_association": "MEMBER",
    "body": "@nadavbra @TomAugspurger are still concrete issues open to solve remaining from this discussion?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/321518027",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13826#issuecomment-321518027",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13826",
    "id": 321518027,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTUxODAyNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-10T10:49:28Z",
    "updated_at": "2017-08-10T10:49:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think everything is resolved as there's another issue for truncation. We could document the ability to inject arbitrary HTML in the `.format` method, but I'd rather not, in case we come across a better way of doing it (the current way feels hacky). Any unaddressed issues @nadavbra?"
  }
]
