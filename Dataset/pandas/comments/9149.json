[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68071436",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68071436",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68071436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDcxNDM2",
    "user": {
      "login": "flyingchipmunk",
      "id": 807921,
      "node_id": "MDQ6VXNlcjgwNzkyMQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/807921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flyingchipmunk",
      "html_url": "https://github.com/flyingchipmunk",
      "followers_url": "https://api.github.com/users/flyingchipmunk/followers",
      "following_url": "https://api.github.com/users/flyingchipmunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/flyingchipmunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flyingchipmunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flyingchipmunk/subscriptions",
      "organizations_url": "https://api.github.com/users/flyingchipmunk/orgs",
      "repos_url": "https://api.github.com/users/flyingchipmunk/repos",
      "events_url": "https://api.github.com/users/flyingchipmunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flyingchipmunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T19:44:28Z",
    "updated_at": "2014-12-24T19:45:40Z",
    "author_association": "NONE",
    "body": "Forget to specify, here's the versions in play in my setup:\n\npandas-0.14.1\nnumpy-1.8.2\n\nAlso to note, the structure of my dataframe is that my \"data\" columns are all prefixed with the string \"Column\", that's why i'm doing the x.startswith('Column') above.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68543164",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68543164",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68543164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTQzMTY0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T17:13:29Z",
    "updated_at": "2015-01-02T17:13:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "can you show a complete reproducicle example that I can copy/paste?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68551463",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68551463",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68551463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTUxNDYz",
    "user": {
      "login": "flyingchipmunk",
      "id": 807921,
      "node_id": "MDQ6VXNlcjgwNzkyMQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/807921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flyingchipmunk",
      "html_url": "https://github.com/flyingchipmunk",
      "followers_url": "https://api.github.com/users/flyingchipmunk/followers",
      "following_url": "https://api.github.com/users/flyingchipmunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/flyingchipmunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flyingchipmunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flyingchipmunk/subscriptions",
      "organizations_url": "https://api.github.com/users/flyingchipmunk/orgs",
      "repos_url": "https://api.github.com/users/flyingchipmunk/repos",
      "events_url": "https://api.github.com/users/flyingchipmunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flyingchipmunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T18:55:10Z",
    "updated_at": "2015-01-02T18:55:10Z",
    "author_association": "NONE",
    "body": "I did some more troubleshooting and I found out where the object dtype was being introduced. In my case I'm pd.concat()'ing a bunch of csv files and one of them had 0 data rows, the dataframe was being created with columns of dtype object. Then when concating it upcasts the float64 columns with nan to object. I can do due diligence to prevent this object upcasting.\n\nBut I still believe there is a flaw in how agg() works with and without a dictionary specified for these columns. Here's a sample csv and ipython notebook output showing the problem.\n\nhttps://www.dropbox.com/s/1238l1m3g4zju4s/reproduce.csv?dl=0\nhttps://www.dropbox.com/s/63k0i0yqxqkr4lh/ipython.html?dl=0\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68552687",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68552687",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68552687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTUyNjg3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T19:09:30Z",
    "updated_at": "2015-01-02T19:09:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@flyingchipmunk a small example that we can fully copy/paste is what is useful. Pls try to have as simple an example in order to reproduce.\n\ne.g.\n\n```\n# create the frame with the appropriate dtypes\ndf = DataFrame(....)\n\n# perform the operations\n\n# show what is expected\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68554299",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68554299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68554299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTU0Mjk5",
    "user": {
      "login": "flyingchipmunk",
      "id": 807921,
      "node_id": "MDQ6VXNlcjgwNzkyMQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/807921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flyingchipmunk",
      "html_url": "https://github.com/flyingchipmunk",
      "followers_url": "https://api.github.com/users/flyingchipmunk/followers",
      "following_url": "https://api.github.com/users/flyingchipmunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/flyingchipmunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flyingchipmunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flyingchipmunk/subscriptions",
      "organizations_url": "https://api.github.com/users/flyingchipmunk/orgs",
      "repos_url": "https://api.github.com/users/flyingchipmunk/repos",
      "events_url": "https://api.github.com/users/flyingchipmunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flyingchipmunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T19:28:18Z",
    "updated_at": "2015-01-02T19:28:18Z",
    "author_association": "NONE",
    "body": "Ok here it is simplified:\n\n```\ndf_1 = pd.DataFrame({\"Row\":[0,1,1], \"EmptyCol\":np.nan, \"NumberCol\":[1,2,3]})\ndf_2 = pd.DataFrame(columns = df_1.columns)\ndf_concat = pd.concat([df_1, df_2], axis=0)\ndf_g = df_concat.groupby('Row', as_index=False)\n\ndf_g.agg(sum)\ndf_g.agg(collections.OrderedDict({'EmptyCol':'sum'}))\n```\n\nprofiling the first .agg() call yields this:\n\n```\n1000 loops, best of 3: 888 Âµs per loop\n```\n\nprofiling the second .agg() call yields this:\n\n```\n1000 loops, best of 3: 1.44 ms per loop\n```\n\nI would expect the second .agg() call with the dictionary to be significantly faster than doing a broad sum on the entire dataframe.\n\nHope this helps.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68555171",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68555171",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68555171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTU1MTcx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T19:38:55Z",
    "updated_at": "2015-01-02T19:38:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "You have `object` types on that empty column. Not sure how it got that way, but you always want to have base dtypes for performance. Converting to float makes the perf pretty close.\n\n```\nIn [36]: df_concat.dtypes\nOut[36]: \nEmptyCol      object\nNumberCol    float64\nRow          float64\ndtype: object\n\nIn [37]: df2 = df_concat.copy()\n\nIn [38]: df2['EmptyCol'] = df2['EmptyCol'].astype(float)\n\nIn [39]: df2.dtypes\nOut[39]: \nEmptyCol     float64\nNumberCol    float64\nRow          float64\ndtype: object\n\nIn [40]: %timeit df2.groupby('Row',as_index=False).agg(sum)\n1000 loops, best of 3: 1.14 ms per loop\n\nIn [41]: df_g2 = df2.groupby('Row',as_index=False)\n\nIn [42]: %timeit df_g2.agg(sum)\n1000 loops, best of 3: 643 us per loop\n\nIn [43]: %timeit df_g2.agg(collections.OrderedDict({'EmptyCol':'sum'}))\n1000 loops, best of 3: 726 us per loop\n```\n\nclosing as this is a usage question\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68555935",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68555935",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68555935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTU1OTM1",
    "user": {
      "login": "flyingchipmunk",
      "id": 807921,
      "node_id": "MDQ6VXNlcjgwNzkyMQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/807921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flyingchipmunk",
      "html_url": "https://github.com/flyingchipmunk",
      "followers_url": "https://api.github.com/users/flyingchipmunk/followers",
      "following_url": "https://api.github.com/users/flyingchipmunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/flyingchipmunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flyingchipmunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flyingchipmunk/subscriptions",
      "organizations_url": "https://api.github.com/users/flyingchipmunk/orgs",
      "repos_url": "https://api.github.com/users/flyingchipmunk/repos",
      "events_url": "https://api.github.com/users/flyingchipmunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flyingchipmunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T19:47:19Z",
    "updated_at": "2015-01-02T19:47:19Z",
    "author_association": "NONE",
    "body": "Yes I understand that, and I explained how/why the object dtype got introduced in my previous comments.\n\nMy issue here is how under the hood pandas is treating .agg(sum) over that entire dataframe differently (correctly) than .agg(collections.OrderedDict({'EmptyCol':'sum'}))\n\nIf the .agg(sum) can correctly use numpy cython np.sum for executing the aggregation than why can the dictionary not? I still believe this is a flaw.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68557071",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68557071",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68557071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTU3MDcx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T19:59:59Z",
    "updated_at": "2015-01-02T19:59:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@flyingchipmunk its not clear why your original data ended up as `object` dtype.\n\nIts also not performant to test whether an `object` column can be converted in an operation.\n\nYou can use `df.convert_objects()` to try to do this if you wish. \n\n```\nIn [52]: df_concat.dtypes\nOut[52]: \nEmptyCol      object\nNumberCol    float64\nRow          float64\ndtype: object\n\nIn [53]: df_concat.convert_objects()\nOut[53]: \n   EmptyCol  NumberCol  Row\n0       NaN          1    0\n1       NaN          2    1\n2       NaN          3    1\n\nIn [54]: df_concat.convert_objects().dtypes\nOut[54]: \nEmptyCol     float64\nNumberCol    float64\nRow          float64\ndtype: object\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68557944",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68557944",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68557944,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTU3OTQ0",
    "user": {
      "login": "flyingchipmunk",
      "id": 807921,
      "node_id": "MDQ6VXNlcjgwNzkyMQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/807921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flyingchipmunk",
      "html_url": "https://github.com/flyingchipmunk",
      "followers_url": "https://api.github.com/users/flyingchipmunk/followers",
      "following_url": "https://api.github.com/users/flyingchipmunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/flyingchipmunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flyingchipmunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flyingchipmunk/subscriptions",
      "organizations_url": "https://api.github.com/users/flyingchipmunk/orgs",
      "repos_url": "https://api.github.com/users/flyingchipmunk/repos",
      "events_url": "https://api.github.com/users/flyingchipmunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flyingchipmunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T20:11:02Z",
    "updated_at": "2015-01-02T20:12:22Z",
    "author_association": "NONE",
    "body": "Thanks for the convert_objects() tip, that's very useful and will make my workaround code much simpler.\n\nThe `object` dtype columns is what pandas assigned as the dtype when it created an empty dataframe. In my specific case it was a source csv with only a header row and no data rows. The simplest way I could reproduce that was by `DataFrame(columns=df1.columns)`\n\nThen when that empty dataframe is concated pandas has to go with highest common denominator to hold the dtype of the columns from the different dataframes being concated. `df_1.EmptyCol` is dtype `float64` because it is filled with np.nan. `df_2.EmptyCol` is dtype `object`. Thus when calling `df_concat = pd.concat([df_1, df_2], axis=0)` the resultant dtype for `df_concat.EmptyCol` has to be `object`.\n\nIn my mind it comes down to the question of how does pandas make the determination that the `df_concat.EmptyCol` in the code branch for  `.agg(sum)` can be accomplished with `np.sum`, but that same column when specified in `.agg(collections.OrderedDict({'EmptyCol':'sum'}))` can not be accomplished with `np.sum`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68558472",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68558472",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68558472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTU4NDcy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T20:17:39Z",
    "updated_at": "2015-01-02T20:17:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, on 2nd thought this might be a bug in the concat itself. It shouldn't downcast in this cast since its concatting with an empty. Might be an edge case.\n\nWelcome a PR to look at that.\n\nAs far as how aggregation works. The cython routine tries with the entire frame first to see if it reduce. In this case it works because numpy does the coercion. The 2nd part might be a bug. If you could walk the code would be helpful.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68559547",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9149#issuecomment-68559547",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9149",
    "id": 68559547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTU5NTQ3",
    "user": {
      "login": "flyingchipmunk",
      "id": 807921,
      "node_id": "MDQ6VXNlcjgwNzkyMQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/807921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flyingchipmunk",
      "html_url": "https://github.com/flyingchipmunk",
      "followers_url": "https://api.github.com/users/flyingchipmunk/followers",
      "following_url": "https://api.github.com/users/flyingchipmunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/flyingchipmunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flyingchipmunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flyingchipmunk/subscriptions",
      "organizations_url": "https://api.github.com/users/flyingchipmunk/orgs",
      "repos_url": "https://api.github.com/users/flyingchipmunk/repos",
      "events_url": "https://api.github.com/users/flyingchipmunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flyingchipmunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-02T20:30:20Z",
    "updated_at": "2015-01-02T20:30:20Z",
    "author_association": "NONE",
    "body": "Ok, thanks for the explanation. I'll dig further into walking the code, see if I can nail it down.\n"
  }
]
