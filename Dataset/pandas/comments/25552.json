[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/469815512",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25552#issuecomment-469815512",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25552",
    "id": 469815512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTgxNTUxMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T19:01:28Z",
    "updated_at": "2019-03-05T19:01:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are you familiar with `numpy.where`?\r\n\r\nWe won't be changing this, but I'd be happy to see proposed improvements to the documentation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/469826460",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25552#issuecomment-469826460",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25552",
    "id": 469826460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTgyNjQ2MA==",
    "user": {
      "login": "scwilkinson",
      "id": 1811791,
      "node_id": "MDQ6VXNlcjE4MTE3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1811791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scwilkinson",
      "html_url": "https://github.com/scwilkinson",
      "followers_url": "https://api.github.com/users/scwilkinson/followers",
      "following_url": "https://api.github.com/users/scwilkinson/following{/other_user}",
      "gists_url": "https://api.github.com/users/scwilkinson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scwilkinson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scwilkinson/subscriptions",
      "organizations_url": "https://api.github.com/users/scwilkinson/orgs",
      "repos_url": "https://api.github.com/users/scwilkinson/repos",
      "events_url": "https://api.github.com/users/scwilkinson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scwilkinson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T19:32:36Z",
    "updated_at": "2019-03-05T20:52:38Z",
    "author_association": "NONE",
    "body": "I am, and I would argue that the desire to match the behavior of `numpy.where()` exactly results in a great degree of confusion.\r\n\r\nThe way it's constructed in numpy is to be used explicitly,\r\n\r\n`numpy.where(cond, x, y)`\r\n\r\nWhich logically reads as,\r\n\r\n```python\r\nif cond is True:\r\n    return x\r\nelse:\r\n    return y\r\n```\r\n\r\nI would argue that the pandas implementation is more implicit,\r\n\r\n`DataFrame.where(cond, other)`\r\n\r\nI think this logically reads as,\r\n\r\n```python\r\nif cond is True\r\n    return other\r\nelse:\r\n    return <DataFrame value>\r\n```\r\n\r\nI think the logical way to read arguments is,\r\n\r\n```\r\nfunction(cond, <True value>, <False value>)\r\n```\r\n\r\nAnd this is what numpy implements.\r\n\r\nThe pandas implementation forces you to read this as,\r\n\r\n```\r\nfunction(cond, <False value>)\r\n```\r\n\r\nI think that the result is that `DataFrame.where(cond, other)` as currently implemented is very difficult to read. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/469850443",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25552#issuecomment-469850443",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25552",
    "id": 469850443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg1MDQ0Mw==",
    "user": {
      "login": "scwilkinson",
      "id": 1811791,
      "node_id": "MDQ6VXNlcjE4MTE3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1811791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scwilkinson",
      "html_url": "https://github.com/scwilkinson",
      "followers_url": "https://api.github.com/users/scwilkinson/followers",
      "following_url": "https://api.github.com/users/scwilkinson/following{/other_user}",
      "gists_url": "https://api.github.com/users/scwilkinson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scwilkinson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scwilkinson/subscriptions",
      "organizations_url": "https://api.github.com/users/scwilkinson/orgs",
      "repos_url": "https://api.github.com/users/scwilkinson/repos",
      "events_url": "https://api.github.com/users/scwilkinson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scwilkinson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T20:45:49Z",
    "updated_at": "2019-03-05T20:45:49Z",
    "author_association": "NONE",
    "body": "@TomAugspurger What about a new method, perhaps `where_true`, with the behavior that I've described?\r\n\r\n```\r\n>>> s = pd.Series(range(5))\r\n>>> s.where_true(s > 1)\r\n0    0\r\n1    1\r\n2    NaN\r\n3    NaN\r\n4    NaN\r\ndtype: int64\r\n>>> s.where_true(s > 1, 10)\r\n0    0\r\n1    1\r\n2    10\r\n3    10\r\n4    10\r\ndtype: int64\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/469856376",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25552#issuecomment-469856376",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25552",
    "id": 469856376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg1NjM3Ng==",
    "user": {
      "login": "Liam3851",
      "id": 546210,
      "node_id": "MDQ6VXNlcjU0NjIxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/546210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Liam3851",
      "html_url": "https://github.com/Liam3851",
      "followers_url": "https://api.github.com/users/Liam3851/followers",
      "following_url": "https://api.github.com/users/Liam3851/following{/other_user}",
      "gists_url": "https://api.github.com/users/Liam3851/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Liam3851/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Liam3851/subscriptions",
      "organizations_url": "https://api.github.com/users/Liam3851/orgs",
      "repos_url": "https://api.github.com/users/Liam3851/repos",
      "events_url": "https://api.github.com/users/Liam3851/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Liam3851/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T21:04:10Z",
    "updated_at": "2019-03-05T21:04:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@scwilkinson There's already ```DataFrame.mask``` that does what you suggest, so I don't think we really need another alias in the library? You could perhaps monkey patch\r\n```\r\npd.Series.where_true = pd.Series.mask\r\n```\r\nif you find the name confusing. \r\n\r\nPersonally, I usually think of ```DataFrame.where``` like the python ternary operator, if that mnemonic helps. The ternary operator has form:\r\n```\r\ntrue_value if cond else false_value\r\n```\r\n\r\nwhich well matches\r\n```\r\ndf.where(cond, false_value)\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/469862589",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25552#issuecomment-469862589",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25552",
    "id": 469862589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg2MjU4OQ==",
    "user": {
      "login": "scwilkinson",
      "id": 1811791,
      "node_id": "MDQ6VXNlcjE4MTE3OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1811791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scwilkinson",
      "html_url": "https://github.com/scwilkinson",
      "followers_url": "https://api.github.com/users/scwilkinson/followers",
      "following_url": "https://api.github.com/users/scwilkinson/following{/other_user}",
      "gists_url": "https://api.github.com/users/scwilkinson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scwilkinson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scwilkinson/subscriptions",
      "organizations_url": "https://api.github.com/users/scwilkinson/orgs",
      "repos_url": "https://api.github.com/users/scwilkinson/repos",
      "events_url": "https://api.github.com/users/scwilkinson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scwilkinson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T21:23:08Z",
    "updated_at": "2019-03-05T21:23:08Z",
    "author_association": "NONE",
    "body": "@Liam3851 I embarrassingly didn't know that's what `mask` did. I always assumed it had something to do with masked arrays in numpy for some reason, and never had a need for it in pandas so never read the docs!\r\n\r\nThat mnemonic is actually really helpful, thank you for sharing! I'm just going to use `mask` from now on since it behaves how I expect `where` to and matches more closely the way I think about filtering data.\r\n\r\nI do wonder if the existence of both `mask` and `where` is redundant. I still think that `where` is confusing to read. I've asked several colleagues how they expect it to behave, and none were able to guess correctly."
  }
]
