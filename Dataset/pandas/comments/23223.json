[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431034694",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-431034694",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 431034694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTAzNDY5NA==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T14:38:55Z",
    "updated_at": "2018-10-19T13:41:08Z",
    "author_association": "NONE",
    "body": "Hello @jorisvandenbossche! Thanks for updating the PR.\n\n - There are no PEP8 issues in the file [`pandas/core/dtypes/generic.py`](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/core/dtypes/generic.py) !\n\n - There are no PEP8 issues in the file [`pandas/core/indexes/base.py`](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/core/indexes/base.py) !\n\n - There are no PEP8 issues in the file [`pandas/core/indexes/extension.py`](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/core/indexes/extension.py) !\n\n - There are no PEP8 issues in the file [`pandas/tests/extension/base/__init__.py`](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/tests/extension/base/__init__.py) !\n\n - In the file [`pandas/tests/extension/base/index.py`](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/tests/extension/base/index.py), following                are the PEP8 issues :\n> [Line 64:27](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/tests/extension/base/index.py#L64): [E261](https://duckduckgo.com/?q=pep8%20E261) at least two spaces before inline comment\n> [Line 64:28](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/tests/extension/base/index.py#L64): [E262](https://duckduckgo.com/?q=pep8%20E262) inline comment should start with '# '\n\n\n - There are no PEP8 issues in the file [`pandas/tests/extension/decimal/test_decimal.py`](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/tests/extension/decimal/test_decimal.py) !\n\n - There are no PEP8 issues in the file [`pandas/tests/extension/test_integer.py`](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/tests/extension/test_integer.py) !\n\n - There are no PEP8 issues in the file [`pandas/tests/indexes/test_extension.py`](https://github.com/jorisvandenbossche/pandas/blob/00d4a167d8738532348ee06e8b763ddcc58b0f66/pandas/tests/indexes/test_extension.py) !\n\n\n\n##### Comment last updated on October 19, 2018 at 13:41 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431343371",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-431343371",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 431343371,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTM0MzM3MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T12:16:19Z",
    "updated_at": "2018-10-19T12:16:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting, this is less work than I expected. If I were to do `df.groupby('extension_array').sum()`, would we get back an extension index? Or do we need to update the `Index.__new__` to make an `ExtensionIndex` in that case?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431345930",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-431345930",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 431345930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTM0NTkzMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T12:26:35Z",
    "updated_at": "2018-10-19T12:26:35Z",
    "author_association": "MEMBER",
    "body": "> Interesting, this is less work than I expected.\r\n\r\nThat might also be because I didn't yet test that much :)\r\n\r\n> If I were to do df.groupby('extension_array').sum(), would we get back an extension index?\r\n\r\nIndeed:\r\n\r\n```\r\nIn [1]: df = pd.DataFrame({'key': pd.core.arrays.integer_array([1, 2, 1, 3, 2]), 'val': range(5)})\r\n\r\nIn [2]: df.groupby('key').mean()\r\nOut[2]: \r\n     val\r\nkey     \r\n1    1.0\r\n2    2.5\r\n3    3.0\r\n\r\nIn [3]: df.groupby('key').mean().index\r\nOut[3]: ExtensionIndex([1, 2, 3], dtype='Int64', name='key')\r\n```\r\n\r\nThat's the small change in `Index.__new__` to construct an ExtensionIndex, if an ExtensionArray is passed (that is not a built-in one). \r\nSo it at least already preserves the array dtype in such cases."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431346380",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-431346380",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 431346380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTM0NjM4MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T12:28:25Z",
    "updated_at": "2018-10-19T12:28:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, I completely overlooked that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436984665",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-436984665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 436984665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjk4NDY2NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T12:55:57Z",
    "updated_at": "2018-11-08T12:55:57Z",
    "author_association": "MEMBER",
    "body": "Putting here a comment I already wrote a time ago, but the actual discussion can maybe go in https://github.com/pandas-dev/pandas/issues/23565\r\n\r\nThe main question here is: **which values to use for indexing?**\r\n\r\nCurrently, in this PR I tried to create the correct indexing Engine based on the values of `EA._values_for_factorize`, because that seemed a natural fit (for indexing, they need to be hashable like for factorize). \r\n\r\nHowever, in many cases, we are using `_ndarray_values` internally. And eg for IntegerArray, those two are actually different: `_values_for_factorize` is an object array (to have the NaNs), but `_ndarray_values` is the integers. This raises errors in the engine not expecting an integer array. Of course, we might need to change `_ndarray_values` for `IntegerArray` to also return object, but that also means that indexing would be quite expensive in general (using the object dtype path)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437009758",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-437009758",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 437009758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzAwOTc1OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T14:21:48Z",
    "updated_at": "2018-11-08T14:21:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just thinking out loud here: For IntegerArray, one could in principle write an engine that uses `_ndarray_values`, correct? You would need to take care to mask the \"missing values\" (1s) in every operation, but it should be doable.\r\n\r\nRegardless, I'm ok with a default \"ExtensionIndex\" (an Index with the extension `dtype` preserved) for now, with the possibility of more customizable extension index classes later."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437013800",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-437013800",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 437013800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzAxMzgwMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T14:33:57Z",
    "updated_at": "2018-11-08T14:33:57Z",
    "author_association": "MEMBER",
    "body": "> Just thinking out loud here: For IntegerArray, one could in principle write an engine that uses _ndarray_values, correct? You would need to take care to mask the \"missing values\" (1s) in every operation, but it should be doable.\r\n\r\nBut that would mean writing a custom engine?\r\n\r\nAnyway (also future wise), an engine that works with values/mask combination might be useful in general. \r\nBut that is not for this PR :-) \r\n\r\nI suppose short term the easiest is to use the object dtype values for IntegerArray for all indexing related things."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437022641",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-437022641",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 437022641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzAyMjY0MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T14:54:09Z",
    "updated_at": "2018-11-08T14:54:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> But that would mean writing a custom engine?\r\n\r\nRight, it would push more work onto the EA author (which is us for IntegerArray). Pandas would provide the hooks somewhere in `pd.Index.__new__`\r\n\r\n```python\r\nengine = getattr(ExtensionArray, '_index_engine', default_engine)\r\n```\r\n\r\n> I suppose short term the easiest is to use the object dtype values for IntegerArray for all indexing related things.\r\n\r\n\r\nAgreed. Ensuring that `Index.dtype` is `Int64Dtype`, and not object, seems the most important thing. Then we can give speed improvements without breaking API.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/453879080",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23223#issuecomment-453879080",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23223",
    "id": 453879080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzg3OTA4MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-14T00:18:02Z",
    "updated_at": "2019-01-14T00:18:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "nice idea for 0.25 :>"
  }
]
