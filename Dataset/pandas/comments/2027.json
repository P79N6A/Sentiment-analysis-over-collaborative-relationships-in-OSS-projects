[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9185322",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2027#issuecomment-9185322",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2027",
    "id": 9185322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxODUzMjI=",
    "user": {
      "login": "changhiskhan",
      "id": 759245,
      "node_id": "MDQ6VXNlcjc1OTI0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/759245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/changhiskhan",
      "html_url": "https://github.com/changhiskhan",
      "followers_url": "https://api.github.com/users/changhiskhan/followers",
      "following_url": "https://api.github.com/users/changhiskhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/changhiskhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/changhiskhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/changhiskhan/subscriptions",
      "organizations_url": "https://api.github.com/users/changhiskhan/orgs",
      "repos_url": "https://api.github.com/users/changhiskhan/repos",
      "events_url": "https://api.github.com/users/changhiskhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/changhiskhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-05T18:34:15Z",
    "updated_at": "2012-10-05T18:34:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Makes sense. \nRight now method='pad' by default so df.fillna() is forward-filled. I guess we can make it so if both are None then set method='pad' so the default behavior doesn't change.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9200170",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2027#issuecomment-9200170",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2027",
    "id": 9200170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMDAxNzA=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-06T17:18:24Z",
    "updated_at": "2012-10-06T17:18:24Z",
    "author_association": "MEMBER",
    "body": "Aside: in retrospect `method='pad'` by default feels like a mistake\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9203456",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2027#issuecomment-9203456",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2027",
    "id": 9203456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMDM0NTY=",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-06T23:21:46Z",
    "updated_at": "2012-10-07T00:42:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "just throwing this out there:\n\nif the call signature is changed to something like this:\n\n```\ndef fillna(self, value=None, method=None, inplace=False, limit=None):\n        if value is not None and method is None:\n                  ### use existing code - e.g. putmask method as before\n                  return result\n\n        # explicitiy allow None in the result\n        elif value is None and method == 'value':\n                  result = result.astype(np.object)\n                  ### putmask as above\n                  return result\n\n        # a slightly non-intuitive exception that basically says you passed conflicting arguements\n        elif value is not None and method is not None:\n             raise TypeError(\"cannot specifiy a fill value for fillna with a method of %s\" % method)\n\n        # set as before\n\n```\n\nthis allows:\n1. fillna(0)\n2. fillna(0,method='value')\n3. fillna(None,method='value') # not currently supported\n4. fillna(method='value')           # not currently supported\n5. fillna()                                   # will raise (currently will silently act like method='pad', but in new will raise)\n6. fillna(0,method='pad')           # will raise (currently passes thru and ignores the method)\n7. fillna(method='pad')              # ok as before\n\nso essentially you will remove the possibility of case 5, disallow 6 and allow a None to be provided as a fill value  \nI know this will change say a float dtype to an object dtype (with a None fill value),\n but ironically because of this I ended up writing my own\ncython routines to take a float frame and set values in objects (I use None in these objects but I had to\ntest everything for nan as I was pulling them out via iteritems)....e.g.\n\n```\nfor k, v in s.iteritems():\n    setattr(object,k,None if np.isnan(v) else v)\n```\n\nnot sure how common this use case actually is though -\n"
  }
]
