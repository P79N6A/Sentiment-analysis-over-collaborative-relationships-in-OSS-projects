[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/225172134",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13416#issuecomment-225172134",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13416",
    "id": 225172134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE3MjEzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-10T12:44:32Z",
    "updated_at": "2016-06-10T12:44:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, yeah this look suspect. although `.sum()` _can_ be an aggregator (for string columns), and so maybe we should leave it, this should be predictable, so I would make all of these be the same (e.g. raise). \n\nNote I am only referring to the inbuilt methods `.sum()/.mean()` directly on a grouper, you can always do `.apply(lambda x: x.sum())` if you want to operate on a string column.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/225172163",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13416#issuecomment-225172163",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13416",
    "id": 225172163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE3MjE2Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-10T12:44:40Z",
    "updated_at": "2016-06-10T12:44:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sinhrks @jorisvandenbossche \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/225468322",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13416#issuecomment-225468322",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13416",
    "id": 225468322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTQ2ODMyMg==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-13T00:06:33Z",
    "updated_at": "2016-06-13T00:06:33Z",
    "author_association": "MEMBER",
    "body": "Normal aggregation also has inconsistencies. It excludes categorical if it has timestamp column, includes otherwise.\n\n```\ndf.sum()\n# A      7\n# B     14\n# E    100\n# dtype: int64\n\n# exclude timestamp col\ndf[['A', 'B', 'C1', 'C2', 'E']].sum()\n# A        7\n# B       14\n# C1      23\n# C2    aaab\n# E      100\n# dtype: object\n```\n\nMaybe it should be excluded by default even if categorical internal is numeric, and included if `numeric_only=True`? Thus, groupby agg also should have `numeric_only` kwd.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/225474016",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13416#issuecomment-225474016",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13416",
    "id": 225474016,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTQ3NDAxNg==",
    "user": {
      "login": "pijucha",
      "id": 9507544,
      "node_id": "MDQ6VXNlcjk1MDc1NDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9507544?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pijucha",
      "html_url": "https://github.com/pijucha",
      "followers_url": "https://api.github.com/users/pijucha/followers",
      "following_url": "https://api.github.com/users/pijucha/following{/other_user}",
      "gists_url": "https://api.github.com/users/pijucha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pijucha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pijucha/subscriptions",
      "organizations_url": "https://api.github.com/users/pijucha/orgs",
      "repos_url": "https://api.github.com/users/pijucha/repos",
      "events_url": "https://api.github.com/users/pijucha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pijucha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-13T01:44:59Z",
    "updated_at": "2016-06-13T01:44:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "As for normal aggregation, there's also this:\n\n``` python\ndf[['C1']].sum()\nOut[10]: \nC1    23\ndtype: int64\n\ndf['C1'].sum()\n...\nTypeError: Categorical cannot perform the operation sum\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305097242",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13416#issuecomment-305097242",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13416",
    "id": 305097242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTA5NzI0Mg==",
    "user": {
      "login": "saddy001",
      "id": 13658554,
      "node_id": "MDQ6VXNlcjEzNjU4NTU0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13658554?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saddy001",
      "html_url": "https://github.com/saddy001",
      "followers_url": "https://api.github.com/users/saddy001/followers",
      "following_url": "https://api.github.com/users/saddy001/following{/other_user}",
      "gists_url": "https://api.github.com/users/saddy001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saddy001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saddy001/subscriptions",
      "organizations_url": "https://api.github.com/users/saddy001/orgs",
      "repos_url": "https://api.github.com/users/saddy001/repos",
      "events_url": "https://api.github.com/users/saddy001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saddy001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T06:32:31Z",
    "updated_at": "2017-05-31T06:34:30Z",
    "author_association": "NONE",
    "body": "Please also consider the following case:\r\nI have a DataFrame of class \"**A**\" instances (object type). Instances of **A** behave much like floats (addition, division, etc. possible), but they don't implement \\_\\_float\\_\\_, because I want to evaluate them lazily (very expensive calculation). For this, I call **A**().GetValue() which evaluates the calculation function.\r\nSo I rely on pandas to not enforce converting the **A**()s to floats. This is working fine for DataFrame.sum(), min() and max(), but not for mean():\r\n\r\nIf I call DataFrame.mean(axis=1), all values are NaN and the dtype becomes float64, because _ensure_numeric is called that raises \"TypeError: Could not convert **A**(..) to numeric\"."
  }
]
