[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20786534",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4197#issuecomment-20786534",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4197",
    "id": 20786534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzg2NTM0",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-11T02:29:52Z",
    "updated_at": "2013-07-11T02:30:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Passing `label=right` will take care of gettings the timestamps: sums aligned correctly.  That might be a bit cleaner than passing the `loffset`.\n\nIt does seem like having a parameter to only include full ranges when upsampling.  Anyone se a reason not to?\n\nAn easy, but very wasteful way to check is by resampling by count and checking if it's equal to 5.\n\n``` python\nIn [45]: cts = ts.resample('5min', label='right', how='count')\n\nIn [46]: cts\nOut[46]: \n2000-01-01 00:05:00    5\n2000-01-01 00:10:00    5\n2000-01-01 00:15:00    2\ndtype: int64\n\nIn [48]: full = cts[cts == 5].index\n\nIn [49]: full\nOut[49]: \n<class 'pandas.tseries.index.DatetimeIndex'>\n[2000-01-01 00:05:00, 2000-01-01 00:10:00]\nLength: 2, Freq: None, Timezone: None\n\nIn [53]: ts.resample('5min', label='right', how='sum').ix[full]\nOut[53]: \n2000-01-01 00:05:00    10\n2000-01-01 00:10:00    35\ndtype: int64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20788048",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4197#issuecomment-20788048",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4197",
    "id": 20788048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzg4MDQ4",
    "user": {
      "login": "nehalecky",
      "id": 1455590,
      "node_id": "MDQ6VXNlcjE0NTU1OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1455590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nehalecky",
      "html_url": "https://github.com/nehalecky",
      "followers_url": "https://api.github.com/users/nehalecky/followers",
      "following_url": "https://api.github.com/users/nehalecky/following{/other_user}",
      "gists_url": "https://api.github.com/users/nehalecky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nehalecky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nehalecky/subscriptions",
      "organizations_url": "https://api.github.com/users/nehalecky/orgs",
      "repos_url": "https://api.github.com/users/nehalecky/repos",
      "events_url": "https://api.github.com/users/nehalecky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nehalecky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-11T03:34:12Z",
    "updated_at": "2013-07-11T16:00:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @TomAugspurger, thanks for the feedback. \n\nI've been digging a little bit more into this and it seems that the logic applied with resample of a `DatetimeIndex` is based in how the frequency of resample is anchored to the time range. I'll try and explain:\n\nAgain, we can create a time series, however, now with a starting time at `00:09:00`:\n\n``` python\nIn [5]: rng = pd.date_range('1/1/2000 00:09:00', periods=12, freq='T')\nIn [6]: ts = pd.Series(np.arange(12), index=rng)\nIn [7]: ts\nOut[7]: \n2000-01-01 00:09:00     0\n2000-01-01 00:10:00     1\n2000-01-01 00:11:00     2\n2000-01-01 00:12:00     3\n2000-01-01 00:13:00     4\n2000-01-01 00:14:00     5\n2000-01-01 00:15:00     6\n2000-01-01 00:16:00     7\n2000-01-01 00:17:00     8\n2000-01-01 00:18:00     9\n2000-01-01 00:19:00    10\n2000-01-01 00:20:00    11\nFreq: T, dtype: int64\n```\n\nResampling in a frequency that, in reference to the initial timestamp, can equally divide the time period from the start of the hour (i.e., `00:00:00`), works well:\n\n``` python\nIn [9]: ts.resample('3T')\nOut[9]: \n2000-01-01 00:09:00     1\n2000-01-01 00:12:00     4\n2000-01-01 00:15:00     7\n2000-01-01 00:18:00    10\nFreq: 3T, dtype: int64\n```\n\nAnd note that, this is equal to the resample with `count=left`:\n\n``` python\nIn [10]: ts.resample('3T', closed='left')\nOut[10]: \n2000-01-01 00:09:00     1\n2000-01-01 00:12:00     4\n2000-01-01 00:15:00     7\n2000-01-01 00:18:00    10\nFreq: 3T, dtype: int64\n```\n\nHowever, when one applies a frequency that doesn't equally divide the time range, the anchored reference to the start of the hour resolves to an initial _and_ ending timestamp that did not exist in the initial DataFrame:\n\n``` python\nIn [12]: ts.resample('4T')\nOut[12]: \n2000-01-01 00:08:00     1.0\n2000-01-01 00:12:00     4.5\n2000-01-01 00:16:00     8.5\n2000-01-01 00:20:00    11.0\nFreq: 4T, dtype: float64\n```\n\nEven passing a `closed='left'` does not resolve this:\n\n``` python\nIn [13]: ts.resample('4T', closed='left')\nOut[13]: \n2000-01-01 00:08:00     1.0\n2000-01-01 00:12:00     4.5\n2000-01-01 00:16:00     8.5\n2000-01-01 00:20:00    11.0\nFreq: 4T, dtype: float64\n```\n\nYour suggestion of passing a `label='right'` results in shift that includes an _additional_ timestamp that did not exist in the initial DataFrame (demonstrating that the binning logic is over-reaching with certain parameter combinations?):\n\n``` python\nIn [15]: ts.resample('4T', label='right')\nOut[15]: \n2000-01-01 00:12:00     1.0\n2000-01-01 00:16:00     4.5\n2000-01-01 00:20:00     8.5\n2000-01-01 00:24:00    11.0\nFreq: 4T, dtype: float64\n```\n\nMy personal opinion is that, when downsampling, timestamps should **NOT** be inferred that lie outside of the initial time range resampled (thus ensuring that we aren't creating data that does not exist), regardless of what slice is passed to `resample()`. Perhaps I am completely missing how this is managed in pandas. If so, I would love to know what I do not know. \n\nAgain, thank you all for all of your great work! Really appreciated! :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20789400",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4197#issuecomment-20789400",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4197",
    "id": 20789400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzg5NDAw",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-11T04:12:59Z",
    "updated_at": "2013-07-11T04:13:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you're interested in looking at the code, most of the logic is in `/pandas/tseries/resample.py`.  I've got to look a bit closer before I can say anything with confidence, but here are a couple thoughts.\n\nYou're bringing up a good point about creating timestamps new maybe being a bad idea when downsampling.  This may be up to the user though.  They can control where the timestamps start by using `base`:\n\n``` python\nIn [140]: ts.resample('4T', base=1)\nOut[140]: \n2000-01-01 00:09:00    1.5\n2000-01-01 00:13:00    5.5\n2000-01-01 00:17:00    9.5\nFreq: 4T, dtype: float64\n```\n\nDoes that look right to you?\n\nWe could make this more convenient by allowing `base` to optionally take \"start\" or \"end\".  If it's \"start\" is passed then we can infer that the correct base should be `ts.index[0].minute % 4 = 1`.\n"
  }
]
