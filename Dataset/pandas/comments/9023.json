[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65910056",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-65910056",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 65910056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTEwMDU2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-06T19:17:24Z",
    "updated_at": "2014-12-06T19:17:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't like this conversions to sets. why not just use a list and make a scalar into a single-element list. thus guaranteeing you can always iterate over the levels?\n\n(its kind of what you are doing with a set), but we use lists for this purpose.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65910703",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-65910703",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 65910703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTEwNzAz",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-06T19:37:14Z",
    "updated_at": "2014-12-06T19:37:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I didn't want to break backwards compatibility with the existing treatment of lists, e.g. the fact that `df.stack(level=[0,1])` is equivalent to `df.stack(level=0).stack(level=0)`, and is different from `df.stack(level=[1,0])` (which is equivalent to `df.stack(level=1).stack(level=0)`). Note that the order of the levels in the list matters.\n\nThe behavior I implemented for `df.stack(level={0, 1})` is different from `df.stack(level=[0, 1])`, in that I want to stack the two levels simultaneously, without introducing extra rows corresponding to unused combinations of `level=0` and `level=1` values. (Note that the `dropna` parameter isn't really sufficient to get at the desired behavior, since it doesn't make a distinction between values that were missing in the original DataFrame and values that are missing because the index value didn't exist in the original DataFrame.) Since here I want to stack the levels simultaneously, their order doesn't matter, which seems like the natural semantics of a set.\n\nWith this PR, one can do `df.stack(level=[0, {1, 5}, 3])` to say first stack level 0, then stack levels 1 and 5 simultaneously, and then stack level 3. That's probably excessive, but I figured once I allowed for a distinction between `level=[0, 1]` and `level={0, 1}`, might as well go all out and allow a list of levels and/or sets of levels.\n\nAn alternative implementation, which would be more restrictive, would be be to stick with lists, but add a boolean `simultaneous` flag (which would default to `False` for backwards compatibility) indicating that all the levels in the list should be stacked simultaneously. But it's not as flexible.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65912170",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-65912170",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 65912170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTEyMTcw",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-06T20:19:44Z",
    "updated_at": "2014-12-06T20:19:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Argh, Python 2.6 doesn't support set comprehension.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65928148",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-65928148",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 65928148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTI4MTQ4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-07T06:22:13Z",
    "updated_at": "2014-12-07T06:22:13Z",
    "author_association": "MEMBER",
    "body": "Arguments whose meaning changes depending on their type seems very un-pythonic to me, so I am -1 on the set/list distinction.\n\nUsing a list of sets to control simultaneous stacking of levels is cute but complex, and I'm struggling to think of when this would actually be useful. I don't think it's so bad to call `stack` repeatedly.\n\nHowever, I do think handling stacking simultaneously would be a good change to the API. It is technically a break in backwards compatibility, so we'll need to think about how that could be rolled out. We could do that with a keyword. But I also think the number of people who would be effected by this is likely to be quite small (when the existing behavior is encountered, it is probably followed by dropna), and in the long term there wouldn't be any point to including the flag.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65943669",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-65943669",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 65943669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTQzNjY5",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-07T16:49:49Z",
    "updated_at": "2014-12-07T16:49:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that providing a list of sets is extremely unlikely.  My main requirement is to be able to support simultaneous stacking of multiple levels, and in particular of all levels: If `df.shape = (m, n)`, I'd like to be able to stack the columns to get a `Series` of length `m * n`, regardless of the level structure of `df.columns` (in particular if it is not a \"product\", i.e. where `np.product([len(lev) for lev in df.columns.levels]) > n`), and regardless of whether `df` has any missing values. (If `df` has no missing values, `df.stack(level=list(range(len(df.columns.levels))), dropna=True)` will do. But since in interpreting `dropna=True` there is no distinction made between values that are missing in the original data and missing values for \"phantom\" level combinations that are created when stacking levels sequentially, this doesn't work in general.)\n\nI sort of like my current distinction between lists and sets, but if every else thinks it's non-pythonic, I'm happy to change it. It would be reasonably straightforward to change this PR to simply stack a list of levels either sequentially or simultaneously based on a new flag. The only thing one would give up is supporting a list of sets, which I agree is a rather unlikely use case.\n\nAs an aside, it would be useful, I think, to support an 'all' value for the `levels` parameter, so that one doesn't need hard-code `level=[1, 2, 3]` or `level=list(range(len(df.columns.levels)))`. Anything better than `level='all'`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65956876",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-65956876",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 65956876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTU2ODc2",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-07T21:50:12Z",
    "updated_at": "2014-12-07T21:50:12Z",
    "author_association": "MEMBER",
    "body": "> As an aside, it would be useful, I think, to support an 'all' value for the levels parameter, so that one doesn't need hard-code `level=[1, 2, 3]` or `level=list(range(len(df.columns.levels)))`. Anything better than `level='all'`?\n\nI agree, this would be useful functionality. But using `level='all'` is a bad idea, because `'all'` is a valid name for a level. Rather than adding a new keyword argument or sentinel value, I think this would be handled most cleanly by adding a new method: `stack_all`.\n\nAlso: whatever we settle on here for changing `stack`, we should probably also implement for `unstack` (though `unstack_all` would be unnecessary).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65957832",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-65957832",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 65957832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTU3ODMy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-07T22:10:32Z",
    "updated_at": "2014-12-07T22:10:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "another option \n\nis to do something like (IIRC this is useful other times as well)\n\n`df.stack(levels=pd.AllLevels)`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65966240",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-65966240",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 65966240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTY2MjQw",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-08T01:34:21Z",
    "updated_at": "2014-12-08T01:34:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure why when I looked earlier I thought the changes I made to `stack()` weren't applicable to `unstack()`. Only difference I see now is that `unstack()` is missing the `dropna` parameter.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70426318",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-70426318",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 70426318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDI2MzE4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-18T21:15:20Z",
    "updated_at": "2015-01-18T21:15:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p can you revisit?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70953056",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-70953056",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 70953056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwOTUzMDU2",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-22T00:58:04Z",
    "updated_at": "2015-01-22T00:58:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Haven't looked at this in a while. Will try to revisit over next few days.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72562330",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72562330",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72562330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTYyMzMw",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-02T23:36:15Z",
    "updated_at": "2015-02-02T23:36:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback, @shoyer, question for you guys: Is `pd.core.reshape.stack()` a \"public\" API, that I should not alter (except in a backwards compatible way), or am I free to change it as I see fit so long as `pd.DataFrame.stack()` remains backwards compatible? I think it should be regarded as internal -- it doesn't show up in the API Reference, http://pandas.pydata.org/pandas-docs/version/0.15.2/api.html (though that's not necessarily complete) -- and that I can change it if I want, but figured I'd check first.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72562677",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72562677",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72562677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTYyNjc3",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-02T23:38:58Z",
    "updated_at": "2015-02-02T23:38:58Z",
    "author_association": "MEMBER",
    "body": "@seth-p I agree, I don't think we make any API guarantees for `pandas.core` -- only for the top level namespace.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72610356",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72610356",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72610356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjEwMzU2",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T08:12:51Z",
    "updated_at": "2015-02-03T08:12:51Z",
    "author_association": "MEMBER",
    "body": "I don't really like the `pd.Index.ALL_LEVELS`. Can't we use `None` for this? `df.unstack(level=None)`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72707057",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72707057",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72707057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzA3MDU3",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T18:34:14Z",
    "updated_at": "2015-02-03T18:34:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche, ok, I've removed `ALL_LEVELS` and made `df.stack(level=None)` mean all levels.\n\nI haven't made any corresponding changes to `DataFrame.unstack()`, as that code is very different from `DataFrame.stack()`. I would have expected `DataFrame.unstack()` to be implemented as `DataFrame.T.stack().T`, but it's not (except that it is implemented as `DataFrame.T.stack()` in the special case that `level` is a single number and `df.index` is a simple `Index` (not a `MultiIndex`).)\n\nIn general the code (in `reshape.py`) that implements `DataFrame.unstack()` (`unstack()`, `_unstack_frame()`, and `_unstack_multiple()`) looks quite different from the code that implements `DataFrame.stack()` (`stack()`, `stack_multiple()`, and `_stack_multi_columns()` -- before the changes of this PR).\n\nComparing the results of `df.unstack()` to `df.T.stack().T`, I observe two differences:\n1.  dtypes. Since dtypes are done by column, transposing can mess up dtypes. Given this,I'm still thinking what to do about `unstack()`.\n2. When a MultiIndex label is `NaN`, things are just plain weird. Perhaps there should be a separate issue for this. While the current code passes the `test_unstack_nan_index()` in `test_frame.py`, the treatment of `NaN` labels seems very inconsistent/unreliable:\n\n```\nIn [140]: df = pd.DataFrame(np.arange(4).reshape(2, 2),\n                            columns=pd.MultiIndex.from_tuples([('A','a'), ('B', 'b')],\n                                                              names=['Upper', 'Lower']),\n                            index=Index([0, 1], name='Num'), dtype=np.float64)\n\nIn [141]: df = pd.DataFrame(np.arange(4).reshape(2, 2),\n                            columns=pd.MultiIndex.from_tuples([('A',np.nan), ('B', 'b')],\n                                                              names=['Upper', 'Lower']),\n                            index=Index([0, 1], name='Num'), dtype=np.float64)\n\nIn [148]: df\nOut[148]:\nUpper  A  B\nLower  a  b\nNum\n0      0  1\n1      2  3\n\nIn [149]: df.stack()\nOut[149]:\nUpper       A   B\nNum Lower\n0   a       0 NaN\n    b     NaN   1\n1   a       2 NaN\n    b     NaN   3\n\nIn [150]: df.T.unstack().T\nOut[150]:\nUpper       A   B\nNum Lower\n0   a       0 NaN\n    b     NaN   1\n1   a       2 NaN\n    b     NaN   3\n\nIn [151]: df_nan\nOut[151]:\nUpper   A  B\nLower NaN  b\nNum\n0       0  1\n1       2  3\n\nIn [152]: df_nan.stack()\nOut[152]:\nUpper      A  B\nNum Lower\n0   NaN    0  1\n    b      0  1\n1   NaN    2  3\n    b      2  3\n\nIn [153]: df_nan.T.unstack().T\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-153-edbcaeb64f64> in <module>()\n----> 1 df_nan.T.unstack().T\n\nC:\\Python34\\lib\\site-packages\\pandas\\core\\frame.py in unstack(self, level)\n   3486         \"\"\"\n   3487         from pandas.core.reshape import unstack\n-> 3488         return unstack(self, level)\n   3489\n   3490     #----------------------------------------------------------------------\n\nC:\\Python34\\lib\\site-packages\\pandas\\core\\reshape.py in unstack(obj, level)\n    439     if isinstance(obj, DataFrame):\n    440         if isinstance(obj.index, MultiIndex):\n--> 441             return _unstack_frame(obj, level)\n    442         else:\n    443             return obj.T.stack(dropna=False)\n\nC:\\Python34\\lib\\site-packages\\pandas\\core\\reshape.py in _unstack_frame(obj, level)\n    479     else:\n    480         unstacker = _Unstacker(obj.values, obj.index, level=level,\n--> 481                                value_columns=obj.columns)\n    482         return unstacker.get_result()\n    483\n\nC:\\Python34\\lib\\site-packages\\pandas\\core\\reshape.py in __init__(self, values, index, level, value_columns)\n    101\n    102         self._make_sorted_values_labels()\n--> 103         self._make_selectors()\n    104\n    105     def _make_sorted_values_labels(self):\n\nC:\\Python34\\lib\\site-packages\\pandas\\core\\reshape.py in _make_selectors(self)\n    143\n    144         if mask.sum() < len(self.index):\n--> 145             raise ValueError('Index contains duplicate entries, '\n    146                              'cannot reshape')\n    147\n\nValueError: Index contains duplicate entries, cannot reshape\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72733859",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72733859",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72733859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzMzODU5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T21:01:54Z",
    "updated_at": "2015-02-03T21:01:54Z",
    "author_association": "MEMBER",
    "body": "@seth-p maybe don't rush with changing it `None`, it was just an idea of me, I don't know what others think of it\n\nAnd on `unstack`, what does it have to do with the issue you are solving here? Why does this need to be changed?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72737607",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72737607",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72737607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzM3NjA3",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T21:22:48Z",
    "updated_at": "2015-02-03T21:22:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Re: `unstack()`. I would think that everything that applies to `stack()` should apply to `unstack` -- e.g. passing `level=None` to (un)stack all index levels; and passing `sequentially=True/False` to specify whether an array of levels should be (un)stacked sequentially or simultaneously -- no? Since `.unstack()` is roughly (up to edge cases) equivalent to `.T.stack().T`, I would think so. I could leave `unstack()` unchanged, but it seems deficient relative to `stack()`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72739819",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72739819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72739819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzM5ODE5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T21:35:01Z",
    "updated_at": "2015-02-03T21:35:01Z",
    "author_association": "MEMBER",
    "body": "Ah, yes, when introducing new behaviour/arguments, that should indeed best in both stack/unstack if that makes sense\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72739907",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72739907",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72739907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzM5OTA3",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T21:35:31Z",
    "updated_at": "2015-02-03T21:35:31Z",
    "author_association": "MEMBER",
    "body": "But how does unstacking all levels look like?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72741556",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72741556",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72741556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzQxNTU2",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T21:44:58Z",
    "updated_at": "2015-02-03T21:44:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, if `df.index` is a `MultiIndex`, then I would expect/want `df.unstack(level=None)` to be the same as `df.T.stack(level=None).T` -- i.e. result in a `Series` whose index is a `MultiIndex` whose levels are those of `df.columns` followed by those of `df.index`. (In comparison, `df.stack(level=None)` will result in a `Series` whose index is a `MultiIndex` whose levels are those of `df.index` followed by those of `df.columns`.)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72742193",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72742193",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72742193,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzQyMTkz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T21:48:35Z",
    "updated_at": "2015-02-03T21:48:35Z",
    "author_association": "MEMBER",
    "body": "The behaviour you describe is what `df.unstack()` already does when you have a single index, I think.\n\n```\nIn [39]: index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n   ....: ...                                    ('two', 'a'), ('two', 'b')])\n\nIn [40]: s = pd.Series(np.arange(1.0, 5.0), index=index)\n\nIn [42]: s\nOut[42]:\none  a    1\n     b    2\ntwo  a    3\n     b    4\ndtype: float64\n\nIn [43]: s.unstack()\nOut[43]:\n     a  b\none  1  2\ntwo  3  4\n\nIn [44]: df = s.unstack()\n\nIn [45]: df.unstack()\nOut[45]:\na  one    1\n   two    3\nb  one    2\n   two    4\ndtype: float64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72742908",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72742908",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72742908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzQyOTA4",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T21:52:12Z",
    "updated_at": "2015-02-03T21:52:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, precisely. But one may want to unstack all levels of the `.df.index` simultaneously -- particularly with `sequentially=False`. I know personally I've found myself wanting to `stack()` all column levels simultaneously, and while I haven't had personal need for `unstack()`, I must think that someone would want it to support that behavior.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72794709",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72794709",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72794709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzk0NzA5",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-04T05:51:20Z",
    "updated_at": "2015-02-04T05:51:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "I updated the `stack()` code to handle `NaN` level values. Since `unstack()` already handles them (#9061 and #9292), I believe this closes #9406.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72812666",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72812666",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72812666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyODEyNjY2",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-04T09:03:38Z",
    "updated_at": "2015-02-04T09:03:38Z",
    "author_association": "MEMBER",
    "body": "@seth-p Can you recapitulate why we need this `sequentially` keyword? As I was looking again at the original issue #8851, and I am not sure anymore.\n\nBecause, actually, the `dropna` keyword argument already ensures the default stacking is kind of simultaneous no (not in implementation, but in result)?\n\n```\nIn [49]: df = pd.DataFrame(np.zeros((2, 3)), index=pd.Index([0, 1], name='index'),\n    ...:                   columns=pd.MultiIndex.from_tuples([('A','x'), ('A','y'), ('B','z')], names=['upper', 'lower']))\n\nIn [50]: df.stack(level=[0, 1])\nOut[50]: \nindex  upper  lower\n0      A      x        0\n              y        0\n       B      z        0\n1      A      x        0\n              y        0\n       B      z        0\ndtype: float64\n```\n\nSo in the default case, there would not be a difference with if you do it 'sequentially' or 'simultaneously'? \nIt is only if you do `dropna=False` that you get NaN values that were not there before:\n\n```\nIn [51]: df.stack(level=[0, 1], dropna=False)\nOut[51]: \nindex  upper  lower\n0      A      x         0\n              y         0\n              z       NaN\n       B      x       NaN\n              y       NaN\n              z         0\n1      A      x         0\n              y         0\n              z       NaN\n       B      x       NaN\n              y       NaN\n              z         0\n```\n\nSo it is only in this case that the `sequentially` keyword would have an effect? (and in practice the result of `df.stack(level=[0, 1], dropna=False, sequentially=False)` would then be the same as `df.stack(level=[0, 1])`)  So for this case, I don't really see the value of this new keyword.\n\nSo actually, unless I miss something, a usecase for `sequentially=False` is if you already have NaNs in your original dataframe, and you want to be able to discriminate between those 'real' NaNs and the 'introduced' NaNs by the stacking operation.\n\n```\nIn [57]: df2 = df.copy()\n\nIn [58]: df2.iloc[0,1] = np.nan\n\nIn [59]: df2\nOut[59]: \nupper  A      B\nlower  x   y  z\nindex          \n0      0 NaN  0\n1      0   0  0\n\nIn [60]: df2.stack(level=[0, 1])\nOut[60]: \nindex  upper  lower\n0      A      x        0\n       B      z        0\n1      A      x        0\n              y        0\n       B      z        0\ndtype: float64\n\nIn [62]: df2.stack(level=[0, 1], dropna=False)\nOut[62]: \nindex  upper  lower\n0      A      x         0\n              y       NaN\n              z       NaN\n       B      x       NaN\n              y       NaN\n              z         0\n1      A      x         0\n              y         0\n              z       NaN\n       B      x       NaN\n              y       NaN\n              z         0\ndtype: float64\n\n\n```\n\nIn this case, `df.stack(level=[0, 1], dropna=False, sequentially=False)` would then be this?\n\n```\nindex  upper  lower\n0      A      x         0\n              y       NaN\n       B      z         0\n1      A      x         0\n              y         0\n       B      z         0\ndtype: float64\n\n```\n\nAnd would we want to change the value of `sequentially` in the future? That is becomes `False` by default. \n\nI just am not sure this is worth an extra keyword argument (as this also induces extra confusion about what it means among users)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72880115",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72880115",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72880115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyODgwMTE1",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-04T15:56:55Z",
    "updated_at": "2015-02-04T15:56:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Precisely, `sequentially` is needed because `dropna` doesn't differentiate between \"native\" `NaN`s in the data and \"introduced\" `NaN`s from the stacking.\n\nPersonally I would have preferred not having `sequentially` and differentiating between the two modes based on the type of `level`: a list/tuple means stack sequentially; a set means stack simultaneously. This is the way I originally implemented it (and also supported nesting sets in a list, e.g. [1, {4, 5}, 8], with the obvious meaning), but @jreback and @shoyer didn't like that, so I changed it to use the explicit `sequentially` argument.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72880316",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-72880316",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 72880316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyODgwMzE2",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-04T15:57:56Z",
    "updated_at": "2015-02-04T15:57:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "As for the default value of `sequentially`, I set it to `True` for backwards compatibility, though my preference if I were starting from scratch would be `False`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73029649",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-73029649",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 73029649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMDI5NjQ5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-05T11:07:16Z",
    "updated_at": "2015-02-05T11:07:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p you mentioned above that `df.T.stack().T` is not equiv to `df.unstack()`. You can use `convert_objects()` on the final result from `.unstack()` to reconverted any dtypes that have been objectified by transposes. I don't think the `df.T.stack().T` _can_ be preserved (and this is the **reason** for `unstack()` existing to some extent), because these are independent operations (and you have columns converted to rows which then mix dtypes).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74313157",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-74313157",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 74313157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzEzMTU3",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T19:38:23Z",
    "updated_at": "2015-02-13T19:38:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "This PR addresses the following issues:\n\n(1) #9406. `DataFrame.stack()` now supports `NaN`s in the column levels. (This is analogous to #9061 and #9292 for `DataFrame.unstack()`.) Let me just say that this is a royal pain in the !@#$ due to the fact that `NaN`s don't behave \"normally\" -- e.g. `np.NaN == np.NaN` is `False` -- and I doubt that in practice one would get very far manipulating objects with `NaN`s in the indices. (Aside: @behzadnouri's `test_unstack_nan_index()` from #9061 was extremely helpful (via (5) below) in testing this.)\n\n(2) `DataFrame.stack()` now supports `level=None` to mean all levels (in order, i.e. `list(range(self.columns.nlevels))`).\n\n(3) #8851. `DataFrame.stack()` now supports a boolean `sequentially` argument (default = `True` for backwards compatibility). When `sequentially` is `True`, the listed levels are stacked one at a time, as before. When `sequentially` is `False`, the listed levels are all stacked simultaneously.\n\n(4) #9399. Fixed a couple or tests of error messages regarding duplicate `MultiIndex` level names.\n\n(5) In order to add the features described in (2) and (3) above, as well as `dropna`, to `DataFrame.unstack()` -- which heretofore has been implemented completely separately from `DataFrame.stack()` -- I changed `DataFrame.unstack(...)` to simply call `self.T.stack(...).T` (along with some `dtype` adjustments). It seems to work fine (though see (6) below). I am not set up to run vbench (am on Windows), so don't know how performance compares. If people object, this is trivial to reverse (just uncomment two lines).\n\n(6) Previously when unstacking columns of ints that introduce `NaN`s, all columns were converted to floats. With my change in (5), only columns that actually have `NaN`s are converted to floats; those that don't remain ints. This seems to me like more correct behavior. I had to adjust a couple of tests to recognize this changed behavior.\n\n(7) I removed a bunch of gratuitous `pd.`s from `test_frame.py`.\n\n[Let me just repeat how painful it was to get the code to deal with `NaN`s in the column levels. If possible I would love to prohibit this practice. Dealing with them requires lots of special tests, as many functions (like `Index.get_loc()`) don't work reliably for them. But I fear that they arise in practice (e.g. via pivoting), so one probably has to deal with them to some extent...]\n\nIf looks ok, I will add release notes.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74323885",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-74323885",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 74323885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzIzODg1",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T20:45:28Z",
    "updated_at": "2015-02-13T20:45:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nInvoked with :\n--ncalls: 3\n--repeats: 12\n\n\n-------------------------------------------------------------------------------\nTest name                                    | head[ms] | base[ms] |  ratio   |\n-------------------------------------------------------------------------------\nreshape_stack_simple                         |  15.0343 |   5.3796 |   2.7947 |\nreshape_unstack_simple                       | 4494.4494 |   5.0020 | 898.5265 |\nunstack_sparse_keyspace                      | 6584.2943 |   2.4393 | 2699.2114 |\n-------------------------------------------------------------------------------\nTest name                                    | head[ms] | base[ms] |  ratio   |\n-------------------------------------------------------------------------------\n\nRatio < 1.0 means the target commit is faster then the baseline.\nSeed used: 1234\n\nTarget [86a6e51] : ENH/API: DataFrame.stack() supports level=None, sequentially=True/False, and NaN level values.\nBase   [e266c3d] : Merge pull request #9331 from shoyer/categorical-unique-order\n\nBUG: don't sort unique values from categoricals\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74335889",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-74335889",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 74335889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzM1ODg5",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T22:09:29Z",
    "updated_at": "2015-02-13T22:09:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri, thank you for that! So it looks like my stack()-based implementation of unstack() is _MUCH_ slower than the existing one. Rather astonishing, actually. Maybe I should implement stack() in terms of unstack()? Only thing preventing me from doing that I don't really feel like adding `dropna` and `sequentially` support to the unstack() code...\n\n@jreback, other than the docs I think I've addressed all your issues with the latest commit. Thank you for the detailed comments.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74959927",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9023#issuecomment-74959927",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9023",
    "id": 74959927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTU5OTI3",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-18T22:14:56Z",
    "updated_at": "2015-02-18T22:14:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, I'd like to implement `stack()` in terms of `unstack()` -- to eliminate redundant/inconsistent code, and perhaps make `stack()` run faster -- but my tests are failing in view of #9497 and #9514.\n"
  }
]
