[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63149647",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63149647",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63149647,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTQ5NjQ3",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-15T00:16:44Z",
    "updated_at": "2014-11-15T00:16:44Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report!\n\nWhat does `engine.table_names` return after you try to write it with `to_sql`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63175888",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63175888",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63175888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTc1ODg4",
    "user": {
      "login": "peacedefender",
      "id": 9746279,
      "node_id": "MDQ6VXNlcjk3NDYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9746279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peacedefender",
      "html_url": "https://github.com/peacedefender",
      "followers_url": "https://api.github.com/users/peacedefender/followers",
      "following_url": "https://api.github.com/users/peacedefender/following{/other_user}",
      "gists_url": "https://api.github.com/users/peacedefender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peacedefender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peacedefender/subscriptions",
      "organizations_url": "https://api.github.com/users/peacedefender/orgs",
      "repos_url": "https://api.github.com/users/peacedefender/repos",
      "events_url": "https://api.github.com/users/peacedefender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peacedefender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-15T15:28:00Z",
    "updated_at": "2014-11-15T15:28:00Z",
    "author_association": "NONE",
    "body": "OK, I have dropped DATA table from DB and run\n\n``` python\ndata.to_sql('data', engine_oracle, if_exists='replace')\nprint engine_oracle.table_names()\n```\n\n> /anaconda/lib/python2.7/site-packages/pandas/io/sql.py:1140: UserWarning: The provided table name 'data' is not found exactly as such in the database after writing the table, possibly due to case sensitivity issues. Consider using lower case table names.\n>   \"using lower case table names.\".format(name), UserWarning)\n> [u'countries']\n\nSo, it prints **[u'countries']** ?!?! Table COUNTRIES exists indeed, and it can be imported:\n\n``` python\ndf2 = pd.read_sql_table('countries', engine_oracle)\n```\n\nrepeating `data.to_sql('data', engine_oracle, if_exists='replace')` throws an error:\n\n> /home/defender/anaconda/lib/python2.7/site-packages/pandas/core/generic.pyc in to_sql(self, name, con, flavor, schema, if_exists, index, index_label, chunksize)\n>     954         sql.to_sql(\n>     955             self, name, con, flavor=flavor, schema=schema, if_exists=if_exists,\n> --> 956             index=index, index_label=index_label, chunksize=chunksize)\n>     957\n>     958     def to_pickle(self, path):\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/pandas/io/sql.pyc in to_sql(frame, name, con, flavor, schema, if_exists, index, index_label, chunksize)\n>     532     pandas_sql.to_sql(frame, name, if_exists=if_exists, index=index,\n>     533                       index_label=index_label, schema=schema,\n> --> 534                       chunksize=chunksize)\n>     535\n>     536\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/pandas/io/sql.pyc in to_sql(self, frame, name, if_exists, index, index_label, schema, chunksize)\n>    1131                          if_exists=if_exists, index_label=index_label,\n>    1132                          schema=schema)\n> -> 1133         table.create()\n>    1134         table.insert(chunksize)\n>    1135         # check for potentially case sensitivity issues (GH7815)\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/pandas/io/sql.pyc in create(self)\n>     634                 raise ValueError(\"Table '%s' already exists.\" % self.name)\n>     635             elif self.if_exists == 'replace':\n> --> 636                 self.pd_sql.drop_table(self.name, self.schema)\n>     637                 self._execute_create()\n>     638             elif self.if_exists == 'append':\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/pandas/io/sql.pyc in drop_table(self, table_name, schema)\n>    1157         schema = schema or self.meta.schema\n>    1158         if self.engine.has_table(table_name, schema):\n> -> 1159             self.meta.reflect(only=[table_name], schema=schema)\n>    1160             self.get_table(table_name, schema).drop()\n>    1161             self.meta.clear()\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/sql/schema.pyc in reflect(self, bind, schema, views, only, extend_existing, autoload_replace, **dialect_kwargs)\n>    3357                         'Could not reflect: requested table(s) not available '\n>    3358                         'in %s%s: (%s)' %\n> -> 3359                         (bind.engine.url, s, ', '.join(missing)))\n>    3360                 load = [name for name in only if extend_existing or\n>    3361                         name not in current]\n> \n> InvalidRequestError: Could not reflect: requested table(s) not available in oracle://admin:whatever@localhost:1521/xe: (data)\n\nHowever, `df = pd.read_sql_query('select * from data', engine_oracle)` imports table, \nbut `df = pd.read_sql_query('select * from data;', engine_oracle)` throws another error:\n\n> /home/defender/anaconda/lib/python2.7/site-packages/pandas/io/sql.pyc in read_sql_query(sql, con, index_col, coerce_float, params, parse_dates, chunksize)\n>     399     return pandas_sql.read_query(\n>     400         sql, index_col=index_col, params=params, coerce_float=coerce_float,\n> --> 401         parse_dates=parse_dates, chunksize=chunksize)\n>     402\n>     403\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/pandas/io/sql.pyc in read_query(self, sql, index_col, coerce_float, parse_dates, params, chunksize)\n>    1082         args = _convert_params(sql, params)\n>    1083\n> -> 1084         result = self.execute(*args)\n>    1085         columns = result.keys()\n>    1086\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/pandas/io/sql.pyc in execute(self, _args, *_kwargs)\n>     976     def execute(self, _args, *_kwargs):\n>     977         \"\"\"Simple passthrough to SQLAlchemy engine\"\"\"\n> --> 978         return self.engine.execute(_args, *_kwargs)\n>     979\n>     980     def read_table(self, table_name, index_col=None, coerce_float=True,\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/engine/base.pyc in execute(self, statement, _multiparams, *_params)\n>    1749\n>    1750         connection = self.contextual_connect(close_with_result=True)\n> -> 1751         return connection.execute(statement, _multiparams, *_params)\n>    1752\n>    1753     def scalar(self, statement, _multiparams, *_params):\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/engine/base.pyc in execute(self, object, _multiparams, *_params)\n>     719         \"\"\"\n>     720         if isinstance(object, util.string_types[0]):\n> --> 721             return self._execute_text(object, multiparams, params)\n>     722         try:\n>     723             meth = object._execute_on_connection\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/engine/base.pyc in _execute_text(self, statement, multiparams, params)\n>     868             statement,\n>     869             parameters,\n> --> 870             statement, parameters\n>     871         )\n>     872         if self._has_events or self.engine._has_events:\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/engine/base.pyc in _execute_context(self, dialect, constructor, statement, parameters, *args)\n>     956                 parameters,\n>     957                 cursor,\n> --> 958                 context)\n>     959\n>     960         if self._has_events or self.engine._has_events:\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/engine/base.pyc in _handle_dbapi_exception(self, e, statement, parameters, cursor, context)\n>    1157                 util.raise_from_cause(\n>    1158                     sqlalchemy_exception,\n> -> 1159                     exc_info\n>    1160                 )\n>    1161             else:\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/util/compat.pyc in raise_from_cause(exception, exc_info)\n>     197             exc_info = sys.exc_info()\n>     198         exc_type, exc_value, exc_tb = exc_info\n> --> 199         reraise(type(exception), exception, tb=exc_tb)\n>     200\n>     201 if py3k:\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/engine/base.pyc in _execute_context(self, dialect, constructor, statement, parameters, *args)\n>     949                         statement,\n>     950                         parameters,\n> --> 951                         context)\n>     952         except Exception as e:\n>     953             self._handle_dbapi_exception(\n> \n> /home/defender/anaconda/lib/python2.7/site-packages/sqlalchemy/engine/default.pyc in do_execute(self, cursor, statement, parameters, context)\n>     434\n>     435     def do_execute(self, cursor, statement, parameters, context=None):\n> --> 436         cursor.execute(statement, parameters)\n>     437\n>     438     def do_execute_no_params(self, cursor, statement, context=None):\n> \n> DatabaseError: (DatabaseError) ORA-00911: invalid character\n>  'select \\* from data;' {}\n\nThis (with or without **;**) is not an issue with sqlite.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63184950",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63184950",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63184950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTg0OTUw",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-15T19:29:01Z",
    "updated_at": "2014-11-15T19:29:01Z",
    "author_association": "MEMBER",
    "body": "Strange .. Do you have any idea where the 'countries' could come from?\n\nWhat does `engine.has_table('countries')` and `engine.has_table('data')` give after you wrote the table with `to_sql` ?\n\nProblem is that I don't have oracle, so difficult to investigate what could be the issue.\n\nAbout the semicolon giving a problem: that is apparantly something oracle-related that it is not allowed in contrast to most other databases (google 'oracel semicolon invalid character' and you will see this is asked more :-))\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63197230",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63197230",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63197230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTk3MjMw",
    "user": {
      "login": "peacedefender",
      "id": 9746279,
      "node_id": "MDQ6VXNlcjk3NDYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9746279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peacedefender",
      "html_url": "https://github.com/peacedefender",
      "followers_url": "https://api.github.com/users/peacedefender/followers",
      "following_url": "https://api.github.com/users/peacedefender/following{/other_user}",
      "gists_url": "https://api.github.com/users/peacedefender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peacedefender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peacedefender/subscriptions",
      "organizations_url": "https://api.github.com/users/peacedefender/orgs",
      "repos_url": "https://api.github.com/users/peacedefender/repos",
      "events_url": "https://api.github.com/users/peacedefender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peacedefender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-15T23:22:56Z",
    "updated_at": "2014-11-15T23:22:56Z",
    "author_association": "NONE",
    "body": "There is no mystery with COUNTRIES table, I apologize for not providing information on this subject in my previous post. I was following this online tutorial:\nhttp://www.oracle.com/webfolder/technetwork/tutorials/tutorial/db/11g/r2/XE_Part2a/player.html\nwhich among the rest includes instructions on creating DB accounts and loading some sample data into an Oracle DB. Suddenly, I decided to try interaction with Oracle DB through pandas. I used the same account which was previously used to load sample data so COUNTRIES table is among those sample data. Then I got the described issues.\n\nSo, it is no surprise I get **True** for `engine_oracle.has_table('countries')`. Also, I get **True** for `engine_oracle.has_table('data')`, but `df = pd.read_sql_table('data', engine_oracle)` fails. \n\nIt is free to download and use Oracle Database Express Edition 11g Release 2\nhttp://www.oracle.com/technetwork/database/database-technologies/express-edition/downloads/index.html\nand I find the proposed limitations\nhttp://www.oracle.com/technetwork/database/database-technologies/express-edition/overview/index.html\nas quite acceptable for testing purposes. I don't find installation as complicated, however I am aware the whole thing is a matter of someone's time and interest.\n\nI did some google search on _ORA-00911: invalid character_, but as I found this explantion \nhttp://www.dba-oracle.com/sf_ora_00911_invalid_character.htm\nas generally useless (but it was amusing to see that face) and the comment here \nhttp://stackoverflow.com/questions/25018189/databaseerror-ora-00911-invalid-character\ndid the job I did not investigate any more. Obviously, I missed to remember it was about cx_Oracle. You are right, this is apparantly something oracle-related.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63290464",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63290464",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63290464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkwNDY0",
    "user": {
      "login": "peacedefender",
      "id": 9746279,
      "node_id": "MDQ6VXNlcjk3NDYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9746279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peacedefender",
      "html_url": "https://github.com/peacedefender",
      "followers_url": "https://api.github.com/users/peacedefender/followers",
      "following_url": "https://api.github.com/users/peacedefender/following{/other_user}",
      "gists_url": "https://api.github.com/users/peacedefender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peacedefender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peacedefender/subscriptions",
      "organizations_url": "https://api.github.com/users/peacedefender/orgs",
      "repos_url": "https://api.github.com/users/peacedefender/repos",
      "events_url": "https://api.github.com/users/peacedefender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peacedefender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-17T11:15:59Z",
    "updated_at": "2014-11-17T11:15:59Z",
    "author_association": "NONE",
    "body": "Additional observations:\n\n``` python\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\nfrom cStringIO import StringIO\nfrom sqlalchemy import create_engine, MetaData, Table, Column\nfrom sqlalchemy import Integer, String, Float, Boolean\nfrom sqlalchemy.sql import select\n\ncsv_sample = '''id,Date,Col_1,Col_2,Col_3\n26,2012-10-18,X,25.7,True\n42,2012-10-19,Y,-12.4,False\n63,2012-10-20,Z,5.73,True'''\n\nb = StringIO(csv_sample)\ndata = pd.read_csv(b, index_col=0)\n\n# oracle\nengine_oracle = create_engine('oracle://admin:whatever@localhost:1521/xe')\nmetadata = MetaData()\nsa_data = Table('data', metadata,\n                Column('id', Integer),\n                Column('Date', String(10)),\n                Column('Col_1', String(1)),\n                Column('Col_2', Float),\n                Column('Col_3', Boolean),\n                )\nmetadata.create_all(engine_oracle)\nconn = engine_oracle.connect()\nfor index, row in data.iterrows():\n    ins = sa_data.insert(values=[index] + list(row))\n    conn.execute(ins)\n```\n\nThis code works, but `df = pd.read_sql_table('data', engine_oracle)` still fails. On the other hand data could be read with:\n\n``` python\ns = select([sa_data])\nresult = conn.execute(s)\nfor row in result:\n    print row\n```\n\nAlso, I have noticed when the table could be written with `data.to_sql('data', engine_oracle, if_exists='replace')` it defines CLOB data type for Date and Col_1 columns.\nhttps://docs.oracle.com/javadb/10.10.1.2/ref/rrefclob.html\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63644241",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63644241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63644241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjQ0MjQx",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-19T14:08:05Z",
    "updated_at": "2014-11-19T14:10:37Z",
    "author_association": "MEMBER",
    "body": "@peacedefender thanks for the pointers to the free Express Edition. \nI am now able to reproduce your issues.\n\nCan you check what the default tablespace is for your user? \nWhat I did was: just naively created a user `test` with my freshly installed oracle XE, and then I got the same issue as you described above. But it seemed that the default tablespace for my new user was not 'USERS' but 'SYSTEM'. When I changed that to 'USERS' (with `alter user test default tablespace users;`), everything worked as expected.\n\nSQLAlchemy seems to assume that users tables cannot/should not be in the SYSTEM tablespace.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63809577",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63809577",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63809577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODA5NTc3",
    "user": {
      "login": "peacedefender",
      "id": 9746279,
      "node_id": "MDQ6VXNlcjk3NDYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9746279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peacedefender",
      "html_url": "https://github.com/peacedefender",
      "followers_url": "https://api.github.com/users/peacedefender/followers",
      "following_url": "https://api.github.com/users/peacedefender/following{/other_user}",
      "gists_url": "https://api.github.com/users/peacedefender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peacedefender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peacedefender/subscriptions",
      "organizations_url": "https://api.github.com/users/peacedefender/orgs",
      "repos_url": "https://api.github.com/users/peacedefender/repos",
      "events_url": "https://api.github.com/users/peacedefender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peacedefender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-20T13:46:17Z",
    "updated_at": "2014-11-20T13:46:17Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche, thank you for showing further interest on this subject and taking additonal effort.\n\nYes, the account I created by following the tutorial has 'SYSTEM' as the default tablespace. I am surprised the narrator missed to make any notice about this since 'SYSTEM' tablespace purpose generally is not to store user data. Of course, this is not the problem of pandas support and developement team.\n\nAfter I had changed the default tablespace to 'USERS' the code works! However, there is still a strange situation with the format of the table stored in the DB. In that sense please compare the output of:\n`SQL> select * from data;`\nin case of pandas usage and in case of direct sqlalchemy usage (the code is provided in my previous post).\n\nAbout SQL Alchemy and 'SYSTEM' tablespace, I think things differ based on implementation, the example is below:\n\n``` python\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\nfrom cStringIO import StringIO\nfrom sqlalchemy import create_engine, MetaData, Table\nfrom sqlalchemy.sql import select\n\ncsv_sample = '''id,Date,Col_1,Col_2,Col_3\n26,2012-10-18,X,25.7,True\n42,2012-10-19,Y,-12.4,False\n63,2012-10-20,Z,5.73,True'''\n\nb = StringIO(csv_sample)\ndata = pd.read_csv(b, index_col=0)\n\n# admin2 is a DB user with SYSTEM as the default tablespace\nengine_oracle = create_engine('oracle://admin2:whatever2@localhost:1521/xe')\n\n# this WORKS\nmeta = MetaData(bind=engine_oracle)\nsa_data = Table('data', meta, autoload=True)\ns = select([sa_data])\nconn = engine_oracle.connect()\nresult = conn.execute(s)\nfor row in result:\n    print row\n\n# this FAILS\nmeta = MetaData(bind=engine_oracle)\nmeta.reflect(only=['data'])\nsa_data = meta.tables['data']\ns = select([sa_data])\nconn = engine_oracle.connect()\nresult = conn.execute(s)\nfor row in result:\n    print row\n\n```\n\nI think the situation which fails mimics the implementation in pandas's code, pandas/io/sql.py: line 329-333. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63810629",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63810629",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63810629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODEwNjI5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-20T13:54:20Z",
    "updated_at": "2014-11-20T13:54:20Z",
    "author_association": "MEMBER",
    "body": "> However, there is still a strange situation with the format of the table stored in the DB. In that sense please compare the output of:\n> SQL> select \\* from data;\n> in case of pandas usage and in case of direct sqlalchemy usage (the code is provided in my previous post).\n\nWhich code do you mean exactly? Can you repeat it?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63812000",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63812000",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63812000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODEyMDAw",
    "user": {
      "login": "peacedefender",
      "id": 9746279,
      "node_id": "MDQ6VXNlcjk3NDYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9746279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peacedefender",
      "html_url": "https://github.com/peacedefender",
      "followers_url": "https://api.github.com/users/peacedefender/followers",
      "following_url": "https://api.github.com/users/peacedefender/following{/other_user}",
      "gists_url": "https://api.github.com/users/peacedefender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peacedefender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peacedefender/subscriptions",
      "organizations_url": "https://api.github.com/users/peacedefender/orgs",
      "repos_url": "https://api.github.com/users/peacedefender/repos",
      "events_url": "https://api.github.com/users/peacedefender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peacedefender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-20T14:04:21Z",
    "updated_at": "2014-11-20T14:04:21Z",
    "author_association": "NONE",
    "body": "a direct sqlalchemy usage example:\n\n``` python\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\nfrom cStringIO import StringIO\nfrom sqlalchemy import create_engine, MetaData, Table, Column\nfrom sqlalchemy import Integer, String, Float, Boolean\nfrom sqlalchemy.sql import select\n\ncsv_sample = '''id,Date,Col_1,Col_2,Col_3\n26,2012-10-18,X,25.7,True\n42,2012-10-19,Y,-12.4,False\n63,2012-10-20,Z,5.73,True'''\n\nb = StringIO(csv_sample)\ndata = pd.read_csv(b, index_col=0)\n\n# oracle\nengine_oracle = create_engine('oracle://admin:whatever@localhost:1521/xe')\nmetadata = MetaData()\nsa_data = Table('data', metadata,\n                Column('id', Integer),\n                Column('Date', String(10)),\n                Column('Col_1', String(1)),\n                Column('Col_2', Float),\n                Column('Col_3', Boolean),\n                )\nmetadata.create_all(engine_oracle)\nconn = engine_oracle.connect()\nfor index, row in data.iterrows():\n    ins = sa_data.insert(values=[index] + list(row))\n    conn.execute(ins)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63812633",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63812633",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63812633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODEyNjMz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-20T14:08:57Z",
    "updated_at": "2014-11-20T14:08:57Z",
    "author_association": "MEMBER",
    "body": "@peacedefender And does this give different results as with pandas? (of so, can you also show the results?) \nOf course, the datatypes will be a little bit different, as pandas eg uses BigInteger instead of Integer, and Text instead of String (but there is an issue to change this last one).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63824421",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-63824421",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 63824421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODI0NDIx",
    "user": {
      "login": "peacedefender",
      "id": 9746279,
      "node_id": "MDQ6VXNlcjk3NDYyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9746279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peacedefender",
      "html_url": "https://github.com/peacedefender",
      "followers_url": "https://api.github.com/users/peacedefender/followers",
      "following_url": "https://api.github.com/users/peacedefender/following{/other_user}",
      "gists_url": "https://api.github.com/users/peacedefender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peacedefender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peacedefender/subscriptions",
      "organizations_url": "https://api.github.com/users/peacedefender/orgs",
      "repos_url": "https://api.github.com/users/peacedefender/repos",
      "events_url": "https://api.github.com/users/peacedefender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peacedefender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-20T15:25:21Z",
    "updated_at": "2014-11-20T15:25:21Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche, the answer depends on your goals. If your goal is only to import data to pandas.DataFrame then there is no difference except in visual output of SQL queries,\n\npandas:\n\n```\nSQL> select * from data;\n\n    ID\n----------\nDate\n--------------------------------------------------------------------------------\nCol_1\n--------------------------------------------------------------------------------\n     Col_2  Col_3\n---------- ----------\n    26\n2012-10-18\nX\n      25.7      1\n\n\n    ID\n----------\nDate\n--------------------------------------------------------------------------------\nCol_1\n--------------------------------------------------------------------------------\n     Col_2  Col_3\n---------- ----------\n    42\n2012-10-19\nY\n     -12.4      0\n\n\n    ID\n----------\nDate\n--------------------------------------------------------------------------------\nCol_1\n--------------------------------------------------------------------------------\n     Col_2  Col_3\n---------- ----------\n    63\n2012-10-20\nZ\n      5.73      1\n```\n\nsqlalchemy example:\n\n```\nSQL> select * from data;\n\n    ID Date                     Col_      Col_2  Col_3\n---------- ---------------------------------------- ---- ---------- ----------\n    26 2012-10-18                   X          25.7      1\n    42 2012-10-19                   Y         -12.4      0\n    63 2012-10-20                   Z          5.73      1\n```\n\nIf your goal is to allow users more freedom in a table manipulations after the table had been written through pandas, for example Primary Key creations (without need for additional read and write of tables), then you can feel the difference.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/65905775",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-65905775",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 65905775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTA1Nzc1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-06T17:14:42Z",
    "updated_at": "2014-12-06T17:14:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche ? close / bump ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/66191435",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-66191435",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 66191435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTkxNDM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-08T21:33:32Z",
    "updated_at": "2014-12-08T21:33:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403150073",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8820#issuecomment-403150073",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8820",
    "id": 403150073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzE1MDA3Mw==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T21:21:49Z",
    "updated_at": "2018-07-06T21:21:49Z",
    "author_association": "MEMBER",
    "body": "Seems this was hit by developers of Superset, hopefully someone will look more into"
  }
]
