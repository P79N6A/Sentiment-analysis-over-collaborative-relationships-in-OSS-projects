[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285899588",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15656#issuecomment-285899588",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15656",
    "id": 285899588,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTg5OTU4OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-11T20:58:28Z",
    "updated_at": "2017-03-11T20:58:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Copy-pastable example:\r\n\r\n```python\r\n\r\nIn [28]: data = pd.DataFrame({\"num\": ['01', '02']})\r\n\r\nIn [29]: data[[True, False]].replace({\"num\": {\"01\": \"funny\", \"02\": \"begining\"}}, inplace=True)\r\n/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/core/generic.py:3664: SettingWithCopyWarning:\r\nA value is trying to be set on a copy of a slice from a DataFrame.\r\nTry using .loc[row_indexer,col_indexer] = value instead\r\n\r\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\r\n  regex=regex)\r\n\r\nIn [30]: data[[True, True]].replace({\"num\": {\"01\": \"funny\", \"02\": \"begining\"}}, inplace=True)\r\n\r\nIn [31]: data\r\nOut[31]:\r\n  num\r\n0  01\r\n1  02\r\n```\r\n\r\nSo I think `In[29]` shows why this isn't working for you. Your slice `data[data.ab == 'A']` may be a copy, and so your inplace replace is operating on a copy, not the original, so it looks like it's not working.\r\n\r\nThe potential bug here is why an all-True mask didn't raise the SettingWithCopy warning.\r\n\r\nAs you can see, you're probably better off not using `inplace`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285952404",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15656#issuecomment-285952404",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15656",
    "id": 285952404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTk1MjQwNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-12T15:34:07Z",
    "updated_at": "2017-03-12T15:34:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is not a correct usage. As indicated by the error message it *might* work, but is not idiomatic.\r\n\r\n```\r\nIn [4]: data[data.ab == 'A'].replace(inplace=True, to_replace=a_replacements)\r\n/Users/jreback/pandas/pandas/core/generic.py:3664: SettingWithCopyWarning: \r\nA value is trying to be set on a copy of a slice from a DataFrame.\r\nTry using .loc[row_indexer,col_indexer] = value instead\r\n\r\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\r\n  regex=regex)\r\n\r\n```\r\n\r\nInstead use this pattern. The rhs is aligned to the lhs. This is the what pandas does for you by default. (you can also use ``.loc[data.ab=='A'].replace(...)`` on the rhs if its more clear.\r\n```\r\nIn [14]: data.loc[data.ab=='A'] = data.replace(to_replace=a_replacements)\r\n\r\nIn [15]: data\r\nOut[15]: \r\n  ab    num\r\n0  A  funny\r\n1  B     02\r\n2  A  funny\r\n3  A  funny\r\n4  B     01\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285978939",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15656#issuecomment-285978939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15656",
    "id": 285978939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTk3ODkzOQ==",
    "user": {
      "login": "alokshenoy",
      "id": 12011841,
      "node_id": "MDQ6VXNlcjEyMDExODQx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12011841?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alokshenoy",
      "html_url": "https://github.com/alokshenoy",
      "followers_url": "https://api.github.com/users/alokshenoy/followers",
      "following_url": "https://api.github.com/users/alokshenoy/following{/other_user}",
      "gists_url": "https://api.github.com/users/alokshenoy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alokshenoy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alokshenoy/subscriptions",
      "organizations_url": "https://api.github.com/users/alokshenoy/orgs",
      "repos_url": "https://api.github.com/users/alokshenoy/repos",
      "events_url": "https://api.github.com/users/alokshenoy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alokshenoy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-12T21:39:31Z",
    "updated_at": "2017-03-12T21:42:31Z",
    "author_association": "NONE",
    "body": "Thanks for the solution. It works well when I'm trying to replace values in ```num``` for each case ```ab == 'A', ab=='B'```\r\n\r\nLet's say I have 26 cases (```ab=='C'....ab=='Z'```) and I'm trying to use a for loop to iterate through those cases, I get a TypeError \r\n```TypeError: cannot replace ['a_replacements'] with method pad on a DataFrame```\r\n\r\ncode:\r\n\r\n```\r\nfor letter in data.ab.unique():\r\n    data.loc[data.ab == letter] = data.replace(to_replace=letter+\"_replacements\")\r\n```\r\n\r\nTo which I get :\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-96-acd3197ceef4> in <module>()\r\n      1 for letter in data.ab.unique():\r\n      2     print(letter.lower()+\"_replacements\")\r\n----> 3     data.loc[data.ab == letter] = data.replace(to_replace=letter.lower()+\"_replacements\")\r\n\r\n/Users/alokshenoy/.pyenv/versions/miniconda3-latest/lib/python3.6/site-packages/pandas/core/generic.py in replace(self, to_replace, value, inplace, limit, regex, method, axis)\r\n   3427             if isinstance(to_replace, (tuple, list)):\r\n   3428                 return _single_replace(self, to_replace, method, inplace,\r\n-> 3429                                        limit)\r\n   3430 \r\n   3431             if not is_dict_like(to_replace):\r\n\r\n/Users/alokshenoy/.pyenv/versions/miniconda3-latest/lib/python3.6/site-packages/pandas/core/generic.py in _single_replace(self, to_replace, method, inplace, limit)\r\n     70     if self.ndim != 1:\r\n     71         raise TypeError('cannot replace {0} with method {1} on a {2}'\r\n---> 72                         .format(to_replace, method, type(self).__name__))\r\n     73 \r\n     74     orig_dtype = self.dtype\r\n\r\nTypeError: cannot replace ['a_replacements'] with method pad on a DataFrame\r\n```\r\n\r\nAlso tried the rhs = lhs way, and that throws the same error. Curious as to what changes once inside the for loop?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285982813",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15656#issuecomment-285982813",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15656",
    "id": 285982813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTk4MjgxMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-12T22:34:53Z",
    "updated_at": "2017-03-12T22:34:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alokshenoy you should ask on Stack Overflow"
  }
]
