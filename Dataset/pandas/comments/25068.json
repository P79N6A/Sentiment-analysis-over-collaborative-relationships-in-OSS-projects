[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/460014120",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25068#issuecomment-460014120",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25068",
    "id": 460014120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDAxNDEyMA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-03T01:19:15Z",
    "updated_at": "2019-02-03T01:19:15Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report! This does look strange - investigation and PRs would certainly be welcome"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/460030089",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25068#issuecomment-460030089",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25068",
    "id": 460030089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDAzMDA4OQ==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-03T07:33:23Z",
    "updated_at": "2019-02-03T07:34:29Z",
    "author_association": "NONE",
    "body": "What I have a hard time grasping is the way this function is designed. Unless I don't understand the documentation, how can it help me to compare these two numbers:\r\n\r\n```\r\n0.6000000\r\n0.5999999\r\n```\r\n\r\nThe approach of comparing only n number of decimals is so strange. These two numbers are almost identical, and no matter now many digits you set, this function will still assert failure if the 9's go for quite a few more digits.\r\n\r\nFor example, [math.isclose](https://docs.python.org/3/library/math.html#math.isclose) has a relative and absolute tolerance, which makes total sense. So in the example above, I can say ask for say 0.1% tolerance and those 2 numbers will be close.\r\n\r\n`pd.testing.assert_frame_equal`'s approach is just totally unclear to me.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/460045437",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25068#issuecomment-460045437",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25068",
    "id": 460045437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDA0NTQzNw==",
    "user": {
      "login": "kinow",
      "id": 304786,
      "node_id": "MDQ6VXNlcjMwNDc4Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/304786?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kinow",
      "html_url": "https://github.com/kinow",
      "followers_url": "https://api.github.com/users/kinow/followers",
      "following_url": "https://api.github.com/users/kinow/following{/other_user}",
      "gists_url": "https://api.github.com/users/kinow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kinow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kinow/subscriptions",
      "organizations_url": "https://api.github.com/users/kinow/orgs",
      "repos_url": "https://api.github.com/users/kinow/repos",
      "events_url": "https://api.github.com/users/kinow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kinow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-03T12:01:38Z",
    "updated_at": "2019-02-03T12:02:01Z",
    "author_association": "NONE",
    "body": "I think the comparison is done in this function\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/f75a220ff1e5e027ef2b070430fd7f4490cdcbf0/pandas/_libs/testing.pyx#L42-L46\r\n\r\nThe code in the comment, however, does not use the (more strict) 0.5 function. In NumPy that function uses 1.5. There is also a comment there now to use NumPy's `assert_allclose`.\r\n\r\nhttps://github.com/numpy/numpy/blob/d7272536955cb5bd662228787b761eab2ca2c729/numpy/testing/_private/utils.py#L897-L916\r\n\r\nAnd `assert_allclose` calls a function that supports parameters for absolute and relative tolerance @stas00 . I tried adjusting the constant in the Pandas function to use 1.5 too, but then it becomes too lenient and several tests fail (was preparing a pull request because I thought it would be simpler...).\r\n\r\nInstead, perhaps, it would be easier to replace the function by either something like the new function in NumPy, or perhaps some other function?\r\n\r\nCheers\r\nBruno"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/460077646",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25068#issuecomment-460077646",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25068",
    "id": 460077646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDA3NzY0Ng==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-03T18:51:45Z",
    "updated_at": "2019-02-03T19:16:25Z",
    "author_association": "NONE",
    "body": "thank you for digging up the code, @kinow! So the description of the functionality needs to be improved - numpy's version is indeed much better explained.\r\n\r\nWhat it does is comparing how many 0.000x decimals the difference is between 2 numbers, and not how many decimals of each number it looks at. and then there is 1/2...\r\n\r\nLet's rewrite:\r\n```\r\nabs(desired - actual) < (0.5 * 10.0 ** -decimal)\r\n```\r\nto:\r\n```\r\n(abs(desired - actual) * 10.0**decimal) < 0.5\r\n```\r\nso it's easier to understand.\r\n\r\nSo 2 digits gives us:\r\n```\r\n (0.6-0.599)*10**2 = 0.1 < 0.5 [True]\r\n (0.6-0.595)*10**2 = 0.5 = 0.5 [False]\r\n (0.6-0.590)*10**2 = 1   > 0.5 [False]\r\n```\r\nso 2 digits gives us a [0,0.005) absolute range tolerance [0, 0.5*1e-2)\r\n\r\nand 3:\r\n```\r\n (0.6-0.5999)*10**3 = 0.1 < 0.5 [True]\r\n (0.6-0.5995)*10**3 = 0.5 = 0.5 [False]\r\n (0.6-0.5990)*10**3 = 1   > 0.5 [False]\r\n\r\n```\r\nso 3 digits gives us a [0,0.0005) absolute range tolerance [0, 0.5*1e-3)\r\n\r\nand so n digits gives us [0, 0.5*1e-n) absolute range tolerance.\r\n\r\nSo the description should probably use code instead of words:\r\n```\r\nassert abs(df2-df1)*10**n < 0.5, f\"frames difference is equal or more than {0.5*10**-n}\"\r\n```\r\n\r\nI hope I didn't miss a zero somewhere.\r\n\r\nExcept it doesn't seem to be the right function, since if I now apply this same logic to the original failing test to emulate `check_less_precise=3`:\r\n```\r\nimport pandas as pd\r\nimport pandas.testing\r\ndf1 = pd.DataFrame([0.00016,                -0.154526,            -0.20580199999999998])\r\ndf2 = pd.DataFrame([0.00015981824253685772, -0.15452557802200317, -0.20580188930034637])\r\ndf3 = abs(df1.subtract(df2))*10**3\r\ndf3\r\n#pd.testing.assert_frame_equal(df1, df2, check_exact=False, check_less_precise=3)\r\n```\r\nI get:\r\n```\r\n0\t0.000182\r\n1\t0.000422\r\n2\t0.000111\r\n```\r\nnone of which is >0.5, i.e. it shouldn't assert. \r\n\r\nIt should assert with `check_less_precise=7` or higher, so somewhere 4 decimal places are lost, as it starts asserting with n=3, instead of n=7.\r\n\r\n```\r\ndf3 = abs(df1.subtract(df2))*10**6 < 0.5\r\n```\r\n```\r\n0\tTrue\r\n1\tTrue\r\n2\tTrue\r\n```\r\n```\r\ndf3 = abs(df1.subtract(df2))*10**7 < 0.5\r\n```\r\n```\r\n0\tFalse\r\n1\tFalse\r\n2\tFalse\r\n```\r\n\r\nSo it's not a question of 0.5 vs 1.5, but 1 vs 10000.\r\n\r\nFinally, a sanity check of the same numbers with numpy:\r\n```\r\nimport numpy as np\r\nimport numpy.testing\r\nnp.testing.assert_array_almost_equal([.00016,                 -0.154526,            -0.20580199999999998],\r\n                                     [0.00015981824253685772, -0.15452557802200317, -0.20580188930034637],\r\n                                     decimal=6)\r\n\r\n```\r\ndoesn't fail, with `decimal=7` it does - as expected."
  }
]
