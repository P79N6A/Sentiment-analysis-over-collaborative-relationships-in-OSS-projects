[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/1584082",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-1584082",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 1584082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODQwODI=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-15T23:46:42Z",
    "updated_at": "2011-07-15T23:46:42Z",
    "author_association": "MEMBER",
    "body": "since I've recently refactored DataFrame and DataMatrix into a single class, this should be much easier / consistent to do now. I'm curious how and why you're creating a subclass? Is it to add functionality that's not there? It might be easier in that case to monkey-patch in methods like:\n\n```\nDataFrame.new_method = new_method\n```\n\nif you give me some use cases it would be helpful!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/1586570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-1586570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 1586570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY1NzA=",
    "user": {
      "login": "yonatanf",
      "id": 918693,
      "node_id": "MDQ6VXNlcjkxODY5Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/918693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yonatanf",
      "html_url": "https://github.com/yonatanf",
      "followers_url": "https://api.github.com/users/yonatanf/followers",
      "following_url": "https://api.github.com/users/yonatanf/following{/other_user}",
      "gists_url": "https://api.github.com/users/yonatanf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yonatanf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yonatanf/subscriptions",
      "organizations_url": "https://api.github.com/users/yonatanf/orgs",
      "repos_url": "https://api.github.com/users/yonatanf/repos",
      "events_url": "https://api.github.com/users/yonatanf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yonatanf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-16T10:32:36Z",
    "updated_at": "2011-07-16T10:32:36Z",
    "author_association": "NONE",
    "body": "Thanks for the quick reply. Glad to hear this is easier in the latest version.\n\nI'm subclassing since I have a particular kind of dataset I want to work with. Namely, I'm creating an ecological survey class, inheriting from DataMatrix, where rows correspond to samples and columns to organisms (e.g. how many lions, zebras and giraffes where observed at 5 different water holes). \nThe goals of creating a dedicated subclass are:\n1. Add custom methods like custom normalization and filtering. \nMonkey-patching works well for this.\n2. Add row/col metadata attributes (e.g. temperature and pH of sampling sites). These should be consistent with the DataMatrix, in the sense that the indexing is preserved during manipulations like transposing, sorting, reindexing, etc'.\nWith the metadata in place, I could add methods to sort/group/filter/etc' by it.\nI think monkey patching is less appropriate for this purpose, as it requires overriding some of DataMatrix's methods.\nI could add additional rows/cols containing the metadata information. However, these often contain non-numerical data, making this option a little awkward to work with. \n\nHope this is clearer now.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/1604641",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-1604641",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 1604641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDQ2NDE=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-19T05:13:23Z",
    "updated_at": "2011-07-19T05:16:17Z",
    "author_association": "MEMBER",
    "body": "I pushed some changes today that should make subclassing easier, maybe update to the git HEAD and give it a shot. \n\nI don't have a good understanding of your point 2). Could you provide a bit more detail? Not immediately clear to me why you can't just store that data as columns in the DataFrame (unless you need to do row-oriented computations on the data-- though some of this is possible even if you have heterogeneously-dtyped columns). A lot of people do that. I just want to be sure that your need to subclass to solve point 2) is not caused by some deficiency in the data structure.\n\nFurther, I would likely be interested in adding methods like you're describing that are sensitive to metadata-- if it's generic enough could be a nice addition. You can already do group by with a column containing an indicator of sorts, e.g.:\n\n```\nfor name, group in df.groupby('column_name'):\n    ...\n```\n\netc.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/1624855",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-1624855",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 1624855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjQ4NTU=",
    "user": {
      "login": "yonatanf",
      "id": 918693,
      "node_id": "MDQ6VXNlcjkxODY5Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/918693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yonatanf",
      "html_url": "https://github.com/yonatanf",
      "followers_url": "https://api.github.com/users/yonatanf/followers",
      "following_url": "https://api.github.com/users/yonatanf/following{/other_user}",
      "gists_url": "https://api.github.com/users/yonatanf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yonatanf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yonatanf/subscriptions",
      "organizations_url": "https://api.github.com/users/yonatanf/orgs",
      "repos_url": "https://api.github.com/users/yonatanf/repos",
      "events_url": "https://api.github.com/users/yonatanf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yonatanf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-21T16:46:28Z",
    "updated_at": "2011-07-21T16:46:28Z",
    "author_association": "NONE",
    "body": "Thanks, I'll update an give it a try. Everything below refers to v. 0.3.0.\n\nMy motivation for adding metadata attributes, rather than appending additional cols/rows is the following:\n\na) With mixed dtypes, non-numeric cols get dropped when an arithmetic operation i performed. \nFor example, in the following code snippet, column 'meta' will be missing from y.\n\n```\nx = DataMatrix([[0,1,2]], index=['ro'],  columns=['c0','c1','c2'])\nx['meta'] = 'bar'\ny = x + 1\n```\n\nThis is easy to fix, or at least give the option to set the behavior to just ignore non-numeric data, rather than omitting them. \n\nb) I often wish to treat metadata differently than the 'main' data, be it numeric or not. For example, consider the following object:\n\n```\nx = DataMatrix([[100, 500, 20],[200,50,12]], index=['New York', 'Boston'],  columns=['dogs','cats','Mean Temperature [c]']),\n```\n\ngiving the number of dogs and cats in different cities, and the mean annual temperature in these city. \nOne may want to normalize the number of dogs/cats by their total number in all cities, but keep the unnormalized temperatures. Currently, this would require remembering which columns are metadata columns, and treat these differently, which can be a hassle, and lead to mistakes.\n\nCurrently, I'm supporting metadata by adding attributes to the DataFrame/Matrix objects, which would contain metadata objects. These objects would themselves be DataFrame/Matrix objects.\nI've got a very crude version of this working, but I'll update it to the latest pandas version, and add methods for sorting/filtering/grouping by metadata.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/1628604",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-1628604",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 1628604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Mjg2MDQ=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-22T00:30:36Z",
    "updated_at": "2011-07-22T00:59:29Z",
    "author_association": "MEMBER",
    "body": "Cool let me know how it goes. I agree that maybe the sensible default behavior when you do arithmetic with mixed dtypes is to just ignore the non-numeric data and let everything else pass through. There are some issues I haven't thought much about like, what would DataFrame + Series yield if the DataFrame contains mixed-dtype data? In R land this isn't exactly a solved problem and is very much DIY, but crafting some kind of flexible solution would be nice. Like you might want something like:\n\n```\ngrouped = df.groupby('metacol1')\ntransformed = grouped.transform({'col1' : do_something,\n                                'col2' : do_something_else})\n```\n\nso you can selectively apply transforms and leave the other columns unaltered. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2777217",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-2777217",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 2777217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzcyMTc=",
    "user": {
      "login": "lodagro",
      "id": 1094464,
      "node_id": "MDQ6VXNlcjEwOTQ0NjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1094464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lodagro",
      "html_url": "https://github.com/lodagro",
      "followers_url": "https://api.github.com/users/lodagro/followers",
      "following_url": "https://api.github.com/users/lodagro/following{/other_user}",
      "gists_url": "https://api.github.com/users/lodagro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lodagro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lodagro/subscriptions",
      "organizations_url": "https://api.github.com/users/lodagro/orgs",
      "repos_url": "https://api.github.com/users/lodagro/repos",
      "events_url": "https://api.github.com/users/lodagro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lodagro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-17T15:25:33Z",
    "updated_at": "2011-11-17T15:25:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Currently both Series and DataFrame have a _constructor property. However this is not used consistently, which is needed for subclassing.\n\nThe way i understand `_constructor` to be used when subclassing is as following:\n\n``` python\nclass MySeries(pandas.Series):\n    @property\n    def _constructor(self):\n        return MySeries\n```\n\nSeries:\n- `_constructor` only used in the `append()` method\n- For many methods `_constructor` could be used. e.g `Series.apply()` returns a Series.\n- For some methods it is maybe not so obvious what to do e.g `Series.combine()`\n\nDataFrame:\n- same here, i believe in several methods `_constructor()` can be used iso `DataFrame` directly.\n\nWhy do i want to subclass?\n- Change existing methods. e.g `describe()` is nice, but i add more fields in the description\n- add extra methods\n- hold more information, e.g unit of each column, a specification function / column\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2783815",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-2783815",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 2783815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODM4MTU=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-17T23:48:29Z",
    "updated_at": "2011-11-17T23:48:29Z",
    "author_association": "MEMBER",
    "body": "You don't need to subclass to do the first two things on your list--you can just add methods to Series, e.g.:\n\n```\ndef f(self, *args, **kwargs):\n    # do something\n\nSeries.method_name = f\n```\n\nThis goes for modifying describe also. \n\nThe last item is a bit trickier. It indeed might be nice to add more metadata to DataFrame-- I agree it should be easier to subclass, though. Subclassing DataFrame should be much more straightforward than subclassing Series, it's just a matter of consistency. The only real way is to write a test suite for a subclassed DataFrame and start hammering down all the issues.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5958548",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-5958548",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 5958548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTg1NDg=",
    "user": {
      "login": "BrenBarn",
      "id": 1439047,
      "node_id": "MDQ6VXNlcjE0MzkwNDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrenBarn",
      "html_url": "https://github.com/BrenBarn",
      "followers_url": "https://api.github.com/users/BrenBarn/followers",
      "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions",
      "organizations_url": "https://api.github.com/users/BrenBarn/orgs",
      "repos_url": "https://api.github.com/users/BrenBarn/repos",
      "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrenBarn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-28T03:11:20Z",
    "updated_at": "2012-05-28T03:11:20Z",
    "author_association": "NONE",
    "body": "Was there a final decision on this?  I see that the issue was closed but I don't see an explanation.  I too would like to see DataFrames (and other pandas classes) become more amenable to subclassing.  Monkeypatching seems much more hackish, and also doesn't allow for the case where you want custom initialization.  The way pandas is now, with the class names hard coded in individual methods, instead of using type(self) or similar, is rather fragile.\n\nIt would really be nice if it were possible to subclass pandas classes in such a way that everything transparently \"worked\" with creating the custom subclasses instead of the basic Pandas classes.  This would make it possible to create custom DataFrames for different applications.  These could, for instance, store extra metadata or computed statistics automatically.\n\nFor my own case, I was hoping to extend DataFrame to allow a more succinct subsetting syntax, where essentially df._ColName(val) is shorthand for df.ix[df['ColName']==val], and df._ColName(func) is shorthand for df.ix[func(df['ColName'])].  I have a little data-frame library that I wrote myself that uses this approach, and it's very handy for interactive exploration and slicing of datasets.  However, I wasn't able to accomplish this in a useful way, because indexing into my subclass returns a pandas DataFrame and not an instance of my subclass.  It would be great if pandas allowed this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/5974242",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-5974242",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 5974242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzQyNDI=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-29T01:21:28Z",
    "updated_at": "2012-05-29T01:21:41Z",
    "author_association": "MEMBER",
    "body": "My position on this is that I would like Series/DataFrame/etc. to be easier to subclass, but it's not a priority for me and I can't afford to spend any time on it for the foreseeable future. If there were some financial support for it, that would be a different story.\n\nThat being said, I will happily accept pull requests or otherwise code contributions that make the changes necessary to make DataFrame more amenable to subclassing. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6522745",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-6522745",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 6522745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjI3NDU=",
    "user": {
      "login": "BrenBarn",
      "id": 1439047,
      "node_id": "MDQ6VXNlcjE0MzkwNDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrenBarn",
      "html_url": "https://github.com/BrenBarn",
      "followers_url": "https://api.github.com/users/BrenBarn/followers",
      "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions",
      "organizations_url": "https://api.github.com/users/BrenBarn/orgs",
      "repos_url": "https://api.github.com/users/BrenBarn/repos",
      "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrenBarn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-23T05:29:36Z",
    "updated_at": "2012-06-23T05:29:36Z",
    "author_association": "NONE",
    "body": "It seems there some changes that could be made pretty easily.  As lodagro mentioned in an earlier comment, DataFrame has a _constructor method which appears to be set up to parameterize self-instantiation, but it's not used in most cases.  There are a couple methods that call `self._constructor(blah)` but most just have `DataFrame(blah)` hard-coded.  Within the DataFrame class, a simple replacement of all calls to DataFrame() with calls to self._constructor() would make a considerable difference.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6527249",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-6527249",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 6527249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjcyNDk=",
    "user": {
      "login": "dandavison",
      "id": 52205,
      "node_id": "MDQ6VXNlcjUyMjA1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/52205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dandavison",
      "html_url": "https://github.com/dandavison",
      "followers_url": "https://api.github.com/users/dandavison/followers",
      "following_url": "https://api.github.com/users/dandavison/following{/other_user}",
      "gists_url": "https://api.github.com/users/dandavison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dandavison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dandavison/subscriptions",
      "organizations_url": "https://api.github.com/users/dandavison/orgs",
      "repos_url": "https://api.github.com/users/dandavison/repos",
      "events_url": "https://api.github.com/users/dandavison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dandavison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-23T18:58:11Z",
    "updated_at": "2012-06-23T18:58:11Z",
    "author_association": "NONE",
    "body": "I started to create a subclass of Series to model discrete probability distributions before coming across this problem. It can definitely be done with composition instead, but I do think not being able to subclass easily is a trap which will surprise users.\n\n@wesm I see your post above regarding priority for this; just adding a +1 to show it would be appreciated if someone does it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10109499",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-10109499",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 10109499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTA5NDk5",
    "user": {
      "login": "yarivm",
      "id": 2735044,
      "node_id": "MDQ6VXNlcjI3MzUwNDQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2735044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yarivm",
      "html_url": "https://github.com/yarivm",
      "followers_url": "https://api.github.com/users/yarivm/followers",
      "following_url": "https://api.github.com/users/yarivm/following{/other_user}",
      "gists_url": "https://api.github.com/users/yarivm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yarivm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yarivm/subscriptions",
      "organizations_url": "https://api.github.com/users/yarivm/orgs",
      "repos_url": "https://api.github.com/users/yarivm/repos",
      "events_url": "https://api.github.com/users/yarivm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yarivm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T12:55:51Z",
    "updated_at": "2012-11-06T12:56:11Z",
    "author_association": "NONE",
    "body": "+1 vote to make DataFrame easier to subclass ASAP.\nThis issue should be opened.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10132013",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-10132013",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 10132013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTMyMDEz",
    "user": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T23:14:54Z",
    "updated_at": "2012-11-06T23:14:54Z",
    "author_association": "NONE",
    "body": "This was _really_ confusing for me. I wasted an hour and half trying to figure out why `MyClass(pd.Series)` constructor was returning pd.Series instances. Should have done a google search first.\n\nIn my case, I'm modifying the behavior of `Series` for an accounting application I am writing, modifying in particular how a couple of arithmetic operators function. I ended up tucking the array into instance variable instead, and implementing the arithmetic operators that I needed.\n\nIt would have been much more Pythonic if pandas used `self.__class__()` to create new instances.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10132192",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-10132192",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 10132192,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTMyMTky",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T23:21:09Z",
    "updated_at": "2012-11-06T23:21:09Z",
    "author_association": "MEMBER",
    "body": "Converting this to an open issue until someone has a chance to work on it. It's still not a development priority for me\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11089244",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-11089244",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 11089244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg5MjQ0",
    "user": {
      "login": "sebpiq",
      "id": 299835,
      "node_id": "MDQ6VXNlcjI5OTgzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/299835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebpiq",
      "html_url": "https://github.com/sebpiq",
      "followers_url": "https://api.github.com/users/sebpiq/followers",
      "following_url": "https://api.github.com/users/sebpiq/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebpiq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebpiq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebpiq/subscriptions",
      "organizations_url": "https://api.github.com/users/sebpiq/orgs",
      "repos_url": "https://api.github.com/users/sebpiq/repos",
      "events_url": "https://api.github.com/users/sebpiq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebpiq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T15:18:48Z",
    "updated_at": "2012-12-06T15:18:48Z",
    "author_association": "NONE",
    "body": "Has there been any progress on this ? If not, I can try ... cause I need this as well.\nAny idea which files will have to be modified ? Is it enough to modify all datastructures (Index, Series, DataFrame, ...), or is there some hidden nasty stuff that'll have to be modified as well ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11089629",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-11089629",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 11089629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg5NjI5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T15:26:53Z",
    "updated_at": "2012-12-06T15:26:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Take at look at these PR (not completely merged yet) - they provide experimental support for a generic sub-class of Panel. The panelnd has factory methods to create these classes.\n\nhttps://github.com/pydata/pandas/pull/2407 (not merged yet) - docs and such\nhttps://github.com/pydata/pandas/pull/2242 - the main implementation\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11090080",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-11090080",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 11090080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDkwMDgw",
    "user": {
      "login": "sebpiq",
      "id": 299835,
      "node_id": "MDQ6VXNlcjI5OTgzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/299835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebpiq",
      "html_url": "https://github.com/sebpiq",
      "followers_url": "https://api.github.com/users/sebpiq/followers",
      "following_url": "https://api.github.com/users/sebpiq/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebpiq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebpiq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebpiq/subscriptions",
      "organizations_url": "https://api.github.com/users/sebpiq/orgs",
      "repos_url": "https://api.github.com/users/sebpiq/repos",
      "events_url": "https://api.github.com/users/sebpiq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebpiq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T15:36:51Z",
    "updated_at": "2012-12-06T15:36:51Z",
    "author_association": "NONE",
    "body": "I feel dumb ... I don't even manage to build the library : \n\n```\n> python setup.py build_ext --inplace\nrunning build_ext\nbuilding 'pandas.index' extension\ngcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/home/spiq/pandas/env/local/lib/python2.7/site-packages/numpy/core/include -Ipandas/src/klib -Ipandas/src -I/usr/include/python2.7 -c pandas/index.c -o build/temp.linux-i686-2.7/pandas/index.o\ngcc: error: pandas/index.c: No such file or directory\ngcc: fatal error: no input files\ncompilation terminated.\nerror: command 'gcc' failed with exit status 4\n```\n\nAny pointer ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11090312",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-11090312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 11090312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDkwMzEy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T15:42:44Z",
    "updated_at": "2012-12-06T15:42:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "make sure you update to the current master; a lot of things moved around recently (esp the cython/c code)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11108778",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-11108778",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 11108778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTA4Nzc4",
    "user": {
      "login": "sebpiq",
      "id": 299835,
      "node_id": "MDQ6VXNlcjI5OTgzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/299835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebpiq",
      "html_url": "https://github.com/sebpiq",
      "followers_url": "https://api.github.com/users/sebpiq/followers",
      "following_url": "https://api.github.com/users/sebpiq/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebpiq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebpiq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebpiq/subscriptions",
      "organizations_url": "https://api.github.com/users/sebpiq/orgs",
      "repos_url": "https://api.github.com/users/sebpiq/repos",
      "events_url": "https://api.github.com/users/sebpiq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebpiq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T22:22:54Z",
    "updated_at": "2012-12-06T22:22:54Z",
    "author_association": "NONE",
    "body": "Arr ... that's taking too much time. I was a bit too optimistic I guess, thinking that I could change everything without even knowing the code. For what it's worth, here is what I did : 98e1fadbf9395e88115044db3e5fc8e8f3a46012 there is ~ 5 errors which I couldn't solve, and ~15 failures in the tests. Sorry for all the fuss. I'll find a hack for my thing for the moment, but I'll follow the progress of this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50561915",
    "html_url": "https://github.com/pandas-dev/pandas/issues/60#issuecomment-50561915",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/60",
    "id": 50561915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTYxOTE1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-30T01:12:20Z",
    "updated_at": "2014-07-30T01:12:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing...this is pretty easy now\n"
  }
]
