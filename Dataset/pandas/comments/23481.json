[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435715593",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23481#issuecomment-435715593",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23481",
    "id": 435715593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTcxNTU5Mw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-04T22:46:26Z",
    "updated_at": "2018-11-04T22:46:26Z",
    "author_association": "MEMBER",
    "body": "Makes sense to me. As far as the prefix goes do you see a logical way to target particular modules / package structures? Anything lower than that would probably be too detailed (even module-level might be) so if we identify a package to start could open that as a particular issue for the community to solve as a pre-cursor"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435723901",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23481#issuecomment-435723901",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23481",
    "id": 435723901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTcyMzkwMQ==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T00:33:33Z",
    "updated_at": "2018-11-05T00:33:33Z",
    "author_association": "MEMBER",
    "body": "My first thought was on using files, as we have for the doctests. Then I realized that we don't get the docstrings from the files by instrospection, but we instead get the list of public objects from the docs as strings. So, my idea is to simply have an `if obj_name.startswith(prefix):`.\r\n\r\nBut I think the best we can do is start by something simple, and then see in practice if we need anything else or not. May adding a `-` before the prefix we can exclude those patterns. But I'll see when I have it implemented and try the first real cases."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436184952",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23481#issuecomment-436184952",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23481",
    "id": 436184952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjE4NDk1Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T09:23:13Z",
    "updated_at": "2018-11-06T09:23:13Z",
    "author_association": "MEMBER",
    "body": ">  So, my idea is to simply have an if obj_name.startswith(prefix):.\r\n\r\nThat seems fine with me. Or more general could be a pattern. Not sure if such a more advanced selector will be needed though (maybe a use case would be to select/deselect a single method name accross Series/DataFrame(/Index). This might even be useful for interactive usage when working on a docstring).\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436189284",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23481#issuecomment-436189284",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23481",
    "id": 436189284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjE4OTI4NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T09:37:05Z",
    "updated_at": "2018-11-06T09:37:05Z",
    "author_association": "MEMBER",
    "body": "One general concern: how do you envision to use it on the CI? How do you now think we will specify which functions to run and which errors to check? \r\n\r\nBecause with the outline above (and the PR), you can specify a subset of functions and/or a set of error codes to check. \r\n\r\nBut I can imagine that at some point, we could need a higher granularity (like, for this function ignore this error code, for that function ignore that error code, ..). In a similar way that you can skip a specific a doctest with a flag, or have the special comments to overrule flake8 in specific cases. \r\n\r\nOr the goal will be that every docstring will pass the validation completely? (I think we currently have some cases where we are fine with a certain error, because of limitations in the script, or sometimes making an exception might make something clearer / more readable, etc)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436195020",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23481#issuecomment-436195020",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23481",
    "id": 436195020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjE5NTAyMA==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T09:55:40Z",
    "updated_at": "2018-11-06T09:55:40Z",
    "author_association": "MEMBER",
    "body": "That's an interesting discussion. I don't know right now, I think we'll have to experiment a bit once this is ready.\r\n\r\nThe first thing I'd like is to validate specific errors. For example, parameter mismatches and pep8 issues in the examples. I need to see how many of them we have, but if there are few for `Series.` I'll create issues for them, and once fixed add to the CI:\r\n```\r\n$ ./scripts/validate_docstrings.py --prefix=\"pandas.Series.\" --errors=\"PR01,PR02,PR03,EX03\"\r\n```\r\n\r\nExcluding docstrings from the validation is likely to be useful. And I'd also like to be able to say `--errors=EX` and validate all the examples errors. But I prefer to take care of them in the PR where the script starts to be used in the CI (this ones is already too complex, and when adding to the CI is when I'll really know what else I need).\r\n\r\nDoes this make sense?"
  }
]
