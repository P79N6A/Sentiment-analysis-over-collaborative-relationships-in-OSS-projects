[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19119307",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3795#issuecomment-19119307",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3795",
    "id": 19119307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTE5MzA3",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-07T16:57:11Z",
    "updated_at": "2013-06-07T16:57:11Z",
    "author_association": "MEMBER",
    "body": "@jreback suggesting should return a frame with floats converted to str (which pandas will then cvt to object)? or convert to object (which still leaves them as floats)...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19119578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3795#issuecomment-19119578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3795",
    "id": 19119578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTE5NTc4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-07T17:01:53Z",
    "updated_at": "2013-06-07T17:01:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback\n\nop wanted a string dtype.....\n\nthe answer is to do:\n\n`pd.read_csv('a',index_col=0,dtype=np.object')`\n\nI am just suggesting \n\na) if we see a dtype==`str` (string, `str`, or `np.str`), convert it to `np.object`\nb) validate that dtype is not some weird thing (which actually happens I think already), it\njust tries to coerce and if it fails its left as `object`\n\nso this would just avoid the `np.str` trap\n\nhowever I think there is also a case of\n\n`dtype='datetime64[ns]'` (or variants of) which should be ignored/raise an error (as you really need to pass `parse_dates`)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19119752",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3795#issuecomment-19119752",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3795",
    "id": 19119752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTE5NzUy",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-07T17:05:25Z",
    "updated_at": "2013-06-07T17:07:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "It has to be a valid type (at least) ... I like the idea of special casing str.\n\nWith regards to last point I guess conceivably you may know the things you're passing are datetime64[ns] already... ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19120104",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3795#issuecomment-19120104",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3795",
    "id": 19120104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTIwMTA0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-07T17:12:00Z",
    "updated_at": "2013-06-07T17:12:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes...I could see something like:\n\n`read_csv(....dtype = { 'A' : np.str, 'B' : 'datetime64'  })`\n\nbeing equivalent to\n\n`read_csv(dtype = { 'A' : np.object }, parse_dates=['B'])`\n\nfor consistency then you could just construct a dtype dict (rather than having to separate out the date fields)\n(and then you could accept dtype-like string that basically all go to datetime64[ns], e.g. datetime64 is not a valid dtype\n\n(also showing the conversion of the 'string-like' dtypes\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19120710",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3795#issuecomment-19120710",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3795",
    "id": 19120710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTIwNzEw",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-07T17:22:41Z",
    "updated_at": "2013-06-07T17:23:07Z",
    "author_association": "MEMBER",
    "body": "i think special casing str is probably the way 2 go. what happens if someone passes `read_csv(dtype={'A': str, 'B': 'datetime64'}, parse_dates=['B'])`\n\n@jreback what's the reason again for not using numpy's string type? i've sort of dogmatically accepted `object` just because it doesn't really affect anything that i do, but now i'm a bit curious. does it have to with the fact that there's basically different dtype for every string length?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19120967",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3795#issuecomment-19120967",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3795",
    "id": 19120967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTIwOTY3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-07T17:26:57Z",
    "updated_at": "2013-06-07T17:26:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmmm...the first case should probably be an error\n\n`np.str` is special case that has fixed width for each item, while object is better because it allows variable length string (and any object actually). You get more perf by using np.str but less flexibility.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19122069",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3795#issuecomment-19122069",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3795",
    "id": 19122069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTIyMDY5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-07T17:46:23Z",
    "updated_at": "2013-06-07T17:46:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "fyi...looking at this closer, passing 'str' as the dtype actually works, but since the width of the string is 0 it does weird stuff....so that's the case to handle\n\ne.g. `np.dtype('S10')` 'works' (and returns object), but `np.dtype('S')` (which is what `'str'`) give you is an error\nthis is all in `parser.pyx/_convert_with_dtype`, pretty easy fix for the string issue\n"
  }
]
