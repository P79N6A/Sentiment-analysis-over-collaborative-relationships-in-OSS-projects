[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/477416576",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25891#issuecomment-477416576",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25891",
    "id": 477416576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzQxNjU3Ng==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T02:10:08Z",
    "updated_at": "2019-03-28T02:10:08Z",
    "author_association": "MEMBER",
    "body": "@toobaz thoughts here? I didn't realize we would infer alignment here at all so surprised either of these examples work though you would certainly have better insight"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/477470075",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25891#issuecomment-477470075",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25891",
    "id": 477470075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzQ3MDA3NQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T06:45:34Z",
    "updated_at": "2019-03-28T06:45:34Z",
    "author_association": "MEMBER",
    "body": "@WillAyd I'm surprised too. The operations shown should all return Series of NaNs.\r\n\r\n@mellesies you say\r\n\r\n\r\n> I'd expect the result to have an index that is essentially the union of the indices from `s1` and `s2`.\r\n\r\n... but although this might look intuitive in the example proposed, I think it is very difficult to generalize cleanly. What if for instance two ``Series`` have ``MultiIndex``es with same level names but no overlapping values? Truth is: in current pandas, we typically don't attribute too much relevance to level names in alignment (as opposed to their position).\r\n\r\nThis said, in case you were \"inspired\" by any reference in the docs to such nested alignment, could you share a pointer?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/477513127",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25891#issuecomment-477513127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25891",
    "id": 477513127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzUxMzEyNw==",
    "user": {
      "login": "mellesies",
      "id": 9558262,
      "node_id": "MDQ6VXNlcjk1NTgyNjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9558262?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mellesies",
      "html_url": "https://github.com/mellesies",
      "followers_url": "https://api.github.com/users/mellesies/followers",
      "following_url": "https://api.github.com/users/mellesies/following{/other_user}",
      "gists_url": "https://api.github.com/users/mellesies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mellesies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mellesies/subscriptions",
      "organizations_url": "https://api.github.com/users/mellesies/orgs",
      "repos_url": "https://api.github.com/users/mellesies/repos",
      "events_url": "https://api.github.com/users/mellesies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mellesies/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T09:18:11Z",
    "updated_at": "2019-03-28T09:18:11Z",
    "author_association": "NONE",
    "body": "This wasn't inspired by the docs. It \"just worked\", also on other levels (and I was very happy it did ;-). For example, where the indices don't align, NaNs are returned:\r\n\r\n```python\r\n# Create Series s1, with a scope over {T, N} and set two values\r\nindex1 = pd.MultiIndex.from_product([[], []], names=['T', 'N'])\r\ns1 = pd.Series(index=index1)\r\ns1['T.1A', 'N.0'] = 0.5\r\ns1['T.1A', 'N.1'] = 0.5\r\n\r\n# s1:\r\n# T     N  \r\n# T.1A  N.0    0.5\r\n#       N.1    0.5\r\n# dtype: float64\r\n\r\n# Create Series s2 with a scope over {N, M} and set a single value. \r\n# Note that 'N.1' is missing in the index.\r\nindex2 = pd.MultiIndex.from_product([[], []], names=['N', 'M'])\r\ns2 = pd.Series(index=index2)\r\ns2['N.0', 'M.0'] = 0.5\r\n\r\n# s2:\r\n# N    M  \r\n# N.0  M.0    0.5\r\n# dtype: float64\r\n\r\n# When multiplying s1 and s2 pandas will align the Series using the index.\r\n# Note that the index hs 3 levels: {N, T, M}\r\nprint(s1 * s2)\r\n\r\n# N    T     M  \r\n# N.0  T.1A  M.0    0.25\r\n# N.1  T.1A  NaN     NaN\r\n```\r\n\r\nWhen there are no overlapping indices, pandas will raise a ValueError, stating it cannot join without overlapping index names. I guess the expected/desired behaviour for non-overlapping indices depends on the use case, so I've implemented some code that computes the outer product for this situation (I'm working with probability tables/factors). But the error messages _suggests_ it was intentionally implemented?\r\n\r\n```python\r\n# Create Series s1, with a scope over {T, N}.\r\nindex1 = pd.MultiIndex.from_product([[], []], names=['T', 'N'])\r\ns1 = pd.Series(index=index1)\r\ns1['T.1A', 'N.0'] = 0.5\r\ns1['T.1A', 'N.1'] = 0.5\r\n\r\n# Create Series s2 with a scope over {X, Y}.\r\nindex2 = pd.MultiIndex.from_product([[], []], names=['X', 'Y'])\r\ns2 = pd.Series(index=index2)\r\ns2['x0', 'y0'] = 0.5\r\ns2['x1', 'y0'] = 0.5\r\n\r\n# This won't work ...\r\ntry:\r\n    s1 * s2\r\nexcept ValueError as e:\r\n    print(e)\r\n\r\n# cannot join with no overlapping index names\r\n```"
  }
]
