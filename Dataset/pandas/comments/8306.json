[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56026600",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56026600",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56026600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDI2NjAw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T11:35:53Z",
    "updated_at": "2014-09-18T11:35:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @immerrr\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56033584",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56033584",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56033584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDMzNTg0",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T12:53:35Z",
    "updated_at": "2014-09-18T13:12:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that the point in raising in such situations is to prevent guessing in the face of ambiguity.\n\nThere's an ambiguity when you do pretty much any binary operation between a naive and an aware timestamps as the former can correspond to about 40 different wallclock timestamps and it's unclear which one exactly, so this should be reported right away just as with vanilla python `datetime`.\n\nI have doubts about _\"subtraction of datetime like\"_ though as there's no ambiguity in subtracting  two aware timestamps from different timezones.  There also may be very annoying issues because AFAIR dst transition involves changing timezones and subtracting a properly localized summer timestamp from the winter one will raise then.\n\n_\"intersection / union / difference\"_  is ambiguous w.r.t what should be the tz of the result, seems ok to raise.\n\nAs for _\"reindex\"_, when I'm doing `output, reindexer = index.reindex(new_index)`, I expect `output` to contain the same elements as in `new_index` which in case of tz-aware dt-index includes the timezone, so I don't see anything ambiguous here and the operation _feels_ fine.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56034346",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56034346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56034346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDM0MzQ2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T13:00:43Z",
    "updated_at": "2014-09-18T13:00:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "The reason to raise on subtraction is that its almost always an unintended behavior. The user should have them in the same timezone. Yes you _can_ auto-convert it, but I just think that's asking for trouble. Reindexing is the same thing, yes it _can_ work (and maybe even is non-ambiguous), forget about transition times for a second. The problem is that it is almost never what you actually want and is likely an error. \n\ncc @rockg\ncc @sinhrks \ncc @ischwabacher\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56051143",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56051143",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56051143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDUxMTQz",
    "user": {
      "login": "rockg",
      "id": 3195015,
      "node_id": "MDQ6VXNlcjMxOTUwMTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3195015?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rockg",
      "html_url": "https://github.com/rockg",
      "followers_url": "https://api.github.com/users/rockg/followers",
      "following_url": "https://api.github.com/users/rockg/following{/other_user}",
      "gists_url": "https://api.github.com/users/rockg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rockg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rockg/subscriptions",
      "organizations_url": "https://api.github.com/users/rockg/orgs",
      "repos_url": "https://api.github.com/users/rockg/repos",
      "events_url": "https://api.github.com/users/rockg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rockg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T14:59:57Z",
    "updated_at": "2014-09-18T14:59:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that always forcing the user to convert themselves for subtraction makes the most sense.  Trying to guess what the user intends is always a frustrating endeavor for both the programmer and user.  \n\nFor reindex if the indices are the same size then I think it's fine as it is essentially a replacement.  But if you are using a method to fill in missing values, then it gets hairy.  Maybe we need to look at a couple of examples to get on the same page.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56052905",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56052905",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56052905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDUyOTA1",
    "user": {
      "login": "ischwabacher",
      "id": 4306187,
      "node_id": "MDQ6VXNlcjQzMDYxODc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4306187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischwabacher",
      "html_url": "https://github.com/ischwabacher",
      "followers_url": "https://api.github.com/users/ischwabacher/followers",
      "following_url": "https://api.github.com/users/ischwabacher/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischwabacher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischwabacher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischwabacher/subscriptions",
      "organizations_url": "https://api.github.com/users/ischwabacher/orgs",
      "repos_url": "https://api.github.com/users/ischwabacher/repos",
      "events_url": "https://api.github.com/users/ischwabacher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischwabacher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T15:11:37Z",
    "updated_at": "2014-09-18T15:13:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "My opinion made a complete about-face while I was writing this comment.  I now think the `reindex` question is morally equivalent to this:\n\n``` python\nIn [1]: import pandas as pd\n\nIn [2]: pd.Series(1, index=[1, 2, 3])\nOut[2]: \n1    1\n2    1\n3    1\ndtype: int64\n\nIn [3]: _.index\nOut[3]: Int64Index([1, 2, 3], dtype='int64')\n\nIn [4]: _2.reindex([1., 2., 3.])\nOut[4]: \n1    1\n2    1\n3    1\ndtype: int64\n\nIn [5]: _.index\nOut[5]: Float64Index([1.0, 2.0, 3.0], dtype='float64')\n\n```\n\nIt's like any other coercion of one value to an equal value of a different type.  Naive `Timestamp`s are, of course, unequal to aware `Timestamp`s, and the only contact between them should be via `tz_localize` (or `tz_forget`, if we ever decide to create such a thing).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56055190",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56055190",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56055190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDU1MTkw",
    "user": {
      "login": "rockg",
      "id": 3195015,
      "node_id": "MDQ6VXNlcjMxOTUwMTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3195015?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rockg",
      "html_url": "https://github.com/rockg",
      "followers_url": "https://api.github.com/users/rockg/followers",
      "following_url": "https://api.github.com/users/rockg/following{/other_user}",
      "gists_url": "https://api.github.com/users/rockg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rockg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rockg/subscriptions",
      "organizations_url": "https://api.github.com/users/rockg/orgs",
      "repos_url": "https://api.github.com/users/rockg/repos",
      "events_url": "https://api.github.com/users/rockg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rockg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T15:26:15Z",
    "updated_at": "2014-09-18T15:26:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "`tz_forget` was just implemented `tz_localize(None)`.  I agree the coercion is fine but if you have an daily series in US/Eastern and you reindex with a UTC hourly index with method='pad' what is that supposed to do?  Do you see changes in the new series at hour 4/5 (DST/not DST) or hour 0?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56055767",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56055767",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56055767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDU1NzY3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T15:29:51Z",
    "updated_at": "2014-09-18T15:30:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am thinking we should simply raise if its not a completely non-ambiguous conversion, e.g.\nif both/either are UTC/naive then its ok, otherwise raise?\n\nor are you ok with reindex on an Index returns a tuple of new_index, indexer\n\n[9] 'works' but is a bit odd (this is on master, I guess the suggestion is to make [9] work like [10]), but have tz='US/Eastern' in the result\n\n```\nIn [9]: date_range('20130101',periods=5,tz='US/Eastern').reindex(date_range('20130101',periods=3))\nOut[9]: \n(<class 'pandas.tseries.index.DatetimeIndex'>\n [2013-01-01, ..., 2013-01-03]\n Length: 3, Freq: D, Timezone: None, array([-1, -1, -1]))\n\nIn [10]: date_range('20130101',periods=5).reindex(date_range('20130101',periods=3))\nOut[10]: \n(<class 'pandas.tseries.index.DatetimeIndex'>\n [2013-01-01, ..., 2013-01-03]\n Length: 3, Freq: D, Timezone: None, array([0, 1, 2]))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56057193",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56057193",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56057193,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDU3MTkz",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T15:38:39Z",
    "updated_at": "2014-09-18T15:38:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Speaking of metadata and dst transitions, what happens now if there's a date range that starts in summer time and ends in winter time?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56060446",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56060446",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56060446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDYwNDQ2",
    "user": {
      "login": "ischwabacher",
      "id": 4306187,
      "node_id": "MDQ6VXNlcjQzMDYxODc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4306187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischwabacher",
      "html_url": "https://github.com/ischwabacher",
      "followers_url": "https://api.github.com/users/ischwabacher/followers",
      "following_url": "https://api.github.com/users/ischwabacher/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischwabacher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischwabacher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischwabacher/subscriptions",
      "organizations_url": "https://api.github.com/users/ischwabacher/orgs",
      "repos_url": "https://api.github.com/users/ischwabacher/repos",
      "events_url": "https://api.github.com/users/ischwabacher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischwabacher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T15:57:33Z",
    "updated_at": "2014-09-18T16:03:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Right, I was even paying attention to the `tz_convert(None)` issue.  Herp derp.\n\nI think since a `DatetimeIndex` is conceptually an array of `Timestamp`s, each of which represents a precise moment in time, this conversion is pretty straightforward.  I approve of this current behavior:\n\n``` python\nIn [1]: import pandas as pd\n\nIn [2]: idx = pd.date_range('20131101', tz='America/Chicago', periods=7)\n\nIn [3]: newidx = pd.date_range('20131103', tz='UTC', periods=36, freq='H')\n\nIn [4]: pd.Series(range(7), index=idx).reindex(newidx, method='ffill')\nOut[4]: \n2013-11-03 00:00:00+00:00    1\n2013-11-03 01:00:00+00:00    1\n2013-11-03 02:00:00+00:00    1\n2013-11-03 03:00:00+00:00    1\n2013-11-03 04:00:00+00:00    1\n2013-11-03 05:00:00+00:00    2  # midnight before DST ends, offset = -0500\n2013-11-03 06:00:00+00:00    2\n2013-11-03 07:00:00+00:00    2\n2013-11-03 08:00:00+00:00    2\n2013-11-03 09:00:00+00:00    2\n2013-11-03 10:00:00+00:00    2\n2013-11-03 11:00:00+00:00    2\n2013-11-03 12:00:00+00:00    2\n2013-11-03 13:00:00+00:00    2\n2013-11-03 14:00:00+00:00    2\n2013-11-03 15:00:00+00:00    2\n2013-11-03 16:00:00+00:00    2\n2013-11-03 17:00:00+00:00    2\n2013-11-03 18:00:00+00:00    2\n2013-11-03 19:00:00+00:00    2\n2013-11-03 20:00:00+00:00    2\n2013-11-03 21:00:00+00:00    2\n2013-11-03 22:00:00+00:00    2\n2013-11-03 23:00:00+00:00    2\n2013-11-04 00:00:00+00:00    2\n2013-11-04 01:00:00+00:00    2\n2013-11-04 02:00:00+00:00    2\n2013-11-04 03:00:00+00:00    2\n2013-11-04 04:00:00+00:00    2\n2013-11-04 05:00:00+00:00    2\n2013-11-04 06:00:00+00:00    3  # midnight after DST ends, offset = -0600\n2013-11-04 07:00:00+00:00    3\n2013-11-04 08:00:00+00:00    3\n2013-11-04 09:00:00+00:00    3\n2013-11-04 10:00:00+00:00    3\n2013-11-04 11:00:00+00:00    3\nFreq: H, dtype: int64\n```\n\nand disapprove of this current behavior:\n\n``` python\nIn [24]: pd.Series(range(7), index=idx).reindex(newidx.tz_convert(None), method='ffill')\nOut[24]: # Should raise\n2013-11-03 00:00:00    1\n2013-11-03 01:00:00    1\n2013-11-03 02:00:00    1\n2013-11-03 03:00:00    1\n2013-11-03 04:00:00    1\n2013-11-03 05:00:00    2\n2013-11-03 06:00:00    2\n2013-11-03 07:00:00    2\n2013-11-03 08:00:00    2\n2013-11-03 09:00:00    2\n2013-11-03 10:00:00    2\n2013-11-03 11:00:00    2\n2013-11-03 12:00:00    2\n2013-11-03 13:00:00    2\n2013-11-03 14:00:00    2\n2013-11-03 15:00:00    2\n2013-11-03 16:00:00    2\n2013-11-03 17:00:00    2\n2013-11-03 18:00:00    2\n2013-11-03 19:00:00    2\n2013-11-03 20:00:00    2\n2013-11-03 21:00:00    2\n2013-11-03 22:00:00    2\n2013-11-03 23:00:00    2\n2013-11-04 00:00:00    2\n2013-11-04 01:00:00    2\n2013-11-04 02:00:00    2\n2013-11-04 03:00:00    2\n2013-11-04 04:00:00    2\n2013-11-04 05:00:00    2\n2013-11-04 06:00:00    3\n2013-11-04 07:00:00    3\n2013-11-04 08:00:00    3\n2013-11-04 09:00:00    3\n2013-11-04 10:00:00    3\n2013-11-04 11:00:00    3\nFreq: H, dtype: int64\n```\n\nAlso, if we were to have the values change at midnight UTC, there might be the undesirable possibility of repeated conversions going \"around the world\" and ending up off by a day.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56064400",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56064400",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56064400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDY0NDAw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T16:23:07Z",
    "updated_at": "2014-09-18T16:23:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ischwabacher interesting, so you are ok with reindexing a tz-aware with a UTC (explicity) series, but not a naive series. Maybe like `tz_convert/localize` should disallow a tz-aware with naive. (may go even further and require them to be the SAME tz). That way the rule is simple:\n- if both have same tz or are both naive -> ok\n- else raise\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56068684",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56068684",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56068684,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDY4Njg0",
    "user": {
      "login": "ischwabacher",
      "id": 4306187,
      "node_id": "MDQ6VXNlcjQzMDYxODc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4306187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischwabacher",
      "html_url": "https://github.com/ischwabacher",
      "followers_url": "https://api.github.com/users/ischwabacher/followers",
      "following_url": "https://api.github.com/users/ischwabacher/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischwabacher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischwabacher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischwabacher/subscriptions",
      "organizations_url": "https://api.github.com/users/ischwabacher/orgs",
      "repos_url": "https://api.github.com/users/ischwabacher/repos",
      "events_url": "https://api.github.com/users/ischwabacher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischwabacher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T16:53:01Z",
    "updated_at": "2014-09-18T17:47:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "My stance on naive times is that they are bad and they should feel bad.  They correspond to an oversimplified version of reality, and they will necessarily cause headaches if they are mixed with time-zone-aware objects.  These headaches should happen right away, not in several months when a DST transition occurs and everything breaks.  The naive `reindex` from the example interprets naive times as UTC, but the user should have to make that explicit.\n\nOn the other hand, the whole point of time zone awareness is that aware times refer to a specific point in time, and can be compared even if they're not in the same time zone.  `reindex`ing with a `DatetimeIndex` in a different time zone makes sense.  Subtracting two aware times in different time zones makes sense.  In these cases, there _is_ a right thing to do, and we shouldn't make the user jump though hoops in order to do it.\n\nTaking the union / intersection of collections of times in different time zones is more problematic, but I think the stdlib precedent should be good enough for us:\n\n``` python\nIn [1]: {1} & {1.0}\nOut[1]: {1.0}\n\nIn [2]: {1.0} & {1}\nOut[2]: {1}\n\nIn [3]: {1} | {1.0}\nOut[3]: {1}\n\nIn [4]: {1.0} | {1}\nOut[4]: {1.0}\n```\n\nEDIT: Erm, numpy sets a conflicting but ultimately reasonable precedent:\n\n``` python\nIn [1]: import numpy as np\n\nIn [2]: np.intersect1d(np.arange(3, dtype=int), np.arange(1, 4, dtype=float))\nOut[2]: array([ 1.,  2.])\n\nIn [3]: np.intersect1d(np.arange(3, dtype=float), np.arange(1, 4, dtype=int))\nOut[3]: array([ 1.,  2.])\n\nIn [4]: np.union1d(np.arange(3, dtype='i4'), np.arange(1, 4, dtype='i2'))\nOut[4]: array([0, 1, 2, 3], dtype=int32)\n\nIn [5]: np.union1d(np.arange(3, dtype='i4'), np.arange(1, 4, dtype='i8'))\nOut[5]: array([0, 1, 2, 3])\n```\n\nConforming to this would mean converting all the times to UTC; conforming to the stdlib would mean taking either the first or the second time zone as appropriate.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56137770",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56137770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56137770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTM3Nzcw",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-19T05:51:12Z",
    "updated_at": "2014-09-19T05:51:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ischwabacher thank you, I found out something new today with those set examples :)\n\nNumpy examples are interesting, too, but all of them exercise lossless casts (well, almost, in float64 there're 53 significand bits)  which follow a simple set of rules that are surprisingly unambiguous, which you can see for yourself by doing something like:\n\n``` python\nIn [32]: for i,c1 in enumerate( np.typecodes['All']):\n    for c2 in np.typecodes['All'][i+1:]:\n        if c1 != c2 and np.can_cast(c1, c2) and np.can_cast(c2, c1):\n            print '{d1}({c1})<=>{d2}({c2})'.format(c1=c1,d1=np.dtype(c1), c2=c2,d2=np.dtype(c2))\n   ....:             \nint64(l)<=>int64(q)\nint64(l)<=>int64(p)\nint64(q)<=>int64(p)\nuint64(L)<=>uint64(Q)\nuint64(L)<=>uint64(P)\nuint64(Q)<=>uint64(P)\n|V0(V)<=>object(O)\n```\n\nIn numpy only type aliases are mutually castable and the rest of the relations are one-sided. Which departs somewhat from our case because tz conversions are lossless in both directions and thus can be seen as ambiguous. Declaring UTC as a \"superclass\" might work but it would come as a surprise for me at least, like if I'd put first some euro and then some pounds to my pocket and they come out as dollars instead.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56190038",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8306#issuecomment-56190038",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8306",
    "id": 56190038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTkwMDM4",
    "user": {
      "login": "ischwabacher",
      "id": 4306187,
      "node_id": "MDQ6VXNlcjQzMDYxODc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4306187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ischwabacher",
      "html_url": "https://github.com/ischwabacher",
      "followers_url": "https://api.github.com/users/ischwabacher/followers",
      "following_url": "https://api.github.com/users/ischwabacher/following{/other_user}",
      "gists_url": "https://api.github.com/users/ischwabacher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ischwabacher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ischwabacher/subscriptions",
      "organizations_url": "https://api.github.com/users/ischwabacher/orgs",
      "repos_url": "https://api.github.com/users/ischwabacher/repos",
      "events_url": "https://api.github.com/users/ischwabacher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ischwabacher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-19T15:09:32Z",
    "updated_at": "2014-09-19T16:10:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> thank you, I found out something new today with those set examples :)\n\nSo did I; I didn't know what was going to come out until I tried them.  :)\n\nI like your argument about there not being distinct mutually castable types, but I think it's really important not to have friction when handling time-zone-aware objects.  Then again, most of the friction I've been experiencing has been caused by my local `Timestamp`s getting coerced into UTC `datetime64`s...\n\nIf numpy disallows intercoercible types because it has a clever algorithm for computing output dtype from input dtype that doesn't work in the presence of cycles in the coercion graph, and we want to appropriate this algorithm, then that would be a pretty strong argument against allowing coercion across time zones, except possibly to UTC.  But maybe it's not _too_ surprising that when you put Lire, Francs and Marks together in your pocket, they come out as Euros?\n"
  }
]
