[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285146163",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15621#issuecomment-285146163",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15621",
    "id": 285146163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTE0NjE2Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T19:40:47Z",
    "updated_at": "2017-03-08T19:40:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah this is all in python code :<\r\n\r\nIIRC @wesm has a plan for this in pandas2, so maybe it would be possible to make use of some of that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285921028",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15621#issuecomment-285921028",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15621",
    "id": 285921028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTkyMTAyOA==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-12T04:14:03Z",
    "updated_at": "2017-03-12T04:14:03Z",
    "author_association": "MEMBER",
    "body": "Converting lists of dictionaries faster in `json_normalize` seems perfectly reasonable. I intend to use RapidJSON (https://github.com/miloyip/nativejson-benchmark) to create a faster native JSON->DataFrame reader, since we can circumvent Python objects altogether that way. This can happen well before pandas2 ships by using Arrow tables an intermediary en route to pandas"
  }
]
