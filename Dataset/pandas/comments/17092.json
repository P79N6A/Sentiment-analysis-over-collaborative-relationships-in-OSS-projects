[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318303331",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17092#issuecomment-318303331",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17092",
    "id": 318303331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODMwMzMzMQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-27T09:02:27Z",
    "updated_at": "2017-07-27T09:02:27Z",
    "author_association": "MEMBER",
    "body": "xref #16529 : This touches upon a larger question of whether we want to deprecate / remove the `inplace` parameter, which has been a point of contention in terms of the future of `pandas`.\r\n\r\n@ivallesp : Do you by any chance have code / data that *could* be used to replicate this issue?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318330836",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17092#issuecomment-318330836",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17092",
    "id": 318330836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODMzMDgzNg==",
    "user": {
      "login": "ivallesp",
      "id": 7207415,
      "node_id": "MDQ6VXNlcjcyMDc0MTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7207415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivallesp",
      "html_url": "https://github.com/ivallesp",
      "followers_url": "https://api.github.com/users/ivallesp/followers",
      "following_url": "https://api.github.com/users/ivallesp/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivallesp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivallesp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivallesp/subscriptions",
      "organizations_url": "https://api.github.com/users/ivallesp/orgs",
      "repos_url": "https://api.github.com/users/ivallesp/repos",
      "events_url": "https://api.github.com/users/ivallesp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivallesp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-27T11:03:22Z",
    "updated_at": "2017-07-27T11:07:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gfyoung Sure, find it attached. Just to make it clear, the usage of the `inplace` parameter does not change anything in terms of memory usage. Can I help with something? Is there any idea of how to improve the drop function or how to design a more efficient function? I would like to collaborate on this :D\r\n\r\nI profile using the memory profiler extension of Jupyter Notebooks. \r\n\r\n\r\n\r\n```\r\nimport pandas as pd\r\nfrom sklearn.datasets import make_classification\r\n\r\nN_FEATURES=100\r\nN_SAMPLES=1000000\r\nx=make_classification(n_samples=1000000, n_features=100)[0]\r\ndf = pd.DataFrame(x[0], columns = [\"VAR_%s\"%x for x in range(N_FEATURES)])\r\n\r\n# Begining of code to profile ------------------------------------\r\ndf.drop(df.columns[0:50], inplace=True, axis=1)\r\n# End of code to profile -----------------------------------------\r\n\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318338263",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17092#issuecomment-318338263",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17092",
    "id": 318338263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODMzODI2Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-27T11:42:02Z",
    "updated_at": "2017-07-27T11:42:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Just to make it clear, the usage of the inplace parameter does not change anything in terms of memory usage.\r\n\r\nwhere is it stated that this actually does anything w.r.t. memory usage? virtually all ``inplace`` operations make a copy and then re-assign the data. \r\n\r\nIt *may* release the memory, depending on IF the underlying data was a view or a copy.\r\n```\r\nIn [32]: df = pd.DataFrame(np.random.randn(100000, 10))\r\n\r\nIn [33]: df.info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nRangeIndex: 100000 entries, 0 to 99999\r\nData columns (total 10 columns):\r\n0    100000 non-null float64\r\n1    100000 non-null float64\r\n2    100000 non-null float64\r\n3    100000 non-null float64\r\n4    100000 non-null float64\r\n5    100000 non-null float64\r\n6    100000 non-null float64\r\n7    100000 non-null float64\r\n8    100000 non-null float64\r\n9    100000 non-null float64\r\ndtypes: float64(10)\r\nmemory usage: 7.6 MB\r\n\r\nIn [34]: df.drop([0, 1], axis=1, inplace=True)\r\n\r\nIn [35]: df.info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nRangeIndex: 100000 entries, 0 to 99999\r\nData columns (total 8 columns):\r\n2    100000 non-null float64\r\n3    100000 non-null float64\r\n4    100000 non-null float64\r\n5    100000 non-null float64\r\n6    100000 non-null float64\r\n7    100000 non-null float64\r\n8    100000 non-null float64\r\n9    100000 non-null float64\r\ndtypes: float64(8)\r\nmemory usage: 6.1 MB\r\n```\r\n\r\nYou are much more likely though to release memory if you use a more idiomatic.\r\n\r\n```\r\ndf = df.drop(..., axis=1)\r\n```\r\n\r\nThis removes the top-level reference to the original frame. Note that none of this actually will garbage collect (and nothing will release the memory back to the os). \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318390961",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17092#issuecomment-318390961",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17092",
    "id": 318390961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODM5MDk2MQ==",
    "user": {
      "login": "ivallesp",
      "id": 7207415,
      "node_id": "MDQ6VXNlcjcyMDc0MTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7207415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivallesp",
      "html_url": "https://github.com/ivallesp",
      "followers_url": "https://api.github.com/users/ivallesp/followers",
      "following_url": "https://api.github.com/users/ivallesp/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivallesp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivallesp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivallesp/subscriptions",
      "organizations_url": "https://api.github.com/users/ivallesp/orgs",
      "repos_url": "https://api.github.com/users/ivallesp/repos",
      "events_url": "https://api.github.com/users/ivallesp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivallesp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-27T15:08:21Z",
    "updated_at": "2017-07-27T15:11:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I know the `inplace` parameter is not helping avoiding the memory increase. I just measured it!. Although the _inplace_ name suggests that no copy is made. \r\n\r\nAnyway, this was not the topic of this conversation. Closing the issue does not help solving it, it is just hiding the dirty under the mat... It would be better to read my main message. The problem is that there is not a way of deleting variables in a big DataFrame without generating a huge peak of memory, this is a big problem guys. \r\n\r\nIn addition, again, regarding to your comment @jreback, I do not have problems releasing memory, I have a highly unexpected peak of memory.\r\n\r\nBest,\r\nIv√°n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318394792",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17092#issuecomment-318394792",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17092",
    "id": 318394792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODM5NDc5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-27T15:21:11Z",
    "updated_at": "2017-07-27T15:21:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is not going to be solved in pandas 1. Data of a single dtype is blocked, creating a a view on that does not release the memory (and that is what you are doing). You *can* do this.\r\n\r\n```\r\ndf =....\r\n\r\ndf2 = df.drop(...., axis=1)\r\ndel dfd\r\n``` "
  }
]
