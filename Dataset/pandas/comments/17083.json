[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318122416",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17083#issuecomment-318122416",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17083",
    "id": 318122416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODEyMjQxNg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T17:18:58Z",
    "updated_at": "2017-07-26T17:18:58Z",
    "author_association": "MEMBER",
    "body": "> Edits to series and frame are unrelated, but not big enough to merit their own PR. This is just removing import of nan, ndarray that are used in a small number of places and instead using np.nan, np.ndarray.\r\n\r\nActually, they do because that's a refactoring, and it obfuscates the actual change you're making.  You should separate that out as a separate PR."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318123219",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17083#issuecomment-318123219",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17083",
    "id": 318123219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODEyMzIxOQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T17:21:54Z",
    "updated_at": "2017-07-26T17:22:33Z",
    "author_association": "MEMBER",
    "body": "@jbrockmendel : Can you explain the motivation for this PR?  `range`, being a generator for Python 3.x, is not a valid `index_col` parameter.  Why can't you just pass in `list(range(...))` yourself?\r\n\r\nUnless you plan to iterate through them (so that you don't have to load the entire sequence into memory), I'm have some difficulty understanding the benefit."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318125106",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17083#issuecomment-318125106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17083",
    "id": 318125106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODEyNTEwNg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T17:28:38Z",
    "updated_at": "2017-07-26T17:28:38Z",
    "author_association": "MEMBER",
    "body": "> You should separate that out as a separate PR.\r\n\r\nOK.  I've been a bit concerned about making multiple small PRs because they each run travis et al.  I'll separate these out.\r\n\r\n> Why can't you just pass in list(range(...)) yourself?\r\n\r\nYou can.  The motivation is that user code that works in py2 should ideally work in py3.  Is there some ambiguity as to what a user who passes `index_col=range(3)` intends?  If not, I contend this should Just Work.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318134031",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17083#issuecomment-318134031",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17083",
    "id": 318134031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODEzNDAzMQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T18:00:14Z",
    "updated_at": "2017-07-26T18:00:14Z",
    "author_association": "MEMBER",
    "body": "> The motivation is that user code that works in py2 should ideally work in py3...Is there some ambiguity as to what a user who passes index_col=range(3) intends?\r\n\r\n`range(3)` means different things in Python 2 and Python 3, so it's unclear as to why you're passing in a generator as a parameter when we don't allow that for `index_col`.\r\n\r\nWhile I understand the intention, I'm not sure that justifies us loosening our specifications, especially since it's really not inconvenient to use `list(range(...))` instead of `range(...)`.  Mind you that trying to accommodate old Python 2 conventions is probably not ideal in the long-run because you're enforcing old behavior when we should be practicing Python 3 habits. :smile: "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318144509",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17083#issuecomment-318144509",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17083",
    "id": 318144509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODE0NDUwOQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T18:39:09Z",
    "updated_at": "2017-07-26T18:39:09Z",
    "author_association": "MEMBER",
    "body": "> you're enforcing old behavior when we should be practicing Python 3 habits\r\n\r\nSure the pandas devs should be practicing py3 habits, but when users have things that work in py2 and break in py3 for seemingly nitpicky reasons, that's just one more little bit of friction in the py3 transition process.  It's counter-productive.\r\n\r\nI'm not interested in bike-shedding user-friendliness vs purity.  I'll put the ndarray/nan bit in a separate PR.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318148052",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17083#issuecomment-318148052",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17083",
    "id": 318148052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODE0ODA1Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T18:52:05Z",
    "updated_at": "2017-07-26T18:52:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel what I would accept here is an error message that raises on a non-scalar and non-list-like (IOW range).\r\n\r\nwe are actually somewhat picky on array-like; these generally *mustY be fully materialized objects (though we *do* accept generaters generally). In this instance an exception is fine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/318152250",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17083#issuecomment-318152250",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17083",
    "id": 318152250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODE1MjI1MA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T19:07:23Z",
    "updated_at": "2017-07-26T19:07:23Z",
    "author_association": "MEMBER",
    "body": "I might also point out that you can use pandas' `lrange` object from `pandas.compat` instead of `list(range(...))`, which gives you the same Python 2.x `range` behavior."
  }
]
