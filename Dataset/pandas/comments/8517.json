[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58503625",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58503625",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58503625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTAzNjI1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-09T12:45:38Z",
    "updated_at": "2014-10-09T12:45:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is pretty straightforward (and pretty fast), to simply do this\nhttps://github.com/pydata/pandas/issues/8428 will make the first part slightly easier (the `.split()`)\nas it will return a frame directly\n\n```\nIn [8]: s.str.split('\\s+').apply(Series).unstack().dropna()\nOut[8]: \n0  Alice    This\n   Bob       and\n   Alice     and\n1  Alice      is\n   Bob      here\n   Alice       3\n2  Alice    text\n   Bob        is\n3  Alice      No\n   Bob       no.\n4  Alice      1.\n   Bob         2\ndtype: object\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58627110",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58627110",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58627110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjI3MTEw",
    "user": {
      "login": "kay1793",
      "id": 9023555,
      "node_id": "MDQ6VXNlcjkwMjM1NTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9023555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kay1793",
      "html_url": "https://github.com/kay1793",
      "followers_url": "https://api.github.com/users/kay1793/followers",
      "following_url": "https://api.github.com/users/kay1793/following{/other_user}",
      "gists_url": "https://api.github.com/users/kay1793/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kay1793/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kay1793/subscriptions",
      "organizations_url": "https://api.github.com/users/kay1793/orgs",
      "repos_url": "https://api.github.com/users/kay1793/repos",
      "events_url": "https://api.github.com/users/kay1793/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kay1793/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T08:33:06Z",
    "updated_at": "2014-10-10T08:33:06Z",
    "author_association": "NONE",
    "body": "``` python\ns=pd.Series(['This is text No 1.', 'and here is no. 2','and 3'])\ns.str.split('\\s+').apply(Series).unstack().T.dropna().reset_index(1,drop=True)\nOut[36]: \n0    This\n0     and\n0     and\n1      is\n1    here\n1       3\n2    text\n2      is\n3      No\n3     no.\n4      1.\n4       2\ndtype: object\n```\n\nThat does work with slight tweaking, thanks. However I have about 15 MB of text chunks and it \ndoesn't seem very fast compared with spliting() a text string of that size, it's orders slower.\nActually, it exhausts my box's memory when I try to run it for all of them, consuming several GB.\nIf one string has an unusually large word count, this generates tons of useless NA's for every shorter string. If it can't handle 15MB of data... Is there a less hacky way?\n\nThis seems like a natural operation to have supported. in terms of map-reduce pandas is great at processing rows but converting one row into multiple rows (the map stage) just isn't there as a stock operation.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58644023",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58644023",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58644023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjQ0MDIz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T11:35:41Z",
    "updated_at": "2014-10-10T11:35:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "not really sure what you are doing. If you don't need the indices then just iterate, split, and concatenate.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58646342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58646342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58646342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjQ2MzQy",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T12:03:19Z",
    "updated_at": "2014-10-10T12:03:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "As much as I like flatMap interface, I'm not sure how would you apply it to a multi-column DataFrame, except for probably replicating whole rows (is that operation useful?).\n\nFor Series of strings, there's nothing to vectorize and unless you (ab-)use character-wise representation of strings (which you can't do with pandas) there's not much you can do to beat the performance of something along the lines of\n\n``` python\nIn [38]: s = pd.Series(['This is text No 1.', 'and here is no. 2','and 3']); s\nOut[38]: \n0    This is text No 1.\n1     and here is no. 2\n2                 and 3\ndtype: object\n\nIn [39]: mapper = lambda x: pd.lib.list_to_object_array(x.split())            \n\nIn [40]: vals = [(k, mapper(v)) for k, v in s.iteritems()]                    \n\nIn [41]: pd.Series(                                                           \n    np.concatenate([v[1] for v in vals]),\n    np.concatenate([np.repeat(v[0], len(v[1])) for v in vals]),\n    name=s.name)\nOut[41]: \n0    This\n0      is\n0    text\n0      No\n0      1.\n1     and\n1    here\n1      is\n1     no.\n1       2\n2     and\n2       3\ndtype: object\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58699509",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58699509",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58699509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Njk5NTA5",
    "user": {
      "login": "kay1793",
      "id": 9023555,
      "node_id": "MDQ6VXNlcjkwMjM1NTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9023555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kay1793",
      "html_url": "https://github.com/kay1793",
      "followers_url": "https://api.github.com/users/kay1793/followers",
      "following_url": "https://api.github.com/users/kay1793/following{/other_user}",
      "gists_url": "https://api.github.com/users/kay1793/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kay1793/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kay1793/subscriptions",
      "organizations_url": "https://api.github.com/users/kay1793/orgs",
      "repos_url": "https://api.github.com/users/kay1793/repos",
      "events_url": "https://api.github.com/users/kay1793/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kay1793/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T18:46:30Z",
    "updated_at": "2014-10-10T18:47:30Z",
    "author_association": "NONE",
    "body": "\"is that operation useful?\" it is for what I'm trying to do, I'd argure for text data it would be very useful. Perhaps with the index gaining another level to numerate the generated sub-results within the original index label.\n\nThanks for the example, lots of footwork, but it doesn't throw away memory like jreback's hack. You're both basically saying do it somewhere else then throw it in a DataFrame. Not awesome , but of course always an option.\n\ngroupby.apply() converts returned series into multiple rows doesn't it? why can't pandas have similar functionality for an DataFrame apply-style operation?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58701464",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58701464",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58701464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzAxNDY0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T19:01:44Z",
    "updated_at": "2014-10-10T19:01:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kay1793 why don't you show a copy/pastable example end-to-end of what you are actually trying to do. Are you trying to say get work counts? or a dummies matrix? (that's what my soln does, but if you have a large work freq it WILL blow up memory, but that assumes you want to track the index). apparently you don't.\n\n@immerrr soln is just fine for what you are showing. But then you are not harnessing the power of pandas at all. Its just list manipulation.\n\nan example is worth 1000's of words.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58716271",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58716271",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58716271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzE2Mjcx",
    "user": {
      "login": "kay1793",
      "id": 9023555,
      "node_id": "MDQ6VXNlcjkwMjM1NTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9023555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kay1793",
      "html_url": "https://github.com/kay1793",
      "followers_url": "https://api.github.com/users/kay1793/followers",
      "following_url": "https://api.github.com/users/kay1793/following{/other_user}",
      "gists_url": "https://api.github.com/users/kay1793/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kay1793/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kay1793/subscriptions",
      "organizations_url": "https://api.github.com/users/kay1793/orgs",
      "repos_url": "https://api.github.com/users/kay1793/repos",
      "events_url": "https://api.github.com/users/kay1793/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kay1793/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T21:05:59Z",
    "updated_at": "2014-10-11T05:10:50Z",
    "author_association": "NONE",
    "body": "Fair enough. \n\nHow do I get from this:\n\n``` python\nIn [8]: df=pd.DataFrame([['2014-01-01T00:01:00','Alice',\"It was a dark and stormy night. Alice and bob were at their computer\"],\n   ...:                  ['2014-01-02T00:02:23','Bob',\"Detective Morgan was 9 feet tall. Then the mirror broke. He cut his left foot on the shards\"]],columns=['ts','name','text'])\n   ...: df\n```\n\nto this:\n\n``` python\nIn [10]: df=pd.DataFrame([['2014-01-01T00:01:00','Alice',\"It was a dark and stormy night\"],\n    ...:                  ['2014-01-01T00:01:00','Alice',\"Alice and bob were at their computer\"],\n    ...:                  ['2014-01-02T00:02:23','Bob',\"Detective Morgan was 9 feet tall\"],\n    ...:                  ['2014-01-02T00:02:23','Bob',\"Then the mirror broke\"],\n    ...:                  ['2014-01-02T00:02:23','Bob',\"He cut his left foot on the shards\"]],\n    ...:                  columns=['ts','name','text'],index=pd.MultiIndex.from_arrays([[0,0,1,1,1],[0,1,0,1,2]]))\n    ...: df\n    ...: \nOut[10]: \n                      ts   name                                  text\n0 0  2014-01-01T00:01:00  Alice        It was a dark and stormy night\n  1  2014-01-01T00:01:00  Alice  Alice and bob were at their computer\n1 0  2014-01-02T00:02:23    Bob     Detective Morgan was 9 feet tall \n  1  2014-01-02T00:02:23    Bob                 Then the mirror broke\n  2  2014-01-02T00:02:23    Bob       He cut his left foot the shards\n```\n\nThe index is unique, nothing else is in general.  One chunk may have 50 (or 1000) paragraphs, others just one. Once I get it in this form, I can easily do summary stats and selection queries, looking for patterns. Basically, I'm using a pandas dataframe as my corpus.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58739622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58739622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58739622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzM5NjIy",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-11T06:09:37Z",
    "updated_at": "2014-10-11T06:09:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> But then you are not harnessing the power of pandas at all. Its just list manipulation.\n\nWhich was exactly my point: if we're doing native object manipulation, there's not much pandas can help with performance-wise.\n\nAs for the example, it's helpful indeed. So the desired output is equivalent to taking out that one column, flatmap it as a series adding an integer index level and join it back with the rest of the dataframe on the original index column.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/58739947",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-58739947",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 58739947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzM5OTQ3",
    "user": {
      "login": "kay1793",
      "id": 9023555,
      "node_id": "MDQ6VXNlcjkwMjM1NTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9023555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kay1793",
      "html_url": "https://github.com/kay1793",
      "followers_url": "https://api.github.com/users/kay1793/followers",
      "following_url": "https://api.github.com/users/kay1793/following{/other_user}",
      "gists_url": "https://api.github.com/users/kay1793/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kay1793/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kay1793/subscriptions",
      "organizations_url": "https://api.github.com/users/kay1793/orgs",
      "repos_url": "https://api.github.com/users/kay1793/repos",
      "events_url": "https://api.github.com/users/kay1793/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kay1793/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-11T06:27:07Z",
    "updated_at": "2014-10-12T01:44:02Z",
    "author_association": "NONE",
    "body": "```\nWhich was exactly my point: if we're doing native object manipulation, there's not \nmuch pandas can help with performance-wise.\n```\n\nI think the performance of Sol #1 was due to bad complexity otherwise non-vectorized is good enough for my data sizes.\n\n```\nthe desired output is equivalent to <...>\n```\n\nYes, but with 2 sugars please.\n\nI've come to think of pandas as THE way to work with data and now that I'm working with a corpus It lacks some operations that appear also generally useful and common. The groupby point I made earlier seems solid to me, I hope you'll agree.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149728217",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-149728217",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 149728217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTcyODIxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-20T23:14:36Z",
    "updated_at": "2015-10-20T23:14:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing, but pls reopen if the issue persists.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/178848365",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-178848365",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 178848365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3ODg0ODM2NQ==",
    "user": {
      "login": "rcompton",
      "id": 1761810,
      "node_id": "MDQ6VXNlcjE3NjE4MTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1761810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcompton",
      "html_url": "https://github.com/rcompton",
      "followers_url": "https://api.github.com/users/rcompton/followers",
      "following_url": "https://api.github.com/users/rcompton/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcompton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcompton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcompton/subscriptions",
      "organizations_url": "https://api.github.com/users/rcompton/orgs",
      "repos_url": "https://api.github.com/users/rcompton/repos",
      "events_url": "https://api.github.com/users/rcompton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcompton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-02T21:59:15Z",
    "updated_at": "2016-02-02T21:59:15Z",
    "author_association": "NONE",
    "body": "Just came across this and I think it's worth reopening.\n\nSome sugar for `flatmap`/`explode` would be nice. There are several workarounds circulating and none of them are quite the same, eg.\n- http://www.markhneedham.com/blog/2015/03/23/python-equivalent-to-flatmap-for-flattening-an-array-of-arrays/\n- https://stackoverflow.com/questions/31080258/pysparks-flatmap-in-pandas\n- https://stackoverflow.com/questions/32468402/how-to-explode-a-list-inside-a-dataframe-cell-into-separate-rows\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/183455507",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-183455507",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 183455507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzQ1NTUwNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-12T19:17:41Z",
    "updated_at": "2016-02-12T19:17:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "We would take a cookbook of the recipes (the https://stackoverflow.com/questions/31080258/pysparks-flatmap-in-pandas) is most idiomatic.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/247785821",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-247785821",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 247785821,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzc4NTgyMQ==",
    "user": {
      "login": "timotta",
      "id": 55918,
      "node_id": "MDQ6VXNlcjU1OTE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/55918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timotta",
      "html_url": "https://github.com/timotta",
      "followers_url": "https://api.github.com/users/timotta/followers",
      "following_url": "https://api.github.com/users/timotta/following{/other_user}",
      "gists_url": "https://api.github.com/users/timotta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timotta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timotta/subscriptions",
      "organizations_url": "https://api.github.com/users/timotta/orgs",
      "repos_url": "https://api.github.com/users/timotta/repos",
      "events_url": "https://api.github.com/users/timotta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timotta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-17T16:20:04Z",
    "updated_at": "2016-09-17T16:20:04Z",
    "author_association": "NONE",
    "body": "This how I'm doing for now. It's not the more performatic way, but works:\n\n```\ndef flatmap(df, func):\n    rows = []\n    cols = df.columns\n    for r in df.values:\n        index = 0\n        row = {}\n        for col in cols:\n            row[col] = r[index]\n            index += 1\n        multrows = func(row)\n        for rr in multrows:\n            rows.append(rr)\n    return pd.DataFrame.from_records(rows)\n```\n\n```\nflatfunc = lambda r: [{\"userId\": r[\"userId\"], \"rating\": r[\"rating\"], \"genre\": genre} for genre in r[\"genreList\"]]\nflattened = flatmap(df, flatfunc)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/247804856",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-247804856",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 247804856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NzgwNDg1Ng==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-17T20:15:05Z",
    "updated_at": "2016-09-17T20:15:05Z",
    "author_association": "MEMBER",
    "body": "i'm supportive of adding a `flatmap` function to pandas. Even more so I would like to have a first class list/array type. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253017330",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-253017330",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 253017330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzAxNzMzMA==",
    "user": {
      "login": "rcalsaverini",
      "id": 126856,
      "node_id": "MDQ6VXNlcjEyNjg1Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/126856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcalsaverini",
      "html_url": "https://github.com/rcalsaverini",
      "followers_url": "https://api.github.com/users/rcalsaverini/followers",
      "following_url": "https://api.github.com/users/rcalsaverini/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcalsaverini/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcalsaverini/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcalsaverini/subscriptions",
      "organizations_url": "https://api.github.com/users/rcalsaverini/orgs",
      "repos_url": "https://api.github.com/users/rcalsaverini/repos",
      "events_url": "https://api.github.com/users/rcalsaverini/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcalsaverini/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T19:20:12Z",
    "updated_at": "2016-10-11T19:28:01Z",
    "author_association": "NONE",
    "body": "Is this being considered? I think having a flatMap or bind operation would be very interesting and useful (besides being theoretically satisfying for people with a functional programming background, but this isn't really an argument). \n\nI had a use-case today. I have a dataframe of events, with start time and end time:\n\n| event | start_time | end_time |\n| --- | --- | --- |\n| A | 2014-01-01 12:00:00 | 2014-01-01 13:45:00 |\n| B | 2014-01-01 12:45:00 | 2014-01-01 12:55:00 |\n| ... | ... | ... |\n\nAnd we'd like to transform this to a dataframe that has a row for each minute where an event where actually happening:\n\n| event | time |\n| --- | --- |\n| A | 2014-01-01 12:00:00 |\n| A | 2014-01-01 12:01:00 |\n| A | 2014-01-01 12:02:00 |\n| A | 2014-01-01 12:03:00 |\n| ... | ... |\n| A | 2014-01-01 13:44:00 |\n| A | 2014-01-01 13:45:00 |\n| B | ... |\n\nThere are lots of ways to do this, but if we had a flatMap method this would be almost trivial.\n\n``` python\ndef make_time_table(row):\n    return DataFrame(\n        {'event': row['event'], 'time': time}\n        for time in pandas.date_range(...)\n    )\n\ndf.flatMap(make_time_table)\n```\n\nOr something like it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/253293288",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-253293288",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 253293288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzI5MzI4OA==",
    "user": {
      "login": "rcompton",
      "id": 1761810,
      "node_id": "MDQ6VXNlcjE3NjE4MTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1761810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcompton",
      "html_url": "https://github.com/rcompton",
      "followers_url": "https://api.github.com/users/rcompton/followers",
      "following_url": "https://api.github.com/users/rcompton/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcompton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcompton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcompton/subscriptions",
      "organizations_url": "https://api.github.com/users/rcompton/orgs",
      "repos_url": "https://api.github.com/users/rcompton/repos",
      "events_url": "https://api.github.com/users/rcompton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcompton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-12T18:13:53Z",
    "updated_at": "2016-10-12T18:13:53Z",
    "author_association": "NONE",
    "body": "I've been using @timotta 's function above which has been surprisingly fast\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/304945116",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-304945116",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 304945116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDk0NTExNg==",
    "user": {
      "login": "BLMeltdown",
      "id": 20567696,
      "node_id": "MDQ6VXNlcjIwNTY3Njk2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20567696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BLMeltdown",
      "html_url": "https://github.com/BLMeltdown",
      "followers_url": "https://api.github.com/users/BLMeltdown/followers",
      "following_url": "https://api.github.com/users/BLMeltdown/following{/other_user}",
      "gists_url": "https://api.github.com/users/BLMeltdown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BLMeltdown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BLMeltdown/subscriptions",
      "organizations_url": "https://api.github.com/users/BLMeltdown/orgs",
      "repos_url": "https://api.github.com/users/BLMeltdown/repos",
      "events_url": "https://api.github.com/users/BLMeltdown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BLMeltdown/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-30T17:08:41Z",
    "updated_at": "2017-05-30T17:08:41Z",
    "author_association": "NONE",
    "body": "The topic I reference in the above link (https://stackoverflow.com/questions/12680754/split-pandas-dataframe-string-entry-to-separate-rows) also leads to https://stackoverflow.com/questions/17116814/pandas-how-do-i-split-text-in-a-column-into-multiple-rows."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352611184",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-352611184",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 352611184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjYxMTE4NA==",
    "user": {
      "login": "hkhatod",
      "id": 23573076,
      "node_id": "MDQ6VXNlcjIzNTczMDc2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/23573076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkhatod",
      "html_url": "https://github.com/hkhatod",
      "followers_url": "https://api.github.com/users/hkhatod/followers",
      "following_url": "https://api.github.com/users/hkhatod/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkhatod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkhatod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkhatod/subscriptions",
      "organizations_url": "https://api.github.com/users/hkhatod/orgs",
      "repos_url": "https://api.github.com/users/hkhatod/repos",
      "events_url": "https://api.github.com/users/hkhatod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkhatod/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T01:27:39Z",
    "updated_at": "2017-12-19T01:27:39Z",
    "author_association": "NONE",
    "body": "I have a long text in one of the dataframe columns I need to be able to split the text 2 or more columns depending on the length of that cell"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/472650082",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-472650082",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 472650082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjY1MDA4Mg==",
    "user": {
      "login": "stuz5000",
      "id": 7799980,
      "node_id": "MDQ6VXNlcjc3OTk5ODA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7799980?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuz5000",
      "html_url": "https://github.com/stuz5000",
      "followers_url": "https://api.github.com/users/stuz5000/followers",
      "following_url": "https://api.github.com/users/stuz5000/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuz5000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuz5000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuz5000/subscriptions",
      "organizations_url": "https://api.github.com/users/stuz5000/orgs",
      "repos_url": "https://api.github.com/users/stuz5000/repos",
      "events_url": "https://api.github.com/users/stuz5000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuz5000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T23:49:11Z",
    "updated_at": "2019-03-13T23:49:11Z",
    "author_association": "NONE",
    "body": "Was this closed because of opposition of storing lists in dataframes/series?\r\n\r\nI don't think that flatmap requires this, and the lack of flatmap is a fairly big problem with non-trivial and non-performant solutions. (+scala, spark, many other functional system have it as a first class operation).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/472655506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8517#issuecomment-472655506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8517",
    "id": 472655506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjY1NTUwNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T00:15:52Z",
    "updated_at": "2019-03-14T00:15:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "see https://github.com/pandas-dev/pandas/issues/16538 which has a PR\r\nassociated with it"
  }
]
