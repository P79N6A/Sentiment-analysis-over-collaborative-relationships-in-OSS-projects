[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312418321",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16808#issuecomment-312418321",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16808",
    "id": 312418321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQxODMyMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-01T08:09:48Z",
    "updated_at": "2017-07-01T08:09:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "from the doc-string\r\n\r\n> Signature: Series.str.replace(self, pat, repl, n=-1, case=None, flags=0)\r\nDocstring:\r\nReplace occurrences of pattern/regex in the Series/Index with\r\nsome other string. Equivalent to :meth:`str.replace` or\r\n:func:`re.sub`.\r\n\r\nit is a bit ambiguous, though so is a pattern like ``(b)``, is it a regex or not? This is almost always a regex. So I suppose a case could be made for:\r\n\r\n- adding a ``.sub`` function which is by-definition a regex and making ``.replace`` strict\r\n- adding a ``regex=True`` arg to control whether to interpret this as a regex."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312454787",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16808#issuecomment-312454787",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16808",
    "id": 312454787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQ1NDc4Nw==",
    "user": {
      "login": "rosnfeld",
      "id": 5356340,
      "node_id": "MDQ6VXNlcjUzNTYzNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5356340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rosnfeld",
      "html_url": "https://github.com/rosnfeld",
      "followers_url": "https://api.github.com/users/rosnfeld/followers",
      "following_url": "https://api.github.com/users/rosnfeld/following{/other_user}",
      "gists_url": "https://api.github.com/users/rosnfeld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rosnfeld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rosnfeld/subscriptions",
      "organizations_url": "https://api.github.com/users/rosnfeld/orgs",
      "repos_url": "https://api.github.com/users/rosnfeld/repos",
      "events_url": "https://api.github.com/users/rosnfeld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rosnfeld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-01T20:48:41Z",
    "updated_at": "2017-07-01T20:48:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm fine with either solution, not sure which is more intuitive or less disruptive to existing practice. I too had  considered suggesting an additional \"regex\" param but had forgotten it when I went to write the issue up; if we go that way I'd argue for defaulting to regex=False.\r\n\r\nFor what it's worth, a user might not know they are passing a string that \"looks like a regex\". Maybe you got a result from some other operation and didn't inspect it, but still passed it in to series.str.replace(). I stumbled upon this issue doing something like the following: imagine an item description with a parenthetical remark - e.g. \"Men's shirt (blue)\" - and you try and replace all instances of that with some other text, maybe just \"Men's clothing\". When some of your replacements fail to take, it's pretty surprising.\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: series = pd.Series(['No parens', 'Some text (with parens)'])\r\n\r\nIn [3]: series.str.replace('No parens', 'Replaced')\r\nOut[3]: \r\n0                   Replaced\r\n1    Some text (with parens)\r\ndtype: object\r\n\r\nIn [4]: series.str.replace('Some text (with parens)', 'Replaced') # fails to replace\r\nOut[4]: \r\n0                  No parens\r\n1    Some text (with parens)\r\ndtype: object\r\n\r\nIn [5]: series.str.replace(series.max(), 'Replaced') # nothing gets replaced!\r\nOut[5]: \r\n0                  No parens\r\n1    Some text (with parens)\r\ndtype: object\r\n\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/361409653",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16808#issuecomment-361409653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16808",
    "id": 361409653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQwOTY1Mw==",
    "user": {
      "login": "Liam3851",
      "id": 546210,
      "node_id": "MDQ6VXNlcjU0NjIxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/546210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Liam3851",
      "html_url": "https://github.com/Liam3851",
      "followers_url": "https://api.github.com/users/Liam3851/followers",
      "following_url": "https://api.github.com/users/Liam3851/following{/other_user}",
      "gists_url": "https://api.github.com/users/Liam3851/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Liam3851/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Liam3851/subscriptions",
      "organizations_url": "https://api.github.com/users/Liam3851/orgs",
      "repos_url": "https://api.github.com/users/Liam3851/repos",
      "events_url": "https://api.github.com/users/Liam3851/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Liam3851/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-29T22:31:22Z",
    "updated_at": "2018-01-29T22:31:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "We just hit this issue. At this point the problem goes back at least to 0.16 and is still present in the current 0.23 dev. Problem is at \r\n\r\n```    \r\nuse_re = is_compiled_re or len(pat) > 1 or flags or callable(repl) \r\n```\r\n\r\nThus any pattern len>1 is interpreted as a regex, whether it actually can be parsed as a regex or not.\r\n\r\nAt this point, any change that made it non-default to regex would be breaking, so I think the options are:\r\n\r\n1) Update the documentation only. This function does not support replacing \"character sequences\", it supports replacing a single character OR a regex if multiple characters.\r\n\r\n2) Add regex=True and make the above line something like\r\n\r\n```\r\nuse_re = is_compiled_re or (regex and (len(pat) > 1 or flags)) or callable(repl)\r\n```\r\n\r\nAny thoughts? Current behavior really is inconsistent with the doc."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362404843",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16808#issuecomment-362404843",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16808",
    "id": 362404843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjQwNDg0Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-01T21:18:48Z",
    "updated_at": "2018-02-01T21:18:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1 for adding `regex=True`. We have this elsewhere in, e.g. `.str.contains`.\r\n\r\nInterested in making a PR @Liam3851?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362670420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16808#issuecomment-362670420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16808",
    "id": 362670420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY3MDQyMA==",
    "user": {
      "login": "Liam3851",
      "id": 546210,
      "node_id": "MDQ6VXNlcjU0NjIxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/546210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Liam3851",
      "html_url": "https://github.com/Liam3851",
      "followers_url": "https://api.github.com/users/Liam3851/followers",
      "following_url": "https://api.github.com/users/Liam3851/following{/other_user}",
      "gists_url": "https://api.github.com/users/Liam3851/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Liam3851/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Liam3851/subscriptions",
      "organizations_url": "https://api.github.com/users/Liam3851/orgs",
      "repos_url": "https://api.github.com/users/Liam3851/repos",
      "events_url": "https://api.github.com/users/Liam3851/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Liam3851/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T18:45:03Z",
    "updated_at": "2018-02-02T18:45:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can do a PR. Question on API, though, before I write. Suppose someone gives us\r\n```\r\nser.str.replace(re.compile('[abc]'), 'd', regex=False)\r\n```\r\nShould that raise or should we just silently use regex?\r\n\r\nAlso, while \r\n```\r\nuse_re = is_compiled_re or (regex and (len(pat) > 1 or flags)) or callable(repl)\r\n```\r\nmaintains back compat, it does mean that `regex=True` with a single character always basically implies `regex=False`. I suppose it could be confusing for someone to explicitly write\r\n```\r\nser.str.replace('.', 'a', regex=True)\r\n```\r\nand have it only replace periods and not all characters. But maybe that's such a rare request anyway we can let it go for the sake of back compat?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/446514308",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16808#issuecomment-446514308",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16808",
    "id": 446514308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjUxNDMwOA==",
    "user": {
      "login": "tobycheese",
      "id": 25571700,
      "node_id": "MDQ6VXNlcjI1NTcxNzAw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25571700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tobycheese",
      "html_url": "https://github.com/tobycheese",
      "followers_url": "https://api.github.com/users/tobycheese/followers",
      "following_url": "https://api.github.com/users/tobycheese/following{/other_user}",
      "gists_url": "https://api.github.com/users/tobycheese/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tobycheese/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tobycheese/subscriptions",
      "organizations_url": "https://api.github.com/users/tobycheese/orgs",
      "repos_url": "https://api.github.com/users/tobycheese/repos",
      "events_url": "https://api.github.com/users/tobycheese/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tobycheese/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-12T09:08:09Z",
    "updated_at": "2018-12-12T09:08:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is it intentional that in `Series|DataFrame.replace`, regex defaults to **False**, in `Series.str.replace` regexp defaults to **True** (and plain python str.replace does not use regexps)?\r\n\r\nThat default to **True** often bites me, maybe we can add a warning?"
  }
]
