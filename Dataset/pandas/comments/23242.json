[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431985473",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23242#issuecomment-431985473",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23242",
    "id": 431985473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTk4NTQ3Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-22T21:04:07Z",
    "updated_at": "2018-10-22T21:04:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> You can't specify the dtype of the underlying categories in the CategoricalDtype constructor\r\n\r\nYou can with\r\n\r\n```python\r\nIn [24]: pd.api.types.CategoricalDtype(categories=pd.Index([], dtype=int)).categories\r\nOut[24]: Int64Index([], dtype='int64')\r\n```\r\n\r\nCategoricalDtype.categories is just an index. Would you want to accept a `dtype` parameter in `CategoricalDtype` that's passed through?\r\n\r\n> are both category dtype, and each Series was constructed using astype('category')\r\n\r\nI think that's the root issue. `.astype('category')` is going to use inference, which can fail. If you want full control you'll have to be explicit."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432000675",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23242#issuecomment-432000675",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23242",
    "id": 432000675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjAwMDY3NQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-22T21:45:09Z",
    "updated_at": "2018-10-22T21:45:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Would you want to accept a dtype parameter in CategoricalDtype that's passed through?\r\n\r\nYes, I think that would help.\r\n\r\nThe other thing that would help is if `union_categoricals` would accept the union of two categories where the `dtype` was different, and one of the categories was empty.  Then the result could have the `dtype` of the category that had items in it.  The reason I need this is that I'm reading a large file in chunks, and I know which columns are category columns, and want to keep doing `union_categoricals` as new categories are discovered, and if a chunk was all missing values, have the types correctly inferred. (See my comment here: https://github.com/pandas-dev/pandas/issues/14177#issuecomment-417351304)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432280616",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23242#issuecomment-432280616",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23242",
    "id": 432280616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjI4MDYxNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-23T14:53:39Z",
    "updated_at": "2018-10-23T14:53:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd prefer to avoid special casing empty / all-NaN columns.\n\nI think adding a `dtype` keyword to the CategoricalDtype constructor would\nbe fine, with a default of float for backwards compatibility.\n\nOn Mon, Oct 22, 2018 at 4:45 PM Dr. Irv <notifications@github.com> wrote:\n\n> Would you want to accept a dtype parameter in CategoricalDtype that's\n> passed through?\n>\n> Yes, I think that would help.\n>\n> The other thing that would help is if union_categoricals would accept the\n> union of two categories where the dtype was different, and one of the\n> categories was empty. Then the result could have the dtype of the\n> category that had items in it. The reason I need this is that I'm reading a\n> large file in chunks, and I know which columns are category columns, and\n> want to keep doing union_categoricals as new categories are discovered,\n> and if a chunk was all missing values, have the types correctly inferred.\n> (See my comment here: #14177 (comment)\n> <https://github.com/pandas-dev/pandas/issues/14177#issuecomment-417351304>\n> )\n>\n> â€”\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/23242#issuecomment-432000675>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIkhOGh6RdADauT84FmvpWLRCOzYDks5unjxrgaJpZM4XxeJP>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432306360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23242#issuecomment-432306360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23242",
    "id": 432306360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjMwNjM2MA==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-23T15:53:46Z",
    "updated_at": "2018-10-23T15:53:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think adding a `dtype` keyword to the CategoricalDtype constructor would\r\n> be fine, with a default of float for backwards compatibility.\r\n\r\nI think the default would have to be `infer`, since if you pass no NaNs, then the dtype is inferred from the type of the passed categories.  Then if all the values are NaN, it defaults to float.\r\n"
  }
]
