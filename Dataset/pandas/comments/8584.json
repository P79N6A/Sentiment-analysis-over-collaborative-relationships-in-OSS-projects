[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59666150",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8584#issuecomment-59666150",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8584",
    "id": 59666150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjY2MTUw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-19T21:22:25Z",
    "updated_at": "2014-10-19T21:22:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, so this is an api issue then? I think we should be very strict on this as we cannot disambiguate easy (e.g. `.ix/.loc` issues).\n- Integers must be treated always as positional and don't allow mixed integers / names \n- if integer-like level names then can be passed as strings (and not actual integers; not sure if this will break anything)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59666778",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8584#issuecomment-59666778",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8584",
    "id": 59666778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjY2Nzc4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-19T21:37:55Z",
    "updated_at": "2014-10-19T21:38:44Z",
    "author_association": "MEMBER",
    "body": "I think this are examples that we _can_ disambiguate.\n\nI understood from that PR that the new logic was:\n- if all entries (strings or ints) are found in the level names -> use as level names\n- if not all found:\n  - if all integers -> use as level locations\n  - if not all integers -> raise ValueError\n\nSo following that, these case should / can work I think (and it does work in some cases, so at least it is a bit inconstent).\n\nAnd if that logic is correct (it is the logic we want to follow), that should maybe be also mentioned in the docstring.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59723117",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8584#issuecomment-59723117",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8584",
    "id": 59723117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzIzMTE3",
    "user": {
      "login": "onesandzeroes",
      "id": 1460294,
      "node_id": "MDQ6VXNlcjE0NjAyOTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1460294?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onesandzeroes",
      "html_url": "https://github.com/onesandzeroes",
      "followers_url": "https://api.github.com/users/onesandzeroes/followers",
      "following_url": "https://api.github.com/users/onesandzeroes/following{/other_user}",
      "gists_url": "https://api.github.com/users/onesandzeroes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onesandzeroes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onesandzeroes/subscriptions",
      "organizations_url": "https://api.github.com/users/onesandzeroes/orgs",
      "repos_url": "https://api.github.com/users/onesandzeroes/repos",
      "events_url": "https://api.github.com/users/onesandzeroes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onesandzeroes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T10:19:00Z",
    "updated_at": "2014-10-20T10:19:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that these two should work, since all the levels are in the level names:\n\n```\nIn [42]: df.columns.names = ['exp', 'animal', 1]\nIn [43]: df.stack(level=['animal', 1])\n```\n\nAnd\n\n```\nIn [46]: df.columns.names = ['exp', 'animal', 0]\nIn [47]: df.stack(level=['animal', 0])\n```\n\nI had a look tonight and I think I have a fix for both cases, we just need to be a bit more careful about when we're dealing with level names and when we're dealing with level numbers. If I can get these cases working, then I think the logic you've outlined (which was the original intent of the PR) still holds. Probably a good idea to add it to the docstring though.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59853169",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8584#issuecomment-59853169",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8584",
    "id": 59853169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODUzMTY5",
    "user": {
      "login": "onesandzeroes",
      "id": 1460294,
      "node_id": "MDQ6VXNlcjE0NjAyOTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1460294?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onesandzeroes",
      "html_url": "https://github.com/onesandzeroes",
      "followers_url": "https://api.github.com/users/onesandzeroes/followers",
      "following_url": "https://api.github.com/users/onesandzeroes/following{/other_user}",
      "gists_url": "https://api.github.com/users/onesandzeroes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onesandzeroes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onesandzeroes/subscriptions",
      "organizations_url": "https://api.github.com/users/onesandzeroes/orgs",
      "repos_url": "https://api.github.com/users/onesandzeroes/repos",
      "events_url": "https://api.github.com/users/onesandzeroes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onesandzeroes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T22:51:53Z",
    "updated_at": "2014-10-20T22:51:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "The simplest solution I came up with for this involved adding an `as_level_numbers=False` flag to `MultiIndex.swaplevel()`, so I could use `as_level_numbers=True` to signal that the levels being passed were already level numbers, skipping the `_get_level_number()` step. \n\nWould this be OK to add to the API, or should I add this behaviour in a new method like `MultiIndex._swaplevel_using_level_numbers()`? Seems like it could be somewhat useful if you ever need to force `swaplevel` to deal with the passed levels as numbers, but it might break consistency.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59854141",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8584#issuecomment-59854141",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8584",
    "id": 59854141,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODU0MTQx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T23:02:01Z",
    "updated_at": "2014-10-20T23:02:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@onesandzeroes you can make an internal function (leading '_') if you need, but this shouldn't be exposed\n"
  }
]
