[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/152406819",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-152406819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 152406819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjQwNjgxOQ==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-30T03:47:16Z",
    "updated_at": "2015-10-30T03:47:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've just hit this too, on 0.16.2. Is this intended? Is it related to https://github.com/pydata/pandas/issues/11369?\n\n``` python\nIn [8]: panel = pd.Panel(pd.np.random.rand(2,3,4))\n\nIn [10]: panel.shape\nOut[10]: (2, 3, 4)\n\nIn [11]: panel[:, :, 0].shape\nOut[11]: (3, 2)\n```\n\nIn numpy:\n\n``` python\nIn [15]: npanel=pd.np.random.rand(2,3,4)\n\nIn [16]: npanel.shape\nOut[16]: (2, 3, 4)\n\nIn [18]: npanel[:,:,0].shape\nOut[18]: (2, 3)\n```\n\nCC @jreback, as this seemed like an abandoned issue\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/152515650",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-152515650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 152515650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjUxNTY1MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-30T12:53:10Z",
    "updated_at": "2015-10-30T12:53:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes this has always been like this. `DataFrame` is 'reversed' in that the columns axis (1) is the 'primary' (we call it the info) axis. This translates to indexing where a `Panel` is conceptually a dict of `DataFrames`. Not sure what/if anything can do about this as it would break practially all code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/152613473",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-152613473",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 152613473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjYxMzQ3Mw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-30T18:43:08Z",
    "updated_at": "2015-10-30T23:23:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is a bigger issue than one we're going to solve here. But regardless a couple of points:\n\n##### Panels generally\n- I have been working with Panels a lot over the past couple of weeks and - from my humble user perspective - it has felt pretty painful. I know it's a difficult challenge to go from 2 -> n dimensions. `DataFrame`s are so beautiful, and `Panel`s seem like an alpha of their functionality at a different level of quality (i.e. a 'preview' with low documentation & testing, rather than a fully functional subset). \n- FWIW, my basic approach now is to use pandas for the initial alignment, and then use numpy functions only. I wonder as pandas moves to a 1.0 release, whether `Panel` needs to either be given a _lot_ of love or deprecated to 'experimental' or completely moved to something like xray infrastructure for >2D along with the current options for `MultiIndex`.  \n\n##### Panel indexing\n- I imagine there's something I don't understand, although I don't get why we have this design. \n- My understanding is that a `DataFrame` has row _x_ column dimensions which are consistent across the indexers, and then there are some 'convenience' methods (such as `df['a']` which reference the `info_axis` / columns and `df[2:5]` which reference the rows). In production, using the indexers is rigorous and predictable. \n- I would have thought a consistent design could exist for `Panel`s - while there might be convenience methods, standard indexers would apply to items _x_ rows (/ major) _x_ columns (/ minor), and selecting a slice of one would collapse the others, in order. I had thought the `info_axis` & `stat_axis` were for convenience only, not affecting the core indexing operations (but sounds like I'm wrong).\n\nxray mostly has the design I expected, I think, although does remember the collapsed dimension:\n\n``` python\n\nIn [22]: panel_x=xray.DataArray(pd.np.random.rand(4,3,2))\n\nIn [24]: panel_x\nOut[24]: \n<xray.DataArray (dim_0: 4, dim_1: 3, dim_2: 2)>\narray([[[ 0.81499518,  0.73722039],\n...\n        [ 0.21864764,  0.93710684]]])\nCoordinates:\n  * dim_0    (dim_0) int64 0 1 2 3\n  * dim_1    (dim_1) int64 0 1 2\n  * dim_2    (dim_2) int64 0 1\n\nIn [25]: panel_x.loc[:,0,:]\nOut[25]: \n<xray.DataArray (dim_0: 4, dim_2: 2)>\narray([[ 0.81499518,  0.73722039],\n       [ 0.41809174,  0.28529916],\n       [ 0.82198192,  0.14365383],\n       [ 0.55948113,  0.24809068]])\nCoordinates:\n  * dim_0    (dim_0) int64 0 1 2 3\n    dim_1    int64 0\n  * dim_2    (dim_2) int64 0 1\n```\n\nRelevant xref: https://github.com/pydata/pandas/issues/9595, https://github.com/pydata/pandas/issues/10000\nCC @shoyer \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/152663036",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-152663036",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 152663036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjY2MzAzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-30T22:15:56Z",
    "updated_at": "2015-10-30T22:15:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@maximilianr \n\nWell, @shoyer and I had some discussions w.r.t. essentially making `.to_panel()` simply return a `DataArray` directly (then you would work with it), and deprecating `Panel`. \n\nThat's an option; more closely aligns pandas and x-ray.\n\nHowever, I think is a nice use case for a dense `Panel`. if you allow that `x-ray` is more 'geared' towards sparse type nd-arrays (of course it has dense support), more that is its primary usecase.\n\nI happen to (well in the past), used `Panels` quite a lot where I would things like:\n\n`fields x time-axis x tickers`, where the pandas model makes a lot of sense.\n\nSo maybe you can elaborate where you think pandas is lacking (in docs/tests/etc). Pretty much everything is there. So asside from the indexing conventions, not sure what issues there are.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/152679625",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-152679625",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 152679625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjY3OTYyNQ==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-31T00:29:16Z",
    "updated_at": "2015-10-31T01:03:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here are a couple of issues I've had in addition to the above; I can provide more on these / others if helpful:\n- Very standard functions such as `multiply` that exist on `Panel`s, when `other` is a different dimension. Without going to numpy, this is very slow as it iterates through each series combination. SO question [here](http://stackoverflow.com/questions/33427899/broadcasting-a-multiplication-across-a-pandas-panel/33428107#33428107). I just had a go with xray and it seems decent:\n\n``` python\nIn [56]: x\nOut[56]: \n<xray.DataArray (dim_0: 2, dim_1: 3, dim_2: 4)>\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\nCoordinates:\n  * dim_0    (dim_0) int64 0 1\n  * dim_1    (dim_1) int64 0 1 2\n  * dim_2    (dim_2) int64 0 1 2 3\n\nIn [57]: x * pd.np.asarray([0,1])[:, pd.np.newaxis, pd.np.newaxis]\nOut[57]: \n<xray.DataArray (dim_0: 2, dim_1: 3, dim_2: 4)>\narray([[[ 0,  0,  0,  0],\n        [ 0,  0,  0,  0],\n        [ 0,  0,  0,  0]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\nCoordinates:\n  * dim_1    (dim_1) int64 0 1 2\n  * dim_2    (dim_2) int64 0 1 2 3\n  * dim_0    (dim_0) int64 0 1\n\nIn [58]: x.to_pandas() * pd.np.asarray([0,1])[:, pd.np.newaxis, pd.np.newaxis]\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-58-18d40558bcd9> in <module>()\n----> 1 x.to_pandas() * pd.np.asarray([0,1])[:, pd.np.newaxis, pd.np.newaxis]\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pandas/core/ops.py in f(self, other)\n   1050             raise ValueError('Simple arithmetic with %s can only be '\n   1051                              'done with scalar values' %\n-> 1052                              self._constructor.__name__)\n   1053 \n   1054         return self._combine(other, op)\n\nValueError: Simple arithmetic with Panel can only be done with scalar values\n```\n- Non-standard functions such as percentile that don't exist on a `Panel`. I ended up using `np.nanpercentile` here; the alternative was `apply` over series combinations, which was extremely slow. (I tried applying the `DataFrame` percentile over two of the axes and then reorganizing the axes, which I think was a bit faster, but awkward).\n- Selecting, as in https://github.com/pydata/pandas/issues/11451. \n  I ended up using `np.where`:\n\n``` python\npanel.loc[:, :, :] = pd.np.where(\n        panel.notnull(),\n        panel,\n        fallback_df[:, :, pd.np.newaxis]\n    )\n```\n\nxray seems decent at this too:\n\n``` python\nIn [61]: x.where(x>5)\nOut[61]: \n<xray.DataArray (dim_0: 2, dim_1: 3, dim_2: 4)>\narray([[[ nan,  nan,  nan,  nan],\n        [ nan,  nan,   6.,   7.],\n        [  8.,   9.,  10.,  11.]],\n\n       [[ 12.,  13.,  14.,  15.],\n        [ 16.,  17.,  18.,  19.],\n        [ 20.,  21.,  22.,  23.]]])\nCoordinates:\n  * dim_1    (dim_1) int64 0 1 2\n  * dim_2    (dim_2) int64 0 1 2 3\n  * dim_0    (dim_0) int64 0 1\n\nIn [62]: x.where(x[0]>5)\nOut[62]: \n<xray.DataArray (dim_0: 2, dim_1: 3, dim_2: 4)>\narray([[[ nan,  nan,  nan,  nan],\n        [ nan,  nan,   6.,   7.],\n        [  8.,   9.,  10.,  11.]],\n\n       [[ nan,  nan,  nan,  nan],\n        [ nan,  nan,  18.,  19.],\n        [ 20.,  21.,  22.,  23.]]])\nCoordinates:\n  * dim_1    (dim_1) int64 0 1 2\n  * dim_2    (dim_2) int64 0 1 2 3\n  * dim_0    (dim_0) int64 0 1\n```\n\nHope this is helpful - thanks for your engagement @jreback \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/152681456",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-152681456",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 152681456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjY4MTQ1Ng==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-31T00:52:46Z",
    "updated_at": "2015-10-31T00:52:46Z",
    "author_association": "MEMBER",
    "body": "Yes, these sorts of issues are exactly why we wrote xray in the first place. The pandas API and internals weren't really designed with n-dimensional data in mind, which makes panels and nd-panel quite awkward.\n\n> xray mostly has the design I expected, I think, although does remember the collapsed dimension:\n\nThe collapsed dimension is essentially just metadata and can be safely ignored. I think @jreback was a little confused here, but scalar coordinates are not used for any sort of alignment.\n\nIMO the xray.DataArray is almost strictly more useful the panels. The main feature gap is that we currently don't support MultiIndex in xray, but hopefully that will change soon. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167914390",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-167914390",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 167914390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzkxNDM5MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-30T01:25:50Z",
    "updated_at": "2015-12-30T01:25:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MaximilianR \n\nsince I understand you recently switched from using `Panels` to `x-ray`, can you elaborate on how it went? good-bad-ugly?\n\nif we deprecate `Panel` entirely and make `to_panel` return an `x-ray` object. What are upsides / downsides?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167944787",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-167944787",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 167944787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Nzk0NDc4Nw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-30T06:25:11Z",
    "updated_at": "2015-12-31T03:49:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure - I'll give a short synthesis, and happy to answer any follow up questions you have.\n\nGood:\n- Clear, explicit API, very few surprises. Indexing in particular is very reliable. Stark contrast to `Panel`!\n- Labeled dimensions, and the benefits that come with them - `.sel`, `.isel` (which becomes more important for higher dimensional datasets)\n- Clear difference between a `DataArray` and `Dataset`, independent of dimensionality (the ability to have `DataArray`s aligned on different dimensions is awesome)\n\nBad - minor, and very specific to my experience:\n- Index issues - for indexes whose `.values` aren't the same as the index (`PeriodIndex`, maybe tz?).  `PeriodIndex` is very usable though given some recent minor changes. No MultiIndexes. @shoyer will have a better view here\n- Smaller API - greater need to use numpy / bottleneck / numbagg functions. For example, `.where` doesn't take an `other` argument\n- A bit less magic - for example, you can't slice a date index with a string `['2015']`\n- I think this is a big plus for XRay generally, but given that `DataArray`s can only be a single type, that would have to be handled in `.to_panel`\n\nOverall it's a beautiful library, both for exploratory work and for production. I'm very excited to be using it, and grateful to @shoyer for creating it. \n\nI don't have a strong view on whether we should make `to_panel` return an XRay `DataArray`, but I _do_ think we should choose an articulate a vision & roadmap on `Panel` vs XRay - the time the community spends on improving Panel _around the edges_ is a waste IMHO, and it's the role of the maintainers to ensure that contributors know whether they're working on sustainable products.\n\nLet me know if I can help beyond this at all,\nMax\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/168604701",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-168604701",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 168604701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODYwNDcwMQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-04T07:49:13Z",
    "updated_at": "2016-01-04T07:49:13Z",
    "author_association": "MEMBER",
    "body": "The good news is that almost all of @MaximilianR's issues should be fixable with a bit more work -- there are no fundamental design issues. For example, I just made a PR adding MultiIndex support (https://github.com/xray/xray/pull/702).\n\n> for example, you can't slice an date index with a string `['2015']`\n\nCould you share an example where this fails? There may be a bug here -- we've had support for string indexing of datetime indexes since almost the beginning: http://xray.readthedocs.org/en/stable/time-series.html#datetime-indexing\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/168679047",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-168679047",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 168679047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODY3OTA0Nw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-04T13:44:09Z",
    "updated_at": "2016-01-04T13:44:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "That should read `PeriodIndex`:\n\n``` python\nIn [51]: ds=xray.Dataset(coords={'date':pd.period_range(periods=10,start='2000')})\n\nIn [52]: ds['d']=('date', pd.np.random.rand(10))\n\nIn [53]: ds.sel(date='2000')\nOut[53]: \n<xray.Dataset>\nDimensions:  ()\nCoordinates:\n    date     object 2000-01-01\nData variables:\n    d        float64 0.8965\n```\n\nConfirming it works for `DatetimeIndex`:\n\n``` python\nIn [54]: ds=xray.Dataset(coords={'date':pd.date_range(periods=10,start='2000')})\n\nIn [55]: ds['d']=('date', pd.np.random.rand(10))\n\nIn [56]: ds.sel(date='2000')\nOut[56]: \n<xray.Dataset>\nDimensions:  (date: 10)\nCoordinates:\n  * date     (date) datetime64[ns] 2000-01-01 2000-01-02 2000-01-03 ...\nData variables:\n    d        (date) float64 0.09303 0.5456 0.4934 0.08438 0.1854 0.2823 ...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314242929",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8906#issuecomment-314242929",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8906",
    "id": 314242929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDI0MjkyOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-10T21:06:18Z",
    "updated_at": "2017-07-10T21:06:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing as Panels are deprecated"
  }
]
