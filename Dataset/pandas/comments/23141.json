[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429579974",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429579974",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429579974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU3OTk3NA==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T22:20:41Z",
    "updated_at": "2018-11-19T04:25:01Z",
    "author_association": "NONE",
    "body": "Hello @ArtinSarraf! Thanks for updating the PR.\n\n - There are no PEP8 issues in the file [`pandas/core/indexes/multi.py`](https://github.com/ArtinSarraf/pandas/blob/c760359038aa88096d75f427b47636e288df1ffe/pandas/core/indexes/multi.py) !\n\n - There are no PEP8 issues in the file [`pandas/tests/indexes/multi/test_constructor.py`](https://github.com/ArtinSarraf/pandas/blob/c760359038aa88096d75f427b47636e288df1ffe/pandas/tests/indexes/multi/test_constructor.py) !\n\n - There are no PEP8 issues in the file [`pandas/tests/indexes/multi/test_conversion.py`](https://github.com/ArtinSarraf/pandas/blob/c760359038aa88096d75f427b47636e288df1ffe/pandas/tests/indexes/multi/test_conversion.py) !\n\n\n\n##### Comment last updated on November 19, 2018 at 04:25 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429580817",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429580817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429580817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU4MDgxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T22:33:59Z",
    "updated_at": "2018-10-13T22:33:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "huh? pls show a real usecase for this\r\n\r\nin the future pls open an issue for discussion first "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429580949",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429580949",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429580949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU4MDk0OQ==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T22:36:32Z",
    "updated_at": "2018-10-13T22:36:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry should have tagged this issue opened ~2 months ago. The issue contains an example as well.\r\n\r\nhttps://github.com/pandas-dev/pandas/issues/22420"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429582479",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429582479",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429582479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU4MjQ3OQ==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T23:04:52Z",
    "updated_at": "2018-10-13T23:11:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here are some more concrete examples of how these can be used as well.\r\n\r\nAdding metadata.\r\n\r\n    df = pd.DataFrame(np.random.randn(10, 6), columns=pd.MultiIndex.from_tuples([('NY', 'KJFK'), ('NY', 'KLGA'), ('CA', 'KLAX'), ('CA', 'KBUR'), ('AB', 'CYEG'), ('AB', 'CYYC')], names=['state', 'ICAO']))\r\n    country_state_mapping = pd.DataFrame([['US', 'NY'], ['US', 'CA'], ['CDN', 'AB'], ['CDN', 'ON']], columns=['country', 'state'])\r\n    meta = df.columns.to_frame(index=False)\r\n    new_meta = meta.merge(country_state_mapping, on='state', how='left')[['country', 'state', 'ICAO']]\r\n    df.columns = pd.MultiIndex.from_frame(new_meta)  # this can only work if to_frame guarantees label ordering, which it currently does not in 2.7, but does with this PR.\r\n\r\nFiltering\r\n\r\n    # continuing from previous\r\n    meta = df.columns.to_frame(index=False)\r\n    new_meta = meta.loc[meta.state.isin(['CA', 'AB'])]\r\n    df = df.reindex(columns=pd.MultiIndex.from_frame(new_meta))\r\n\r\nThe examples here are extremely simplified, but reflect how my coworkers and I use pandas for working with multiindices."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429583955",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429583955",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429583955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU4Mzk1NQ==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-10-13T23:37:23Z",
    "updated_at": "2018-12-08T00:03:43Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23141?src=pr&el=h1) Report\n> Merging [#23141](https://codecov.io/gh/pandas-dev/pandas/pull/23141?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/fc64ca869670d24af46b5e017baba88fdd5e9532?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/23141/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/23141?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #23141      +/-   ##\n==========================================\n+ Coverage    92.2%    92.2%   +<.01%     \n==========================================\n  Files         162      162              \n  Lines       51700    51709       +9     \n==========================================\n+ Hits        47670    47679       +9     \n  Misses       4030     4030\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.6% <100%> (ø)` | :arrow_up: |\n| #single | `43.02% <40%> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/23141?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/indexes/multi.py](https://codecov.io/gh/pandas-dev/pandas/pull/23141/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9tdWx0aS5weQ==) | `95.58% <100%> (+0.03%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23141?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23141?src=pr&el=footer). Last update [fc64ca8...9159b2d](https://codecov.io/gh/pandas-dev/pandas/pull/23141?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429625329",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429625329",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429625329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTYyNTMyOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T13:11:24Z",
    "updated_at": "2018-10-14T13:11:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can do the same thing if everything is in long form.\r\n\r\n```\r\nIn [93]: (pd.merge(df.unstack().reset_index(), country_state_mapping, on='state', how='left')\r\n    ...:    .set_index(['country', 'state', 'ICAO', 'level_2'])\r\n    ...:    .sort_index()\r\n    ...:    .unstack(level=[0,1,2])\r\n    ...:    .sort_index(axis=1)\r\n    ...: )\r\nOut[93]: \r\n                0                                                  \r\ncountry       CDN                  US                              \r\nstate          AB                  CA                  NY          \r\nICAO         CYEG      CYYC      KBUR      KLAX      KJFK      KLGA\r\nlevel_2                                                            \r\n0        0.368735  0.428429 -1.173573  0.256197  1.792880  0.414737\r\n1        0.993952 -0.313126 -1.814687 -0.025160 -0.775963 -0.665919\r\n2       -0.635185  2.063095  0.063650 -0.939815  0.219432  1.489314\r\n3       -0.156358  0.201501  0.344305 -1.562817 -0.103385  0.482686\r\n4        0.551272 -1.628747 -1.387776 -1.400052 -1.493635  2.323896\r\n5       -1.487852  0.466714  1.195675  0.006298  0.277463  1.170253\r\n6       -0.453253  1.850580  0.240695  1.375471  0.144580  0.012171\r\n7       -0.079981 -1.139398  0.855885  2.687475 -1.374322  0.543441\r\n8       -1.432287  0.100697 -0.554310 -0.306952  1.011671 -0.723025\r\n9       -0.235468  0.893887  0.638946  0.916163  0.149475  1.121286\r\n```\r\n\r\nWhat you are proposing is wide from manipulation, which though a nice idea, and in this particular case makes sense. Is not generaly purpose, nor easy for people to do (and requires sorting guarantees).\r\n\r\nSo why should this be added?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429647050",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429647050",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429647050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTY0NzA1MA==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T17:52:17Z",
    "updated_at": "2018-10-14T17:54:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "One of the nice features of multiindexes is that they act as meta-dataframes for the associated numeric data, allowing a frame to be much more concise and memory efficient. Long form manipulations require multiple pivots (which can be time consuming) and can require significant extra memory. The relationship between multiindexes and a standard dataframe can also be demonstrated through this following example. One can substitute a multiindex (and I have seen this done before) with a separate metaframe like so:\r\n\r\n    df = pd.DataFrame(np.random.randn(10, 6))\r\n    meta = pd.DataFrame([('NY', 'KJFK'), ('NY', 'KLGA'), ('CA', 'KLAX'), ('CA', 'KBUR'), ('AB', 'CYEG'), ('AB', 'CYYC')], columns=['state', 'ICAO'])\r\n    df.loc[:, meta.loc[meta.state.isin(['NY', 'AB'])].index]  # equivalent to above filtering example\r\n\r\nI believe that this, along with the fact that to_frame already exists shows that from_frame is a reasonable and logical complementary method to be added as a way to instantiate multiindexes.\r\n\r\nRegarding the sorting guarantees of to_frame, I think that this is something that any user would reasonably expect, considering the similarities between a mi and a df. Additionally, not only does it keep manipulations, that might involve using it, consistent, but all other related casting methods (e.g. tolist) ensure the sorting of the resultant type matches that of the original multiindex. At the very least I think adding a parameter to to_frame for preserving the original sorting would make sense. It would be very easy to add to the existing implementation.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429666992",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429666992",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429666992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTY2Njk5Mg==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T22:01:25Z",
    "updated_at": "2018-10-14T22:01:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would be happy to contribute to any further discussions. Is there a more appropriate forum for that?\r\n\r\nAlso I will add tests to the PR this week.\r\n\r\nAre there any types of examples in particular that would help move along the addition of this feature?\r\n\r\nThanks."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429838503",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-429838503",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 429838503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTgzODUwMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T12:43:34Z",
    "updated_at": "2018-10-15T12:43:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Are there any types of examples in particular that would help move along the addition of this feature?\r\n\r\nsome usecases, and showing how its possible now, but how the 'new' method makes it easeir."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430083542",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-430083542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 430083542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDA4MzU0Mg==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T02:57:34Z",
    "updated_at": "2018-10-27T16:40:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is a demo to show the benefits of the from_frame method. Thanks for taking the time to look.\r\nSome tests have been added as well.\r\n\r\n    # for convenience of this demo\r\n    pd.MultiIndex.from_frame = staticmethod(lambda df: pd.MultiIndex.from_tuples(list(df.values), names=list(df)))\r\n\r\n# Setup df\r\n\r\n    # memory usage of below frame ~82000000\r\n    #    multiindexes this large are not uncommon when dealing with things such as weather data for many cities\r\n    #    with their associated meta location info (i.e. country, state, county, etc.)\r\n    df = df = pd.DataFrame(\r\n        np.random.randn(10000, 1024), \r\n        index=pd.date_range('19910905', periods=10000, name='date'), \r\n        columns=pd.MultiIndex.from_product(\r\n            [list('abcd'), list('efgh'), list('ijkl'), list('mnop'), list('qrst')], \r\n            names=['L1', 'L2', 'L3', 'L4', 'L5']\r\n        )\r\n    )\r\n\r\n    meta_mapping = pd.DataFrame([['x', 'a'], ['x', 'b'], ['y', 'c'], ['z', 'd']], columns=['L0', 'L1'])\r\n\r\n\r\n# Adding meta data\r\n\r\n    # Long Form\r\n    # peak memory usage ~573440080  --  ~7x larger than original df\r\n    # execution time: ~13.7 secs\r\n\r\n    (\r\n        df.unstack().reset_index().merge(meta_mapping, on='L1', how='left')\r\n        .set_index(['L0', 'L1', 'L2', 'L3', 'L4', 'L5', 'date'])[0].unstack([0, 1, 2, 3, 4, 5])\r\n    )\r\n\r\n\r\n    # Wide Form\r\n    # peak memory usage ~82000000  --  no difference from original df\r\n    # execution time: ~0.271 sec  --  ~50x faster than long form\r\n    # cleaner and does not require explicitly writing out positional arguments or axis 0 names\r\n    # requires guaranteed ordering of to_frame - easy to guarantee/implement\r\n\r\n    (\r\n        df.T.set_index(pd.MultiIndex.from_frame(\r\n            df.columns.to_frame(index=False)\r\n            .merge(meta_mapping, on='L1', how='left')[['L0', 'L1', 'L2', 'L3', 'L4', 'L5']]\r\n        )).T\r\n    )\r\n\r\n# Quick Prototyping\r\nUse this df for the example below\r\n\r\n    # Often find it easier to prototype meta frames in excel. I then need to use that frame as a multiindex.\r\n    # Assume the below snippet was copied from excel rather than pyperclip\r\n    pyperclip.copy('''\r\n    country   state   county        city       \r\n    USA       ct      fairfield     Greenwich  \r\n    USA       ct      fairfield     Stamford   \r\n    USA       ny      westchester   Bronxville \r\n    USA       ny      bronx         Bronx      \r\n    USA       nj      monmouth      Rumson     \r\n    USA       nj      monmouth      Middletown \r\n    USA       nj      ocean         Ocean      \r\n    Canada    on      york          Toronto    \r\n    ''')\r\n    meta = pd.read_clipboard()\r\n    df = pd.DataFrame(np.random.randn(10, 8), columns=pd.MultiIndex.from_frame(meta))\r\n\r\n    # As far as I know there is no good and quick way to do this currently. (aside from the from_tuples method I showed above)\r\n\r\n\r\n# Formatting MultiIndex\r\nUse this formatted df for remainder of demo\r\n\r\n    # With from_frame\r\n    meta = df.columns.to_frame(index=False)\r\n    meta = meta.assign(state=meta.state.str.upper(), county=meta.county.str.title())\r\n    df.columns = pd.MultiIndex.from_frame(meta)\r\n\r\n    # Without from_frame\r\n    # More verbose, not as clear and requires the use of positional levels (as far as I know there is no complementary set_level_values method for get_level_values, which would also be nice)\r\n    df.columns = df.columns.set_levels(df.columns.levels[1].str.upper(), level=1).set_levels(df.columns.levels[2].str.title(), level=2)\r\n\r\n# Complex Filtering/Slicing\r\n\r\n    meta = df.columns.to_frame(index=False)  # used for all from_frame examples below\r\n\r\n\r\nKeep only counties with > 1 city\r\n\r\n    # With from_frame\r\n    df.reindex(columns=pd.MultiIndex.from_frame(meta.groupby('county').filter(lambda df: len(df)>1)))\r\n\r\n    # Long Form - same disadvantages as stated above\r\n    (\r\n        df.unstack().reset_index().groupby('county').filter(lambda dfx: len(dfx.city.unique())>1)\r\n        .set_index(['country', 'state', 'county', 'city', 'level_4']).unstack([0,1,2,3])[0]\r\n    )\r\n\r\n\r\nAdmittedly the 2 remaining examples below can be done without from_frame as well, like so:\r\n\r\n    # Requires to_frame to be ordered\r\n    mask = (meta...) & (meta...) | (meta...)\r\n    df.loc[:, mask]\r\n\r\n\r\nGet CT + NJ without Greenwich\r\n\r\n    # With from_frame\r\n    filtered_df = meta.loc[(meta.state.isin(['CT', 'NJ'])) & (meta.city != 'Greenwich')]\r\n    df.reindex(columns=pd.MultiIndex.from_frame(filtered_df))\r\n\r\n    # Without from_frame\r\n    # While this is more concise, it requires two different chained methods, while the from_frame\r\n    # method simplifies the filter to a standard dataframe filter\r\n    df.loc[:, pd.IndexSlice['USA', ['CT', 'NJ'], :]].drop('Greenwich', axis=1, level='city')\r\n\r\n\r\nGet all cities that don't start with \"Bron\"\r\n\r\n    # With from_frame\r\n    filtered_df = meta.loc[~meta.city.str.startswith('Bron')]\r\n    df.reindex(columns=pd.MultiIndex.from_frame(filtered_df))\r\n\r\n    # Without from_frame\r\n    # Not sure of a good way without going to long form\r\n\r\n# Custom Sorting\r\nThis is nice for formatting report output\r\n\r\nGiven the following custom ordering\r\n\r\n    order = {'state': ['NJ', 'CT', 'NY', 'ON'], 'country': ['USA', 'Canada']}\r\n\r\n    # With from_frame\r\n    def custom_sort(df, order):  # would be nice to see something like this as a df method (with some edge case handling)\r\n        df = df.copy()\r\n        orig_dtypes = df.dtypes.to_dict()\r\n        for col in df:\r\n            if col in order:\r\n                df.loc[:, col] = pd.Categorical(df.loc[:, col], order[col])\r\n        df = df.sort_values(by=df.columns.tolist())\r\n        for col in df:\r\n            df[col] = df[col].astype(orig_dtypes[col])\r\n        return df\r\n    \r\n    meta = df.columns.to_frame(index=False)\r\n    df.reindex(columns=pd.MultiIndex.from_frame(custom_sort(meta, order)))\r\n\r\n    # Without from_frame\r\n    # However, this requires explicitly listing out all the columns\r\n    # Not ideal/practical if you have many more items\r\n    df.iloc[:, [5,4,6,0,1,3,2,7]]\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430249321",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-430249321",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 430249321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDI0OTMyMQ==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T14:01:49Z",
    "updated_at": "2018-10-16T14:01:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there a way to rerun the Azure pipeline tests? The tests only failed for “Windows py36_np14” environment and the failed tests don’t seem to be related to my commits at all. I’m guessing it was a blip in the testing framework."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431585006",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-431585006",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 431585006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU4NTAwNg==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T14:07:54Z",
    "updated_at": "2018-10-20T14:07:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback\r\n\r\nPlease see additions to demo (Formatting and Custom Sorting):\r\nhttps://github.com/pandas-dev/pandas/pull/23141#issuecomment-430083542\r\n\r\nAlso any ideas on the tests? I don't see anything in the logs that point to any changes I've made."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433635956",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-433635956",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 433635956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzYzNTk1Ng==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-27T16:42:00Z",
    "updated_at": "2018-10-27T16:42:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback. Any thoughts on the examples provided above?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433673336",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-433673336",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 433673336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzY3MzMzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-28T03:29:54Z",
    "updated_at": "2018-10-28T03:29:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pandas-dev/pandas-core if anyone has thoughts here"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433724054",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-433724054",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 433724054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzcyNDA1NA==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-28T17:20:19Z",
    "updated_at": "2018-10-28T17:20:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@datapythonista. Changes have been made and pushed. I've also added from_frame to the \"See Also\" of the other 3 contructor methods. Thanks."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433748546",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-433748546",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 433748546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzc0ODU0Ng==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-28T22:37:23Z",
    "updated_at": "2018-10-28T22:37:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gfyoung. All requested changes have been applied. Thanks."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434898956",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-434898956",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 434898956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDg5ODk1Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T01:16:16Z",
    "updated_at": "2018-11-01T01:16:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "before we get more comments on this PR code itself. would like commentary on the merits of this idea. \r\n\r\n@ArtinSarraf actually might be beneficial to open an issue about this first."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434899023",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-434899023",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 434899023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDg5OTAyMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T01:16:48Z",
    "updated_at": "2018-11-01T01:16:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ArtinSarraf i see you did actually. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435210201",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-435210201",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 435210201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTIxMDIwMQ==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T22:35:43Z",
    "updated_at": "2018-11-01T22:35:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback - I’ve referenced a couple of the important comments in this PR in the associated issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435588759",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-435588759",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 435588759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTU4ODc1OQ==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-03T13:40:13Z",
    "updated_at": "2018-11-03T13:40:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger - I've made the changes to ensure that the dtypes are preserved in both from/to_frame. I've also added tests to both to catch this. Also added one extra ability to from_frame, passing an optional names argument for overriding the default names (similar to the to_frame method)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437681798",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437681798",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 437681798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzY4MTc5OA==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T15:57:15Z",
    "updated_at": "2018-11-11T15:57:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback / @TomAugspurger / @gfyoung \r\n\r\nAny other feedback on code/merits of this PR?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437701210",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437701210",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 437701210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzcwMTIxMA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T20:19:06Z",
    "updated_at": "2018-11-11T20:21:36Z",
    "author_association": "MEMBER",
    "body": "I'm not convinced ``squeeze`` should be exposed - not even as a parameter. ``._squeeze()`` is - in the only case in which it makes sense - just an alternative for ``.get_level_values(0)``. And in general in the API we do not distinguish much between ``Index`` and ``MultiIndex`` with 1 level. In fact, I guess any difference (not just in behavior, also in performance) can be considered a bug.\r\n\r\nSo why should (unsophisticated) users bother about this difference?!\r\n\r\n(Contrast with ``df.squeeze()`` which changes a ``DataFrame`` in a ``Series`` with very different indexing semantics)\r\n\r\nAlso if we provide ``squeeze`` we probably want to provide the equivalent flat ``Index`` -> 1-level ``MultiIndex`` syntactic sugar?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437709786",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437709786",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 437709786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzcwOTc4Ng==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T22:10:25Z",
    "updated_at": "2018-11-11T22:10:36Z",
    "author_association": "MEMBER",
    "body": "Another thought: is there any reason why we should not accept a 2-d ``array``, or even list of lists, rather than just a ``DataFrame``? After all, we are primarily looking at the ``df.values`` (although ``.columns`` is useful for the level names). We would have to change the method name (``from_data``?), but we would mirror slightly better both the initialization of a ``pd.Series(a_1d_array)``, and the interchangeability of 2d structures (``DataFrame``/``MultiIndex``/``array``/nested lists) as right hand side of an assignment."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437712278",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437712278",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 437712278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzcxMjI3OA==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T22:43:45Z",
    "updated_at": "2018-11-11T22:43:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@toobaz - Agreed regarding the squeeze method. The original inspiration for it was dealing with dataframes coming from external processes that I have no control over which contained single level multiindexes. I think almost all of these cases were due to bad coding practices that in older versions of pandas would have resulted in a regular index instead (e.g. df.columns = [['a','b','c']]). The only time I would see it having any usefulness over get_level_values(0) is if you don't know whether an object is a multilevel multiindex or not, which probably shouldn't ever be the case. That certainly isn't the case here, so I really should just be using get_level values, and will update accordingly.\r\n\r\n> And in general in the API we do not distinguish much between Index and MultiIndex with 1 level. In fact, I guess any difference (not just in behavior, also in performance) can be considered a bug.\r\n\r\nOff the top of my head, groupby, while behaving as I would expect, is slightly different.\r\n\r\ndf.groupby('col1') -> df.groupby(('col1',))"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437712343",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437712343",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 437712343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzcxMjM0Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T22:44:30Z",
    "updated_at": "2018-11-11T22:44:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "only problem with accepting generic 2d input is we lose the names\r\nbut that would be ok if names is None\r\n\r\nso agree this would be a nice addition (just need to wrap the input in the Dataframe constructor)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437712490",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437712490",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 437712490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzcxMjQ5MA==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T22:46:12Z",
    "updated_at": "2018-11-11T22:46:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@toobaz regarding the second commnet, would that maybe make more sense as an orient parameter in from_arrays?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437917758",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437917758",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 437917758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzkxNzc1OA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T15:16:00Z",
    "updated_at": "2018-11-12T15:16:00Z",
    "author_association": "MEMBER",
    "body": "> @toobaz regarding the second commnet, would that maybe make more sense as an orient parameter in from_arrays?\r\n\r\nGood point... but then, I would as well merge the functionality of ``from_frame`` in ``from_arrays``.\r\n\r\nNot just for avoiding duplication in the API, but also because I find it wrong (I had never noticed) that\r\n\r\n```\r\nIn [2]: d = [[1, 2], [3, 4]]\r\n\r\nIn [3]: pd.MultiIndex.from_arrays(pd.DataFrame(d))\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n[...]\r\nTypeError: Input must be list-like\r\n\r\nIn [4]: pd.MultiIndex.from_arrays(np.array(d))\r\nOut[4]: \r\nMultiIndex(levels=[[1, 2], [3, 4]],\r\n           labels=[[0, 1], [0, 1]])\r\n```\r\n\r\nAgain: my point is that, where possible, we treat all kinds of 2d data in the same way. So if ``from_arrays`` is able to manage a 2d array, it should also be able to manage a ``pd.DataFrame``. Now, as you correctly point out, the orientation changes - and it would be cool to have ``from_arrays`` to manage the different orientation, rather than a new method. I would just not add a new method only for taking care of column names, which are optional."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437985400",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437985400",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 437985400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk4NTQwMA==",
    "user": {
      "login": "ArtinSarraf",
      "id": 13501084,
      "node_id": "MDQ6VXNlcjEzNTAxMDg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13501084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtinSarraf",
      "html_url": "https://github.com/ArtinSarraf",
      "followers_url": "https://api.github.com/users/ArtinSarraf/followers",
      "following_url": "https://api.github.com/users/ArtinSarraf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtinSarraf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtinSarraf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtinSarraf/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtinSarraf/orgs",
      "repos_url": "https://api.github.com/users/ArtinSarraf/repos",
      "events_url": "https://api.github.com/users/ArtinSarraf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtinSarraf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T18:36:12Z",
    "updated_at": "2018-11-12T18:52:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "If from_arrays is updated to take a DataFrame, it will need to have a very specific implementation for them. First it will need to implicitly change the default orientation. Even if the default is set to None so that it can be inferred, it would be strange that the from_arrays(df) and from_arrays(df.values) would be different (since df.values probably shouldn’t be treated differently than any other 2d list).\r\n\r\nAlso from_frame is not just a replacement for from_arrays(df.values.T) since that would potentially lose dtype info (e.g. categoricals).\r\n\r\nI think tailoring from_arrays to allow DataFrames might introduce quite a bit more inconsistencies and specifically tailored logic than we would want in a generic method."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438076109",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-438076109",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 438076109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODA3NjEwOQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T23:58:23Z",
    "updated_at": "2018-11-12T23:58:23Z",
    "author_association": "MEMBER",
    "body": "> If from_arrays is updated to take a DataFrame, it will need to have a very specific implementation for them. First it will need to implicitly change the default orientation. Even if the default is set to None so that it can be inferred, it would be strange that the from_arrays(df) and from_arrays(df.values) would be different (since df.values probably shouldn’t be treated differently than any other 2d list).\r\n\r\nWhat I had in mind would actually be that ``from_arrays(df)`` would behave exactly like ``from_arrays(df.values)`` and that ``from_arrays(df, orient=\"horizontal\")`` would behave like you are designing ``from_frame(df)``. But I do realize now that one expects a ``DataFrame`` to be transformed (by default) in a ``MultiIndex`` where each column becomes a level. So my proposal is not good.\r\n\r\nI think the original sin is in ``from_arrays`` which should have defaulted to not changing the orientation of data, and I assume it is too late to change this. So you are right that ``from_arrays(df)`` is not the correct replacement for ``from_frame``. But I still believe that:\r\n- the difference between the new method and ``from_arrays`` should primarily be of orientation, not of type: it should accept any 2d data structure (and ``from_arrays`` too, but now that's a separate issue)\r\n- the name should reflect this. I would prefer ``from_data`` or even better ``from_array`` to ``from_frame``"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438096014",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23141#issuecomment-438096014",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23141",
    "id": 438096014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODA5NjAxNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T01:33:17Z",
    "updated_at": "2018-11-13T01:33:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agreed that the orientation difference warrants two methods.\n\n________________________________\nFrom: ArtinSarraf <notifications@github.com>\nSent: Monday, November 12, 2018 12:36:17 PM\nTo: pandas-dev/pandas\nCc: Tom Augspurger; Mention\nSubject: Re: [pandas-dev/pandas] Enhancement/from frame (#23141)\n\n\nIf from_arrays is updated to take a DataFrame, it will need to have a very specific implementation for them. First it will need to implicitly change the default orientation. Even if the default is set to None so that it can be inferred, it would be strange that the from_arrays(df) and from_arrays(df.values) would be different (since df.values probably shouldn’t be treated differently than any other 2d list).\n\nAlso from_frame is not just a replacement for from_arrays(df.values.T) since that would potentially lose dtype info (e.g. categoricals).\n\nI’m not opposed to moving the functionality into somewhere more generic, but I think tailoring from_arrays to allow DataFrames might introduce quite a bit more inconsistencies and specificity tailored logic than we would want in a generic method.\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://github.com/pandas-dev/pandas/pull/23141#issuecomment-437985400>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABQHIpmVdqpACWOsJCo0wnKevRgs91G4ks5uub-hgaJpZM4Xa2wj>.\n"
  }
]
