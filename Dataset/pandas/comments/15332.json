[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278155587",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15332#issuecomment-278155587",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15332",
    "id": 278155587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE1NTU4Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T22:01:44Z",
    "updated_at": "2017-02-07T22:02:07Z",
    "author_association": "MEMBER",
    "body": "In the integer case, what would be the rule? As I would actually expect it to be floats, not ints (or at least in the non-left-join case)\r\n\r\nI am not sure I find it worth it add a keyword for this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350556959",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15332#issuecomment-350556959",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15332",
    "id": 350556959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDU1Njk1OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-10T15:42:14Z",
    "updated_at": "2017-12-10T15:42:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "xref https://github.com/pandas-dev/pandas/pull/18674"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350557151",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15332#issuecomment-350557151",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15332",
    "id": 350557151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDU1NzE1MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-10T15:45:11Z",
    "updated_at": "2017-12-10T15:45:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @reidy-p \r\n\r\nthis is a little bit trickier, we need to allow merges on compat categorical types, but should raise I think on incompat, but might be some cases where we are ok to merge (note that these should still merge just be turned into ``object``)\r\n\r\ne.g. if the categoricals have the *same* categories and are unordered but just in a different order I think this might be ok\r\n\r\n```\r\nIn [2]: dtype1 = CategoricalDtype(list('abc'),ordered=False)\r\n\r\nIn [3]: dtype2 = CategoricalDtype(list('bac'),ordered=False)\r\n\r\nIn [4]: dtype1 == dtype2\r\nOut[4]: True\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350571509",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15332#issuecomment-350571509",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15332",
    "id": 350571509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDU3MTUwOQ==",
    "user": {
      "login": "reidy-p",
      "id": 21114125,
      "node_id": "MDQ6VXNlcjIxMTE0MTI1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/21114125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reidy-p",
      "html_url": "https://github.com/reidy-p",
      "followers_url": "https://api.github.com/users/reidy-p/followers",
      "following_url": "https://api.github.com/users/reidy-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/reidy-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reidy-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reidy-p/subscriptions",
      "organizations_url": "https://api.github.com/users/reidy-p/orgs",
      "repos_url": "https://api.github.com/users/reidy-p/repos",
      "events_url": "https://api.github.com/users/reidy-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reidy-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-10T19:06:10Z",
    "updated_at": "2017-12-10T19:06:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback thanks.\r\n\r\nAt the moment, merging on categorical columns seems to retain the ``categorical`` type when:\r\n\r\n1. Columns have same categories and both are unordered\r\n2. Columns have same categories and same ordering\r\n\r\nBut many other cases lead to casting to ``object``. For example:\r\n\r\n1. Columns have same categories but different ordering\r\n```\r\nIn [1]: cat1 = pd.Categorical(list('abc'), ordered=True, categories=['c', 'b', 'a'])\r\nIn [2]: cat2 = pd.Categorical(list('bac'), ordered=True, categories=['a', 'b', 'c'])\r\n\r\nIn [3]: a = pd.DataFrame({'A': cat1})\r\nIn [4]: b = pd.DataFrame({'A': cat2})\r\nIn [5]: a.merge(b, on='A', how='outer').dtypes\r\nOut[5]:\r\nA    object\r\ndtype: object\r\n```\r\n\r\n2. One categorical column is ordered while the other is not\r\n```\r\nIn [6]: cat1 = pd.Categorical(list('abc'), ordered=False)\r\nIn [7]: cat2 = pd.Categorical(list('bac'), ordered=True, categories=['a', 'b', 'c'])\r\n\r\nIn [8]: a = pd.DataFrame({'A': cat1})\r\nIn [9]: b = pd.DataFrame({'A': cat2})\r\nIn [10]: a.merge(b, on='A', how='outer').dtypes\r\nOut[10]:\r\nA    object\r\ndtype: object\r\n```\r\n3. Columns have different categories\r\n```\r\nIn [11]: cat1 = pd.Categorical(list('abcd'), ordered=False)\r\nIn [12]: cat2 = pd.Categorical(list('bac'), ordered=False)\r\n\r\nIn [13]: a = pd.DataFrame({'A': cat1})\r\nIn [14]: b = pd.DataFrame({'A': cat2})\r\nIn [15]: a.merge(b, on='A', how='outer').dtypes\r\nOut[15]:\r\nA    object\r\ndtype: object\r\n```\r\n\r\nAnd there are probably other cases when casting to ``object`` occurs too. \r\n\r\nShould we raise instead of casting to ``object`` in the above cases? And are there any cases where we should allow casting to ``object`` and _not_ raise?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350575418",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15332#issuecomment-350575418",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15332",
    "id": 350575418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDU3NTQxOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-10T19:35:20Z",
    "updated_at": "2017-12-10T19:35:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @TomAugspurger @chris-b1 "
  }
]
