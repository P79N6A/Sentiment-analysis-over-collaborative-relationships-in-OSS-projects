[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139823196",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139823196",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139823196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTgyMzE5Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-12T22:06:00Z",
    "updated_at": "2015-09-12T22:06:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri it may be less readable, but I didn't have the time to debug. welcome your assistance with that. these win- issues are annoying. if you can spin up a vm would be great (I do this on macosx in fact ,with a win vm).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139824029",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139824029",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139824029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTgyNDAyOQ==",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-12T22:10:32Z",
    "updated_at": "2015-09-12T22:10:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "if u post the traceback i can look into.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139824945",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139824945",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139824945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTgyNDk0NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-12T22:19:56Z",
    "updated_at": "2015-09-12T22:19:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I took master and reverted that commit\n\n```\n[pandas] c:\\Users\\Jeff Reback\\pandas>git revert  54f788a1c545c6b028dcd63a776d9f4fd7c9dbae -m 1\n[master aa34c62] Revert \"Merge pull request #10988 from jreback/winfixes\"\n 2 files changed, 7 insertions(+), 7 deletions(-)\n\n[pandas] c:\\Users\\Jeff Reback\\pandas>git diff HEAD~1\ndiff --git a/pandas/core/groupby.py b/pandas/core/groupby.py\nindex f34fd6e..8f8ce31 100644\n--- a/pandas/core/groupby.py\n+++ b/pandas/core/groupby.py\n@@ -1811,13 +1811,13 @@ class BinGrouper(BaseGrouper):\n     @cache_readonly\n     def group_info(self):\n         ngroups = self.ngroups\n-        obs_group_ids = np.arange(ngroups, dtype='int64')\n+        obs_group_ids = np.arange(ngroups)\n         rep = np.diff(np.r_[0, self.bins])\n\n         if ngroups == len(self.bins):\n-            comp_ids = np.repeat(np.arange(ngroups, dtype='int64'), rep)\n+            comp_ids = np.repeat(np.arange(ngroups), rep)\n         else:\n-            comp_ids = np.repeat(np.r_[-1, np.arange(ngroups, dtype='int64')], rep)\n+            comp_ids = np.repeat(np.r_[-1, np.arange(ngroups)], rep)\n\n         return comp_ids, obs_group_ids, ngroups\n\n@@ -2570,8 +2570,8 @@ class SeriesGroupBy(GroupBy):\n\n         # group boundries are where group ids change\n         # unique observations are where sorted values change\n-        idx = com._ensure_int64(np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]])\n-        inc = com._ensure_int64(np.r_[1, val[1:] != val[:-1]])\n+        idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n+        inc = np.r_[1, val[1:] != val[:-1]]\n\n         # 1st item of each group is a new unique observation\n         mask = isnull(val)\ndiff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py\nindex ec03d55..49d3446 100644\n--- a/pandas/tseries/tests/test_resample.py\n+++ b/pandas/tseries/tests/test_resample.py\n@@ -919,7 +919,7 @@ class TestResample(tm.TestCase):\n     def test_resample_group_info(self):  # GH10914\n         for n, k in product((10000, 100000), (10, 100, 1000)):\n             dr = date_range(start='2015-08-27', periods=n // 10, freq='T')\n-            ts = Series(np.random.randint(0, n // k, n).astype('int64'),\n+            ts = Series(np.random.randint(0, n // k, n),\n                         index=np.random.choice(dr, n))\n\n             left = ts.resample('30T', how='nunique')\n@@ -1585,7 +1585,7 @@ class TestTimeGrouper(tm.TestCase):\n         # check TimeGrouper's aggregation is identical as normal groupby\n\n         n = 20\n```\n\nerrors\n\n```\n[pandas] c:\\Users\\Jeff Reback\\pandas>nosetests pandas/tseries/tests/test_resample.py\n...E.E.E....E......FE.EFE....EEEE...E..........E.............EE....E...E..............EF.....E\n======================================================================\nERROR: test_custom_grouper (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 54, in test_custom_grouper\n    g._cython_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1150, in _cython_agg_general\n    result, names = self.grouper.aggregate(obj.values, how)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1584, in aggregate\n    result = self._aggregate(result, counts, values, agg_func, is_numeric)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1629, in _aggregate\n    agg_func(result, counts, values, comp_ids)\n  File \"pandas\\src\\generated.pyx\", line 6743, in pandas.algos.group_add_float64 (pandas\\algos.c:125163)\n    def group_add_float64(ndarray[float64_t, ndim=2] out,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_how_lambda_functions (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 850, in test_how_lambda_functions\n    bar_exp = ts.resample('M', how='std')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 287, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 792, in std\n    return np.sqrt(self.var(ddof=ddof))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 801, in var\n    return self._cython_agg_general('var')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1150, in _cython_agg_general\n    result, names = self.grouper.aggregate(obj.values, how)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1584, in aggregate\n    result = self._aggregate(result, counts, values, agg_func, is_numeric)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1629, in _aggregate\n    agg_func(result, counts, values, comp_ids)\n  File \"pandas\\src\\generated.pyx\", line 6988, in pandas.algos.group_var_float64 (pandas\\algos.c:128550)\n    def group_var_float64(ndarray[float64_t, ndim=2] out,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_ohlc_5min (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 504, in test_ohlc_5min\n    label='right')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 287, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 837, in ohlc\n    lambda x: x._cython_agg_general('ohlc'))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2717, in _apply_to_column_groupbys\n    return func(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 837, in <lambda>\n    lambda x: x._cython_agg_general('ohlc'))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1150, in _cython_agg_general\n    result, names = self.grouper.aggregate(obj.values, how)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1584, in aggregate\n    result = self._aggregate(result, counts, values, agg_func, is_numeric)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1629, in _aggregate\n    agg_func(result, counts, values, comp_ids)\n  File \"pandas\\src\\generated.pyx\", line 7195, in pandas.algos.group_ohlc_float64 (pandas\\algos.c:131795)\n    def group_ohlc_float64(ndarray[float64_t, ndim=2] out,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_resample_axis1 (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 539, in test_resample_axis1\n    result = df.resample('M', axis=1)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 287, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2814, in aggregate\n    return getattr(self, arg)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1168, in _python_agg_general\n    result, counts = self.grouper.agg_series(obj, f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1880, in agg_series\n    return grouper.get_result()\n  File \"pandas\\src\\reduce.pyx\", line 274, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35764)\n    raise\n  File \"pandas\\src\\reduce.pyx\", line 260, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35604)\n    res = self.f(cached_typ)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1162, in <lambda>\n    f = lambda x: func(x, *args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 763, in <lambda>\n    f = lambda x: x.mean(axis=self.axis)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 4540, in stat_func\n    skipna=skipna, numeric_only=numeric_only)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\series.py\", line 2177, in _reduce\n    self._get_axis_number(axis)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 314, in _get_axis_number\n    .format(axis, type(self)))\nValueError: No axis named 1 for object type <class 'pandas.core.series.Series'>\n\n======================================================================\nERROR: test_resample_empty (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 688, in test_resample_empty\n    empty_series.resample('d', how)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 287, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1168, in _python_agg_general\n    result, counts = self.grouper.agg_series(obj, f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1880, in agg_series\n    return grouper.get_result()\n  File \"pandas\\src\\reduce.pyx\", line 227, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:34986)\n    counts[0] = self.bins[0]\nIndexError: index 0 is out of bounds for axis 0 with size 0\n\n======================================================================\nERROR: test_resample_frame_basic (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 322, in test_resample_frame_basic\n    g._cython_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2739, in _cython_agg_general\n    new_items, new_blocks = self._cython_agg_blocks(how, numeric_only=numeric_only)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2775, in _cython_agg_blocks\n    result, _ = self.grouper.aggregate(block.values, how, axis=agg_axis)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1584, in aggregate\n    result = self._aggregate(result, counts, values, agg_func, is_numeric)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1629, in _aggregate\n    agg_func(result, counts, values, comp_ids)\n  File \"pandas\\src\\generated.pyx\", line 6743, in pandas.algos.group_add_float64 (pandas\\algos.c:125163)\n    def group_add_float64(ndarray[float64_t, ndim=2] out,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_resample_how (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 131, in test_resample_how\n    closed='right', label='right')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 287, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 792, in std\n    return np.sqrt(self.var(ddof=ddof))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 801, in var\n    return self._cython_agg_general('var')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1150, in _cython_agg_general\n    result, names = self.grouper.aggregate(obj.values, how)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1584, in aggregate\n    result = self._aggregate(result, counts, values, agg_func, is_numeric)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1629, in _aggregate\n    agg_func(result, counts, values, comp_ids)\n  File \"pandas\\src\\generated.pyx\", line 6988, in pandas.algos.group_var_float64 (pandas\\algos.c:128550)\n    def group_var_float64(ndarray[float64_t, ndim=2] out,\nValueError: (\"Buffer dtype mismatch, expected 'int64_t' but got 'long'\", 'how=std')\n\n======================================================================\nERROR: test_resample_ohlc (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 406, in test_resample_ohlc\n    result = s.resample('5Min', how='ohlc')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 287, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 837, in ohlc\n    lambda x: x._cython_agg_general('ohlc'))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2717, in _apply_to_column_groupbys\n    return func(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 837, in <lambda>\n    lambda x: x._cython_agg_general('ohlc'))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1150, in _cython_agg_general\n    result, names = self.grouper.aggregate(obj.values, how)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1584, in aggregate\n    result = self._aggregate(result, counts, values, agg_func, is_numeric)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1629, in _aggregate\n    agg_func(result, counts, values, comp_ids)\n  File \"pandas\\src\\generated.pyx\", line 7195, in pandas.algos.group_ohlc_float64 (pandas\\algos.c:131795)\n    def group_ohlc_float64(ndarray[float64_t, ndim=2] out,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_resample_ohlc_dataframe (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 431, in test_resample_ohlc_dataframe\n    res = df.resample('H', how='ohlc')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 315, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2814, in aggregate\n    return getattr(self, arg)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 837, in ohlc\n    lambda x: x._cython_agg_general('ohlc'))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3488, in _apply_to_column_groupbys\n    keys=self._selected_obj.columns, axis=1)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tools\\merge.py\", line 809, in concat\n    copy=copy)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tools\\merge.py\", line 839, in __init__\n    objs = list(objs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3486, in <genexpr>\n    (func(col_groupby) for _, col_groupby\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 837, in <lambda>\n    lambda x: x._cython_agg_general('ohlc'))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1150, in _cython_agg_general\n    result, names = self.grouper.aggregate(obj.values, how)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1584, in aggregate\n    result = self._aggregate(result, counts, values, agg_func, is_numeric)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1629, in _aggregate\n    agg_func(result, counts, values, comp_ids)\n  File \"pandas\\src\\generated.pyx\", line 7195, in pandas.algos.group_ohlc_float64 (pandas\\algos.c:131795)\n    def group_ohlc_float64(ndarray[float64_t, ndim=2] out,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_resample_panel (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 552, in test_resample_panel\n    result = panel.resample('M', axis=1)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 287, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3548, in aggregate\n    return getattr(self, arg)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1166, in _python_agg_general\n    for name, obj in self._iterate_slices():\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3524, in _iterate_slices\n    raise NotImplementedError(\"axis other than 0 is not supported\")\nNotImplementedError: axis other than 0 is not supported\n\n======================================================================\nERROR: test_resample_panel_numpy (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 578, in test_resample_panel_numpy\n    expected = panel.resample('M', how='mean', axis=1)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 287, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3548, in aggregate\n    return getattr(self, arg)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1166, in _python_agg_general\n    for name, obj in self._iterate_slices():\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3524, in _iterate_slices\n    raise NotImplementedError(\"axis other than 0 is not supported\")\nNotImplementedError: axis other than 0 is not supported\n\n======================================================================\nERROR: test_resample_timegrouper (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 901, in test_resample_timegrouper\n    result = df.set_index('A').resample('M', how='count')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 315, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2814, in aggregate\n    return getattr(self, arg)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3506, in count\n    return self._wrap_agged_blocks(data.items, list(blk))\n  File \"pandas\\lib.pyx\", line 1258, in pandas.lib.count_level_2d (pandas\\lib.c:22712)\n    def count_level_2d(ndarray[uint8_t, ndim=2, cast=True] mask,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_all_values_single_bin (pandas.tseries.tests.test_resample.TestResamplePeriodIndex)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 1411, in test_all_values_single_bin\n    result = s.resample(\"A\", how='mean')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 92, in resample\n    rs = self._resample_periods()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 357, in _resample_periods\n    return grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1168, in _python_agg_general\n    result, counts = self.grouper.agg_series(obj, f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1880, in agg_series\n    return grouper.get_result()\n  File \"pandas\\src\\reduce.pyx\", line 274, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35764)\n    raise\n  File \"pandas\\src\\reduce.pyx\", line 249, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35283)\n    cached_ityp = self.ityp(islider.buf)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\period.py\", line 185, in __new__\n    ordinal, freq = cls._from_arraylike(data, freq, tz)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\period.py\", line 251, in _from_arraylike\n    raise ValueError('freq not specified and cannot be '\nValueError: freq not specified and cannot be inferred from first element\n\n======================================================================\nERROR: test_basic_downsample (pandas.tseries.tests.test_resample.TestResamplePeriodIndex)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 1063, in test_basic_downsample\n    result = ts.resample('a-dec')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 92, in resample\n    rs = self._resample_periods()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 357, in _resample_periods\n    return grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1168, in _python_agg_general\n    result, counts = self.grouper.agg_series(obj, f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1880, in agg_series\n    return grouper.get_result()\n  File \"pandas\\src\\reduce.pyx\", line 274, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35764)\n    raise\n  File \"pandas\\src\\reduce.pyx\", line 249, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35283)\n    cached_ityp = self.ityp(islider.buf)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\period.py\", line 185, in __new__\n    ordinal, freq = cls._from_arraylike(data, freq, tz)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\period.py\", line 251, in _from_arraylike\n    raise ValueError('freq not specified and cannot be '\nValueError: freq not specified and cannot be inferred from first element\n\n======================================================================\nERROR: test_basic_upsample (pandas.tseries.tests.test_resample.TestResamplePeriodIndex)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 1084, in test_basic_upsample\n    result = ts.resample('a-dec')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 92, in resample\n    rs = self._resample_periods()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 357, in _resample_periods\n    return grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1168, in _python_agg_general\n    result, counts = self.grouper.agg_series(obj, f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1880, in agg_series\n    return grouper.get_result()\n  File \"pandas\\src\\reduce.pyx\", line 274, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35764)\n    raise\n  File \"pandas\\src\\reduce.pyx\", line 249, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35283)\n    cached_ityp = self.ityp(islider.buf)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\period.py\", line 185, in __new__\n    ordinal, freq = cls._from_arraylike(data, freq, tz)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\period.py\", line 251, in _from_arraylike\n    raise ValueError('freq not specified and cannot be '\nValueError: freq not specified and cannot be inferred from first element\n\n======================================================================\nERROR: test_evenly_divisible_with_no_extra_bins (pandas.tseries.tests.test_resample.TestResamplePeriodIndex)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 1437, in test_evenly_divisible_with_no_extra_bins\n    result = df.resample('7D', how='count')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 82, in resample\n    rs = self._resample_timestamps()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 315, in _resample_timestamps\n    result = grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2814, in aggregate\n    return getattr(self, arg)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3506, in count\n    return self._wrap_agged_blocks(data.items, list(blk))\n  File \"pandas\\lib.pyx\", line 1258, in pandas.lib.count_level_2d (pandas\\lib.c:22712)\n    def count_level_2d(ndarray[uint8_t, ndim=2, cast=True] mask,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_quarterly_resampling (pandas.tseries.tests.test_resample.TestResamplePeriodIndex)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 1344, in test_quarterly_resampling\n    result = ts.resample('A')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 92, in resample\n    rs = self._resample_periods()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 357, in _resample_periods\n    return grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2343, in aggregate\n    return getattr(self, func_or_funcs)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1168, in _python_agg_general\n    result, counts = self.grouper.agg_series(obj, f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1880, in agg_series\n    return grouper.get_result()\n  File \"pandas\\src\\reduce.pyx\", line 274, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35764)\n    raise\n  File \"pandas\\src\\reduce.pyx\", line 249, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35283)\n    cached_ityp = self.ityp(islider.buf)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\period.py\", line 185, in __new__\n    ordinal, freq = cls._from_arraylike(data, freq, tz)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\period.py\", line 251, in _from_arraylike\n    raise ValueError('freq not specified and cannot be '\nValueError: freq not specified and cannot be inferred from first element\n\n======================================================================\nERROR: test_aggregate_normal (pandas.tseries.tests.test_resample.TestTimeGrouper)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 1552, in test_aggregate_normal\n    dt_result = getattr(dt_grouped, func)()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 801, in var\n    return self._cython_agg_general('var')\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2739, in _cython_agg_general\n    new_items, new_blocks = self._cython_agg_blocks(how, numeric_only=numeric_only)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2775, in _cython_agg_blocks\n    result, _ = self.grouper.aggregate(block.values, how, axis=agg_axis)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1584, in aggregate\n    result = self._aggregate(result, counts, values, agg_func, is_numeric)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1629, in _aggregate\n    agg_func(result, counts, values, comp_ids)\n  File \"pandas\\src\\generated.pyx\", line 6988, in pandas.algos.group_var_float64 (pandas\\algos.c:128550)\n    def group_var_float64(ndarray[float64_t, ndim=2] out,\nValueError: Buffer dtype mismatch, expected 'int64_t' but got 'long'\n\n======================================================================\nERROR: test_panel_aggregation (pandas.tseries.tests.test_resample.TestTimeGrouper)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 1512, in test_panel_aggregation\n    binagg = bingrouped.mean()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1166, in _python_agg_general\n    for name, obj in self._iterate_slices():\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 3524, in _iterate_slices\n    raise NotImplementedError(\"axis other than 0 is not supported\")\nNotImplementedError: axis other than 0 is not supported\n\n======================================================================\nFAIL: test_resample_dup_index (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 454, in test_resample_dup_index\n    result = df.resample('Q',axis=1)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\generic.py\", line 3517, in resample\n    return sampler.resample(self).__finalize__(self)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 92, in resample\n    rs = self._resample_periods()\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\resample.py\", line 357, in _resample_periods\n    return grouped.aggregate(self._agg_method)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 2814, in aggregate\n    return getattr(self, arg)(*args, **kwargs)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 764, in mean\n    return self._python_agg_general(f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1168, in _python_agg_general\n    result, counts = self.grouper.agg_series(obj, f)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\core\\groupby.py\", line 1880, in agg_series\n    return grouper.get_result()\n  File \"pandas\\src\\reduce.pyx\", line 238, in pandas.lib.SeriesBinGrouper.get_result (pandas\\lib.c:35159)\n    vslider = Slider(self.arr, self.dummy_arr)\n  File \"pandas\\src\\reduce.pyx\", line 434, in pandas.lib.Slider.__init__ (pandas\\lib.c:40127)\n    assert(values.ndim == 1)\nAssertionError\n\n======================================================================\nFAIL: test_resample_group_info (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 942, in test_resample_group_info\n    assert_series_equal(left, right)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\util\\testing.py\", line 899, in assert_series_equal\n    assert_attr_equal('dtype', left, right)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\util\\testing.py\", line 701, in assert_attr_equal\n    left_attr, right_attr)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\util\\testing.py\", line 791, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Attributes are different\n\nAttribute \"dtype\" are different\n[left]:  int32\n[right]: int64\n\n======================================================================\nFAIL: test_aggregate_with_nat (pandas.tseries.tests.test_resample.TestTimeGrouper)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\tseries\\tests\\test_resample.py\", line 1607, in test_aggregate_with_nat\n    assert_frame_equal(expected, dt_result)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\util\\testing.py\", line 1021, in assert_frame_equal\n    obj='DataFrame.iloc[:, {0}]'.format(i))\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\util\\testing.py\", line 918, in assert_series_equal\n    check_less_precise, obj='{0}'.format(obj))\n  File \"pandas\\src\\testing.pyx\", line 58, in pandas._testing.assert_almost_equal (pandas\\src\\testing.c:3809)\n    cpdef assert_almost_equal(a, b, bint check_less_precise=False,\n  File \"pandas\\src\\testing.pyx\", line 147, in pandas._testing.assert_almost_equal (pandas\\src\\testing.c:2685)\n    raise_assert_detail(obj, msg, lobj, robj)\n  File \"c:\\Users\\Jeff Reback\\pandas\\pandas\\util\\testing.py\", line 791, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: DataFrame.iloc[:, 0] are different\n\nDataFrame.iloc[:, 0] values are different (20.0 %)\n[left]:  [2.49734811743, 1.55654204842, nan, -1.34556660251, -0.346241152977]\n[right]: [2.49734811743, 1.55654204842, 0.0, -1.34556660251, -0.346241152977]\n\n----------------------------------------------------------------------\nRan 94 tests in 5.413s\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139900411",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139900411",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139900411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkwMDQxMQ==",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T18:07:31Z",
    "updated_at": "2015-09-13T18:07:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "you need int64 in [BinGrouper.group_info](https://github.com/pydata/pandas/blob/e8d4243b80657347272174eb2307c3e0d6b22aa2/pandas/core/groupby.py#L1814-L1820)\n\nbut **not** in [GroupBy.nunique](https://github.com/pydata/pandas/blob/e8d4243b80657347272174eb2307c3e0d6b22aa2/pandas/core/groupby.py#L2573-L2574)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139901005",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139901005",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139901005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkwMTAwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T18:19:04Z",
    "updated_at": "2015-09-13T18:19:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\n======================================================================\nFAIL: test_resample_group_info (pandas.tseries.tests.test_resample.TestResample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\tseries\\tests\\test_resample.py\", line 942, in test_resample_group_info\n    assert_series_equal(left, right)\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\util\\testing.py\", line 899, in assert_series_equal\n    assert_attr_equal('dtype', left, right)\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\util\\testing.py\", line 701, in assert_attr_equal\n    left_attr, right_attr)\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\util\\testing.py\", line 791, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Attributes are different\n\nAttribute \"dtype\" are different\n[left]:  int32\n[right]: int64\n\n----------------------------------------------------------------------\nRan 94 tests in 28.655s\n\nFAILED (failures=1)\n\n[pandas3] C:\\Users\\Jeff Reback\\pandas3>nosetests pandas\\tests\\test_groupby.py\n........................................................................................................................................................................................................\n............................F...........................\n======================================================================\nFAIL: test_series_groupby_nunique (pandas.tests.test_groupby.TestGroupBy)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\tests\\test_groupby.py\", line 1646, in test_series_groupby_nunique\n    check_nunique(frame, ['jim'])\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\tests\\test_groupby.py\", line 1636, in check_nunique\n    assert_series_equal(left, right)\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\util\\testing.py\", line 899, in assert_series_equal\n    assert_attr_equal('dtype', left, right)\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\util\\testing.py\", line 701, in assert_attr_equal\n    left_attr, right_attr)\n  File \"C:\\Users\\Jeff Reback\\pandas3\\pandas\\util\\testing.py\", line 791, in raise_assert_detail\n    raise AssertionError(msg)\nAssertionError: Attributes are different\n\nAttribute \"dtype\" are different\n[left]:  int32\n[right]: int64\n\n----------------------------------------------------------------------\nRan 256 tests in 56.689s\n\nFAILED (failures=1)\n\n[pandas3] C:\\Users\\Jeff Reback\\pandas3>git diff HEAD~1\ndiff --git a/pandas/core/groupby.py b/pandas/core/groupby.py\nindex f34fd6e..bea27cb 100644\n--- a/pandas/core/groupby.py\n+++ b/pandas/core/groupby.py\n@@ -2570,8 +2570,8 @@ class SeriesGroupBy(GroupBy):\n\n         # group boundries are where group ids change\n         # unique observations are where sorted values change\n-        idx = com._ensure_int64(np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]])\n-        inc = com._ensure_int64(np.r_[1, val[1:] != val[:-1]])\n+        idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n+        inc = np.r_[1, val[1:] != val[:-1]]\n\n         # 1st item of each group is a new unique observation\n         mask = isnull(val)\n\n[pandas3] C:\\Users\\Jeff Reback\\pandas3>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139909009",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139909009",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139909009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkwOTAwOQ==",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T19:12:18Z",
    "updated_at": "2015-09-13T19:12:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "_the type which comes out of numpy calls is correct_. nunique values should have the same types as array of indices, [which is always `NPY_INTP` in numpy](https://docs.scipy.org/doc/numpy/reference/c-api.dtype.html#c.NPY_INTP).\n\nthese tests are not failing in cython calls or in the actual values. they are failing only because the constructed _expected_ right frame/series is set to have int64 type. you may fix the _expected_ right value in the tests to have `np.intp`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139910565",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139910565",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139910565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkxMDU2NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T19:23:30Z",
    "updated_at": "2015-09-13T19:23:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "from `test_resample_group_info`\n\ncompletely disagree. You HAVE to return `int64` for indexers. we don't use platform indexer anywhere. So they must be converted. This is true in all other code, why would would you argue against it here? (esp since this is such a general routine).\n\nits irrelevant what numpy returns. Pandas should always return the same dtype as input except if an upcast is needed. If I pass in `int64` then I expect `int64` out *_regardless_ of the platform. \n\n```\n(Pdb) p ts.dtype\ndtype('int64')\n(Pdb) p ts.resample('30T',how='nunique').dtype\ndtype('int32')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139911702",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139911702",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139911702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkxMTcwMg==",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T19:38:24Z",
    "updated_at": "2015-09-13T19:38:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> its irrelevant what numpy returns\n\nthat is why there are so many ugly `com._ensure_this`, `com._ensure_that` code bloat throughout pandas. numpy is the backend, how can that be irrelevant? and hasn't been enough pain manually chasing type mismatches here and there?\n\n> should always return the same dtype as input \n\n`nunique` is always int type. the input can be anything, it can be string, it can be object. regardless of what the input is nunique returns ints. how can u argue about type of nunique output based on `ts.dtype`? what if `ts.dtype` was object or float?\n\n> You HAVE to return int64 for indexers.\n\nare you sure? cause multi-index labels are more indexer than nuinque:\n\n``` python\n>>> MultiIndex.from_arrays([[1, 2], [3, 4]]).labels[0]\nFrozenNDArray([0, 1], dtype='int8')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139911938",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139911938",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139911938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkxMTkzOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T19:42:43Z",
    "updated_at": "2015-09-13T19:42:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> that is why there are so many ugly com._ensure_this, com._ensure_that code bloat throughout pandas. numpy is the backend, how can that be irrelevant? and hasn't been enough pain manually chasing type mismatches here and there?\n\nI agree, but that is a completely separate issue to do that. You cannot simply change it. It STILL has to work on windows\n\n> nunique is always int type. the input can be anything, it can be string, it can be object. regardless of what the input is nunique returns ints. how can u argue about type of nunique output based on ts.dtype? what if ts.dtype was object or float?\n\nWe ALWAYS return `int64` for counting types. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139912046",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139912046",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139912046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkxMjA0Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T19:45:07Z",
    "updated_at": "2015-09-13T19:45:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\n(Pdb) df = DataFrame({'A' : [1,2]})\n(Pdb) df.count()\nA    2\ndtype: int64\n(Pdb) df.A.value_counts()\n2    1\n1    1\nName: A, dtype: int64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139912139",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139912139",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139912139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkxMjEzOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T19:47:04Z",
    "updated_at": "2015-09-13T19:47:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "certainly welcome work on this: https://github.com/pydata/pandas/issues/3033\n\nbut as I said, that is a bit non-trivial and out-of-scope for a fix here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139912910",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139912910",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139912910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkxMjkxMA==",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T19:53:44Z",
    "updated_at": "2015-09-13T19:53:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We ALWAYS return int64 for counting types. \n\nwell you are doing it wrong. if one place it needs to be forced `int64` is in the multi-index/factorize labels, because there it is _really_ needed to avoid overflow in groupby & join methods and cython calls. [but, there you are forcing smaller integer types](https://github.com/pydata/pandas/blob/fea7f6c89eb8fe33e3d90aa1c8df02c20b6bcaae/pandas/core/common.py#L933-L937) for **indexers** in a method called [`_coerce_**indexer**_dtype`](https://github.com/pydata/pandas/blob/fea7f6c89eb8fe33e3d90aa1c8df02c20b6bcaae/pandas/core/common.py#L930).\n\nfor unique/count i do not see why it has to deviate from numpy. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/139913205",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10988#issuecomment-139913205",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10988",
    "id": 139913205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzOTkxMzIwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-13T20:00:25Z",
    "updated_at": "2015-09-13T20:00:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "the point is that it is a long-time consistency to return data to the users in `int64` (and `float64`) when dtype is unspecified. and `count` and `value_counts` already do this.\n\nWe certainly _could_ change this. But again that is out of scope for this issue, and further that would have to be an announced API change. You are changing the user facing API in a potentially unexpected way. It might be ok, it might not. But I think it would be wise to actually push this into master and have people tests it for a while.\n\nAs far as what is used internally, #3033 covers this. I am certainly open to cleaning this up. I think everyone can agree its fairly ugly and when it was done there were other considerations.\n"
  }
]
