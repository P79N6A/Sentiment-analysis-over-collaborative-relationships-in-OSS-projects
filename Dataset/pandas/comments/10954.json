[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136443017",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136443017",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136443017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ0MzAxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T17:52:15Z",
    "updated_at": "2015-08-31T17:52:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nickeubank you realize that it is simple enough to just change the default to raise on the error\n\n```\nIn [7]: pd.set_option('chained_assignment','raise')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136444120",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136444120",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136444120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ0NDEyMA==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T17:55:21Z",
    "updated_at": "2015-08-31T17:55:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Yes, and I've done that in my own code. But I think the issue of inconsistency of behavior remains, and not all users (especially newbies and non-programmers) will be aware of that / know they should be aware of that. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136446453",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136446453",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136446453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ0NjQ1Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T18:00:05Z",
    "updated_at": "2015-08-31T18:07:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nickeubank I think you are missing a lot of the point here.\n- This has ALWAYS been the case, IOW, setting on a view. Until we had `SettingWithCopy` an assignment would silently just fail. We got so many question of why does this not work when one does chain indexing.\n- It is simply not possible from a language perspective to detect chain indexing directly; it has to be inferred\n- not using views is NOT an option, you defeat the purpose of using numpy in its entirety. \n- we are not going to add another indexer, there are already too many, this will just cause even more issues\n- These are really a small set of edge cases\n\nsimplest and best answer is just to change the default to raise. The warning is pretty good and has very very few (if any) false positives (the thought was that we don't want to show exceptions when it might not be a problem, and that is why it is was a warning to begin with).\n\n Writing better docs helps a little, but most people simply don't read them.\n\nThe reason you need views is to avoid copying everything each time. One of the main purposes of numpy is to essentially share memory when you can, to avoid the copies.\n\n```\ndf = Dataframe(.....)\nslice_of_df = df.loc[0:100000]\n```\n\nso you want to copy this every time I want to use it? If its small it doesn't matter. But if this is a non-trivial size you will eat up memory amazingly fast. and the point of pandas will be gone. You might as well just read in your data anew each time from a csv file for each operation.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136448121",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136448121",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136448121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ0ODEyMQ==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T18:03:17Z",
    "updated_at": "2015-08-31T18:26:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I've floated that as Solution 3, and I think that's better than nothing, but I think my concern is that it's going to result in lots of people submitting requests for explanations for why code _sometimes_ fails.\n\nRe: performance: my preferred solution is Solution 1, which I don't think eliminates views, it just moves them away from the user. `pandas` could still return views whenever possible, but convert views to copies when those types would lead to different outcomes. Basically, this approach would be analogous to how `R` handles passing objects in functions via `pass by promise`, in which objects are passed to functions as references unless they are modified, then on-the-fly makes a new copy. From the user perspective, one can think of the program always doing `pass by value`, but the performance hit only occurs when necessary.  \n\nBut that's my view, and why I want to solicit input from others!\n\n[Edit: Modified to response to some of jreback's additional comments 11:26 pst]\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136448524",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136448524",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136448524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ0ODUyNA==",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T18:05:02Z",
    "updated_at": "2015-08-31T18:07:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1 on setting the default to raise... better clean errors (and easy solutions) than silently wrong analysis results...\n\nAlso, I think the docs should encourage the usage of `.copy()` when asisgning a slice (e.g. `df2 = df1.ix[<what, ever>].copy()`). In all but some Big Data™ situations, the copy will not matter performance wise and if I remember some twitter comments right, it even makes the following code faster due to the missing checks.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136451814",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136451814",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136451814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ1MTgxNA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T18:19:48Z",
    "updated_at": "2015-08-31T18:19:48Z",
    "author_association": "MEMBER",
    "body": "Thanks for writing this up! I agree with most of the concerns.\n\nI wonder if solution 1 (copy on write for views) is technologically feasible. That seems like the best of the alternatives to me, and it's also what R and MATLAB do. It's not always desirable, but using a tool like NumPy directly is already necessary for high performance code.\n\nI'm also not a fan of a new indexer, and I think making making SettingWithCopy warning an error would be a mistake, because chained indexing (with indexing appearing on different liens) can sometimes be the clearest way to write code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136465299",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136465299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136465299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ2NTI5OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T18:54:26Z",
    "updated_at": "2015-08-31T18:54:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer well, pandas already DOES copy-on-write. That's exactly what `.loc` does when it sees a view. That is not the problem at all. The issue is this.\n\n`df[...][...] = value` is 2 different python actions that are completely independent.\n\nThe setting has no idea that it is in fact part of a chain. So it if you make a copy at this point, you are setting on the copy, if you don't you STILL maybe setting a copy from the previous operation. This is the entire problem. IF pandas had lazy evaluation then this would be a no-brainer, but it is eager and not possible to resolve this. copy-on-write will not fix the issue at all. \n\nAlways returning a copy _would_ fix this, but is way too expensive to be a soln. The soln is either or both of:\n\n1) education. More documentation. expand the warning messages / docs\n2) raise on a chained setting operation. I don't think their are any documented false positives, so I don't see a downside here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136472137",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136472137",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136472137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ3MjEzNw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T19:14:20Z",
    "updated_at": "2015-08-31T19:14:20Z",
    "author_association": "MEMBER",
    "body": "@jreback I think we have some misunderstanding about what \"copy-on-write\" means? I am referring to the array being indexed (e.g., `df`), not the new value (e.g., `value`). I don't think `.loc` currently does that.\n\nIf we had copy-on-write, `df[...][...] = value` would _always_ fail, thus removing the need for SettingWithCopyWarning entirely (in a different way). As it is, this sometimes succeeds, if the first indexing operation returns a view.\n\nI do understand the issues with Python syntax and lazy evaluation. I don't think we need to always make copies with indexing -- that would indeed be way too expensive in general. But instead of how we currently mark objects so we can later issue the SettingWithCopy warning, we could simply make a copy of the object being indexed at that point and then proceed with the indexing operation. The only difference is that we would only need to mark objects created with a view rather than all indexing results.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136473638",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136473638",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136473638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjQ3MzYzOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T19:20:08Z",
    "updated_at": "2015-08-31T19:20:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> But instead of how we currently mark objects so we can later issue the SettingWithCopy warning, we could simply make a copy of the object being indexed at that point and then proceed with the indexing operation.\n\nHow do you actually know when to do this? This is the problem. You don't know the future operation.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136509478",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136509478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136509478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjUwOTQ3OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T21:41:56Z",
    "updated_at": "2015-08-31T21:41:56Z",
    "author_association": "MEMBER",
    "body": "> How do you actually know when to do this? This is the problem. You don't know the future operation.\n\nPerhaps I'm missing something? I'm pretty sure the only future operations where we would need to make copies are:\n- inside `__setitem__`\n- when `inplace=True` (if the method doesn't already copy all the data first)\n\nThere's also the issue of setting with `.values` (e.g., `df.values[...] = ...`), but that already only works inconsistently and we can't even issue warnings because it's done on the NumPy side.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136519258",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136519258",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136519258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjUxOTI1OA==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T22:37:49Z",
    "updated_at": "2015-08-31T22:37:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think we might be talking past each other a little bit here – I think I can clarify matters in a couple hours when I finish a set of meetings... Sorry for the delay. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136521398",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136521398",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136521398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjUyMTM5OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T22:52:58Z",
    "updated_at": "2015-08-31T22:52:58Z",
    "author_association": "MEMBER",
    "body": "@jreback and I were discussing this on [gitter](https://gitter.im/pydata/pandas).\n\nOne interesting case is supporting chained indexing via a series. This currently works (via views) and doesn't even raise a SettingWithCopy warning:\n\n```\nIn [1]: import pandas as pd\n\nIn [2]: df = pd.DataFrame({'x': [0, 1], 'y': [2, 3]})\n\nIn [3]: series = df['x']\n\nIn [4]: series[0] = -10\n\nIn [5]: df\nOut[5]:\n    x  y\n0 -10  2\n1   1  3\n```\n\nThis is convenient, and it's actually possible to guarantee that it works 100% of the time with views. I expect it's also widely relied upon.\n\nSo a possible rule is:\n- Indexing out a single column of dataframe to produce series always returns a view\n- Indexing a dataframe to produce a dataframe always returns a copy (which may be a copy-on-write if it's faster to use views internally)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136524483",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136524483",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136524483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjUyNDQ4Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T23:10:33Z",
    "updated_at": "2015-08-31T23:10:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "however cannot guarantee that a single column is actually a view if it's say object dtype. it may be possible but I am not sure. IF I would allow mom consolidation (eg columns map directly to an individual block); then I think this is possible.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136532839",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136532839",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136532839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjUzMjgzOQ==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T00:10:43Z",
    "updated_at": "2015-09-01T00:14:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for wrestling with this @jreback and @shoyer . \n\nJust to be clear on what what's going on (and to make sure I follow correctly), do the following code snippets correctly correctly characterize what we're discussing?  \n\nCode:\n\n```\ndf = pd.DataFrame({'col1':[1,2], 'col2':[3,4]})\nintermediate = df.loc[1:1,]   # slice 1\nintermediate['col1'] = -99  # slice 2\n```\n\n### Current Behavior\n\n```\n# The following always happens\nIn[]: intermediate\nOut[]:\n       col1  col2\n    1   -99     4\n\n# This happens If slice 1 generated a view:\nIn[]: df\nOut[]:\n          col1  col2\n         0     1     3\n         1   -99     4\n\n# This happens If slice 1 generated a copy:\nIn[]: df\nOut[]:\n          col1  col2\n         0     1     3\n         1    2     4\n```\n\n### New (suggested) behavior\n\nMy solution 1, and what I think @shoyer has been suggesting with all slices behaving \"as-if\" they are copies: \n\n```\nIn[]: intermediate\nOut[]:\n       col1  col2\n    1   -99     4\n\nIn[]: df\nOut[]:\n          col1  col2\n         0     1     3\n         1     2     4\n```\n\nHowever, noting that in the \"new\" behavior, slice 1 may have generated a view behind the scenes.\n\n### Chained-Slicing on a Single Line\n\nUnder this new regime, of course, we would still see a failure (but now **always** see a failure) from:\n\n```\nIn[]:\n   df = pd.DataFrame({'col1':[1,2], 'col2':[3,4]})\n   df.loc[1:1,]['col1'] = -99\n   df\n\nOut[]:\n          col1  col2\n         0     1     3\n         1     2     4\n```\n\nSince this would result in the creation of a new `DataFrame` that isn't actually reference by a user variable. Any chance that this is something that this case could have it's own exception that wouldn't apply in the case of chained assignment across multiple lines of code? \n\nI'm ok if not -- as long as it **always** fails, is any easy idiom to tell users to avoid, and fails due to a simple principle (slicing always returns something that behaves like a copy, which means this fails for the same reason that\n\n```\n    df['col1'].replace(1,-99) # Executed without assignment or ``inplace=True``\n```\n\nfails. \n\n### \"as-if\" Copies\n\nAnd also just to be clear, @jreback , you asked previously if I was suggesting that\n\n```\ndf = Dataframe(.....)\nslice_of_df = df.loc[0:100000]\n```\n\nwould always generate a copy. Hopefully this is a little clear now, but my suggestion would be \"No\", `slice_of_df` would (if possible) be a `view`. The view would only be coerced into a copy **IF** a situation emerged in which views and copies would give rise to different behaviors. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136561328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136561328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136561328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjU2MTMyOA==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T03:07:41Z",
    "updated_at": "2015-09-01T03:07:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "In my experience, my students and I often run into this issue and it is one of the few (very) rough edges in pandas. In most usage cases of pandas it \"just does the right thing\", but with the issue being raised here that is not the case. If I understand the situation, I think the most problematic part is that the behavior depends on state that is hidden from the user. I think that hidden state needs to be removed or shown to the user _before_ they make these API calls.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136788362",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136788362",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136788362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjc4ODM2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T16:44:24Z",
    "updated_at": "2015-09-01T16:44:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nickeubank so I implemented the above here:\n\nhttps://github.com/jreback/pandas/commit/8b684b97523f71d6d0d4da40d8b4edc3e4d820d4\n\n```\nIn [1]: df = DataFrame({'col1':[1,2], 'col2':[3,4]})\n\nIn [2]: intermediate = df.loc[1:1,]\n\nIn [3]: intermediate['col1'] = -99\n\nIn [4]: intermediate\nOut[4]: \n   col1  col2\n1   -99     4\n\nIn [5]: df\nOut[5]: \n   col1  col2\n0     1     3\n1     2     4\n\nIn [6]: df.loc[1:1,]['col1'] = -99\nValueError: chained indexing detected, you can fix this ......\n```\n\nBasically the setting on copy machinery already tracked this, so just a matter of actually doing something.\nThis is prob fragile (I know it won't work on py3, but that's a small change). But implements this.\n\nChained indexing should I could actually make work, but might be some more hoops / complexity, so an exception might just be better (as I am doing now).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136798283",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136798283",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136798283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjc5ODI4Mw==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T17:06:55Z",
    "updated_at": "2015-09-01T17:06:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Thanks so much! I really think this is a great improvement! \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136798302",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136798302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136798302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjc5ODMwMg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T17:06:57Z",
    "updated_at": "2015-09-01T17:06:57Z",
    "author_association": "MEMBER",
    "body": "@jreback Using garbage collection to check for chained indexing is a nice trick! It does seem fragile, though. In particular, I wonder if there are strange cases (e.g., unit tests?) that could run into this inadvertently...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136800423",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136800423",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136800423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjgwMDQyMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T17:15:00Z",
    "updated_at": "2015-09-01T17:15:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "if u have a better trick that can differentiate these cases - all ears\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136810686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136810686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136810686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjgxMDY4Ng==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T17:50:11Z",
    "updated_at": "2015-09-01T17:50:11Z",
    "author_association": "MEMBER",
    "body": "@jreback The alternative would be to not issue a warning or error for chained indexing at all (similar to NumPy), now that it is entirely predictable whether DataFrame indexing returns a copy or a view.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136814366",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136814366",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136814366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjgxNDM2Ng==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T18:06:24Z",
    "updated_at": "2015-09-01T18:06:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm agnostic. A warning might be nice, but the behavior no longer feels pathological or unexpected, so I'm less worried. \n\n@jreback @shoyer You two had a conversation about still using views when someone slices a full column -- I'm open to that (since it will be consistent), but I would prefer we didn't. If even a slice of a column behaves \"as-if\" it were a copy, then users will never be required to think about or even understand views. I think that has the potentially to really improve the accessibility of `pandas` to a lot of non-programmers. Column views is useful, but it's a small enough case I'm not sure it's worth introducing an entire concept to the `pandas` ecosystem that users have to wrestle with. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136816312",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136816312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136816312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjgxNjMxMg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T18:15:29Z",
    "updated_at": "2015-09-01T18:15:29Z",
    "author_association": "MEMBER",
    "body": "@nickeubank The reason why I think we should use views when selecting a single column is that we encourage users to think of DataFrames as \"a dict of Series objects\". Python always uses views for dictionary elements, so it's surprising if modifying one of these series does not change the original dataframe. I agree that copies are more intuitive (especially to R and MATLAB users), but views are an essential part of how Python works as a programming language.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136824904",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136824904",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136824904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjgyNDkwNA==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T18:45:58Z",
    "updated_at": "2015-09-01T18:45:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer I can respect that if that's how we go. Just want to put out that alternative for discussion. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136836593",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136836593",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136836593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjgzNjU5Mw==",
    "user": {
      "login": "CarstVaartjes",
      "id": 2722815,
      "node_id": "MDQ6VXNlcjI3MjI4MTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2722815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CarstVaartjes",
      "html_url": "https://github.com/CarstVaartjes",
      "followers_url": "https://api.github.com/users/CarstVaartjes/followers",
      "following_url": "https://api.github.com/users/CarstVaartjes/following{/other_user}",
      "gists_url": "https://api.github.com/users/CarstVaartjes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CarstVaartjes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CarstVaartjes/subscriptions",
      "organizations_url": "https://api.github.com/users/CarstVaartjes/orgs",
      "repos_url": "https://api.github.com/users/CarstVaartjes/repos",
      "events_url": "https://api.github.com/users/CarstVaartjes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CarstVaartjes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T19:38:18Z",
    "updated_at": "2015-09-01T19:38:18Z",
    "author_association": "NONE",
    "body": "Just to add my two cents: the warning or exception also do not always really hold true. I have plenty of situations where this something like this generates a warning when starting with a hypothetical DataFrame org_df (just an example piece of code):\n\n```\nx_df = org_df[org_df['b'] < 100]\ndel org_df\nmask = x_df['a'] > 10\nx_df['b'] = 0\nx_df.loc[mask, 'b'] = 1\n```\n\nbut it still delivers a correct result even with the warning (we actually implemented tests to continue checking for this). From memory management perspective we also usually like the smaller views... \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136838236",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136838236",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136838236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjgzODIzNg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T19:46:31Z",
    "updated_at": "2015-09-01T19:46:31Z",
    "author_association": "MEMBER",
    "body": "@CarstVaartjes Yes, that's a pretty common situation and one of the big reasons why I dislike SettingWithCopy warning. With the proposal to use copy-on-write, this would now work exactly the same, except without warnings. Note that indexing like `org_df[org_df['b'] < 100]` does actually create a copy (usually?).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136839589",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136839589",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136839589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjgzOTU4OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T19:51:01Z",
    "updated_at": "2015-09-01T19:51:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@CarstVaartjes this was you are expecting?\n\n```\nIn [17]: np.random.seed(1234)\n\nIn [18]: org_df = DataFrame({'a' : np.random.randint(0,1000,size=100), 'b' : np.random.randint(0,1000,size=100) })\n\nIn [19]: org_df\nOut[19]: \n      a    b\n0   815  901\n1   723  750\n2   294  559\n3    53  244\n4   204  374\n5   372  687\n..  ...  ...\n94  805  332\n95  365  965\n96  806  117\n97  135  593\n98  996  208\n99  707  520\n\n[100 rows x 2 columns]\n\nIn [20]: x_df = org_df[org_df['b'] < 100]\n\nIn [21]: del org_df\n\nIn [22]: mask = x_df['a'] > 10\n\nIn [23]: x_df['b'] = 0\n\nIn [24]: x_df.loc[mask, 'b'] = 1\n\nIn [25]: x_df\nOut[25]: \n      a  b\n8   689  1\n10  233  1\n11  154  1\n47  275  1\n55  243  1\n57  828  1\n79  840  1\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/136846291",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-136846291",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 136846291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjg0NjI5MQ==",
    "user": {
      "login": "CarstVaartjes",
      "id": 2722815,
      "node_id": "MDQ6VXNlcjI3MjI4MTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2722815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CarstVaartjes",
      "html_url": "https://github.com/CarstVaartjes",
      "followers_url": "https://api.github.com/users/CarstVaartjes/followers",
      "following_url": "https://api.github.com/users/CarstVaartjes/following{/other_user}",
      "gists_url": "https://api.github.com/users/CarstVaartjes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CarstVaartjes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CarstVaartjes/subscriptions",
      "organizations_url": "https://api.github.com/users/CarstVaartjes/orgs",
      "repos_url": "https://api.github.com/users/CarstVaartjes/repos",
      "events_url": "https://api.github.com/users/CarstVaartjes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CarstVaartjes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T20:11:06Z",
    "updated_at": "2015-09-01T20:11:06Z",
    "author_association": "NONE",
    "body": "@jreback yes exactly! \nfor me that sets of a huge number of warnings, while I'm aiming for manipulating a subset. Which in itself works fine, but the warnings are scary :) \nAnd something like \"x_df = org_df[org_df['b'] < 100].copy()\" looks strange too for me...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137150235",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-137150235",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 137150235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzE1MDIzNQ==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T16:17:21Z",
    "updated_at": "2015-09-02T16:22:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer @jreback If we're agreed on the goal of having slices behave \"as-if\" copies, then I think there's a second situation we need to cover. @jreback commit ensures changes to a slice won't affect the original dataset, but we also need to ensure that changes to the original dataset won't propagate forward to slices. In other words, we need to ensure the following:\n\n```\nIn [1]:\noriginal = pd.DataFrame({'col1':[1,2], 'col2':[3,4]})\nsubset = original.loc[1:1,]\n\noriginal.loc[1,'col1'] = -99\nsubset\n\nOut[1]: \n   col1  col2\n1     2     4\n```\n\nAnd not:\n\n```\nIn [1]:\noriginal = pd.DataFrame({'col1':[1,2], 'col2':[3,4]})\nsubset = original.loc[1:1,]\n\noriginal.loc[1,'col1'] = -99\nsubset\n\nOut[1]: \n   col1  col2\n1   -99     4\n```\n\n(Note that this behavior is actually currently inconsistent for the same reasons `SettingWithACopy` is inconsistent...)\n\nI don't know a lot about internals, but in this example does `original` \"know\" that it has spawned `subset`? If so, we can add something to the setting function to ensure that, before making changes, frames always tell their \"children\" to convert themselves to copies. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137155109",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-137155109",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 137155109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzE1NTEwOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T16:25:45Z",
    "updated_at": "2015-09-02T16:25:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nickeubank your last is not possible, we don't refcount things. Just getting the original copy-on-write to work is quite non-trivial.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/137159127",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10954#issuecomment-137159127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10954",
    "id": 137159127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNzE1OTEyNw==",
    "user": {
      "login": "nickeubank",
      "id": 9683693,
      "node_id": "MDQ6VXNlcjk2ODM2OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9683693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickeubank",
      "html_url": "https://github.com/nickeubank",
      "followers_url": "https://api.github.com/users/nickeubank/followers",
      "following_url": "https://api.github.com/users/nickeubank/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickeubank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickeubank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickeubank/subscriptions",
      "organizations_url": "https://api.github.com/users/nickeubank/orgs",
      "repos_url": "https://api.github.com/users/nickeubank/repos",
      "events_url": "https://api.github.com/users/nickeubank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickeubank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-02T16:31:27Z",
    "updated_at": "2015-09-02T16:31:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback This is really pretty analogous to the `SettingOnCopyCopy` situation in that behavior is unpredictable, except in this case we don't even have a warning. I recognize it may be non-trivial, but this seems similarly important. Sorry I don't know enough about internals to offer concrete ways of addressing this, by maybe someone else can offer some suggstions? @shoyer ?\n"
  }
]
