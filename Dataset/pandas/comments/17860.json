[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336394865",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17860#issuecomment-336394865",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17860",
    "id": 336394865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjM5NDg2NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T09:04:34Z",
    "updated_at": "2017-10-13T09:04:34Z",
    "author_association": "MEMBER",
    "body": "@cailiang9 Can you be a bit more explanation what this issue is about?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336780573",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17860#issuecomment-336780573",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17860",
    "id": 336780573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjc4MDU3Mw==",
    "user": {
      "login": "cailiang9",
      "id": 3636844,
      "node_id": "MDQ6VXNlcjM2MzY4NDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3636844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cailiang9",
      "html_url": "https://github.com/cailiang9",
      "followers_url": "https://api.github.com/users/cailiang9/followers",
      "following_url": "https://api.github.com/users/cailiang9/following{/other_user}",
      "gists_url": "https://api.github.com/users/cailiang9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cailiang9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cailiang9/subscriptions",
      "organizations_url": "https://api.github.com/users/cailiang9/orgs",
      "repos_url": "https://api.github.com/users/cailiang9/repos",
      "events_url": "https://api.github.com/users/cailiang9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cailiang9/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T04:58:01Z",
    "updated_at": "2017-10-16T04:58:01Z",
    "author_association": "NONE",
    "body": "the pd.to_datetime(infer=True) does not work smartly. e.g.: it can not automatically infer the unit, so we have to try with unit='s' for 1442315569.315 or unit='ms' for 1442315569315 . \r\nIn the function infer_as_datetime I wrote, it does not need to specify any thing like unit. In most cases, returned dt.year=1970 means the unit is incorrect. infer_as_datetime uses this cue. Because we have a semantic infer=True here, we can guess unit for convenience here. Suprizingly, infer_as_datetime also supports many kinds of format such as 'YYYY-MM-dd hh:mm:ss'.\r\nI hope that pd.to_datetime(infer=True) can support function like in infer_as_datetime. So that, when a array of datetime string or unix timestamp comes, we can simply use pd.to_datetime(infer=True) to transform into datetime without specifying anything.\r\nOn the other hand, if a user feel this way is unsafe, they just need to remove infer and specify more concrete parameters."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336796314",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17860#issuecomment-336796314",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17860",
    "id": 336796314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjc5NjMxNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T06:55:30Z",
    "updated_at": "2017-10-16T06:55:30Z",
    "author_association": "MEMBER",
    "body": "I suppose you refer to the `infer_datetime_format` keyword? (there is no `infer` keyword) This keyword is meant to infer the format of strings:\r\n\r\n> infer_datetime_format : boolean, default False\r\n    If True and no `format` is given, attempt to infer the format of the\r\n    datetime strings, and if it can be inferred, switch to a faster\r\n    method of parsing them. In some cases this can increase the parsing\r\n    speed by ~5-10x.\r\n\r\nAnd it deliberately does not handle inferring the unit for numeric values. \r\nDoing that is much less 'clear', as a numeric value can be valid for different units (which is most of the time not the case for string formats):\r\n\r\n```\r\nIn [20]: pd.to_datetime(1442315569.315)\r\nOut[20]: Timestamp('1970-01-01 00:00:01.442315569')\r\n\r\nIn [21]: pd.to_datetime(1442315569.315, unit='ms')\r\nOut[21]: Timestamp('1970-01-17 16:38:35.569315')\r\n\r\nIn [22]: pd.to_datetime(1442315569.315, unit='s')\r\nOut[22]: Timestamp('2015-09-15 11:12:49.315000')\r\n```\r\n\r\nThe above results are all valid. \r\nI agree that that it is likely that the one that has not year 1970 is in many cases the probable one (as you noted), but I am not sure we can use that logic in the `to_datetime` function. Personally I think it is better to ask to explicitly specify the `unit`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336845108",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17860#issuecomment-336845108",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17860",
    "id": 336845108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjg0NTEwOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T10:23:04Z",
    "updated_at": "2017-10-16T10:23:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can in general only do this w/o fail when the input overflows, so you can start with a lower precision unit (s) and proceed to a higher one (ns); we do something like this in read_json. But as a general rule would be -1."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/337566740",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17860#issuecomment-337566740",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17860",
    "id": 337566740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzU2Njc0MA==",
    "user": {
      "login": "cailiang9",
      "id": 3636844,
      "node_id": "MDQ6VXNlcjM2MzY4NDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3636844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cailiang9",
      "html_url": "https://github.com/cailiang9",
      "followers_url": "https://api.github.com/users/cailiang9/followers",
      "following_url": "https://api.github.com/users/cailiang9/following{/other_user}",
      "gists_url": "https://api.github.com/users/cailiang9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cailiang9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cailiang9/subscriptions",
      "organizations_url": "https://api.github.com/users/cailiang9/orgs",
      "repos_url": "https://api.github.com/users/cailiang9/repos",
      "events_url": "https://api.github.com/users/cailiang9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cailiang9/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-18T11:56:06Z",
    "updated_at": "2017-10-18T11:56:06Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche infer_datetime_format keyword is just an addition. Or we can print out the selected unit and a warning to tell a user to specify unit explicitly in the function . \r\nUsers can always explicitly specify the unit if they want.\r\nIn practical use when seeing numeric values, people also have no idea which unit to use and have to try one by one. So infer_datetime_format keyword would be very helpful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419726729",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17860#issuecomment-419726729",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17860",
    "id": 419726729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcyNjcyOQ==",
    "user": {
      "login": "louistang5",
      "id": 7172849,
      "node_id": "MDQ6VXNlcjcxNzI4NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7172849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/louistang5",
      "html_url": "https://github.com/louistang5",
      "followers_url": "https://api.github.com/users/louistang5/followers",
      "following_url": "https://api.github.com/users/louistang5/following{/other_user}",
      "gists_url": "https://api.github.com/users/louistang5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/louistang5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/louistang5/subscriptions",
      "organizations_url": "https://api.github.com/users/louistang5/orgs",
      "repos_url": "https://api.github.com/users/louistang5/repos",
      "events_url": "https://api.github.com/users/louistang5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/louistang5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-09T16:16:29Z",
    "updated_at": "2018-09-09T16:19:01Z",
    "author_association": "NONE",
    "body": "I know this is an old ticket, but since it's still open, I would like to add something here.\r\n\r\nI recently ran into a problem that the dataframe contains a column of epoch timestamp strings. While most of them are 13-digits integers (1536507914000, unit in ms), but there are a few cases that are 16-digits integers (1536507914123000, unit in us). In other words, with me explicitly passing unit as `ms`, the rows that have 16-digits epoch timestamps will have a `NaT` timestamp, which is not what I wanted later on.\r\n```\r\n>>> df = pd.DataFrame({\r\n...     'ts': [1536507914000, 1536507915000, 1536507916000, 1536507917123000, 1536507918000],\r\n...     'val': [1.2, 2.01, 2.0, 3.9, 1.9]})\r\n>>> df\r\n                 ts   val\r\n0     1536507914000  1.20\r\n1     1536507915000  2.01\r\n2     1536507916000  2.00\r\n3  1536507917123000  3.90\r\n4     1536507918000  1.90\r\n>>> pd.to_datetime(df['ts'], infer_datetime_format=True, errors='coerce')\r\n0   1970-01-01 00:25:36.507914\r\n1   1970-01-01 00:25:36.507915\r\n2   1970-01-01 00:25:36.507916\r\n3   1970-01-18 18:48:27.917123\r\n4   1970-01-01 00:25:36.507918\r\nName: ts, dtype: datetime64[ns]\r\n>>> pd.to_datetime(df['ts'], unit='ms', errors='coerce')\r\n0   2018-09-09 15:45:14\r\n1   2018-09-09 15:45:15\r\n2   2018-09-09 15:45:16\r\n3                   NaT\r\n4   2018-09-09 15:45:18\r\nName: ts, dtype: datetime64[ns]\r\n>>> pd.to_datetime(df['ts'], unit='us', errors='coerce')\r\n0   1970-01-18 18:48:27.914\r\n1   1970-01-18 18:48:27.915\r\n2   1970-01-18 18:48:27.916\r\n3   2018-09-09 15:45:17.123\r\n4   1970-01-18 18:48:27.918\r\nName: ts, dtype: datetime64[ns]\r\n```\r\n\r\nThe data I'm working with has many millions of records, so it's hard for me to spot a few hundred records with 16 digits epoch timestamps, until today I accidentally found the bug.\r\n\r\nSo I agree with @cailiang9 that auto inferring unit of timestamps would be very helpful, especially for epoch timestamps. @jorisvandenbossche Could we add some sort of length check when parsing epoch timestamps, so that the `pd._todatetime` will automatically infer the unit based on length?\r\n"
  }
]
