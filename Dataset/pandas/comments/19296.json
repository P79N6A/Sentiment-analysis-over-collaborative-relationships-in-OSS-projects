[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358629799",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19296#issuecomment-358629799",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19296",
    "id": 358629799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODYyOTc5OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T12:17:25Z",
    "updated_at": "2018-01-18T12:17:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @jbrockmendel this may interest you."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358879395",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19296#issuecomment-358879395",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19296",
    "id": 358879395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODg3OTM5NQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T06:34:14Z",
    "updated_at": "2018-01-19T06:34:14Z",
    "author_association": "MEMBER",
    "body": "Looks like the casting is done in `generic._make_cum_function` line `y = _values_from_object(self).copy()`\r\n\r\nI'd be down for working towards making these apply block-wise, avoid some casting (and likely copying)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358977571",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19296#issuecomment-358977571",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19296",
    "id": 358977571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODk3NzU3MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T14:16:44Z",
    "updated_at": "2018-01-19T14:16:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cool, thanks.\r\n\r\nThis of course came up in the context of the extension array / block stuff. We need some kind of way of knowing\r\n\r\n1. if an external array type supports a given operation\r\n2. If an external array type has an implementation of a given operation, or if they want to fall back to being cast to `object` ndarray and using NumPy's."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359102407",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19296#issuecomment-359102407",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19296",
    "id": 359102407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTEwMjQwNw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T22:05:16Z",
    "updated_at": "2018-01-19T22:05:16Z",
    "author_association": "MEMBER",
    "body": "> We need some kind of way of knowing [...]\r\n\r\nSo I should check an implicit assumption I've been making: does your game-plan involve the Block subclasses inheriting from analogous Array subclasses?  The problem posed would be simpler if the method lookup can be done at the Block level, with the implementation at the Array level.\r\n\r\nI've been leaving the DataFrame case for last so I wouldn't have to figure out the dispatching logic.  Between `core.ops`, `BlockManager.eval`, and `BlockManager.apply` there's a lot of redirection that's tough to track down.  So I'm thinking some step of the approach here should involve untangling the dispatch logic."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359102930",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19296#issuecomment-359102930",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19296",
    "id": 359102930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTEwMjkzMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T22:07:54Z",
    "updated_at": "2018-01-19T22:07:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "these should be dispatched like all other operations using BlockManager.apply. e.g. look up ``.replace/.fillna`` for many many other operations in generic. this pattern is already well established."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359103054",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19296#issuecomment-359103054",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19296",
    "id": 359103054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTEwMzA1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T22:08:28Z",
    "updated_at": "2018-01-19T22:08:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "don't label things for 0.23 until they are actually merged."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/360353963",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19296#issuecomment-360353963",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19296",
    "id": 360353963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDM1Mzk2Mw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T03:57:23Z",
    "updated_at": "2018-01-25T03:57:23Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger side-note question w.r.t Categoricals: Series arithmetic methods are defined in [core.ops](https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops.py#L319):\r\n\r\n\r\n```\r\n    def na_op(x, y):\r\n        import pandas.core.computation.expressions as expressions\r\n        try:\r\n            result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\r\n        except TypeError:\r\n            if isinstance(y, (np.ndarray, ABCSeries, pd.Index)):\r\n                dtype = find_common_type([x.dtype, y.dtype])\r\n                result = np.empty(x.size, dtype=dtype)\r\n                mask = notna(x) & notna(y)\r\n                result[mask] = op(x[mask], com._values_from_object(y[mask]))\r\n            elif isinstance(x, np.ndarray):\r\n                result = np.empty(len(x), dtype=x.dtype)\r\n                mask = notna(x)\r\n                result[mask] = op(x[mask], y)\r\n            else:\r\n                raise TypeError(\"{typ} cannot perform the operation \"\r\n                                \"{op}\".format(typ=type(x).__name__,\r\n                                              op=str_rep))\r\n```\r\n\r\nThe `x` here correponds to `self.values`.  My hunch is that the expressions.evaluate is going to raise whenever x is a Categorical.  Do you know if this is correct?"
  }
]
