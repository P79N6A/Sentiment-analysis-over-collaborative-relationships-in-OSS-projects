[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255179526",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255179526",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255179526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTE3OTUyNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T17:54:40Z",
    "updated_at": "2016-10-20T17:54:40Z",
    "author_association": "MEMBER",
    "body": "Yes, I have noticed that in our benchmarks as well, but forgot to open an issue. Thanks for reporting! \nIf you want to have a look what could be the cause, very welcome!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255181258",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255181258",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255181258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTE4MTI1OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T18:01:04Z",
    "updated_at": "2016-10-20T18:01:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "well < 0.19.0 was pretty much broken for non-monotonic indexes and when nulls existed. so you get correct or you can have a tiny differential in perf.\n\nNot sure how this actually matters anyhow except if you are calling this in a loop, which is completely non-idiomatic.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255335318",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255335318",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255335318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTMzNTMxOA==",
    "user": {
      "login": "laudney",
      "id": 106273,
      "node_id": "MDQ6VXNlcjEwNjI3Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/106273?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laudney",
      "html_url": "https://github.com/laudney",
      "followers_url": "https://api.github.com/users/laudney/followers",
      "following_url": "https://api.github.com/users/laudney/following{/other_user}",
      "gists_url": "https://api.github.com/users/laudney/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laudney/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laudney/subscriptions",
      "organizations_url": "https://api.github.com/users/laudney/orgs",
      "repos_url": "https://api.github.com/users/laudney/repos",
      "events_url": "https://api.github.com/users/laudney/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laudney/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T09:24:30Z",
    "updated_at": "2016-10-21T09:24:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Not sure how this actually matters anyhow except if you are calling this in a loop, which is completely non-idiomatic.\n\npd.Series.asof is extremely flexible. If I pass in a value before the start of the index, it returns NA. If I pass in a value after the end of the index, it returns the very last non-NA value.\n\nNow in one of my cases I have several thousand time series and for a given date, I want to get the asof value for each one and I currently do this in a loop. The date can be anything like a weekend or a holiday.\n\nI've thought about creating a giant DataFrame, reindex it to include every single calendar date, then fillna(method='ffill) but I still need to deal with the dates before the start or after the end of the index with if statements.\n\nAnd if those time series cover different date/time ranges, the resulting DataFrame is extremely sparse.\n\nMaybe there is a better and more idiomatic way for this particular case?\n\nIn other cases, asof has to be called on individual Series without the possibility of concatenating them into a giant DataFrame. The speed of the call is therefore very imporant.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255351256",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255351256",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255351256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTM1MTI1Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T10:47:48Z",
    "updated_at": "2016-10-21T10:47:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "So this is a general method which can handle both Series and DataFrames. an implementation that handles both directly in cython could certainly be done. I would encourage a pull-request to do this.\n\nFor example the nulls are pre-computed here, which makes the code much simpler, but is not necessary when iterating (which you can only do in a performant way in cython, comparing nulls as you go).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255351272",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255351272",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255351272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTM1MTI3Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T10:47:53Z",
    "updated_at": "2016-10-21T10:47:53Z",
    "author_association": "MEMBER",
    "body": "> well < 0.19.0 was pretty much broken for non-monotonic indexes and when nulls existed. so you get correct or you can have a tiny differential in perf.\n\nNon-monotonic indices are not involved I think, as it just raises for that (the error raise is added in 0.19.0, but that is of course not the perf issue). I rather think this is a case where the generalization of the method for both Series and DataFrame has impacted the performance for (certain) Series only cases. \n\nWith a few small adaptions in the current code I can bring it back to 0.18 performance for series (not calculating all nulls in advance + indexing the values instead of Series (in case of Series you return a scalar, so don't need to index the object itself with `iloc`))\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255351541",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255351541",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255351541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTM1MTU0MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T10:49:39Z",
    "updated_at": "2016-10-21T10:49:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche the non-monotonic checks actually are important, they do take _some_ small amount of time. Again when iterating you can do these in-line.\n\n@laudney would welcome a pull-request.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255515188",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255515188",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255515188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTUxNTE4OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-22T08:33:27Z",
    "updated_at": "2016-10-22T08:33:27Z",
    "author_association": "MEMBER",
    "body": "@laudney I think it would be rather simple to fix the performance issue. You have to compare the implemention of Series.asof of 0.18 with the current implementation (the differences are the pre-computations of the nulls and no longer working with the underlying array but with the series itself. Both give a performance degradation). As @jreback said, pull request is very welcome!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255532364",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255532364",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255532364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTUzMjM2NA==",
    "user": {
      "login": "laudney",
      "id": 106273,
      "node_id": "MDQ6VXNlcjEwNjI3Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/106273?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laudney",
      "html_url": "https://github.com/laudney",
      "followers_url": "https://api.github.com/users/laudney/followers",
      "following_url": "https://api.github.com/users/laudney/following{/other_user}",
      "gists_url": "https://api.github.com/users/laudney/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laudney/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laudney/subscriptions",
      "organizations_url": "https://api.github.com/users/laudney/orgs",
      "repos_url": "https://api.github.com/users/laudney/repos",
      "events_url": "https://api.github.com/users/laudney/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laudney/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-22T14:42:07Z",
    "updated_at": "2016-10-22T14:42:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback @jorisvandenbossche Let me take a look but no promise though!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/255537873",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14461#issuecomment-255537873",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14461",
    "id": 255537873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTUzNzg3Mw==",
    "user": {
      "login": "laudney",
      "id": 106273,
      "node_id": "MDQ6VXNlcjEwNjI3Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/106273?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laudney",
      "html_url": "https://github.com/laudney",
      "followers_url": "https://api.github.com/users/laudney/followers",
      "following_url": "https://api.github.com/users/laudney/following{/other_user}",
      "gists_url": "https://api.github.com/users/laudney/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laudney/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laudney/subscriptions",
      "organizations_url": "https://api.github.com/users/laudney/orgs",
      "repos_url": "https://api.github.com/users/laudney/repos",
      "events_url": "https://api.github.com/users/laudney/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laudney/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-22T16:22:10Z",
    "updated_at": "2016-10-22T16:22:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback @jorisvandenbossche please check my pull request #14476 \n"
  }
]
