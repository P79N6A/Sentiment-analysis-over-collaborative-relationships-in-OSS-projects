[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333106501",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1667#issuecomment-333106501",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1667",
    "id": 333106501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzEwNjUwMQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T11:53:15Z",
    "updated_at": "2017-09-29T11:53:15Z",
    "author_association": "MEMBER",
    "body": "Extremely (memory-)inefficient, but I guess it could work as follows:\r\n\r\n``` python\r\nIn [3]: def condgroupby(df, conditions):\r\n   ...:     if isinstance(conditions, (str, list)):\r\n   ...:         conditions = df[conditions]\r\n   ...:     chunks = []\r\n   ...:     for condition in conditions:\r\n   ...:         chunk = df[conditions[condition]]\r\n   ...:         chunk['_cat'] = condition\r\n   ...:         chunks.append(chunk)\r\n   ...:     tempdf = pd.concat(chunks)\r\n   ...:     return tempdf.groupby('_cat')\r\n   ...: \r\n```\r\nTo be used as follows:\r\n``` python\r\nIn [4]: test = pd.DataFrame(np.random.randint(0, 5, (10,10)), columns=pd.MultiIndex.from_product([['data'], list(range(10))]))\r\n\r\nIn [5]: test['cond', 'first'] = test['data', 1] > test['data', 4]\r\n\r\nIn [6]: test['cond', 'second'] = test['data', 3] <= test['data', 8]\r\n\r\nIn [7]: gb = condgroupby(test, 'cond')\r\n/usr/bin/ipython3:7: SettingWithCopyWarning: \r\nA value is trying to be set on a copy of a slice from a DataFrame.\r\nTry using .loc[row_indexer,col_indexer] = value instead\r\n\r\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\r\n  echo \"Please install the python$VERSION package.\" >&2\r\n\r\nIn [8]: gb.mean()\r\nOut[8]: \r\n            data                                                              \\\r\n               0         1         2         3         4         5         6   \r\n_cat                                                                           \r\nfirst   2.500000  2.000000  1.250000  3.500000  1.000000  2.500000  2.500000   \r\nsecond  2.166667  1.333333  1.833333  1.333333  2.666667  1.833333  2.833333   \r\n\r\n                                      cond         \r\n               7     8         9     first second  \r\n_cat                                               \r\nfirst   2.250000  1.25  2.500000  1.000000   0.25  \r\nsecond  2.333333  2.00  1.833333  0.166667   1.00  \r\n```\r\n... or as follows:\r\n\r\n``` python\r\nIn [9]: test = pd.DataFrame(np.random.randint(0, 5, (10,10) ))\r\n\r\nIn [10]: test['first'] = test[1] > test[4]\r\n\r\nIn [11]: test['second'] = test[3] <= test[8]\r\n\r\nIn [12]: gb = condgroupby(test, ['first', 'second'])\r\n/usr/bin/ipython3:7: SettingWithCopyWarning: \r\nA value is trying to be set on a copy of a slice from a DataFrame.\r\nTry using .loc[row_indexer,col_indexer] = value instead\r\n\r\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\r\n  echo \"Please install the python$VERSION package.\" >&2\r\n\r\nIn [13]: gb.mean()\r\nOut[13]: \r\n               0         1         2         3         4    5         6    7  \\\r\n_cat                                                                           \r\nfirst   2.400000  3.400000  1.600000  1.800000  1.000000  2.2  3.000000  1.8   \r\nsecond  2.428571  3.285714  1.714286  1.285714  1.714286  2.0  2.285714  2.0   \r\n\r\n          8         9     first  second  \r\n_cat                                     \r\nfirst   2.6  3.600000  1.000000     0.8  \r\nsecond  2.0  3.285714  0.571429     1.0  \r\n\r\n```\r\n\r\n(The warnings could be suppressed because they don't signal any real danger - ``chunk`` objects are disposable)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/448156663",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1667#issuecomment-448156663",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1667",
    "id": 448156663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODE1NjY2Mw==",
    "user": {
      "login": "kokes",
      "id": 8451755,
      "node_id": "MDQ6VXNlcjg0NTE3NTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8451755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kokes",
      "html_url": "https://github.com/kokes",
      "followers_url": "https://api.github.com/users/kokes/followers",
      "following_url": "https://api.github.com/users/kokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/kokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kokes/subscriptions",
      "organizations_url": "https://api.github.com/users/kokes/orgs",
      "repos_url": "https://api.github.com/users/kokes/repos",
      "events_url": "https://api.github.com/users/kokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T09:35:52Z",
    "updated_at": "2018-12-18T09:35:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "This sounds like you're looking for window functions, these are not supported in pandas. Well, `.transform` comes pretty close, but it's not quite there. The thing with aggregate functions (be it groupby.agg or transform) is that they work on columns, not the whole dataframe (or other columns), but there are workarounds.\r\n\r\nI can think of at least two ways to achieve your goal.\r\n\r\nWe can index the original dataframe from within aggregations\r\n\r\n```\r\ndf = pd.DataFrame({'stock': ['A', 'B'], 'vol': [40, 20], 'return': [-10, 10], 'num': [10, 1000]})                                                               \r\ndf.groupby('stock').agg({'vol': lambda g: df.loc[g.index].pipe(lambda x: x.loc[x.vol>30]).num.sum()}) \r\n```\r\n\r\nOr we can aggregate based on our conditions separately and then join these together, using an outer join.\r\n\r\n```\r\nda = df.loc[df.vol > 30].groupby('stock').num.sum()                                                                                                        \r\ndb = df.loc[df['return'] > 0].groupby('stock').num.sum()                                                                                                   \r\n```\r\n\r\nBe careful, you'll need to reindex with df.stock.unique(), because some stocks may not satisfy either of the conditions and would be dropped from the joined dataframe. This limitation does not apply to the first solution."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/448273300",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1667#issuecomment-448273300",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1667",
    "id": 448273300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODI3MzMwMA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T16:05:36Z",
    "updated_at": "2018-12-18T16:05:36Z",
    "author_association": "MEMBER",
    "body": "Closing as a usage question; typically better served using SO for these types of questions"
  }
]
