[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/356727013",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-356727013",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 356727013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjcyNzAxMw==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-10T20:30:35Z",
    "updated_at": "2018-01-12T20:10:41Z",
    "author_association": "NONE",
    "body": "Hello @TomAugspurger! Thanks for updating the PR.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheers ! There are no PEP8 issues in this Pull Request. :beers: \n\n##### Comment last updated on January 12, 2018 at 20:10 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/356942762",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-356942762",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 356942762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njk0Mjc2Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T14:03:20Z",
    "updated_at": "2018-01-11T14:03:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> move pandas extensions to subclass this one by one\r\n\r\nYeah, I wanted to make sure we were comfortable with that. So we'll have a `PeriodArray` / `PeriodIndex` in the same way we have a `Categorical` / `CategoricalArray`. Likewise with `Interval`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357342040",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357342040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357342040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzM0MjA0MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-12T20:12:02Z",
    "updated_at": "2018-01-12T20:12:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "1. Removed `ExtensionDtype.base` from the interface.\r\n2. Removed `ExtensionArray.to_dense` from the interface.\r\n\r\nRefactored PeriodIndex to be backed by PeriodArray, and IntervalIndex to be backed by IntervalArray.\r\n\r\nStill a WIP."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357342815",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357342815",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357342815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzM0MjgxNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-12T20:15:41Z",
    "updated_at": "2018-01-12T20:15:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, I haven't thought through whether PeriodArray / IntervalArray should be part of the public API in the same way that Categorical is. One the one hand, you'll get them when you do pd.Series(pd.period_range(\"2000\", periods=10)), so they should probably be documented, etc. On the other hand, it's just one more thing to worry about. Is it useful to generate a pandas.PeriodArray(...) on it's own?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357377720",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357377720",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357377720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzM3NzcyMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-12T22:59:12Z",
    "updated_at": "2018-01-12T22:59:12Z",
    "author_association": "MEMBER",
    "body": "Thanks a lot for working on this! This is related to the work I have been doing on allowing custom Block types spiked by geopandas (but this is more general!), so I very much like to see this area improve. I should also test the implementation with geopandas.\r\n\r\nSome general feedback:\r\n\r\nI think the alternative we should consider is to better support custom Block types (although this might be harder in practice, as currently in many places arrays are passed around and not blocks), which I started for concat. From the developer point of view, I think this is very similar, as the additional methods on the ExtensionArray you need to implement, are basically just wrapped in the ExtensionBlock (I mean, writing an ExtensionArray or an ExtensionBlock will probably be more or less the same code). \r\nI agree that from a user point of view (user of such an ExtensionArray), this array-way can be nicer. One of the main bottlenecks I think with the block-way you encountered with the ipaddresses was that you then cannot do `Series(ipaddresses_array)`, as this doesn't work for blocks. Also, the actual block has a lot of additional methods making this less nice as the 'array' object that users are confronted with in the extension package.\r\nHowever, I think this problem can also be solved in a different way (eg agreeing on Series et al checking for `.dtype` that is an ExtensionDtype subclass, or for a `_data` attribute that is a custom block, ...) when going with the \"extension block\" way.\r\n\r\nWhen designing a new pandas, I think we want array objects for all dtypes (and then a dataframe is a collection of such arrays with more methods / indexing capabilities), so in that regard this is a nice move. On the other hand, it is maybe too late in the pandas evolution to go this route for current pandas itself as well? We already have blocks, and also adding those arrays might complicate things further? (the goal of having arrays should partly be to not have blocks)\r\n\r\nThis also relates to the question of to what extent the pandas arrays (PeriodArray, IntervalArray, DatetimeTZArray) should be part of the public interface. In the ideal case, I think the answer would be yes (and eg Series.values (or another more backward-compatible attribute) should return those arrays). But again, it might be too late for pandas and add additional user complexity to change this now.\r\n\r\n> What to do with indexes?\r\n\r\nI think in principle it should be possible to have an Index with the underlying values an ExtensionArray (which is actually a good reason for the array-way, as in such a case we could try to combine things that are now duplicated in eg DatetimeIndex and Series with DatetimeBlock in a single place as the DatetimeArray)\r\n\r\nFinal note: I haven't really thought through in *practice* my comments above on using blocks instead, so it is quite possible that your current approach of an extension array is just much better/easier! (also for current pandas, and not only \"in the ideal case of designing from scratch\")"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357393322",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357393322",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357393322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzM5MzMyMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T00:39:57Z",
    "updated_at": "2018-01-13T00:39:57Z",
    "author_association": "MEMBER",
    "body": "Sorry for my long post above. Trying to more shortly summarize my worries: \r\nI like the idea of Arrays, but I have the feeling that implementing the internal extension types (categorical, datetimetz, etc) based on Arrays, if we do it properly, is *a lot* of work with lots of changes. And thus also many opportunities to introduce new bugs and regressions. So is that worth it for current pandas? \r\nAn option is start smaller and focus for now on only getting ExtensionArray working for actual external ones (which might also be more digestable change to review). On the other hand, the internal extensions are good dogfeeding to see if the extension interface works.\r\n\r\nTo add to my comments above, I think we should at some point also solicit some more feedback (on the mailing list) on the extension array interface.\r\n\r\nWe should also think about the broader implications of the change, eg for downstream users. Eg what happens if statsmodels or scikit-learn encounter dataframes with extension types (not our responsability?)\r\n\r\nThere are also plans to make the numpy dtypes more extensible, which are more concrete now with the funding I think. Not saying that we should wait on that (as it can still take a couple of years), but it might another reason to make our extension arrays not too public (in case we use arrays for our internal extension types)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357401791",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357401791",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357401791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQwMTc5MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T02:06:21Z",
    "updated_at": "2018-01-13T02:06:21Z",
    "author_association": "MEMBER",
    "body": "> I think the alternative we should consider is to better support custom Block types\r\n\r\n@jorisvandenbossche You might want to weight in on the block-registry discussion in #19189.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357465728",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357465728",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357465728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQ2NTcyOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T20:41:25Z",
    "updated_at": "2018-01-13T20:41:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks Joris, some replies below. I'm still pretty convinced that a public `ExtensionArray` is better than a public `ExtensionBlock`. LMK if anything below is / isn't convincing.\r\n\r\n> I think the alternative we should consider is to better support custom Block types\r\n\r\nInitially I had a custom block as part of the interface, but removed it since I\r\ndon't think 3rd-party libraries should have to worry about blocks. I agree that\r\nit'll be about the same work for 3rd parties either way. And I think the\r\ninternal changes will look about the same too? Either way, when a user does\r\n`Series[CustomType].isna()` we'll do either\r\n\r\n1. `ExtensionBlock.isna()`, which calls their `CustomArray.isna()`, or\r\n2. `CustomBlock.isna()`\r\n\r\nMy main motivation for array over block is not having to expose as much of\r\npandas' internals to the 3rd party dtypes. If we have an `ExtensionBlock` as\r\npart of the interface, then we'll have to provide some class for a library\r\nauthor to subclass. Presumably we'll want to share some code between that public\r\n`ExtensionBlock` class and our own block classes, which limits the internal\r\nrefactors we can do without breaking API.\r\n\r\n> We already have blocks, and also adding those arrays might complicate things\r\n> further? (the goal of having arrays should partly be to not have blocks)\r\n\r\nI think this argues for my approach :) If we have 3rd parties writing custom\r\nblocks, then we end up with one new block per extension type. With my current\r\napproach we only have a single new block, `ExtensionBlock` that can hold any\r\ndtyped array.\r\n\r\n> I like the idea of Arrays, but I have the feeling that implementing the\r\n  internal extension types (categorical, datetimetz, etc) based on Arrays, if we\r\n  do it properly, is a lot of work with lots of changes.\r\n\r\nFWIW, we don't *have* to refactor the current code to use extension arrays. We\r\ncan declare that they're specifically for 3rd-parties. But I do think it's a\r\nworthwhile refactor since\r\n\r\n1. It's a nice enhancement: we can stick periods / intervals into a `Series`\r\n   without casting to `object`.\r\n2. It can be a cleanup, since we'll be able to remove some `if is_categorical();\r\n   elif is_interval()` ... blocks with `if is_extension()`\r\n3. I'm mostly done with the refactor :)\r\n\r\nEither way, I'll continue on with this since `Categorical` / `Period` /\r\n`Interval` are good tests for what the interface needs to include.\r\n\r\n> There are also plans to make the numpy dtypes more extensible\r\n\r\nYes, I'll reach out to the NumPy devs when this is a bit more stable.\r\n\r\nReview-wise, it may make sense to split this into multiple PRs:\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357473460",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357473460",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357473460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQ3MzQ2MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T22:47:09Z",
    "updated_at": "2018-01-13T22:47:09Z",
    "author_association": "MEMBER",
    "body": "> My main motivation for array over block is not having to expose as much of\r\npandas' internals to the 3rd party dtypes. If we have an ExtensionBlock as\r\npart of the interface, then we'll have to provide some class for a library\r\nauthor to subclass.\r\n\r\nYes, this is probably a good reason. My idea was first: this doesn't really matter as it is only for the *developers* of third-party libraries and they can handle some complexity (if it was documented how to do, this explanation for CustomArray or CustomBlock would not be that different or much more complex for either case), and because I thought of our Blocks a bit is 'set in stone' for the current version. But I agree (after working a while with it) keeping open the possibility to do some refactorings / clean-up in this area is still potentially valuable (eg the non-consolidating discussion).\r\n\r\n> It's a nice enhancement: we can stick periods / intervals into a Series\r\nwithout casting to object\r\n\r\nYes, that would be nice indeed (although it's not necessarily an argument as similar but different effort could have created blocks for them, but it would be a very nice consequence of the effort). But just to be clear, this is in the current pushed PR not yet the case?\r\n\r\n> Either way, I'll continue on with this since Categorical / Period /\r\nInterval are good tests for what the interface needs to include.\r\n\r\nYep, I know, that's certainly a good reason to do that :-) The question however still is to what extent they would be exposed publicly (but that can be a separate discussion later on)\r\n\r\n> Review-wise, it may make sense to split this into multiple PRs:\r\n\r\nFrom a reviewer standpoint, that would certainly be easier. But I am not sure how easy it would be for you. Any idea how you would want to split it? \r\nJeff proposed a possible stepwise approach above of first doing the extension interface and then only moving our internal ones. But it is maybe also an idea to start with our internal ones: for example just implement and use a PeriodArray (with the interface we expect it to be), that would make more clear what all the consequences internally are (but again, not sure how easy it would be to split this).\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357545185",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357545185",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357545185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzU0NTE4NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-14T21:46:43Z",
    "updated_at": "2018-01-14T21:46:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "So I think a reasonable architecture would be to form a new set of modules.\r\n``pandas.core.extension``, with sub-modules: ``block``, ``array``, ``dtype``, exposing ``Block``, ``Array``, and ``Dtype`` primitives. \r\n\r\nThen using these re-write ``CategoricalBlock`` as a ``Block`` subclass, ``Categorical`` as an ``Array`` sub-class, and ``CategoircalDtype`` as a ``Dtype`` subclass.\r\n\r\nThen do the same for ``DatetimeTZBlock``. Then add ``PeriodBlock`` and ``IntervalBlock`` support. \r\n\r\nThen maybe even do this for ``Sparse``.\r\n\r\nThen of course, you would ideally just create a ``NumpyArray`` (that inherits ``Array``) as well for internal conformity.\r\n\r\nBy this time I think the api will be very very clear of what needs to be in these super-classes in general.\r\n\r\nThese can all be done incrementally w/o disrupting things or causing very long and sweeping code reviews (which are bad generally).\r\n\r\nThis is not actually as much work as I am painting (at least for Categorical and dtz), as its mostly about figuring out what should go in the super classes and what should end up in the sub-class.\r\n\r\npandas has very full featured extension classes, so what better way to design an API than to use an extensive test suite and an already full featured implementation.\r\n\r\nnote that on purpose these extension should be 'separate' from the internals, the internals will simply 'use' these blocks generically and conform to there exposed API rather than peer inside, as we do now. I suspect on our internals can be quite a lot simpler i things are organized along these lines."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357663998",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357663998",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357663998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY2Mzk5OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T12:02:46Z",
    "updated_at": "2018-01-15T12:02:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So I think a reasonable architecture would be to form a new set of modules.\r\npandas.core.extension, with sub-modules: block, array, dtype, exposing Block, Array, and Dtype primitives.\r\n\r\n> Then using these re-write CategoricalBlock as a Block subclass, Categorical as an Array sub-class, and CategoircalDtype as a Dtype subclass.\r\n\r\nThat sounds good. Two questions though:\r\n\r\n1. By \"expose\" do you mean make part of the public API? I'd prefer that `ExtensionBlock` never be part of the public API, if possible.\r\n2. Sharing code between `internals.Block` and `extensions.block.ExtensionBlock`. Specifically, should `ExtensionBlock` subclass `Block`? Common base class? I'll see what things look like."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357667976",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357667976",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357667976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY2Nzk3Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T12:20:57Z",
    "updated_at": "2018-01-15T12:20:57Z",
    "author_association": "MEMBER",
    "body": "IMO the goal of an ExtensionArray should be to not have to expose ExtensionBlock (we will have to see if it is fully possible, but at least it should be the goal I think). \r\nBTW, I think it would make more sense to keep ExtensionBlock inside internals. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357669211",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357669211",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357669211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY2OTIxMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T12:26:53Z",
    "updated_at": "2018-01-15T12:26:53Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  BTW, I think it would make more sense to keep ExtensionBlock inside internals.\r\n\r\nBecause of circular imports, or just for organization? That file is quite long."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357670735",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357670735",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357670735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY3MDczNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T12:34:00Z",
    "updated_at": "2018-01-15T12:34:00Z",
    "author_association": "MEMBER",
    "body": "I meant for file organization, that makes more sense IMO. If the file is too long, we can always make `internals` a directory. But if we are going to move datetimetz and categorical to use arrays, it should get a bit shorter ..\r\n\r\nI would rather re-use the existing `core.dtypes` and `core.internals` and create a new `core.arrays`, than putting all of that under `core.extension.dtypes/array/block`. If we use it internally, it is strange to put it all under `core.extension`. We can still have a `core.extension` (or maybe directly in `api.extension`) that exposes the needed abstract classes for external usage."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357671065",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357671065",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357671065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY3MTA2NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T12:35:34Z",
    "updated_at": "2018-01-15T12:35:34Z",
    "author_association": "MEMBER",
    "body": "> Then of course, you would ideally just create a NumpyArray (that inherits Array) as well for internal conformity.\r\n\r\nThe only problem with this is that those would need to be 2D, and I think it would be nice to limit our array-based types (and extension interface) to 1D."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357683291",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357683291",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357683291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY4MzI5MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T13:30:29Z",
    "updated_at": "2018-01-15T13:30:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "so mod of proposal; create a sub-dir:\r\n\r\n``pandas/core/internals`` with files\r\n``internals.py`` (existing)\r\n``block.py`` (Block)\r\n``array.py`` (Array)\r\n\r\ndtype can be in ``pandas.core.dtypes`` (where it is now)\r\n\r\nI the whole intent is allow very piecemeal and incremental changes that can be merged. IOW the very first think that should happen (after structure) is to make ``Array`` a super-class on any classes we want to move (e.g. Categorical, Index) - Index for support of Datetime w/tz (and Periods/Intervals). This will eventually form the basis for the extension class (which certainly can be exposed in the public api.extensions at some point)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357684465",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357684465",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357684465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY4NDQ2NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T13:35:27Z",
    "updated_at": "2018-01-15T13:35:27Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  Index for support of Datetime w/tz (and Periods/Intervals)\r\n\r\nNot sure if you're suggesting this, but I don't think e.g. `PeriodIndex` should be an instance of `ExtensionArray` (indexes are immutable for one thing). Rather, we should have a new `PeriodArray` like https://github.com/pandas-dev/pandas/pull/19174/files#diff-9e2f3dade777933f51723f5b020a1c08, and `PeriodIndex` will compose with that just like `CategoricalIndex` composes with `Categorical`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357691514",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357691514",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357691514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY5MTUxNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T14:04:26Z",
    "updated_at": "2018-01-15T14:04:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger actually I am proposing ImmutableArray as well, though that just makes things even more complicated. So let's just stick to a Array which is mutable (make that very clear). But yes need to incorporate all of our existing functionaility."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357720079",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357720079",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357720079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzcyMDA3OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T15:49:59Z",
    "updated_at": "2018-01-15T15:49:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback are you in favor of removing `CategoricalBlock`, `DatetimeTZBLock` in favor of a single `ExtensionBlock`?\r\n\r\nThe tricky thing with datetimetz is that we don't have a `DatetimeTZArray`, like we would for a `Categorical`, `Period`, `Interval`. That means an `ExtensionBlock[DatetimeTZ]` doesn't have anything to dispatch to, there's no `DatetimeTZ.isna()` to call, since the `values` is just a regular `ndarray`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357722660",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357722660",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357722660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzcyMjY2MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T15:58:44Z",
    "updated_at": "2018-01-15T15:58:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "no we will still have all of the existing blocks\r\n\r\nBUT they will have common functions in a Block; the data is held in an Array (which wraps things like DTI and Categorical, or maybe u can simply make Array a base class as i said before)\r\n\r\nCategoricalBlock and such are just implementations of a generic Block (what u r calling an ExtensuonBlock6"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357760128",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357760128",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357760128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzc2MDEyOA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T18:39:34Z",
    "updated_at": "2018-01-15T18:49:00Z",
    "author_association": "MEMBER",
    "body": "> Not sure if you're suggesting this, but I don't think e.g. PeriodIndex should be an instance of ExtensionArray (indexes are immutable for one thing).\r\n\r\nThis, along with the mention a while back of PeriodArray subclassing DatetimelikeIndexOpsMixin, leads into the discussion of what exactly needs to be defined by an Array class.  I've been making an effort to refactor some bits of the Index subclasses and Block subclasses to inherit from Array-like mixin classes.  What I've found is:\r\n\r\n- `values`, `_na_value`, `fill_value`, `_box_func` are shared by both the Blocks and the Indexes, so can go into the Array class unchanged.\r\n\r\n- The Datetimelike arithmetic/comparison ops use some helper methods `_nat_new` and `_shallow_copy` that the Blocks don't.  Unifying that internal API would be a big help.\r\n\r\n- The other properties that are non-trivial to share are ones that Indexes cache because they are immutable.  @jreback's discussion of ImmutableArray might solve that problem.\r\n\r\n----\r\nOther Notes:\r\n- TimedeltaBlock.to_native_types has a FIXME note saying to sue Timedelta64Formatter, which TimedeltaIndex already does.  `to_native_types` might belong in TimedeltaArray.  (really I guess, any of the Block methods that _dont_ care about `position` or `index`?)\r\n\r\n- This discussion is sprawling.  Is there a minimal subset of the PR that will implement the feature you most care about?\r\n\r\n- <b>update</b> +1 to the idea of making internals a directory."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357764058",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357764058",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357764058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzc2NDA1OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T18:59:30Z",
    "updated_at": "2018-01-15T18:59:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel agreed in general.\r\n\r\n>  This discussion is sprawling. Is there a minimal subset of the PR that will implement the feature you most care about?\r\n\r\nNo kidding :) Let's enumerate some TODOs.\r\n\r\n1. I want some interface such that pandas will \"do the right thing\" when it sees an array-like thing satisfying that interface, even if that array-like thing is defined outside of pandas.\r\n    a.) Define that interface (just the ABCs)\r\n    b.) Modify pandas' internals to honor that interface (adding `ExtensionBlock`, `isna`, Series/Frame ctors, groupby, etc.)\r\n2. An internal refactoring of `Categorical` to use that array interface\r\n3. An internal refactoring / enhancement for PeriodArray\r\n4. An internal refactoring / enhancement for IntervalArray\r\n\r\nI think that 1 would be a relatively small, clean PR, but it wouldn't have any cleanup benefit.\r\n\r\nAnyway, I'm partway through implementing 1 and 2 as a first PR. The sticking point is the inheritence hierarchy of blocks. Currently I have\r\n\r\n```\r\n- Block\r\n| - ExtensionBlock\r\n| | - CategoricalBlock\r\n| | - DatetimeTZBlock\r\n```\r\n\r\nbut there are a few issues to work out\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357996227",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-357996227",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 357996227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzk5NjIyNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T15:26:04Z",
    "updated_at": "2018-01-16T15:26:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Split the first section off to https://github.com/pandas-dev/pandas/pull/19268"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358514408",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-358514408",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 358514408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODUxNDQwOA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T02:08:50Z",
    "updated_at": "2018-01-18T02:08:50Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger for the discussion of refactoring the arithmetic ops out of `DatetimeIndexOpsMixin` for `PeriodArray`, pls take a look at [this branch](https://github.com/jbrockmendel/pandas/blob/arrays_dtlike/pandas/core/arrays/datetimelike.py) and let me know if it resembles what you have in mind."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/361727153",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19174#issuecomment-361727153",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19174",
    "id": 361727153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTcyNzE1Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T20:40:49Z",
    "updated_at": "2018-01-30T20:40:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing in favor of #19268"
  }
]
