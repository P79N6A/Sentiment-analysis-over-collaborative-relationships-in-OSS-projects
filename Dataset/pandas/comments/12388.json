[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/186010683",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-186010683",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 186010683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjAxMDY4Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T01:59:36Z",
    "updated_at": "2016-02-19T01:59:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nIn operations implying a scalar and an array, the normal rules of casting are used in Numexpr, in contrast with NumPy, where array types takes priority. For example, if 'a' is an array of type `float32` and 'b' is an scalar of type `float64` (or Python `float` type, which is equivalent), then 'a*b' returns a `float64` in Numexpr, but a `float32` in NumPy (i.e. array operands take priority in determining the result type). If you need to keep the result a `float32`, be sure you use a `float32` scalar too.\n```\n\n(this is different that what you are saying, but should prob handle non-the-less). I would do this test/casting in `_cast_inplace` itself.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/186057584",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-186057584",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 186057584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjA1NzU4NA==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T05:23:11Z",
    "updated_at": "2016-02-19T05:23:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "`numpy` behavior seems to make more sense.  \n\n```\npd.eval('3.5 / float32array')\n```\n\nis much easier to write than:\n\n```\ns = np.float32('3.5')\npd.eval('s / float32array')\n```\n\nAlso, if someone that didn't read the `numexpr` docs super carefully, they would've missed the little detail.\n\nTherefore, should we mimic `numpy` behavior?\n\nAs for `_cast_inplace`, should we modify the signature?  After the changes, it would be much more specialized function.  It looks like it is only used once, so we have that going for us.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/186084818",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-186084818",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 186084818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjA4NDgxOA==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T06:31:35Z",
    "updated_at": "2016-02-19T06:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thought about it some more\n\nWe could look at the whole expression, and come up with an output datatype:\n\n```\nIf all array elements in an expression are floats32 and ints:\nthen\n    output type = float32\nelse:\n    output type = float64\n```\n\nThis still has corner cases like adding two int32 arrays will result in float64.  It is unclear what the solution of adding two int32 arrays should be: If the numbers are small, then int32 array as an output array is OK, but if the numbers are big you need int64 arrays.  A way around this would be to let the user specify an `out` parameter.  We could do extra checks to warn the user in case there are incompatiblities, like if two float64s are being added, but the output type is float32, etc.\n\nSo, the proposal now becomes:\n1.  Add `out` parameter to let user specify the destination of the datatype.  must be ndarray or a pandas object (so either has `.dtype` or `.values.dtype`)\n2.  Choose an output array dtype to be one of `{float64, float32}`, depending on datatypes of arrays in the expression.  `float32` is chosen if all arrays in the expression have dtypes of float32 or any of the ints, otherwise `float64` is chosen.\n3.  Warn if `out` is specified, and is `float32` array, but input contains `float64` array.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/186206862",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-186206862",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 186206862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjIwNjg2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T13:10:36Z",
    "updated_at": "2016-02-19T13:10:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't recall why we are casting in the first place. I would ideally like to defer this entirey to the engine. \n@chris-b1 @cpcloud any recall?\n\nif not, then would be ok with passing a `dtype=` argument for casting and default to the minimum casting needed (though this just adds another layer of indirection but I guess needs to be done).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/187081978",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-187081978",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 187081978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzA4MTk3OA==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T09:10:35Z",
    "updated_at": "2016-02-22T09:10:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Should we go with `numpy` casting behavior (instead of `numexpr`)?  `numpy` behavior is consistent `pandas` when `numexpr` is not used.\n\nSo, what we'd have to do here is to down-cast constants from float64 to float32, if and only if all arrays are float32s.  E.g., `numpy` and `pandas` will use float64 as output dtype when int32 arrays are multiplied with float32 constant.  So, it seems like float32 array case is the main thing we have to worry about.\n\ne.g.\n\n```\nIn [1]: import pandas as pd\nIn [2]: import numpy as np\nIn [3]: pd.Series(np.arange(5, dtype=np.float32)) * 2.0\nOut[3]: \n0    0\n1    2\n2    4\n3    6\n4    8\ndtype: float32\n\nIn [11]: a = pd.Series(np.arange(5, dtype=np.int32)) * np.float32(1.1)\nIn [12]: a\nOut[12]: \n0    0.0\n1    1.1\n2    2.2\n3    3.3\n4    4.4\ndtype: float64\n\nIn [13]: np.arange(5, dtype=np.int32) * np.float32(1.1)\nOut[13]: array([ 0.        ,  1.10000002,  2.20000005,  3.30000007,  4.4000001 ])\nIn [14]: z = np.arange(5, dtype=np.int32) * np.float32(1.1)\nIn [15]: z.dtype\nOut[15]: dtype('float64')\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/187783701",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-187783701",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 187783701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzc4MzcwMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T16:44:13Z",
    "updated_at": "2016-02-23T16:44:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think you have to upcast by default, the only way I wouldn't would be if the users indicated (with `dtype=`) that its ok to proceed and then I would simply cast things to the passed dtype so the underlying wouldn't then upcast.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/187845093",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-187845093",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 187845093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzg0NTA5Mw==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T19:09:27Z",
    "updated_at": "2016-02-23T19:09:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "but wouldn't this result in inconsistent behavior between normal pandas binary operations (like `s * 2.0`, which does not upcast s if it is a float32 series) and `pd.eval('s * 2.0')`, which will end up upcasting?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/187851612",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-187851612",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 187851612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzg1MTYxMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T19:22:30Z",
    "updated_at": "2016-02-23T19:22:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jennolsen84 hmm. that is a good point. just trying to avoid pandas do _any_ casting here. What if we remove that and just let the engine do it? (I don't really recall why this is special cased here). Or if we are forced to do it, then I guess you are right would have to do a lowest-common denonimator cast (maybe use `np.find_common_type`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/188227302",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-188227302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 188227302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODIyNzMwMg==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-24T12:26:35Z",
    "updated_at": "2016-02-24T12:26:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "how about this as a start?  https://github.com/jennolsen84/pandas/commit/c82819fe483bb7dd218e94caabc4cd806b488275\n\nI manually tested it, and the behavior is now consistent with non-numexpr related code.  I am trying to avoid casting un-necessarily as you recommended, and letting the lower-level libraries take care of a lot of things.\n\nI did run the nosetests, and they all pass on existing tests.\n\nIf the commit looks good to you, I can add in some tests, add to docs, etc. and submit a PR.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/190406819",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-190406819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 190406819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDQwNjgxOQ==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-29T21:36:00Z",
    "updated_at": "2016-02-29T21:36:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback can you please take another look at the commit?  I addressed your comment, and I am not sure if you missed it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/190704263",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-190704263",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 190704263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDcwNDI2Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T12:34:14Z",
    "updated_at": "2016-03-01T12:34:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jennolsen84 yeh just getting back to this.\n\nyour soln seems fine. However I still don't understand _why_ it is necessary to upcast (and only for division); what does numexpr do (if you don't upcast)? is it wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/190831554",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-190831554",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 190831554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDgzMTU1NA==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T17:53:05Z",
    "updated_at": "2016-03-01T17:53:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "We're casting to float32 in all ops (not just division).\n\nThe division thing was another case where `pandas` was casting to `float`(64), so I had to make a change there as well.\n\nThe reason why the cast happens at all is for some reason `numexpr` would cast a scalar 64 bit float \\* array 32 bit float to 64-bit floats.  I am not sure why.  This is inconsistent with `numpy`, and un-necessarily slower and takes up more RAM.\n\nI will submit a PR (with whatsnew and tests)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/190866921",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12388#issuecomment-190866921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12388",
    "id": 190866921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDg2NjkyMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T19:35:32Z",
    "updated_at": "2016-03-01T19:35:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks @jennolsen84 why don't you submit and we'll go from there\n"
  }
]
