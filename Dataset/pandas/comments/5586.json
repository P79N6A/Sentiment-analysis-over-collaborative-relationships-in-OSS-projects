[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/29220791",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5586#issuecomment-29220791",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5586",
    "id": 29220791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjIwNzkx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-25T17:15:43Z",
    "updated_at": "2013-11-25T17:15:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this just needs a mapping like `np.prod` has (which works correcly). These numpy functions are mapped internally to cython functions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/46761207",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5586#issuecomment-46761207",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5586",
    "id": 46761207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzYxMjA3",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-21T18:33:36Z",
    "updated_at": "2014-06-21T18:33:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "I had just fixed this when I realized there are lots of other numpy functions which will behave in the same way, e.g. \n\n```\n>>> df.groupby(\"a\").agg(np.max)\n    b\na    \n10  2\n20  3\n30  5\n```\n\nbut\n\n```\n>>> df.groupby(\"a\").agg(np.nanmax)\n     b\na     \n10  10\n20  20\n30  30\n```\n\nIs whitelisting them one by one really our best option?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/46761302",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5586#issuecomment-46761302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5586",
    "id": 46761302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzYxMzAy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-21T18:37:31Z",
    "updated_at": "2014-06-21T18:37:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "the nan ones are somewhat newer\n\nI think there are only a few more to add\nnot really sure of a better way l\n\nmaybe could try some sort of regex matching on the name of the function?\n(and see what comes up and just map them)\n\nFYI since for example nanmean doesn't exist in older numpies have to conditionally add them \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/46761735",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5586#issuecomment-46761735",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5586",
    "id": 46761735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzYxNzM1",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-21T18:55:25Z",
    "updated_at": "2014-06-21T18:55:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe we could go the other way, and blacklist the ones we haven't done.  Admittedly that wouldn't catch `.agg(lambda x: np.some_new_function(x))`, but it would protect against `.agg(np.some_new_function)` if we hadn't handled it yet.\n\nBut couldn't we just catch anything else in numpy and pass it `np.asarray(x)`, though?\n\nFirst, check to see if it's been special cased. If so, use it.\nNext, check to see if it's a numpy function we haven't whitelisted.  If so, call it with np.asarray(x); more likely to give the expected answer.\nIf not, pass it x.\n\nVaguely like\n\n```\n>>> np_funcs = {f for n, f in inspect.getmembers(np) if callable(f)}\n>>> f = np.product\n>>> df.groupby(\"a\").agg(np.prod)\n     b\na     \n10   2\n20   3\n30  20\n>>> df.groupby(\"a\").agg(np.product)\n        b\na        \n10    200\n20     60\n30  18000\n>>> f = np.product\n>>> df.groupby(\"a\").agg(f if f not in np_funcs else (lambda x: f(np.asarray(x))))\n     b\na     \n10   2\n20   3\n30  20\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/46761991",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5586#issuecomment-46761991",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5586",
    "id": 46761991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzYxOTkx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-21T19:06:21Z",
    "updated_at": "2014-06-21T19:06:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes I think that how could definitly be more strict in that you could evaluate on cases:\n- if its in our white list map to a pandas fast function and go\n- if its on black list raise\n- if its a lamba pass thru\n- if its a numpy function that is not the above, the use `np.asarray` (and maybe show a warning?)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/46762526",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5586#issuecomment-46762526",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5586",
    "id": 46762526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzYyNTI2",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-21T19:29:12Z",
    "updated_at": "2014-06-21T19:29:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like the warning idea, though I'm not sure what the appropriate label would be: SemiImplementedWarning, maybe? :^)\n\n```\nSemiImplementedWarning: numpy function {} does not have a fast native pandas\nequivalent yet and is not fully supported; coercing the groups to ndarrays\n```\n\nWhatever we do, I think the current approach of special-casing a few and letting the rest silently give incorrect results -- even though they're called in exactly the same way the ones which work do -- should be replaced with something noisier.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/46762634",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5586#issuecomment-46762634",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5586",
    "id": 46762634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzYyNjM0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-21T19:32:50Z",
    "updated_at": "2014-06-21T19:32:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can say that you should use `lambda x: np.function_that_we_do_fast` as this will pass thru and just let the warning happen (until we put an explicity put it on the whitelist with either a fast version or a simple passthru)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/465452656",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5586#issuecomment-465452656",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5586",
    "id": 465452656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTQ1MjY1Ng==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-20T07:08:17Z",
    "updated_at": "2019-02-20T07:08:17Z",
    "author_association": "MEMBER",
    "body": "Looks fixed in master. Could use a test."
  }
]
