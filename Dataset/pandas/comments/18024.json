[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/340391430",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18024#issuecomment-340391430",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18024",
    "id": 340391430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM5MTQzMA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T09:38:21Z",
    "updated_at": "2017-10-30T09:38:21Z",
    "author_association": "MEMBER",
    "body": "@toobaz : I'm not sure I fully follow you explanation of the problem's source, but your report seems reasonable to me.  PR is welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/340396466",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18024#issuecomment-340396466",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18024",
    "id": 340396466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM5NjQ2Ng==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T09:57:43Z",
    "updated_at": "2017-10-30T09:57:43Z",
    "author_association": "MEMBER",
    "body": "Actually my explanation is not even a real explanation... I just dug down the code a couple of steps looking for the origin of the problem (and stopped at the border with ``numpy`` code - but a fix in pandas should be possible, given that e.g. replacing ``Timestamp`` with ``Period`` works fine)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/340396893",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18024#issuecomment-340396893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18024",
    "id": 340396893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM5Njg5Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T09:59:21Z",
    "updated_at": "2017-10-30T10:00:02Z",
    "author_association": "MEMBER",
    "body": "I agree it is strange behaviour, but I am not fully sure we can do something about it at the source.  Converting a Categorical to array gives datetime64\r\n\r\n```\r\nIn [51]: np.asarray(pd.Categorical([pd.Timestamp('2014-01-01')]))\r\nOut[51]: array(['2014-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\r\n```\r\n\r\nand converting that to object gives the underlying integer as object (numpy behaviour):\r\n\r\n```\r\nIn [52]: np.asarray(pd.Categorical([pd.Timestamp('2014-01-01')])).astype(object)\r\nOut[52]: array([1388534400000000000], dtype=object)\r\n```\r\n\r\nThe difference with the Timestamp example is that that already *is* object dtype, so the `astype(object)` does not do anything.\r\n\r\nYou get the same result when astyping datetime64 data:\r\n```\r\nIn [55]: pd._libs.algos.ensure_object(np.array(['2012-01-01'], dtype='datetime64[ns]'))\r\nOut[55]: array([1325376000000000000], dtype=object)\r\n\r\nIn [56]: np.array(['2012-01-01'], dtype='datetime64[ns]').astype(object)\r\nOut[56]: array([1325376000000000000], dtype=object)\r\n```\r\n\r\nBut I suppose we can add some workarounds to prevent this from happening on the pandas side (like is done for the Series(datetime64 data).astype(object) case)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/340401360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18024#issuecomment-340401360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18024",
    "id": 340401360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQwMTM2MA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T10:17:47Z",
    "updated_at": "2017-10-30T10:17:47Z",
    "author_association": "MEMBER",
    "body": "> Converting a Categorical to array gives datetime64\r\n\r\nI'm not sure what we can do to prevent unwanted conversions, but what we should at least (be able to) fix is the fact that ``np.asarray(pd.Categorical(anything))`` gives a different result than ``np.asarray(anything)`` (where in the case we are discussing, ``anything`` is ``[pd.Timestamp('2014-01-01')]``)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/340402128",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18024#issuecomment-340402128",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18024",
    "id": 340402128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQwMjEyOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T10:20:50Z",
    "updated_at": "2017-10-30T10:20:50Z",
    "author_association": "MEMBER",
    "body": "> but what we should at least (be able to) fix is the fact that np.asarray(pd.Categorical(anything)) gives a different result than np.asarray(anything)\r\n\r\nYes, but the 'anything', although being `[pd.Timestamp('2014-01-01')]`, is actually a DatetimeIndex (once converted to Categorical, the categories are inferred to be datetime), and doing `np.asarray(DatetimeIndex(..))` does give datetime64, not object Timestamps:\r\n\r\n```\r\nIn [60]: np.asarray(pd.DatetimeIndex([\"2012-01-01\"]))\r\nOut[60]: array(['2012-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/340413457",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18024#issuecomment-340413457",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18024",
    "id": 340413457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQxMzQ1Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T11:11:04Z",
    "updated_at": "2017-10-30T11:11:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "take is meant to emulate ``np.take``; but it has to operate on the ``._values``, IOW it know about extension types (in ``take_1d`` which does all the work)\r\n\r\n```\r\nIn [51]: from pandas.core.algorithms import take_1d\r\n\r\nIn [52]: c = pd.Categorical([pd.Timestamp('2014-01-01')])\r\n\r\nIn [53]: take_1d(c.categories.values, c.codes)\r\nOut[53]: array(['2014-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\r\n\r\nIn [54]: c.categories.take(c.codes).values\r\nOut[54]: array(['2014-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\r\n\r\nIn [56]: c.categories.values.take(c.codes)\r\nOut[56]: array(['2014-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\r\n```\r\nso we want these to be identical.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/340413652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18024#issuecomment-340413652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18024",
    "id": 340413652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQxMzY1Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T11:12:01Z",
    "updated_at": "2017-10-30T11:12:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "This issue is not about take, rather about not handling ``.astype(object)`` I agree this should work and be equivalent. Prob just needs some logic to have\r\n```\r\nIn [59]: c.astype('object')\r\nOut[59]: array([1388534400000000000], dtype=object)\r\n\r\nIn [60]: c.categories\r\nOut[60]: DatetimeIndex(['2014-01-01'], dtype='datetime64[ns]', freq=None)\r\n\r\nIn [61]: c.categories.astype('object')\r\nOut[61]: Index([2014-01-01 00:00:00], dtype='object')\r\n```\r\nwork correctly."
  }
]
