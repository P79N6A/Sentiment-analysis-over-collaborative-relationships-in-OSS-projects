[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/464449793",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25347#issuecomment-464449793",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25347",
    "id": 464449793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDQ0OTc5Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-17T12:17:40Z",
    "updated_at": "2019-02-17T12:17:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't quite follow the proposal. At least, I don't think the proposed behavior matches the names `_from_serialized and `_serialize`. I think serialization is typically used for a protocol / byte-level representation of an object.\r\n\r\nIIUC, the desire is for a pair of methods that will be called before and after a (NumPy?) numeric operation. Do we have examples other than datetime-tz?\r\n\r\n- Categorical: something like `.codes` and `.from_codes`, but Categorical also needs to specially handle how the code `-1` is handle *in the op*, so that doesn't quite fit.\r\n- Period: ordinals. Should be similar to datetime\r\n- Sparse: Probably doesn't want to implement `._serialized` if an ndarray is the required type\r\n- Interval: No idea\r\n\r\nHow does `_serialize` differ from `_ndarray_values` (whose behavior isn't really defined yet)?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/464525718",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25347#issuecomment-464525718",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25347",
    "id": 464525718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDUyNTcxOA==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-17T23:24:34Z",
    "updated_at": "2019-02-17T23:24:34Z",
    "author_association": "MEMBER",
    "body": "\"serialize\" is a bit of a misnomer (just a placeholder name). Your follow-up examples are closer to the spirit of the idea.\r\n\r\n`_serialize` I think would be essentially the same as `_ndarray_values` with additionally saving extension dtype so the pair could be passed to `_from_serialized`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/466006715",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25347#issuecomment-466006715",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25347",
    "id": 466006715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjAwNjcxNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T13:51:54Z",
    "updated_at": "2019-02-21T13:52:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "this doesn't necessarily need a method on EA, maybe all we need are a pair of functions for internal use something like; we can use this when we need to go to a performant representation and back (e.g. pretty much anytime we use cython).\r\n\r\n```\r\ndef to_internal_tranform(arr):\r\n   if is_extension_array_dtype(arr):\r\n         return arr._ndarray_values, arr.dtype, arr.na_value\r\n   return arr, arr.dtype, np.nan\r\n\r\ndef from_internal_transform(arr, dtype, na_value):\r\n    if is_extension_dtype(dtype):\r\n           arr = dtype.array_type()._from_sequence(arr)\r\n           arr = arr.astype(dtype, copy=False)\r\n    return arr\r\n```"
  }
]
