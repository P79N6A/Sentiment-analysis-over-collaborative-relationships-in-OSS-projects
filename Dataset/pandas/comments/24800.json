[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454842375",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24800#issuecomment-454842375",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24800",
    "id": 454842375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDg0MjM3NQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T16:23:37Z",
    "updated_at": "2019-01-16T16:23:37Z",
    "author_association": "MEMBER",
    "body": "Hmm I *think* this should work but cc @toobaz for thoughts"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/455069121",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24800#issuecomment-455069121",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24800",
    "id": 455069121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTA2OTEyMQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T07:26:27Z",
    "updated_at": "2019-01-17T07:26:27Z",
    "author_association": "MEMBER",
    "body": "I'm pretty sure not only that the OP code should work, but also that even when the number of levels coincide, as in (notice the different column ``\"b\"``):\r\n``` python3\r\nIn [2]: df = pd.DataFrame({'a': [0,1,2,3],\r\n   ...:                    'b': ['a_1', 'a_2', 'b_1', 'b_2'],\r\n   ...:                    'c': list('defg')})\r\n   ...:                    \r\n\r\nIn [3]: df = df.set_index(['b', 'c'])\r\n\r\nIn [4]: df.index.map(lambda x : tuple(x[0].split('_')))\r\nOut[4]: \r\nMultiIndex(levels=[['a', 'b'], ['1', '2']],\r\n           codes=[[0, 0, 1, 1], [0, 1, 0, 1]],\r\n           names=['b', 'c'])\r\n\r\n```\r\n\r\n... it is a mistake to reuse the names, because the output of the lambda does not (in general) have anything to do with the input.\r\n\r\nSo the question becomes \"is there _any_ case in which it makes sense to reuse the names of a ``MultiIndex`` in a call to ``map``?\" I think the answer is \"no\", and if I am right, we just need to suppress this behavior here:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4441"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/455485423",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24800#issuecomment-455485423",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24800",
    "id": 455485423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ4NTQyMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T09:39:38Z",
    "updated_at": "2019-01-18T09:39:38Z",
    "author_association": "MEMBER",
    "body": "> So the question becomes \"is there any case in which it makes sense to reuse the names of a MultiIndex in a call to map?\" I think the answer is \"no\",\r\n\r\nNote that this is more general to MultiIndex.map. We also preserve the name for Index.map, Series.map, Series.apply, .. \r\nSo at least from a consistency point of view, trying to preserve the names for MultiIndex.map as well might make sense."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/455511842",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24800#issuecomment-455511842",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24800",
    "id": 455511842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTUxMTg0Mg==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T11:12:39Z",
    "updated_at": "2019-01-18T11:12:39Z",
    "author_association": "MEMBER",
    "body": "> Note that this is more general to MultiIndex.map. We also preserve the name for Index.map, Series.map, Series.apply, ..\r\n\r\nSorry, my comment was indeed a bit vague, but I was thinking to _levels_ names (of the original ``MultiIndex``), not just the ``name`` attribute. The best analogy I can come with is\r\n``` python3\r\nIn [2]: df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\r\n\r\nIn [3]: df.apply(lambda x : pd.Series([x[0], -x[0]]), axis=1)\r\nOut[3]: \r\n   0  1\r\n0  1 -1\r\n1  3 -3\r\n``` \r\nwhich does _not_ preserve column names."
  }
]
