[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445360341",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445360341",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445360341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTM2MDM0MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-07T20:45:48Z",
    "updated_at": "2018-12-07T20:45:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Your assign is basically the same as pandas.\r\n\r\nWhat version of python? I don't see the perf difference between\r\n\r\n```python\r\nIn [9]: def f(df, **kwargs):\r\n   ...:     df = df.copy()\r\n   ...:     for k, v in kwargs.items():\r\n   ...:         df[k] = v\r\n   ...:\r\n\r\nIn [10]: %timeit f(df, c=df['b'] * 2)\r\n50.4 ms ± 305 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\r\n\r\nIn [11]: %timeit df.assign(c=df['b'] * 2)\r\n51.6 ms ± 438 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\r\n```\r\n\r\nkeep in mind that python <= 3.5 does a sort on the keys to ensure a deterministic insert order."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445444042",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445444042",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445444042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ0NDA0Mg==",
    "user": {
      "login": "bnouvel-wio",
      "id": 3405279,
      "node_id": "MDQ6VXNlcjM0MDUyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3405279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bnouvel-wio",
      "html_url": "https://github.com/bnouvel-wio",
      "followers_url": "https://api.github.com/users/bnouvel-wio/followers",
      "following_url": "https://api.github.com/users/bnouvel-wio/following{/other_user}",
      "gists_url": "https://api.github.com/users/bnouvel-wio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bnouvel-wio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bnouvel-wio/subscriptions",
      "organizations_url": "https://api.github.com/users/bnouvel-wio/orgs",
      "repos_url": "https://api.github.com/users/bnouvel-wio/repos",
      "events_url": "https://api.github.com/users/bnouvel-wio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bnouvel-wio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T09:01:09Z",
    "updated_at": "2018-12-08T09:01:09Z",
    "author_association": "NONE",
    "body": "Tom thank for the swift reply.\r\n\r\nPandas your code is different from mine: as copy is deep by default.\r\nhttps://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.copy.html\r\nMy previous code (sent with my work account) was shallow copy.\r\n\r\n\r\nI am using conda python 3.6.0.\r\nI have also tried the code on my personal laptop. I have similar performance gap with different version of python and pandas.\r\n```\r\nPANDAS ASSIGN 2.0934243202209473\r\nFUNC ASSIGN 0.5120208263397217\r\n# Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56) \r\n# with pandas 0.23.0\r\n```\r\nObviously the performance gap can depends on the size of the dataframe and the size of the data to be copied..\r\n\r\nPS: Sorry for confusion reusing \"i\" the two imbricated loops in previous code fragment, using \"i\" and \"j\" doesn't change the nature of the issue. Timeit seemed more ideal but for some probably reason it ran out of memory with timeit so I preferred manual implementation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445453264",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445453264",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445453264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ1MzI2NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T11:45:55Z",
    "updated_at": "2018-12-08T11:45:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, I see.\r\n\r\nDataFrame.assign has to copy the data. It shouldn't mutate the input in place."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445456200",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445456200",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445456200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ1NjIwMA==",
    "user": {
      "login": "bnouvel-wio",
      "id": 3405279,
      "node_id": "MDQ6VXNlcjM0MDUyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3405279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bnouvel-wio",
      "html_url": "https://github.com/bnouvel-wio",
      "followers_url": "https://api.github.com/users/bnouvel-wio/followers",
      "following_url": "https://api.github.com/users/bnouvel-wio/following{/other_user}",
      "gists_url": "https://api.github.com/users/bnouvel-wio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bnouvel-wio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bnouvel-wio/subscriptions",
      "organizations_url": "https://api.github.com/users/bnouvel-wio/orgs",
      "repos_url": "https://api.github.com/users/bnouvel-wio/repos",
      "events_url": "https://api.github.com/users/bnouvel-wio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bnouvel-wio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T12:38:12Z",
    "updated_at": "2018-12-08T12:39:15Z",
    "author_association": "NONE",
    "body": "There is no \"inplace mutation\" with \"functional_assign\" (This is not \"in_place assign\" ).  \"functional_assign\" . Yes, the same instance of the data series is reused in a different dataframes, however I estimate it should be expected for assign. It would be similar as taking slice on a numpy array, you have a new instance of a numpy.array,  you have is a new \"view,\" and you don't copy the data unless you code \".copy()\" on the view of the array. It allows programmers to control performance and number of copies, and code to ends up running naturally MUCH faster. Obviously, the semantics need to be clear to every one, but my feeling  is that most programmers don't expect a \"new dataframe\" to mean a deep copy of their entire dataframe. And they rather avoid doing a copy of large tables, each time they try to adjunct a derived column on a dataframe.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445456387",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445456387",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445456387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ1NjM4Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T12:42:06Z",
    "updated_at": "2018-12-08T12:42:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't follow exactly what your proposing, but it sounds like you're\nexpecting some kind of copy on write behavior?\nPandas doesn't have that (yet).\n\nRegardless, after\n\n```python\ndf2 = df.assign(a=b)\n```\n\nthe expectation is that any further (inplace) modifications to `df2` will\nnot be reflected in `df`.\n\nBut you are of course welcome to avoid the copies by assigning directly.\n\nOn Sat, Dec 8, 2018 at 6:38 AM Bertrand NOUVEL <notifications@github.com>\nwrote:\n\n> There is \"mutate inplace\" with \"functional_assign\" (This is not \"in_place\n> assign\" ). \"functional_assign\" . Yes, ithe same instance of the data series\n> is reused in a different dataframes, however I estimate it should be the\n> expected for assign. It would be similar as taking slice on a numpy array,\n> you have a new instance of a numpy.arra, you have is a new \"view,\" and you\n> don't copy the data unless you code \".copy()\" on the view of the array. It\n> allows programmers to control performance and number of copies, and code to\n> ends up running naturally MUCH faster. Obviously, the semantics need to be\n> clear to every one, but my feeling is that most programmers don't expect a\n> \"new dataframe\" to mean a deep copy of their entire dataframe. And they\n> rather avoid doing a copy of large tables, each time they try to adjunct a\n> derived column on a dataframe.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445456200>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIkl45VSuT9KPis7ZuIPHz9puYh_Gks5u27K4gaJpZM4ZI5T4>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445465995",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445465995",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445465995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ2NTk5NQ==",
    "user": {
      "login": "bnouvel-wio",
      "id": 3405279,
      "node_id": "MDQ6VXNlcjM0MDUyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3405279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bnouvel-wio",
      "html_url": "https://github.com/bnouvel-wio",
      "followers_url": "https://api.github.com/users/bnouvel-wio/followers",
      "following_url": "https://api.github.com/users/bnouvel-wio/following{/other_user}",
      "gists_url": "https://api.github.com/users/bnouvel-wio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bnouvel-wio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bnouvel-wio/subscriptions",
      "organizations_url": "https://api.github.com/users/bnouvel-wio/orgs",
      "repos_url": "https://api.github.com/users/bnouvel-wio/repos",
      "events_url": "https://api.github.com/users/bnouvel-wio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bnouvel-wio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T15:08:59Z",
    "updated_at": "2018-12-08T15:08:59Z",
    "author_association": "NONE",
    "body": "Tom thanks for the swift reply again.\r\n\r\nNow, I am still under the impression that current implementation should be called \"assign_and_copy\" and that assign should not copy the entire the data. I am not convinced that most developers are expecting that all operations on a dataframe would to lead to a deep copy of the entire data. Operations such as 'renaming' the columns, adding, subsetting columns or rows slicing are somehow expected to be just modification of a \"view\" of the data and should not  lead to unnecessary copies of the data. \r\nFor instance, as a programmer I expect the following : \r\n```\r\ndf.iloc[100:1000]\r\ndf[[\"a\", \"b\", \"c\"]]\r\ndf.assign(b=df['a'])\r\ndf.rename({'a':'aa'}, axis='columns')\r\n```\r\nto be constant time operation (or eventually linear on df['a'] for the assign - because of eventual re-indexing issue) . If all these operations imply a deep copy and are there for linear with the size of the entire df, I think many programmers are going to stop to use pandas very quickly.\r\n\r\nIn your example, a functional programmer would normally not modify the underlying data of df or df2. In the case, this would start to do in-place modification, he should only be fair to ask for a copy \r\nto ensure there is no side effect. \r\nNow, let's assume that we are of a different opinion, and that we think that the programmer should not do the copy explicitly, then I imagine that it would still be possible to improve massively performance by implement a read-only views with copy-on-write when accessed for in-place modification. \r\nEfficient programming with pandas should be possible independently of the style. I should not have to change from functional style to imperative style to ensure efficiency on assign.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445466705",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445466705",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445466705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ2NjcwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T15:20:57Z",
    "updated_at": "2018-12-08T15:20:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "virtually all operations in pandas copy - with the exception of inpkace indexing\r\n\r\nthis is a very clear idiom and is not going to change"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445467516",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445467516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445467516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ2NzUxNg==",
    "user": {
      "login": "bnouvel-wio",
      "id": 3405279,
      "node_id": "MDQ6VXNlcjM0MDUyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3405279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bnouvel-wio",
      "html_url": "https://github.com/bnouvel-wio",
      "followers_url": "https://api.github.com/users/bnouvel-wio/followers",
      "following_url": "https://api.github.com/users/bnouvel-wio/following{/other_user}",
      "gists_url": "https://api.github.com/users/bnouvel-wio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bnouvel-wio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bnouvel-wio/subscriptions",
      "organizations_url": "https://api.github.com/users/bnouvel-wio/orgs",
      "repos_url": "https://api.github.com/users/bnouvel-wio/repos",
      "events_url": "https://api.github.com/users/bnouvel-wio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bnouvel-wio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T15:33:19Z",
    "updated_at": "2018-12-08T15:33:19Z",
    "author_association": "NONE",
    "body": "But with c-o-w, performance can be improved without any change of the idiom ?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445467903",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445467903",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445467903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ2NzkwMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T15:38:47Z",
    "updated_at": "2018-12-08T15:38:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "maybe but that’s out of scope for pandas for the near future "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/445468917",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24145#issuecomment-445468917",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24145",
    "id": 445468917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTQ2ODkxNw==",
    "user": {
      "login": "bnouvel-wio",
      "id": 3405279,
      "node_id": "MDQ6VXNlcjM0MDUyNzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3405279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bnouvel-wio",
      "html_url": "https://github.com/bnouvel-wio",
      "followers_url": "https://api.github.com/users/bnouvel-wio/followers",
      "following_url": "https://api.github.com/users/bnouvel-wio/following{/other_user}",
      "gists_url": "https://api.github.com/users/bnouvel-wio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bnouvel-wio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bnouvel-wio/subscriptions",
      "organizations_url": "https://api.github.com/users/bnouvel-wio/orgs",
      "repos_url": "https://api.github.com/users/bnouvel-wio/repos",
      "events_url": "https://api.github.com/users/bnouvel-wio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bnouvel-wio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-08T15:55:15Z",
    "updated_at": "2018-12-08T15:55:15Z",
    "author_association": "NONE",
    "body": "Sure, it is certainly a significant change - thanks again for swift replies. "
  }
]
