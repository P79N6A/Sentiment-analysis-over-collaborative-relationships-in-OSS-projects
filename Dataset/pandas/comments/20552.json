[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377561749",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-377561749",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 377561749,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU2MTc0OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T16:21:57Z",
    "updated_at": "2018-03-30T16:21:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm running the test suite locally now. Will post that.\r\n\r\n@jjhelmus are there plans for a conda-forge 3.7 beta python release? If not, I can (try) to build it and install from my channel, but other projects will likely find this useful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377567089",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-377567089",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 377567089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU2NzA4OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T16:45:44Z",
    "updated_at": "2018-03-30T16:45:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's the output of my local run: https://gist.github.com/b119546b318ab8f31ee4c7ffc8dce5f6\r\n\r\nOnce https://github.com/pandas-dev/pandas/issues/20551 is fixed (which breaks everything), things don't look too bad.\r\n\r\nLooks like some additional deprecation warnings caused several.\r\n\r\nThe `datetime.timedelta` repr changed from `datetime.timedelta(1)` to `datetime.timedelta(days=1)`.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377596407",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-377596407",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 377596407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU5NjQwNw==",
    "user": {
      "login": "jjhelmus",
      "id": 1050278,
      "node_id": "MDQ6VXNlcjEwNTAyNzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1050278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jjhelmus",
      "html_url": "https://github.com/jjhelmus",
      "followers_url": "https://api.github.com/users/jjhelmus/followers",
      "following_url": "https://api.github.com/users/jjhelmus/following{/other_user}",
      "gists_url": "https://api.github.com/users/jjhelmus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jjhelmus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jjhelmus/subscriptions",
      "organizations_url": "https://api.github.com/users/jjhelmus/orgs",
      "repos_url": "https://api.github.com/users/jjhelmus/repos",
      "events_url": "https://api.github.com/users/jjhelmus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jjhelmus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T18:56:16Z",
    "updated_at": "2018-03-30T18:56:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @jjhelmus are there plans for a conda-forge 3.7 beta python release?\r\n\r\nThere have been a few requests for Python 3.7 beta packages on conda-forge. I'll look into putting together a recipe."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/386443225",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-386443225",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 386443225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQ0MzIyNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T21:31:40Z",
    "updated_at": "2018-05-03T21:31:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think `conda install -c c3i_test python=3.7` will get 3.7"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/389341563",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-389341563",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 389341563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTM0MTU2Mw==",
    "user": {
      "login": "cgohlke",
      "id": 483428,
      "node_id": "MDQ6VXNlcjQ4MzQyOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/483428?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgohlke",
      "html_url": "https://github.com/cgohlke",
      "followers_url": "https://api.github.com/users/cgohlke/followers",
      "following_url": "https://api.github.com/users/cgohlke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgohlke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgohlke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgohlke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgohlke/orgs",
      "repos_url": "https://api.github.com/users/cgohlke/repos",
      "events_url": "https://api.github.com/users/cgohlke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgohlke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-15T23:04:06Z",
    "updated_at": "2018-05-15T23:09:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW, on Windows, I get the following test results:\r\n\r\n```\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.7.0.beta.4\r\npython-bits: 64\r\nOS: Windows\r\nOS-release: 10\r\nmachine: AMD64\r\nprocessor: Intel64 Family 6 Model 79 Stepping 1, GenuineIntel\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: None\r\nLOCALE: None.None\r\n\r\npandas: 0.23.0\r\npytest: 3.5.1\r\npip: 10.0.1\r\nsetuptools: 39.1.0\r\nCython: 0.28.2\r\nnumpy: 1.14.3\r\nscipy: 1.1.0\r\npyarrow: None\r\nxarray: 0.10.3\r\nIPython: 6.4.0\r\nsphinx: 1.7.4\r\npatsy: 0.5.0\r\ndateutil: 2.7.3\r\npytz: 2018.4\r\nblosc: 1.5.1\r\nbottleneck: 1.2.1\r\ntables: 3.4.3\r\nnumexpr: 2.6.5\r\nfeather: None\r\nmatplotlib: 2.2.2\r\nopenpyxl: 2.5.3\r\nxlrd: 1.1.0\r\nxlwt: 1.3.0\r\nxlsxwriter: 1.0.4\r\nlxml: 4.2.1\r\nbs4: 4.6.0\r\nhtml5lib: 1.0.1\r\nsqlalchemy: 1.2.7\r\npymysql: None\r\npsycopg2: 2.7.4 (dt dec pq3 ext lo64)\r\njinja2: 2.10\r\ns3fs: 0.1.5\r\nfastparquet: None\r\npandas_gbq: None\r\npandas_datareader: None\r\n```\r\n\r\n```\r\nrunning: pytest --skip-slow --skip-network X:\\Python37\\lib\\site-packages\\pandas\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.7.0b4, pytest-3.5.1, py-1.5.3, pluggy-0.6.0\r\nrootdir: C:\\Users\\--\\test, inifile:\r\nplugins: faulthandler-1.5.0, hypothesis-3.56.9\r\ncollected 26198 items / 2 skipped\r\n\r\npandas\\tests\\test_algos.py ............................................. [  0%]\r\n.............X.....................................................      [  0%]\r\npandas\\tests\\test_base.py .............................................. [  0%]\r\n........................................................................ [  0%]\r\n........................................................................ [  1%]\r\n........x                                                                [  1%]\r\npandas\\tests\\test_common.py ...............                              [  1%]\r\npandas\\tests\\test_compat.py .........                                    [  1%]\r\npandas\\tests\\test_config.py .....................                        [  1%]\r\npandas\\tests\\test_downstream.py ..s.sssss                                [  1%]\r\npandas\\tests\\test_errors.py ............                                 [  1%]\r\npandas\\tests\\test_expressions.py ...s..s..s.........                     [  1%]\r\npandas\\tests\\test_join.py ..........                                     [  1%]\r\npandas\\tests\\test_lib.py .........                                       [  1%]\r\npandas\\tests\\test_multilevel.py ........................................ [  1%]\r\n....................................................s................... [  2%]\r\n......................................                                   [  2%]\r\npandas\\tests\\test_nanops.py ............................................ [  2%]\r\n...........................                                              [  2%]\r\npandas\\tests\\test_panel.py ............................................. [  2%]\r\n........................................................................ [  2%]\r\n........................                                                 [  2%]\r\npandas\\tests\\test_register_accessor.py ......                            [  2%]\r\npandas\\tests\\test_resample.py .......................................... [  3%]\r\n........................................................................ [  3%]\r\n..ssss.................................................................. [  3%]\r\n..............................................ssss...................... [  3%]\r\n............                                                             [  4%]\r\npandas\\tests\\test_sorting.py s...s.......                                [  4%]\r\npandas\\tests\\test_strings.py ........................................... [  4%]\r\n........................................................................ [  4%]\r\n........................                                                 [  4%]\r\npandas\\tests\\test_take.py ....................                           [  4%]\r\npandas\\tests\\test_window.py ............................................ [  4%]\r\n..........................x.........FFFFFFFFFFFFF..s.................... [  5%]\r\n........................................................................ [  5%]\r\n........................................................................ [  5%]\r\n........................................................................ [  5%]\r\n.FFFF..................................................sssssssssssssssss [  6%]\r\nssssssssssssssssssssssssssssssssssssssssssssssssss..F................... [  6%]\r\n......F.F...................F.........................................FF [  6%]\r\n................                                                         [  6%]\r\npandas\\tests\\api\\test_api.py ...................                         [  6%]\r\npandas\\tests\\api\\test_types.py ...                                       [  6%]\r\npandas\\tests\\categorical\\test_algos.py ....................              [  6%]\r\npandas\\tests\\categorical\\test_analytics.py ...................           [  7%]\r\npandas\\tests\\categorical\\test_api.py ................................... [  7%]\r\n..................                                                       [  7%]\r\npandas\\tests\\categorical\\test_constructors.py .......................... [  7%]\r\n.............x                                                           [  7%]\r\npandas\\tests\\categorical\\test_dtypes.py ................................ [  7%]\r\n.......                                                                  [  7%]\r\npandas\\tests\\categorical\\test_indexing.py .....                          [  7%]\r\npandas\\tests\\categorical\\test_missing.py .......                         [  7%]\r\npandas\\tests\\categorical\\test_operators.py .............                 [  7%]\r\npandas\\tests\\categorical\\test_repr.py .....................              [  7%]\r\npandas\\tests\\categorical\\test_sorting.py ....                            [  7%]\r\npandas\\tests\\categorical\\test_subclass.py ...                            [  7%]\r\npandas\\tests\\categorical\\test_warnings.py .                              [  7%]\r\npandas\\tests\\computation\\test_compat.py .....                            [  7%]\r\npandas\\tests\\computation\\test_eval.py s.s..ssss.............s.s..ssss... [  7%]\r\n..........s.s..ssss.............s.s..ssss............................... [  8%]\r\n..................................ssss............ssss.................. [  8%]\r\n........................................................................ [  8%]\r\n........................................................................ [  9%]\r\n...........s.......s.......s.......s.................................... [  9%]\r\n.......................................................                  [  9%]\r\npandas\\tests\\dtypes\\test_cast.py ....................................... [  9%]\r\n.....................................                                    [  9%]\r\npandas\\tests\\dtypes\\test_common.py ..................................... [  9%]\r\n........................................................................ [ 10%]\r\n........................................................................ [ 10%]\r\n...................................                                      [ 10%]\r\npandas\\tests\\dtypes\\test_concat.py ......................                [ 10%]\r\npandas\\tests\\dtypes\\test_dtypes.py ..................................... [ 10%]\r\n........................................................................ [ 11%]\r\n........................................................................ [ 11%]\r\n..................                                                       [ 11%]\r\npandas\\tests\\dtypes\\test_generic.py ..                                   [ 11%]\r\npandas\\tests\\dtypes\\test_inference.py .................................. [ 11%]\r\n........................................................................ [ 11%]\r\n........................................................................ [ 12%]\r\n.........................................                                [ 12%]\r\npandas\\tests\\dtypes\\test_missing.py .................................... [ 12%]\r\n........                                                                 [ 12%]\r\npandas\\tests\\extension\\test_common.py .............                      [ 12%]\r\npandas\\tests\\extension\\test_external_block.py ....                       [ 12%]\r\npandas\\tests\\extension\\category\\test_categorical.py ..................s. [ 12%]\r\n..............ssss.........ssssssssXX.......................x.........ss [ 12%]\r\n..................ss....                                                 [ 12%]\r\npandas\\tests\\extension\\decimal\\test_decimal.py ......................... [ 13%]\r\n...............................................................XXxx..... [ 13%]\r\n.............                                                            [ 13%]\r\npandas\\tests\\extension\\json\\test_json.py ............................... [ 13%]\r\n.....................................XX..........sss.........X..ss..     [ 13%]\r\npandas\\tests\\frame\\test_alter_axes.py .................................. [ 13%]\r\n....................                                                     [ 13%]\r\npandas\\tests\\frame\\test_analytics.py ................................... [ 14%]\r\n........................................................................ [ 14%]\r\n........................................................................ [ 14%]\r\n........................................................................ [ 14%]\r\n........................................................................ [ 15%]\r\n........................................................................ [ 15%]\r\n                                                                         [ 15%]\r\npandas\\tests\\frame\\test_api.py .....................................     [ 15%]\r\npandas\\tests\\frame\\test_apply.py ....................................... [ 15%]\r\n..................                                                       [ 15%]\r\npandas\\tests\\frame\\test_arithmetic.py ..........................x....... [ 15%]\r\n.......                                                                  [ 16%]\r\npandas\\tests\\frame\\test_asof.py ....                                     [ 16%]\r\npandas\\tests\\frame\\test_axis_select_reindex.py ......................... [ 16%]\r\n........................                                                 [ 16%]\r\npandas\\tests\\frame\\test_block_internals.py ...........................   [ 16%]\r\npandas\\tests\\frame\\test_combine_concat.py ............................   [ 16%]\r\npandas\\tests\\frame\\test_constructors.py ................................ [ 16%]\r\ns....................................................................... [ 16%]\r\n......................                                                   [ 16%]\r\npandas\\tests\\frame\\test_convert_to.py .........................          [ 16%]\r\npandas\\tests\\frame\\test_dtypes.py ...................................... [ 17%]\r\n........................................................................ [ 17%]\r\n......                                                                   [ 17%]\r\npandas\\tests\\frame\\test_indexing.py .................................... [ 17%]\r\n........................................................................ [ 17%]\r\n.............................                                            [ 17%]\r\npandas\\tests\\frame\\test_join.py ..............                           [ 18%]\r\npandas\\tests\\frame\\test_missing.py ..................................... [ 18%]\r\n....                                                                     [ 18%]\r\npandas\\tests\\frame\\test_mutate_columns.py ....s.........                 [ 18%]\r\npandas\\tests\\frame\\test_nonunique_indexes.py ........                    [ 18%]\r\npandas\\tests\\frame\\test_operators.py ................................... [ 18%]\r\n.....................                                                    [ 18%]\r\npandas\\tests\\frame\\test_period.py .....                                  [ 18%]\r\npandas\\tests\\frame\\test_quantile.py ...........                          [ 18%]\r\npandas\\tests\\frame\\test_query_eval.py ........ss..ss..ss................ [ 18%]\r\n..............s..s......sssss...............................s..s.....sss [ 18%]\r\nss.........................ss..ss..........ss..............              [ 19%]\r\npandas\\tests\\frame\\test_rank.py s.s.s.......                             [ 19%]\r\npandas\\tests\\frame\\test_replace.py ..................................... [ 19%]\r\n...............                                                          [ 19%]\r\npandas\\tests\\frame\\test_repr_info.py ..s..s................s......       [ 19%]\r\npandas\\tests\\frame\\test_reshape.py .............................         [ 19%]\r\npandas\\tests\\frame\\test_sort_values_level_as_str.py .................... [ 19%]\r\n.............................................                            [ 19%]\r\npandas\\tests\\frame\\test_sorting.py ....................                  [ 19%]\r\npandas\\tests\\frame\\test_subclass.py ....................                 [ 20%]\r\npandas\\tests\\frame\\test_timeseries.py .................................. [ 20%]\r\n..............                                                           [ 20%]\r\npandas\\tests\\frame\\test_timezones.py ..........                          [ 20%]\r\npandas\\tests\\frame\\test_to_csv.py ........ss...........s................ [ 20%]\r\n.....                                                                    [ 20%]\r\npandas\\tests\\frame\\test_validate.py ............................         [ 20%]\r\npandas\\tests\\generic\\test_frame.py ..................................... [ 20%]\r\n......                                                                   [ 20%]\r\npandas\\tests\\generic\\test_generic.py .............                       [ 20%]\r\npandas\\tests\\generic\\test_label_or_level_utils.py ...................... [ 20%]\r\n.......................                                                  [ 20%]\r\npandas\\tests\\generic\\test_panel.py ....................                  [ 20%]\r\npandas\\tests\\generic\\test_series.py .................................... [ 21%]\r\n.......                                                                  [ 21%]\r\npandas\\tests\\groupby\\test_apply.py ..x........................           [ 21%]\r\npandas\\tests\\groupby\\test_bin_groupby.py .....                           [ 21%]\r\npandas\\tests\\groupby\\test_categorical.py ............................... [ 21%]\r\n                                                                         [ 21%]\r\npandas\\tests\\groupby\\test_counting.py .....................              [ 21%]\r\npandas\\tests\\groupby\\test_filters.py ........................            [ 21%]\r\npandas\\tests\\groupby\\test_function.py .................................. [ 21%]\r\n........................................................................ [ 21%]\r\n........................................................................ [ 22%]\r\n...                                                                      [ 22%]\r\npandas\\tests\\groupby\\test_groupby.py ................................... [ 22%]\r\n....................................................................     [ 22%]\r\npandas\\tests\\groupby\\test_grouping.py .................................. [ 22%]\r\n................                                                         [ 22%]\r\npandas\\tests\\groupby\\test_index_as_string.py ..........................  [ 22%]\r\npandas\\tests\\groupby\\test_nth.py ........                                [ 22%]\r\npandas\\tests\\groupby\\test_rank.py ...................................... [ 23%]\r\n........................................................................ [ 23%]\r\n........................................................................ [ 23%]\r\n........................................................................ [ 23%]\r\n........................................................................ [ 24%]\r\n........................................................................ [ 24%]\r\n..........................                                               [ 24%]\r\npandas\\tests\\groupby\\test_timegrouper.py .........................       [ 24%]\r\npandas\\tests\\groupby\\test_transform.py ................................. [ 24%]\r\n...........x............................................................ [ 25%]\r\n......                                                                   [ 25%]\r\npandas\\tests\\groupby\\test_value_counts.py ssssssssssssssssssssssssssssss [ 25%]\r\nssssssssssssssssss                                                       [ 25%]\r\npandas\\tests\\groupby\\test_whitelist.py ................................. [ 25%]\r\n........................................................................ [ 25%]\r\n........................................................................ [ 25%]\r\n.....                                                                    [ 25%]\r\npandas\\tests\\groupby\\aggregate\\test_aggregate.py ................        [ 26%]\r\npandas\\tests\\groupby\\aggregate\\test_cython.py .......................... [ 26%]\r\n.........................                                                [ 26%]\r\npandas\\tests\\groupby\\aggregate\\test_other.py ..........................X [ 26%]\r\nxx                                                                       [ 26%]\r\npandas\\tests\\indexes\\test_base.py ...................................... [ 26%]\r\n........................................................................ [ 26%]\r\n........................................................................ [ 27%]\r\n........................................................................ [ 27%]\r\n........................................................................ [ 27%]\r\n.................................................s...................... [ 27%]\r\n........................................................................ [ 28%]\r\n........................................................................ [ 28%]\r\n.............................................................x.......... [ 28%]\r\n...............................................................s........ [ 28%]\r\n........................................................................ [ 29%]\r\n.............................ssssss...sss............................... [ 29%]\r\n........................................................................ [ 29%]\r\n........................................................................ [ 30%]\r\n........................................................................ [ 30%]\r\n........................................................................ [ 30%]\r\n........................................................................ [ 30%]\r\n........................................................................ [ 31%]\r\n........................................................................ [ 31%]\r\n...........................................................              [ 31%]\r\npandas\\tests\\indexes\\test_category.py .................................. [ 31%]\r\n........................................................................ [ 32%]\r\n........................................................................ [ 32%]\r\n..............................ss........................................ [ 32%]\r\n........                                                                 [ 32%]\r\npandas\\tests\\indexes\\test_frozen.py ............                         [ 32%]\r\npandas\\tests\\indexes\\test_multi.py ..................................... [ 32%]\r\n........................................................................ [ 33%]\r\n........................................................................ [ 33%]\r\n.......................................s................................ [ 33%]\r\n........................................................................ [ 33%]\r\n...............................s.................                        [ 34%]\r\npandas\\tests\\indexes\\test_numeric.py ................................... [ 34%]\r\n........................................................................ [ 34%]\r\n........................................................................ [ 34%]\r\n........................................................................ [ 35%]\r\n.......................x................................................ [ 35%]\r\n........................................................................ [ 35%]\r\n........................................................................ [ 35%]\r\n........................................................................ [ 36%]\r\n................................................x....................... [ 36%]\r\n........................................................................ [ 36%]\r\n........................................................................ [ 36%]\r\n........................................................................ [ 37%]\r\n........................................................................ [ 37%]\r\n....................x................................................... [ 37%]\r\n.........................................                                [ 37%]\r\npandas\\tests\\indexes\\test_range.py ..................................... [ 38%]\r\n........................................................................ [ 38%]\r\n........................................................................ [ 38%]\r\n........................................x............................... [ 38%]\r\n........................................................................ [ 39%]\r\n....................                                                     [ 39%]\r\npandas\\tests\\indexes\\datetimes\\test_arithmetic.py ...................... [ 39%]\r\n........................................................................ [ 39%]\r\n........................................................................ [ 39%]\r\n........................................................................ [ 40%]\r\n........................................................................ [ 40%]\r\n........................................................................ [ 40%]\r\n........................................................................ [ 41%]\r\n........................................................................ [ 41%]\r\n                                                                         [ 41%]\r\npandas\\tests\\indexes\\datetimes\\test_astype.py .......................    [ 41%]\r\npandas\\tests\\indexes\\datetimes\\test_construction.py .................... [ 41%]\r\n..............................                                           [ 41%]\r\npandas\\tests\\indexes\\datetimes\\test_date_range.py ...s.................. [ 41%]\r\n.........................................................                [ 41%]\r\npandas\\tests\\indexes\\datetimes\\test_datetime.py ........................ [ 41%]\r\n...................                                                      [ 42%]\r\npandas\\tests\\indexes\\datetimes\\test_datetimelike.py .................... [ 42%]\r\n........................................................................ [ 42%]\r\n........................................................................ [ 42%]\r\n........................................................................ [ 42%]\r\n...........                                                              [ 42%]\r\npandas\\tests\\indexes\\datetimes\\test_formats.py ...............           [ 43%]\r\npandas\\tests\\indexes\\datetimes\\test_indexing.py ........................ [ 43%]\r\n.....                                                                    [ 43%]\r\npandas\\tests\\indexes\\datetimes\\test_misc.py .....                        [ 43%]\r\npandas\\tests\\indexes\\datetimes\\test_missing.py ..                        [ 43%]\r\npandas\\tests\\indexes\\datetimes\\test_ops.py ............................. [ 43%]\r\n........................................................................ [ 43%]\r\n.....................                                                    [ 43%]\r\npandas\\tests\\indexes\\datetimes\\test_partial_slicing.py ................. [ 43%]\r\n..............                                                           [ 43%]\r\npandas\\tests\\indexes\\datetimes\\test_scalar_compat.py ................... [ 43%]\r\n...........................................................              [ 44%]\r\npandas\\tests\\indexes\\datetimes\\test_setops.py .......................... [ 44%]\r\n...........s...                                                          [ 44%]\r\npandas\\tests\\indexes\\datetimes\\test_timezones.py ....................... [ 44%]\r\n.........................ssssss......................................... [ 44%]\r\n...........                                                              [ 44%]\r\npandas\\tests\\indexes\\datetimes\\test_tools.py ...................ss...... [ 44%]\r\n.....................s.................................................. [ 45%]\r\n.........................................s.............................. [ 45%]\r\n..............................................                           [ 45%]\r\npandas\\tests\\indexes\\interval\\test_astype.py ........................... [ 45%]\r\n.........x..............................x............................... [ 45%]\r\n...........................................................              [ 46%]\r\npandas\\tests\\indexes\\interval\\test_construction.py ..................... [ 46%]\r\n........................................................................ [ 46%]\r\n........................................................................ [ 46%]\r\n........................................................................ [ 46%]\r\n........................................................................ [ 47%]\r\n........................................................................ [ 47%]\r\n........................................................................ [ 47%]\r\n........................................................................ [ 48%]\r\n........................................................................ [ 48%]\r\n........                                                                 [ 48%]\r\npandas\\tests\\indexes\\interval\\test_interval.py ......................... [ 48%]\r\n........................................................................ [ 48%]\r\n........................................................................ [ 49%]\r\n......................................ss................................ [ 49%]\r\n........................................................................ [ 49%]\r\n.................................................................sss.... [ 49%]\r\n...................                                                      [ 49%]\r\npandas\\tests\\indexes\\interval\\test_interval_new.py sssssssssssssssssssss [ 49%]\r\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]\r\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]\r\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]\r\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]\r\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]\r\nsssssssssssss                                                            [ 51%]\r\npandas\\tests\\indexes\\interval\\test_interval_range.py ................... [ 51%]\r\n........................................................................ [ 51%]\r\n.....................................................                    [ 51%]\r\npandas\\tests\\indexes\\interval\\test_interval_tree.py .................... [ 52%]\r\n....................                                                     [ 52%]\r\npandas\\tests\\indexes\\period\\test_arithmetic.py ......................... [ 52%]\r\nx....................................................................... [ 52%]\r\n...........................                                              [ 52%]\r\npandas\\tests\\indexes\\period\\test_asfreq.py .......                       [ 52%]\r\npandas\\tests\\indexes\\period\\test_astype.py ......                        [ 52%]\r\npandas\\tests\\indexes\\period\\test_construction.py ....................... [ 52%]\r\n.........................................                                [ 52%]\r\npandas\\tests\\indexes\\period\\test_formats.py ......                       [ 52%]\r\npandas\\tests\\indexes\\period\\test_indexing.py ........................... [ 53%]\r\n...                                                                      [ 53%]\r\npandas\\tests\\indexes\\period\\test_ops.py ...................              [ 53%]\r\npandas\\tests\\indexes\\period\\test_partial_slicing.py .......              [ 53%]\r\npandas\\tests\\indexes\\period\\test_period.py ............................. [ 53%]\r\n........................................................................ [ 53%]\r\n........................................................................ [ 53%]\r\n........................................................................ [ 54%]\r\n........                                                                 [ 54%]\r\npandas\\tests\\indexes\\period\\test_period_range.py .......                 [ 54%]\r\npandas\\tests\\indexes\\period\\test_scalar_compat.py ..                     [ 54%]\r\npandas\\tests\\indexes\\period\\test_setops.py ...............               [ 54%]\r\npandas\\tests\\indexes\\period\\test_tools.py .............................. [ 54%]\r\n.................                                                        [ 54%]\r\npandas\\tests\\indexes\\timedeltas\\test_arithmetic.py ..................... [ 54%]\r\n........................................................................ [ 54%]\r\n......................                                                   [ 54%]\r\npandas\\tests\\indexes\\timedeltas\\test_astype.py .......                   [ 54%]\r\npandas\\tests\\indexes\\timedeltas\\test_construction.py ....                [ 54%]\r\npandas\\tests\\indexes\\timedeltas\\test_formats.py .....                    [ 54%]\r\npandas\\tests\\indexes\\timedeltas\\test_indexing.py ...........             [ 54%]\r\npandas\\tests\\indexes\\timedeltas\\test_ops.py ............................ [ 55%]\r\n.......                                                                  [ 55%]\r\npandas\\tests\\indexes\\timedeltas\\test_partial_slicing.py .....            [ 55%]\r\npandas\\tests\\indexes\\timedeltas\\test_scalar_compat.py ..                 [ 55%]\r\npandas\\tests\\indexes\\timedeltas\\test_setops.py ......                    [ 55%]\r\npandas\\tests\\indexes\\timedeltas\\test_timedelta.py ...................... [ 55%]\r\n........................................................................ [ 55%]\r\n........................................................................ [ 55%]\r\n........................................................................ [ 55%]\r\n..                                                                       [ 56%]\r\npandas\\tests\\indexes\\timedeltas\\test_timedelta_range.py .......          [ 56%]\r\npandas\\tests\\indexes\\timedeltas\\test_tools.py ....                       [ 56%]\r\npandas\\tests\\indexing\\test_callable.py ......                            [ 56%]\r\npandas\\tests\\indexing\\test_categorical.py .....................          [ 56%]\r\npandas\\tests\\indexing\\test_chaining_and_caching.py .........             [ 56%]\r\npandas\\tests\\indexing\\test_coercion.py .....x...x........xxxx........... [ 56%]\r\n......x.....................xx....................s.......s...........xx [ 56%]\r\nx....................................................................... [ 56%]\r\n......................ss................ssss.............s.s.s.s.s.s.s.s [ 57%]\r\n.s...................................................................... [ 57%]\r\n..xX.                                                                    [ 57%]\r\npandas\\tests\\indexing\\test_datetime.py ........                          [ 57%]\r\npandas\\tests\\indexing\\test_floats.py ..............                      [ 57%]\r\npandas\\tests\\indexing\\test_iloc.py .................................     [ 57%]\r\npandas\\tests\\indexing\\test_indexing.py ................................. [ 57%]\r\n..........................                                               [ 57%]\r\npandas\\tests\\indexing\\test_indexing_slow.py sss                          [ 57%]\r\npandas\\tests\\indexing\\test_ix.py ............                            [ 57%]\r\npandas\\tests\\indexing\\test_loc.py ...................................... [ 58%]\r\n................................................                         [ 58%]\r\npandas\\tests\\indexing\\test_multiindex.py s...........................    [ 58%]\r\npandas\\tests\\indexing\\test_panel.py .....                                [ 58%]\r\npandas\\tests\\indexing\\test_partial.py ...........                        [ 58%]\r\npandas\\tests\\indexing\\test_scalar.py .......                             [ 58%]\r\npandas\\tests\\indexing\\test_timedelta.py ..............                   [ 58%]\r\npandas\\tests\\indexing\\interval\\test_interval.py ..................       [ 58%]\r\npandas\\tests\\indexing\\interval\\test_interval_new.py ssssss               [ 58%]\r\npandas\\tests\\internals\\test_internals.py ............................... [ 58%]\r\n......................................s.......s.......s.......s..s..ss.s [ 58%]\r\ns.....s.........                                                         [ 59%]\r\npandas\\tests\\io\\test_clipboard.py ......                                 [ 59%]\r\npandas\\tests\\io\\test_common.py ................................s........ [ 59%]\r\n..s........s...........                                                  [ 59%]\r\npandas\\tests\\io\\test_excel.py F..F..F................................... [ 59%]\r\n..................F...........sss...sss................................. [ 59%]\r\nF....................................................................... [ 60%]\r\n........................................................................ [ 60%]\r\n........................................................................ [ 60%]\r\n........................................................................ [ 60%]\r\n..s.s.s.s.s.s.s.s....................................................... [ 61%]\r\n......................................................................x. [ 61%]\r\n...                                                                      [ 61%]\r\npandas\\tests\\io\\test_html.py ....sss.....................sssssssssss.sss [ 61%]\r\ns......ss............s.....s.sss.....................sssssssssss.ssss... [ 61%]\r\n...ss............s...s.s.s......                                         [ 61%]\r\npandas\\tests\\io\\test_packers.py ........................................ [ 62%]\r\n....................                                                     [ 62%]\r\npandas\\tests\\io\\test_parquet.py .sssssssssssssssssssssssssssssssssssssss [ 62%]\r\nssss                                                                     [ 62%]\r\npandas\\tests\\io\\test_pickle.py ......................................... [ 62%]\r\n..............................................ss                         [ 62%]\r\npandas\\tests\\io\\test_pytables.py .....................s................. [ 62%]\r\n..................................s..........s.......................... [ 63%]\r\nx...............s..........F.....................................s..     [ 63%]\r\npandas\\tests\\io\\test_s3.py .                                             [ 63%]\r\npandas\\tests\\io\\test_sql.py ............................................ [ 63%]\r\n........................................................s....sssssssssss [ 63%]\r\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]\r\nsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss... [ 64%]\r\n.............s.....................................s.................s.. [ 64%]\r\n...............s.............ssssssssss                                  [ 64%]\r\npandas\\tests\\io\\test_stata.py .......................................... [ 64%]\r\n........................................................................ [ 65%]\r\n........................................................................ [ 65%]\r\n........................................................................ [ 65%]\r\n....................                                                     [ 65%]\r\npandas\\tests\\io\\formats\\test_css.py .................................... [ 66%]\r\n..........................................                               [ 66%]\r\npandas\\tests\\io\\formats\\test_eng_formatting.py ......                    [ 66%]\r\npandas\\tests\\io\\formats\\test_format.py ................................. [ 66%]\r\n...........s............................................................ [ 66%]\r\n............................................                             [ 66%]\r\npandas\\tests\\io\\formats\\test_printing.py ............                    [ 66%]\r\npandas\\tests\\io\\formats\\test_style.py .................................. [ 66%]\r\n................................                                         [ 67%]\r\npandas\\tests\\io\\formats\\test_to_csv.py ............x                     [ 67%]\r\npandas\\tests\\io\\formats\\test_to_excel.py ............................... [ 67%]\r\n........................................................................ [ 67%]\r\n......................................                                   [ 67%]\r\npandas\\tests\\io\\formats\\test_to_html.py ..............sss............... [ 67%]\r\n.................                                                        [ 67%]\r\npandas\\tests\\io\\formats\\test_to_latex.py ............................... [ 67%]\r\n....                                                                     [ 67%]\r\npandas\\tests\\io\\json\\test_compression.py .......................         [ 68%]\r\npandas\\tests\\io\\json\\test_json_table_schema.py ......................... [ 68%]\r\n...................................................................x...x [ 68%]\r\n...x...x...x.xxxx..x...x.............                                    [ 68%]\r\npandas\\tests\\io\\json\\test_normalize.py ................                  [ 68%]\r\npandas\\tests\\io\\json\\test_pandas.py ................................ss.. [ 68%]\r\n...............s.................                                        [ 68%]\r\npandas\\tests\\io\\json\\test_readlines.py ..................                [ 68%]\r\npandas\\tests\\io\\json\\test_ujson.py ..................................... [ 69%]\r\n...............................s........................................ [ 69%]\r\n..........................                                               [ 69%]\r\npandas\\tests\\io\\msgpack\\test_buffer.py ..                                [ 69%]\r\npandas\\tests\\io\\msgpack\\test_case.py .............                       [ 69%]\r\npandas\\tests\\io\\msgpack\\test_except.py ...                               [ 69%]\r\npandas\\tests\\io\\msgpack\\test_extension.py ...                            [ 69%]\r\npandas\\tests\\io\\msgpack\\test_format.py ..........                        [ 69%]\r\npandas\\tests\\io\\msgpack\\test_limits.py ........                          [ 69%]\r\npandas\\tests\\io\\msgpack\\test_newspec.py .....                            [ 69%]\r\npandas\\tests\\io\\msgpack\\test_obj.py ........                             [ 69%]\r\npandas\\tests\\io\\msgpack\\test_pack.py ................                    [ 69%]\r\npandas\\tests\\io\\msgpack\\test_read_size.py ......                         [ 69%]\r\npandas\\tests\\io\\msgpack\\test_seq.py .                                    [ 69%]\r\npandas\\tests\\io\\msgpack\\test_sequnpack.py ......                         [ 69%]\r\npandas\\tests\\io\\msgpack\\test_subtype.py .                                [ 69%]\r\npandas\\tests\\io\\msgpack\\test_unpack.py ...                               [ 69%]\r\npandas\\tests\\io\\msgpack\\test_unpack_raw.py ..                            [ 69%]\r\npandas\\tests\\io\\parser\\test_network.py ssssssssssssssss............      [ 69%]\r\npandas\\tests\\io\\parser\\test_parsers.py ......................s.......... [ 70%]\r\n............................ss...................................s...... [ 70%]\r\n..............................s......................................... [ 70%]\r\n.....................................s.................................. [ 70%]\r\n.......................s............................s................... [ 71%]\r\n...................ss...................................s............... [ 71%]\r\n.....................s.................................................. [ 71%]\r\n............................s........................................... [ 71%]\r\n..............s............................................ss........... [ 72%]\r\n........................s....................................s.......... [ 72%]\r\n....................................................................s... [ 72%]\r\n...................................................................s.... [ 73%]\r\n...                                                                      [ 73%]\r\npandas\\tests\\io\\parser\\test_read_fwf.py ........................         [ 73%]\r\npandas\\tests\\io\\parser\\test_textreader.py .......................        [ 73%]\r\npandas\\tests\\io\\parser\\test_unsupported.py ..........                    [ 73%]\r\npandas\\tests\\io\\sas\\test_sas.py .                                        [ 73%]\r\npandas\\tests\\io\\sas\\test_sas7bdat.py .............                       [ 73%]\r\npandas\\tests\\io\\sas\\test_xport.py ......                                 [ 73%]\r\npandas\\tests\\plotting\\test_boxplot_method.py sssssss.sssssss.            [ 73%]\r\npandas\\tests\\plotting\\test_converter.py .....................            [ 73%]\r\npandas\\tests\\plotting\\test_datetimelike.py s.s...s.s.ssssss.ssss..s..s.s [ 73%]\r\nss.ss.ssssssss.s.s.ss...sssssssss.sssssss.....sx                         [ 73%]\r\npandas\\tests\\plotting\\test_deprecated.py ssss                            [ 73%]\r\npandas\\tests\\plotting\\test_frame.py s......sssss...ss.xsss..s.....s.ssss [ 73%]\r\nssssss.ssssssssssssssssss.sssssssssss....s...........ssssss.ssss.X.ss.ss [ 74%]\r\ns.......                                                                 [ 74%]\r\npandas\\tests\\plotting\\test_groupby.py .....                              [ 74%]\r\npandas\\tests\\plotting\\test_hist_method.py sssssssssssssssss              [ 74%]\r\npandas\\tests\\plotting\\test_misc.py ssssXssXss.                           [ 74%]\r\npandas\\tests\\plotting\\test_series.py ss......ss....s.sssssssssssssssssss [ 74%]\r\n..ssXsss.....                                                            [ 74%]\r\npandas\\tests\\reshape\\test_concat.py .................................... [ 74%]\r\n........................................................................ [ 74%]\r\n........................................................................ [ 75%]\r\n..........................                                               [ 75%]\r\npandas\\tests\\reshape\\test_melt.py ................................       [ 75%]\r\npandas\\tests\\reshape\\test_pivot.py ...........................x...x..... [ 75%]\r\n...........xxxxxx..................................                      [ 75%]\r\npandas\\tests\\reshape\\test_reshape.py ............................xxxxx.. [ 75%]\r\n........................................................................ [ 76%]\r\n..........                                                               [ 76%]\r\npandas\\tests\\reshape\\test_tile.py ...................................... [ 76%]\r\n...................                                                      [ 76%]\r\npandas\\tests\\reshape\\test_union_categoricals.py ..........               [ 76%]\r\npandas\\tests\\reshape\\test_util.py ....                                   [ 76%]\r\npandas\\tests\\reshape\\merge\\test_join.py ................................ [ 76%]\r\n..........                                                               [ 76%]\r\npandas\\tests\\reshape\\merge\\test_merge.py ............................... [ 76%]\r\n........................................................................ [ 77%]\r\n.............................................                            [ 77%]\r\npandas\\tests\\reshape\\merge\\test_merge_asof.py .......................... [ 77%]\r\n...................                                                      [ 77%]\r\npandas\\tests\\reshape\\merge\\test_merge_index_as_string.py ............... [ 77%]\r\n..................................................................       [ 77%]\r\npandas\\tests\\reshape\\merge\\test_merge_ordered.py ......                  [ 77%]\r\npandas\\tests\\scalar\\test_nat.py ......................                   [ 77%]\r\npandas\\tests\\scalar\\interval\\test_interval.py .......................... [ 77%]\r\n..................                                                       [ 78%]\r\npandas\\tests\\scalar\\period\\test_asfreq.py .......x..............         [ 78%]\r\npandas\\tests\\scalar\\period\\test_period.py .............................. [ 78%]\r\n........................................................................ [ 78%]\r\n.............................................................X           [ 78%]\r\npandas\\tests\\scalar\\timedelta\\test_arithmetic.py ....................... [ 78%]\r\n...................................................                      [ 78%]\r\npandas\\tests\\scalar\\timedelta\\test_construction.py ..................... [ 79%]\r\n......................................................                   [ 79%]\r\npandas\\tests\\scalar\\timedelta\\test_formats.py ..........                 [ 79%]\r\npandas\\tests\\scalar\\timedelta\\test_timedelta.py ........................ [ 79%]\r\n...                                                                      [ 79%]\r\npandas\\tests\\scalar\\timestamp\\test_arithmetic.py .....                   [ 79%]\r\npandas\\tests\\scalar\\timestamp\\test_comparisons.py ........               [ 79%]\r\npandas\\tests\\scalar\\timestamp\\test_rendering.py ........................ [ 79%]\r\n...........................                                              [ 79%]\r\npandas\\tests\\scalar\\timestamp\\test_timestamp.py ........................ [ 79%]\r\n..........................................s.                             [ 79%]\r\npandas\\tests\\scalar\\timestamp\\test_timezones.py ........................ [ 80%]\r\n.......................s...........                                      [ 80%]\r\npandas\\tests\\scalar\\timestamp\\test_unary_ops.py ........................ [ 80%]\r\n.................s..s                                                    [ 80%]\r\npandas\\tests\\series\\test_alter_axes.py .................                 [ 80%]\r\npandas\\tests\\series\\test_analytics.py .................................. [ 80%]\r\n..s..................................................................... [ 80%]\r\n...............................x.....x..                                 [ 80%]\r\npandas\\tests\\series\\test_api.py ........................................ [ 81%]\r\n........................                                                 [ 81%]\r\npandas\\tests\\series\\test_apply.py ...................................... [ 81%]\r\n........                                                                 [ 81%]\r\npandas\\tests\\series\\test_arithmetic.py ................................. [ 81%]\r\n......................................................................x. [ 81%]\r\nx........................xxxxxxxXXX..................................... [ 82%]\r\n...............................................XXXXXXXXXX............... [ 82%]\r\n.XX............                                                          [ 82%]\r\npandas\\tests\\series\\test_asof.py ......                                  [ 82%]\r\npandas\\tests\\series\\test_combine_concat.py ............                  [ 82%]\r\npandas\\tests\\series\\test_constructors.py ............................... [ 82%]\r\n........................................................................ [ 82%]\r\n...............................                                          [ 82%]\r\npandas\\tests\\series\\test_datetime_values.py ..........                   [ 82%]\r\npandas\\tests\\series\\test_dtypes.py ..................................... [ 83%]\r\n...................................                                      [ 83%]\r\npandas\\tests\\series\\test_internals.py .......                            [ 83%]\r\npandas\\tests\\series\\test_io.py ...................                       [ 83%]\r\npandas\\tests\\series\\test_missing.py .................................... [ 83%]\r\n.................................................                        [ 83%]\r\npandas\\tests\\series\\test_operators.py .................................. [ 83%]\r\n........................................................................ [ 84%]\r\n....................ssss................................................ [ 84%]\r\n.......                                                                  [ 84%]\r\npandas\\tests\\series\\test_period.py ..............                        [ 84%]\r\npandas\\tests\\series\\test_quantile.py .........                           [ 84%]\r\npandas\\tests\\series\\test_rank.py s.....x................................ [ 84%]\r\n.s...................................................................... [ 84%]\r\n.............................................................            [ 85%]\r\npandas\\tests\\series\\test_replace.py .............                        [ 85%]\r\npandas\\tests\\series\\test_repr.py .....................                   [ 85%]\r\npandas\\tests\\series\\test_sorting.py .........                            [ 85%]\r\npandas\\tests\\series\\test_subclass.py ......                              [ 85%]\r\npandas\\tests\\series\\test_timeseries.py ................................. [ 85%]\r\n...................                                                      [ 85%]\r\npandas\\tests\\series\\test_timezones.py ......................             [ 85%]\r\npandas\\tests\\series\\test_validate.py ........................            [ 85%]\r\npandas\\tests\\series\\indexing\\test_alter_index.py ....................... [ 85%]\r\n........................................................................ [ 86%]\r\n....................                                                     [ 86%]\r\npandas\\tests\\series\\indexing\\test_boolean.py ........................... [ 86%]\r\n........................................................................ [ 86%]\r\n........................................................................ [ 86%]\r\n                                                                         [ 86%]\r\npandas\\tests\\series\\indexing\\test_callable.py ...                        [ 86%]\r\npandas\\tests\\series\\indexing\\test_datetime.py .....s.................... [ 86%]\r\n..................                                                       [ 86%]\r\npandas\\tests\\series\\indexing\\test_iloc.py ..                             [ 86%]\r\npandas\\tests\\series\\indexing\\test_indexing.py .......................... [ 87%]\r\n....................                                                     [ 87%]\r\npandas\\tests\\series\\indexing\\test_loc.py .......                         [ 87%]\r\npandas\\tests\\series\\indexing\\test_numeric.py ..............              [ 87%]\r\npandas\\tests\\sparse\\test_arithmetics.py ...........................      [ 87%]\r\npandas\\tests\\sparse\\test_array.py ...................................... [ 87%]\r\n....................                                                     [ 87%]\r\npandas\\tests\\sparse\\test_combine_concat.py ............................. [ 87%]\r\n...............                                                          [ 87%]\r\npandas\\tests\\sparse\\test_format.py ......                                [ 87%]\r\npandas\\tests\\sparse\\test_groupby.py ..                                   [ 87%]\r\npandas\\tests\\sparse\\test_indexing.py ................................... [ 87%]\r\n.............................................                            [ 88%]\r\npandas\\tests\\sparse\\test_libsparse.py ..s.......................         [ 88%]\r\npandas\\tests\\sparse\\test_pivot.py ..                                     [ 88%]\r\npandas\\tests\\sparse\\test_reshape.py ...                                  [ 88%]\r\npandas\\tests\\sparse\\frame\\test_analytics.py xx                           [ 88%]\r\npandas\\tests\\sparse\\frame\\test_apply.py .....                            [ 88%]\r\npandas\\tests\\sparse\\frame\\test_frame.py ................x............... [ 88%]\r\n................................................................x....... [ 88%]\r\nxx.                                                                      [ 88%]\r\npandas\\tests\\sparse\\frame\\test_indexing.py ssssssssssssssssssss          [ 88%]\r\npandas\\tests\\sparse\\frame\\test_to_csv.py ....                            [ 88%]\r\npandas\\tests\\sparse\\frame\\test_to_from_scipy.py ........................ [ 88%]\r\n........................................................................ [ 89%]\r\n........................................................................ [ 89%]\r\n........................................................................ [ 89%]\r\n........................................................................ [ 89%]\r\n.......................................sss.................              [ 90%]\r\npandas\\tests\\sparse\\series\\test_indexing.py ssssssssssssssssssss         [ 90%]\r\npandas\\tests\\sparse\\series\\test_series.py .............................. [ 90%]\r\n..................s..................................................... [ 90%]\r\n                                                                         [ 90%]\r\npandas\\tests\\tools\\test_numeric.py .....................                 [ 90%]\r\npandas\\tests\\tseries\\test_frequencies.py ............................... [ 90%]\r\n.....................                                                    [ 90%]\r\npandas\\tests\\tseries\\test_holiday.py ..........................          [ 90%]\r\npandas\\tests\\tseries\\offsets\\test_fiscal.py ............................ [ 91%]\r\n........................................................................ [ 91%]\r\n..................................................................       [ 91%]\r\npandas\\tests\\tseries\\offsets\\test_offsets.py ........................... [ 91%]\r\n........................................................................ [ 91%]\r\n........................................................................ [ 92%]\r\n........................................................................ [ 92%]\r\n........................................................................ [ 92%]\r\n........................................................................ [ 93%]\r\n........................................................................ [ 93%]\r\n.......................................F................................ [ 93%]\r\n........................................................................ [ 93%]\r\n....F................................................................... [ 94%]\r\n........................................................................ [ 94%]\r\n........................................................................ [ 94%]\r\n........................................................................ [ 95%]\r\n........................................................................ [ 95%]\r\n........................................................................ [ 95%]\r\n........................................................................ [ 95%]\r\n........................................................................ [ 96%]\r\n..............                                                           [ 96%]\r\npandas\\tests\\tseries\\offsets\\test_ticks.py ............................. [ 96%]\r\n...............................................                          [ 96%]\r\npandas\\tests\\tseries\\offsets\\test_yqm_offsets.py ....................... [ 96%]\r\n........................................................................ [ 96%]\r\n........................................................................ [ 97%]\r\n........................................................................ [ 97%]\r\n...........................................                              [ 97%]\r\npandas\\tests\\tslibs\\test_array_to_datetime.py .......................... [ 97%]\r\n............                                                             [ 97%]\r\npandas\\tests\\tslibs\\test_ccalendar.py .                                  [ 97%]\r\npandas\\tests\\tslibs\\test_conversion.py ..............                    [ 97%]\r\npandas\\tests\\tslibs\\test_libfrequencies.py ...                           [ 97%]\r\npandas\\tests\\tslibs\\test_liboffsets.py .......                           [ 97%]\r\npandas\\tests\\tslibs\\test_parsing.py ......ssssss.............            [ 97%]\r\npandas\\tests\\tslibs\\test_period_asfreq.py ....                           [ 97%]\r\npandas\\tests\\tslibs\\test_timezones.py .................................. [ 98%]\r\n........................................................................ [ 98%]\r\n........................................................................ [ 98%]\r\n........................................................................ [ 98%]\r\n........................................................................ [ 99%]\r\n........................................................................ [ 99%]\r\n................................................                         [ 99%]\r\npandas\\tests\\util\\test_hashing.py ......................                 [ 99%]\r\npandas\\tests\\util\\test_testing.py .....................................s [ 99%]\r\n.s...................s                                                   [ 99%]\r\npandas\\tests\\util\\test_util.py .........................s.sss..          [100%]\r\n\r\n================================== FAILURES ===================================\r\n________________________ TestDtype_object.test_dtypes _________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_object object at 0x0000015F07592C50>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n_________________________ TestDtype_int8.test_dtypes __________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_int8 object at 0x0000015F0631B0B8>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n_________________________ TestDtype_int16.test_dtypes _________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_int16 object at 0x0000015F022653C8>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n_________________________ TestDtype_int32.test_dtypes _________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_int32 object at 0x0000015F02718160>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n_________________________ TestDtype_int64.test_dtypes _________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_int64 object at 0x0000015F07FB4E10>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n_________________________ TestDtype_uint8.test_dtypes _________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_uint8 object at 0x0000015F06324160>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestDtype_uint16.test_dtypes _________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_uint16 object at 0x0000015F06399A20>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestDtype_uint32.test_dtypes _________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_uint32 object at 0x0000015F075B75C0>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestDtype_uint64.test_dtypes _________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_uint64 object at 0x0000015F03675160>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestDtype_float16.test_dtypes ________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_float16 object at 0x0000015F7B1EE5F8>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestDtype_float32.test_dtypes ________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_float32 object at 0x0000015F07AE50B8>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestDtype_float64.test_dtypes ________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_float64 object at 0x0000015F04110F98>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n_______________________ TestDtype_category.test_dtypes ________________________\r\n\r\nself = <pandas.tests.test_window.TestDtype_category object at 0x0000015F01B07AC8>\r\n\r\n    def test_dtypes(self):\r\n        self._create_data()\r\n        for f_name, d_name in product(self.funcs.keys(), self.data.keys()):\r\n\r\n            f = self.funcs[f_name]\r\n            d = self.data[d_name]\r\n            exp = self.expects[d_name][f_name]\r\n>           self.check_dtypes(f, f_name, d, d_name, exp)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:772:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:777: in check_dtypes\r\n    tm.assert_almost_equal(result, exp)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:241: in assert_almost_equal\r\n    **kwargs)\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (80.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]'\r\nright = '[nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (80.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [nan, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestMoments.test_rolling_std _________________________\r\n\r\nself = <pandas.tests.test_window.TestMoments object at 0x0000015F0266A240>\r\n\r\n    def test_rolling_std(self):\r\n        self._check_moment_func(lambda x: np.std(x, ddof=1),\r\n>                               name='std')\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:1307:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:1370: in _check_moment_func\r\n    static_comp(self.series[-50:]))\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:269: in assert_almost_equal\r\n    **kwargs)\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   ???\r\nE   AssertionError: expected 1.11175 but got nan, with decimal 5\r\n\r\npandas\\_libs\\testing.pyx:209: AssertionError\r\n______________________ TestMoments.test_rolling_std_1obs ______________________\r\n\r\nself = <pandas.tests.test_window.TestMoments object at 0x0000015F01366A20>\r\n\r\n    def test_rolling_std_1obs(self):\r\n        vals = pd.Series([1., 2., 3., 4., 5.])\r\n\r\n        result = vals.rolling(1, min_periods=1).std()\r\n        expected = pd.Series([np.nan] * 5)\r\n        tm.assert_series_equal(result, expected)\r\n\r\n        result = vals.rolling(1, min_periods=1).std(ddof=0)\r\n        expected = pd.Series([0.] * 5)\r\n>       tm.assert_series_equal(result, expected)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:1320:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (100.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]', right = '[0.0, 0.0, 0.0, 0.0, 0.0]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (100.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [0.0, 0.0, 0.0, 0.0, 0.0]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n____________________ TestMoments.test_rolling_std_neg_sqrt ____________________\r\n\r\nself = <pandas.tests.test_window.TestMoments object at 0x0000015F0135C198>\r\n\r\n    def test_rolling_std_neg_sqrt(self):\r\n        # unit test from Bottleneck\r\n\r\n        # Test move_nanstd for neg sqrt.\r\n\r\n        a = pd.Series([0.0011448196318903589, 0.00028718669878572767,\r\n                       0.00028718669878572767, 0.00028718669878572767,\r\n                       0.00028718669878572767])\r\n        b = a.rolling(window=3).std()\r\n>       assert np.isfinite(b[2:]).all()\r\nE       AssertionError: assert False\r\nE        +  where False = <bound method Series.all of 2    False\\n3    False\\n4    False\\ndtype: bool>()\r\nE        +    where <bound method Series.all of 2    False\\n3    False\\n4    False\\ndtype: bool> = 2    False\\n3    False\\n4    False\\ndtype: bool.all\r\nE        +      where 2    False\\n3    False\\n4    False\\ndtype: bool = <ufunc 'isfinite'>(2   NaN\\n3   NaN\\n4   NaN\\ndtype: float64)\r\nE        +        where <ufunc 'isfinite'> = np.isfinite\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:1335: AssertionError\r\n________________________ TestMoments.test_rolling_var _________________________\r\n\r\nself = <pandas.tests.test_window.TestMoments object at 0x0000015F0266A630>\r\n\r\n    def test_rolling_var(self):\r\n        self._check_moment_func(lambda x: np.var(x, ddof=1),\r\n>                               name='var')\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:1342:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:1370: in _check_moment_func\r\n    static_comp(self.series[-50:]))\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:269: in assert_almost_equal\r\n    **kwargs)\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   ???\r\nE   AssertionError: expected 0.72512 but got nan, with decimal 5\r\n\r\npandas\\_libs\\testing.pyx:209: AssertionError\r\n__________________ TestMomentsConsistency.test_rolling_corr ___________________\r\n\r\nself = <pandas.tests.test_window.TestMomentsConsistency object at 0x0000015F6AC25FD0>\r\n\r\n    def test_rolling_corr(self):\r\n        A = self.series\r\n        B = A + randn(len(A))\r\n\r\n        result = A.rolling(window=50, min_periods=25).corr(B)\r\n>       tm.assert_almost_equal(result[-1], np.corrcoef(A[-50:], B[-50:])[0, 1])\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:2402:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:269: in assert_almost_equal\r\n    **kwargs)\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   ???\r\nE   AssertionError: expected 0.49155 but got nan, with decimal 5\r\n\r\npandas\\_libs\\testing.pyx:209: AssertionError\r\n____________ TestMomentsConsistency.test_expanding_corr_diff_index ____________\r\n\r\nself = <pandas.tests.test_window.TestMomentsConsistency object at 0x0000015F01CDEEB8>\r\n\r\n    def test_expanding_corr_diff_index(self):\r\n        # GH 7512\r\n        s1 = Series([1, 2, 3], index=[0, 1, 2])\r\n        s2 = Series([1, 3], index=[0, 2])\r\n        result = s1.expanding().corr(s2)\r\n        expected = Series([None, None, 1.0])\r\n>       tm.assert_series_equal(result, expected)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:2615:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (33.33333 %)'\r\nleft = '[nan, nan, nan]', right = '[nan, nan, 1.0]', diff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (33.33333 %)\r\nE       [left]:  [nan, nan, nan]\r\nE       [right]: [nan, nan, 1.0]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n____________ TestMomentsConsistency.test_rolling_corr_diff_length _____________\r\n\r\nself = <pandas.tests.test_window.TestMomentsConsistency object at 0x0000015F01CD5CF8>\r\n\r\n    def test_rolling_corr_diff_length(self):\r\n        # GH 7512\r\n        s1 = Series([1, 2, 3], index=[0, 1, 2])\r\n        s2 = Series([1, 3], index=[0, 2])\r\n        result = s1.rolling(window=3, min_periods=2).corr(s2)\r\n        expected = Series([None, None, 1.0])\r\n>       tm.assert_series_equal(result, expected)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:2645:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series values are different (33.33333 %)'\r\nleft = '[nan, nan, nan]', right = '[nan, nan, 1.0]', diff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series values are different (33.33333 %)\r\nE       [left]:  [nan, nan, nan]\r\nE       [right]: [nan, nan, 1.0]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n_______ TestMomentsConsistency.test_expanding_corr_pairwise_diff_length _______\r\n\r\nself = <pandas.tests.test_window.TestMomentsConsistency object at 0x0000015F0266BD30>\r\n\r\n    def test_expanding_corr_pairwise_diff_length(self):\r\n        # GH 7512\r\n        df1 = DataFrame([[1, 2], [3, 2], [3, 4]],\r\n                        columns=['A', 'B'],\r\n                        index=Index(range(3), name='bar'))\r\n        df1a = DataFrame([[1, 2], [3, 4]],\r\n                         index=Index([0, 2], name='bar'),\r\n                         columns=['A', 'B'])\r\n        df2 = DataFrame([[5, 6], [None, None], [2, 1]],\r\n                        columns=['X', 'Y'],\r\n                        index=Index(range(3), name='bar'))\r\n        df2a = DataFrame([[5, 6], [2, 1]],\r\n                         index=Index([0, 2], name='bar'),\r\n                         columns=['X', 'Y'])\r\n        result1 = df1.expanding().corr(df2, pairwise=True).loc[2]\r\n        result2 = df1.expanding().corr(df2a, pairwise=True).loc[2]\r\n        result3 = df1a.expanding().corr(df2, pairwise=True).loc[2]\r\n        result4 = df1a.expanding().corr(df2a, pairwise=True).loc[2]\r\n        expected = DataFrame([[-1.0, -1.0], [-1.0, -1.0]],\r\n                             columns=['A', 'B'],\r\n                             index=Index(['X', 'Y']))\r\n>       tm.assert_frame_equal(result1, expected)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:2859:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1348: in assert_frame_equal\r\n    obj='DataFrame.iloc[:, {idx}]'.format(idx=i))\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'DataFrame.iloc[:, 0]'\r\nmessage = 'DataFrame.iloc[:, 0] values are different (100.0 %)'\r\nleft = '[nan, nan]', right = '[-1.0, -1.0]', diff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: DataFrame.iloc[:, 0] are different\r\nE\r\nE       DataFrame.iloc[:, 0] values are different (100.0 %)\r\nE       [left]:  [nan, nan]\r\nE       [right]: [-1.0, -1.0]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestRollingTS.test_ragged_std ________________________\r\n\r\nself = <pandas.tests.test_window.TestRollingTS object at 0x0000015F001B7F98>\r\n\r\n    def test_ragged_std(self):\r\n\r\n        df = self.ragged\r\n        result = df.rolling(window='1s', min_periods=1).std(ddof=0)\r\n        expected = df.copy()\r\n        expected['B'] = [0.0] * 5\r\n>       tm.assert_frame_equal(result, expected)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:3607:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1348: in assert_frame_equal\r\n    obj='DataFrame.iloc[:, {idx}]'.format(idx=i))\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'DataFrame.iloc[:, 0]'\r\nmessage = 'DataFrame.iloc[:, 0] values are different (100.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]', right = '[0.0, 0.0, 0.0, 0.0, 0.0]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: DataFrame.iloc[:, 0] are different\r\nE\r\nE       DataFrame.iloc[:, 0] values are different (100.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [0.0, 0.0, 0.0, 0.0, 0.0]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n________________________ TestRollingTS.test_ragged_var ________________________\r\n\r\nself = <pandas.tests.test_window.TestRollingTS object at 0x0000015F08AFE198>\r\n\r\n    def test_ragged_var(self):\r\n\r\n        df = self.ragged\r\n        result = df.rolling(window='1s', min_periods=1).var(ddof=0)\r\n        expected = df.copy()\r\n        expected['B'] = [0.0] * 5\r\n>       tm.assert_frame_equal(result, expected)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\test_window.py:3630:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1348: in assert_frame_equal\r\n    obj='DataFrame.iloc[:, {idx}]'.format(idx=i))\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1227: in assert_series_equal\r\n    obj='{obj}'.format(obj=obj))\r\npandas\\_libs\\testing.pyx:59: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\npandas\\_libs\\testing.pyx:173: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'DataFrame.iloc[:, 0]'\r\nmessage = 'DataFrame.iloc[:, 0] values are different (100.0 %)'\r\nleft = '[nan, nan, nan, nan, nan]', right = '[0.0, 0.0, 0.0, 0.0, 0.0]'\r\ndiff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: DataFrame.iloc[:, 0] are different\r\nE\r\nE       DataFrame.iloc[:, 0] values are different (100.0 %)\r\nE       [left]:  [nan, nan, nan, nan, nan]\r\nE       [right]: [0.0, 0.0, 0.0, 0.0, 0.0]\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n____________________ TestXlrdReader.test_usecols_int[.xls] ____________________\r\n\r\nself = <pandas.tests.io.test_excel.TestXlrdReader object at 0x0000015F07A59748>\r\next = '.xls'\r\n\r\n    def test_usecols_int(self, ext):\r\n\r\n        dfref = self.get_csv_refdf('test1')\r\n        dfref = dfref.reindex(columns=['A', 'B', 'C'])\r\n        df1 = self.get_exceldf('test1', ext, 'Sheet1', index_col=0, usecols=3)\r\n        df2 = self.get_exceldf('test1', ext, 'Sheet2', skiprows=[1],\r\n                               index_col=0, usecols=3)\r\n\r\n        with tm.assert_produces_warning(FutureWarning):\r\n            df3 = self.get_exceldf('test1', ext, 'Sheet2', skiprows=[1],\r\n>                                  index_col=0, parse_cols=3)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\io\\test_excel.py:120:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\contextlib.py:119: in __exit__\r\n    next(self.gen)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nexpected_warning = <class 'FutureWarning'>, filter_level = 'always'\r\nclear = None, check_stacklevel = True\r\n\r\n    @contextmanager\r\n    def assert_produces_warning(expected_warning=Warning, filter_level=\"always\",\r\n                                clear=None, check_stacklevel=True):\r\n        \"\"\"\r\n        Context manager for running code expected to either raise a specific\r\n        warning, or not raise any warnings. Verifies that the code raises the\r\n        expected warning, and that it does not raise any other unexpected\r\n        warnings. It is basically a wrapper around ``warnings.catch_warnings``.\r\n\r\n        Parameters\r\n        ----------\r\n        expected_warning : {Warning, False, None}, default Warning\r\n            The type of Exception raised. ``exception.Warning`` is the base\r\n            class for all warnings. To check that no warning is returned,\r\n            specify ``False`` or ``None``.\r\n        filter_level : str, default \"always\"\r\n            Specifies whether warnings are ignored, displayed, or turned\r\n            into errors.\r\n            Valid values are:\r\n\r\n            * \"error\" - turns matching warnings into exceptions\r\n            * \"ignore\" - discard the warning\r\n            * \"always\" - always emit a warning\r\n            * \"default\" - print the warning the first time it is generated\r\n              from each location\r\n            * \"module\" - print the warning the first time it is generated\r\n              from each module\r\n            * \"once\" - print the warning the first time it is generated\r\n\r\n        clear : str, default None\r\n            If not ``None`` then remove any previously raised warnings from\r\n            the ``__warningsregistry__`` to ensure that no warning messages are\r\n            suppressed by this context manager. If ``None`` is specified,\r\n            the ``__warningsregistry__`` keeps track of which warnings have been\r\n             shown, and does not show them again.\r\n        check_stacklevel : bool, default True\r\n            If True, displays the line that called the function containing\r\n            the warning to show were the function is called. Otherwise, the\r\n            line that implements the function is displayed.\r\n\r\n        Examples\r\n        --------\r\n        >>> import warnings\r\n        >>> with assert_produces_warning():\r\n        ...     warnings.warn(UserWarning())\r\n        ...\r\n        >>> with assert_produces_warning(False):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        ...\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\r\n        >>> with assert_produces_warning(UserWarning):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Did not see expected warning of class 'UserWarning'.\r\n\r\n        ..warn:: This is *not* thread-safe.\r\n        \"\"\"\r\n        with warnings.catch_warnings(record=True) as w:\r\n\r\n            if clear is not None:\r\n                # make sure that we are clearning these warnings\r\n                # if they have happened before\r\n                # to guarantee that we will catch them\r\n                if not is_list_like(clear):\r\n                    clear = [clear]\r\n                for m in clear:\r\n                    try:\r\n                        m.__warningregistry__.clear()\r\n                    except Exception:\r\n                        pass\r\n\r\n            saw_warning = False\r\n            warnings.simplefilter(filter_level)\r\n            yield w\r\n            extra_warnings = []\r\n\r\n            for actual_warning in w:\r\n                if (expected_warning and issubclass(actual_warning.category,\r\n                                                    expected_warning)):\r\n                    saw_warning = True\r\n\r\n                    if check_stacklevel and issubclass(actual_warning.category,\r\n                                                       (FutureWarning,\r\n                                                        DeprecationWarning)):\r\n                        from inspect import getframeinfo, stack\r\n                        caller = getframeinfo(stack()[2][0])\r\n                        msg = (\"Warning not set with correct stacklevel. \"\r\n                               \"File where warning is raised: {actual} != \"\r\n                               \"{caller}. Warning message: {message}\"\r\n                               ).format(actual=actual_warning.filename,\r\n                                        caller=caller.filename,\r\n                                        message=actual_warning.message)\r\n                        assert actual_warning.filename == caller.filename, msg\r\n                else:\r\n                    extra_warnings.append(actual_warning.category.__name__)\r\n            if expected_warning:\r\n                msg = \"Did not see expected warning of class {name!r}.\".format(\r\n                    name=expected_warning.__name__)\r\n                assert saw_warning, msg\r\n            assert not extra_warnings, (\"Caused unexpected warning(s): {extra!r}.\"\r\n>                                       ).format(extra=extra_warnings)\r\nE           AssertionError: Caused unexpected warning(s): ['DeprecationWarning', 'DeprecationWarning', 'DeprecationWarning'].\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:2540: AssertionError\r\n___________________ TestXlrdReader.test_usecols_list[.xls] ____________________\r\n\r\nself = <pandas.tests.io.test_excel.TestXlrdReader object at 0x0000015F0762C860>\r\next = '.xls'\r\n\r\n    def test_usecols_list(self, ext):\r\n\r\n        dfref = self.get_csv_refdf('test1')\r\n        dfref = dfref.reindex(columns=['B', 'C'])\r\n        df1 = self.get_exceldf('test1', ext, 'Sheet1', index_col=0,\r\n                               usecols=[0, 2, 3])\r\n        df2 = self.get_exceldf('test1', ext, 'Sheet2', skiprows=[1],\r\n                               index_col=0, usecols=[0, 2, 3])\r\n\r\n        with tm.assert_produces_warning(FutureWarning):\r\n            df3 = self.get_exceldf('test1', ext, 'Sheet2', skiprows=[1],\r\n>                                  index_col=0, parse_cols=[0, 2, 3])\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\io\\test_excel.py:138:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\contextlib.py:119: in __exit__\r\n    next(self.gen)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nexpected_warning = <class 'FutureWarning'>, filter_level = 'always'\r\nclear = None, check_stacklevel = True\r\n\r\n    @contextmanager\r\n    def assert_produces_warning(expected_warning=Warning, filter_level=\"always\",\r\n                                clear=None, check_stacklevel=True):\r\n        \"\"\"\r\n        Context manager for running code expected to either raise a specific\r\n        warning, or not raise any warnings. Verifies that the code raises the\r\n        expected warning, and that it does not raise any other unexpected\r\n        warnings. It is basically a wrapper around ``warnings.catch_warnings``.\r\n\r\n        Parameters\r\n        ----------\r\n        expected_warning : {Warning, False, None}, default Warning\r\n            The type of Exception raised. ``exception.Warning`` is the base\r\n            class for all warnings. To check that no warning is returned,\r\n            specify ``False`` or ``None``.\r\n        filter_level : str, default \"always\"\r\n            Specifies whether warnings are ignored, displayed, or turned\r\n            into errors.\r\n            Valid values are:\r\n\r\n            * \"error\" - turns matching warnings into exceptions\r\n            * \"ignore\" - discard the warning\r\n            * \"always\" - always emit a warning\r\n            * \"default\" - print the warning the first time it is generated\r\n              from each location\r\n            * \"module\" - print the warning the first time it is generated\r\n              from each module\r\n            * \"once\" - print the warning the first time it is generated\r\n\r\n        clear : str, default None\r\n            If not ``None`` then remove any previously raised warnings from\r\n            the ``__warningsregistry__`` to ensure that no warning messages are\r\n            suppressed by this context manager. If ``None`` is specified,\r\n            the ``__warningsregistry__`` keeps track of which warnings have been\r\n             shown, and does not show them again.\r\n        check_stacklevel : bool, default True\r\n            If True, displays the line that called the function containing\r\n            the warning to show were the function is called. Otherwise, the\r\n            line that implements the function is displayed.\r\n\r\n        Examples\r\n        --------\r\n        >>> import warnings\r\n        >>> with assert_produces_warning():\r\n        ...     warnings.warn(UserWarning())\r\n        ...\r\n        >>> with assert_produces_warning(False):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        ...\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\r\n        >>> with assert_produces_warning(UserWarning):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Did not see expected warning of class 'UserWarning'.\r\n\r\n        ..warn:: This is *not* thread-safe.\r\n        \"\"\"\r\n        with warnings.catch_warnings(record=True) as w:\r\n\r\n            if clear is not None:\r\n                # make sure that we are clearning these warnings\r\n                # if they have happened before\r\n                # to guarantee that we will catch them\r\n                if not is_list_like(clear):\r\n                    clear = [clear]\r\n                for m in clear:\r\n                    try:\r\n                        m.__warningregistry__.clear()\r\n                    except Exception:\r\n                        pass\r\n\r\n            saw_warning = False\r\n            warnings.simplefilter(filter_level)\r\n            yield w\r\n            extra_warnings = []\r\n\r\n            for actual_warning in w:\r\n                if (expected_warning and issubclass(actual_warning.category,\r\n                                                    expected_warning)):\r\n                    saw_warning = True\r\n\r\n                    if check_stacklevel and issubclass(actual_warning.category,\r\n                                                       (FutureWarning,\r\n                                                        DeprecationWarning)):\r\n                        from inspect import getframeinfo, stack\r\n                        caller = getframeinfo(stack()[2][0])\r\n                        msg = (\"Warning not set with correct stacklevel. \"\r\n                               \"File where warning is raised: {actual} != \"\r\n                               \"{caller}. Warning message: {message}\"\r\n                               ).format(actual=actual_warning.filename,\r\n                                        caller=caller.filename,\r\n                                        message=actual_warning.message)\r\n                        assert actual_warning.filename == caller.filename, msg\r\n                else:\r\n                    extra_warnings.append(actual_warning.category.__name__)\r\n            if expected_warning:\r\n                msg = \"Did not see expected warning of class {name!r}.\".format(\r\n                    name=expected_warning.__name__)\r\n                assert saw_warning, msg\r\n            assert not extra_warnings, (\"Caused unexpected warning(s): {extra!r}.\"\r\n>                                       ).format(extra=extra_warnings)\r\nE           AssertionError: Caused unexpected warning(s): ['DeprecationWarning', 'DeprecationWarning', 'DeprecationWarning'].\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:2540: AssertionError\r\n____________________ TestXlrdReader.test_usecols_str[.xls] ____________________\r\n\r\nself = <pandas.tests.io.test_excel.TestXlrdReader object at 0x0000015F071EFDD8>\r\next = '.xls'\r\n\r\n    def test_usecols_str(self, ext):\r\n\r\n        dfref = self.get_csv_refdf('test1')\r\n\r\n        df1 = dfref.reindex(columns=['A', 'B', 'C'])\r\n        df2 = self.get_exceldf('test1', ext, 'Sheet1', index_col=0,\r\n                               usecols='A:D')\r\n        df3 = self.get_exceldf('test1', ext, 'Sheet2', skiprows=[1],\r\n                               index_col=0, usecols='A:D')\r\n\r\n        with tm.assert_produces_warning(FutureWarning):\r\n            df4 = self.get_exceldf('test1', ext, 'Sheet2', skiprows=[1],\r\n>                                  index_col=0, parse_cols='A:D')\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\io\\test_excel.py:157:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\contextlib.py:119: in __exit__\r\n    next(self.gen)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nexpected_warning = <class 'FutureWarning'>, filter_level = 'always'\r\nclear = None, check_stacklevel = True\r\n\r\n    @contextmanager\r\n    def assert_produces_warning(expected_warning=Warning, filter_level=\"always\",\r\n                                clear=None, check_stacklevel=True):\r\n        \"\"\"\r\n        Context manager for running code expected to either raise a specific\r\n        warning, or not raise any warnings. Verifies that the code raises the\r\n        expected warning, and that it does not raise any other unexpected\r\n        warnings. It is basically a wrapper around ``warnings.catch_warnings``.\r\n\r\n        Parameters\r\n        ----------\r\n        expected_warning : {Warning, False, None}, default Warning\r\n            The type of Exception raised. ``exception.Warning`` is the base\r\n            class for all warnings. To check that no warning is returned,\r\n            specify ``False`` or ``None``.\r\n        filter_level : str, default \"always\"\r\n            Specifies whether warnings are ignored, displayed, or turned\r\n            into errors.\r\n            Valid values are:\r\n\r\n            * \"error\" - turns matching warnings into exceptions\r\n            * \"ignore\" - discard the warning\r\n            * \"always\" - always emit a warning\r\n            * \"default\" - print the warning the first time it is generated\r\n              from each location\r\n            * \"module\" - print the warning the first time it is generated\r\n              from each module\r\n            * \"once\" - print the warning the first time it is generated\r\n\r\n        clear : str, default None\r\n            If not ``None`` then remove any previously raised warnings from\r\n            the ``__warningsregistry__`` to ensure that no warning messages are\r\n            suppressed by this context manager. If ``None`` is specified,\r\n            the ``__warningsregistry__`` keeps track of which warnings have been\r\n             shown, and does not show them again.\r\n        check_stacklevel : bool, default True\r\n            If True, displays the line that called the function containing\r\n            the warning to show were the function is called. Otherwise, the\r\n            line that implements the function is displayed.\r\n\r\n        Examples\r\n        --------\r\n        >>> import warnings\r\n        >>> with assert_produces_warning():\r\n        ...     warnings.warn(UserWarning())\r\n        ...\r\n        >>> with assert_produces_warning(False):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        ...\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\r\n        >>> with assert_produces_warning(UserWarning):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Did not see expected warning of class 'UserWarning'.\r\n\r\n        ..warn:: This is *not* thread-safe.\r\n        \"\"\"\r\n        with warnings.catch_warnings(record=True) as w:\r\n\r\n            if clear is not None:\r\n                # make sure that we are clearning these warnings\r\n                # if they have happened before\r\n                # to guarantee that we will catch them\r\n                if not is_list_like(clear):\r\n                    clear = [clear]\r\n                for m in clear:\r\n                    try:\r\n                        m.__warningregistry__.clear()\r\n                    except Exception:\r\n                        pass\r\n\r\n            saw_warning = False\r\n            warnings.simplefilter(filter_level)\r\n            yield w\r\n            extra_warnings = []\r\n\r\n            for actual_warning in w:\r\n                if (expected_warning and issubclass(actual_warning.category,\r\n                                                    expected_warning)):\r\n                    saw_warning = True\r\n\r\n                    if check_stacklevel and issubclass(actual_warning.category,\r\n                                                       (FutureWarning,\r\n                                                        DeprecationWarning)):\r\n                        from inspect import getframeinfo, stack\r\n                        caller = getframeinfo(stack()[2][0])\r\n                        msg = (\"Warning not set with correct stacklevel. \"\r\n                               \"File where warning is raised: {actual} != \"\r\n                               \"{caller}. Warning message: {message}\"\r\n                               ).format(actual=actual_warning.filename,\r\n                                        caller=caller.filename,\r\n                                        message=actual_warning.message)\r\n                        assert actual_warning.filename == caller.filename, msg\r\n                else:\r\n                    extra_warnings.append(actual_warning.category.__name__)\r\n            if expected_warning:\r\n                msg = \"Did not see expected warning of class {name!r}.\".format(\r\n                    name=expected_warning.__name__)\r\n                assert saw_warning, msg\r\n            assert not extra_warnings, (\"Caused unexpected warning(s): {extra!r}.\"\r\n>                                       ).format(extra=extra_warnings)\r\nE           AssertionError: Caused unexpected warning(s): ['DeprecationWarning', 'DeprecationWarning', 'DeprecationWarning'].\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:2540: AssertionError\r\n_____________ TestXlrdReader.test_sheet_name_and_sheetname[.xls] ______________\r\n\r\nself = <pandas.tests.io.test_excel.TestXlrdReader object at 0x0000015F07EC5518>\r\next = '.xls'\r\n\r\n    def test_sheet_name_and_sheetname(self, ext):\r\n        # GH10559: Minor improvement: Change \"sheet_name\" to \"sheetname\"\r\n        # GH10969: DOC: Consistent var names (sheetname vs sheet_name)\r\n        # GH12604: CLN GH10559 Rename sheetname variable to sheet_name\r\n        # GH20920: ExcelFile.parse() and pd.read_xlsx() have different\r\n        #          behavior for \"sheetname\" argument\r\n        dfref = self.get_csv_refdf('test1')\r\n        df1 = self.get_exceldf('test1', ext,\r\n                               sheet_name='Sheet1')  # doc\r\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\r\n            df2 = self.get_exceldf('test1', ext,\r\n>                                  sheetname='Sheet1')  # bkwrd compat\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\io\\test_excel.py:513:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\contextlib.py:119: in __exit__\r\n    next(self.gen)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nexpected_warning = <class 'FutureWarning'>, filter_level = 'always'\r\nclear = None, check_stacklevel = False\r\n\r\n    @contextmanager\r\n    def assert_produces_warning(expected_warning=Warning, filter_level=\"always\",\r\n                                clear=None, check_stacklevel=True):\r\n        \"\"\"\r\n        Context manager for running code expected to either raise a specific\r\n        warning, or not raise any warnings. Verifies that the code raises the\r\n        expected warning, and that it does not raise any other unexpected\r\n        warnings. It is basically a wrapper around ``warnings.catch_warnings``.\r\n\r\n        Parameters\r\n        ----------\r\n        expected_warning : {Warning, False, None}, default Warning\r\n            The type of Exception raised. ``exception.Warning`` is the base\r\n            class for all warnings. To check that no warning is returned,\r\n            specify ``False`` or ``None``.\r\n        filter_level : str, default \"always\"\r\n            Specifies whether warnings are ignored, displayed, or turned\r\n            into errors.\r\n            Valid values are:\r\n\r\n            * \"error\" - turns matching warnings into exceptions\r\n            * \"ignore\" - discard the warning\r\n            * \"always\" - always emit a warning\r\n            * \"default\" - print the warning the first time it is generated\r\n              from each location\r\n            * \"module\" - print the warning the first time it is generated\r\n              from each module\r\n            * \"once\" - print the warning the first time it is generated\r\n\r\n        clear : str, default None\r\n            If not ``None`` then remove any previously raised warnings from\r\n            the ``__warningsregistry__`` to ensure that no warning messages are\r\n            suppressed by this context manager. If ``None`` is specified,\r\n            the ``__warningsregistry__`` keeps track of which warnings have been\r\n             shown, and does not show them again.\r\n        check_stacklevel : bool, default True\r\n            If True, displays the line that called the function containing\r\n            the warning to show were the function is called. Otherwise, the\r\n            line that implements the function is displayed.\r\n\r\n        Examples\r\n        --------\r\n        >>> import warnings\r\n        >>> with assert_produces_warning():\r\n        ...     warnings.warn(UserWarning())\r\n        ...\r\n        >>> with assert_produces_warning(False):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        ...\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\r\n        >>> with assert_produces_warning(UserWarning):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Did not see expected warning of class 'UserWarning'.\r\n\r\n        ..warn:: This is *not* thread-safe.\r\n        \"\"\"\r\n        with warnings.catch_warnings(record=True) as w:\r\n\r\n            if clear is not None:\r\n                # make sure that we are clearning these warnings\r\n                # if they have happened before\r\n                # to guarantee that we will catch them\r\n                if not is_list_like(clear):\r\n                    clear = [clear]\r\n                for m in clear:\r\n                    try:\r\n                        m.__warningregistry__.clear()\r\n                    except Exception:\r\n                        pass\r\n\r\n            saw_warning = False\r\n            warnings.simplefilter(filter_level)\r\n            yield w\r\n            extra_warnings = []\r\n\r\n            for actual_warning in w:\r\n                if (expected_warning and issubclass(actual_warning.category,\r\n                                                    expected_warning)):\r\n                    saw_warning = True\r\n\r\n                    if check_stacklevel and issubclass(actual_warning.category,\r\n                                                       (FutureWarning,\r\n                                                        DeprecationWarning)):\r\n                        from inspect import getframeinfo, stack\r\n                        caller = getframeinfo(stack()[2][0])\r\n                        msg = (\"Warning not set with correct stacklevel. \"\r\n                               \"File where warning is raised: {actual} != \"\r\n                               \"{caller}. Warning message: {message}\"\r\n                               ).format(actual=actual_warning.filename,\r\n                                        caller=caller.filename,\r\n                                        message=actual_warning.message)\r\n                        assert actual_warning.filename == caller.filename, msg\r\n                else:\r\n                    extra_warnings.append(actual_warning.category.__name__)\r\n            if expected_warning:\r\n                msg = \"Did not see expected warning of class {name!r}.\".format(\r\n                    name=expected_warning.__name__)\r\n                assert saw_warning, msg\r\n            assert not extra_warnings, (\"Caused unexpected warning(s): {extra!r}.\"\r\n>                                       ).format(extra=extra_warnings)\r\nE           AssertionError: Caused unexpected warning(s): ['DeprecationWarning', 'DeprecationWarning', 'DeprecationWarning'].\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:2540: AssertionError\r\n______________ TestXlrdReader.test_read_excel_parse_dates[.xls] _______________\r\n\r\nself = <pandas.tests.io.test_excel.TestXlrdReader object at 0x0000015F0C0CEE10>\r\next = '.xls'\r\n\r\n    @td.skip_if_no('openpyxl')\r\n    @td.skip_if_no('xlwt')\r\n    def test_read_excel_parse_dates(self, ext):\r\n        # GH 11544, 12051\r\n        df = DataFrame(\r\n            {'col': [1, 2, 3],\r\n             'date_strings': pd.date_range('2012-01-01', periods=3)})\r\n        df2 = df.copy()\r\n        df2['date_strings'] = df2['date_strings'].dt.strftime('%m/%d/%Y')\r\n\r\n        with ensure_clean(ext) as pth:\r\n            df2.to_excel(pth)\r\n\r\n            res = read_excel(pth)\r\n            tm.assert_frame_equal(df2, res)\r\n\r\n            # no index_col specified when parse_dates is True\r\n            with tm.assert_produces_warning():\r\n                res = read_excel(pth, parse_dates=True)\r\n>               tm.assert_frame_equal(df2, res)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\io\\test_excel.py:949:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\contextlib.py:119: in __exit__\r\n    next(self.gen)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nexpected_warning = <class 'Warning'>, filter_level = 'always', clear = None\r\ncheck_stacklevel = True\r\n\r\n    @contextmanager\r\n    def assert_produces_warning(expected_warning=Warning, filter_level=\"always\",\r\n                                clear=None, check_stacklevel=True):\r\n        \"\"\"\r\n        Context manager for running code expected to either raise a specific\r\n        warning, or not raise any warnings. Verifies that the code raises the\r\n        expected warning, and that it does not raise any other unexpected\r\n        warnings. It is basically a wrapper around ``warnings.catch_warnings``.\r\n\r\n        Parameters\r\n        ----------\r\n        expected_warning : {Warning, False, None}, default Warning\r\n            The type of Exception raised. ``exception.Warning`` is the base\r\n            class for all warnings. To check that no warning is returned,\r\n            specify ``False`` or ``None``.\r\n        filter_level : str, default \"always\"\r\n            Specifies whether warnings are ignored, displayed, or turned\r\n            into errors.\r\n            Valid values are:\r\n\r\n            * \"error\" - turns matching warnings into exceptions\r\n            * \"ignore\" - discard the warning\r\n            * \"always\" - always emit a warning\r\n            * \"default\" - print the warning the first time it is generated\r\n              from each location\r\n            * \"module\" - print the warning the first time it is generated\r\n              from each module\r\n            * \"once\" - print the warning the first time it is generated\r\n\r\n        clear : str, default None\r\n            If not ``None`` then remove any previously raised warnings from\r\n            the ``__warningsregistry__`` to ensure that no warning messages are\r\n            suppressed by this context manager. If ``None`` is specified,\r\n            the ``__warningsregistry__`` keeps track of which warnings have been\r\n             shown, and does not show them again.\r\n        check_stacklevel : bool, default True\r\n            If True, displays the line that called the function containing\r\n            the warning to show were the function is called. Otherwise, the\r\n            line that implements the function is displayed.\r\n\r\n        Examples\r\n        --------\r\n        >>> import warnings\r\n        >>> with assert_produces_warning():\r\n        ...     warnings.warn(UserWarning())\r\n        ...\r\n        >>> with assert_produces_warning(False):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        ...\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\r\n        >>> with assert_produces_warning(UserWarning):\r\n        ...     warnings.warn(RuntimeWarning())\r\n        Traceback (most recent call last):\r\n            ...\r\n        AssertionError: Did not see expected warning of class 'UserWarning'.\r\n\r\n        ..warn:: This is *not* thread-safe.\r\n        \"\"\"\r\n        with warnings.catch_warnings(record=True) as w:\r\n\r\n            if clear is not None:\r\n                # make sure that we are clearning these warnings\r\n                # if they have happened before\r\n                # to guarantee that we will catch them\r\n                if not is_list_like(clear):\r\n                    clear = [clear]\r\n                for m in clear:\r\n                    try:\r\n                        m.__warningregistry__.clear()\r\n                    except Exception:\r\n                        pass\r\n\r\n            saw_warning = False\r\n            warnings.simplefilter(filter_level)\r\n            yield w\r\n            extra_warnings = []\r\n\r\n            for actual_warning in w:\r\n                if (expected_warning and issubclass(actual_warning.category,\r\n                                                    expected_warning)):\r\n                    saw_warning = True\r\n\r\n                    if check_stacklevel and issubclass(actual_warning.category,\r\n                                                       (FutureWarning,\r\n                                                        DeprecationWarning)):\r\n                        from inspect import getframeinfo, stack\r\n                        caller = getframeinfo(stack()[2][0])\r\n                        msg = (\"Warning not set with correct stacklevel. \"\r\n                               \"File where warning is raised: {actual} != \"\r\n                               \"{caller}. Warning message: {message}\"\r\n                               ).format(actual=actual_warning.filename,\r\n                                        caller=caller.filename,\r\n                                        message=actual_warning.message)\r\n>                       assert actual_warning.filename == caller.filename, msg\r\nE                       AssertionError: Warning not set with correct stacklevel. File where warning is raised: X:\\Python37\\lib\\site-packages\\xlrd\\book.py != X:\\Python37\\lib\\site-packages\\pandas\\tests\\io\\test_excel.py. Warning message: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:2532: AssertionError\r\n________________________ TestHDFStore.test_categorical ________________________\r\n\r\nself = <pandas.tests.io.test_pytables.TestHDFStore object at 0x0000015F0C47E5F8>\r\n\r\n    def test_categorical(self):\r\n\r\n        with ensure_clean_store(self.path) as store:\r\n\r\n            # Basic\r\n            _maybe_remove(store, 's')\r\n            s = Series(Categorical(['a', 'b', 'b', 'a', 'a', 'c'], categories=[\r\n                       'a', 'b', 'c', 'd'], ordered=False))\r\n            store.append('s', s, format='table')\r\n            result = store.select('s')\r\n            tm.assert_series_equal(s, result)\r\n\r\n            _maybe_remove(store, 's_ordered')\r\n            s = Series(Categorical(['a', 'b', 'b', 'a', 'a', 'c'], categories=[\r\n                       'a', 'b', 'c', 'd'], ordered=True))\r\n            store.append('s_ordered', s, format='table')\r\n            result = store.select('s_ordered')\r\n            tm.assert_series_equal(s, result)\r\n\r\n            _maybe_remove(store, 'df')\r\n\r\n            df = DataFrame({\"s\": s, \"vals\": [1, 2, 3, 4, 5, 6]})\r\n            store.append('df', df, format='table')\r\n            result = store.select('df')\r\n            tm.assert_frame_equal(result, df)\r\n\r\n            # Dtypes\r\n            s = Series([1, 1, 2, 2, 3, 4, 5]).astype('category')\r\n            store.append('si', s)\r\n            result = store.select('si')\r\n>           tm.assert_series_equal(result, s)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\io\\test_pytables.py:4700:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1175: in assert_series_equal\r\n    raise_assert_detail(obj, 'Series length are different', msg1, msg2)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nobj = 'Series', message = 'Series length are different'\r\nleft = \"14, Int64Index([0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6], dtype='int64')\"\r\nright = '7, RangeIndex(start=0, stop=7, step=1)', diff = None\r\n\r\n    def raise_assert_detail(obj, message, left, right, diff=None):\r\n        if isinstance(left, np.ndarray):\r\n            left = pprint_thing(left)\r\n        elif is_categorical_dtype(left):\r\n            left = repr(left)\r\n\r\n        if PY2 and isinstance(left, string_types):\r\n            # left needs to be printable in native text type in python2\r\n            left = left.encode('utf-8')\r\n\r\n        if isinstance(right, np.ndarray):\r\n            right = pprint_thing(right)\r\n        elif is_categorical_dtype(right):\r\n            right = repr(right)\r\n\r\n        if PY2 and isinstance(right, string_types):\r\n            # right needs to be printable in native text type in python2\r\n            right = right.encode('utf-8')\r\n\r\n        msg = \"\"\"{obj} are different\r\n\r\n    {message}\r\n    [left]:  {left}\r\n    [right]: {right}\"\"\".format(obj=obj, message=message, left=left, right=right)\r\n\r\n        if diff is not None:\r\n            msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n\r\n>       raise AssertionError(msg)\r\nE       AssertionError: Series are different\r\nE\r\nE       Series length are different\r\nE       [left]:  14, Int64Index([0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6], dtype='int64')\r\nE       [right]: 7, RangeIndex(start=0, stop=7, step=1)\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\util\\testing.py:1018: AssertionError\r\n__________________________ TestBusinessDay.test_repr __________________________\r\n\r\nself = <pandas.tests.tseries.offsets.test_offsets.TestBusinessDay object at 0x0000015F7DFFA710>\r\n\r\n    def test_repr(self):\r\n        assert repr(self.offset) == '<BusinessDay>'\r\n        assert repr(self.offset2) == '<2 * BusinessDays>'\r\n\r\n        expected = '<BusinessDay: offset=datetime.timedelta(1)>'\r\n>       assert repr(self.offset + timedelta(1)) == expected\r\nE       AssertionError: assert '<BusinessDay...elta(days=1)>' == '<BusinessDay:...timedelta(1)>'\r\nE         - <BusinessDay: offset=datetime.timedelta(days=1)>\r\nE         ?                                         -----\r\nE         + <BusinessDay: offset=datetime.timedelta(1)>\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets.py:532: AssertionError\r\n_______________________ TestCustomBusinessDay.test_repr _______________________\r\n\r\nself = <pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay object at 0x0000015F1B69A9B0>\r\n\r\n    def test_repr(self):\r\n        assert repr(self.offset) == '<CustomBusinessDay>'\r\n        assert repr(self.offset2) == '<2 * CustomBusinessDays>'\r\n\r\n        expected = '<BusinessDay: offset=datetime.timedelta(1)>'\r\n>       assert repr(self.offset + timedelta(1)) == expected\r\nE       AssertionError: assert '<BusinessDay...elta(days=1)>' == '<BusinessDay:...timedelta(1)>'\r\nE         - <BusinessDay: offset=datetime.timedelta(days=1)>\r\nE         ?                                         -----\r\nE         + <BusinessDay: offset=datetime.timedelta(1)>\r\n\r\nX:\\Python37\\lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets.py:1646: AssertionError\r\n============================== warnings summary ===============================\r\npandas/tests/test_multilevel.py::TestMultiLevel::()::test_frame_group_ops[True]\r\n  X:\\Python37\\lib\\site-packages\\numpy\\core\\_methods.py:29: RuntimeWarning: invalid value encountered in reduce\r\n    return umr_minimum(a, axis, None, out, keepdims)\r\n  X:\\Python37\\lib\\site-packages\\numpy\\core\\_methods.py:26: RuntimeWarning: invalid value encountered in reduce\r\n    return umr_maximum(a, axis, None, out, keepdims)\r\n\r\npandas/tests/test_multilevel.py::TestMultiLevel::()::test_frame_group_ops[False]\r\n  X:\\Python37\\lib\\site-packages\\numpy\\core\\_methods.py:29: RuntimeWarning: invalid value encountered in reduce\r\n    return umr_minimum(a, axis, None, out, keepdims)\r\n  X:\\Python37\\lib\\site-packages\\numpy\\core\\_methods.py:26: RuntimeWarning: invalid value encountered in reduce\r\n    return umr_maximum(a, axis, None, out, keepdims)\r\n\r\npandas/tests/frame/test_missing.py::TestDataFrameMissingData::()::test_fillna_categorical_nan\r\n  X:\\Python37\\lib\\site-packages\\numpy\\lib\\function_base.py:4033: RuntimeWarning: All-NaN slice encountered\r\n    r = func(a, **kwargs)\r\n\r\npandas/tests/groupby/test_filters.py::test_filter_and_transform_with_non_unique_float_index\r\n  X:\\Python37\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3063: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\r\n    return self._engine.get_loc(key)\r\n\r\npandas/tests/plotting/test_misc.py::TestDataFramePlots::()::test_parallel_coordinates_with_sorted_labels\r\n  X:\\Python37\\lib\\site-packages\\matplotlib\\axes\\_base.py:3149: UserWarning: Attempting to set identical left==right results\r\n  in singular transformations; automatically expanding.\r\n  left=0, right=0\r\n    'left=%s, right=%s') % (left, right))\r\n\r\npandas/tests/scalar/timestamp/test_timezones.py::TestTimestampTZOperations::()::test_tz_localize_pushes_out_of_bounds\r\n  X:\\Python37\\lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timezones.py:32: RuntimeWarning: overflow encountered in longlong_scalars\r\n    Timestamp.min.tz_localize('Asia/Tokyo')\r\n  X:\\Python37\\lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timezones.py:39: RuntimeWarning: overflow encountered in longlong_scalars\r\n    Timestamp.max.tz_localize('US/Pacific')\r\n\r\n-- Docs: http://doc.pytest.org/en/latest/warnings.html\r\n 31 failed, 24779 passed, 1280 skipped, 80 xfailed, 30 xpassed, 9 warnings in 519.10 seconds\r\nsys:1: ResourceWarning: unclosed <socket.socket fd=3200, family=AddressFamily.AF_INET, type=SocketKind.SOCK_DGRAM, proto=0>\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/389344488",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-389344488",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 389344488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTM0NDQ4OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-15T23:17:51Z",
    "updated_at": "2018-05-15T23:17:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "is there a reason u are running 3.7? (which is not covered by pandas currently)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/389346538",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-389346538",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 389346538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTM0NjUzOA==",
    "user": {
      "login": "cgohlke",
      "id": 483428,
      "node_id": "MDQ6VXNlcjQ4MzQyOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/483428?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgohlke",
      "html_url": "https://github.com/cgohlke",
      "followers_url": "https://api.github.com/users/cgohlke/followers",
      "following_url": "https://api.github.com/users/cgohlke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgohlke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgohlke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgohlke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgohlke/orgs",
      "repos_url": "https://api.github.com/users/cgohlke/repos",
      "events_url": "https://api.github.com/users/cgohlke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgohlke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-15T23:29:39Z",
    "updated_at": "2018-05-15T23:29:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> is there a reason u are running 3.7? (which is not covered by pandas currently)\r\n\r\nJust testing packages for compatibility with Python 3.7"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/389348179",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-389348179",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 389348179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTM0ODE3OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-15T23:39:37Z",
    "updated_at": "2018-05-15T23:39:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok thanks @cgohlke we have never run this against 3.7 on windows so bound to be some issues. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/399505125",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-399505125",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 399505125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTUwNTEyNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T16:38:27Z",
    "updated_at": "2018-06-22T16:38:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this should block 0.23.2. I'll get the testing setup early next week."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/399520106",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20552#issuecomment-399520106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20552",
    "id": 399520106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTUyMDEwNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T17:32:42Z",
    "updated_at": "2018-06-22T17:32:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep that’s reasonable\r\n\r\nis the python in conda yet?"
  }
]
