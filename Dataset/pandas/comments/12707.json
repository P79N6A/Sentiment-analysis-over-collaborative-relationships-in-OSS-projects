[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200871467",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12707#issuecomment-200871467",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12707",
    "id": 200871467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDg3MTQ2Nw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-24T14:53:55Z",
    "updated_at": "2016-03-24T14:56:33Z",
    "author_association": "MEMBER",
    "body": "@jreback : Whether or not this change is useful/correct aside, should this wait until a PR for fixing the rest of the compatibility issues with `fromnumeric.py` is done first?  That would be useful in paving/shaping the way for the development of other `fromnumeric.py` functions like this one.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200872380",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12707#issuecomment-200872380",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12707",
    "id": 200872380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDg3MjM4MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-24T14:56:53Z",
    "updated_at": "2016-03-24T14:57:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p not going to accept this. you are adding ANOTHER way of doing things which is simply not necessary w.r.t. our discussion in the other issue. `.argsort` does exactly what the docs say it should.\n\nI think you really have to have a good case for diverging here and I just don't see a usecase at all.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200953795",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12707#issuecomment-200953795",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12707",
    "id": 200953795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDk1Mzc5NQ==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-24T18:09:42Z",
    "updated_at": "2016-03-24T18:09:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback, I feel like you didn't actually read everything I wrote in https://github.com/pydata/pandas/issues/12694. Let me try again. If you're still not convinced, then I give up.\n\n@gfyoung, could you chime in?\n\nYes, I pointed out in https://github.com/pydata/pandas/issues/12694#issuecomment-200005080 that the documentation of `Series.argsort()` is correct. The problem isn't that the implementation doesn't correspond to the documentation. The problem is that the implementation/documentation is utterly useless. Not useless in the sense that there's a more efficient way to accomplish the same thing. Not useless in the sense that it's not Pythonic, or not Panda-ic/ish. Useless in the sense that there is no possible logical question to which it is the answer.\n\nLet me give an analogy. Consider the following `absurd` function. On first glance it might look like a plausible thing to do. And I could probably document it \"correctly\" with a one-sentence summary that sounds logical. But it is absurd. The resulting `Series` makes no sense. I would hope that if someone submitted a PR for `Series.absurd()` that it would be rejected.\n\n```\nIn [203]: def absurd(s):\n   .....:     return pd.Series(s.values, index=s.index.sort_values()).reindex(s.index)\n   .....:\n\nIn [204]: s = pd.Series([500, 100, np.nan, 300, 200, 600, np.nan], index=list('bacgfde'))\n\nIn [205]: s\nOut[205]:\nb    500.0\na    100.0\nc      NaN\ng    300.0\nf    200.0\nd    600.0\ne      NaN\ndtype: float64\n\nIn [206]: absurd(s)\nOut[206]:\nb    100.0\na    500.0\nc      NaN\ng      NaN\nf    600.0\nd    300.0\ne    200.0\ndtype: float64\n```\n\nAnyway, let's return to `.argsort()`. Let me make three statements about `a = s.argsort()`. Please let me know if you disagree with any of them.\n1. The only valid interpretation of `a.values` is as indices into `s.dropna()`. They have no meaning as indices into `s`. So if you're going to be using them with `s.dropna()` anyway, you might as well eliminate the putative `NaN` handling from `.argsort()` and just use `s.dropna().argsort()`. In other words, `the``NaN``handling in the existing``.argsort()`` complicates things and doesn't help at all.\n2. There is no connection between `a.values` and `a.index` (which is equal to `s.index`). The only plausible use of `a` is in using `a.values` and ignoring `a.index`; there is no way that using `a` as a `Series` (in a way that actually uses `a.index`) makes sense.\n3. In view of 1 and 2 above, defining `s.argsort()` to return simply the NumPy `s.values.argsort()` would (a) give a more useful treatment of `NaN`s, and (b) avoid a spurious and misleading association between `a.values` and `a.index`.\n\nIn view of 3, I propose to redefine `Series.argsort()` simply as `self.values.argsort()`, and also extend it to `DataFrame`, `Panel`, and `Panel4D`. Separately, I propose a separate `.ordering()` method (for `Series`, `DataFrame`, `Panel`, and `Panel4D`) that accomplishes what I think whoever implemented `Series.argsort()` must have thought they were implementing; at any rate, it makes sense, and is potentially useful.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200964793",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12707#issuecomment-200964793",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12707",
    "id": 200964793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDk2NDc5Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-24T18:43:04Z",
    "updated_at": "2016-03-24T19:32:30Z",
    "author_association": "MEMBER",
    "body": "@seth-p : Not being a heavy user of `argsort` in general (both in `numpy` or `pandas`), I will not comment on the validity of this PR or whether or not this is a beneficial change, as that is up to @jreback (or other users with merging powers) to decide.  However, I will say two things:\n\n1) Your argument does nothing to answer @jreback original concern, which is use case.  You need to illustrate _why_ your changes would be useful in the context of _every_ class you are adding it to.\n\n2) You can't make the claim that the implementation is \"utterly useless.\"  On what grounds can you make that assertion?  Your own opinion is not sufficient to support it.  There are too many users out there of this library for a single person's opinion to carry any weight.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200972509",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12707#issuecomment-200972509",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12707",
    "id": 200972509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDk3MjUwOQ==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-24T19:02:07Z",
    "updated_at": "2016-03-24T19:02:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gfyoung: Fair enough.\n\n1a. My proposed implementation of `.argsort()` for all data structures is as useful as NumPy's. To be honest, I can't think of a clean use in higher dimensions off the top of my head, but in one dimension the use is clear, e.g. `a[b.argsort()]` will give you `a` sorted by the values in `b`. (Perhaps one can somehow accomplish the same thing in higher dimensions, though I haven't figured it out.) If we're going to implement it simply as `s.values.argsort()`, might as well support higher-dimensional objects as well.\n\n1b. My proposed implementation of `.ordering()` is useful in the following scenario. Suppose `df` is a data frame of stock market capitalizations, with `df.columns` being stocks and `df.index` being days. Then `(-df).ordering() < 500` gives me a mask of the largest 500 stocks on each day, or more simply `(-df).ordering()` lets me determine the market cap rank of a given stock on a given day.\n\n2 . Yes, I realize that in general one can't make a blanket statement that something is useless, but in this case the connection between the `values` and the `index` of the resulting `Series` is so tenuous/meaningless/nonexistent, that I find it extremely hard to fathom. I challenge anyone to show me an example of a plausible use of `s.argsort()` in the presence of `NaN`s that doesn't (a) simply use `s.dropna()` (so that the `NaN` handling is superfluous), and (b) makes use of the `Series` structure (and not just the values).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200983277",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12707#issuecomment-200983277",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12707",
    "id": 200983277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDk4MzI3Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-24T19:27:18Z",
    "updated_at": "2016-03-24T19:27:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p \n\nI would assert these cover all the cases where `.argsort` would actually be used. Further [4] is way more performant. Unless you can come up with a case which is actually useful, I don't see a problem. It performs exactly as advertised and when used in a pandonic way (meaning with the index still attached) its quite useful. Using ONLY numpy routines is not that useful, but numpy requires you to track way more things manually anyhow.\n\n```\nIn [1]: s = pd.Series([500, 100, np.nan, 300, 200, 600, np.nan], index=list('bacgfde'))\n\nIn [2]: s\nOut[2]: \nb    500.0\na    100.0\nc      NaN\ng    300.0\nf    200.0\nd    600.0\ne      NaN\ndtype: float64\n\n# what you need/want if you actually sort things\nIn [3]: s.sort_values()\nOut[3]: \na    100.0\nf    200.0\ng    300.0\nb    500.0\nd    600.0\nc      NaN\ne      NaN\ndtype: float64\n\n# this is a topk\nIn [4]: s.nlargest(2)\nOut[4]: \nd    600.0\nb    500.0\ndtype: float64\n\n# of course you can position nans at the beginning or end\nIn [5]: s.reset_index(drop=True).sort_values()\nOut[5]: \n1    100.0\n4    200.0\n3    300.0\n0    500.0\n5    600.0\n2      NaN\n6      NaN\ndtype: float64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200983466",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12707#issuecomment-200983466",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12707",
    "id": 200983466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDk4MzQ2Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-24T19:28:05Z",
    "updated_at": "2016-03-24T19:28:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "So maybe we should deprecate / change `.argsort`, but replacing with another routine is just plain API bloat and not going to happen.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200989940",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12707#issuecomment-200989940",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12707",
    "id": 200989940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDk4OTk0MA==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-24T19:49:13Z",
    "updated_at": "2016-03-24T19:49:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm fine dropping/depracating `Series.argsort()`. The one thing you lose over my proposed `.argsort()` is the ability to do `a[b.argsort()]` where `a` and `b` are of the same length but have different `index`es, though (i) you could argue that this use case is non-Panda-ish; and (ii) one could always do `a[b.values.argsort()]`. I feel much stronger about eliminating/depracating the existing `Series.argsort()` than I do about my proposed replacement.\n\nAs for my proposed `.ordering()`, I don't see a way using `DataFrame.sort_values()` to accomplish what I described for a `DataFrame`. Suppose I have two `DataFrames`s, `returns` and `market_caps`, each of the form  `DataFrame(values, index=days, columns=stocks)`. With my `.ordering()` I could calculate a `Series` consisting of the mean return each day of the 500 largest stocks (that day): `returns[(-market_caps).ordering() < 500].mean(axis=1)`. How would one accomplish this using `.sort_values()` or `.nlargest()` or some other existing functions?\n"
  }
]
