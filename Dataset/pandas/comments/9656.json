[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/80529167",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-80529167",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 80529167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTI5MTY3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-14T15:18:11Z",
    "updated_at": "2015-03-14T15:18:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@brianthelion \n\nyou are doing non-symmetric things, so you get a non-symmetric answer.\n\npandas will align the rhs of an assignment to the lhs. So when assigning a single level index to a multi-index it can easily just put it on level 0 (and fill the rest of the levels with ''), this is your `df1_copy` case.\n\nhowever for `df2_copy` you are assigning a multi-index to a single level index. so the multi-level index is aligned to a single level. The only reasonable thing to do is to flatten it, making it into a single level index (which happens to be tuples). Not pretty, and one could argue that this should actually raise, but its rationale.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/82527455",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-82527455",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 82527455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTI3NDU1",
    "user": {
      "login": "brianthelion",
      "id": 296082,
      "node_id": "MDQ6VXNlcjI5NjA4Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brianthelion",
      "html_url": "https://github.com/brianthelion",
      "followers_url": "https://api.github.com/users/brianthelion/followers",
      "following_url": "https://api.github.com/users/brianthelion/following{/other_user}",
      "gists_url": "https://api.github.com/users/brianthelion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brianthelion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brianthelion/subscriptions",
      "organizations_url": "https://api.github.com/users/brianthelion/orgs",
      "repos_url": "https://api.github.com/users/brianthelion/repos",
      "events_url": "https://api.github.com/users/brianthelion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brianthelion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-17T18:55:55Z",
    "updated_at": "2015-03-17T19:09:40Z",
    "author_association": "NONE",
    "body": "@jreback \n\n> The only reasonable thing to do is to flatten it, making it into a single level index (which happens to be tuples). Not pretty, and one could argue that this should actually raise, but its rationale.\n\nI guess I am going to change my tack here and argue that flattening is not a reasonable thing to do. Why? My feeling is that flattening the assignor breaks a standard Python idiom, namely that _`__setitem__` assignment shouldn't fundamentally alter the assignor._ You might argue that Python idioms are imprecise beasts and that they don't exist until Guido says they do -- all of which are totally valid arguments. Nonetheless, I don't think you see too many instances in Pydom that fail to uphold immutability across `__setitem__`.\n\nIn other words, we should never have a situation in which:\n\n``` python\n>>> df1_copy[df2.columns] = df2\n>>> assert df1_copy[df2.columns] == df2\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/br/.virtualenvs/foo/local/lib/python2.7/site-packages/pandas/core/ops.py\", line 912, in f\n    return self._compare_frame(other, func, str_rep)\n  File \"/home/br/.virtualenvs/foo/local/lib/python2.7/site-packages/pandas/core/frame.py\", line 3136, in _compare_frame\n    raise ValueError('Can only compare identically-labeled '\nValueError: Can only compare identically-labeled DataFrame objects\n```\n\nI think maybe that's the most succinct way of phrasing it; apologies for being so circumspect previously. I would encourage the devs to consider changing the behavior to reflect something more idiomatic. I think there are a couple of good options available, and that a `raise` is probably not necessary.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/82564427",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-82564427",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 82564427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTY0NDI3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-17T19:45:31Z",
    "updated_at": "2015-03-17T19:45:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "What exactly are you proposing? This is a fundamentally non-symmetric operation. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/82650361",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-82650361",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 82650361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjUwMzYx",
    "user": {
      "login": "brianthelion",
      "id": 296082,
      "node_id": "MDQ6VXNlcjI5NjA4Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brianthelion",
      "html_url": "https://github.com/brianthelion",
      "followers_url": "https://api.github.com/users/brianthelion/followers",
      "following_url": "https://api.github.com/users/brianthelion/following{/other_user}",
      "gists_url": "https://api.github.com/users/brianthelion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brianthelion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brianthelion/subscriptions",
      "organizations_url": "https://api.github.com/users/brianthelion/orgs",
      "repos_url": "https://api.github.com/users/brianthelion/repos",
      "events_url": "https://api.github.com/users/brianthelion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brianthelion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-18T00:19:32Z",
    "updated_at": "2015-03-18T00:19:32Z",
    "author_association": "NONE",
    "body": "IMHO, the most important thing is keeping the `__setitem__` interface consistent. If you assign something via `df['A'] = B` then you should be able to access it -- and not some fundamentally altered version of it -- via `df['A']`. Note that I'm not talking about _strict_ immutability (`df['A'] is B`) here; just functional equivalence (`df['A'] == B`).\n\nI don't disagree that something fundamentally non-symmetric is happening. I just can't think of any situations with `__setitem__` in which the expectation for interface adjustment _isn't_ on the container object. In the present case specifically, I think it's much more natural to \"upgrade\" the assignee's index to a MultiIndex than to flatten the assignor's MultiIndex.\n\nI am completely clueless about what an implementation of the above might look like. Naively, it seems like the most apt formulation of panda's indexing in general is as a set of operations on tree structures where leaf nodes reference individual columns (or rows) of data. I would be very surprised if this wasn't how it was already implemented, actually. From the tree-based perspective, combining any two indexes -- single-level, multi-level; it doesn't matter -- is just a question of building an edge at the right spot between two trees. I can imagine an API for moving entire subtrees up and down index levels. But again, that's just me speculating about something I haven't actually tried to understand in detail.\n\n**TL;DR** - Immutability across `__setitem__` is the most important thing here. A close second is that the containing data structure's interface should be the one that changes, if any. In this specific case, the container's \"single\" index should be upgraded to a MultiIndex.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/82677884",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-82677884",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 82677884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjc3ODg0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-18T01:49:19Z",
    "updated_at": "2015-03-18T01:49:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@brianthelion your model of how a `MultiIndex` works is not correct. Pls have a look at `core/index.py` for more information. A MI is basically a fancy list of equal length tuples.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/82681097",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-82681097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 82681097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjgxMDk3",
    "user": {
      "login": "brianthelion",
      "id": 296082,
      "node_id": "MDQ6VXNlcjI5NjA4Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brianthelion",
      "html_url": "https://github.com/brianthelion",
      "followers_url": "https://api.github.com/users/brianthelion/followers",
      "following_url": "https://api.github.com/users/brianthelion/following{/other_user}",
      "gists_url": "https://api.github.com/users/brianthelion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brianthelion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brianthelion/subscriptions",
      "organizations_url": "https://api.github.com/users/brianthelion/orgs",
      "repos_url": "https://api.github.com/users/brianthelion/repos",
      "events_url": "https://api.github.com/users/brianthelion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brianthelion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-18T02:01:52Z",
    "updated_at": "2015-03-18T02:04:50Z",
    "author_association": "NONE",
    "body": "@jreback, please don't let my poor understanding of the implementation details detract from concerns raised about the `__setitem__` behavior. I think this issue is a point worthy of consideration by the devs insofar as the behavior seems to violate a basic Python idiom. In the meantime I'll do my best to understand the current implementation and come back with something constructive.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/82728216",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-82728216",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 82728216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzI4MjE2",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-18T03:48:58Z",
    "updated_at": "2015-03-18T03:48:58Z",
    "author_association": "MEMBER",
    "body": "I actually agree with @brianthelion here -- the lack of symmetry here is surprising.\n\nFrom an implementation perspective, I believe this would be a matter of updating `Index.reindex` with a special case so that it returns a MultiIndex if it has a MultiIndex target: https://github.com/pydata/pandas/blob/35d0893edfc01b2257826480e17cbe0632a24de3/pandas/core/index.py#L1707\n\nNote that:\n1. Reindex is not a particularly efficient operation _ever_ (all the values need to be copied).\n2. Reindex already does not always preserve Index subtype (e.g., try inserting string column names into a frame with only integer column names).\n\nSo on the whole, I don't see much of an issue with returning a new MultiIndex rather than an Index from Index.reindex.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/82858360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-82858360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 82858360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyODU4MzYw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-18T09:55:56Z",
    "updated_at": "2015-03-18T09:55:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "well, this is NOT a `reindex` operation at all. rather it is an `align` type of operation.\n\n```\nIn [108]: df2.align(df1,level=0)\nOut[108]: \n(    a       b    \n     0   1   0   1\n 0 NaN NaN NaN NaN\n 1 NaN NaN NaN NaN\n 2 NaN NaN NaN NaN\n 3 NaN NaN NaN NaN\n 4 NaN NaN NaN NaN,           a                   b          \n           0         1         0         1\n 0  0.449161  0.977953  0.182016  0.215457\n 1  0.050702  0.030895  0.233465  0.170092\n 2  0.707819  0.455248  0.050476  0.953795\n 3  0.708435  0.217373  0.508681  0.541064\n 4  0.729345  0.935472  0.897516  0.776996)\n\n```\n\nHowever, it differs from this for a very important perspective, and the reasons this doesn't work like you think (and prob shoujd just raise instead).\n- there is not control on _how_ to align, e.g. which level, so doing anything is ambiguous and surprising here, e.g. no level argument _can_ be specified\n- changing the lhs of an expression from a less specialized object (`Index`) to a more specialized object (`MultiIndex`) is completely non-intuitive, and violates a host of principles\n- changing the left hand index in a way that would so easily break any further operations would be so surpising (e.g. now you have to index via tuples, rather than via a string)\n- pandas fundamentally tries to _align_ the objects. when you are returning a NEW object, this is no problem. This is an inplace method and as such HAS to much more restricted on what it _can_ change.\n- imagine that this was allowed to morph to a MultiIndex on the lhs. So now I have to go inspect every set to be sure that I am NOT assigning a MultiIndex? seems odd to me\n- note that this is similarly the case for say mixing a DatetimeIndex and an Object index (of say date strings). You don't get inference, merely concat.\n\nso to me, this is by far the least surpising and practical thing to do. A MultiIndex is really just a tuple indexer. That is the most compatible object with an Index.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/84828715",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9656#issuecomment-84828715",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9656",
    "id": 84828715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODI4NzE1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T06:15:19Z",
    "updated_at": "2015-03-23T06:15:19Z",
    "author_association": "MEMBER",
    "body": "Thanks for explaining your thoughts here @jreback. I'm not 100% sure I agree with you -- in particular, I _think_ we try to make all indexing operations with `.loc` that work on a tuple index (e.g., the original example A) also work with a MultiIndex in the same way (example B), though I'm sure there are edge cases that means this is not the case in practice. Also, from a certain perspective, you can actually think of a MultiIndex as a more general type of Index, not a more specialized subtype. That said... this sort of operation is inherently quite messy, so this is quite far down my list of consistency fixes for pandas.\n"
  }
]
