[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426533693",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22962#issuecomment-426533693",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22962",
    "id": 426533693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjUzMzY5Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T07:08:31Z",
    "updated_at": "2018-10-03T07:08:31Z",
    "author_association": "MEMBER",
    "body": "A possible solution would be to first try to convert the list to an IntegerArray, and only if that fails to an np.ndarray. So that would ensure that the list with integers / NaNs becomes IntegerArray, and thus the result will also be one. \r\n\r\nBut a disadvantage of that is that then something like `arr + [1.0, 2.0, 3.0]` will also give IntegerArray as result instead of float array (which is what numpy gives, since the list are floats). And I am not sure to limit `integer_array(..)` constructor to require actual ints and error on a list of round floats."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426602828",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22962#issuecomment-426602828",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22962",
    "id": 426602828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjYwMjgyOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T11:30:45Z",
    "updated_at": "2018-10-03T11:30:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, the round float case is unfortunate. What's the least surprising behavior here? I think that since lists are un-typed, we having different return types for\r\n\r\n```python\r\nIn [15]: integer_array([1, 2, 3]) + integer_array([1, None, 3])\r\nOut[15]: IntegerArray([2, nan, 6], dtype='Int64')\r\n\r\nIn [16]: integer_array([1, 2, 3]) + [1, np.nan, 3]\r\nOut[16]: array([ 2., nan,  6.])\r\n```\r\n\r\nis the most surprising. I'd be willing to have the round float case be swallowed up by integer array if necessary. So maybe the rule is \"can we safely cast the right-hand side to an IntegerArray? If so, the return type is an IntegerArray\""
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426623771",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22962#issuecomment-426623771",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22962",
    "id": 426623771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjYyMzc3MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T12:44:24Z",
    "updated_at": "2018-10-03T12:44:24Z",
    "author_association": "MEMBER",
    "body": "> So maybe the rule is \"can we safely cast the right-hand side to an IntegerArray?\r\n\r\nI think that would be fine for now (although it is different from numpy), certainly given that a list has not really dtype information.\r\n\r\nAlternatively, we could error on `integer_array([1.0, 2.0])`, but that would also be very annoying, because `integer_array` is currently useful for converting our current \"integer with nan = foat\" to IntegerArray\r\n\r\n\r\n\r\n"
  }
]
