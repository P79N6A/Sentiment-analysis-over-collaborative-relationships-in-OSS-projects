[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319452273",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319452273",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319452273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ1MjI3Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T18:13:49Z",
    "updated_at": "2017-08-01T18:13:49Z",
    "author_association": "MEMBER",
    "body": "@jbrockmendel : Nice!  I think you just need a `whatsnew`, and you should be set."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319455176",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319455176",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319455176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ1NTE3Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T18:24:26Z",
    "updated_at": "2017-08-01T18:24:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "so you can name this ``is_index`` and ``is_multi_index`` if you want\r\n\r\nBUT in usage you will have to use\r\n\r\n``getattr(obj, 'is_multi_index', None) is not None``\r\n\r\nas you can be presented with a Series for example (or an ndarray or whatever)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319455347",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319455347",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319455347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ1NTM0Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T18:25:05Z",
    "updated_at": "2017-08-01T18:25:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "to be honest, I would like to see the result of asv's on this. I can't believe this actually makes a differnce. ``isinstance`` is highly efficient."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319455613",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319455613",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319455613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ1NTYxMw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T18:26:04Z",
    "updated_at": "2017-08-01T18:26:04Z",
    "author_association": "MEMBER",
    "body": "@jreback : They're in #16981, as @jbrockmendel mentioned (see bottom of issue)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319458883",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319458883",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319458883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ1ODg4Mw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T18:37:18Z",
    "updated_at": "2017-08-01T18:37:18Z",
    "author_association": "MEMBER",
    "body": "All these time differences are in the 100s of nanoseconds. I agree with @jreback that this is unlikely to matter in real code. It is difficult to do anything non-trivial in less than 1 us."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319459054",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319459054",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319459054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ1OTA1NA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T18:37:55Z",
    "updated_at": "2017-08-01T18:37:55Z",
    "author_association": "MEMBER",
    "body": "@gfyoung the timings in #16981 are for timeit checks specifically on `isinstance`.  I think @jreback is referring to asv profiling to see if the overall impact of this makes a non-trivial impact on real-life use cases.\r\n\r\nI don't have them handy, but when I ran asv on this I saw a handful that were slower for reasons I didn't figure out and a bunch that were much faster.  I don't know how to assess the relative importance of the different asv benchmarks.  I'll run that again and post the results."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319459201",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319459201",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319459201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ1OTIwMQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T18:38:25Z",
    "updated_at": "2017-08-01T18:38:25Z",
    "author_association": "MEMBER",
    "body": "@jreback \r\n\r\n> BUT in usage you will have to use\r\n>\r\n>getattr(obj, 'is_multi_index', None) is not None\r\n\r\nIn the PR I only changed the checks to `_is_multi` in places where we already know we're looking at an `pd.Index` object."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319507773",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319507773",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319507773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTUwNzc3Mw==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2017-08-01T21:52:01Z",
    "updated_at": "2017-08-01T22:38:08Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=h1) Report\n> Merging [#17147](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/f2b0bdc9bc4e57e101e306db7555eb7db28172e9?src=pr&el=desc) will **decrease** coverage by `0.02%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/17147/graphs/tree.svg?token=eZ4WkYLtcO&width=650&src=pr&height=150)](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #17147      +/-   ##\n==========================================\n- Coverage   91.03%      91%   -0.03%     \n==========================================\n  Files         161      161              \n  Lines       49405    49416      +11     \n==========================================\n- Hits        44974    44973       -1     \n- Misses       4431     4443      +12\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `88.78% <100%> (-0.01%)` | :arrow_down: |\n| #single | `40.28% <47.36%> (-0.05%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `97.66% <100%> (-0.1%)` | :arrow_down: |\n| [pandas/core/indexing.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhpbmcucHk=) | `93.93% <100%> (ø)` | :arrow_up: |\n| [pandas/core/reshape/merge.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvcmVzaGFwZS9tZXJnZS5weQ==) | `94.24% <100%> (ø)` | :arrow_up: |\n| [pandas/core/panel.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvcGFuZWwucHk=) | `96.92% <100%> (ø)` | :arrow_up: |\n| [pandas/core/reshape/reshape.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvcmVzaGFwZS9yZXNoYXBlLnB5) | `99.28% <100%> (ø)` | :arrow_up: |\n| [pandas/core/groupby.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZ3JvdXBieS5weQ==) | `92.07% <100%> (ø)` | :arrow_up: |\n| [pandas/core/series.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvc2VyaWVzLnB5) | `94.94% <100%> (ø)` | :arrow_up: |\n| [pandas/core/indexes/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9iYXNlLnB5) | `95.94% <100%> (ø)` | :arrow_up: |\n| [pandas/plotting/\\_core.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL3Bsb3R0aW5nL19jb3JlLnB5) | `82.8% <100%> (ø)` | :arrow_up: |\n| [pandas/core/generic.py](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZ2VuZXJpYy5weQ==) | `92.02% <100%> (ø)` | :arrow_up: |\n| ... and [5 more](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=footer). Last update [f2b0bdc...2723cff](https://codecov.io/gh/pandas-dev/pandas/pull/17147?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319514522",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319514522",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319514522,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTUxNDUyMg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T22:25:15Z",
    "updated_at": "2017-08-01T22:25:15Z",
    "author_association": "MEMBER",
    "body": "> this is unlikely to matter in real code\r\n\r\nTotally reasonable.  Elsewhere I've advocated smaller namespaces.  It may well be that the gains here aren't worth the extra `Index` attribute.\r\n\r\nPasting asv results from py27 on a fairly beefy Ubuntu desktop:\r\n\r\n```\r\n       before           after         ratio\r\n     [f9a552dc]       [c75b2f31]\r\n+     5.55±0.06ms         262±10ms    47.26  indexing.Int64Indexing.time_getitem_lists\r\n+      8.77±0.3ms         72.4±2ms     8.26  binary_ops.TimeseriesTZ.time_timestamp_ops_diff1\r\n+        7.48±2ms        49.7±10ms     6.65  algorithms.Algorithms.time_factorize_float\r\n+          72.9ms            288ms     3.96  packers.JSON.time_write_json_T\r\n+        8.05±2ms         28.4±6ms     3.53  algorithms.Algorithms.time_factorize_int\r\n+          76.9ms            225ms     2.93  packers.JSON.time_write_json\r\n+      2.14±0.09s            5.80s     2.71  gil.NoGilGroupby.time_groups_2\r\n+           2.95s            7.21s     2.45  gil.NoGilGroupby.time_groups_4\r\n+           6.13s            13.6s     2.22  gil.NoGilGroupby.time_groups_8\r\n+          99.1ms            219ms     2.21  packers.JSON.time_write_json_mixed_float_int\r\n+           21.6s            44.6s     2.06  gil.nogil_datetime_fields.time_datetime_field_day\r\n+         102±4ms         184±10ms     1.81  index_object.SetOperations.time_int64_union\r\n+        153±20ms        264±0.7ms     1.72  hdfstore_bench.HDF5.time_write_store_table_wide\r\n+      1.46±0.1ms      2.25±0.05ms     1.54  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('BusinessDay', 1)\r\n+          91.0ms            140ms     1.53  packers.JSON.time_write_json_mixed_delta_int_tstamp\r\n+        269±20μs         408±10μs     1.52  strings.StringEncode.time_encode_decode\r\n+     1.42±0.07ms      2.15±0.05ms     1.51  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('Day', 2)\r\n+      2.35±0.1ms      3.51±0.02ms     1.49  parser_vb.read_csv_dateparsing.time_baseline\r\n+        40.1±2ms           58.6ms     1.46  packers.STATA.time_write_stata_with_validation\r\n+           378ms            544ms     1.44  frame_methods.Dropna.time_dropna_axis0_all\r\n+           1.35s            1.95s     1.44  join_merge.ConcatPanels.time_f_ordered_axis2\r\n+           609ms            854ms     1.40  packers.JSON.time_write_json_lines\r\n+      4.29±0.3ms       6.01±0.2ms     1.40  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('CBMonthEnd', 1)\r\n+         127±1μs          176±7μs     1.39  timeseries.DatetimeIndex.time_unique\r\n+           403ms            557ms     1.38  frame_methods.Dropna.time_count_level_axis0_multi\r\n+           482ms            664ms     1.38  frame_methods.Dropna.time_count_level_axis1_mixed_dtypes_multi\r\n+           1.41s            1.93s     1.37  join_merge.ConcatPanels.time_c_ordered_axis1\r\n+           625ms            857ms     1.37  gil.nogil_take1d_int64.time_nogil_take1d_int64\r\n+        90.2±3ms            123ms     1.36  hdfstore_bench.HDF5.time_read_store_table_wide\r\n+     2.94±0.04ms       3.96±0.3ms     1.35  index_object.Float64.time_boolean_series_indexer\r\n+      21.3±0.7ms         28.6±1ms     1.34  categoricals.Categoricals2.time_value_counts_dropna\r\n+           2.39s            3.19s     1.33  join_merge.MergeCategoricals.time_merge_cat\r\n+           1.55s            2.05s     1.32  join_merge.i8merge.time_i8merge\r\n+           12.2s            16.0s     1.31  join_merge.JoinIndex.time_left_outer_join_index\r\n+          11.2ms           14.7ms     1.31  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('FY5253Quarter_1', 1)\r\n+        432±20ms         562±30ms     1.30  timeseries.SemiMonthOffset.time_begin_incr_rng\r\n+           3.82s            4.96s     1.30  join_merge.MergeCategoricals.time_merge_object\r\n+        331±10ms         427±30ms     1.29  inference.to_numeric_downcast.time_downcast('string-nint', 'integer')\r\n+      8.76±0.5μs         11.3±1μs     1.29  period.period_standard_indexing.time_shallow_copy\r\n+        482±20μs         620±30μs     1.29  frame_methods.FrameIsnull.time_isnull\r\n+      20.2±0.4ms         25.9±2ms     1.28  join_merge.MergeAsof.time_by_int\r\n+     3.63±0.08ms       4.65±0.3ms     1.28  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('CBMonthBegin', 1)\r\n+           117ms            150ms     1.28  packers.JSON.time_write_json_date_index\r\n+          61.5ms           78.5ms     1.28  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('FY5253Quarter_2', 2)\r\n+        260±10ms         331±20ms     1.28  inference.to_numeric_downcast.time_downcast('string-int', None)\r\n+           423ms            540ms     1.28  frame_methods.Dropna.time_count_level_axis1_multi\r\n+     2.67±0.06ms       3.39±0.1ms     1.27  stat_ops.stat_ops_level_frame_sum.time_stat_ops_level_frame_sum\r\n+      17.1±0.6ms         21.6±2ms     1.27  groupby.GroupBySuite.time_rank('int', 100)\r\n+          43.7ms           55.3ms     1.26  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('FY5253Quarter_2', 1)\r\n+           1.44s            1.82s     1.26  packers.SQL.time_write_sql\r\n+        460±20μs          574±9μs     1.25  indexing.DataFrameIndexing.time_boolean_rows_object\r\n+           1.37s            1.70s     1.24  join_merge.ConcatPanels.time_c_ordered_axis0\r\n+      2.94±0.2ms      3.64±0.02ms     1.24  groupby.GroupBySuite.time_tail('int', 10000)\r\n+           381ms            471ms     1.24  frame_methods.Dropna.time_dropna_axis1_any_mixed_dtypes\r\n+      3.03±0.1ms      3.74±0.07ms     1.23  rolling.SeriesRolling.time_rolling_quantile_0\r\n+      8.10±0.3ms       9.96±0.1ms     1.23  groupby.groupby_size.time_groupby_size\r\n+         164±9ms          202±8ms     1.23  inference.to_numeric_downcast.time_downcast('string-float', 'float')\r\n+           35.7s            43.7s     1.23  panel_methods.PanelMethods.time_pct_change_items\r\n+      8.70±0.3ms       10.6±0.5ms     1.22  groupby.groupby_nunique.time_groupby_nunique\r\n+     2.97±0.03ms       3.58±0.2ms     1.21  index_object.Float64.time_boolean_indexer\r\n+           1.59s            1.91s     1.20  join_merge.ConcatPanels.time_f_ordered_axis0\r\n+      22.7±0.6μs         27.2±1μs     1.20  timeseries.Offsets.time_timeseries_day_incr\r\n+           2.32s            2.78s     1.20  rolling.DataframeRolling.time_rolling_corr\r\n+      11.4±0.9ms       13.5±0.4ms     1.18  groupby.groupby_multi.time_groupby_multi_series_op\r\n+           1.53s            1.79s     1.17  join_merge.ConcatPanels.time_f_ordered_axis1\r\n+         322±5ms         375±10ms     1.16  frame_methods.Reindex.time_reindex_both_axes\r\n+      29.8±0.6μs       34.4±0.3μs     1.16  algorithms.Algorithms.time_duplicated_int_unique\r\n+     5.87±0.03ms       6.77±0.1ms     1.15  timeseries.DatetimeIndex.time_infer_freq_daily\r\n+      34.5±0.6ms         39.7±1ms     1.15  packers.STATA.time_write_stata\r\n+          79.0μs           90.4μs     1.14  panel_methods.PanelMethods.time_shift_minor\r\n+      13.3±0.5ms       15.2±0.3ms     1.14  timeseries.DatetimeIndex.time_infer_freq_none\r\n+      3.49±0.1μs      3.96±0.06μs     1.13  index_object.Float64.time_slice_indexer_basic\r\n+           1.81s            2.04s     1.13  timeseries.Iteration.time_iter_periodindex\r\n+           1.28s            1.44s     1.13  frame_methods.Reindex.time_reindex_axis1\r\n+           30.1s            33.8s     1.12  panel_methods.PanelMethods.time_pct_change_minor\r\n+           30.4s            34.0s     1.12  panel_methods.PanelMethods.time_pct_change_major\r\n+           9.15s            10.2s     1.11  groupby.GroupBySuite.time_mad('float', 10000)\r\n+      37.7±0.7ms       41.9±0.9ms     1.11  frame_methods.Iteration.time_itertuples\r\n+        682±20μs         755±30μs     1.11  groupby.GroupBySuite.time_tail('float', 100)\r\n-         536±4ms          481±2ms     0.90  timeseries.DatetimeIndex.time_add_offset_slow\r\n-          17.3ms           15.5ms     0.90  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('FY5253Quarter_1', 2)\r\n-           3.11s            2.78s     0.89  groupby.GroupBySuite.time_skew('float', 10000)\r\n-        542±20ms         480±20ms     0.89  timeseries.SemiMonthOffset.time_begin_decr_rng\r\n-          1.43ms           1.26ms     0.88  series_methods.series_isin_int64.time_series_isin_int64\r\n-     5.22±0.03μs       4.58±0.2μs     0.88  indexing.MultiIndexing.time_multiindex_med_get_loc\r\n-     1.22±0.03ms      1.06±0.01ms     0.87  frame_methods.Interpolate.time_interpolate_some_good\r\n-        596±40ms         512±10ms     0.86  packers.CSV.time_write_csv\r\n-           974ms            834ms     0.86  frame_methods.Dropna.time_dropna_axis1_all_mixed_dtypes\r\n-           449ms            383ms     0.85  frame_methods.Dropna.time_dropna_axis0_any_mixed_dtypes\r\n-        688±30μs         583±30μs     0.85  groupby.GroupBySuite.time_cumprod('float', 100)\r\n-     9.55±0.09ms       8.00±0.2ms     0.84  io_sql.ReadSQLTypes.time_float_read_query_sqlalchemy\r\n-     7.59±0.03ms           6.35ms     0.84  timeseries.DatetimeIndex.time_dti_tz_factorize\r\n-        772±30μs         636±10μs     0.82  groupby.GroupBySuite.time_value_counts('int', 100)\r\n-      13.6±0.1ms       11.1±0.1ms     0.81  eval.Query.time_query_datetime_index\r\n-         876±3ms        712±0.8ms     0.81  reshape.reshape_unstack_large_single_dtype.time_unstack_full_product\r\n-      2.22±0.1ms      1.78±0.09ms     0.80  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('QuarterEnd', 1)\r\n-        312±10ms          246±8ms     0.79  reshape.reshape_pivot_time_series.time_reshape_pivot_time_series\r\n-        325±30ms          255±8ms     0.79  join_merge.Align.time_series_align_left_monotonic\r\n-      17.4±0.1ms       13.6±0.5ms     0.78  join_merge.Join.time_join_dataframe_index_single_key_bigger_sort\r\n-      16.6±0.4ms           12.9ms     0.78  frame_methods.Iteration.time_iteritems_indexing\r\n-      5.06±0.1μs      3.94±0.06μs     0.78  index_object.Float64.time_slice_indexer_even\r\n-      2.91±0.2ms      2.23±0.08ms     0.76  groupby.GroupBySuite.time_cumprod('int', 10000)\r\n-           525ms            393ms     0.75  frame_methods.Dropna.time_dropna_axis1_all\r\n-     1.22±0.02ms         912±20μs     0.74  categoricals.Categoricals2.time_rendering\r\n-          10.9μs       7.97±0.2μs     0.73  timeseries.DatetimeIndex.time_timestamp_tzinfo_cons\r\n-        58.7±5ms           42.4ms     0.72  packers.packers_read_stata_with_validation.time_packers_read_stata_with_validation\r\n-         282±9ms          196±4ms     0.70  indexing.Int64Indexing.time_loc_scalar\r\n-        21.9±2ms       15.0±0.3ms     0.68  timeseries.AsOfDataFrame.time_asof_single\r\n-          13.5ms       9.18±0.4ms     0.68  timeseries.DatetimeIndex.time_add_offset_fast\r\n-        500±70ms         337±10ms     0.67  join_merge.Align.time_series_align_int64_index\r\n-      4.61±0.2ms      3.10±0.04ms     0.67  hdfstore_bench.HDF5.time_store_info\r\n-        17.8±2ms       11.6±0.3ms     0.65  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('FY5253_2', 1)\r\n-        769±30μs         491±40μs     0.64  reindex.FillMethod.time_pad_daterange\r\n-      2.49±0.3ms      1.59±0.05ms     0.64  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('BQuarterEnd', 2)\r\n-     2.40±0.09ms       1.51±0.1ms     0.63  frame_ctor.FrameConstructorDTIndexFromOffsets.time_frame_ctor('MonthEnd', 1)\r\n-        819±30ms         515±10ms     0.63  timeseries.ToDatetime.time_format_no_exact\r\n-           3.11s            1.95s     0.62  groupby.Groups.time_groupby_groups('object_large')\r\n-          3.58ms      2.19±0.03ms     0.61  timeseries.DatetimeIndex.time_timeseries_is_month_start\r\n-       592±200ms            318ms     0.54  gil.NoGilGroupby.time_sum_8_notp\r\n-           315ms            163ms     0.52  packers.JSON.time_write_json_mixed_float_int_T\r\n-         703±8ms         358±20ms     0.51  packers.Packers.time_packers_read_csv\r\n-           3.69s            1.75s     0.48  groupby.Groups.time_groupby_groups('object_small')\r\n-           1.74s         648±60ms     0.37  timeseries.AsOfDataFrame.time_asof\r\n-           418ms          108±2ms     0.26  series_methods.series_isin_int64.time_series_isin_int64_large\r\n-           2.12s         546±60ms     0.26  timeseries.AsOfDataFrame.time_asof_nan\r\n-           406ms           82.8ms     0.20  packers.JSON.time_write_json_mixed_float_int_str\r\n-           4.84s            932ms     0.19  groupby.Groups.time_groupby_groups('int64_large')\r\n-           3.73s            676ms     0.18  groupby.Groups.time_groupby_groups('int64_small')\r\n```\r\n\r\nRe-running that sketchy looking first one, I'm getting ratios ranging between 0.69 and 95.39.   Re-running the last `groupby.Groups.time_groupby_groups` that look especially good here, the ratios are clumping close to .85, occasionally peeking above 1 or back down to .19.  \r\n\r\n@jreback for future reference, how reliable are these? Which of these should I be paying the most attention to?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319515714",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319515714",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319515714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTUxNTcxNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T22:31:38Z",
    "updated_at": "2017-08-01T22:31:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel you should NOT have wildly varying results. generally when running the asvs you can't be doing anything else on the machine. So pick a subset of the benches and run them a couple of times.\r\n\r\nAlso you should pick a specific one that hits this code path and simply run time-it before and after."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319525824",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319525824",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319525824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTUyNTgyNA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T23:33:12Z",
    "updated_at": "2017-08-01T23:33:12Z",
    "author_association": "MEMBER",
    "body": "> you can't be doing anything else on the machine\r\n\r\nThere's a limit to how closely I can follow this instruction.  I'll see what I can do.\r\n\r\n> [...] simply run time-it before and after.\r\n\r\nI don't follow.  Are you referring to `timeit.timeit`?  Or prefixing the \"asv continuous...\" with \"time asv continuous...\"?  I'm going off the instructions [here](http://pandas.pydata.org/pandas-docs/stable/contributing.html)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319628987",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319628987",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319628987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTYyODk4Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T10:06:47Z",
    "updated_at": "2017-08-02T10:06:47Z",
    "author_association": "MEMBER",
    "body": "I think what Jeff meant was to pick one actual example (so user like example, not just a bench of the isinstance, which can come from the asv suite, but can also be a simple example you make up yourself) that actually hits some of those checks you changed, and then run this example a few time with `%timeit` to see if the changes actually make a difference.\r\n\r\nOften that is easier to just have an idea while developing, than running the full asv suite (as this takes some time (you can pick a few benches of course) and there is always some variation on it, although it should not be that large as you posted)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319776256",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319776256",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319776256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc3NjI1Ng==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T19:38:58Z",
    "updated_at": "2017-08-02T19:38:58Z",
    "author_association": "MEMBER",
    "body": "TLDR: the gains here are mixed and likely not worth pursuing.  I don't remotely understand why this would hurt performance in any case and would be very interested if someone can explain it to me.\r\n\r\nI wrapped each of the benchmarks from asv_bench/benchmarks/indexing.py inside `timeit.timeit` with `number=10000`.  Ran the old and new versions concurrently to keep system-load fixed.\r\n```\r\n                                                          old          new     ratio\r\nMultiIndexing.time_multiindex_string_get_loc         0.072173     0.042667  0.591180\r\nInt64Indexing.time_loc_scalar                        0.514279     0.304450  0.591994\r\nDataFrameIndexing.time_get_value_ix                  0.070953     0.047430  0.668467\r\nIntervalIndexing.time_loc_scalar                     0.731382     0.557354  0.762056\r\nDatetimeIndexing.time_getitem_scalar                 0.046275     0.037064  0.800954\r\nInt64Indexing.time_loc_list_like                     4.385614     3.564660  0.812808\r\nMultiIndexing.time_multiindex_med_get_loc            0.077026     0.063410  0.823228\r\nMultiIndexing.time_multiindex_med_get_loc_warm      62.657994    52.155032  0.832376\r\nMultiIndexing.time_frame_xs_mi_ix                    3.763521     3.230838  0.858462\r\nDataFrameIndexing.time_loc_dups                     13.048171    11.236136  0.861127\r\nInt64Indexing.time_getitem_list_like                 2.817089     2.465141  0.875067\r\nInt64Indexing.time_iloc_list_like                    0.434559     0.386217  0.888757\r\nInt64Indexing.time_iloc_scalar                       0.119464     0.108139  0.905201\r\nMultiIndexing.time_series_xs_mi_ix                   3.180289     2.880627  0.905775\r\nIntervalIndexing.time_getitem_list                   1.112638     1.012087  0.909628\r\nDataFrameIndexing.time_iloc_big                      1.304308     1.197525  0.918131\r\nInt64Indexing.time_iloc_slice                        0.360181     0.332867  0.924167\r\nDataFrameIndexing.time_getitem_scalar                0.110882     0.103850  0.936582\r\nMultiIndexing.time_remove_unused_levels              6.148088     5.769872  0.938482\r\nDataFrameIndexing.time_boolean_rows                  3.610850     3.394835  0.940176\r\nIntervalIndexing.time_loc_list                       0.979348     0.924186  0.943675\r\nStringIndexing.time_get_value                        0.369665     0.348958  0.943985\r\nDataFrameIndexing.time_iloc_dups                     2.282086     2.217480  0.971690\r\nMultiIndexing.time_multiindex_small_get_loc_warm    52.976377    51.634706  0.974674\r\nInt64Indexing.time_getitem_lists                    27.316124    26.705702  0.977653\r\nStringIndexing.time_getitem_label_slice              0.764872     0.755151  0.987291\r\nPanelIndexing.time_subset                           10.480220    10.366738  0.989172\r\nDataFrameIndexing.time_boolean_rows_object           5.262628     5.264051  1.000270\r\nMultiIndexing.time_multiindex_large_get_loc_warm  2096.727909  2118.089428  1.010188\r\nDataFrameIndexing.time_get_value                     0.017628     0.017869  1.013674\r\nInt64Indexing.time_getitem_array                     5.552607     5.634688  1.014782\r\nInt64Indexing.time_loc_slice                         0.650662     0.664971  1.021992\r\nMultiIndexing.time_is_monotonic                      0.196724     0.204743  1.040761\r\nMultiIndexing.time_multiindex_slicers               61.789704    66.649427  1.078649\r\nIntervalIndexing.time_getitem_scalar                 0.399074     0.448703  1.124360\r\nInt64Indexing.time_iloc_array                        1.047691     1.180230  1.126506\r\nInt64Indexing.time_ix_slice                          0.633261     0.721188  1.138848\r\nMultiIndexing.time_multiindex_large_get_loc          2.135768     2.458250  1.150991\r\nMultiIndexing.time_multiindex_get_indexer           12.741345    14.698841  1.153633\r\nInt64Indexing.time_getitem_slice                     0.696352     0.820771  1.178673\r\nInt64Indexing.time_ix_array                          6.770135     8.028476  1.185866\r\nInt64Indexing.time_loc_array                         9.285649    11.144338  1.200168\r\nInt64Indexing.time_ix_list_like                      2.806115     3.392442  1.208946\r\nStringIndexing.time_getitem_pos_slice                0.581314     0.764687  1.315446\r\nInt64Indexing.time_ix_scalar                         0.363763     0.486264  1.336760\r\nInt64Indexing.time_getitem_scalar                    0.156561     0.270340  1.726740\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319833097",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319833097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319833097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTgzMzA5Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-03T00:17:22Z",
    "updated_at": "2017-08-03T00:17:22Z",
    "author_association": "MEMBER",
    "body": "That seems indeed a to large difference to be caused by this PR. Just to check this, I would advise to pick one of the functions above, and run it a few times with `%timeit` (which already repeats a few times `timeit.timeit` by itself and reports average numbers and std. If you don't want to use IPython's magic, you can also manually use timeit.Timer.repeat or do a double repeat of timeit.timeit ) for both master and this PR, and look at the variability between the runs and between master and PR. That way, I think you will get a better idea of the timings."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319950844",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-319950844",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 319950844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTk1MDg0NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-03T12:09:22Z",
    "updated_at": "2017-08-03T12:09:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel and I am referring to ipython magic, simply use ``%timeit``. as @jorisvandenbossche says, pick a case or 2 from above and profile / time and see."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/321217105",
    "html_url": "https://github.com/pandas-dev/pandas/pull/17147#issuecomment-321217105",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17147",
    "id": 321217105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTIxNzEwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-09T10:28:44Z",
    "updated_at": "2017-08-09T10:28:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing as this would need performance validation "
  }
]
