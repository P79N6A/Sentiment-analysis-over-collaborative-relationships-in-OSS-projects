[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51553945",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51553945",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51553945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTUzOTQ1",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-08T01:32:10Z",
    "updated_at": "2014-08-08T01:32:10Z",
    "author_association": "MEMBER",
    "body": "this sounds good to me. are the `dict`-likes ordered or unordered?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51553975",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51553975",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51553975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTUzOTc1",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-08T01:32:42Z",
    "updated_at": "2014-08-08T01:32:42Z",
    "author_association": "MEMBER",
    "body": "bravo for taking the time to learn nditer, i never could quite see the point, but it sounds like it paid off for you\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51554830",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51554830",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51554830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU0ODMw",
    "user": {
      "login": "apapanico",
      "id": 3802821,
      "node_id": "MDQ6VXNlcjM4MDI4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3802821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apapanico",
      "html_url": "https://github.com/apapanico",
      "followers_url": "https://api.github.com/users/apapanico/followers",
      "following_url": "https://api.github.com/users/apapanico/following{/other_user}",
      "gists_url": "https://api.github.com/users/apapanico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apapanico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apapanico/subscriptions",
      "organizations_url": "https://api.github.com/users/apapanico/orgs",
      "repos_url": "https://api.github.com/users/apapanico/repos",
      "events_url": "https://api.github.com/users/apapanico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apapanico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-08T01:49:24Z",
    "updated_at": "2014-08-08T01:49:24Z",
    "author_association": "NONE",
    "body": "What I did could be a bit too hacky....but here's a bit more of a description:\n\nThe result is ordered.  More or less I extract the record array with pd.DataFrame.to_records() and give that to np.nditer (which is surprisingly simple http://docs.scipy.org/doc/numpy/reference/arrays.nditer.html).  You get a row from the structured ndarray from the underlying data which is both ordered but also has the columns names as fields for referencing by name.\n\nMy guess is the speedup is because the numpy methods don't waste their time trying to turn the row into a series which I believe messes with dtype.  The numpy methods preserve the dtype.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51556202",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51556202",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51556202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU2MjAy",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-08T02:17:48Z",
    "updated_at": "2014-08-08T02:17:48Z",
    "author_association": "MEMBER",
    "body": "hm now thinking about this, i think it would be too much round-tripping to stay inside of pandas (ie, to_records -> each row -> Series), tho i like the idea of using nditer.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51559360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51559360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51559360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU5MzYw",
    "user": {
      "login": "apapanico",
      "id": 3802821,
      "node_id": "MDQ6VXNlcjM4MDI4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3802821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apapanico",
      "html_url": "https://github.com/apapanico",
      "followers_url": "https://api.github.com/users/apapanico/followers",
      "following_url": "https://api.github.com/users/apapanico/following{/other_user}",
      "gists_url": "https://api.github.com/users/apapanico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apapanico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apapanico/subscriptions",
      "organizations_url": "https://api.github.com/users/apapanico/orgs",
      "repos_url": "https://api.github.com/users/apapanico/repos",
      "events_url": "https://api.github.com/users/apapanico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apapanico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-08T03:23:41Z",
    "updated_at": "2014-08-08T03:23:41Z",
    "author_association": "NONE",
    "body": "Does the iterator have to spit out a Series?  Is it true that by forcing everything into a Series, a row with mixed types will need to upcast and that is what kills the speed?  I guess I was just proposing another row iterator that people might find more useful than itertuples and faster than iterrows.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51559748",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51559748",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51559748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU5NzQ4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-08T03:31:52Z",
    "updated_at": "2014-08-08T03:31:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "see my answer here: http://stackoverflow.com/questions/24870953/does-iterrows-have-performance-issues (their is a linked issue as well)\n\niterating is not generally a good idea\nesp with mixed types (and the upcast does slow things down)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51562863",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51562863",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51562863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTYyODYz",
    "user": {
      "login": "apapanico",
      "id": 3802821,
      "node_id": "MDQ6VXNlcjM4MDI4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3802821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apapanico",
      "html_url": "https://github.com/apapanico",
      "followers_url": "https://api.github.com/users/apapanico/followers",
      "following_url": "https://api.github.com/users/apapanico/following{/other_user}",
      "gists_url": "https://api.github.com/users/apapanico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apapanico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apapanico/subscriptions",
      "organizations_url": "https://api.github.com/users/apapanico/orgs",
      "repos_url": "https://api.github.com/users/apapanico/repos",
      "events_url": "https://api.github.com/users/apapanico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apapanico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-08T04:42:58Z",
    "updated_at": "2014-08-08T04:42:58Z",
    "author_association": "NONE",
    "body": "Yea, I saw that post.  I get that iterating a DataFrame is slow and therefore not a good thing to do.  Is there some philosophical reason why people seem to hate iteration?  \n\nI'm just saying I came up something that seems to perform really well and might be a useful tool to the Cython illiterate among us with mixed data.  Yes, Cython is not _that_ hard but it's still learning something new instead of plowing away with pure Python.  I still haven't figured out how to do my use-case in Cython.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51594098",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51594098",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51594098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTk0MDk4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-08T12:25:27Z",
    "updated_at": "2014-08-08T12:25:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@apapanico can you post what you are doing wiht `np.nditer` it might be useful (possibly as a replacement). Further you always need a way to 'box' the output as a Series (and to no box as well), that's what `iterrows` (box) and `itertuples` (nobox) are for.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51686872",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-51686872",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 51686872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjg2ODcy",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-09T13:40:20Z",
    "updated_at": "2014-08-09T13:40:20Z",
    "author_association": "MEMBER",
    "body": "> Is there some philosophical reason why people seem to hate iteration?\n\nNo :) But when you have 20m-100m rows it's way too slow. So, not philosophical--practical.\n\n> I'm just saying I came up something that seems to perform really well and might be a useful tool to the Cython illiterate among us with mixed data.\n\nIt sounds like it would. We can help you set up a pull request if you want. I personally would like to see this code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59675833",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-59675833",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 59675833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Njc1ODMz",
    "user": {
      "login": "apapanico",
      "id": 3802821,
      "node_id": "MDQ6VXNlcjM4MDI4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3802821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apapanico",
      "html_url": "https://github.com/apapanico",
      "followers_url": "https://api.github.com/users/apapanico/followers",
      "following_url": "https://api.github.com/users/apapanico/following{/other_user}",
      "gists_url": "https://api.github.com/users/apapanico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apapanico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apapanico/subscriptions",
      "organizations_url": "https://api.github.com/users/apapanico/orgs",
      "repos_url": "https://api.github.com/users/apapanico/repos",
      "events_url": "https://api.github.com/users/apapanico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apapanico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T02:01:27Z",
    "updated_at": "2014-10-20T02:03:40Z",
    "author_association": "NONE",
    "body": "Hey, sorry I neglected this topic for so long.  Part of that was recovery from surgery. :-/ but that's done with.  Anyhoo, I learned some things and have some comments/suggestions:\n\nHere is a simple creation of an iterator using nditer from a dataframe:\n\n``` python\narr = np.array(np.zeros(1e4),dtype=[('f0',int),('f1',int),('f2',int)])\ndf = pd.DataFrame.from_records(arr,index=range(len(arr)))\nit = np.nditer(df.to_records(),flags=['refs_ok'],op_flags=['readwrite'])\n```\n\nIterating on `it` versus `df.iterrows` is about 100x faster.  But there's a big however: `df.to_records` copies data into a new record array so this is not really that helpful.  However, I found that `df.itertuples` is on the order of using `np.nditer` and I don't think copies data so it's got that going for it, which is nice.\n\nMy comments:\n- Perhaps this is just me and the decision making is beyond how I currently understand Pandas, but it seems rather strange that `df.iterrows` returns a Series since I don't think of rows as Series objects but rather as Records.  So when Series destroys the dtype, that kind of annoys me.\n- I get why people say it's a big no-no to iterate over 20m rows, but if I have like 200k rows and I'd like to iterate over them a bunch and my computation is necessarily sequential, it basically makes me not want to use Pandas if it's going to be that much of a drag compared to numpy and nditer.  And as I said before, I'm just not good enough with Cython yet to just skip all of this and do it there.\n\nMy one suggestion:\n- Maybe a new iterator can basically do what `df.itertuples` is doing but create a named tuple instead.  Or even just create a new very simple class called Record that basically is a named tuple but maybe has some other nice Pandas-ish methods.  Obviously this iterator would be read only, which may be a fine compromise.\n\nThanks for reading and feel free to clue me in if I'm misunderstanding things about how Pandas does things.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59680773",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-59680773",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 59680773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjgwNzcz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T03:48:14Z",
    "updated_at": "2014-10-20T03:48:14Z",
    "author_association": "MEMBER",
    "body": "If there's not much overhead, I think it would be fine to even return named tuples from `df.itertuples()`. Can you benchmark a test example?\n\nEven if named tuples involve too much overhead to do by default, I like the idea of adding an optional argument to `df.itertuples`, something like `named=True`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59736304",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-59736304",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 59736304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzM2MzA0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T12:00:55Z",
    "updated_at": "2014-10-20T12:00:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@apapanico by definition pandas will return an array like as a Series, whether its a row (and possibly needs upcasting), or a column and does not.\n\nSo your soln of using a NamedTuple is an option (for `df.itertuples`), another one is to use a compound dtype in `Series`. This is not supported ATM and I don't know what it would break, but might be worth investigating. Imagine returning:\n\n`Series(['foo',1],dtype=[('name','S3'),('value','i8')])` (for `iterrows`)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59794294",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-59794294",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 59794294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzk0Mjk0",
    "user": {
      "login": "apapanico",
      "id": 3802821,
      "node_id": "MDQ6VXNlcjM4MDI4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3802821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apapanico",
      "html_url": "https://github.com/apapanico",
      "followers_url": "https://api.github.com/users/apapanico/followers",
      "following_url": "https://api.github.com/users/apapanico/following{/other_user}",
      "gists_url": "https://api.github.com/users/apapanico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apapanico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apapanico/subscriptions",
      "organizations_url": "https://api.github.com/users/apapanico/orgs",
      "repos_url": "https://api.github.com/users/apapanico/repos",
      "events_url": "https://api.github.com/users/apapanico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apapanico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T16:35:40Z",
    "updated_at": "2014-10-20T16:35:40Z",
    "author_association": "NONE",
    "body": "@shoyer I will put something together.  Any particular guidelines?  This is my first time contributing on a project like this.  \n\n@jreback I actually tested a function for an iterator that returns a single row DataFrame instead of a Series.  That was pathetically slow though but I don't know why.  I poked around the back end and I see there's a custom storage method for under the hood of the DataFrame.  How interconnected is Pandas with Numpy?  My interpretation of what I was reading in the code was that Numpy was used for a lot of heavy lifting.  But it seems like type information is not transmitted to the values attribute.  I feel like a structured array here would be correct.\n\n``` python\n>>> df = pd.DataFrame(np.zeros((10,2)))\n>>> df['test'] = 'abc'\n>>> df.dtypes\n0       float64\n1       float64\ntest     object\ndtype: object\n>>> df.values.dtype\ndtype('O')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59795097",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-59795097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 59795097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzk1MDk3",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T16:41:04Z",
    "updated_at": "2014-10-20T16:41:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@apapanico are you planning on modifying the original dataframe? \n\nI actually think that `iterrows` should be removed. I recall very early on wes saying not to use it. Maybe a giant warning messages saying it's probably a bad idea? \n\nIf I'm iterating, I will start with:\n\n``` python\nfor name, var1, var2 in zip(df.index, df.var1, df.var2):\n    pass\n```\n\nwhich is really just a more explicit `itertuples`. imo, one should stay out of pandas land when iterating.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59795427",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-59795427",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 59795427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzk1NDI3",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T16:43:09Z",
    "updated_at": "2014-10-20T16:43:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, something I've done in the past is re-use pandas objects for speed. Something like:\n\n``` python\ndef horrible_idea(self):\n    s = self.iloc[0]\n    for name, vals in zip(df.index, self.values):\n        s._data.blocks[0].values = vals\n        s.__dict__['name'] = name\n        yield s\npd.DataFrame.horrible_idea = horrible_idea        \n```\n\nThat won't preserve dtypes, but it's decently fast while keeping the Series api. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59849546",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-59849546",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 59849546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODQ5NTQ2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T22:21:28Z",
    "updated_at": "2014-10-20T22:21:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@apapanico `.values` gives a single dtype that fits all of the datatypes. this is by definition.\n\nnumpy is the back-end to pandas, but the storage mechanism is independent. E.g. its NOT stored as a structured array, which are in general quite inflexible.\n\nIf you show what you are doing I can provide some help (for construction).\n\nMore to the point, can you show a use case where you USE these row values?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60347652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7958#issuecomment-60347652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7958",
    "id": 60347652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzQ3NjUy",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-24T05:56:17Z",
    "updated_at": "2014-10-24T05:56:17Z",
    "author_association": "MEMBER",
    "body": "@apapanico Here are our contributor guidelines: https://github.com/pydata/pandas/blob/master/CONTRIBUTING.md\n\nI'm pretty sure a namedtuple will be too slow to make it the default, but given that itertuples already has the `index` argument, I don't see much downside in adding another option.\n\n@dalejung I actually do agree with you and I like your more explicit zip (especially the Python 3 version, which makes a generator). I don't think I've ever used `itertuples` personally.\n"
  }
]
