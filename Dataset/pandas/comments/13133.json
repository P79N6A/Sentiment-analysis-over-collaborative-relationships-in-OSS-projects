[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218347435",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-218347435",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 218347435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM0NzQzNQ==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T02:40:44Z",
    "updated_at": "2016-05-11T02:40:44Z",
    "author_association": "NONE",
    "body": "There is also this: https://github.com/dodger487/dplython \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218348336",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-218348336",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 218348336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM0ODMzNg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T02:48:31Z",
    "updated_at": "2016-05-11T02:48:31Z",
    "author_association": "MEMBER",
    "body": "@datnamer Thanks -- I had a feeling I was missing something! I updated my post to include discussion of dplython as well.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218348459",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-218348459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 218348459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM0ODQ1OQ==",
    "user": {
      "login": "joshuahhh",
      "id": 643799,
      "node_id": "MDQ6VXNlcjY0Mzc5OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/643799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshuahhh",
      "html_url": "https://github.com/joshuahhh",
      "followers_url": "https://api.github.com/users/joshuahhh/followers",
      "following_url": "https://api.github.com/users/joshuahhh/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshuahhh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshuahhh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshuahhh/subscriptions",
      "organizations_url": "https://api.github.com/users/joshuahhh/orgs",
      "repos_url": "https://api.github.com/users/joshuahhh/repos",
      "events_url": "https://api.github.com/users/joshuahhh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshuahhh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T02:49:35Z",
    "updated_at": "2016-05-11T02:49:35Z",
    "author_association": "NONE",
    "body": "I have mixed thoughts.\n\nOn the one hand, I agree that having to put `lambda x:` everywhere is awkward and verbose; probably awkward and verbose enough to discourage using the syntax.\n\nBut the `X` solution isn't perfect. The main problem is that if you have a function `f` and call `f(X)`, everything breaks. (Unless `f` has a particularly simple implementation which doesn't look at its argument too closely.) This is why I added `sym_call`, but `sym_call` looks crappy, and you get cryptic error messages if you forget to use it. The introduction of `.pipe` on pandas dataframes/series made `X.pipe(f)` a nice option, but the \"forget to use it\" problem is still real.\n\nI like using `X` a lot, since I understand it well and have built it into my habits. But Python isn't powerful enough to make it work in a totally predictable way, and I don't know if half-solutions like this belong in pandas.\n\n(Thanks for asking!)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218351698",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-218351698",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 218351698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM1MTY5OA==",
    "user": {
      "login": "dodger487",
      "id": 179794,
      "node_id": "MDQ6VXNlcjE3OTc5NA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/179794?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dodger487",
      "html_url": "https://github.com/dodger487",
      "followers_url": "https://api.github.com/users/dodger487/followers",
      "following_url": "https://api.github.com/users/dodger487/following{/other_user}",
      "gists_url": "https://api.github.com/users/dodger487/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dodger487/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dodger487/subscriptions",
      "organizations_url": "https://api.github.com/users/dodger487/orgs",
      "repos_url": "https://api.github.com/users/dodger487/repos",
      "events_url": "https://api.github.com/users/dodger487/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dodger487/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T03:19:35Z",
    "updated_at": "2016-05-11T03:19:35Z",
    "author_association": "NONE",
    "body": "To add onto @joshuahhh's comment calling `X` as an input to a function, in dplython we use a decorator (`DelayFunction`) that causes the function to check arguments for any `X` arguments, and if so, delays calling until the correct time when the args can be supplied. I'd echo that it isn't ideal-- \"you get cryptic error messages if you forget to use it.\" I've toyed with the idea of applying this to all functions in a module upon import but that seems like it could have some difficulties.\n\nOn the other hand, I've found that I don't need to often apply functions to `X` arguments because there are so many methods on `Series`. Also, if I'm writing a function that will be applied to an `X`, it's not too bad to use the `DelayFunction` decorator.\n\nOverall, I agree there are some difficulties but I'm optimistic about `X` being a useful solution to include in pandas.\n\nThanks for including me on the thread!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218354199",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-218354199",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 218354199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM1NDE5OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T03:43:29Z",
    "updated_at": "2016-05-11T03:43:29Z",
    "author_association": "MEMBER",
    "body": "@dodger487 @joshuahhh thanks for sharing your thoughts! I think pandas supports method chaining enough that the inability to use arbitrary functions is OK. `X.pipe(np.log)` feels a little unnatural but is not _so_ terrible. (Note that there are tentaive plans, possibly as part of the pandas 1.0 rewrite, to port commonly used numpy ufuncs such as `np.log` to methods on Series/DataFrame.)\n\nIt occurs to me that dask.delayed contains [yet another implementation](https://github.com/dask/dask/blob/master/dask/delayed.py) of deferred evaluation that might be a useful reference.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/224924274",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-224924274",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 224924274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDkyNDI3NA==",
    "user": {
      "login": "dpavlic",
      "id": 1075079,
      "node_id": "MDQ6VXNlcjEwNzUwNzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1075079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dpavlic",
      "html_url": "https://github.com/dpavlic",
      "followers_url": "https://api.github.com/users/dpavlic/followers",
      "following_url": "https://api.github.com/users/dpavlic/following{/other_user}",
      "gists_url": "https://api.github.com/users/dpavlic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dpavlic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dpavlic/subscriptions",
      "organizations_url": "https://api.github.com/users/dpavlic/orgs",
      "repos_url": "https://api.github.com/users/dpavlic/repos",
      "events_url": "https://api.github.com/users/dpavlic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dpavlic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-09T15:05:20Z",
    "updated_at": "2016-06-09T15:10:34Z",
    "author_association": "NONE",
    "body": "Very intriguing. I've tested out dplython and pandas-ply based on this issue and they both look very interesting. It looks like both use X for their own functions, but it can't be used elsewhere; i.e.:\n\n```\ndf[(X.arr > 30) & (X.dep > 30)]\n```\n\ndoesn't actually work with either implementation as it is. Your proposal sounds like it would allow its use there, and elsewhere; for example, I'm assuming instead of (please forgive the obviously highly contrived example):\n\n```\ndf = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}).assign(c=lambda x: x.a + x.b)\n```\n\nI could instead do:\n\n```\ndf = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}).assign(c=X.a + X.b)\n```\n\n? While pandas is never going to have some of the sheer convenience of the R syntax for these types of things, that brings it _a lot closer_ from what I can see.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/224946932",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-224946932",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 224946932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDk0NjkzMg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-09T16:18:09Z",
    "updated_at": "2016-06-09T16:18:09Z",
    "author_association": "MEMBER",
    "body": "Despite these limitations, I still think `pandas.X` would be a clear win. The core functionality is useful enough on its own to merit inclusion in core pandas seems, even though add-ons like `DelayFunction` are probably best left to third party libraries.\n\n@jreback @jorisvandenbossche @TomAugspurger any opinions?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/224990766",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-224990766",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 224990766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDk5MDc2Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-09T18:50:37Z",
    "updated_at": "2016-06-09T18:50:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think exposing `pd.X` is pretty reasonable assuming well documented with nice use cases. Its opt-in so +1.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/341723203",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13133#issuecomment-341723203",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13133",
    "id": 341723203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTcyMzIwMw==",
    "user": {
      "login": "lpenguin",
      "id": 564449,
      "node_id": "MDQ6VXNlcjU2NDQ0OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/564449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lpenguin",
      "html_url": "https://github.com/lpenguin",
      "followers_url": "https://api.github.com/users/lpenguin/followers",
      "following_url": "https://api.github.com/users/lpenguin/following{/other_user}",
      "gists_url": "https://api.github.com/users/lpenguin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lpenguin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lpenguin/subscriptions",
      "organizations_url": "https://api.github.com/users/lpenguin/orgs",
      "repos_url": "https://api.github.com/users/lpenguin/repos",
      "events_url": "https://api.github.com/users/lpenguin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lpenguin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-03T14:43:07Z",
    "updated_at": "2017-11-03T15:08:59Z",
    "author_association": "NONE",
    "body": "Guys, didn't saw this issue. I think i done something very similar to X magic, see #18077.\r\n Proof-of-concept implementation is in https://github.com/lpenguin/pandas-query. Just use `from pandas_query import _ as X` and you will get similar functionality. Though i didn't implement separate `ply_select` and `ply_where` functions, i hacked `DataFrame.__getitem__`, `DataFrame.__setitem__` (column assigment) and `DataFrame.__assign__`.\r\n"
  }
]
