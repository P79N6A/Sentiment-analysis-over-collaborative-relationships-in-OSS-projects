[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/223963654",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13371#issuecomment-223963654",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13371",
    "id": 223963654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzk2MzY1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-06T13:47:16Z",
    "updated_at": "2016-06-06T13:47:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "#13170 will cast join keys if possible.\n\nYeah I would agree that if the index has the same name as a join column and it is not joined on (e.g. `left_index=True`), then prob should just raise an error (or maybe a warning). I doubt this is tested.\n\nSo why don't you do a pull-requests to implement your suggestions; see how much is needed to change to make consistent.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264002656",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13371#issuecomment-264002656",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13371",
    "id": 264002656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDAwMjY1Ng==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T21:34:57Z",
    "updated_at": "2016-11-30T21:35:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I started looking at #14076 to see if I can do something intelligent, and then found the discussion here.  @jreback has a comment from Jun 6 that is confusing to me.  Let's assume you are doing a left-join, `left_index=True` and `right_on='some_column_name'`.  There are 3 cases to consider:\r\n\r\n1. The left index has the same name `'some_column_name'` as the column being merged on.\r\n2. The left index has a different name from `'some_column_name'`.\r\n3. The left index has no name at all.\r\n\r\nIn the first case, this is like the 4th merge in the original example, and I think the behavior is correct.\r\n\r\nIn the second case, this is like the 2nd merge above, but I think the name of the resulting column should come from the left DataFrame index name, because the left's DataFrame index is what is preserved as a column in the result.  In the 2nd merge example above, it comes from the right, which is confusing.\r\n\r\nIn the third case, since there is no name for the left index, we could raise an error, or maybe the resulting name of the column should be called \"left_index\" (or something like that), to make it clear that it was that particular index that is used to create the values for the column.\r\n\r\nWhen the merges involve a MultiIndex, then I think these are the cases:\r\n\r\n1. The left index has the same names as the set of names from the right DataFrame.  In this case, everything works as expected.\r\n\r\n2. The left index has a complete set of name.  Only some of those names (but not all)  match the names on the right DataFrame.  In this case, we do as I suggested in (2) above, namely, use the names from the left index.\r\n\r\n3. The left index is missing some (or all) names. In this case, I think we should raise an error, as it's not clear what a good naming convention should be for missing names in a MultiIndex.  If we raise an error here, we probably should raise an error in the third case above for a single index.\r\n\r\nLooking forward to your opinion.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264239843",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13371#issuecomment-264239843",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13371",
    "id": 264239843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDIzOTg0Mw==",
    "user": {
      "login": "ialong",
      "id": 5802525,
      "node_id": "MDQ6VXNlcjU4MDI1MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5802525?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ialong",
      "html_url": "https://github.com/ialong",
      "followers_url": "https://api.github.com/users/ialong/followers",
      "following_url": "https://api.github.com/users/ialong/following{/other_user}",
      "gists_url": "https://api.github.com/users/ialong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ialong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ialong/subscriptions",
      "organizations_url": "https://api.github.com/users/ialong/orgs",
      "repos_url": "https://api.github.com/users/ialong/repos",
      "events_url": "https://api.github.com/users/ialong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ialong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T17:37:21Z",
    "updated_at": "2016-12-01T17:37:45Z",
    "author_association": "NONE",
    "body": "Hi @Dr-Irv! \r\nThank you for joining the discussion, this has been on my to-do list for a while, hopefully we can work out something together.\r\nI think you have completely understood the issue and thank you for giving the clear summary above. \r\n\r\nAs far as potential solutions go, here are my thoughts for each of the three cases you identify:\r\n\r\n**1)** **I agree this works as expected**, although I'd like to get rid of the suspicious type casting behaviour (hopefully #13170 fixes this already, but I think there might be something fishy going on in the background that tells me \"left\"-merging on the left index is handled incorrectly).\r\n\r\n**2)** **I think your solution is the right one**. For the sake of argument, we could keep both sets of columns and name them e.g. colName_x, colName_y (as in the non-\"left\"-merge). However, I think this is potentially misleading as it hides the fact that these were columns used for merging (it also gets messy if, as you say only some names match and some do not). So I agree with you.\r\n\r\n**3)** **We could raise an error, or we could retain the left index as it is and drop the \"right_on\" columns**. I prefer the latter since it works similarly to joining two dataframes on index and, since we are \"left\"-merging, we are saying that the joining index/column we care about is the left one. The right one might be useful as a way to get us other values/fields we care about (contained in the right dataframe), but we should not necessarily expect the \"right_on\" column(s) to be appropriately named and to have reasonable values beyond the ones already included in \"left_index\".\r\n\r\nI'd like the solution to be minimal, avoiding many \"case/switch\"-type statements.\r\nPerhaps the simplest solution, at a high level, is to perform a merge on the two dataframes after resetting the index to a column (in which case merge already has the right behaviour) and then setting the index back as appropriate (i.e. using the left_index column names). \r\nI am not sure if this is computationally inefficient and whether in practice it will be easy. Worth testing though.\r\n\r\nLet me know what you think.\r\n\r\n**PS:**\r\nOne thing to consider is whether we like the behaviour in the first example of my original post, where both \"left_on\" and \"right_on\" columns are kept. This is potentially useful as a hack to know which values of \"left_on\" are (or are not) in \"right_on\" but is arguably confusing to have them both in the final dataframe (especially since we have \"left\"-merged).\r\nI would say they should be dropped, but this might change existing behaviour too much.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264271362",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13371#issuecomment-264271362",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13371",
    "id": 264271362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDI3MTM2Mg==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T19:36:20Z",
    "updated_at": "2016-12-01T19:36:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ialong Regarding your idea of what to do when the left index has no name at all (or in the case of a `MultiIndex`, has some levels missing names), you suggested to \"retain the left index as it is and drop the \"right_on\" columns.\".  As I thought about this some more, I realized that there is another ambiguity that might be an underlying cause of the issue.\r\n\r\nNamely, suppose you are doing a left merge where you have `left_index=True` and `right_on='some_column_name'`. As a left merge on the index, I would expect that the index would be preserved.  But instead, what pandas does now is create a _new_ index, and the index/column used for the merge becomes a column in the resulting DataFrame.\r\n\r\nConsider this behavior with a `MultiIndex`:\r\n```\r\nmi = pd.MultiIndex.from_tuples([(1,10),(2,20),(3,30),(4,40)], names=['a','b'])\r\ndf1 = pd.DataFrame({'c': [100,200,300,400]}, index=mi)\r\ndf2 = pd.DataFrame({'a' : [1,3], 'b' : [10, 30], 'e' : [1000, 3000]})\r\nprint(\"df1\\n\", df1)\r\nprint(\"df2\\n\", df2)\r\nprint(\"merge\\n\", pd.merge(df1, df2, how='left', left_index=True, right_on=['a','b']))\r\n```\r\nThis yields:\r\n```\r\ndf1\r\n         c\r\na b      \r\n1 10  100\r\n2 20  200\r\n3 30  300\r\n4 40  400\r\ndf2\r\n    a   b     e\r\n0  1  10  1000\r\n1  3  30  3000\r\nmerge\r\n      c    a     b       e\r\n0  100  1.0  10.0  1000.0\r\n1  200  2.0  20.0     NaN\r\n1  300  3.0  30.0  3000.0\r\n1  400  4.0  40.0     NaN\r\n```\r\nNote that the index columns `['a','b']` from `df1` are not used in the index.  One could argue that the result should be (ignoring the dtype issue for a moment):\r\n```\r\n            c       e\r\na   b                \r\n1.0 10.0  100  1000.0\r\n2.0 20.0  200     NaN\r\n3.0 30.0  300  3000.0\r\n4.0 40.0  400     NaN\r\n```\r\nThis latter DataFrame has `['a','b']` as the index, which, at least to me, would be a more intuitive result, because the merge request was for a left join, on the left index, so you'd expect the index to be preserved.\r\n\r\nNow, I imagine that if we were to change this undocumented behavior, we'd have a compatibility issue, but maybe that should be handled via a new parameter to `merge`.\r\n\r\nCurious to get feedback from @jreback ."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264283232",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13371#issuecomment-264283232",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13371",
    "id": 264283232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDI4MzIzMg==",
    "user": {
      "login": "ialong",
      "id": 5802525,
      "node_id": "MDQ6VXNlcjU4MDI1MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5802525?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ialong",
      "html_url": "https://github.com/ialong",
      "followers_url": "https://api.github.com/users/ialong/followers",
      "following_url": "https://api.github.com/users/ialong/following{/other_user}",
      "gists_url": "https://api.github.com/users/ialong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ialong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ialong/subscriptions",
      "organizations_url": "https://api.github.com/users/ialong/orgs",
      "repos_url": "https://api.github.com/users/ialong/repos",
      "events_url": "https://api.github.com/users/ialong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ialong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T20:20:09Z",
    "updated_at": "2016-12-01T20:22:34Z",
    "author_association": "NONE",
    "body": "@Dr-Irv I agree! Although maybe it's enough to have an argument like \"reset_index=False\". It does not seem like erroneous behaviour since in your example the column names actually agree. \r\n\r\nThe problem (and what we need to fix) is that, if the names differ, those that survive are the names of the right dataframe's columns, without the appropriate NaNs in place.\r\n\r\n-----\r\n\r\nThe more I think about this, the more it seems like merges should always be done on columns, rather than indices, and then we \"set_index\" as specified by either the inputs or the arguments to merge.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264300917",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13371#issuecomment-264300917",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13371",
    "id": 264300917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDMwMDkxNw==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T21:29:22Z",
    "updated_at": "2016-12-01T21:29:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ialong You wrote: \"if the names differ, those that survive are the names of the _right_ dataframe's columns,\".  I'm not sure I agree.  If you are doing a left join, then I think the names of the _left_ dataframe index (or columns) should survive.\r\n\r\nI've had situations where I want to merge using the index on one DataFrame and columns from another, so I don't think we should remove that functionality as you suggest in the last paragraph. I think we just need agreement on what the behavior should be in this case.  And we have to work through the 4 cases of left, right, inner, and outer joins, when one frame is joining on index, and the other on columns, and determine what the outcome should be in each of those cases.  "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264304719",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13371#issuecomment-264304719",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13371",
    "id": 264304719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDMwNDcxOQ==",
    "user": {
      "login": "ialong",
      "id": 5802525,
      "node_id": "MDQ6VXNlcjU4MDI1MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5802525?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ialong",
      "html_url": "https://github.com/ialong",
      "followers_url": "https://api.github.com/users/ialong/followers",
      "following_url": "https://api.github.com/users/ialong/following{/other_user}",
      "gists_url": "https://api.github.com/users/ialong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ialong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ialong/subscriptions",
      "organizations_url": "https://api.github.com/users/ialong/orgs",
      "repos_url": "https://api.github.com/users/ialong/repos",
      "events_url": "https://api.github.com/users/ialong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ialong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T21:43:52Z",
    "updated_at": "2016-12-01T21:43:52Z",
    "author_association": "NONE",
    "body": ">\"if the names differ, those that survive are the names of the right dataframe's columns,\". I'm not sure I agree. If you are doing a left join, then I think the names of the left dataframe index (or columns) should survive.\r\n\r\n@Dr-Irv That's the behaviour of my second example actually (maybe things have changed since then?):\r\n\r\nindex in \"left\" is called \"c\" but right_on='d'\r\n\r\nas you can see the result is a column \"d\" with no NaNs, a meaningless index and no \"c\" column anywhere.\r\n\r\nOf course if we were merging on two columns (rather than index and column), both survive (first example).\r\n\r\n----\r\n\r\n>The more I think about this, the more it seems like merges should always be done on columns, rather than indices, and then we \"set_index\" as specified by either the inputs or the arguments to merge.\r\n\r\nSorry I realise this was not very clear, what I meant was that the merge routine should (internally) be called on columns. \r\nSo if you pass `left_index=True` or `right_index=True` merge would first `reset_index()`, then merge on the resulting columns, then `set_index('cols')` again (unless an argument has been passed to tell it not to set the index again, like I was suggesting in the previous post)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264309026",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13371#issuecomment-264309026",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13371",
    "id": 264309026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDMwOTAyNg==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T22:00:54Z",
    "updated_at": "2016-12-01T22:00:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ialong wrote:\r\n> That's the behaviour of my second example actually (maybe things have changed since then?):\r\n> index in \"left\" is called \"c\" but right_on='d'\r\n> as you can see the result is a column \"d\" with no NaNs, a meaningless index and no \"c\" column anywhere.\r\n\r\nI am suggesting that the current behavior should be changed, so that in your second example, the column name would be 'c' that survived.\r\n\r\n> Sorry I realise this was not very clear, what I meant was that the merge routine should (internally) be called on columns.\r\n\r\nI am not at all familiar with the current implementation, so I have no opinion on that!\r\n\r\n"
  }
]
