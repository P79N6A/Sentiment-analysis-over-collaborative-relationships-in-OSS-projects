[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/249125892",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14283#issuecomment-249125892",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14283",
    "id": 249125892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTEyNTg5Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-23T07:51:18Z",
    "updated_at": "2016-09-23T07:54:01Z",
    "author_association": "MEMBER",
    "body": "> we decide that Series.to_csv quotes in the same way as DataFrame.to_csv in which case I would expect that Series.to_csv can take argument quotechar.\n\nI think this is the better way to go (not quoting it would make it unreadable for `read_csv` in your example), and `DataFrame.to_csv` has the same default behaviour of partial quoting.\n\nThe implementation of `Series.to_csv` is just converting it to a DataFrame and then using `to_csv`, but only a selection of keywords is passed through. So fixing it is not difficult (just passing the keyword through). Interested to do a PR?\n\nBut the question is maybe also why we don't just pass everything (eg by just adding `**kwargs` that are passed through). Or is this on purpose?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/249212204",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14283#issuecomment-249212204",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14283",
    "id": 249212204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTIxMjIwNA==",
    "user": {
      "login": "JoaoAparicio",
      "id": 5380486,
      "node_id": "MDQ6VXNlcjUzODA0ODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5380486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoaoAparicio",
      "html_url": "https://github.com/JoaoAparicio",
      "followers_url": "https://api.github.com/users/JoaoAparicio/followers",
      "following_url": "https://api.github.com/users/JoaoAparicio/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoaoAparicio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoaoAparicio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoaoAparicio/subscriptions",
      "organizations_url": "https://api.github.com/users/JoaoAparicio/orgs",
      "repos_url": "https://api.github.com/users/JoaoAparicio/repos",
      "events_url": "https://api.github.com/users/JoaoAparicio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoaoAparicio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-23T14:45:23Z",
    "updated_at": "2016-09-23T14:45:23Z",
    "author_association": "NONE",
    "body": "Just passing on quotechar won't address my particular use case. If you use `quotechar=''`, even on a DataFrame, you get\n\n```\npd.DataFrame( pd.Series(['x','x,x']) ).to_csv('my_file.txt', index=False, quotechar='')\n\nTypeError: quotechar must be set if quoting enabled\n```\n\nThat's a reference to the `quoting` argument of `DataFrame.to_csv`. So you can try disabling `quoting` altogether\n\n```\nimport csv\npd.DataFrame( pd.Series(['x','x,x']) ).to_csv('my_file.txt', index=False, quoting=csv.QUOTE_NONE)\n\nError: need to escape, but no escapechar set\n```\n\nIf you have no quoting, an escape char is needed because of the comma (that's my interpretation of what's going on). If you try and make the escapechar an empty string, that won't work either\n\n```\npd.DataFrame( pd.Series(['x','x,x']) ).to_csv('my_file.txt', index=False, quoting=csv.QUOTE_NONE, escapechar='')\n\nError: need to escape, but no escapechar set\n```\n\nWhatever solution we end up finding for this use case in the DataFrame case, will probably require more than just one argument being passed on from Series to DataFrame. So maybe passing `**kwargs` is better?\n\nWhy is it so difficult to get `DataFrame.to_csv` to not quote/escape anything? I presume that function wants to stay true to its name and assure that whatever it writes to a file is valid csv :-) It seems to me that there should be a simple way to write to a file the contents of a series, one per line, without adding anything around them.\n\n[Here's](http://stackoverflow.com/questions/37357727/pandas-write-tab-separated-dataframe-with-literal-tabs-with-no-quotes) someone having a similar issue (i.e. they want to print to a file fields which contain a character which also happens to be the delimiter character whilst not escaping). The solution offered there isn't great, while leads me to think that there isn't a way to do it using pandas built-in functions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/249213609",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14283#issuecomment-249213609",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14283",
    "id": 249213609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTIxMzYwOQ==",
    "user": {
      "login": "JoaoAparicio",
      "id": 5380486,
      "node_id": "MDQ6VXNlcjUzODA0ODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5380486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoaoAparicio",
      "html_url": "https://github.com/JoaoAparicio",
      "followers_url": "https://api.github.com/users/JoaoAparicio/followers",
      "following_url": "https://api.github.com/users/JoaoAparicio/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoaoAparicio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoaoAparicio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoaoAparicio/subscriptions",
      "organizations_url": "https://api.github.com/users/JoaoAparicio/orgs",
      "repos_url": "https://api.github.com/users/JoaoAparicio/repos",
      "events_url": "https://api.github.com/users/JoaoAparicio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoaoAparicio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-23T14:50:41Z",
    "updated_at": "2016-09-23T14:51:54Z",
    "author_association": "NONE",
    "body": "Maybe a function like `Series.to_plain_file` would make sense? It doesn't necessarily make sense for DataFrames, because what's the use of storing a table in a file if you can't read it because the csv is broken? But for Series with `index=False`, maybe it makes sense.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/249214152",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14283#issuecomment-249214152",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14283",
    "id": 249214152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTIxNDE1Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-23T14:52:51Z",
    "updated_at": "2016-09-23T14:53:03Z",
    "author_association": "MEMBER",
    "body": "> It seems to me that there should be a simple way to write to a file the contents of a series, one per line, without adding anything around them.\n\nIf you don't want the guarantee of a valid csv file, you can always write the output of `s.to_string(index=False)`:\n\n```\nwith open('test.txt', 'w') as f:\n    pd.Series(['x', 'x,x']).to_string(f, index=False)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/249215289",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14283#issuecomment-249215289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14283",
    "id": 249215289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTIxNTI4OQ==",
    "user": {
      "login": "JoaoAparicio",
      "id": 5380486,
      "node_id": "MDQ6VXNlcjUzODA0ODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5380486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoaoAparicio",
      "html_url": "https://github.com/JoaoAparicio",
      "followers_url": "https://api.github.com/users/JoaoAparicio/followers",
      "following_url": "https://api.github.com/users/JoaoAparicio/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoaoAparicio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoaoAparicio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoaoAparicio/subscriptions",
      "organizations_url": "https://api.github.com/users/JoaoAparicio/orgs",
      "repos_url": "https://api.github.com/users/JoaoAparicio/repos",
      "events_url": "https://api.github.com/users/JoaoAparicio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoaoAparicio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-23T14:57:02Z",
    "updated_at": "2016-09-23T14:57:02Z",
    "author_association": "NONE",
    "body": "Got it. So why does `to_string` only accept a buffer but `to_csv` accepts either a buffer or a filename path?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/249935111",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14283#issuecomment-249935111",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14283",
    "id": 249935111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTkzNTExMQ==",
    "user": {
      "login": "JoaoAparicio",
      "id": 5380486,
      "node_id": "MDQ6VXNlcjUzODA0ODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5380486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoaoAparicio",
      "html_url": "https://github.com/JoaoAparicio",
      "followers_url": "https://api.github.com/users/JoaoAparicio/followers",
      "following_url": "https://api.github.com/users/JoaoAparicio/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoaoAparicio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoaoAparicio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoaoAparicio/subscriptions",
      "organizations_url": "https://api.github.com/users/JoaoAparicio/orgs",
      "repos_url": "https://api.github.com/users/JoaoAparicio/repos",
      "events_url": "https://api.github.com/users/JoaoAparicio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoaoAparicio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-27T17:22:59Z",
    "updated_at": "2016-09-27T17:23:27Z",
    "author_association": "NONE",
    "body": "Would there be any interest in a `to_string` which accepts filenames? If not I guess we can have this closed. I wouldn't mind implementing it.\n"
  }
]
