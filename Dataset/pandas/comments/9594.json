[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/77306058",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9594#issuecomment-77306058",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9594",
    "id": 77306058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzA2MDU4",
    "user": {
      "login": "azjps",
      "id": 7894671,
      "node_id": "MDQ6VXNlcjc4OTQ2NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7894671?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/azjps",
      "html_url": "https://github.com/azjps",
      "followers_url": "https://api.github.com/users/azjps/followers",
      "following_url": "https://api.github.com/users/azjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/azjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/azjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/azjps/subscriptions",
      "organizations_url": "https://api.github.com/users/azjps/orgs",
      "repos_url": "https://api.github.com/users/azjps/repos",
      "events_url": "https://api.github.com/users/azjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/azjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T04:49:09Z",
    "updated_at": "2015-03-05T04:49:09Z",
    "author_association": "NONE",
    "body": "For reading csvs with `pandas.read_csv` there's a [date_parser argument](http://pandas.pydata.org/pandas-docs/dev/generated/pandas.io.parsers.read_csv.html). If you know a priori that your datetime strings contain lots of duplicates are of a certain standard format, you can pass your own custom date_parser function which checks cached values of strptime. I doubt its worth doing dictionary lookups in the general case (especially when reading time series, where you might have many distinct datetimes being parsed).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/77328884",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9594#issuecomment-77328884",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9594",
    "id": 77328884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzI4ODg0",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T09:02:15Z",
    "updated_at": "2015-03-05T09:02:15Z",
    "author_association": "MEMBER",
    "body": "@charles-cooper Can you give a reproducible example? And is this approach still faster when using `pd.to_datetime` for string parsing instead of `datetime.datetime.strptime`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/77392956",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9594#issuecomment-77392956",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9594",
    "id": 77392956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzkyOTU2",
    "user": {
      "login": "azjps",
      "id": 7894671,
      "node_id": "MDQ6VXNlcjc4OTQ2NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7894671?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/azjps",
      "html_url": "https://github.com/azjps",
      "followers_url": "https://api.github.com/users/azjps/followers",
      "following_url": "https://api.github.com/users/azjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/azjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/azjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/azjps/subscriptions",
      "organizations_url": "https://api.github.com/users/azjps/orgs",
      "repos_url": "https://api.github.com/users/azjps/repos",
      "events_url": "https://api.github.com/users/azjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/azjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T16:12:19Z",
    "updated_at": "2015-03-05T16:13:13Z",
    "author_association": "NONE",
    "body": "Quick example now that I have a python terminal in front of me:\n\n``` python\nclass memoize:\n  def __init__(self, function):\n    self.function = function\n    self.memoized = {}\n\n  def __call__(self, *args):\n    try:\n      return self.memoized[args]\n    except KeyError:\n      self.memoized[args] = self.function(*args)\n      return self.memoized[args]\n\ndef to_datetime(x):\n  return pd.to_datetime(x, '%Y/%m/%d')\n\ndef time_read_csv(date_parser, num_rows=50000):\n  s = StringIO.StringIO()\n  pd.DataFrame([{'d': '2014/01/01', 'a': 0}] * num_rows).to_csv(s, index=False)\n  s.seek(0)\n  return pd.read_csv(s, parse_dates=['d'], date_parser=date_parser)\n```\n\n``` python\nIn [83]: %timeit time_read_csv(to_datetime)\n1 loops, best of 3: 4.59 s per loop\n\nIn [84]: %timeit time_read_csv(memoize(to_datetime))\n10 loops, best of 3: 185 ms per loop\n```\n\nLooks like pandas read_sql doesn't accept arbitrary date parsers, but you could read the date column as strings and apply a memoized date parser after the initial read.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/77408043",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9594#issuecomment-77408043",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9594",
    "id": 77408043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDA4MDQz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T17:24:36Z",
    "updated_at": "2015-03-05T17:25:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "there was a whole discussion of this in #9377 so the simple heuristic is this:\nI'll reproduce.\n\n```\nif you have multiple columns that need parsing, use parse_dates=[[....]].\ntry to infer the format read_csv(..., infer_datetime_format=True)\nif you have a format, the use date_parser=lambda x: pd.to_datetime(x, format=.....)\nif you have a really non-standard format, finally use date_parser=.....\nso a naked date_parser is ALWAYS the last resort (as unless it can handle a vectorized input, its in python space).\n```\n\nWith the addendum if you have a format that `infer_datetime_format` cannot readily infer then you should simply read the column is as object then use `pd.to_datetime(...format=....)` after. This will be the most performant.\n\nTrying to memoize is fine, but not necessary as that is what `infer_datetime_format` already does internally.\n\nThere was some talk of adding this to the docs (in `io.rst/read_csv` section). Anyone interested? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/77425838",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9594#issuecomment-77425838",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9594",
    "id": 77425838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDI1ODM4",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T18:54:17Z",
    "updated_at": "2015-03-05T18:54:17Z",
    "author_association": "NONE",
    "body": "Thanks for the feedback all,\n@jreback I see now that using parse_dates in read_csv results in memoization. What about in read_sql?\n\nCharles\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/198622391",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9594#issuecomment-198622391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9594",
    "id": 198622391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODYyMjM5MQ==",
    "user": {
      "login": "GeorgieBanks",
      "id": 17939356,
      "node_id": "MDQ6VXNlcjE3OTM5MzU2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17939356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GeorgieBanks",
      "html_url": "https://github.com/GeorgieBanks",
      "followers_url": "https://api.github.com/users/GeorgieBanks/followers",
      "following_url": "https://api.github.com/users/GeorgieBanks/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeorgieBanks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GeorgieBanks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeorgieBanks/subscriptions",
      "organizations_url": "https://api.github.com/users/GeorgieBanks/orgs",
      "repos_url": "https://api.github.com/users/GeorgieBanks/repos",
      "events_url": "https://api.github.com/users/GeorgieBanks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GeorgieBanks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-19T02:46:05Z",
    "updated_at": "2016-03-19T02:46:05Z",
    "author_association": "NONE",
    "body": "turns out `infer_datetime_format` memoizes date formats and not date strings as @jreback claimed, so #11665 is just a dupe of @charles-cooper 's \"not necessary\" idea.\n"
  }
]
