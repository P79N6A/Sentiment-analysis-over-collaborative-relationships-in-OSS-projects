[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3338265",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-3338265",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 3338265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzgyNjU=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-03T10:31:35Z",
    "updated_at": "2012-01-03T10:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've been experimenting with alternative solutions so far, but at the moment most of them, save for the dict intermediate, are horribly slow.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3864320",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-3864320",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 3864320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQzMjA=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-08T08:44:15Z",
    "updated_at": "2012-02-08T08:44:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I might get some code to merge in for 0.8.0, but I'd need to adapt my unit tests (which use unittest) to pandas. Is there any document on how unit tests are handled in pandas and any guidelines to follow?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4154837",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-4154837",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 4154837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTQ4Mzc=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-24T10:36:21Z",
    "updated_at": "2012-02-24T10:36:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Progress: the current implementation (not integrated in my pandas clone yet as I have no idea on how to handle things like MultiIndex, which I don't use in my normal workflow). The main advantage is that now nans are translated to R's NA:\n\n``` python\nimport numpy as np\nimport rpy2.robjects as robjects\nfrom rpy2.robjects.packages import importr\nimport rpy2.rlike.container as rlc\n\ndef dataset_to_data_frame(dataset, strings_as_factors=True):\n\n    base = importr(\"base\")\n    columns = rlc.OrdDict()\n\n    # Type casting is more efficient than rpy2's own numpy2ri\n\n    vectors = {np.float64: robjects.FloatVector,\n               np.float32: robjects.FloatVector,\n               np.float: robjects.FloatVector,\n               np.int: robjects.IntVector,\n               np.object_: robjects.StrVector,\n               np.str: robjects.StrVector}\n\n    columns = rlc.OrdDict()\n\n    for column in dataset:\n        value = dataset[column]\n        value = vectors[value.dtype.type](value)\n\n        # These SHOULD be fast as they use vector operations\n\n        if isinstance(value, robjects.StrVector):\n            value.rx[value.ro == \"nan\"] = robjects.NA_Character\n        else:\n            value.rx[base.is_nan(value)] = robjects.NA_Logical\n\n        if not strings_as_factors:\n            value = base.I(value)\n\n        columns[column] = value\n\n    dataframe = robjects.DataFrame(columns)\n\n    del columns\n\n    dataframe.rownames = robjects.StrVector(dataset.index)\n\n    return dataframe\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4703517",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-4703517",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 4703517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDM1MTc=",
    "user": {
      "login": "nspies",
      "id": 156719,
      "node_id": "MDQ6VXNlcjE1NjcxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/156719?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nspies",
      "html_url": "https://github.com/nspies",
      "followers_url": "https://api.github.com/users/nspies/followers",
      "following_url": "https://api.github.com/users/nspies/following{/other_user}",
      "gists_url": "https://api.github.com/users/nspies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nspies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nspies/subscriptions",
      "organizations_url": "https://api.github.com/users/nspies/orgs",
      "repos_url": "https://api.github.com/users/nspies/repos",
      "events_url": "https://api.github.com/users/nspies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nspies/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-26T20:35:06Z",
    "updated_at": "2012-03-26T20:35:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm an rpy2 user. This is what I'm using to go between pandas and rpy2:\n\n```\nimport numpy as np\nimport rpy2.robjects as robj\nimport rpy2.rlike.container as rlc\n\ndef pandas_data_frame_to_rpy2_data_frame(pDataframe):\n    orderedDict = rlc.OrdDict()\n\n    for columnName in pDataframe:\n        columnValues = pDataframe[columnName].values\n        filteredValues = [value if pandas.notnull(value) else robj.NA_Real \n                          for value in columnValues]\n\n        try:\n            orderedDict[columnName] = robj.FloatVector(filteredValues)\n        except ValueError:\n            orderedDict[columnName] = robj.StrVector(filteredValues)\n\n    rDataFrame = robj.DataFrame(orderedDict)\n    rDataFrame.rownames = robj.StrVector(pDataframe.index)\n\n    return rDataFrame\n```\n\nThis:\n- avoids using importr(\"base\") which is horrendously slow\n- uses the `pandas` definition of what is and isn't missing data; this may be slower but I'm not sure it will be (I have large but not enormous datasets)\n- coerces to a FloatVector unless it can't; if memory usage is an issue, it might be tried to convert to an IntVector first\n- the function name makes explicit the direction of the conversion; the current `pandas.rpy.common` module is pretty confusing as `convert_robj()` could be conversion to or from robj\n\nI'm not sure if the call to `robj.r.I()` is necessary sometimes; I've omitted it as I almost never use StrVectors in data frames.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4710291",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-4710291",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 4710291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTAyOTE=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T05:34:43Z",
    "updated_at": "2012-03-27T05:39:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "The call to \"Importr\" can be substituted with a much faster:\n\n``` python\n\nI = robjects.baseenv.get(\"I\")\nis_nan = robjects.baseenv.get(\"is.nan\")\n```\n\nbut yes, it is necessary if you deal with, e.g., \"omics\" data where you have primary identifiers (the index) and a series of non-float columns (annotation) alongside measurements (floats). If you handle strings as factors, later on if you convert them back to Python objects you will get (unless you're careful) a list of ints, rather than of strings.\n\n Also \"pandas.notnull\" doesn't work with strings (and R has a NA character type, again useful for annotations).\n\nOf course (hopefully!) this will become much simpler when numpy adapts a missing data type.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4716191",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-4716191",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 4716191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTYxOTE=",
    "user": {
      "login": "nspies",
      "id": 156719,
      "node_id": "MDQ6VXNlcjE1NjcxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/156719?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nspies",
      "html_url": "https://github.com/nspies",
      "followers_url": "https://api.github.com/users/nspies/followers",
      "following_url": "https://api.github.com/users/nspies/following{/other_user}",
      "gists_url": "https://api.github.com/users/nspies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nspies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nspies/subscriptions",
      "organizations_url": "https://api.github.com/users/nspies/orgs",
      "repos_url": "https://api.github.com/users/nspies/repos",
      "events_url": "https://api.github.com/users/nspies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nspies/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T13:31:31Z",
    "updated_at": "2012-03-27T13:31:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, fair enough on the need to use `robj.r.I()` (which I'd prefer over `robj.baseenv.get(\"I\")`).\n\nI think it's a mistake to use R's definition of missing data when converting from pandas, though -- since `pandas.notnull` doesn't recognize `\"nan\"` as null, you probably shouldn't be using that as a null value in pandas (or since you apparently are, you should convert it to something that pandas understands to be null, such as `None` or `numpy.nan`).\n\nFinally, I'd definitely move the precomputed values (`I` and `vectors`) out of the function, both for speed and readability.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4716321",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-4716321",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 4716321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTYzMjE=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T13:37:43Z",
    "updated_at": "2012-03-27T13:40:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "After reviewing my own code that uses this, I noticed that It's there mostly for \"historical\" reasons:  probably it can be  substituted by pandas' own  notnull.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4716522",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-4716522",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 4716522,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTY1MjI=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-27T13:46:22Z",
    "updated_at": "2012-03-27T13:46:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "``` python\nimport numpy as np\nfrom pandas import notnull\nimport rpy2.robjects as robjects\nfrom rpy2.robjects.packages import importr\nimport rpy2.rlike.container as rlc\n\nI = robjects.baseenv.get(\"I\")\nVECTOR_TYPES = {np.float64: robjects.FloatVector,\n               np.float32: robjects.FloatVector,\n               np.float: robjects.FloatVector,\n               np.int: robjects.IntVector,\n               np.object_: robjects.StrVector,\n               np.str: robjects.StrVector}\n\ndef dataset_to_data_frame(dataset, strings_as_factors=True):\n\n    columns = rlc.OrdDict()\n\n    for column in dataset:\n        values = dataset[column]\n        value_type = values.dtype.type\n        values = [item if notnull(item) else robjects.NA_Logical for item in values]\n        values = VECTOR_TYPES[value_type](values)\n\n        if not strings_as_factors:\n            values = I(values)\n\n        columns[column] = value\n\n    dataframe = robjects.DataFrame(columns)\n\n    del columns\n\n    dataframe.rownames = robjects.StrVector(dataset.index)\n\n    return dataframe\n```\n\nHere's another version. I should try to port my own unit tests for this to pandas....\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4973656",
    "html_url": "https://github.com/pandas-dev/pandas/issues/350#issuecomment-4973656",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/350",
    "id": 4973656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzM2NTY=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-05T09:59:25Z",
    "updated_at": "2012-04-05T09:59:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since I don't use stuff like MultiIndex etc.: How do those DataFrames get converted by convert_robj? \n"
  }
]
