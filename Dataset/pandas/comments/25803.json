[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/475476326",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25803#issuecomment-475476326",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25803",
    "id": 475476326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTQ3NjMyNg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T02:53:48Z",
    "updated_at": "2019-03-22T02:53:48Z",
    "author_association": "MEMBER",
    "body": "Why wouldn't you want to raise a Key Error here? Due to assumed alignment on daily precision?\r\n\r\nIMO it's unexpected for line 4 to return a 0 sized array "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/475495197",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25803#issuecomment-475495197",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25803",
    "id": 475495197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTQ5NTE5Nw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T05:04:10Z",
    "updated_at": "2019-03-22T05:04:10Z",
    "author_association": "MEMBER",
    "body": "I guess this is similar to indexing with an index with duplicate values (which is probably a separate issue). It's nice to be able to rety on invariants, like the size of the result matching the number of matching values in the index.\r\n\r\nKeyError makes sense for indexes without duplicates, because the alternative is returning a scalar, which isn't possible if there isn't a match."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/475532254",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25803#issuecomment-475532254",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25803",
    "id": 475532254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTUzMjI1NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T08:24:19Z",
    "updated_at": "2019-03-22T08:27:46Z",
    "author_association": "MEMBER",
    "body": "> IMO it's unexpected for line 4 to return a 0 sized array\r\n\r\nThe explanation here is that the string '2018-01-02' is to be considered as a slice, because the resolution of the string is higher than the resolution of the index:\r\n\r\n```\r\nIn [31]: s.index.resolution\r\nOut[31]: 'minute'\r\n\r\nIn [32]: _, _, resolution = parsing.parse_time_string('2018-01-02', freq=None)\r\n\r\nIn [33]: resolution \r\nOut[33]: 'day'\r\n```\r\n\r\nSo if the strings '2018-01-01', '2018-02-02' etc are considered as slices, why not '2018-03-03' ? \r\nThe only difference is that it is \"out of range\" for the index. But with normal slicing, out of range slice bounds return an empty object, and don't raise an error:\r\n\r\n```\r\nIn [34]: s.iloc[0:2]\r\nOut[34]: \r\n2018-01-01 00:00:00    1\r\n2018-02-02 01:01:00    2\r\ndtype: int64\r\n\r\nIn [35]: s.iloc[10:12]\r\nOut[35]: Series([], dtype: int64)\r\n```\r\n\r\nSo given that, I agree with @shoyer that it would be more consistent (and reliable) to return an empty object here instead of raising an error. \r\nAlthough, Stephan, note that it would still depend on the resolution of the passed string (so it would still depend to a certain extent on the value of the key, and you can't be sure that whathever string will not raise an error, but at least for datetime strings of the same resolution, it wouldn't depend any more on the exact value)."
  }
]
