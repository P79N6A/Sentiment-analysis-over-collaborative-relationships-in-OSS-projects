[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383474679",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20791#issuecomment-383474679",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20791",
    "id": 383474679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzQ3NDY3OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T07:03:07Z",
    "updated_at": "2018-04-23T07:03:07Z",
    "author_association": "MEMBER",
    "body": "As I said on gitter, we have been consistently changing this in several conversion functions to always return native python types if possible:\r\n\r\n```\r\nIn [44]: s = pd.Series([1, 2, 3])\r\n\r\nIn [45]: type([i for i in s][0])\r\nOut[45]: int\r\n\r\nIn [46]: type(list(s)[0])\r\nOut[46]: int\r\n\r\nIn [47]: type(s.to_dict()[0])\r\nOut[47]: int\r\n```\r\n\r\nSince many of ``list(..)`` and `to_dict` etc rely on iterating, I suppose we decide to let iterating return native python types.\r\n\r\nTo have some context: https://github.com/pandas-dev/pandas/issues/13258, https://github.com/pandas-dev/pandas/pull/17491, https://github.com/pandas-dev/pandas/issues/16048, and many others.\r\n\r\nI agree this can certainly be surprising, and it's possible this can use better information in the docs. Or thinking about ways to give an option to the users, ...\r\n\r\nBut as I also said on gitter, it would be good to see some actual reasons for caring about this (the typing one is good). As if performance is your concern, you should try to see how you can avoid iterating over Series at all.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383529869",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20791#issuecomment-383529869",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20791",
    "id": 383529869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzUyOTg2OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T10:32:21Z",
    "updated_at": "2018-04-23T10:32:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "several other related: #13468, #13236, #15385  and closing as duplicate of #13468 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383614713",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20791#issuecomment-383614713",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20791",
    "id": 383614713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzYxNDcxMw==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T15:22:52Z",
    "updated_at": "2018-04-23T16:02:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Issues you linked above mostly talk about `iterrows`. That one is to me less problematic because you are anyway getting `Series` and so you know that it is a Pandas object and things are getting converted, and all dtypes have to be converted upwards anyway to be able to store into one `Series` across columns. This is well documented as well:\r\n\r\n> Because iterrows returns a Series for each row, it does not preserve dtypes across the rows (dtypes are preserved across columns for DataFrames).\r\n\r\nBut the important thing is that they are upcasted to a common dtype, not Python scalar. Even documentation shows so:\r\n\r\n```\r\n>>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\r\n>>> row = next(df.iterrows())[1]\r\n>>> row\r\nint      1.0\r\nfloat    1.5\r\nName: 0, dtype: float64\r\n>>> print(row['int'].dtype)\r\nfloat64\r\n>>> print(df['int'].dtype)\r\nint64\r\n```\r\n\r\nThe snippet above is taken from documentation for `iterrows`. As you see, values are `float64`, not Python `float`. For me this behavior is reasonable and normal and expected. It is the same as what happens in numpy if you want to store values of different dtypes into same array, they have to be upcasted to a common dtype. `Series` has the same semantic, it can hold only one dtype. And if you call df.values` the same thing happens.\r\n\r\nWhat my issue here is that then user can ask, OK, how can I get things without this conversion. Oh, there is `itertuples`, great. Let's use that. But then instead of converting to common dtype, now you get conversion to Python scalars. Which is maybe cool, but you cannot really have then a way to get rows out which match dtypes as stored in DataFrame.\r\n\r\nMy proposal would be to change the `itertuples` to:\r\n\r\n```python\r\nitertuples(self, index=True, name=\"Pandas\", raw=False):\r\n```\r\n\r\nIf `raw` (or some other similar name) would be set to `True`, then it would be returning values which match `dtypes` types. I think this is a backwards compatible change and allows one to really get matching types to what is claimed in dtypes.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383634911",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20791#issuecomment-383634911",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20791",
    "id": 383634911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzYzNDkxMQ==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T16:19:22Z",
    "updated_at": "2018-04-23T16:19:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am realizing there is some deeper issue with iterrows as well and I [reported it in its issue](https://github.com/pandas-dev/pandas/issues/13468#issuecomment-383634755)."
  }
]
