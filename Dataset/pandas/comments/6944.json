[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41217691",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6944#issuecomment-41217691",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6944",
    "id": 41217691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjE3Njkx",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-23T21:33:08Z",
    "updated_at": "2014-04-23T21:33:08Z",
    "author_association": "MEMBER",
    "body": ":+1: nice list\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53833954",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6944#issuecomment-53833954",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6944",
    "id": 53833954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzODMzOTU0",
    "user": {
      "login": "mcjcode",
      "id": 6242856,
      "node_id": "MDQ6VXNlcjYyNDI4NTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6242856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcjcode",
      "html_url": "https://github.com/mcjcode",
      "followers_url": "https://api.github.com/users/mcjcode/followers",
      "following_url": "https://api.github.com/users/mcjcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcjcode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcjcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcjcode/subscriptions",
      "organizations_url": "https://api.github.com/users/mcjcode/orgs",
      "repos_url": "https://api.github.com/users/mcjcode/repos",
      "events_url": "https://api.github.com/users/mcjcode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcjcode/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-29T03:37:08Z",
    "updated_at": "2014-08-29T03:37:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Question: Are all of the items on the `SeriesGroupBy` and `DataFrameGroupBy` whitelists meant to pass through to the underlying `Series` and `DataFrame` members?  From what I can tell there are many items on the respective whitelists that are handled before they can ever be so dispatched.  Here is a list:\n\n`first`, `last`, `min`, `max`, `sum` - all defined as members in the `GroupBy` class definition (using `_groupby_function`).  (`GroupBy.prod` is also defined in this way, but is not whitelisted.)  And `boxplot` is also a defined member of `DataFrameGroupBy` (but not `SeriesGroupBy`). \n\n`count`, `cumcount`, `head`, `tail`, `mean`, `median` - all defined, with `def` keyword, in the `GroupBy` class definition.\n\nI ask because I'm proposing to define the whitelisted methods at class definition time, instead of relying on the `GroupBy.__getattr__` to dynamically create them at the time they are invoked.  And so sphinx will generate the documentation for all passed-through methods just like the ones that have first-class definitions in the Class.\n\nBut that often _overrides_ the explicit method definitions listed above. And sometimes they don't even do the same thing. Which makes me suspect that these dozen or so whitelisted methods no longer really should be handled in this way (i.e. they already have explicit class definitions that take priority.)\n\nSo, can anyone think of a reason why we shouldn't just remove these names from the `{Series,DataFrame}GroupBy` whitelists?  If not, I'll make a pull request addressing #6944 that uses this as part of the solution (with an appropriately updated `test_groupby:test_groupby_whitelist`.)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53882005",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6944#issuecomment-53882005",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6944",
    "id": 53882005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzODgyMDA1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-29T14:21:49Z",
    "updated_at": "2014-08-29T14:21:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "by definition the cythonized functions (and a few others which sometimes be cythonized) are defined inline on the groupby objects (eg min,mean,sum etc)\nso these are not passed thru\n\nyou can define the whitelist methods in the classes (and just have the getattr raise an error I suppose)\n(and this define the doc strings) - if a method exists in the class it is called before getattr is ever called so of course these override the whitelist\n\nprod is prob an error that it is not defined\nsome methods only work in frames and not on series so that is done on purpose (boxplot)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/353450361",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6944#issuecomment-353450361",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6944",
    "id": 353450361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzQ1MDM2MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T20:29:42Z",
    "updated_at": "2017-12-21T20:29:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this will be easier with Python3 since we can rewrite function signatures without much hassle (something like https://github.com/pandas-dev/pandas/blob/08a66e111a60b9a25fb59a0dcc691c3f1ec0ad1e/pandas/util/_decorators.py#L128). Then we can get proper signatures instead of `**kwargs`."
  }
]
