[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20134832",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4059#issuecomment-20134832",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4059",
    "id": 20134832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTM0ODMy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-27T16:14:18Z",
    "updated_at": "2013-06-27T16:14:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "related #3066\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20139567",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4059#issuecomment-20139567",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4059",
    "id": 20139567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTM5NTY3",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-27T17:08:54Z",
    "updated_at": "2013-06-27T17:09:38Z",
    "author_association": "MEMBER",
    "body": "groupby in the backend?\n\n```\nIn [5]: df = DataFrame(randn(10,10))\n\nIn [6]: gb = df.groupby(lambda x: x < 5, axis=0)\n\nIn [7]: [v for _, v in gb]\nOut[7]:\n[       0      1      2      3      4      5      6      7      8      9\n5 -0.047  0.813 -0.253 -1.443 -0.683  0.116 -0.155  0.159  0.359  0.497\n6 -1.626  0.496  1.572 -1.056  0.579  0.312 -1.139  1.367 -0.158  1.679\n7 -0.029  0.541  1.299  0.513 -0.562  0.489  0.408 -0.305  0.824 -0.200\n8  0.318 -0.764  1.497 -1.704 -0.540  1.045  0.143 -0.457 -2.026 -0.795\n9 -0.082 -1.585  0.623  0.251 -0.528 -0.270  0.874 -1.674 -0.711 -0.110,\n        0      1      2      3      4      5      6      7      8      9\n0 -0.736  0.413  0.837 -1.141 -0.112  1.974 -0.861 -0.795  0.487  1.169\n1 -1.150  0.914 -0.847 -0.009  1.028 -1.988 -1.140 -0.515  0.080  0.094\n2 -1.013  0.546 -0.603  0.874  1.123  0.950  0.710 -2.143 -1.726 -1.555\n3 -0.824 -0.051 -1.438 -0.821 -0.541 -0.851 -0.135 -0.331 -1.607 -0.250\n4 -1.309 -0.197 -0.042  0.909  0.695  0.364  0.364  0.860 -1.074  1.805]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/29061036",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4059#issuecomment-29061036",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4059",
    "id": 29061036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDYxMDM2",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-22T09:53:10Z",
    "updated_at": "2014-01-15T10:02:26Z",
    "author_association": "NONE",
    "body": "In retrospect, #3066 actually points out **two** missing operations from the API: `split_by` and `partition`.\n\n``` python\n>>> [1 1 2 2 11].groupby( identity)\n[(1,1,1,1) (2,2)]\n>>> [1 1 2 2 11].partition(identity)\n[(1,1) (2,2) (1,1)]\n>>> [1 1 2 2 11].split_by(is_2)\n[(1 1 2) (2) (1 1)]\n```\n\npartition and split_by can be thought of as the same operation with edge \nexclusive/inclusive semantics respectively. \n\nShould probably return a groupby-like object, rather then a collection of frames directly\nlike the SO question wanted. Easy to recover the frames from that. Though a map\nwon't do since keys may not be unique. Just the per group operations provided by \nthe container class.\n\nUpdate:\n\n```\n>>> [1 2 3 4 5].partition(3,2)\n[(1,2, 3) (3,4,5)]\n```\n\nrelated https://github.com/pydata/pandas/issues/5494, https://github.com/pydata/pandas/issues/936\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33408564",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4059#issuecomment-33408564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4059",
    "id": 33408564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDA4NTY0",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-27T19:02:47Z",
    "updated_at": "2014-01-27T19:02:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "[Another example](http://stackoverflow.com/questions/21389009/pandas-plotting-lines-from-different-columns-ignoring-values) where y-p's `split_at` could be useful. In that case something like `df.split_at(pd.isnull)` would partition into the contiguous groups of valid points. From there it would be `.apply(lambda x: [x.head(1)['high'], x.tail(10)['low'])` or something like that.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33410830",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4059#issuecomment-33410830",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4059",
    "id": 33410830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDEwODMw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-27T19:24:32Z",
    "updated_at": "2014-01-27T19:27:47Z",
    "author_association": "NONE",
    "body": "I think the groupby idiom can be usefull generalized to support different types of\npartitioning/splitting semantics.\n\nOne kink is that In general, group keys may not be distinct ( result keys may look like [1 2 1]).\nThat's not a problem for the apply step which iterates over all the groups anyway.\nBut we'll have to break away from groupby's dict mechanism in favor of\nof an ordered list of groups and a multisey mapping keys to positions  in the group list.\n\nThe different kinds of split/partition/group semantics possible, such as\ninclusive/exclusive splitting may require a keyfunc that consumes a pair of (or n) rows\n(Examples: split when delta_foo > 0.3 for example, split on delta_moving_avarage(nwin) > 0.2), \nand I haven't come up with a good way to do that without getting baroque.\n\nAllowing overlapping groups is another twist.\n\nShould trim fluff features before attempting implementation.\n"
  }
]
