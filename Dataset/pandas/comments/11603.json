[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/156776960",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-156776960",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 156776960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njc3Njk2MA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-15T04:07:06Z",
    "updated_at": "2015-11-15T04:07:06Z",
    "author_association": "MEMBER",
    "body": "Cc @jhamman who has been working on this for xray.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/156827238",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-156827238",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 156827238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NjgyNzIzOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-15T16:29:09Z",
    "updated_at": "2015-11-15T16:29:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "pushing to 0.18.0, I think `__getitem__` will be a really nice add here. might as well do all of this at once.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/158808182",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-158808182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 158808182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODgwODE4Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-22T22:17:05Z",
    "updated_at": "2015-11-22T22:17:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, this is ready, MUCH bigger rabbit hole that I thought.\n\nnote on the doc-strings. \n\nSince now we have much more like a groupby interface, e.g. \n\n`s.rolling(....).sum()`, the doc-strings for `Rolling.sum` are minimal but have a See also back to the Series/DataFrame.rolling (We don't have the notion of a `RollingSeries`,`RolldingDataFrame` class so this would be quite tricky).\n\nFurther I did the same with groupby doc-strings (again don't have the class distinction on the See Also).\n\n@jorisvandenbossche @shoyer @sinhrks @TomAugspurger @cpcloud \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/159468607",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-159468607",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 159468607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTQ2ODYwNw==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-25T02:27:20Z",
    "updated_at": "2015-11-25T02:27:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "One thing I've wanted to add but haven't, which may be easier using this framework, at least interface-wise, is rolling exponentially weighted functions -- i.e. add a window to all the ewm*() parameters. Obviously this would need to be implemented in Cython for performance, but perhaps interface-wise it would be simpler using the scheme proposed here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/159469188",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-159469188",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 159469188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTQ2OTE4OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-25T02:28:49Z",
    "updated_at": "2015-11-25T02:28:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep that would be quite straightforward to do interface wise but yes would need to be added to the cython functions (but not too hard there)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/159661699",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-159661699",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 159661699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTY2MTY5OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-25T16:23:37Z",
    "updated_at": "2015-11-25T16:23:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "any comments?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160446518",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160446518",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160446518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDQ0NjUxOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-29T18:40:34Z",
    "updated_at": "2015-11-29T18:42:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer @jorisvandenbossche \n\nok so you are both in favor of completely deprecating both `freq/how`.\n\nan alternative is add them a keywords like we have 'how' now, e.g. in the actual functions themselves, rather than as an attribute of a `Rolling` type of object.\n\nI think they are there to prevent common errors. E.g. say you have 1-min data and want daily rolling stats. Then in order to do this we would have:\n\n`s.resample('D',how='max').rolling(window=3).max()`\n\nrather than (not that the `how` is currently defaulted, but shown for clarity\n`s.rolling(window=3).max(freq='D',how='max')`\nor\n`s.rolling(window=3,freq='D').max(how='max')`\n\nFurther now that I look at it, the window above is a function of the data (by definition), and IIRC, this is a source of confusion. I wonder if `window='3D'` would make this more clear.\n\ne.g.\n`s.rolling(window='3D').max()`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160493716",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160493716",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160493716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDQ5MzcxNg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-30T01:34:12Z",
    "updated_at": "2015-11-30T01:34:12Z",
    "author_association": "MEMBER",
    "body": "> Further now that I look at it, the window above is a function of the data (by definition), and IIRC, this is a source of confusion. I wonder if window='3D' would make this more clear.\n\nI like the idea of defining rolling window size in terms of index frequency, but I think this particular API would be confusing. In particular, it starts to make a distinction between `1H` and `60Min` which resample does not -- the magnitude and unit for the frequency are now independently meaningful. It will be surprising when these start to give different results.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160498327",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160498327",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160498327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDQ5ODMyNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-30T02:15:45Z",
    "updated_at": "2015-11-30T02:15:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok that was just a wild thought\n\nso what about making freq/how optional args to each function then ? \n\nor still think we ought to deprecate ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160551346",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160551346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160551346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDU1MTM0Ng==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-30T08:10:51Z",
    "updated_at": "2015-11-30T08:10:51Z",
    "author_association": "MEMBER",
    "body": "I'm still in favor of deprecating freq/how. If we can't come up with an unambiguous place to put the arguments that's a good sign that they aren't a good fit.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160943433",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160943433",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160943433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDk0MzQzMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T11:42:47Z",
    "updated_at": "2015-12-01T11:42:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer @jorisvandenbossche ok, deprecated `freq`, `how`.\n\nOn another note, might this be a good time to fix `.resample`, so\n\n`s.resample('D',how='max')` -> `s.resample('D').max()`.\n\nNote that this WOULD be a breaking change, meaning the `s.resample('D')` would raise an exception rather than 'just work', because the `how` arg is defaulted to `'mean'`. So it wouldn't go unnoticed.\n\nthoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160948598",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160948598",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160948598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDk0ODU5OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T12:06:39Z",
    "updated_at": "2015-12-01T12:06:39Z",
    "author_association": "MEMBER",
    "body": "@jreback I don't think a deprecation is needed? It is fully new API, so I wouldn't add things we will remove shortly. \nIt just means that not all `pd.rolling_mean(..)` translates exactly to a `df.rolling(..).mean(..)`, but I don't think that is a problem.\n\nIn some way I also like that `resample` would look more like `groupby` and now `rolling`, but this is indeed more controversial (more breaking). But maybe let's leave that discussion for a separate issue? (it is already complicated enough here :-))\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160950188",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160950188",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160950188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDk1MDE4OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T12:13:41Z",
    "updated_at": "2015-12-01T12:13:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche I left in the deprecations in `freq`/`how` so that existing code would run and just throw deprecation warnings, rather than breaking things straightaway.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160950431",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160950431",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160950431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDk1MDQzMQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T12:15:07Z",
    "updated_at": "2015-12-01T12:15:07Z",
    "author_association": "MEMBER",
    "body": "Implementation wise: the old `pd.rolling_..` functions are using the new implementation under the hood?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160951580",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160951580",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160951580,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDk1MTU4MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T12:19:15Z",
    "updated_at": "2015-12-01T12:19:15Z",
    "author_association": "MEMBER",
    "body": "Hmm, which is indeed the case I think. In that case it is indeed more difficult to leave out the freq/how keywords .. It is not easier to just leave the old implementation as is?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/160952343",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-160952343",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 160952343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDk1MjM0Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T12:22:10Z",
    "updated_at": "2015-12-01T12:22:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche the old API is wrapping the new API. This cleans up a massive amount of code, which was a secondary goal here. \n\nI _can_ do this to allow the existing `pd.rolling_*` to accept `freq`/`how` but not the new ones I think. \nBut not really sure this is that big of a deal. In 0.19.0 we just drop these new deprecations (along with `pd.rolling_*`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161130138",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161130138",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161130138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTEzMDEzOA==",
    "user": {
      "login": "jonblunt",
      "id": 3467317,
      "node_id": "MDQ6VXNlcjM0NjczMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3467317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonblunt",
      "html_url": "https://github.com/jonblunt",
      "followers_url": "https://api.github.com/users/jonblunt/followers",
      "following_url": "https://api.github.com/users/jonblunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonblunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonblunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonblunt/subscriptions",
      "organizations_url": "https://api.github.com/users/jonblunt/orgs",
      "repos_url": "https://api.github.com/users/jonblunt/repos",
      "events_url": "https://api.github.com/users/jonblunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonblunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T23:27:56Z",
    "updated_at": "2015-12-01T23:27:56Z",
    "author_association": "NONE",
    "body": "Just catching up on this thread.   I have extensive code where the\noptimization is to pass a naked np.ndarray to pd.rolling_median.\n\nIt is a looped  median smoothing across 42M separate time series.By keeping\nit as ndarrays I can use numba acceleration on some of the other code , e.g\n the stopping criteria.\n\nAn early post says\n- complete back compat, e.g. everything just works like it did\n\nBut is that true in this case.\n\nOn Tue, Dec 1, 2015 at 6:22 AM, Jeff Reback notifications@github.com\nwrote:\n\n> @jorisvandenbossche https://github.com/jorisvandenbossche the old API\n> is wrapping the new API. This cleans up a massive amount of code, which was\n> a secondary goal here.\n> \n> I _can_ do this to allow the existing pd.rolling_\\* to accept freq/how but\n> not the new ones I think.\n> But not really sure this is that big of a deal. In 0.19.0 we just drop\n> these new deprecations (along with pd.rolling_*\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/pull/11603#issuecomment-160952343.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161132205",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161132205",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161132205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTEzMjIwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T23:37:56Z",
    "updated_at": "2015-12-01T23:37:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "of course - u will get a deprecation warning in any event\n\nit is quite trivial to wrap a Series around it so this shouldn't be a problem anyhow\n\nwhy would u loop around a rolling_median? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161136118",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161136118",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161136118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTEzNjExOA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-01T23:58:22Z",
    "updated_at": "2015-12-01T23:58:22Z",
    "author_association": "MEMBER",
    "body": "@jonblunt if you're using pure numpy arrays, you might just want to use [bottleneck](https://github.com/kwgoodman/bottleneck)'s `move_median` instead.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161157875",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161157875",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161157875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTE1Nzg3NQ==",
    "user": {
      "login": "jonblunt",
      "id": 3467317,
      "node_id": "MDQ6VXNlcjM0NjczMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3467317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonblunt",
      "html_url": "https://github.com/jonblunt",
      "followers_url": "https://api.github.com/users/jonblunt/followers",
      "following_url": "https://api.github.com/users/jonblunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonblunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonblunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonblunt/subscriptions",
      "organizations_url": "https://api.github.com/users/jonblunt/orgs",
      "repos_url": "https://api.github.com/users/jonblunt/repos",
      "events_url": "https://api.github.com/users/jonblunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonblunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T02:16:15Z",
    "updated_at": "2015-12-02T02:16:15Z",
    "author_association": "NONE",
    "body": "The algorithm is a median smoothing that requires repeated iteration until\nstopping condition i reached (mapd of the smoothed n with smoothed n-1)\n\nIn addition between each pass the smoothed series is compared to the\noriginal data to identify any outliers.  There are also specific rules\nabout how to interpolate / fill across Nans.. This basically rules out\nbottleneck which does not allow nans in the series.\n\nThe fact that each series is different, has different masked days and will\nstop after a varying number of passes makes it difficult to  run at a more\naggregate level than the single time series.\n\nIn the optimized code running this for 45000 series  each of length 160\ntakes 7 min It starts with  a single series and multiindex and in two\nnested groupbys runs the smoothing algorithm on a single series and then\nreturns a single dataframe of the same shape and index as the original.\n\nOf the 7 min, that smooth_a_series inner loop takes 4 min of which the\nrolling moment time is  70 seconds.\n\nIf I go back to using series , and masking values in the series , saving\nthe results to series and then looking for outlier values in the series and\na mapd calculation across the two series  this adds another 2-3 min to the\nrun time;  or since this is 0.25 % of the total or about  15hrs cumulative\nrun time.  By staying in ndarrays and saving values in place I displace\ngazillion object creations.\n\nBut let me say the skiplist moving median algorithm for moving median is\nwhy we are using pandas for this project.There is a reason why Oracle does\nnot have a moving median   algorithm either inits database or,last time I\nchecked, in its native functions in Oracle Enterprise R. naive sorting\nalgorthms really don't scale for this .\n\nOn Tue, Dec 1, 2015 at 5:58 PM, Stephan Hoyer notifications@github.com\nwrote:\n\n> @jonblunt https://github.com/jonblunt if you're using pure numpy\n> arrays, you might just want to use bottleneck\n> https://github.com/kwgoodman/bottleneck's move_median instead.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/pull/11603#issuecomment-161136118.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161166961",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161166961",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161166961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTE2Njk2MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T03:16:52Z",
    "updated_at": "2015-12-02T03:16:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonblunt well, not really sure what exactly you are doing, and not really sure where your bottlenecks are. n any event, this is trivial to wrap/unwrap these using the new API; and this is costless.\n\n```\nIn [5]: arr = np.arange(5)\n\nIn [6]: Series(arr).rolling(window=2).median().values\nOut[6]: array([ nan,  0.5,  1.5,  2.5,  3.5])\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161167097",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161167097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161167097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTE2NzA5Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T03:18:10Z",
    "updated_at": "2015-12-02T03:18:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "BTW you should NEVER use nested groupby, simply use a multi-groupby.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161170988",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161170988",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161170988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTE3MDk4OA==",
    "user": {
      "login": "jonblunt",
      "id": 3467317,
      "node_id": "MDQ6VXNlcjM0NjczMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3467317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonblunt",
      "html_url": "https://github.com/jonblunt",
      "followers_url": "https://api.github.com/users/jonblunt/followers",
      "following_url": "https://api.github.com/users/jonblunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonblunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonblunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonblunt/subscriptions",
      "organizations_url": "https://api.github.com/users/jonblunt/orgs",
      "repos_url": "https://api.github.com/users/jonblunt/repos",
      "events_url": "https://api.github.com/users/jonblunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonblunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T03:35:42Z",
    "updated_at": "2015-12-02T03:35:42Z",
    "author_association": "NONE",
    "body": "I can see the  overhead of nested groupbys.  Its on my list, but it is a\nbig refactor..\n\nIn any case is there any way to maintain access to this great algorithm\nwithout it being a method of an object. if it is not in the main name\nspace, could there  a utility module that  exposes the bare algorithm which\nis going t\n\nOn Tue, Dec 1, 2015 at 9:18 PM, Jeff Reback notifications@github.com\nwrote:\n\n> BTW you should NEVER use nested groupby, simply use a multi-groupby.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/pull/11603#issuecomment-161167097.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161180237",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161180237",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161180237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTE4MDIzNw==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T04:51:36Z",
    "updated_at": "2015-12-02T04:51:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonblunt \nyou mean something like this?\n\n```\ndef rolling_median(arr, window):\n    return Series(arr).rolling(window=window).median().values\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161397231",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161397231",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161397231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTM5NzIzMQ==",
    "user": {
      "login": "jonblunt",
      "id": 3467317,
      "node_id": "MDQ6VXNlcjM0NjczMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3467317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonblunt",
      "html_url": "https://github.com/jonblunt",
      "followers_url": "https://api.github.com/users/jonblunt/followers",
      "following_url": "https://api.github.com/users/jonblunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonblunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonblunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonblunt/subscriptions",
      "organizations_url": "https://api.github.com/users/jonblunt/orgs",
      "repos_url": "https://api.github.com/users/jonblunt/repos",
      "events_url": "https://api.github.com/users/jonblunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonblunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T18:54:24Z",
    "updated_at": "2015-12-02T18:54:24Z",
    "author_association": "NONE",
    "body": "That's what I don't want to do, but think I will have to\n\nI just tested that approach with these results\n\nsmoothed = rolling_median(array, params)\n\nwhere both smoothed and  array are numpy arrays.  Actually they are slices\nof the same array.\n\nUsing profiler, all the calls to rolling moments are made from one\nfunction whose total run time was\n\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n\n300171    1.462    0.000  130.972    0.000\nsmooth_item_at_loc_very_fast.py:174(smooth_once)\n\n I then replaced each call to ther rolling functions with this wrapper that\njust puts the array in a series and  then returns the raw values\n\ndef alg_wrap(alg, *_params):\n    def _alg(array, *_kargs):\n        return alg(pd.Series(array), *_kargs).values\n    return partial(_alg, *_params)\n\nThe new results were\n\n300171    1.716    0.000  204.076    0.001\nsmooth_item_at_loc_almost_very_fast.py:174(smooth_once)\n\n Using the 'numpy array rolling moments took  57s cumulative run time. so\nthe increase is more than the basic time to run the algorithm.\n\n70s x 400  `= 8hrs cumulative run time across the full workload.\n\nAt this point in the code all the arrays are the same length  , one row per\nday no missing rows, so I don't need any alignment or reindexing support.\nI only put the data back into a pandas DataFrame at the end to return from\nthe group by at the next step.\n\nI am thinking of some\n\nOn Tue, Dec 1, 2015 at 10:51 PM, Ka Wo Chen notifications@github.com\nwrote:\n\n> @jonblunt https://github.com/jonblunt\n> you mean something like this?\n> \n> def rolling_median(arr, window):\n>     return Series(arr).rolling(window=window).median().values\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/pull/11603#issuecomment-161180237.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161402786",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161402786",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161402786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTQwMjc4Ng==",
    "user": {
      "login": "jonblunt",
      "id": 3467317,
      "node_id": "MDQ6VXNlcjM0NjczMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3467317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonblunt",
      "html_url": "https://github.com/jonblunt",
      "followers_url": "https://api.github.com/users/jonblunt/followers",
      "following_url": "https://api.github.com/users/jonblunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonblunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonblunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonblunt/subscriptions",
      "organizations_url": "https://api.github.com/users/jonblunt/orgs",
      "repos_url": "https://api.github.com/users/jonblunt/repos",
      "events_url": "https://api.github.com/users/jonblunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonblunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T19:16:16Z",
    "updated_at": "2015-12-02T19:16:16Z",
    "author_association": "NONE",
    "body": "Incomplete thought in last post.\n\n I was thinking of defining  the rolling median algorithm outside the\npandas object and then adding it as a method to the pandas objects.\n\nthen provide a decorator to add the method to a lightweight object\n\nclass null_series(object):\ndef wrap_moment( array, params)\n\ndef rolling_median(arr, window):\n    return Series(arr).rolling(window=window).median().values\n\nOn Wed, Dec 2, 2015 at 12:54 PM, Jon Blunt jonblunt99@gmail.com wrote:\n\n> That's what I don't want to do, but think I will have to\n> \n> I just tested that approach with these results\n> \n> smoothed = rolling_median(array, params)\n> \n> where both smoothed and  array are numpy arrays.  Actually they are slices\n> of the same array.\n> \n> Using profiler, all the calls to rolling moments are made from one function whose total run time was\n> \n> ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n> \n> 300171    1.462    0.000  130.972    0.000 smooth_item_at_loc_very_fast.py:174(smooth_once)\n> \n>  I then replaced each call to ther rolling functions with this wrapper\n> that just puts the array in a series and  then returns the raw values\n> \n> def alg_wrap(alg, *_params):\n>     def _alg(array, *_kargs):\n>         return alg(pd.Series(array), *_kargs).values\n>     return partial(_alg, *_params)\n> \n> The new results were\n> \n> 300171    1.716    0.000  204.076    0.001 smooth_item_at_loc_almost_very_fast.py:174(smooth_once)\n> \n>  Using the 'numpy array rolling moments took  57s cumulative run time. so\n> the increase is more than the basic time to run the algorithm.\n> \n> 70s x 400  `= 8hrs cumulative run time across the full workload.\n> \n> At this point in the code all the arrays are the same length  , one row\n> per day no missing rows, so I don't need any alignment or reindexing\n> support.  I only put the data back into a pandas DataFrame at the end to\n> return from the group by at the next step.\n> \n> I am thinking of some\n> \n> On Tue, Dec 1, 2015 at 10:51 PM, Ka Wo Chen notifications@github.com\n> wrote:\n> \n> > @jonblunt https://github.com/jonblunt\n> > you mean something like this?\n> > \n> > def rolling_median(arr, window):\n> >     return Series(arr).rolling(window=window).median().values\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/pydata/pandas/pull/11603#issuecomment-161180237.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161432197",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161432197",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161432197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTQzMjE5Nw==",
    "user": {
      "login": "jonblunt",
      "id": 3467317,
      "node_id": "MDQ6VXNlcjM0NjczMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3467317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonblunt",
      "html_url": "https://github.com/jonblunt",
      "followers_url": "https://api.github.com/users/jonblunt/followers",
      "following_url": "https://api.github.com/users/jonblunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonblunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonblunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonblunt/subscriptions",
      "organizations_url": "https://api.github.com/users/jonblunt/orgs",
      "repos_url": "https://api.github.com/users/jonblunt/repos",
      "events_url": "https://api.github.com/users/jonblunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonblunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T20:58:53Z",
    "updated_at": "2015-12-02T20:58:53Z",
    "author_association": "NONE",
    "body": "This is the basis of the scheme I was thinking of but I am not a great meta\nprogrammer.\n\nNull series needs all the instance/class attributes that the Series\nrolling moment method uses.\n\nThis looks wierd because the existing rolling median is not a method\n\niimport pandas as pd\nimport numpy as np\n\nclass Null_Series(object):\n    def **init**(self, kargs):\n        self.params  = kargs\n    def **getattr**(self, attr):\n            return self.params[attr]\n    def **call**(self, value, *_kargs):\n        kkargs  = self.params.copy()\n        kkargs.update(kargs)\n        self.value =value\n        return self.moment(self, *_kkargs )\n\n```\ndef wraped_moment( moment, **params):\nobj = Null_Series(params)\nobj.moment = moment\nreturn obj\n```\n\ndef rolling_median( self, *_kargs):\n    return pd.rolling_median( self.value, *_kargs )\n\narray =np.asarray([ 1.0, 2.0, 3.0, 4.0, np.nan, 6.0 ,np.nan, 8.0, 9.0 ,\n10.0 ])\n\nrolling_median_obj  = wraped_moment(rolling_median, window  = 3)\n\nrolling_median_obj(array, min_periods = 2)\n\narray([ nan,  1.5,  2. ,  3. ,  3.5,  5. ,  nan,  7. ,  8.5,  9. ])\n\nOn Wed, Dec 2, 2015 at 1:16 PM, Jon Blunt jonblunt99@gmail.com wrote:\n\n> Incomplete thought in last post.\n> \n>  I was thinking of defining  the rolling median algorithm outside the\n> pandas object and then adding it as a method to the pandas objects.\n> \n> then provide a decorator to add the method to a lightweight object\n> \n> class null_series(object):\n> def wrap_moment( array, params)\n> \n> def rolling_median(arr, window):\n>     return Series(arr).rolling(window=window).median().values\n> \n> On Wed, Dec 2, 2015 at 12:54 PM, Jon Blunt jonblunt99@gmail.com wrote:\n> \n> > That's what I don't want to do, but think I will have to\n> > \n> > I just tested that approach with these results\n> > \n> > smoothed = rolling_median(array, params)\n> > \n> > where both smoothed and  array are numpy arrays.  Actually they are\n> > slices of the same array.\n> > \n> > Using profiler, all the calls to rolling moments are made from one function whose total run time was\n> > \n> > ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n> > \n> > 300171    1.462    0.000  130.972    0.000 smooth_item_at_loc_very_fast.py:174(smooth_once)\n> > \n> >  I then replaced each call to ther rolling functions with this wrapper\n> > that just puts the array in a series and  then returns the raw values\n> > \n> > def alg_wrap(alg, *_params):\n> >     def _alg(array, *_kargs):\n> >         return alg(pd.Series(array), *_kargs).values\n> >     return partial(_alg, *_params)\n> > \n> > The new results were\n> > \n> > 300171    1.716    0.000  204.076    0.001 smooth_item_at_loc_almost_very_fast.py:174(smooth_once)\n> > \n> >  Using the 'numpy array rolling moments took  57s cumulative run time. so\n> > the increase is more than the basic time to run the algorithm.\n> > \n> > 70s x 400  `= 8hrs cumulative run time across the full workload.\n> > \n> > At this point in the code all the arrays are the same length  , one row\n> > per day no missing rows, so I don't need any alignment or reindexing\n> > support.  I only put the data back into a pandas DataFrame at the end to\n> > return from the group by at the next step.\n> > \n> > I am thinking of some\n> > \n> > On Tue, Dec 1, 2015 at 10:51 PM, Ka Wo Chen notifications@github.com\n> > wrote:\n> > \n> > > @jonblunt https://github.com/jonblunt\n> > > you mean something like this?\n> > > \n> > > def rolling_median(arr, window):\n> > >     return Series(arr).rolling(window=window).median().values\n> > > \n> > > —\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/pydata/pandas/pull/11603#issuecomment-161180237.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161464390",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161464390",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161464390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTQ2NDM5MA==",
    "user": {
      "login": "jonblunt",
      "id": 3467317,
      "node_id": "MDQ6VXNlcjM0NjczMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3467317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonblunt",
      "html_url": "https://github.com/jonblunt",
      "followers_url": "https://api.github.com/users/jonblunt/followers",
      "following_url": "https://api.github.com/users/jonblunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonblunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonblunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonblunt/subscriptions",
      "organizations_url": "https://api.github.com/users/jonblunt/orgs",
      "repos_url": "https://api.github.com/users/jonblunt/repos",
      "events_url": "https://api.github.com/users/jonblunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonblunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T23:17:47Z",
    "updated_at": "2015-12-02T23:17:47Z",
    "author_association": "NONE",
    "body": "I did the minimal impact change to my code to use a Series in Rolling\nMedian .. instead of an array.\n\nUsing profiler all the calls to rolling moments are made from one\nfunction whose total run time was\n\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n\n300171    1.462    0.000  130.972    0.000\nsmooth_item_at_loc_very_fast.py:174(smooth_once)\n\n I then replaced each call to ther rolling functions with this wrapper that\njust puts the array in a series and  then returns the raw values\n\ndef alg_wrap(alg, *_params):\n    def _alg(array, *_kargs):\n        return alg(pd.Series(array), *_kargs).values\n    return partial(_alg, *_params)\n\nThe new results were\n\n300171    1.716    0.000  204.076    0.001\nsmooth_item_at_loc_almost_very_fast.py:174(smooth_once)\n\n Using the 'numpy array rolling moments took  57s cumulative run time. so\nthe increase is more than the basic time to run the algorithm.\n\n70s x 400  `= 8hrs cumulative run time for the process across the full\nworkload.\n\nMy belief is that most of that cost is the good stuff that pandas brings in\nterms of indexing, alignment, dtypes, unified missing data etc.\n\nI think creating a lightweight object that sends a passed in ndarray to the\nroutine  and returns the raw data  would have much lower overhead.\n\nCould use  an extra keyword parameter in the method  raw = False ( defualt\n) return as series of the same shape and index, If True return the\nunderlying ndarray.\n\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161466296",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-161466296",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 161466296,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTQ2NjI5Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T23:28:19Z",
    "updated_at": "2015-12-02T23:28:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonblunt you are almost certainly better off using cython  (or numba) and using skiplist directly. if you keep wrapping/unwrapping an array (that is pretty short). The overhead of that will certainly be more than the actual computation time. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/162023553",
    "html_url": "https://github.com/pandas-dev/pandas/pull/11603#issuecomment-162023553",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11603",
    "id": 162023553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjAyMzU1Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-04T17:08:17Z",
    "updated_at": "2015-12-04T17:08:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "any other comments\n\n@jorisvandenbossche @shoyer @sinhrks @TomAugspurger \n"
  }
]
