[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/370546610",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19998#issuecomment-370546610",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19998",
    "id": 370546610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDU0NjYxMA==",
    "user": {
      "login": "reidy-p",
      "id": 21114125,
      "node_id": "MDQ6VXNlcjIxMTE0MTI1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/21114125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reidy-p",
      "html_url": "https://github.com/reidy-p",
      "followers_url": "https://api.github.com/users/reidy-p/followers",
      "following_url": "https://api.github.com/users/reidy-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/reidy-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reidy-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reidy-p/subscriptions",
      "organizations_url": "https://api.github.com/users/reidy-p/orgs",
      "repos_url": "https://api.github.com/users/reidy-p/repos",
      "events_url": "https://api.github.com/users/reidy-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reidy-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-05T20:05:32Z",
    "updated_at": "2018-03-05T20:05:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\ns.replace('a', None)\r\n```\r\nis actually equivalent to \r\n```\r\ns.replace(to_replace='a', value=None, method='pad')\r\n```\r\nbecause when ``value=None`` and ``to_replace`` is a scalar, list or tuple, replace uses the ``method`` parameter to do the replacement. So this is why the 'a' values are being replaced by 30 in rows 3 and 4 and 'b' in row 6 in this case. However, this behaviour does not occur when you use a dict as the ``to_replace`` value. In this case, it's like the value(s) in the dict are equal to the ``value`` parameter. This behaviour has also caused some confusion for me in the past.\r\n\r\nI agree that the docs for ``replace`` are not always very clear but I think this is partly because it has so much functionality (maybe too much). I have worked on improving the replace docs a little bit and an improved version will be in the next release but additional clarifications are always welcome (issue #17673)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/371556795",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19998#issuecomment-371556795",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19998",
    "id": 371556795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTU1Njc5NQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-08T17:16:18Z",
    "updated_at": "2018-03-08T17:16:18Z",
    "author_association": "MEMBER",
    "body": "@reidy-p : Excellent explanation!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/371804226",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19998#issuecomment-371804226",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19998",
    "id": 371804226,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTgwNDIyNg==",
    "user": {
      "login": "rasmuse",
      "id": 1210973,
      "node_id": "MDQ6VXNlcjEyMTA5NzM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1210973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rasmuse",
      "html_url": "https://github.com/rasmuse",
      "followers_url": "https://api.github.com/users/rasmuse/followers",
      "following_url": "https://api.github.com/users/rasmuse/following{/other_user}",
      "gists_url": "https://api.github.com/users/rasmuse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rasmuse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rasmuse/subscriptions",
      "organizations_url": "https://api.github.com/users/rasmuse/orgs",
      "repos_url": "https://api.github.com/users/rasmuse/repos",
      "events_url": "https://api.github.com/users/rasmuse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rasmuse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-09T12:51:51Z",
    "updated_at": "2018-03-09T12:51:51Z",
    "author_association": "NONE",
    "body": "Thanks @reidy-p for details and the very relevant link to #17673. I would agree with your assessment that `replace` has perhaps too much functionality. I would prefer an API where fill and replace are clearly separated operations. Another possibility could be to change the API to say something like `fill='pad'` explicitly. But I realize breaking changes in APIs cannot be made just like that.\r\n\r\nSo, if the task is to improve the docstring, my concrete suggestion is this: Clarify under the `value` parameter of `replace` that `None` is **not** treated as a replacement value, but as a request for fill behavior according to the `method` parameter.\r\n\r\nMany thanks for your excellent work."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372030943",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19998#issuecomment-372030943",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19998",
    "id": 372030943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjAzMDk0Mw==",
    "user": {
      "login": "reidy-p",
      "id": 21114125,
      "node_id": "MDQ6VXNlcjIxMTE0MTI1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/21114125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reidy-p",
      "html_url": "https://github.com/reidy-p",
      "followers_url": "https://api.github.com/users/reidy-p/followers",
      "following_url": "https://api.github.com/users/reidy-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/reidy-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reidy-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reidy-p/subscriptions",
      "organizations_url": "https://api.github.com/users/reidy-p/orgs",
      "repos_url": "https://api.github.com/users/reidy-p/repos",
      "events_url": "https://api.github.com/users/reidy-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reidy-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T13:43:19Z",
    "updated_at": "2018-03-10T13:43:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I would prefer an API where fill and replace are clearly separated operations. Another possibility could be to change the API to say something like fill='pad' explicitly. But I realize breaking changes in APIs cannot be made just like that.\r\n\r\nThese are good suggestions. I think it would be good if the ``method`` parameter is only used when explicitly called rather than by default because it's quite easy to get unexpected behaviour at present as you have shown. If it doesn't break the API substantially I would prefer if the behaviour of ``s.replace('a', None)`` is the same as ``s.replace({'a': None})``.\r\n\r\n@gfyoung what do you think of this idea?\r\n\r\nIf this isn't possible, then I think we should at least add the docstring improvement suggested by @rasmuse"
  }
]
