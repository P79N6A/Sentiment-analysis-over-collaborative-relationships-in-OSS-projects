[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315241656",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315241656",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315241656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI0MTY1Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T01:05:32Z",
    "updated_at": "2017-07-14T01:05:32Z",
    "author_association": "MEMBER",
    "body": "@skynss : In addition to failing your own test, you seemed to have broken several others because the file paths on some of the tests didn't work anymore.  Could you run tests locally on your machine to confirm and investigate this?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315250943",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315250943",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315250943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI1MDk0Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T02:17:07Z",
    "updated_at": "2017-07-14T02:17:07Z",
    "author_association": "MEMBER",
    "body": "@skynss : whoa, what happened to `test_common.py` ?  Why did you delete everything there?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315252244",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315252244",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315252244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI1MjI0NA==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T02:24:21Z",
    "updated_at": "2017-07-14T02:24:21Z",
    "author_association": "NONE",
    "body": "@gfyoung Sorry I had made a silly mistake. I ran the tests that I changed and they seem to work. I cannot run all tests because of my current environment (ssh does not allow for Displayable tests to run)\r\nThe issue was I had wrongfully overwritten `python/tests/test_common.py` with `python/tests/io/test_common.py` originally and submitted it - which obviously caused tests to fail. I think I have corrected the mistake.  I am a bit new at this process."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315252939",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315252939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315252939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI1MjkzOQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T02:29:49Z",
    "updated_at": "2017-07-14T02:29:49Z",
    "author_association": "MEMBER",
    "body": "@skynss : No worries!  No one's going to get mad if you make mistakes like this, especially since you are very new to the process :smile: \r\n\r\nI would focus right now on trying to address all of our comments as well as you can and ensuring that tests do not fail.  Make as many commits as you need to get that done."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315253466",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315253466",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315253466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI1MzQ2Ng==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T02:34:03Z",
    "updated_at": "2017-07-14T02:34:03Z",
    "author_association": "NONE",
    "body": "@gfyoung  I think I have addressed all issues (except the whatsnew documentation issue which I am waiting for final recommendation from you folks) "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315292064",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315292064",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315292064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI5MjA2NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T07:31:13Z",
    "updated_at": "2017-07-14T07:31:37Z",
    "author_association": "MEMBER",
    "body": "@skynss : Nice!  Well done.  Now that things are a little greener on the CI side, why don't you now tackle all of the style errors pointed out on Travis (starting right <a href=\"https://travis-ci.org/pandas-dev/pandas/jobs/253451474#L1777\">here</a>).  This is good progress from where it was when you initially submitted it for review."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315297040",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315297040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315297040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI5NzA0MA==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T07:58:15Z",
    "updated_at": "2017-07-14T07:58:15Z",
    "author_association": "NONE",
    "body": "@gfyoung I looked at logs for \"Travis CI build failed\" It seems to have 8 failures, and to me it appeared like they did not appear to be related to my check-ins. Now, it is possible I accidentally did something else wrong (not that I am aware of) . Almost all of them have nothing to do with /pandas/io - there are couple of test_excel but these seem to be issues with using other libraries unrelated to the changes I made.  If possible, please take a look. Besides this issue, do I need to do anything else?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315299698",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315299698",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315299698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI5OTY5OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T08:12:05Z",
    "updated_at": "2017-07-14T08:12:05Z",
    "author_association": "MEMBER",
    "body": "@skynss : Ah, I think I see your confusion.  \"XFAIL\" means that the tests are expected to fail and will therefore not break the build if they don't pass.  Don't worry about those!\r\n\r\nYou have no blocking test failures on that build.  You have *style errors*, meaning that your code violated style errors that we expect to be followed before merging any code.  Starting at line 1778, they should be listed there for you.  You can check them yourself by running `flake8` on any of the listed files in the build:\r\n\r\n~~~\r\nflake8 <filepath>\r\n~~~"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315310833",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315310833",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315310833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTMxMDgzMw==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2017-07-14T09:07:08Z",
    "updated_at": "2017-07-14T09:07:08Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=h1) Report\n> Merging [#16910](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/4ca9fcd73225af9cb1dc2acc99bb494dc5f8926a?src=pr&el=desc) will **decrease** coverage by `0.05%`.\n> The diff coverage is `46%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/16910/graphs/tree.svg?width=650&height=150&src=pr&token=eZ4WkYLtcO)](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #16910      +/-   ##\n==========================================\n- Coverage   90.99%   90.93%   -0.06%     \n==========================================\n  Files         161      161              \n  Lines       49303    49344      +41     \n==========================================\n+ Hits        44863    44871       +8     \n- Misses       4440     4473      +33\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `88.7% <46%> (-0.04%)` | :arrow_down: |\n| #single | `40.17% <18%> (-0.09%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/io/json/json.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2pzb24vanNvbi5weQ==) | `100% <ø> (ø)` | :arrow_up: |\n| [pandas/io/parsers.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL3BhcnNlcnMucHk=) | `95.44% <100%> (ø)` | :arrow_up: |\n| [pandas/io/excel.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2V4Y2VsLnB5) | `80.32% <25%> (-0.24%)` | :arrow_down: |\n| [pandas/io/common.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2NvbW1vbi5weQ==) | `64.07% <38.88%> (-3.73%)` | :arrow_down: |\n| [pandas/io/html.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2h0bWwucHk=) | `84.68% <75%> (-0.18%)` | :arrow_down: |\n| [pandas/io/gbq.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2dicS5weQ==) | `25% <0%> (-58.34%)` | :arrow_down: |\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `97.71% <0%> (-0.1%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=footer). Last update [4ca9fcd...437e0a2](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315310836",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315310836",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315310836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTMxMDgzNg==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2017-07-14T09:07:10Z",
    "updated_at": "2017-07-20T03:45:42Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=h1) Report\n> Merging [#16910](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/4ca9fcd73225af9cb1dc2acc99bb494dc5f8926a?src=pr&el=desc) will **decrease** coverage by `0.06%`.\n> The diff coverage is `46%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/16910/graphs/tree.svg?width=650&height=150&src=pr&token=eZ4WkYLtcO)](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #16910      +/-   ##\n==========================================\n- Coverage   90.99%   90.93%   -0.07%     \n==========================================\n  Files         161      161              \n  Lines       49303    49344      +41     \n==========================================\n+ Hits        44863    44870       +7     \n- Misses       4440     4474      +34\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `88.7% <46%> (-0.05%)` | :arrow_down: |\n| #single | `40.17% <18%> (-0.09%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/io/json/json.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2pzb24vanNvbi5weQ==) | `100% <ø> (ø)` | :arrow_up: |\n| [pandas/io/parsers.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL3BhcnNlcnMucHk=) | `95.44% <100%> (ø)` | :arrow_up: |\n| [pandas/io/excel.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2V4Y2VsLnB5) | `80.32% <25%> (-0.24%)` | :arrow_down: |\n| [pandas/io/common.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2NvbW1vbi5weQ==) | `64.07% <38.88%> (-3.73%)` | :arrow_down: |\n| [pandas/io/html.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2h0bWwucHk=) | `84.68% <75%> (-0.18%)` | :arrow_down: |\n| [pandas/io/gbq.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2lvL2dicS5weQ==) | `25% <0%> (-58.34%)` | :arrow_down: |\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `97.71% <0%> (-0.1%)` | :arrow_down: |\n| [pandas/core/indexes/datetimes.py](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9kYXRldGltZXMucHk=) | `95.23% <0%> (-0.1%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=footer). Last update [4ca9fcd...f520f7b](https://codecov.io/gh/pandas-dev/pandas/pull/16910?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315379631",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-315379631",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 315379631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTM3OTYzMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T14:50:54Z",
    "updated_at": "2017-07-14T14:50:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "dask added quite a bit of machinery to tests things like this, so might be worth a look. https://github.com/dask/distributed/blob/ea2405e541551b694b0fa095ef1da81d1cfb383e/distributed/tests/test_security.py"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316135758",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316135758",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316135758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEzNTc1OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T17:24:30Z",
    "updated_at": "2017-07-18T17:24:30Z",
    "author_association": "MEMBER",
    "body": "@skynss : Your last commit says you added a test case, but I don't see it?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316268320",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316268320",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316268320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjI2ODMyMA==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T04:19:15Z",
    "updated_at": "2017-07-20T03:45:18Z",
    "author_association": "NONE",
    "body": "Hello @skynss! Thanks for updating the PR.\n\n\n\n\n\n\n\n\n\n\n\n\n\n - In the file [`pandas/tests/io/test_http_auth.py`](https://github.com/pandas-dev/pandas/blob/f520f7b9050186fe84301508daec27e310010049/pandas/tests/io/test_http_auth.py), following are the PEP8 issues :\n\n> [Line 7:1](https://github.com/pandas-dev/pandas/blob/f520f7b9050186fe84301508daec27e310010049/pandas/tests/io/test_http_auth.py#L7): [E722](https://duckduckgo.com/?q=pep8%20E722) do not use bare except'\n\n\n\n##### Comment last updated on July 20, 2017 at 03:45 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316270340",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316270340",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316270340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjI3MDM0MA==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T04:36:59Z",
    "updated_at": "2017-07-19T04:36:59Z",
    "author_association": "NONE",
    "body": "@gfyoung  @jreback  Sorry.. was booked past couple of days. I just did the following:\r\n1. Checked in the test case. `pandas/tests/io/test_http_auth.py` I didnt add it to `test_common.py` until I got opinion from you folks. I will elaborate the testability a bit more later. \r\n2. I decided to add a `warning` when disabling SSL cert strict checking.. just as `requests` rightfully does. I need to figure out how to handle the warning in pytest as expected. \r\n3. I fixed `whatsnew`. If you want me to elaborate, can you tell me which section of `whatsnew` the elaboration should go under?\r\n4. I am aware latest test broke pep8 as I edited the string a bit and forgot to run the pep8 check. Ill fix it. \r\n5. I did strict checking of `uname` and `pwd` should either both be present or neither should be. \r\n\r\nIs there anything else that is needed?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316274489",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316274489",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316274489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjI3NDQ4OQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T05:09:58Z",
    "updated_at": "2017-07-19T05:09:58Z",
    "author_association": "MEMBER",
    "body": "> Checked in the test case. pandas/tests/io/test_http_auth.py I didnt add it to test_common.py until I got opinion from you folks. I will elaborate the testability a bit more later.\r\n\r\nOkay, so I think you need to break these tests up because this will not be easy to read:\r\n\r\n1) I'm not even sure if we should be hitting those endpoints during our tests (@jreback ?).\r\n\r\n2) Divide up the tests between those that use SSL verification and those that don't.  Also divide based on what type of authentication is used.\r\n\r\n3) It would be preferable that we also check the contents of the returned object.  That means also breaking up the tests by which function is called (i.e. `pd.read_csv`, `pd.read_json`, etc.)\r\n\r\nStart with 1 and 2 first.  We can address 3 afterwards."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316284967",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316284967",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316284967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjI4NDk2Nw==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T06:25:10Z",
    "updated_at": "2017-07-19T06:25:10Z",
    "author_association": "NONE",
    "body": "**Testing**:\r\nI added `pandas/tests/io/test_http_auth.py` - let me know if this should be merged into `pandas/tests/io/test_common.py` or keep it in a separate file.\r\nI can break it into separate tests... but I am not sure what is wrong with keeping it as it is now (except maybe adding better assert label)? It follows the pytest `parameterize` as you suggested and generates 12 separate tests. \r\n\r\nA bit more about the test: It utilizes a free hosting service. So it should continue to work (for the foreseeable future). It works well except this http server doesnt like port numbers being specified (see bug #[17019](https://github.com/pandas-dev/pandas/issues/17019) )\r\n\r\nI am proposing adding live cases, because it is easier to test valid SSL certs.. and I saw some tests already use external urls `pandas/tests/io/test_html.py`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316338437",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316338437",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316338437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjMzODQzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T10:10:08Z",
    "updated_at": "2017-07-19T10:10:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@skynss if we used ``requests`` as an optional dep to handle url like things would pandas code be much simpler? (e.g. we could still fall back to the current path now, maybe eventually removing that code and fully rely on requests for url things though)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316416018",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316416018",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316416018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjQxNjAxOA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T15:02:22Z",
    "updated_at": "2017-07-19T15:02:22Z",
    "author_association": "MEMBER",
    "body": "> if we used requests as an optional dep to handle url like things would `pandas` code be much simpler?\r\n\r\n@jreback : Yes, absolutely.  We wouldn't need to setup any authentication, as `requests` would handle that for us.  You can look at the code examples from the issue to see the difference."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316433492",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316433492",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316433492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjQzMzQ5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T15:58:41Z",
    "updated_at": "2017-07-19T15:58:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "i would make this an optional dep then "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316434241",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316434241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316434241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjQzNDI0MQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T16:01:05Z",
    "updated_at": "2017-07-19T16:01:05Z",
    "author_association": "MEMBER",
    "body": "> i would make this an optional dep then\r\n\r\nMakes sense.  Probably should first clean-up the PR as is before adding this in."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316528721",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316528721",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316528721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjUyODcyMQ==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T21:50:41Z",
    "updated_at": "2017-07-19T21:50:41Z",
    "author_association": "NONE",
    "body": "@jreback  @gfyoung  wrt `requests` as optional dependency, what do we expect as end user experience?\r\n\r\nHere are few options to and their advantages disadvantages: \r\n**Option 1**: Add [`requests.Session()`](http://docs.python-requests.org/en/master/user/advanced/) as a optional param to `read_csv( url, req_session=my_session)` or `read_csv( url, use_requests_lib=True)`- in which case, the user is knowingly opting to bypass urllib from pandas and use requests instead. If `read_csv( url, username='darth', password='mtfbwy', verify_ssl=False, req_session=my_session)`, only if my_session is valid or `use_requests_lib=True` is passed, is requests library used, else urllib is used even if `requests` package is already installed. \r\nAdvantage: user has greater control. Passing requests session might enable power user functionality such as accessing AWS API gateway with token, and other scenarios. \r\nDisadvantage: Existing code stays.. Add new code to optionally handle requests\r\n\r\n**Option 2**: Auto-detect and use `requests` package if installed, and use `urllib` if not installed. So end user would possibly call `read_csv( url, username='darth', password='mtfbwy', verify_ssl=False)` and has no control over whether `urllib` is used or `requests` is used. \r\nAdvantage: `read_csv` api is cleaner as it doesnt have additional parameter of `use_requests_lib`. \r\nDisadvantage: User may notice inconsistent behavior in different environments without warning - and might be very hard to detect the cause is the presence or absence of `requests` package. Example: Imagine AWS Lambda does not have `requests` package installed in their python runtime.. and I upload a Lambda python function with locally packaged pandas v.0.20 in single zip. AWS decides that `requests` is common ask and includes it in their runtime. The behavior of my lambda function might change without me having any clue of why.\r\n\r\n**Option 3**: Forget adding `username`, `password`, `verify_ssl` to `read_csv` and just add `req_session` parameter to `read_csv` instead. Expect end user to know how to build a requests session with username/pwd/verify set and pass that object to `read_csv`. \r\nAdvantage: Cleaner and powerful `read_csv`. \r\nDisadvantage: Dev now has to know about auth/ssl using requests. Possibly, if end user is going to do this, it might just be easier to just utilize `requests` + `StringIO` and bypass the http functionality in `read_csv`\r\n\r\n**Option 4**: Stop using urllib and switch with strong dependency to `requests`. \r\nAdvantages: Simpler code \r\nDisadvantages: Potential regressions. Bulkier packages going up AWS Lambda. `read_csv` will still need to be able to accept a `req_session` object because there is no way to add all potential scenarios as parameters to `read_csv`\r\n\r\n**Option 5**: Forget requests, allow user to just pass in urllib.request.Request object and possibly other headers etc directly to `read_csv`. \r\nAdvantage: No regressions. No external dependency. Great for power user eg: change useragent string, etc. Use for other scenarios such as AWS API gateway authentication. Easy to code it in existing codebase. \r\nDisadvantage: For simple use cases, a novice user has to learn urllib.\r\n\r\nI am not happy with **Option 2** as it will produce inconsistent behavior eg Issue #17019 and has greater chance of causing regression.\r\nWhile **Option 3** is better than released version, I might as well consider getting data separately and passing in StringIO object. \r\n\r\nI dont recommend **Option4** or **Option 5** due to complexity esp in Py2/Py3 scenario.\r\n\r\nI think **Option 1** is best but it be checked in 2 phases:\r\nPhase 1: without requests i.e this issue.\r\nPhase 2: allow  requests session as parameter. Have you folks observed lot of issues that `requests` might resolve? If yes, Phase 2 should be sooner rather than later. I think making the request call is probably easy to implement, but handling and testing various scenarios of response (mimetypes, gzip, multipart, redirections, chunked, various verbs, encoding) will probably need time and expertise. I'm bit too tight on bandwidth to dig deeper into this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316533054",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316533054",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316533054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjUzMzA1NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T22:08:52Z",
    "updated_at": "2017-07-19T22:08:52Z",
    "author_association": "MEMBER",
    "body": "@skynss : The signature for `read_csv` is bloated enough as it is.  Username and password should be the only way to authenticate and is indeed the easiest.  Thus, I would be against option 1.\r\n\r\nAuto-detecting would be the best way to incorporate `requests` behavior.  I agree that inconsistencies might be a concern, but that's bound to happen no matter how much you try to standardize.  That's why we're making it an optional dependency.  We would also need to document that potential issue so that users are aware of this.\r\n\r\nI agree with you on option 3: username and password are the simplest hands down.\r\nI agree with you on option 4: we are not relying on `requests` beyond being an optional dependency.\r\n\r\nOption 5 is our backup.  We don't need to add `requests` support at the moment.  You could even do that as a follow-up."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316662879",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316662879",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316662879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjY2Mjg3OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-20T10:25:06Z",
    "updated_at": "2017-07-20T10:25:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "the way to do this is:\r\n\r\n- if no auth is provided use current behavior\r\n- if auth is provide, import requests, if its not available, raise a nice error message that auth requires requests\r\n- use request to service the request.\r\n\r\nthe idea is that we can push as much code as possible to use requests, rather that re-invent the wheel"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316819900",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316819900",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316819900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjgxOTkwMA==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-20T20:26:08Z",
    "updated_at": "2017-07-20T23:19:03Z",
    "author_association": "NONE",
    "body": "@jreback Why push only auth scenarios to requests if installed? Instead, if requests is installed, use it by default for all http(s) cases. If not installed, use existing codepath - as-is?\r\n\r\nAlso, instead of passing in `username`, `pwd`, `verify_ssl`, it is probably easier to instead just pass in optional only `requests.session` object which accepts not only auth but also enables a ton of other scenarios such as  adding `proxies`, `client certs`, `useragent` changes, and `custom auth` scenarios such as 'Calling [AWS api-gateway with cognito](https://stackoverflow.com/questions/37336286/how-do-i-call-an-api-gateway-with-cognito-credentials-in-python) (just googled a sample scenario)'\r\n\r\nAlso at a quick glance, verb other than `GET` such as `POST`, etc might be [automatically supported using prepared requests](http://docs.python-requests.org/en/master/user/advanced/#prepared-requests)\r\n\r\nRight now, I don't see how pandas returns status code, and response headers. By utilizing requests `event hooks` functionality built into requests, this can be handled.\r\n\r\n```python\r\nimport pandas as pd\r\nfrom requests import Session\r\n\r\n# req_session is optional and replaces username, password, \r\n# by default, no requests.session needed. Backwards compatible api.\r\ndf = pd.read_csv('https://uname:pwd@aa.com/bb.csv') # will work automatically because \r\n# requests will handles it if installed, else handle with existing codebase\r\n\r\n# custom auth\r\ns = Session()\r\ns.auth = MyAuthProvider('secret-key') # custom auth provider supported by requests\r\ndf = pd.read_csv(url, req_session=s)\r\n\r\n# optional advanced scenarios\r\ns = Session()\r\ns.auth = ('darth', 'l0rd')  # if user wants to perform basic auth Skip if url itself contains username and pwd\r\ns.timeout = (3.05, 27)                           # if user wants to modify timeout\r\ns.verify = False                                      # if user wants to disable ssl cert verification\r\ns.headers.update( {'User-Agent': 'Custom user agent'} )  # extensible to set any custom header needed\r\ns.proxies = { 'http': 'http://a.com:100'}  # if user has proxies \r\ns.cert = '/path/client.cert'                     # if custom cert is needed\r\ndf = pd.read_csv( 'https://aa.com/bbb.csv', req_session=s)\r\n\r\n# support verbs other than 'GET' such as 'POST'\r\nr = Request('POST', 'http://joker:pwd@nlp_service.api/email_sentiment_extract?out=json')\r\nprepped = req.prepare()\r\nprepped.body = 'from: aaa@aa.bb\\nto: cc@dd.ee\\nsubject:Complaint letter\\n\\nbody: I am feeling :(' # multiple lines\r\ndf = pd.read_json( prepped) # minor update pandas code to detect type(Request) and submit it using requests session in lieu of URL.\r\n\"\"\"\r\n[{\r\n  'from': 'aaa@aa.bb',\r\n  'to': 'cc@dd.ee',\r\n  'email_type': 'complaint',\r\n  'sentiment': 'unhappy',\r\n}]\r\n\"\"\"\r\n\r\n# Event hooks callback (eg log http status codes)\r\ndef print_http_status(r, *args, **kwargs):\r\n    print(r.status_code)\r\n    print(r.headers['Content-Length'])\r\ns = Session()\r\ns.hooks = dict(response=print_http_status)\r\ndf = pd.read_csv( 'https://aa.com/bbb.csv', req_session=s)\r\n\r\n```\r\nIt does mean that some of the work I did becomes unnecessary, but if you are ok to use requests, I think the most extensible and simplest scenario is to allow passing in optional request.session parameter.\r\n\r\nFor the above scenarios, following changes would need to be made to code checked into `master`:\r\n1. `read_*` accept new optional parameter `req_session`, and detect if 'url' is passed or 'prepared' is.\r\n2. if requests installed, use url/prepared/req_session as specified. Call session.send()\r\n3. if requests not installed, don't change current behavior of `read_*`\r\n4. Testing: Don't have to test stuff that requests already tests.\r\n\r\nI am far from being an expert at `requests` library and encourage others to review and correct me.\r\n\r\nEDIT: I think I might already have this mostly working (except for read_html)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316889377",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316889377",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316889377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjg4OTM3Nw==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-21T03:03:54Z",
    "updated_at": "2017-07-21T03:03:54Z",
    "author_association": "NONE",
    "body": "@jreback  @gfyoung : Take a look at a new branch [`use-requests`](https://github.com/skynss/pandas/tree/use-requests) . Its a completely different codebase which uses requests\r\n\r\n- If installed uses `python-requests` by default.. else use existing codebase of `urlopen`\r\n- only one new optional param of `req_session` added in lieu of username/pwd, etc\r\n- fully working\r\n- all pytest unit tests passed in `pandas/tests/io` - only thing remaining is to figure out how to add test case to emulate `python-requests` is not installed?\r\n- whatsnew updated\r\n- codebase rebased with pandas-dev/pandas master as of few mins ago. \r\n\r\nIt is probably ready to be merged in. please review. let me know if you want me to start a different pull request. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316896180",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316896180",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316896180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjg5NjE4MA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-21T03:59:08Z",
    "updated_at": "2017-07-21T03:59:08Z",
    "author_association": "MEMBER",
    "body": "> the idea is that we can push as much code as possible to use requests, rather that re-invent the wheel\r\n\r\n@jreback : I wouldn't say we're re-inventing the wheel.  It's rather than `requests` came up with a nice way to provide an even higher-level interface to Python `urllib` libraries.  That being said, I'm perfectly fine with using `requests` so long as we're okay with making it an optional dependency that is *required* when authentication with data IO is needed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316897626",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316897626",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316897626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjg5NzYyNg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-21T04:11:44Z",
    "updated_at": "2017-07-21T04:11:44Z",
    "author_association": "MEMBER",
    "body": "> Why push only auth scenarios to requests if installed? Instead, if requests is installed, use it by default for all http(s) cases. If not installed, use existing codepath - as-is?\r\n\r\n@skynss You mentioned before that you were concerned about inconsistencies between `requests` and `urllib`.  If we were to use `requests` (at least for now) *solely* for authentication, we would not have to worry about this issue.  Not to mention, it will make things easier to test for the time being."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316898083",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316898083",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316898083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjg5ODA4Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-21T04:15:35Z",
    "updated_at": "2017-07-21T04:16:06Z",
    "author_association": "MEMBER",
    "body": "> Also, instead of passing in username, pwd, verify_ssl, it is probably easier to instead just pass in optional only requests.session object which accepts not only auth but also enables a ton of other scenarios\r\n\r\n@skynss : That's a bit of reversal since your comment earlier <a href=\"https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316528721\">here</a>.  That being said, I'm still wary about allowing a user to pass this in.\r\n\r\nSince it seems we are moving to incorporate `requests` into `pandas`, IMO we should keep the interface relatively agnostic to the user i.e., instead of accepting a session object, we accept an `auth` parameter, which is a dictionary mapping to different types of authentication that we could accept such as username / password with verify_ssl or a session object.\r\n\r\nThis interface allows us to have the flexibility of implementing whatever handling we would like in terms of authentication in the future WITHOUT impacting how the user has to interact with it.  Internally, we would check if certain fields existed and utilize them for authentication (e.g. `if 'session' in auth`, then use the session to authenticate)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316968029",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-316968029",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 316968029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjk2ODAyOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-21T10:35:15Z",
    "updated_at": "2017-07-21T10:35:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "so the current behavior must work w/o requests installed at all.\r\n\r\nI would push to have as minimal code added as possible, IOW use requests for the auth and just use the current code for existing things; that said if you want to make a mock requests internally then this might be simpler."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/317070708",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16910#issuecomment-317070708",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16910",
    "id": 317070708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzA3MDcwOA==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-21T17:59:22Z",
    "updated_at": "2017-07-24T05:50:00Z",
    "author_association": "NONE",
    "body": "@gfyoung \r\n\r\n> IMO we should keep the interface relatively agnostic to the user i.e., instead of accepting a session object, we accept an auth parameter, which is a dictionary mapping to different types of authentication that we could accept such as username / password with verify_ssl or a session object.\r\n\r\nCan you clarify?\r\n```python\r\n# for basic auth\r\ndf = pd.read_csv(url, auth={ 'uname':'aa', 'pwd':'bb'})\r\n\r\n# to bypass ssl cert verification (which is not authentication) it would be confusing to pass it into auth param\r\ndf = pd.read_csv(url, auth={ 'verify_ssl':False})\r\n```\r\nPerhaps what you meant (and what I think is good idea) was you prefer end user to not make any imports of `requests` but allow to pass in dict or requests.Session such as following:\r\n```python\r\n# simple user never has to import requests\r\nup = {  'auth' : ('user','pwd'), 'verify_ssl' : False } \r\ndf = pd.read_csv( url, url_params=up)\r\n\r\n# or power user can choose to use request.Session directly\r\nimport requests\r\nup = requests.Session()\r\nup.auth = ('uname','pwd')\r\nup.header.modify( {'User-Agent' : 'My custom user agent'})\r\ndf = pd.read_csv( url, url_params=up)\r\n\r\n# internally we check \r\nif type(url_params) is requests.Session:\r\n    sess = url_params\r\nelif type(url_params) is dict:\r\n    sess = requests.Session()\r\n    # then we add in auth/verify_ssl in here\r\n```\r\n\r\n@jreback \r\n\r\n> so the current behavior must work w/o requests installed at all\r\n\r\nAgreed. Both [basic-auth-https-self-signed](https://github.com/skynss/pandas/tree/basic-auth-https-self-signed)  as well as [use-requests](https://github.com/skynss/pandas/tree/use-requests) already satisfy them.\r\n\r\n> use requests for the auth and just use the current code for existing things\r\n\r\nIf we just want to use requests for auth (and I assume you meant ssl cert verification bypass too) then why are we even having a dependency on requests? First option of `basic-auth-https-self-signed` already does that, and its tested. \r\n\r\n[use-requests](https://github.com/skynss/pandas/tree/use-requests) has the least amount of code change ( compared to [basic-auth-https-self-signed](https://github.com/skynss/pandas/tree/basic-auth-https-self-signed) ). It uses requests for all scenarios, only if it is installed. This functionality is passing all `pytest` . Also, if requests is not installed, existing functionality continues to work as is. \r\n\r\nI got engaged as I opened an issue for basic auth + self signed certs.\r\nTomorrow someone might open an issue that pandas doesnt support today eg: proxies. Yet another issue might be setting custom headers, etc. \r\nHere is a bug in released version of pandas. This does not involve https, or auth of any kind. This is supposed to work\r\n```python\r\ndf = pd.read_csv('http://handsome-equator.000webhostapp.com/no_auth/aaa.csv') # works fine\r\ndf = pd.read_csv('http://handsome-equator.000webhostapp.com:80/no_auth/aaa.csv') # fails with 404 if port number is added. it shouldnt. It doesnt in browser, or requests\r\n```\r\nIt fails because `urllib` behavior. It works in [use-requests](https://github.com/skynss/pandas/tree/use-requests) if requests is installed and it is used even for existing scenarios when installed.\r\n\r\nSo, what is the direction for http(s) in pandas? Natively use `urllib` or move to `requests`? If the goal is to try to use requests the most we can, then what is the test acceptance criteria for trying to use `requests` most when available? [use-requests](https://github.com/skynss/pandas/tree/use-requests)  passes all tests. Besides api design, what else remains? \r\n\r\nWish there was a bit more synchronous way to communicate, to hammer out the issues. faster"
  }
]
