[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/129636809",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10788#issuecomment-129636809",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10788",
    "id": 129636809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTYzNjgwOQ==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T22:45:15Z",
    "updated_at": "2015-08-10T22:45:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've seen multiple versions of 2 scattered across different test scripts, such as [this](https://github.com/pydata/pandas/blob/master/pandas/io/tests/test_packers.py#L31).  They might be good building blocks. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/129742892",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10788#issuecomment-129742892",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10788",
    "id": 129742892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTc0Mjg5Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-11T07:44:11Z",
    "updated_at": "2015-08-11T07:44:11Z",
    "author_association": "MEMBER",
    "body": "Regarding the **How to specify comparison tolerance**, I have two problems with the current interface:\n- It is a bit clumsy, as you have two keywords that could perfectly fit into one keyword, making it a bit confusing.\n- It is also not very flexible, as it only gives you the option to check all, 5 or 3 digits. For example, if you have values of different order in one frame (eg 0.0001 to 100), then the absolute number of digits cannot be used to check this but you need something relative. Therefore, you have to fall back to checking the `.values` with numpy.\n\nSpecifically for that last point, I think it is nice to look at [`np.testing.assert_allclose`](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.testing.assert_allclose.html) (which is now the recommended way in numpy according to the [`assert_array_almost_equal`](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.testing.assert_array_almost_equal.html) docstring), which uses both relative and absolute tolerance.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217077932",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10788#issuecomment-217077932",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10788",
    "id": 217077932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzA3NzkzMg==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-05T05:14:21Z",
    "updated_at": "2016-05-05T05:14:21Z",
    "author_association": "MEMBER",
    "body": "Added 3rd item, I think we should replace `assert_almost_equal` to precise functions as much.\n"
  }
]
