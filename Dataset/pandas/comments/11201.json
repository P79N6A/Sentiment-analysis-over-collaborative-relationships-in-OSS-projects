[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143943440",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-143943440",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 143943440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mzk0MzQ0MA==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T04:47:17Z",
    "updated_at": "2015-09-29T04:47:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "What are you trying to do with the `Index`? Currently, it's an Index of tuples. Are you trying to create a `MultiIndex`? That's the only form of a 2D array in an Index that would make sense, I think. \n\n``` python\nIn [26]: ix = pd.Index(np.array([[\"A\"], [\"A\"], [\"B\"]]))\n\nIn [27]: ix\nOut[27]: Index([('A',), ('A',), ('B',)], dtype='object')\n```\n\nIf you have a normal `Index` using those strings, this works as expected:\n\n``` python\nIn [28]: ix = pd.Index([\"A\", \"A\", \"B\"])\n\nIn [29]: ix\nOut[29]: Index(['A', 'A', 'B'], dtype='object')\n\nIn [30]: ix.get_loc(ix[0])\nOut[30]: slice(0, 2, None)\n```\n\nOn the specific behavior, I'll leave it to the maintainers to decide whether it's a bug, but it at worst seems like a corner case.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143950311",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-143950311",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 143950311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mzk1MDMxMQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T05:37:03Z",
    "updated_at": "2015-09-29T05:37:03Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report! This is actually a bug upstream in NumPy: https://github.com/numpy/numpy/issues/6390\n\nI do agree with @maximilianr, though, that using a 2D array as input for an index is generally not very useful.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143966909",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-143966909",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 143966909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mzk2NjkwOQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T07:05:10Z",
    "updated_at": "2015-09-29T07:05:10Z",
    "author_association": "MEMBER",
    "body": "Turn out this isn't a NumPy bug after all, but rather an implication of the fact that NumPy treats `('B',)` as an object that should be converted into a 1d array, `np.array(['B'])`. So I guess this is technically on us -- we could add some sort of protection in `_get_loc_duplicates` to ensure that we don't coerce tuples blindly into 1D arrays.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143990495",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-143990495",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 143990495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mzk5MDQ5NQ==",
    "user": {
      "login": "liuyu81",
      "id": 885656,
      "node_id": "MDQ6VXNlcjg4NTY1Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/885656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liuyu81",
      "html_url": "https://github.com/liuyu81",
      "followers_url": "https://api.github.com/users/liuyu81/followers",
      "following_url": "https://api.github.com/users/liuyu81/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuyu81/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liuyu81/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuyu81/subscriptions",
      "organizations_url": "https://api.github.com/users/liuyu81/orgs",
      "repos_url": "https://api.github.com/users/liuyu81/repos",
      "events_url": "https://api.github.com/users/liuyu81/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liuyu81/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T08:46:40Z",
    "updated_at": "2015-09-30T06:45:43Z",
    "author_association": "NONE",
    "body": "@maximilianr, @shoyer thanks for the comments.\n\nFYI, Here is a bit of background on why we are using a 2D array as input to `Index`.\n\nBasically, our code receives 2D `numpy`  arrays (tables) from user input, which are extracted from a spreadsheet. The received 2D arrays contain a mixture of string headers and numerical data, i.e.\n\n```\n>> T1\narray([['w', 'x', 'y', 'z'],\n   ['A', 1, 2, 3],\n   ['A', 4, 5, 6],\n   ['B', 7, 8, 9]], dtype=object)\n>> T2\narray([['w', 'x', 'y', 'z'],\n   ['A', \"C\", 2, 3],\n   ['B', \"D\", 5, 6],\n   ['A', \"E\", 8, 9]], dtype=object)\n```\n\nWe create `Index`'s for rows of the numerical parts of the tables so as to iterate / query / cross-reference the numerical records by the string headers, i.e.\n\n```\n>> ix1 = pd.Index(T1[1:,0:1])\n>> ix2 = pd.Index(T2[1:,0:1])\n```\n\nFor example, to get records for a key (all keys) that exist in both T1 and T2,\n\n```\n>> from itertools import filter\n>> key = ix1[0]\n>> if key in ix2:\n....    print(T2[1:][ix2.get_loc(key)])\narray([['A', 'C', '2', '3'],\n   ['A', 'E', '8', '9']], \n  dtype=object)\n```\n\nUnfortunately, with the reported issue, the following use case (symmetric to previous case) does not work,\n\n```\n>> key = ix2[0]\n>> if key in ix1:\n....    print(T1[1:][ix1.get_loc(key)])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/site-packages/pandas/core/index.py\", line 1572, in get_loc\n    return self._engine.get_loc(_values_from_object(key))\n  File \"pandas/index.pyx\", line 134, in pandas.index.IndexEngine.get_loc (pandas/index.c:3824)\n  File \"pandas/index.pyx\", line 149, in pandas.index.IndexEngine.get_loc (pandas/index.c:3651)\n  File \"pandas/index.pyx\", line 169, in pandas.index.IndexEngine._get_loc_duplicates (pandas/index.c:3990)\n KeyError: ('A',)\n```\n\nSince our code has already tested that `ix1` contains the `key`, the subsequent `KeyError` raised by `ix1.get_loc(key)` would largely complicate the program logic on the user side.\n\nAlso, since we do need to support higher-than-one-dimensional cases (i.e. `ix2 = pd.Index(T2[1:,0:2])`), it's not always feasible to fall-back to 1-D index.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143993461",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-143993461",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 143993461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mzk5MzQ2MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T08:54:32Z",
    "updated_at": "2015-09-29T08:54:32Z",
    "author_association": "MEMBER",
    "body": "@liuyu81 Why can't you construct the index as `pd.Index(T1[1:,0])`, so you have a 1D index, and the rest of your code examples should just work the same?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143994988",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-143994988",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 143994988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mzk5NDk4OA==",
    "user": {
      "login": "liuyu81",
      "id": 885656,
      "node_id": "MDQ6VXNlcjg4NTY1Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/885656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liuyu81",
      "html_url": "https://github.com/liuyu81",
      "followers_url": "https://api.github.com/users/liuyu81/followers",
      "following_url": "https://api.github.com/users/liuyu81/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuyu81/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liuyu81/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuyu81/subscriptions",
      "organizations_url": "https://api.github.com/users/liuyu81/orgs",
      "repos_url": "https://api.github.com/users/liuyu81/repos",
      "events_url": "https://api.github.com/users/liuyu81/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liuyu81/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T09:01:08Z",
    "updated_at": "2015-09-29T09:01:08Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche  we do need to support higher-than-one-dimensional cases. It is part of user input as which table columns belong to searchable headers. For example, if user specifies that both column 0 and 1 in T2 should be searchable, we will end up with `ix2 = pd.Index(T2[1:,0:2])`. It's not always feasible to hard-code a 1-D index. As far as we are aware of, the reported issue is a corner case that only happens when the `data` to index has shape `(n, 1)`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143998554",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-143998554",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 143998554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mzk5ODU1NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T09:07:11Z",
    "updated_at": "2015-09-29T09:09:35Z",
    "author_association": "MEMBER",
    "body": "You can use MultiIndex in the more dimensional case. Eg, if you use `ix1 = pd.MultiIndex.from_arrays(T1[1:,0:2].T)` this will give you a MultiIndex in this case, but a plain index in the 1-D case. \nAnd the other examples with `get_loc` should work as well:\n\n```\nIn [45]: ix1 = pd.MultiIndex.from_arrays(T1[1:,0:2].T)\n\nIn [46]: key = ix1[0]\n\nIn [47]: key\nOut[47]: ('A', 1)\n\nIn [49]: key in ix1\nOut[49]: True\n\nIn [51]: T1[1:][ix1.get_loc(('A', 1))]\nOut[51]: array(['A', 1, 2, 3], dtype=object)\n```\n\nBut of course, don't know what you want to do with it for the rest.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/144013852",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-144013852",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 144013852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDAxMzg1Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T10:08:13Z",
    "updated_at": "2015-09-29T10:08:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche soln is by far the best.\n\nIn any event, this is where its breaking in `index.pyx/Index/_get_loc_duplicates`\n\n```\nIn [30]: ix.values\nOut[30]: array([('A',), ('A',), ('B',)], dtype=object)\n\nIn [31]: ix.values.searchsorted(ix[0], side='left')\nOut[31]: array([0])\n\nIn [33]: ix.values.searchsorted(ix[0], side='right')\nOut[33]: array([0])\n```\n\n`[33]` should be `array[1]`.\n\nSo numpy looks broken here under py2, and so the `.get_loc` check fails.\n\nnote that this handles the duplicates properly.\n\n```\nIn [35]: ix.reindex([ix[0]])\nOut[35]: (Index([(u'A',)], dtype='object'), Int64Index([0, 1], dtype='int64'))\n```\n\nSo a possiblity is to do a uniqueness check in `.get_loc` (its down in cython anyhow, so this is not adding overhead). Then using `get_indexer_duplicates([key])`. Though the code path in `index.pyx` exists IIRC mainly for non-tuples, so special casing for tuples seems like a bad work around.\n\nI'll mark it as a bug, but would need some digging. Pretty low priority from my perspective as a `MultiIndex` is the correct and supported soln.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/144032211",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-144032211",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 144032211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDAzMjIxMQ==",
    "user": {
      "login": "liuyu81",
      "id": 885656,
      "node_id": "MDQ6VXNlcjg4NTY1Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/885656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liuyu81",
      "html_url": "https://github.com/liuyu81",
      "followers_url": "https://api.github.com/users/liuyu81/followers",
      "following_url": "https://api.github.com/users/liuyu81/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuyu81/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liuyu81/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuyu81/subscriptions",
      "organizations_url": "https://api.github.com/users/liuyu81/orgs",
      "repos_url": "https://api.github.com/users/liuyu81/repos",
      "events_url": "https://api.github.com/users/liuyu81/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liuyu81/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T11:32:07Z",
    "updated_at": "2015-09-29T11:32:07Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche Thank you so much for the suggestion, using `MultiIndex` did solve the problem elegantly. We appreciate the time of all responders and the amazing community support of the `pandas` team at large.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/144155527",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-144155527",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 144155527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDE1NTUyNw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-29T18:55:22Z",
    "updated_at": "2015-09-29T18:55:22Z",
    "author_association": "MEMBER",
    "body": "Arguably, `pd.Index(np.array([[\"A\"], [\"B\"], [\"C\"]]))` should also be creating a plain index rather than a multi-index. That is what you get if you pass in a list of tuples rather than a 2D ndarray:\n\n```\nIn [27]: pd.Index([(\"A\",), (\"B\",), (\"C\",)])\nOut[27]: Index(['A', 'B', 'C'], dtype='object')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429514591",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-429514591",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 429514591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTUxNDU5MQ==",
    "user": {
      "login": "brainrichtech",
      "id": 2878390,
      "node_id": "MDQ6VXNlcjI4NzgzOTA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2878390?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brainrichtech",
      "html_url": "https://github.com/brainrichtech",
      "followers_url": "https://api.github.com/users/brainrichtech/followers",
      "following_url": "https://api.github.com/users/brainrichtech/following{/other_user}",
      "gists_url": "https://api.github.com/users/brainrichtech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brainrichtech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brainrichtech/subscriptions",
      "organizations_url": "https://api.github.com/users/brainrichtech/orgs",
      "repos_url": "https://api.github.com/users/brainrichtech/repos",
      "events_url": "https://api.github.com/users/brainrichtech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brainrichtech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T06:08:13Z",
    "updated_at": "2018-10-13T06:08:13Z",
    "author_association": "NONE",
    "body": "Hi\r\ni got this error please any one solve this\r\n\r\nreviews_users_df = pd.merge(reviews_df, users_df, on='user_id') # merging 2 dataset on user_id\r\nusers_df = []\r\nreviews_df = []\r\n\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\indexes\\base.py in get_loc(self, key, method, tolerance)\r\n   2392             try:\r\n-> 2393                 return self._engine.get_loc(key)\r\n   2394             except KeyError:\r\n\r\npandas\\_libs\\index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas\\_libs\\index.c:5239)()\r\n\r\npandas\\_libs\\index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas\\_libs\\index.c:5085)()\r\n\r\npandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas\\_libs\\hashtable.c:20405)()\r\n\r\npandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas\\_libs\\hashtable.c:20359)()\r\n\r\nKeyError: 'user_id'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-35-dbb894882137> in <module>()\r\n      1 \r\n----> 2 reviews_users_df = pd.merge(reviews_df, users_df, on='user_id') # merging 2 dataset on user_id\r\n      3 \r\n      4 users_df = []\r\n      5 \r\n\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\reshape\\merge.py in merge(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator)\r\n     51                          right_on=right_on, left_index=left_index,\r\n     52                          right_index=right_index, sort=sort, suffixes=suffixes,\r\n---> 53                          copy=copy, indicator=indicator)\r\n     54     return op.get_result()\r\n     55 \r\n\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\reshape\\merge.py in __init__(self, left, right, how, on, left_on, right_on, axis, left_index, right_index, sort, suffixes, copy, indicator)\r\n    556         (self.left_join_keys,\r\n    557          self.right_join_keys,\r\n--> 558          self.join_names) = self._get_merge_keys()\r\n    559 \r\n    560         # validate the merge keys dtypes. We may need to coerce\r\n\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\reshape\\merge.py in _get_merge_keys(self)\r\n    808                     if not is_rkey(rk):\r\n    809                         if rk is not None:\r\n--> 810                             right_keys.append(right[rk]._values)\r\n    811                         else:\r\n    812                             # work-around for merge_asof(right_index=True)\r\n\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\frame.py in __getitem__(self, key)\r\n   2060             return self._getitem_multilevel(key)\r\n   2061         else:\r\n-> 2062             return self._getitem_column(key)\r\n   2063 \r\n   2064     def _getitem_column(self, key):\r\n\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\frame.py in _getitem_column(self, key)\r\n   2067         # get column\r\n   2068         if self.columns.is_unique:\r\n-> 2069             return self._get_item_cache(key)\r\n   2070 \r\n   2071         # duplicate columns & possible reduce dimensionality\r\n\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\generic.py in _get_item_cache(self, item)\r\n   1532         res = cache.get(item)\r\n   1533         if res is None:\r\n-> 1534             values = self._data.get(item)\r\n   1535             res = self._box_item_values(item, values)\r\n   1536             cache[item] = res\r\n\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\internals.py in get(self, item, fastpath)\r\n   3588 \r\n   3589             if not isnull(item):\r\n-> 3590                 loc = self.items.get_loc(item)\r\n   3591             else:\r\n   3592                 indexer = np.arange(len(self.items))[isnull(self.items)]\r\n\r\nC:\\Users\\brain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\indexes\\base.py in get_loc(self, key, method, tolerance)\r\n   2393                 return self._engine.get_loc(key)\r\n   2394             except KeyError:\r\n-> 2395                 return self._engine.get_loc(self._maybe_cast_indexer(key))\r\n   2396 \r\n   2397         indexer = self.get_indexer([key], method=method, tolerance=tolerance)\r\n\r\npandas\\_libs\\index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas\\_libs\\index.c:5239)()\r\n\r\npandas\\_libs\\index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas\\_libs\\index.c:5085)()\r\n\r\npandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas\\_libs\\hashtable.c:20405)()\r\n\r\npandas\\_libs\\hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas\\_libs\\hashtable.c:20359)()\r\n\r\nKeyError: 'user_id'\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429758071",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11201#issuecomment-429758071",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11201",
    "id": 429758071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTc1ODA3MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T08:42:35Z",
    "updated_at": "2018-10-15T08:42:35Z",
    "author_association": "MEMBER",
    "body": "@brainrichtech this is not a user forum where you can ask for help, but a place to discuss bugs and features of pandas. Please use a forum like StackOverlfow instead."
  }
]
