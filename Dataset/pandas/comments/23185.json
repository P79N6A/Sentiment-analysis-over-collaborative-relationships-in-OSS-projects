[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430284098",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430284098",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430284098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDI4NDA5OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T15:31:18Z",
    "updated_at": "2018-10-16T15:33:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @jreback @jorisvandenbossche @jbrockmendel  \r\n\r\nOK I wanted to open this issue because I've had trouble keeping up with all the\r\ngoings-on around this (and I was getting tired of rebasing the WIP PeriodArray\r\nPR). So I'm hoping we can come to a rough consensus on these outstanding\r\ndiscussion, and a concrete plan of how to get from master to there.\r\n\r\nIf necessary, we can move to a google doc or something to collaboratively edit\r\nthe design doc. I don't have a preference. Feel free to add discussion points\r\nto the \"outstanding discussions\" list.\r\n\r\nI'll try to write up my current thoughts later today."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430312190",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430312190",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430312190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDMxMjE5MA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T16:49:50Z",
    "updated_at": "2018-10-16T16:49:50Z",
    "author_association": "MEMBER",
    "body": "You're right (and Joris has expressed this elsewhere) that this conversation has splintered across a lot of places and centralization will help.\r\n\r\nI'm a big fan of breaking up big problems into smaller more manageable problems (as evidenced by #23159, small-step tslibs refactor, doomed improvement efforts in statsmodels, ...).  Are there any logically independent parts of the problem that can be split off?\r\n\r\nFWIW:\r\n#23173 I opened specifically to split discussion-requiring pieces off from the other PRs\r\n#22535 does touch the mentioned files, but should be orthogonal to the topics under discussion.\r\n#23113 I hope we can push through relatively easily, since it is needed for `DatetimeArray + DateOffset` addition to work.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430313689",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430313689",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430313689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDMxMzY4OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T16:54:22Z",
    "updated_at": "2018-10-16T16:54:22Z",
    "author_association": "MEMBER",
    "body": "I mentioned it on one of the PRs, but is it OK for you guys to agree on not merging any of the open PRs, before we have some agreement on the way forward? \r\n\r\n@jbrockmendel I understand you want to keep working on those PRs you opened (and it's also great that you do so much for pandas!), but let's maybe take a short pause doing new PRs until we agree on how we want to get to the finish-line here (in that sense: can you answer my mail regarding thursday?) \r\nOf course, doing some PRs might help to explore certain options, show how things can be done, etc. So that is certainly fine, just not finalizing / merging.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430327171",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430327171",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430327171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDMyNzE3MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T17:32:59Z",
    "updated_at": "2018-10-16T17:32:59Z",
    "author_association": "MEMBER",
    "body": "Sounds good."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430377686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430377686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430377686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDM3NzY4Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T19:55:46Z",
    "updated_at": "2018-10-16T19:55:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Composition vs. inheritance.\r\n\r\nThe case for composition:\r\n\r\n1. I see EAs as being at the same level as ndararys. Series & Index box an array\r\n   (ndarray or EA). I think it'd be strange for some indexes be instances\r\n   of an EA, depending on the dtype.\r\n2. I think that the calls have only been for specific Index classes to inherit\r\n   from EA. We'll limit the rest of this discussion to just Index, but I think\r\n   that fact is an argument for composition.\r\n3. Indexes have names, arrays don't. That means we'll have similar, but\r\n   different, function signatures and calls to pass names where they need to go.\r\n4. Some methods common to both Index and EA have different semantics (e.g.\r\n   `shift`).\r\n\r\nThe case against:\r\n\r\n1. Additional boilerplate code for dispatching an operation from the Series\r\n   or Index to the EA.\r\n2. ... (make your case here)\r\n\r\n---\r\n\r\nSince I'm pro-composition, I'll point out that I think we're required to have\r\nthat dispatching code anyway. If we're a Series / Index backed by an ndarray,\r\nthen we dispatch to numpy. If we're backed by an EA, then we dispatch to it. Or,\r\nto put it another way, Index / Series ops simply dispatch to the ops of the\r\nunderlying array."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430384931",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430384931",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430384931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDM4NDkzMQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T20:16:52Z",
    "updated_at": "2018-10-16T20:16:52Z",
    "author_association": "MEMBER",
    "body": "If there is a nice solution to the immutability/caching issue, then I can get on board with just-composition.  Until then, I think _both_ is the way to go for now.  i.e. PeriodIndex subclasses PeriodArray and PeriodIndex.values returns a PeriodArray.\r\n\r\nYour point 1) is the one I find most compelling.  It would be really nice if `.values` had a consistent definition as always-lossless."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430386892",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430386892",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430386892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDM4Njg5Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T20:23:12Z",
    "updated_at": "2018-10-16T20:23:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure how doing both would work in practice. I don't have a good sense for what complications that's likely to create.\r\n\r\nBut, I think that won't be necessary. I think we can manage to cache attributes like `hasnans` or `_isnan` on the Array, and invalidate that cache when necessary (`__setitem__`).\r\n\r\n> It would be really nice if .values had a consistent definition as always-lossless.\r\n\r\nAgreed. At this point, I think that's our only hope of having a consistent definition for what `.values` is."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430388922",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430388922",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430388922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDM4ODkyMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T20:29:24Z",
    "updated_at": "2018-10-16T20:37:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "On the caching point, this seems to work\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/pandas/core/arrays/period.py b/pandas/core/arrays/period.py\r\nindex 24d4b6e55..23a5845f0 100644\r\n--- a/pandas/core/arrays/period.py\r\n+++ b/pandas/core/arrays/period.py\r\n@@ -465,6 +465,14 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, ExtensionArray):\r\n                    \"Got '{}' instead.\".format(type(value).__name__))\r\n             raise TypeError(msg)\r\n         self._data[key] = value\r\n+        self._invalidate_cache()\r\n+\r\n+    def _invalidate_cache(self):\r\n+        self._cache = {}\r\n+\r\n+    @cache_readonly\r\n+    def hasnans(self):\r\n+        return self.isna().any()\r\n \r\n     def take(self, indices, allow_fill=False, fill_value=None):\r\n         from pandas.core.algorithms import take\r\n```\r\n\r\n</details>\r\n\r\nThere may be edge cases, or cases were we could skip invalidating the cache, but it's at least feasible.\r\n\r\nIt didn't come across in the diff, but the call to `_invalidate_cache` comes from `PeriodArray.__setitem__`.\r\n\r\n\"tests\":\r\n\r\n<details>\r\n\r\nwithout the invalidation\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\nar\r\nIn [2]: arr = pd.core.arrays.period_array(['2000', None], 'D')\r\n\r\nIn [3]: arr.hasnans\r\nOut[3]: True\r\n\r\nIn [4]: arr[1] = pd.Period(2000, 'D')\r\n\r\nIn [5]: arr.hasnans\r\nOut[5]: True\r\n\r\n```\r\n\r\nwith invalidation\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: arr = pd.core.arrays.period_array(['2000', None], 'D')\r\n\r\nIn [3]: arr.hasnans\r\nOut[3]: True\r\n\r\nIn [4]: arr[1] = pd.Period(2000, 'D')\r\n\r\nIn [5]: arr.hasnans\r\nOut[5]: False\r\n```\r\n\r\n</details>"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430392741",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430392741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430392741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDM5Mjc0MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T20:41:32Z",
    "updated_at": "2018-10-16T20:41:32Z",
    "author_association": "MEMBER",
    "body": "It overlaps with the first point of Tom, but an additional case for composition / disadvantage of inheritance:\r\n\r\n* A clear data model that you can explain and reason about (Series and Index are containers of array-likes), while the current inheritance is overly complicated and very opaque IMO.\r\n\r\nI personally also don't see any compelling case for inheritance (also the dispatching is not a reason IMO, as we need to it anyway for Series)\r\n\r\nSo personally, unless someone now actually makes an extensive and detailed argument for inheritance, I would propose to leave this discussion behind us and focus on how to solve possible remaining issues with the composition structure (the constructors, the caching).\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430393576",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430393576",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430393576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDM5MzU3Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T20:43:55Z",
    "updated_at": "2018-10-16T20:43:55Z",
    "author_association": "MEMBER",
    "body": "For the inheritance vs composition, we actually have examples to look at in practice: interval and categorical already do composition, while the datetimelikes are currently a kind of inheritance. I think the current datetimelike implementation shows the complexity of this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430397119",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430397119",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430397119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDM5NzExOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T20:54:59Z",
    "updated_at": "2018-10-16T20:54:59Z",
    "author_association": "MEMBER",
    "body": "Related to the caching issue, I think there are several options:\r\n\r\n1. Assess if it is actually significant (eg to decide if it is a blocker on the PeriodArray PR). From a quick timing, calculating the `_isnan` property the first time takes about 5% of the time to do `DatetimeIndex() + Timedelta()` arithmetic operation (whether it has a similar impact when we actually would no longer cache is not necessarily the case of course, should be checked further)\r\n\r\n2. Implement caching on the Array objects. I think this is certainly feasible, as Tom also explores above. \r\n\r\n3. Factor the operations that make use of caching out into functions instead of methods (like the current `_add_delta` methods), that is shared between Index and Array, and where eg the (cached or not) mask can be passed as an argument.\r\n\r\nSo I *think* there is certainly a solution possible, and my first point about \"is this important\" is then more to know if this is essential to already have in an initial \"big split\" PR like the PeriodArray PR, or if this can be left for a follow-up PR."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430411375",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430411375",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430411375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQxMTM3NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T21:42:01Z",
    "updated_at": "2018-10-16T21:42:01Z",
    "author_association": "MEMBER",
    "body": "Warning, long post coming.\r\n\r\nMy proposal for a possible way forward, let's call it **the \"minimally big\" PR with follow-up PRs** proposal:\r\n\r\n* For each Array class, we do a \"minimally big-split\" PR:\r\n  * a PR that does the actual split of the current inheritance structure into separate Index and Array objects\r\n  * but as minimal as possible:\r\n    * as a minimum get the tests passing\r\n    * and with agreement on the bigger design questions (different class structures, the constructors, some minimal design questions we can identify we want to agree on at this stage)\r\n  * I think this should try to mainly be \"moving around code\" (and adding some needed dispatching), to the extent possible of course to satisfy the above points, but meaning here that the goal of those PRs should not be to clean-up implementations, or to focus on deduplication, smart decorators, etc\r\n  * We do this for each Array class, and I think we should try to keep those as independent as possible for each Array class (Period, Datetime, maybe Timedelta?). This will of course mean some duplication between each Array, but at this stage this is OK. Doing this will keep the picture as clear as possible in each PR, and this can be cleaned-up later on.\r\n  * I think the current PeriodArray PR of Tom is a good start for such a PR.\r\n* During reviewing those PRs, we identify and track follow-up issues we agree on we want, but are OK to keep for a next stage. Things like: consolidating common patterns that can be shared between the EA based Index classes, or more specifically patterns that can be shared between the datetimelike Array classes; clean-up of the Index constructors (the simple_new, shallow_copy(_with_infer) story); restructuring of the tests (how to share tests between Index/Array?); other clean-up ideas, etc\r\n* After those \"minimal big splits\" are merged, we can start doing follow-up PRs based on the ideas that have formed during reviewing the previous PRs. This can now be smaller, more independent and easier to review PRs. \r\n  Those follow-up PRs can be easier to review, having clear goals identified before, and fitting already in the final structure giving better context to review the PR.\r\n\r\nMy reasoning to go for the above way forward compared to a \"first smaller clean-up PRs, then split\", are the following:\r\n\r\n* The current smaller PRs are very difficult to judge and review because the big picture (the final code structure) is still missing\r\n* Even after doing PRs preparing the split, the actual split PR will still be big\r\n* Many of the PRs that are now open which Tom listed in the initial issue, are things like deduplicating, moving common code to helper functions, ... All good things! But those can also perfectly be done *after* the initial split PR.\r\n\r\nThis proposal would mean that master will be in a temporary \"messy\" state (but still green of course). If we find this a problem, we can always first merge those PRs to a refactor branch, and only after some of the follow-up PRs have been done to that branch as well, merge it into master. \r\n(personally, I don't think that is needed as long as we keep master green, as it will only give additional complexity to keep master and that branch in sync).\r\n\r\nDoing the above, would in practice mean: first focus on some of the design discussions (eg the design of the constructors, and other issues mentioned in the top post), focus on doing and reviewing the actual splits, and for now wait with the other smaller PRs. \r\nAnd also in this proposal I think there is enough work to share for multiple people working at the same time (without trying to get things out of the big PRs to independent PRs). Doing those discussions, reviewing PRs, doing the Datetime or Timedelta Array, etc are also all things that need to be done and take time.\r\n\r\n\r\n--- \r\n\r\nSo please give your thoughts about this proposal, feedback, alternative proposals, ...\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430440088",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430440088",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430440088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQ0MDA4OA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T23:48:46Z",
    "updated_at": "2018-10-16T23:48:46Z",
    "author_association": "MEMBER",
    "body": "If patching `__setitem__` works robustly I think that would be a great solution.  It would probably be useful elsewhere, too.  The fact that it would be _so_ useful makes me think it must be harder than it looks, otherwise it would have been done long ago.  But I'd be happy to be proven wrong.\r\n\r\n> A clear data model that you can explain and reason about\r\n\r\nIf we were to go whole-hog on inheritance, the data model would be \"An Index is an Array with some additional fancy indexing/join/set methods (and a Block is an Array with `mgr_locs` attribute)\".  That said, conditional on the `__setitem__` thing working out, I'm happy to end this part of the conversation.\r\n\r\n> Factor the operations that make use of caching out into functions instead of methods\r\n\r\nThat's an interesting idea.  I'd like to give it some thought before forming an opinion.\r\n\r\n> The current smaller PRs are very difficult to judge and review because the big picture (the final code structure) is still missing\r\n\r\nAre they though?  `DatetimeArray` _does_ need `to_period` and `to_perioddelta` for arithmetic operations to work.  Is there any scenario in which we _dont_ want all three arrays to have `take` implemented?  If anything, isolating them makes it clear what depends on what, avoids the phenomenon in big PRs where I have to ask \"is this related to everything else?\"\r\n\r\n---\r\nMy main objection to the Big PR is that it precludes working in parallel.  If there was something about the implementation that required it be done All At Once that would be another matter, but as it is there is a lot of non-difficult stuff we can get out of the way before making final decisions about caching and constructors.  i.e. the \"Minimal Big Split\" can be made more minimal.\r\n\r\nSuppose hypothetically that two things both turn out to be more difficult than expected: the `__setitem__` patching and the arithmetic methods.  In the Big/Minimally Big model, everything is on hold until a single PR gets all of it right.  In a parallel model, I can figure out the arithmetic while Tom figures out the caching.  (For the sake of the example I'm assuming that the ways in which they are unexpectedly difficult are logically independent)\r\n\r\n---\r\nThe status quo is that non-#22862 PRs are on hold.  While not my first choice, I'd rather see that move forward than go in circles here.  Let's see what jreback has to say and reconnoiter."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430447928",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430447928",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430447928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQ0NzkyOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T00:31:42Z",
    "updated_at": "2018-10-17T00:31:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some general comments / points.\r\n\r\n- I am all for the composition pattern; we are already using this and it makes ``Index`` just a light wrapping of EA\r\n- It would be nice to share between EA implementations for DateArray / PeriodArray (which I think is accomplished by the DatetimelikeMixin), the concern is that this is *also* a mixin with ``Index``? I don't have a problem with mixin's being shared between EA / Index, though I suspect as we move to a more dispatch oriented mechanism this will be less of an issue.\r\n- I would like to decouple the discussions of ``Blocks`` from this conversation for now. They will eventually be a composed set of Arrays with Indexes (kind of like they are now). Trying to shoe-horn shared functionaility between EA, Index and Block is bit too much to try to hold mentally now. We can easily decide later to design a proper Block / Container to hold the internals later.\r\n- I am ok with a big PR to move things, I agree it can be hard to envision things when smaller things are actually moved.\r\n- I *really* would like to avoid completely changing idioms at this stage, mainly adding constructors that are non-idiomatic to pandas (e.g. this happened with RangeIndex and this completely breaks all other patterns). Like it or not we are stuck with this pattern, breaking it is all downside for anyone reading the code because you have more than 1 pattern.\r\n- EA's need to be come a more of a drop-in replacement for ndarrays. I am not advocating adding *all* methods as numpy has too many, but certain basic things should just work / exist (talking about ``.repeat()`` here).\r\n- We must not drop caching in either the EA's or the Indexes. This can also be easily accomplished thru mix-in classes (or thru dispatch, which is almost the same thing). ``_isnan`` is SO important and used extensiviely. Since Index is immutable this offers a tremendous advantage (and @jorisvandenbossche your example is just a trivial case). This is a must do."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430650468",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430650468",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430650468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY1MDQ2OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T14:27:01Z",
    "updated_at": "2018-10-17T14:32:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It would be nice to share between EA implementations for DateArray / PeriodArray (which I think is accomplished by the DatetimelikeMixin), the concern is that this is also a mixin with Index?\r\n\r\nI'm not sure, but I share this concern. I expect that well have a mixin or base class for DatetimeLikeArray with these common ops, and a base class for DatetimelikeIndex that just does the dispatching. I'm hopeful we won't need a mixin for DatetimelikeIndex.\r\n\r\n> EA's need to be come a more of a drop-in replacement for ndarrays.\r\n\r\n> We must not drop caching in either the EA's or the Indexes.\r\n\r\nThese two are slightly in tension. AFAIK, right now the only way to update an ExtensionArray inplace is with `__setitem__`. If we add any more, we would need to remember to manually invalidate the cache.\r\n\r\nedit: inplace ops is another, though nans usually (always for inplace?) propagate."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430652499",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430652499",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430652499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY1MjQ5OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T14:31:57Z",
    "updated_at": "2018-10-17T14:31:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The fact that it would be so useful makes me think it must be harder than it looks, otherwise it would have been done long ago.\r\n\r\nI suspect this is because it's not on ndarrays, and we didn't have an intermediate array-like that could track these. ndarrays can be manipulated inplace in so many ways that a cache sounds infeasible."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430658216",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430658216",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430658216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY1ODIxNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T14:46:36Z",
    "updated_at": "2018-10-17T14:46:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I feel like I still lack the information to make a judgement call on how to proceed here. So, how about I spend a chunk of time getting #22862 in to a reasonable state. I'll try to make it as minimal as possible while still passing, and in the process I'll identify pieces that can be reasonably split off.\r\n\r\nI think the biggest outstanding discussion / PR is around constructors and whether https://github.com/pandas-dev/pandas/pull/23140 should go first. I'll try to form some thoughts around that quickly."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430670475",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430670475",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430670475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY3MDQ3NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:16:42Z",
    "updated_at": "2018-10-17T15:16:42Z",
    "author_association": "MEMBER",
    "body": "Thanks for the answers! \r\n\r\n(and sorry again for my long answers :))\r\n\r\n> My main objection to the Big PR is that it precludes working in parallel.\r\n\r\nBecause this is an important point, I had a paragraph above trying to explain why I think this does not need to be the case, as I can also argue for the opposite:\r\n\r\n* The small PRs touching periods you were doing now made that Tom had a hard time continuing on the PeriodArray PR. In this sense, it also made it difficult to work in parallel. \r\n* I argued above for trying to keep the different array PRs as independent as possible.  And if you look at the current PeriodArray PR of Tom, that hardly touches the DatetimeArray code. So I think a parallel PR on DatetimeArray or TimedeltaArray is feasible (of course, there will be merge conflicts once one is merged and the other needs to be updated, and discussions on the one may also be relevant for the other. But all those things we now also already have with the several PRs). \r\n  Yes, that might mean some duplication initially between both Arrays, but let that be a perfect topic for a smaller, targetted follow-up PR. \r\n  And even if the above turns out to be really difficult, if we all focus on the PeriodArray PR, I think this can be merged rather quickly.\r\n* What needs to be done is not only the coding. Thoroughly reviewing (going through in detail through the diff, looking at the full code instead of the diff to see the full picture, trying out the PR interactively with some toy examples, comparing to a previous release, testing some changes to the PR to see if a comment makes sense, ....) takes a lot of time, and also needs to be happen (as a sidenote, last week I spend two full time days reviewing the Sparse PR and the Period PR, although sparse is maybe a bit special as it has quite a bit specific behaviour). \r\n  Further discussing and making proposals for the bigger design questions, also takes time. Making a detailed description or doing a proof of concept for eg the array constructors, or the caching mechanism also takes time (maybe we could do those with one of the already existing arrays to not get conflicts). \r\n  And typically it are those things that are the bottleneck to get a PR merged, not the actual coding.\r\n\r\n>  In a parallel model, I can figure out the arithmetic\r\n\r\nWhat do you mean exactly here? I think @TomAugspurger already figured this out in his PeriodArray PR (at least a minimal working solution that gets the job done). Tom, correct me if I am wrong. \r\nAnd also, I think it is still possible to explore the caching in parallel (try it on a different array, or do it as a patch on top of the period array PR's branch)\r\n\r\n> I would like to decouple the discussions of Blocks from this conversation for now.\r\n\r\nFully agree here. Apart from that we have an ExtensionBlock instead of the custom ones, there should not be much changes related to blocks.\r\n\r\n> It would be nice to share between EA implementations for DateArray / PeriodArray (which I think is accomplished by the DatetimelikeMixin), the concern is that this is also a mixin with Index?\r\n\r\nI think we will typically end up with a base class / mixin for the Arrays to share functionality there, and a mixin / base class for the datetimelike indexes to share things. I think those two mixins can be completely separate (the current Datetimelike Mixin is indeed shared between Arrays and Index, but that is just the temporary confusing state where Index/Array is not yet splitted properly)\r\n\r\n> I really would like to avoid completely changing idioms at this stage, mainly adding constructors that are non-idiomatic to pandas (e.g. this happened with RangeIndex and this completely breaks all other patterns). Like it or not we are stuck with this pattern\r\n\r\nWe are stuck with it for Index, but IMO that should not mean we should follow the exact same pattern for the Arrays (in all the different PRs related to this we have several times tried to discuss / understand what the different `__new__`/`_simple_new`/`_shallow_copy`/`_shallow_copy_with_infer` do, I really think we can make it simpler at the Array level). But will open a separate issue about that to keep that discussion separeate, as it is quite orthogonal to the rest of the workflow discussion.\r\n\r\n> EA's need to be come a more of a drop-in replacement for ndarrays. I am not advocating adding all methods as numpy has too many, but certain basic things should just work / exist (talking about .repeat() here).\r\n\r\nWe can certainly discuss, but in light of keeping the initial big-split PRs as minimal as possible / not have more discussion than needed on it, I would personally keep this discussion for a follow-up (of course, as long as the method is not essential to have the EA interface working).\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430671888",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430671888",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430671888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY3MTg4OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:20:21Z",
    "updated_at": "2018-10-17T15:20:21Z",
    "author_association": "MEMBER",
    "body": "> I feel like I still lack the information to make a judgement call on how to proceed here. So, how about I spend a chunk of time getting #22862 in to a reasonable state. I'll try to make it as minimal as possible while still passing, and in the process I'll identify pieces that can be reasonably split off.\r\n\r\n\\+1\r\n\r\n> I think the biggest outstanding discussion / PR is around constructors and whether #23140 should go first. I'll try to form some thoughts around that quickly.\r\n\r\nIf we focus first on the PeriodArray PR, I don't think that PR should be merged. But, it is the discussion that we had on one of the review comments (https://github.com/pandas-dev/pandas/pull/23140#discussion_r225003108) about the constructors that ideally indeed should be resolved. \r\nI will try to look at that now as well, and open a separate issue about it (unless you beat me to it).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430672943",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430672943",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430672943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY3Mjk0Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:22:57Z",
    "updated_at": "2018-10-17T15:23:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What do you mean exactly here? I think @TomAugspurger already figured this out in his PeriodArray PR (at least a minimal working solution that gets the job done). Tom, correct me if I am wrong.\r\n\r\n\r\nOps work on the PeriodArray PR by dispatch.  Though maybe @jbrockmendel meant ops with caching.\r\n\r\n```python\r\n        # PeriodIndex.__add__\r\n        def __add__(self, other):\r\n            # dispatch to ExtensionArray implementation\r\n            result = self._data.__add__(other)\r\n            return wrap_arithmetic_op(self, other, result)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430674623",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430674623",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430674623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY3NDYyMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:27:12Z",
    "updated_at": "2018-10-17T15:27:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "small FYI: I've updated the original post with a list of PeriodArray blockers that aren't touching any of the datetimelike files (e.g. https://github.com/pandas-dev/pandas/pull/23155). Those are bugs in master that hopefully have a clear fix which won't lead away from our end goal."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430676271",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430676271",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430676271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY3NjI3MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:31:21Z",
    "updated_at": "2018-10-17T15:31:21Z",
    "author_association": "MEMBER",
    "body": ">  Though maybe @jbrockmendel meant ops with caching.\r\n\r\nSince he mentioned both in the same sentence as two different things, I assumed this was not the case. So hence the question for clarification :-)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430685912",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430685912",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430685912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY4NTkxMg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:56:55Z",
    "updated_at": "2018-10-17T15:56:55Z",
    "author_association": "MEMBER",
    "body": "> It would be nice to share between EA implementations for DateArray / PeriodArray (which I think is accomplished by the DatetimelikeMixin), the concern is that this is also a mixin with Index?\r\n\r\nThe plan as I understand it is that DatetimeLikeArrayMixin will be mixed into the EA subclasses but will cease to be mixed in to DatetimeLikeIndexMixin.\r\n\r\n> Though maybe @jbrockmendel meant ops with caching.\r\n\r\nI meant extending the tests in tests/arithmetic to include the EA subclasses.  Since this was just a hypothetical example of \"two things going wrong at the same time\", let's not spend too much time on it.\r\n\r\n> I feel like I still lack the information to make a judgement call on how to proceed here. So, how about I spend a chunk of time getting #22862 in to a reasonable state. I'll try to make it as minimal as possible while still passing, and in the process I'll identify pieces that can be reasonably split off.\r\n\r\nSounds good.\r\n\r\nIn the interim, I'd like to get exceptions to the datetimelike PR moratorium for the following, which I think should have minimal overlap:\r\n\r\n- Arithmetic methods in all four core.arrays files.  Recently identified 2 un-tested cases, 2 bugs, and a bunch of duplicated code.  I'd like to fix this.\r\n\r\n- #23113 to_period and to_perioddelta, needed for arithmetic ops\r\n\r\n- The argmin/argmax validation portion of #23140 \r\n\r\n- Moving PeriodArray._maybe_convert_timedelta back to PeriodIndex._maybe_convert_timedelta.  It is no longer used in the Array class as of #23114\r\n\r\nI'll hold off pending an explicit OK."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430744516",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430744516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430744516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc0NDUxNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T18:47:08Z",
    "updated_at": "2018-10-17T18:47:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I pushed an update to https://github.com/pandas-dev/pandas/pull/22862/files that reduced the scope somewhat. Outside of indexes/period.py and ararys/period.py, there shouldn't be any extraneous changes.\r\n\r\nI can work to reduce the changes to indexes/period.py and ararys/period.py a bit, but I'd like to get the constructors nailed down first."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430747524",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430747524",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430747524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc0NzUyNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T18:55:37Z",
    "updated_at": "2018-10-17T18:55:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Arithmetic methods in all four core.arrays files\r\n\r\nDo you have a plan / WIP for this? My WIP PeriodArray PR doesn't do too much there I think. \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430767878",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430767878",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430767878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc2Nzg3OA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T20:01:08Z",
    "updated_at": "2018-10-17T20:01:08Z",
    "author_association": "MEMBER",
    "body": "I do have a branch about ready for the arithmetic fixes, will open a PR later today."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430850668",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-430850668",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 430850668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDg1MDY2OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T02:09:52Z",
    "updated_at": "2018-10-18T02:09:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I replaced the list of issues with a simple board at https://github.com/pandas-dev/pandas/projects/4\r\n\r\nI think everyone has permission to add / move things around there."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431022235",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-431022235",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 431022235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTAyMjIzNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T14:06:04Z",
    "updated_at": "2018-10-18T14:06:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Last biggish design discussion: what is `.values` for the index and series? Do we want to have that discussion here, or split it off?\r\n\r\nI think @jbrockmendel's preference is for `.values` to be lossless. I think this is a good principle to shoot for. We can't say that it's always an ndarray, (categorical), so lossless / no-copy is a good alternative.\r\n\r\nWe have some intermingling factors here:\r\n\r\n1. `datetime64[ns, tz]` *can* be converted to UTC, but this isn't 100% lossless. We don't know the original timezone, and there's probably weirdness with folds around DST transitions.\r\n2. `datetime64[ns]` (no tz) and `timedelta64[ns]` can be represented losslessly as an ndarray. If we return an EA for `datetime64[ns, tz]` Do we want to return an EA for these as well? Returning an EA would be \"internally consistent\", but would be a larger API change.\r\n\r\nI think my preference is for\r\n\r\n- period :: PeriodArray\r\n- timedelta :: ndarray[timedelta64[ns]]\r\n- datetime64[ns] :: ndarray[datetime64[ns]]\r\n- datetime64[ns, tz] :: ExtensionArray\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431029498",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-431029498",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 431029498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTAyOTQ5OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T14:25:21Z",
    "updated_at": "2018-10-18T14:26:05Z",
    "author_association": "MEMBER",
    "body": "We already have another issue for that no? \r\n\r\nPersonally, in the interest of getting the split PRs like the PeriodArray PR merged rather quickly, I would leave out the discussion on this from those PRs (or at least the decision, we can of course already discuss). In other words, not see it as a blocker for those PRs. \r\nThe way that keeping it a separate discussion is possible, is because internally we should just never use `.values`, but `._values` which is always the EA if possible. And the public `.values` can then always easily be changed to either ndarray or EA later on, if we made a decision."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435592816",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23185#issuecomment-435592816",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23185",
    "id": 435592816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTU5MjgxNg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-03T14:38:25Z",
    "updated_at": "2018-11-03T14:38:25Z",
    "author_association": "MEMBER",
    "body": "Jotting down some thoughts on how to move forward on implementing DatetimeArray/TimedeltaArray (DTA/TDA).  In particular thinking about reasonably-scoped steps.\r\n\r\n1) Nail down constructors.  De-duplicate.  Handle all the relevant cases so we can add DTA/TDA to the parametrized `box` in arithmetic tests.\r\n2) \"eventually\" things: ABC classes, `__repr__`, `tm.assert_foo_equals`\r\n3) offsets arithmetic with DTA/TDA (reasonably sized, ready-made tests, and tightly-contained scope)\r\n4) Arithmetic methods for TDA: `__mul__`, `__div__`, `__divmod__`, ...; unary methods including `__neg__`\r\n5) Array-like methods that turn out to be needed: is_monotonic, is_monotonic_increasing, is_unique, searchsorted, ravel. These are things I've found are needed in the do-it-all-at-once branch; I'll document+test exactly why they are each needed when we get there.\r\n6) EA Interface methods.  This is the point where we need to consider doing the rest all-at-once (or more specifically the point where I expect @jorisvandenbossche will voice a strong, well-thought-out opinion)\r\n7) Change from Inheritance to Composition.\r\n7b) Change `_values` etc and the ensuing deluge of Series and internals behavior.  Change tests where expected output is affected.  Document.\r\n\r\nThe biggest stumbling point ATM in my all-at-once branch is in internals where dimension checks are failing.  Hopefully I'll figure that out by the time we reach 7."
  }
]
