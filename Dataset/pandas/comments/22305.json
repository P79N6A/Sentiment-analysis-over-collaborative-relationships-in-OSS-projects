[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412489895",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22305#issuecomment-412489895",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22305",
    "id": 412489895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjQ4OTg5NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T11:38:05Z",
    "updated_at": "2018-08-13T11:38:05Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report! Looking into it / a fix is certainly welcome."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412555047",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22305#issuecomment-412555047",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22305",
    "id": 412555047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjU1NTA0Nw==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T15:17:25Z",
    "updated_at": "2018-08-13T15:17:25Z",
    "author_association": "MEMBER",
    "body": "We have this test:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/eb0ac5437f9fee2939b3c3c4dab3ed745b5a9c38/pandas/tests/indexes/datetimes/test_tools.py#L505\r\n\r\nWhere currently this test with `cache=True` is skipped because of #18111 which I think is similar to what you found."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412653005",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22305#issuecomment-412653005",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22305",
    "id": 412653005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjY1MzAwNQ==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T20:29:57Z",
    "updated_at": "2018-08-13T20:29:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the end it comes down to the following difference between `unique` and `infer_dtype`:\r\n\r\nWhile unique [mangles `pd.NaT` and `np.nan` but not `None`](https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/hashtable_class_helper.pxi.in#L852):\r\n\r\n```\r\n            # `val is None` below is exception to prevent mangling of None and\r\n            # other NA values; note however that other NA values (ex: pd.NaT\r\n            # and np.nan) will still get mangled, so many not be a permanent\r\n            # solution; see GH 20866\r\n           if not checknull(val) or val is None:\r\n                  ...\r\n```\r\n\r\n[`infer_dtype` magles them all](https://github.com/pandas-dev/pandas/blob/73909638515327412997e2037750fa9b57e3f7c0/pandas/_libs/lib.pyx#L1160):\r\n\r\n```\r\n        if val is None or util.is_nan(val):\r\n            pass\r\n        elif val is NaT:\r\n            seen_pdnat = True\r\n        else:\r\n            ....\r\n```\r\n\r\nI ask myself, whether this `infer_dtype`-business is really necessary and maybe can be avoided.\r\n\r\nThis issue kind of blocks PR #22296, because PR #22296  fixes the mangling of `pd.NaT` and `np.nan` in `unique`, and thus adding another problem similar to `[None, pd.NaT]`: i.e. `[np.nan, pd.NaT]` - and this case is covered in the test suite. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413683627",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22305#issuecomment-413683627",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22305",
    "id": 413683627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzY4MzYyNw==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-16T21:02:02Z",
    "updated_at": "2018-08-16T21:02:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "This test should probably pass once it is fixed:\r\n\r\n```\r\n    def test_NA_values_with_cache(self):\r\n        # GH 22305\r\n        na_values = [None, np.nan, pd.NaT]\r\n        # check pairwise, that no pair of na values\r\n        # is mangled\r\n        for f in na_values:\r\n            for s in na_values:\r\n                if f is not s:  # otherwise not unique\r\n                    expected = Index([NaT, NaT], dtype='datetime64[ns]')\r\n                    result = to_datetime([f, s], cache=True)\r\n                    tm.assert_index_equal(result, expected)\r\n```"
  }
]
