[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/401181885",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21667#issuecomment-401181885",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21667",
    "id": 401181885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTE4MTg4NQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T21:40:06Z",
    "updated_at": "2018-06-28T21:40:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since the underlying binary search is actually being done on the codes, I wonder if the thought may have have been preventing surprising behavior if code ordering isn't what you expected, e.g. you ended up with something like this that 'feels' sorted, but isn't.  At least with `as_ordered()` it becomes more clear the data is not sorted?  \r\n```python\r\nc = pd.Categorical(['a', 'a', 'b', 'b', 'c'], categories=pd.Index(['b', 'a', 'c']))\r\n\r\nc\r\nOut[140]: \r\n[a, a, b, b, c]\r\nCategories (3, object): [b, a, c]\r\n\r\nc.as_ordered()\r\nOut[142]: \r\n[a, a, b, b, c]\r\nCategories (3, object): [b < a < c]\r\n```\r\n\r\nNot necessarily opposed to the change though."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/401184776",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21667#issuecomment-401184776",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21667",
    "id": 401184776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTE4NDc3Ng==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T21:53:05Z",
    "updated_at": "2018-06-28T21:54:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, but the same could be said about ``sort_values``\r\n\r\n```python\r\n>>> c.sort_values()\r\n[b, b, a, a, c]\r\nCategories (3, object): [b, a, c]\r\n```\r\nsort_values does it this way for performance reasons and searchsorted should too, as searchsorted and sort_values are cousins of sorts (a sorted array is required to use searchsorted, so logically they should follow the same rules wrt. orderedness - if you can sort an unordered array, it should also be possible to use searchsorted on it)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/414213751",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21667#issuecomment-414213751",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21667",
    "id": 414213751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDIxMzc1MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T06:46:51Z",
    "updated_at": "2018-08-20T06:46:51Z",
    "author_association": "MEMBER",
    "body": "\\+1 to change this. `searchsorted` requires the values to be sorted, but `ordered=True` is not necessary to sort a Categorical, so IMO also not needed for searchsorted"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/414370406",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21667#issuecomment-414370406",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21667",
    "id": 414370406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDM3MDQwNg==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T16:02:09Z",
    "updated_at": "2018-08-20T16:02:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "```python\r\n>>> c = pd.Categorical(['a', 'a', 'b', 'b', 'c'], categories=pd.Index(['b', 'a', 'c']))\r\n>>> s1 = pd.Series(c)\r\n>>> s1.is_monotonic_increasing\r\nFalse\r\n>>> s2 = s1.sort_values()\r\n>>> s2.is_monotonic_increasing\r\nTrue\r\n```\r\n\r\ni.e. ``is_monotonic_increasing`` works on codes, like ``sort_values``. Seems logical to standardize ``searchsorted`` to work on codes also.\r\n"
  }
]
