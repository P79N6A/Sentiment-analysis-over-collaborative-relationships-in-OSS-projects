[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/111728125",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-111728125",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 111728125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTcyODEyNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-13T16:40:28Z",
    "updated_at": "2015-06-13T16:40:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "see #2485 \n\nThe tricky thing with this is how to actually propogate this meta-data. I think this _could_ work if it was attached to the index itself (as an optional additional array of meta data). If this were achieved, then this should be straightforward to have operations work on it (though to be honest that is a bit out of scope for main pandas, perhaps a sub-class / other library would be better).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/111738351",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-111738351",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 111738351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTczODM1MQ==",
    "user": {
      "login": "mdk73",
      "id": 2737768,
      "node_id": "MDQ6VXNlcjI3Mzc3Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2737768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mdk73",
      "html_url": "https://github.com/mdk73",
      "followers_url": "https://api.github.com/users/mdk73/followers",
      "following_url": "https://api.github.com/users/mdk73/following{/other_user}",
      "gists_url": "https://api.github.com/users/mdk73/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mdk73/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mdk73/subscriptions",
      "organizations_url": "https://api.github.com/users/mdk73/orgs",
      "repos_url": "https://api.github.com/users/mdk73/repos",
      "events_url": "https://api.github.com/users/mdk73/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mdk73/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-13T18:24:07Z",
    "updated_at": "2015-06-13T18:24:07Z",
    "author_association": "NONE",
    "body": "Thanks for your comment.\nI am not sure what you mean with attaching metadata to the index, and why this is important.\n\nMaybe the proposed way with adding an attribute 'unit' to the columns is not the best way, but hopefully units are significantly less difficult than arbitrary metadata.\nPersonally I do not think that an attribute 'unit' needs to support all kind of data, 'str' could be enough.\n\nI think pint (there are other modules, but I do not know them, sorry)  is capable of taking care about the units itself (also throwing errors when misused), so this would not be a pandas issue.\n\nHere is a small snippet that demonstrates how a new unit could be created if two columns are multiplicated:\n\n``` python\n#prototype column1, omitting the name and index\nvalue1 = [1]\nunit1 = 'meter'\n# column1: representation of value and unit\ncolumn1 = value1 * units(unit1)\n# column2: representation of value and unit\ncolumn2 = [2] * units('meter')\n# creating a new column: column1 * column2\ncolumn12 = column1 * column2\nprint 'column12: {}'.format(column12)\n# value could go to a new column of a DataFrame\nprint 'value of column12: {}'.format(column12.magnitude)\n# str(column12.units) could serve as the unit-attribute for the new column\nprint 'unit of column12: {}'.format(column12.units)\n```\n\noutput:\n\n``` python\ncolumn12: [2] meter ** 2\nvalue of column12: [2]\nunit of column12: meter ** 2\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/111822451",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-111822451",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 111822451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTgyMjQ1MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-14T12:35:26Z",
    "updated_at": "2015-06-14T12:35:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mdk73 as I said this could be done, but there are lots and lots of tests cases and behavior that are needed, e.g.\n\n```\nx = DataFrame with some quantities\ny = DataFrame with no quantities\nz = DataFrame with different quantities\n```\n\nso what are\n\n```\nx * x\nx * y\nx * z\n```\n\nthese may seem completely obvious, and for the most part they are, but you have to propogate things very carefully. As I said, this is a natural attachment for the `Index`, a new property that can be examined (kind of how `.name` works).\n\nThe way to investigate is to add the property and write a suite of tests that ensure correct propogation on the `Index` object, e.g. things like: `.reindex,.union,.intersection,__init__` etc.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/112144799",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-112144799",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 112144799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjE0NDc5OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-15T17:19:06Z",
    "updated_at": "2015-06-15T17:19:06Z",
    "author_association": "MEMBER",
    "body": "Unit aware arrays are indeed be extremely valuable for some use cases, but it's difficult to see how they could be integrated into the core of pandas in a way that is agnostic about the particular implementation. We definitely _do not_ want to duplicate the work of `pint` or other similar packages in pandas, nor even pick a preferred units library. Instead, we want to define a useful set of extension points, e.g., similar to [`__numpy_ufunc__`](http://numpy-tst.readthedocs.org/en/latest/neps/ufunc-overrides.html). So, this won't be an easy change, and possibly is something best reserved for thinking about in the design of \"pandas 2.0\".\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/155998777",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-155998777",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 155998777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NTk5ODc3Nw==",
    "user": {
      "login": "blalterman",
      "id": 12834389,
      "node_id": "MDQ6VXNlcjEyODM0Mzg5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12834389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blalterman",
      "html_url": "https://github.com/blalterman",
      "followers_url": "https://api.github.com/users/blalterman/followers",
      "following_url": "https://api.github.com/users/blalterman/following{/other_user}",
      "gists_url": "https://api.github.com/users/blalterman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blalterman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blalterman/subscriptions",
      "organizations_url": "https://api.github.com/users/blalterman/orgs",
      "repos_url": "https://api.github.com/users/blalterman/repos",
      "events_url": "https://api.github.com/users/blalterman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blalterman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T05:00:00Z",
    "updated_at": "2015-11-12T05:09:32Z",
    "author_association": "NONE",
    "body": "What about having a user define a dictionary containing any units she or he uses via `pd.set_option`. Whenever pandas does a calculation, it checks all objects in the calculation. It then takes all units and combines them just as would be in the function (e.g. pass all units through the function?). If an object has no units, take units as `1`. At the end of the computation, you can then specify a new unit for the result and pandas will divide out the units accordingly. Alternatively, whenever pandas does a calculation, it can just multiply any values (perhaps excluding a user-defined flag value) and then run the calculation, converting out at the end. This is how I run a lot of my calculations. Why not do something like use lines with `to_SI`?\n\n```\ndef traditional(b_mag, rho_vals, fill=-9999):\n    \"\"\"Calculate the Alfven speed.\"\"\"\n\n    # I store all of my physical constants in `_pccv`.\n    mu0 = _pccv.misc['mu0'] #.physical_constants\n\n    # Have pandas do this to every value before a computation.\n    b_to_SI   = _pccv.to_SI['b']\n    rho_to_SI = _pccv.to_SI['rho']\n    v_to_SI   = _pccv.to_SI['v']    \n\n    b = b_mag.copy() * b_to_SI\n    rho = rho_vals.copy() * rho_to_SI\n\n    if rho.ndim > 1: rho = rho.sum(axis=_argmin(rho.shape))\n\n    Ca_denominator = _sqrt(mu0 * rho, dtype=_float64)\n    Ca_calc = _divide(b, Ca_denominator, dtype=_float64)\n\n    # At the end of your computation, specify the output unit and the \n    # following line would be run automatically.\n    Ca_kms = Ca_calc / v_to_SI    \n\n    return Ca_kms\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/156014063",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-156014063",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 156014063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NjAxNDA2Mw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T06:30:58Z",
    "updated_at": "2015-11-12T06:30:58Z",
    "author_association": "MEMBER",
    "body": "There are several existing approaches to units in Python -- notably [pint](https://pint.readthedocs.org/en/0.6/) and [`astropy.units`](http://docs.astropy.org/en/stable/units/). We should definitely be careful before reinventing the wheel here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/157409272",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-157409272",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 157409272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQwOTI3Mg==",
    "user": {
      "login": "denfromufa",
      "id": 7870949,
      "node_id": "MDQ6VXNlcjc4NzA5NDk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7870949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/denfromufa",
      "html_url": "https://github.com/denfromufa",
      "followers_url": "https://api.github.com/users/denfromufa/followers",
      "following_url": "https://api.github.com/users/denfromufa/following{/other_user}",
      "gists_url": "https://api.github.com/users/denfromufa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/denfromufa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/denfromufa/subscriptions",
      "organizations_url": "https://api.github.com/users/denfromufa/orgs",
      "repos_url": "https://api.github.com/users/denfromufa/repos",
      "events_url": "https://api.github.com/users/denfromufa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/denfromufa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T15:45:54Z",
    "updated_at": "2015-11-17T15:45:54Z",
    "author_association": "NONE",
    "body": "+1 on units, especially for plots with multiple axis:\n\nhttp://matplotlib.org/examples/axes_grid/demo_parasite_axes2.html\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/162239262",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-162239262",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 162239262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjIzOTI2Mg==",
    "user": {
      "login": "mikofski",
      "id": 1385621,
      "node_id": "MDQ6VXNlcjEzODU2MjE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1385621?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikofski",
      "html_url": "https://github.com/mikofski",
      "followers_url": "https://api.github.com/users/mikofski/followers",
      "following_url": "https://api.github.com/users/mikofski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikofski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikofski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikofski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikofski/orgs",
      "repos_url": "https://api.github.com/users/mikofski/repos",
      "events_url": "https://api.github.com/users/mikofski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikofski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-05T19:26:24Z",
    "updated_at": "2015-12-05T19:26:24Z",
    "author_association": "NONE",
    "body": "Similar to #2494\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167859865",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-167859865",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 167859865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Nzg1OTg2NQ==",
    "user": {
      "login": "VelizarVESSELINOV",
      "id": 8209940,
      "node_id": "MDQ6VXNlcjgyMDk5NDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8209940?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VelizarVESSELINOV",
      "html_url": "https://github.com/VelizarVESSELINOV",
      "followers_url": "https://api.github.com/users/VelizarVESSELINOV/followers",
      "following_url": "https://api.github.com/users/VelizarVESSELINOV/following{/other_user}",
      "gists_url": "https://api.github.com/users/VelizarVESSELINOV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VelizarVESSELINOV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VelizarVESSELINOV/subscriptions",
      "organizations_url": "https://api.github.com/users/VelizarVESSELINOV/orgs",
      "repos_url": "https://api.github.com/users/VelizarVESSELINOV/repos",
      "events_url": "https://api.github.com/users/VelizarVESSELINOV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VelizarVESSELINOV/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-29T19:26:17Z",
    "updated_at": "2015-12-29T19:26:17Z",
    "author_association": "NONE",
    "body": ":+1: units awareness of the column as a string it is a good enough first step to be able to store the unit associated with the column. It will be nice `read_csv` to be able to capture the unit line and store them. Other metadata enhancement will be nice to store is description for each column or even history if some operations are done with the column.\n\nI think the community will be not able to align on unit naming conversion this should be managed outside pandas, also the conversion factors can be managed outside the pandas.\n\nUnit name challenge: there are a lot of unit aliases and in some case conflicts.\nI think the community will be not able to align on unit naming conversion this should be managed outside pandas, also the conversion factors can be managed outside the pandas.\n\nUnit name challenge: there are a lot of unit aliases and in some case conflicts.\nThere are a lot of units spellings B for different purposes is it Bytes, Bites or Bels https://en.wikipedia.org/wiki/Decibel#bel\nOr S is it seconds, Siemens https://en.wikipedia.org/wiki/Siemens_(unit)\n\nIn my domain, UOM from Energistics (http://www.energistics.org/asset-data-management/unit-of-measure-standard) is covering most of my needs, but I agree for people that manage more digital storage units or date time units maybe this is out of scope.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167860801",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-167860801",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 167860801,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Nzg2MDgwMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-29T19:32:25Z",
    "updated_at": "2015-12-29T19:32:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think a very straightforward way of doing this (though will get a bit of flack from @shoyer, @wesm, @njsmith @teoliphant for not doing this in c :<) is to simply define an 'extension pandas dtype' along the lines of `DatetimeTZDtype`.\n\nE.g. you would have a `float64` like dtype with a unit parameter (which could be a value from one of the units libraries, so pandas is basically agnostic). \n\nThen would need some modification to the ops routines to handle the interactions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319420640",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-319420640",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 319420640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQyMDY0MA==",
    "user": {
      "login": "tomchor",
      "id": 13205162,
      "node_id": "MDQ6VXNlcjEzMjA1MTYy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13205162?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomchor",
      "html_url": "https://github.com/tomchor",
      "followers_url": "https://api.github.com/users/tomchor/followers",
      "following_url": "https://api.github.com/users/tomchor/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomchor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomchor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomchor/subscriptions",
      "organizations_url": "https://api.github.com/users/tomchor/orgs",
      "repos_url": "https://api.github.com/users/tomchor/repos",
      "events_url": "https://api.github.com/users/tomchor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomchor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T16:18:15Z",
    "updated_at": "2017-08-01T16:18:15Z",
    "author_association": "NONE",
    "body": "Just to make things more explicit, this same discussion is happening at a [pint's issue](https://github.com/hgrecco/pint/issues/401) (that is actually referenced here).\r\n\r\nI think there should be an exchange of information from both sides to make robust solution and to avoid \"reinventing the wheel\", but IMHO the actual implementation should come from pint, with pandas only providing a good base for it (as some comments here have already said)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319637995",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-319637995",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 319637995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTYzNzk5NQ==",
    "user": {
      "login": "Bernhard10",
      "id": 662579,
      "node_id": "MDQ6VXNlcjY2MjU3OQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/662579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bernhard10",
      "html_url": "https://github.com/Bernhard10",
      "followers_url": "https://api.github.com/users/Bernhard10/followers",
      "following_url": "https://api.github.com/users/Bernhard10/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bernhard10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bernhard10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bernhard10/subscriptions",
      "organizations_url": "https://api.github.com/users/Bernhard10/orgs",
      "repos_url": "https://api.github.com/users/Bernhard10/repos",
      "events_url": "https://api.github.com/users/Bernhard10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bernhard10/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T10:49:12Z",
    "updated_at": "2017-08-02T10:49:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I tried to follow @jreback's idea of adding an additional dtype. My pull request is not ready to merge, but an outline how it could work.\r\n\r\n@tomchor I started to write this pull request yesterday, before you commented that you would prefer to implement this in pint instead, that's why I post it here."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319692424",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-319692424",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 319692424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTY5MjQyNA==",
    "user": {
      "login": "mikofski",
      "id": 1385621,
      "node_id": "MDQ6VXNlcjEzODU2MjE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1385621?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikofski",
      "html_url": "https://github.com/mikofski",
      "followers_url": "https://api.github.com/users/mikofski/followers",
      "following_url": "https://api.github.com/users/mikofski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikofski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikofski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikofski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikofski/orgs",
      "repos_url": "https://api.github.com/users/mikofski/repos",
      "events_url": "https://api.github.com/users/mikofski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikofski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T14:37:47Z",
    "updated_at": "2017-08-02T14:37:47Z",
    "author_association": "NONE",
    "body": "@Bernhard10 any reason you choose not to use [Pint](https://pypi.python.org/pypi/pint) or [Quantities](https://pypi.python.org/pypi/quantities) or another established, mature, tested, robust, popular units package?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319706306",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-319706306",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 319706306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTcwNjMwNg==",
    "user": {
      "login": "tomchor",
      "id": 13205162,
      "node_id": "MDQ6VXNlcjEzMjA1MTYy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13205162?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomchor",
      "html_url": "https://github.com/tomchor",
      "followers_url": "https://api.github.com/users/tomchor/followers",
      "following_url": "https://api.github.com/users/tomchor/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomchor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomchor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomchor/subscriptions",
      "organizations_url": "https://api.github.com/users/tomchor/orgs",
      "repos_url": "https://api.github.com/users/tomchor/repos",
      "events_url": "https://api.github.com/users/tomchor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomchor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T15:23:46Z",
    "updated_at": "2017-08-02T15:23:46Z",
    "author_association": "NONE",
    "body": "@Bernhard10 I think the additional `dtype` can work. I'm happy someone's working on it.\r\n\r\nAbout implementing it in Pint, unfortunately I'm not the man to do it (at least right now). I still have a lot to learn about Pint and I have some other urgent priorities to take care.\r\n\r\n@mikofski I guess Pint looks like a better candidate (at least for me) because it seems more intuitive and  simpler. But I guess there would be no strong argument against using Quantities. I think the point of providing a general basis for the implementation in Pandas (such as the `dtype` idea) is because it can be implemented by whatever units package indepedently. So people using Pint could easily develop support for Pandas, as could people using Quantities."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319710311",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-319710311",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 319710311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTcxMDMxMQ==",
    "user": {
      "login": "mikofski",
      "id": 1385621,
      "node_id": "MDQ6VXNlcjEzODU2MjE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1385621?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikofski",
      "html_url": "https://github.com/mikofski",
      "followers_url": "https://api.github.com/users/mikofski/followers",
      "following_url": "https://api.github.com/users/mikofski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikofski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikofski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikofski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikofski/orgs",
      "repos_url": "https://api.github.com/users/mikofski/repos",
      "events_url": "https://api.github.com/users/mikofski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikofski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T15:37:19Z",
    "updated_at": "2017-08-02T15:37:19Z",
    "author_association": "NONE",
    "body": "@tomchor, I do think a backend approach that allowed the units package to be swappable is the best approach. Also I agree, Pint is easier and more popular IMHO than Quantities right now, although before Pint, Quantities was definitely the most popular, and is still very good\n\n@bernhard10, if you are implementing `dtype` approach, maybe look at Quantities first and talk to their maintainers because Quantities also uses `dtype` so this may save you a lot of time and testing. Also please consider making your pandas units abstract, defaulting to your version but allowing any other suitable backend to be used as long as it implements the abstract API"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319755871",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-319755871",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 319755871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc1NTg3MQ==",
    "user": {
      "login": "Bernhard10",
      "id": 662579,
      "node_id": "MDQ6VXNlcjY2MjU3OQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/662579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bernhard10",
      "html_url": "https://github.com/Bernhard10",
      "followers_url": "https://api.github.com/users/Bernhard10/followers",
      "following_url": "https://api.github.com/users/Bernhard10/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bernhard10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bernhard10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bernhard10/subscriptions",
      "organizations_url": "https://api.github.com/users/Bernhard10/orgs",
      "repos_url": "https://api.github.com/users/Bernhard10/repos",
      "events_url": "https://api.github.com/users/Bernhard10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bernhard10/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T18:20:25Z",
    "updated_at": "2017-08-02T18:20:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mikofski I am currently testing with pint, but the idea of the `dtype` approach would be to make the units package swappable.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319769187",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-319769187",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 319769187,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc2OTE4Nw==",
    "user": {
      "login": "dopplershift",
      "id": 221526,
      "node_id": "MDQ6VXNlcjIyMTUyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/221526?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dopplershift",
      "html_url": "https://github.com/dopplershift",
      "followers_url": "https://api.github.com/users/dopplershift/followers",
      "following_url": "https://api.github.com/users/dopplershift/following{/other_user}",
      "gists_url": "https://api.github.com/users/dopplershift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dopplershift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dopplershift/subscriptions",
      "organizations_url": "https://api.github.com/users/dopplershift/orgs",
      "repos_url": "https://api.github.com/users/dopplershift/repos",
      "events_url": "https://api.github.com/users/dopplershift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dopplershift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T19:10:45Z",
    "updated_at": "2017-08-02T19:10:45Z",
    "author_association": "NONE",
    "body": "@mikofski Can you point to which \"Quantities\" package you're referring to? I'm aware of a few unit packages that use numpy array sub-classes, but I'm not aware of any that use custom dtypes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319785182",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-319785182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 319785182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc4NTE4Mg==",
    "user": {
      "login": "mikofski",
      "id": 1385621,
      "node_id": "MDQ6VXNlcjEzODU2MjE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1385621?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikofski",
      "html_url": "https://github.com/mikofski",
      "followers_url": "https://api.github.com/users/mikofski/followers",
      "following_url": "https://api.github.com/users/mikofski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikofski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikofski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikofski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikofski/orgs",
      "repos_url": "https://api.github.com/users/mikofski/repos",
      "events_url": "https://api.github.com/users/mikofski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikofski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T20:15:10Z",
    "updated_at": "2017-08-02T20:15:10Z",
    "author_association": "NONE",
    "body": "You're right, my bad, https://pypi.python.org/pypi/quantities overloads the `ndarray` `__new__` method not `dtype` sorry"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400615470",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-400615470",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 400615470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDYxNTQ3MA==",
    "user": {
      "login": "scootty1",
      "id": 38665102,
      "node_id": "MDQ6VXNlcjM4NjY1MTAy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/38665102?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scootty1",
      "html_url": "https://github.com/scootty1",
      "followers_url": "https://api.github.com/users/scootty1/followers",
      "following_url": "https://api.github.com/users/scootty1/following{/other_user}",
      "gists_url": "https://api.github.com/users/scootty1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scootty1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scootty1/subscriptions",
      "organizations_url": "https://api.github.com/users/scootty1/orgs",
      "repos_url": "https://api.github.com/users/scootty1/repos",
      "events_url": "https://api.github.com/users/scootty1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scootty1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-27T10:01:03Z",
    "updated_at": "2018-06-27T10:01:03Z",
    "author_association": "NONE",
    "body": "Is there any new information on this topic? Unit handling, at least by having a simple field to store a unit description in for each column, would be really helpful. I really like pandas, but the lack of support for meta-data makes me fall back to dictionaries more and more."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400628732",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-400628732",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 400628732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDYyODczMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-27T10:43:13Z",
    "updated_at": "2018-07-17T20:21:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is certainly possible via ExtensionArray which getting lots of support lately: http://pandas-docs.github.io/pandas-docs-travis/extending.html#extension-types\r\n\r\nbut would need a community contribution to bootstrap"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/401977195",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-401977195",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 401977195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTk3NzE5NQ==",
    "user": {
      "login": "scootty1",
      "id": 38665102,
      "node_id": "MDQ6VXNlcjM4NjY1MTAy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/38665102?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scootty1",
      "html_url": "https://github.com/scootty1",
      "followers_url": "https://api.github.com/users/scootty1/followers",
      "following_url": "https://api.github.com/users/scootty1/following{/other_user}",
      "gists_url": "https://api.github.com/users/scootty1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scootty1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scootty1/subscriptions",
      "organizations_url": "https://api.github.com/users/scootty1/orgs",
      "repos_url": "https://api.github.com/users/scootty1/repos",
      "events_url": "https://api.github.com/users/scootty1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scootty1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T00:32:15Z",
    "updated_at": "2018-07-03T00:32:15Z",
    "author_association": "NONE",
    "body": "Yeah, this looks really nice from the view of a programmer, but I guess the main user of pandas is some kind of data scientist, who just wants an easy solution which can be implemented in a low amount of time and does not want to delve to deep into the backend of the modules. So without any community contribution, I guess most people won't be able to use the functionality of ExtensionArray."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/410864389",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10349#issuecomment-410864389",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10349",
    "id": 410864389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDg2NDM4OQ==",
    "user": {
      "login": "znicholls",
      "id": 23625371,
      "node_id": "MDQ6VXNlcjIzNjI1Mzcx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/23625371?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/znicholls",
      "html_url": "https://github.com/znicholls",
      "followers_url": "https://api.github.com/users/znicholls/followers",
      "following_url": "https://api.github.com/users/znicholls/following{/other_user}",
      "gists_url": "https://api.github.com/users/znicholls/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/znicholls/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/znicholls/subscriptions",
      "organizations_url": "https://api.github.com/users/znicholls/orgs",
      "repos_url": "https://api.github.com/users/znicholls/repos",
      "events_url": "https://api.github.com/users/znicholls/events{/privacy}",
      "received_events_url": "https://api.github.com/users/znicholls/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-06T21:51:49Z",
    "updated_at": "2018-08-06T21:51:49Z",
    "author_association": "NONE",
    "body": "@jreback I've started to have a go with an ExtensionArray. Unfortunately I'm a complete newbie when it comes to pandas and pint (and coding, really) so I don't actually know what I'm doing. I've got it to the point where a DataFrame can store a pint array without automatically converting it to a numpy array but am lost from there. Would you mind having a 5 minute look and potentially giving a pointer or two as I have no idea what sensible next steps are. https://github.com/hgrecco/pint/pull/671"
  }
]
