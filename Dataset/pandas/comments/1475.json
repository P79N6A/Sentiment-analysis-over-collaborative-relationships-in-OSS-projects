[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6356412",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1475#issuecomment-6356412",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1475",
    "id": 6356412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTY0MTI=",
    "user": {
      "login": "lesteve",
      "id": 1680079,
      "node_id": "MDQ6VXNlcjE2ODAwNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1680079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lesteve",
      "html_url": "https://github.com/lesteve",
      "followers_url": "https://api.github.com/users/lesteve/followers",
      "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
      "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
      "organizations_url": "https://api.github.com/users/lesteve/orgs",
      "repos_url": "https://api.github.com/users/lesteve/repos",
      "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lesteve/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-15T13:27:22Z",
    "updated_at": "2012-06-15T13:27:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually it seems to work fine when constructing the index from strings instead of datetimes:\n\n``` python\nIn [1]: import pandas\n\nIn [2]: ts = pandas.TimeSeries(index=['1400-02-01'], data = [1])\n\nIn [3]: ts\nOut[3]: 1400-02-01    1\n```\n\nand the numpy.datetime64 construction from datetime.datetime seems fine as well:\n\n``` python\nIn [5]: np.datetime64(datetime.datetime(1400,1,2))\nOut[5]: 1400-01-02 00:00:00\n```\n\nso the blame seems to be on pandas for this one.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6439526",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1475#issuecomment-6439526",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1475",
    "id": 6439526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzk1MjY=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-19T22:26:16Z",
    "updated_at": "2012-06-19T22:26:16Z",
    "author_association": "MEMBER",
    "body": "`DatetimeIndex`, which uses a nanosecond unit, doesn't support dates that far back in time. This was a deliberate design tradeoff in work revamping the time series processing infrastructure. You can, however, represent dates that far back using `PeriodIndex`. Could you tell me a bit more about your use case?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6441778",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1475#issuecomment-6441778",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1475",
    "id": 6441778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDE3Nzg=",
    "user": {
      "login": "lesteve",
      "id": 1680079,
      "node_id": "MDQ6VXNlcjE2ODAwNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1680079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lesteve",
      "html_url": "https://github.com/lesteve",
      "followers_url": "https://api.github.com/users/lesteve/followers",
      "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
      "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
      "organizations_url": "https://api.github.com/users/lesteve/orgs",
      "repos_url": "https://api.github.com/users/lesteve/repos",
      "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lesteve/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-20T00:32:35Z",
    "updated_at": "2012-06-20T00:35:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "The use case is the following: we are using the Boost.Date_time library in our C++ application. Timeseries created in our C++ application can be queried using python and we are looking into using pandas for the timeseries objects returned inside python instead of some bespoke python timeseries classes we are currently using.\n\nIn the Boost.Date_time library, 1400-Jan-01 00:00:00 is the minimum timestamp and 9999-Dec-31 23:59:59.999999 is the maximum timestamp. As such our timeseries can have any timestamps in between in principle, although our main use case of crazy (where crazy means very far away from our current times) timestamps is due to constant timeseries which have a single timestamp (1400-Jan-01). In most cases with crazy indices, timeseries have a single timestamp on 1400-Jan-01 and then a big gap until more reasonable indices come along.\n\nOut of interest, is the limitation in DatetimeIndex documented somewhere? In particular what are the minimum and maximum timestamp I can use with DatetimeIndex?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6487907",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1475#issuecomment-6487907",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1475",
    "id": 6487907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODc5MDc=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-21T16:46:56Z",
    "updated_at": "2012-06-21T16:46:56Z",
    "author_association": "MEMBER",
    "body": "I've just pushed some checks for out of bounds timestamps and documented the limitation here (with suggested workaround for representing pre-year 1677 and post-year 2262 dates):\n\nhttp://pandas.pydata.org/pandas-docs/dev/gotchas.html#timestamp-limitations\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6487943",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1475#issuecomment-6487943",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1475",
    "id": 6487943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODc5NDM=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-21T16:47:59Z",
    "updated_at": "2012-06-21T16:47:59Z",
    "author_association": "MEMBER",
    "body": "Actually going to leave this open. Need to do more rigorous checking when converting a list or array of datetime.datetime to DatetimeIndex (your code example is still an issue)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6504082",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1475#issuecomment-6504082",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1475",
    "id": 6504082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDQwODI=",
    "user": {
      "login": "lesteve",
      "id": 1680079,
      "node_id": "MDQ6VXNlcjE2ODAwNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1680079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lesteve",
      "html_url": "https://github.com/lesteve",
      "followers_url": "https://api.github.com/users/lesteve/followers",
      "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
      "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
      "organizations_url": "https://api.github.com/users/lesteve/orgs",
      "repos_url": "https://api.github.com/users/lesteve/repos",
      "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lesteve/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-22T09:40:39Z",
    "updated_at": "2012-06-22T09:40:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for that I do get an error now. I still doesn't get any error if I use PeriodIndex.to_datetime:\n\n``` python\nIn [1]: import pandas\n\nIn [2]: pandas.version.version\nOut[2]: '0.8.0.dev-87d6da1'\n\nIn [3]: ts = pandas.TimeSeries(index=pandas.PeriodIndex([pandas.Period('1400-01-01')]), data=[1])\n\nIn [4]: ts.index.to_datetime()\nOut[4]:\n<class 'pandas.tseries.index.DatetimeIndex'>\n[1969-12-31 23:59:59.999791812, ..., 1969-12-31 23:59:59.999791812]\nLength: 1, Freq: None, Timezone: None\n```\n\nIs that expected?\n\nAlso out of interest, is using PeriodIndex vs DatetimeIndex having impact on performance, for example when aligning indexes?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6506766",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1475#issuecomment-6506766",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1475",
    "id": 6506766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDY3NjY=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-22T12:45:18Z",
    "updated_at": "2012-06-22T12:45:18Z",
    "author_association": "MEMBER",
    "body": "Obviously not? =) There are many more places where overflow checks need to be inserted. \n\nWhy not just replace the minimum Boost timestamp with a crazy, but in range pandas timestamp (like `1700-01-01`)}\n\nPerformance in alignment should be roughly equivalent (int64 data under the hood).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6511877",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1475#issuecomment-6511877",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1475",
    "id": 6511877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTE4Nzc=",
    "user": {
      "login": "lesteve",
      "id": 1680079,
      "node_id": "MDQ6VXNlcjE2ODAwNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1680079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lesteve",
      "html_url": "https://github.com/lesteve",
      "followers_url": "https://api.github.com/users/lesteve/followers",
      "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
      "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
      "organizations_url": "https://api.github.com/users/lesteve/orgs",
      "repos_url": "https://api.github.com/users/lesteve/repos",
      "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lesteve/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-22T16:21:39Z",
    "updated_at": "2012-06-22T16:21:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "The timestamp replacement from a crazy to another crazy but in range timestamp was something I thought about but we might have some edge use cases, although very few of them I would guess, where you need dates earlier than 1677.\n\nMaybe going with PeriodIndex is the best solution for now.\n"
  }
]
