[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316085382",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316085382",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316085382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjA4NTM4Mg==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T14:40:06Z",
    "updated_at": "2017-07-18T14:40:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "This case is clearly a bug:\r\n```python\r\nIn [18]: pd.to_numeric([200, 300, '', 'NaN', 10000000000000000000], errors='coerce')\r\nOut[18]: array([200, 300, '', 'NaN', 10000000000000000000], dtype=object)\r\n```\r\n\r\nBut not entirely clear how we should be handling \"big\" integers.  numpy does not cast to a float on default construction, but we could here.\r\n```python\r\nIn [22]: np.array([10000000000000000000])\r\nOut[22]: array([10000000000000000000], dtype=uint64)\r\n\r\nIn [23]: np.array([30000000000000000000])\r\nOut[23]: array([30000000000000000000], dtype=object)\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316095127",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316095127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316095127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjA5NTEyNw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T15:10:02Z",
    "updated_at": "2017-07-18T15:11:51Z",
    "author_association": "MEMBER",
    "body": "@chris-b1 : Your first example, I can explain.  You can't hold both `NaN` and `uint64` together in the same numeric `dtype` without losing precision, so we will refuse to cast if that's the case.  That's why you get the output that you get, so no, that is not a bug IMO.\r\n\r\nAs for your point about \"big\" integers, do keep in mind that you can't hold integers above `np.iinfo(np.uinit64).max`.  That's just the way `numpy` dtypes are currently designed.  Thus, the second box is moot at this point."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316096428",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316096428",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316096428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjA5NjQyOA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T15:14:00Z",
    "updated_at": "2017-07-18T15:14:00Z",
    "author_association": "MEMBER",
    "body": "@mficek : My explanation about not holding `NaN` and `uint64` together in the same numeric `dtype` applies for your two examples where you called `pd.to_numeric` on the entire `Series`.\r\n\r\nFor your first `.apply` example, you should try printing out the output of the `to_numeric` call each time and the data type.  What you will find is that the numeric types will not match (you have `uint64`, `int64`, and `float`).  In this case, we just collate the outputs together into an array-like (we have no idea that the function being used is `to_numeric`, so precision is moot), leading to the forced casting of `float64`.\r\n\r\nOf the four examples, only your last one I would consider a bug.  When we `coerce`, we should not crash because any \"bad\" elements are replaced with `NaN`.  That means we need to catch `OverflowError` somewhere in the implementation.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316096513",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316096513",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316096513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjA5NjUxMw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T15:14:12Z",
    "updated_at": "2017-07-18T15:14:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "1.  The bug is that we are returning the object unchanged with `errors='coerce'` - anything unconvertible should be `NaN`\r\n\r\n2.  @mficek  was suggesting that we upcast to float in that scenario (which happens to be lossless with this particular value)\r\n```\r\nIn [27]: np.array([30000000000000000000], dtype='float64')\r\nOut[27]: array([  3.00000000e+19])\r\n```\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316098130",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316098130",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316098130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjA5ODEzMA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T15:19:06Z",
    "updated_at": "2017-07-18T15:19:06Z",
    "author_association": "MEMBER",
    "body": "> The bug is that we are returning the object unchanged with errors='coerce' - anything unconvertible should be NaN\r\n\r\nAh, I see...I thought it was erroring an element earlier.  Yes, that `NaN` should just be an empty string.\r\n\r\n> @mficek was suggesting that we upcast to float in that scenario (which happens to be lossless with this particular value)\r\n\r\nWe made a deliberate decision to not do that.  `uint64` --> `float64` casting is not something we want to do because we more often than not are losing precision.  I suppose you could try to check each number to see if it won't lose precision, but that's going to be a performance hit I can imagine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316120770",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316120770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316120770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEyMDc3MA==",
    "user": {
      "login": "mficek",
      "id": 9933817,
      "node_id": "MDQ6VXNlcjk5MzM4MTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9933817?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mficek",
      "html_url": "https://github.com/mficek",
      "followers_url": "https://api.github.com/users/mficek/followers",
      "following_url": "https://api.github.com/users/mficek/following{/other_user}",
      "gists_url": "https://api.github.com/users/mficek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mficek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mficek/subscriptions",
      "organizations_url": "https://api.github.com/users/mficek/orgs",
      "repos_url": "https://api.github.com/users/mficek/repos",
      "events_url": "https://api.github.com/users/mficek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mficek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T16:30:55Z",
    "updated_at": "2017-07-18T16:30:55Z",
    "author_association": "NONE",
    "body": "Thanks for your explanation! I figured some workaround that works for me with pandas==0.20.3 (basically converting to string, adding '.' at the end of every \"number\" which leads to conversion to 'float64' always and then checking for elements which are bigger than np.iinfo(np.uint64).max, which I replace with np.nan. Then I drop nans and covert everything to uint64 (which is the type I need in my code).\r\n\r\n```python\r\n    d[col] = (d[col].astype(str) + '.').apply(pd.to_numeric, errors='coerce')\r\n    d.loc[d[col]>np.iinfo(typ).max, col] = np.nan\r\n    d[col] = d[col].dropna()\r\n    d[col] = d[col].astype(np.uint64)\r\n```\r\n\r\nNothing nice, but it works. Can I be anyhow helpful in resolving this issue? Despite being a big fan of pandas, I never contributed to it's code..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316125582",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316125582",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316125582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEyNTU4Mg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T16:47:52Z",
    "updated_at": "2017-07-18T16:47:52Z",
    "author_association": "MEMBER",
    "body": "@chris-b1 : I actually can explain why the first and third examples behave as they do.  When you try to convert the \"NaN\" to `nan`, that conflicts with the `uint64` at the end.  Thus, we refuse to `coerce` (or mutate) any values because of that potential loss of precision.\r\n\r\nTo be fair, this is not well-documented, and we should at least document this (unless people really think this behavior should be changed)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316127370",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316127370",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316127370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEyNzM3MA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T16:54:23Z",
    "updated_at": "2017-07-18T16:54:36Z",
    "author_association": "MEMBER",
    "body": "> Can I be anyhow helpful in resolving this issue?\r\n\r\n@mficek : Absolutely!  The following code locations will help you out here:\r\n\r\n1) `to_numeric` can be found <a href=\"https://github.com/pandas-dev/pandas/blob/34210ac4d8c61ec4d695baba24d84bd7a1826af4/pandas/core/tools/numeric.py#L15\">here</a>\r\n\r\n2) `maybe_convert_numeric` can be found <a href=\"https://github.com/pandas-dev/pandas/blob/c53d00f1487716cf462ffa1965f6ec676a6c2593/pandas/_libs/src/inference.pyx#L926\">here</a> (you will encounter this function in the implementation of `to_numeric`)\r\n\r\nTry to figure out why the `OverflowError` is being raised in your last example.  It seems to be triggered from `maybe_convert_objects` (you can find that <a href=\"https://github.com/pandas-dev/pandas/blob/c53d00f1487716cf462ffa1965f6ec676a6c2593/pandas/_libs/src/inference.pyx#L1085\">here</a>), but walk through the code and see if you can see why.\r\n\r\nFinally, here is the <a href=\"https://pandas.pydata.org/pandas-docs/stable/contributing.html\">link</a> to documentation for contributing to `pandas` - that will also give you instructions on how to set up a development environment that you don't overwrite your existing `pandas` installation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316128844",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316128844",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316128844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEyODg0NA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T16:59:27Z",
    "updated_at": "2017-07-18T17:07:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that that `errors='coerce'` should force everything to float64 if anything is missing.  It's not fundamentally different than, our normal treatment of ints in the presence of missing data, and it's an opt-in, deliberately lossy kwarg.\r\n```\r\nIn [6]: pd.to_numeric([1, 2, ''], errors='coerce')\r\nOut[6]: array([  1.,   2.,  nan])\r\n```\r\nThat said, I do see your point that in the range of int64max to uint64max it becomes \"lossier\"\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316133454",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316133454",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316133454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEzMzQ1NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T17:16:09Z",
    "updated_at": "2017-07-18T17:16:09Z",
    "author_association": "MEMBER",
    "body": "> It's not fundamentally different than, our normal treatment of ints in the presence of missing data, and it's an opt-in, deliberately lossy kwarg.\r\n\r\n@chris-b1 : I would disagree with you on that.  `uint` is a different beast from `int`, which is why we have had problems with handling them for some time.  For starters, it has no `nan` like `int` does, which makes it trickier to handle it in conjunction with missing data.\r\n\r\nAlso, having working on `to_numeric` before, previous discussion on this topic has centered around making conversion operations like these as least precision-destructive as possible.  Thus, I would push-back against making coercion \"lossy\" for `uint64` given the issues I've had to patch to prevent it from happening in the first place."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316135834",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316135834",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316135834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEzNTgzNA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T17:24:47Z",
    "updated_at": "2017-07-18T17:24:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "> For starters, it has no nan like int does,\r\n\r\n`int` cannot represent `nan` either\r\n```\r\nIn [1]: np.array([1, 2, np.nan]).dtype\r\nOut[1]: dtype('float64')\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316137315",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316137315",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316137315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEzNzMxNQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T17:30:02Z",
    "updated_at": "2017-07-18T17:30:02Z",
    "author_association": "MEMBER",
    "body": "> int cannot represent nan either\r\n\r\nSorry, what I meant is that we don't have a placeholder for missing `uint` like we do for `int` (I don't count `nan` because of the precision lossiness)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/316243223",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316243223",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17007",
    "id": 316243223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjI0MzIyMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T01:11:33Z",
    "updated_at": "2017-07-19T01:11:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with @chris-b1 [here](https://github.com/pandas-dev/pandas/issues/17007#issuecomment-316128844).\r\n\r\nIt doesn't matter *what* is there when we have ``errors='coerce'``. If its not lowest common dtype convertible, then it gets a NaN. Now during the conversion you may be inferring and you see a uint64, then a NaN so we go back to ``object``, but I agree that is buggy, it should return ``float64`` if it has to coerce."
  }
]
