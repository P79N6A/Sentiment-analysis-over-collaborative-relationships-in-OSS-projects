[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362585449",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-362585449",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 362585449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjU4NTQ0OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T13:25:19Z",
    "updated_at": "2018-02-02T13:25:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "You're fighting against pandas by using tuples as keys in your Index, instead of using a `MultiIndex`..\r\n\r\ncc @toobaz is this worth attempting to support?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362614563",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-362614563",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 362614563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjYxNDU2Mw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T15:17:50Z",
    "updated_at": "2018-02-02T15:17:50Z",
    "author_association": "MEMBER",
    "body": "I agree with @TomAugspurger that tuples as keys are weird. That said, I _might_ have fixed this somewhere... maybe https://github.com/pandas-dev/pandas/pull/18600 ... in any case I guess it will be supported eventually."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362760138",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-362760138",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 362760138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc2MDEzOA==",
    "user": {
      "login": "charlie0389",
      "id": 3690467,
      "node_id": "MDQ6VXNlcjM2OTA0Njc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3690467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlie0389",
      "html_url": "https://github.com/charlie0389",
      "followers_url": "https://api.github.com/users/charlie0389/followers",
      "following_url": "https://api.github.com/users/charlie0389/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlie0389/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlie0389/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlie0389/subscriptions",
      "organizations_url": "https://api.github.com/users/charlie0389/orgs",
      "repos_url": "https://api.github.com/users/charlie0389/repos",
      "events_url": "https://api.github.com/users/charlie0389/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlie0389/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T01:24:07Z",
    "updated_at": "2018-02-03T01:24:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Consider this circumstance:\r\n- You have segments of data which is indexed by a natural hierarchical relationship (i.e. each segment of data is suitable for a multi-index).\r\n- However, different segments of the data do not have the same heirarchical relationship (i.e. not the same levels, labels, or dimensions), so concatentating is not an option (or is at least messy and/or difficult to generalise).\r\n- It is necessary to merge/concatenate the data.\r\n- It is necessary to select any and all rows by index.\r\n- The heirarchical relationship has to be preserved in some form.\r\n\r\nIn this circumstance, it would seem to me that a simple Index with tuples is the most obvious and easy solution, and may even be the only option."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363139985",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-363139985",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 363139985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzEzOTk4NQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T16:33:23Z",
    "updated_at": "2018-02-05T16:33:23Z",
    "author_association": "MEMBER",
    "body": "> I might have fixed this somewhere... maybe #18600 .\r\n\r\nUhm, no, that PR is unrelated. And I was probably just confused.\r\n\r\nI still think this is going to be fixed... sooner or later."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377598730",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-377598730",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 377598730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU5ODczMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T19:07:03Z",
    "updated_at": "2018-03-30T19:07:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "as @TomAugspurger says above, this is simply not supported and you are fighting pandas like crazy here. The only way I could see doing this going forward would be to have an actual TupleIndex (subclassing EA) that is pretty explicity created here. \r\n\r\nClosing this as won't fix."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377615210",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-377615210",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 377615210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzYxNTIxMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T20:27:04Z",
    "updated_at": "2018-03-30T20:27:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW, I think think when https://github.com/pandas-dev/pandas/issues/17246 is fixed, this will happen to be fixed as well."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377638215",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-377638215",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 377638215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzYzODIxNQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T22:32:48Z",
    "updated_at": "2018-03-30T22:32:48Z",
    "author_association": "MEMBER",
    "body": "I don't see this as \"supporting tuples\", but as \"supporting anything which we don't state is not supported\" (and can be supported). The bug must lie in a ``tupleize_cols`` somewhere - that is, the code is \"actively\" doing something wrong, it's not just \"missing a feature\".\r\n\r\nThis said, I totally agree this is low priority."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377651037",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-377651037",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 377651037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY1MTAzNw==",
    "user": {
      "login": "charlie0389",
      "id": 3690467,
      "node_id": "MDQ6VXNlcjM2OTA0Njc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3690467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlie0389",
      "html_url": "https://github.com/charlie0389",
      "followers_url": "https://api.github.com/users/charlie0389/followers",
      "following_url": "https://api.github.com/users/charlie0389/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlie0389/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlie0389/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlie0389/subscriptions",
      "organizations_url": "https://api.github.com/users/charlie0389/orgs",
      "repos_url": "https://api.github.com/users/charlie0389/repos",
      "events_url": "https://api.github.com/users/charlie0389/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlie0389/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-31T00:19:56Z",
    "updated_at": "2018-03-31T00:19:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I figure by your statement @toobaz that you are have not surveyed the fix that has been provided - indeed the crux of the problem is that Index by default returns a MultiIndex if provided tuples, as above. This can be prevented by supplying the tupleize_cols=False argument. It follows that I don't think the bug does lie in 'tupleize_cols' - it is currently the default behaviour of Index to return a MultiIndex if given tuples (because tupleize_cols, by default, is True). One could argue that the default should be False, but I assume this approach would be avoided because it would be a large impact on the API. This surprising change of type is discussed in #17246, and will hopefully be included in the fix.\r\n\r\n@jreback argues that the fix is inappropriate, and that using tuples is unsupported. If that be the case - assuming #17246 is not going to be fixed soon, or, even if it is fixed, it doesn't fix this bug - then I think it should be clearly documented that tuples are not supported. Not supporting tuples I think would be a little disappointing, simply because I can't see a more obvious way to support the circumstances I have previously outlined above."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377652845",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-377652845",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 377652845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY1Mjg0NQ==",
    "user": {
      "login": "charlie0389",
      "id": 3690467,
      "node_id": "MDQ6VXNlcjM2OTA0Njc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3690467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlie0389",
      "html_url": "https://github.com/charlie0389",
      "followers_url": "https://api.github.com/users/charlie0389/followers",
      "following_url": "https://api.github.com/users/charlie0389/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlie0389/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlie0389/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlie0389/subscriptions",
      "organizations_url": "https://api.github.com/users/charlie0389/orgs",
      "repos_url": "https://api.github.com/users/charlie0389/repos",
      "events_url": "https://api.github.com/users/charlie0389/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlie0389/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-31T00:39:42Z",
    "updated_at": "2018-03-31T00:39:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this thread might be benefited by an example of why supporting tuples is a good idea. Consider for example, the country Australia and the states within it: NSW, QLD, VIC, TAS, WA, SA, NT, ACT. Also consider the region \"Murray Darling Basin\", which also has a natural hierarchical relationship to Australia, but specifies an area within NSW, VIC and SA (but does not completely include all of those states - it specifies the water catchment area). With reference to my earlier comments about the circumstances in which tuples in the index are useful:\r\n\r\n> You have segments of data which is indexed by a natural hierarchical relationship (i.e. each segment of data is suitable for a multi-index).\r\n\r\nThere exists a natural hierarchical relationship between 'Australia' and these states - i.e. each state lies within Australia. There is also a relationship between 'Murray Darling Basin' and 'Australia'.\r\n\r\n> However, different segments of the data do not have the same heirarchical relationship (i.e. not the same levels, labels, or dimensions), so concatentating is not an option (or is at least messy and/or difficult to generalise).\r\n\r\nConsider that you wish to include in your dataframe, data series with names:\r\n('Australia', 'NSW')\r\n('Australia', 'Murray Darling Basin')\r\nIt would be inappropriate to call 'Murray Darling Basin' a state, and the data that it refers to will have no obvious mathematical connection to the data regarding the other states.\r\n\r\n> It is necessary to merge/concatenate the data.\r\n\r\nBecause I should be able to.\r\n\r\n> It is necessary to select any and all rows by index.\r\n\r\nIf it's a multiindex, and there are None or * fields, my recollection is that this doesn't play nice (hence a 3-level multi-index may not be a simple workaround).\r\n\r\n> The heirarchical relationship has to be preserved in some form.\r\n\r\nBecause I want to export to a file that is interpreted by another program that understand the hierarchical relationship..\r\n\r\nI hope it is now clear why an Index of tuples becomes the most obvious, if not the best, option for solving some problems."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377669846",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-377669846",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 377669846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY2OTg0Ng==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-31T06:18:48Z",
    "updated_at": "2018-03-31T06:23:24Z",
    "author_association": "MEMBER",
    "body": "> I figure by your statement @toobaz that you are have not surveyed the fix that has been provided - indeed the crux of the problem is that Index by default returns a MultiIndex if provided tuples, as above. This can be prevented by supplying the tupleize_cols=False argument. It follows that I don't think the bug does lie in 'tupleize_cols' - it is currently the default behaviour of Index to return a MultiIndex if given tuples (because tupleize_cols, by default, is True). One could argue that the default should be False,\r\n\r\n... or that one can pass ``tupleize_cols=False`` even when the default is ``tupleize_cols=True`` ;-)\r\n\r\nThen probably this bug is fixed _also_ if the default changes (as mentioned by @TomAugspurger ), but that was not my point. When I wrote that the code is \"actively\" doing something wrong, I just meant that ``tupleize_cols=True`` means \"infer\", while ``tupleize_cols=False`` means \"avoid inferring\", regardless of which is the default."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378377333",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-378377333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 378377333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODM3NzMzMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T20:01:20Z",
    "updated_at": "2018-04-03T20:01:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is hard, since it isn't really clear from the name that `.rename` can change the index *type*.\r\n\r\nw.r.t. your example @charlie0389, it's hard to say anything without actual code / data. I suspect that a MI is able to handle your problem."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378468967",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-378468967",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 378468967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQ2ODk2Nw==",
    "user": {
      "login": "charlie0389",
      "id": 3690467,
      "node_id": "MDQ6VXNlcjM2OTA0Njc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3690467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlie0389",
      "html_url": "https://github.com/charlie0389",
      "followers_url": "https://api.github.com/users/charlie0389/followers",
      "following_url": "https://api.github.com/users/charlie0389/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlie0389/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlie0389/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlie0389/subscriptions",
      "organizations_url": "https://api.github.com/users/charlie0389/orgs",
      "repos_url": "https://api.github.com/users/charlie0389/repos",
      "events_url": "https://api.github.com/users/charlie0389/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlie0389/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T03:28:12Z",
    "updated_at": "2018-04-04T03:28:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, for an example, please consider the following code:\r\n\r\n```\r\nprint(\"Consider the given data:\")\r\ngiven_data = [0.8, 0.002, 1.7, 1.3, 1.0, 2.5, 0.06, 0.2, 1.0]\r\nprint(given_data)\r\nprint()\r\nprint(\"With the given identifiers:\")\r\ngiven_labels = [(\"Australia\", \"NSW\"), (\"Australia\", \"ACT\"), \r\n                                      (\"Australia\", \"QLD\"), \r\n                                     (\"Australia\", \"NT\"), (\"Australia\", \"SA\"), \r\n                                     (\"Australia\", \"WA\"), \r\n                                     (\"Australia\", \"TAS\"), (\"Australia\", \"VIC\"), \r\n                                     (\"Australia\", \"Murray-Darling Basin\")]\r\nprint(given_labels)\r\ndf = pd.DataFrame(data=given_data, \r\n                  index=given_labels,\r\n             columns=[\"Millions of Sq. kms\"])\r\nprint()\r\nprint(\"Which can be stored appropriately in the dataframe:\")\r\nprint(df)\r\nprint(\"\"\"\r\nBecause data in the same column is intepreted to be of the same \\\r\ntype, this form implies that all the labels \\\r\nare conceptual equals (which is True - they all identify land areas in Australia). \\\r\nFurthermore, this \\\r\nallows the user to keep the hierarchical relationship \\\r\nbetween the first and second fields of each tuple (and is therefore the desired form).\r\n\"\"\")\r\n\r\n\r\ndf.index = pd.Index(df.index.tolist())\r\nprint(df)\r\nprint(\"\"\"This structure implies that all items in the second index column are conceptual \\\r\nequals (which is False). (The Murray-Darling basin is not a state of Australia).\r\n\"\"\")\r\n\r\n# Note that restructuring doesn't really make sense either - for example:\r\ndf = pd.DataFrame(data=[0.8, 0.002, 1.7, 1.3, 1.0, 2.5, 0.06, 0.2, 1.0], \r\n                  index=[(\"Australia\", None, \"NSW\"), (\"Australia\", None, \"ACT\"), \r\n                                      (\"Australia\", None, \"QLD\"), \r\n                                     (\"Australia\", None,  \"NT\"), (\"Australia\", None,  \"SA\"), \r\n                                     (\"Australia\", None, \"WA\"), \r\n                                     (\"Australia\", None,  \"TAS\"), (\"Australia\", None, \"VIC\"), \r\n                                     (\"Australia\", \"Murray-Darling Basin\", None)], \r\n             columns=[\"Millions of Sq. kms\"])\r\ndf.index = pd.MultiIndex.from_tuples(df.index)\r\nprint(df)\r\nprint(\"\"\"\r\nI'd argue this structure is unacceptable because it requires knowledge/logic to mutate \\\r\ngiven_index and to select any (or all) rows of the table. For example:\r\n\"\"\")\r\n\r\nprint(\"Selecting all items:\")\r\nprint(df.loc[\"Australia\", :, :, :])\r\nprint()\r\nprint(\"Selecting a single item:\")\r\nprint(df.loc[\"Australia\", \"Murray-Darling Basin\", :, :])\r\nprint(\"\"\"Both the selections above require knowledge that there are 3 fields which: \r\n(a) does not correspond with the given data, and\r\n(b) the selection method is prone to breakage (i.e. what if data that has more than 3 fields is \\\r\nappended to the frame?)\"\"\")\r\n```\r\n\r\nWhich has the following output:\r\n\r\n```\r\nConsider the given data:\r\n[0.8, 0.002, 1.7, 1.3, 1.0, 2.5, 0.06, 0.2, 1.0]\r\n\r\nWith the given identifiers:\r\n[('Australia', 'NSW'), ('Australia', 'ACT'), ('Australia', 'QLD'), \r\n('Australia', 'NT'), ('Australia', 'SA'), ('Australia', 'WA'), ('Australia', 'TAS'), \r\n('Australia', 'VIC'), ('Australia', 'Murray-Darling Basin')]\r\n\r\nWhich can be stored appropriately in the dataframe:\r\n                                   Millions of Sq. kms\r\n(Australia, NSW)                                 0.800\r\n(Australia, ACT)                                 0.002\r\n(Australia, QLD)                                 1.700\r\n(Australia, NT)                                  1.300\r\n(Australia, SA)                                  1.000\r\n(Australia, WA)                                  2.500\r\n(Australia, TAS)                                 0.060\r\n(Australia, VIC)                                 0.200\r\n(Australia, Murray-Darling Basin)                1.000\r\n\r\nBecause data in the same column is intepreted to be of the same type, \r\nthis form implies that all the labels are conceptual equals (which is True - \r\nthey all identify land areas in Australia). Furthermore, this allows the \r\nuser to keep the hierarchical relationship between the first and second \r\nfields of each tuple (and is therefore the desired form).\r\n\r\n                                Millions of Sq. kms\r\nAustralia NSW                                 0.800\r\n          ACT                                 0.002\r\n          QLD                                 1.700\r\n          NT                                  1.300\r\n          SA                                  1.000\r\n          WA                                  2.500\r\n          TAS                                 0.060\r\n          VIC                                 0.200\r\n          Murray-Darling Basin                1.000\r\nThis structure implies that all items in the second index column are \r\nconceptual equals (which is False). (The Murray-Darling basin is \r\nnot a state of Australia).\r\n\r\n                                    Millions of Sq. kms\r\nAustralia NaN                  NSW                0.800\r\n                               ACT                0.002\r\n                               QLD                1.700\r\n                               NT                 1.300\r\n                               SA                 1.000\r\n                               WA                 2.500\r\n                               TAS                0.060\r\n                               VIC                0.200\r\n          Murray-Darling Basin NaN                1.000\r\n\r\nI'd argue this structure is unacceptable because it requires knowledge/logic \r\nto mutate given_index and to select any (or all) rows of the table. For example:\r\n\r\nSelecting all items:\r\n                          Millions of Sq. kms\r\nNaN                  NSW                0.800\r\n                     ACT                0.002\r\n                     QLD                1.700\r\n                     NT                 1.300\r\n                     SA                 1.000\r\n                     WA                 2.500\r\n                     TAS                0.060\r\n                     VIC                0.200\r\nMurray-Darling Basin NaN                1.000\r\n\r\nSelecting a single item:\r\n     Millions of Sq. kms\r\nNaN                  1.0\r\nBoth the selections above require knowledge that there are 3 fields which: \r\n(a) does not correspond with the given data, and\r\n(b) the selection method is prone to breakage (i.e. what if data \r\nthat has more than 3 fields is appended to the frame?)\r\n```\r\n\r\nApologies for the wordiness, but I think it illustrates the conceptual point I'm trying to make."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378585180",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-378585180",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 378585180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODU4NTE4MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T12:38:41Z",
    "updated_at": "2018-04-04T12:39:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> this form implies that all the labels are conceptual equals\r\n\r\n> This structure implies that all items in the second index column are conceptual equals (which is False).\r\n\r\nI don't think it's relevant, but what do those two sentences mean?\r\n\r\nThe reason I say it's not relevant, is because the *meaning* you attach to a MultiIndex is up to you. Typically they're used to represent hierarchical data, but that's not necessary. It really is just a multi-part label, *just like a tuple*.\r\n\r\nAttempting to interpret the \"conceptual equals\" bit, it seems like you're implicitly putting data in the index. You have some kind of `is_state` property in your head. That property is a piece of data *not* a label.\r\n\r\nI don't understand the 3-level example. Again, though, it looks like you're putting some data in the index when it should go in the columns. Assuming the new level is something like `is_water`.\r\n\r\n```python\r\nmidx = pd.MultiIndex.from_tuples(given_labels)\r\ndf = pd.DataFrame({\r\n    \"sq. kms\": given_data,\r\n    \"is_water\": [False] * 8 + [True]\r\n}, index=midx)\r\ndf\r\n```\r\n\r\nresults in\r\n\r\n<table>\r\n  <thead>\r\n    <tr style=\"text-align: right;\">\r\n      <th></th>\r\n      <th></th>\r\n      <th>sq. kms</th>\r\n      <th>is_water</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th rowspan=\"9\" valign=\"top\">Australia</th>\r\n      <th>NSW</th>\r\n      <td>0.800</td>\r\n      <td>False</td>\r\n    </tr>\r\n    <tr>\r\n      <th>ACT</th>\r\n      <td>0.002</td>\r\n      <td>False</td>\r\n    </tr>\r\n    <tr>\r\n      <th>QLD</th>\r\n      <td>1.700</td>\r\n      <td>False</td>\r\n    </tr>\r\n    <tr>\r\n      <th>NT</th>\r\n      <td>1.300</td>\r\n      <td>False</td>\r\n    </tr>\r\n    <tr>\r\n      <th>SA</th>\r\n      <td>1.000</td>\r\n      <td>False</td>\r\n    </tr>\r\n    <tr>\r\n      <th>WA</th>\r\n      <td>2.500</td>\r\n      <td>False</td>\r\n    </tr>\r\n    <tr>\r\n      <th>TAS</th>\r\n      <td>0.060</td>\r\n      <td>False</td>\r\n    </tr>\r\n    <tr>\r\n      <th>VIC</th>\r\n      <td>0.200</td>\r\n      <td>False</td>\r\n    </tr>\r\n    <tr>\r\n      <th>Murray-Darling Basin</th>\r\n      <td>1.000</td>\r\n      <td>True</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\nWhich (IIUC) is a much better way to represent the data.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378631266",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-378631266",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 378631266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODYzMTI2Ng==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T14:59:26Z",
    "updated_at": "2018-04-04T14:59:26Z",
    "author_association": "MEMBER",
    "body": "As much as I love indicizing stuff with ``MultiIndex``, Python is a flexible language, people are used to that flexibility, and I think this makes it hard to argue that tuples as keys don't _make sense_. ``MultiIndex``es are great if there is some hierarchical structure (i.e., levels have a meaning, i.e., \"_all items in the second index column are conceptual equals_\"), but this is not necessarily the case.\r\n\r\nConsider keys which represent paths:\r\n```python\r\nIn [3]: megabytes = pd.Series([103, 30, 5],\r\n                              index=pd.Index([('usr', 'share'), ('usr', 'bin'), ('usr', 'local', 'bin')], tupleize_cols=False))\r\n\r\nIn [4]: megabytes\r\nOut[4]: \r\n(usr, share)         103\r\n(usr, bin)            30\r\n(usr, local, bin)      5\r\ndtype: int64\r\n```\r\n\r\nThis is not an index which it makes sense to store as ``MultiIndex`` - you don't even know ex ante the number of levels it would need. Sure, we could transform tuples in strings relatively easily... but you will apply this transformation only if you have to.\r\n\r\nSo: we can always say pandas does not support tuples _because it's just too messy_ (in terms of API, not necessarily just implementation). I just _don't think_ it is the case. But I might be wrong. In any case, I don't think that investigating the intentions of anybody who wants to use tuples as keys (also see #20597) is a viable long term solution :-)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380975290",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-380975290",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 380975290,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDk3NTI5MA==",
    "user": {
      "login": "charlie0389",
      "id": 3690467,
      "node_id": "MDQ6VXNlcjM2OTA0Njc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3690467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlie0389",
      "html_url": "https://github.com/charlie0389",
      "followers_url": "https://api.github.com/users/charlie0389/followers",
      "following_url": "https://api.github.com/users/charlie0389/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlie0389/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlie0389/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlie0389/subscriptions",
      "organizations_url": "https://api.github.com/users/charlie0389/orgs",
      "repos_url": "https://api.github.com/users/charlie0389/repos",
      "events_url": "https://api.github.com/users/charlie0389/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlie0389/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T23:33:38Z",
    "updated_at": "2018-04-12T23:33:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is it possible to leave this bug open please?\r\n\r\nGoing from the discussion so far, no one is disputing the fact that this is a bug. The only question is whether it should be supported, which even then, there still seems to be little disagreement that this should be supported in one form or another - all the discussion appears to revolve around implementation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382195652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382195652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382195652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjE5NTY1Mg==",
    "user": {
      "login": "charlie0389",
      "id": 3690467,
      "node_id": "MDQ6VXNlcjM2OTA0Njc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3690467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlie0389",
      "html_url": "https://github.com/charlie0389",
      "followers_url": "https://api.github.com/users/charlie0389/followers",
      "following_url": "https://api.github.com/users/charlie0389/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlie0389/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlie0389/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlie0389/subscriptions",
      "organizations_url": "https://api.github.com/users/charlie0389/orgs",
      "repos_url": "https://api.github.com/users/charlie0389/repos",
      "events_url": "https://api.github.com/users/charlie0389/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlie0389/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T23:55:20Z",
    "updated_at": "2018-04-17T23:55:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "For those that stumble upon this at a later date and are similarly frustrated by this bug, the following code fixes it:\r\n\r\n```\r\n    @staticmethod\r\n    def _transform_index(index, func, level=None, tupleize_cols=False):\r\n        \"\"\"\r\n        Apply function to all values found in index.\r\n\r\n        This includes transforming multiindex entries separately.\r\n        Only apply function to one level of the MultiIndex if level is specified.\r\n        \"\"\"\r\n        # Copied from pandas.core.internals._transform_index() with minor modification \r\n        # in response to pandas bug #19497\r\n        if isinstance(index, pd.MultiIndex):\r\n            if level is not None:\r\n                items = [tuple(func(y) if i == level else y\r\n                               for i, y in enumerate(x)) for x in index]\r\n            else:\r\n                items = [tuple(func(y) for y in x) for x in index]\r\n            return pd.MultiIndex.from_tuples(items, names=index.names)\r\n        else:\r\n            items = [func(x) for x in index]\r\n            return pd.Index(items, name=index.name, tupleize_cols=tupleize_cols)\r\n```\r\n\r\nThe only differences are the function signature, and the last return line."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382251600",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382251600",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382251600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjI1MTYwMA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T04:03:45Z",
    "updated_at": "2018-04-18T04:03:45Z",
    "author_association": "MEMBER",
    "body": "@charlie0389 if you can open a PR where you\r\n- change the current ``_transform_index`` to ``tupleize_cols=False``\r\n- add a test (e.g. your initial example)\r\n- verify that it passes all current tests (the part that most worries me)\r\n\r\n... then I think it would be a good candidate for inclusion.\r\n\r\nIf in order to pass tests you do need to change the signature, I would suggest, rather than ``tupleize_cols``, a more general parameter such as ``keep_type=True`` (@TomAugspurger @jreback better ideas?) which, when set to ``False``, re-interprets the index content (so potentially changing not just an ``Index`` to ``MultiIndex``, but also the other way round if e.g. keys in a ``MultiIndex`` are replaced with non-tuples). You might then want to split the process of creating the ``items`` list and the actual creation of the index.\r\n\r\nReopening this at least temporarily as a fix seems feasible and simple."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382376358",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382376358",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382376358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjM3NjM1OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T12:54:48Z",
    "updated_at": "2018-04-18T12:54:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would we be ok with a rule that rename doesn’t chase the type of the index between MI and other? If you have tuples going in and out, you get an Index. If you have a MI going in and tuples coming out, you get a MI?\n\n________________________________\nFrom: Pietro Battiston <notifications@github.com>\nSent: Tuesday, April 17, 2018 11:03:53 PM\nTo: pandas-dev/pandas\nCc: Tom Augspurger; Mention\nSubject: Re: [pandas-dev/pandas] Bug: rename incapable of accepting tuples as new name (#19497)\n\n\n@charlie0389<https://github.com/charlie0389> if you can open a PR where you\n\n  *   change the current _transform_index to tupleize_cols=False\n  *   add a test (e.g. your initial example)\n  *   verify that it passes all current tests (the part that most worries me)\n\n... then I think it would be a good candidate for inclusion.\n\nIf in order to pass tests you do need to change the signature, I would suggest, rather than tupleize_cols, a more general parameter such as keep_type=True (@TomAugspurger<https://github.com/TomAugspurger> @jreback<https://github.com/jreback> better ideas?) which, when set to False, re-interprets the index content (so potentially changing not just an Index to MultiIndex, but also the other way round if e.g. keys in a MultiIndex are replaced with non-tuples). You might then want to split the process of creating the items list and the actual creation of the index.\n\nReopening this at least temporarily as a fix seems feasible and simple.\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382251600>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABQHIs9QzqC6VkhzwterzbYuVN5yTS8xks5tprspgaJpZM4R2YV9>.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382378603",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382378603",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382378603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjM3ODYwMw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T13:02:50Z",
    "updated_at": "2018-04-18T13:38:11Z",
    "author_association": "MEMBER",
    "body": "> Would we be ok with a rule that rename doesn’t chase the type of the index between MI and other?\r\n\r\nYes, that was my idea (with ``keep_type=True``, that is, ``tupleize_cols=False``), and that's how I would design things from scratch. I just ignore whether it breaks code relying on \"chasing the type\"."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382384948",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382384948",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382384948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjM4NDk0OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T13:24:30Z",
    "updated_at": "2018-04-18T13:24:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@toobaz do you think we need a new parameter (`keep_type=True`) to `.rename`? I'm trying to think of situations where `keep_type=False` would be useful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382388629",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382388629",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382388629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjM4ODYyOQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T13:36:15Z",
    "updated_at": "2018-04-18T13:36:15Z",
    "author_association": "MEMBER",
    "body": "> do you think we need a new parameter (keep_type=True) to .rename?\r\n\r\nI don't think we do _in principle_: my only concern was about backwards compatibility (and if we don't, then the fix to this is really a matter of passing ``tupleize_cols=False``).\r\n\r\n> I'm trying to think of situations where keep_type=False would be useful.\r\n\r\nFor all examples I can think of, explicitly recasting is a better solution."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382427506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382427506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382427506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjQyNzUwNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T15:28:03Z",
    "updated_at": "2018-04-18T15:28:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "What's the backwards compatibility concern?\r\n\r\nI misunderstood `rename` with a MI. I assumed the mapping got tuples, instead it gets the scalar elements.\r\n\r\n```python\r\n\r\nIn [22]: s = pd.Series(1, index=pd.MultiIndex.from_product([[\"A\", \"B\"], ['a', 'b']]))\r\n\r\nIn [23]: s\r\nOut[23]:\r\nA  a    1\r\n   b    1\r\nB  a    1\r\n   b    1\r\ndtype: int64\r\n\r\nIn [24]: s.rename({\"A\": 'a'})\r\nOut[24]:\r\na  a    1\r\n   b    1\r\nB  a    1\r\n   b    1\r\ndtype: int64\r\n```\r\n\r\n\r\nIn that case, I *think* that passing `tupleize_cols=False` internally is just fine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382429710",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382429710",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382429710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjQyOTcxMA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T15:34:00Z",
    "updated_at": "2018-04-18T15:34:00Z",
    "author_association": "MEMBER",
    "body": "> What's the backwards compatibility concern?\r\n\r\nJust that somebody (I would already be happy if it doesn't happen in some tests) assumed the following is a reasonable way to create a ``MultiIndex``:\r\n```\r\nIn [2]: pd.Series(range(3)).rename({0 : (0,1), 1 : (1, 2), 2 : (2, 3)})\r\nOut[2]: \r\n0  1    0\r\n1  2    1\r\n2  3    2\r\ndtype: int64\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382433089",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382433089",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382433089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjQzMzA4OQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T15:43:47Z",
    "updated_at": "2018-04-18T15:43:47Z",
    "author_association": "MEMBER",
    "body": "(but mine might be pure paranoia: if tests pass, I would proceed)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382435499",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382435499",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382435499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjQzNTQ5OQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T15:50:32Z",
    "updated_at": "2018-04-18T15:50:32Z",
    "author_association": "MEMBER",
    "body": "For completeness: in principle code out there could also be relying on the fact that \r\n\r\n```python\r\nIn [2]: pd.Series(range(3), index=['1', '2', '3']).rename({'1' : 1, '2' : 2, '3' : 3.}).index\r\nOut[2]: Float64Index([1.0, 2.0, 3.0], dtype='float64')\r\n```\r\n\r\nalthough implementation wise this can be decoupled from the issue of multi vs. flat, documentation wise we probably just want to say \"the resulting index will have the same type\", and disable this automatic conversion."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382444582",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19497#issuecomment-382444582",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19497",
    "id": 382444582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjQ0NDU4Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T16:18:38Z",
    "updated_at": "2018-04-18T16:18:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> assumed the following is a reasonable way to create a MultiIndex\r\n\r\nUnderstood. That is a valid concern...\r\n\r\n> although implementation wise this can be decoupled from the issue of multi vs. flat\r\n\r\nI think converting between types (numeric vs. Index, etc.) is fine. It's the conversion between multi vs. flat that we (maybe) want to disallow via `.rename`."
  }
]
