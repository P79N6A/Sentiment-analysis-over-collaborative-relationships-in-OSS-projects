[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451679206",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-451679206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 451679206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY3OTIwNg==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-01-05T18:26:20Z",
    "updated_at": "2019-01-05T18:26:20Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=h1) Report\n> Merging [#24645](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/ebd598a1dc30d0a156b7710808596bcc39e83b3e?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/24645/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #24645      +/-   ##\n==========================================\n+ Coverage   92.37%   92.38%   +<.01%     \n==========================================\n  Files         166      166              \n  Lines       52379    52381       +2     \n==========================================\n+ Hits        48387    48392       +5     \n+ Misses       3992     3989       -3\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.8% <100%> (ø)` | :arrow_up: |\n| #single | `43.01% <10%> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/arrays/timedeltas.py](https://codecov.io/gh/pandas-dev/pandas/pull/24645/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL3RpbWVkZWx0YXMucHk=) | `88.73% <100%> (+0.54%)` | :arrow_up: |\n| [pandas/core/ops.py](https://codecov.io/gh/pandas-dev/pandas/pull/24645/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvb3BzLnB5) | `94.28% <100%> (ø)` | :arrow_up: |\n| [pandas/core/indexes/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/24645/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9iYXNlLnB5) | `96.36% <100%> (+0.06%)` | :arrow_up: |\n| [pandas/util/testing.py](https://codecov.io/gh/pandas-dev/pandas/pull/24645/diff?src=pr&el=tree#diff-cGFuZGFzL3V0aWwvdGVzdGluZy5weQ==) | `88% <0%> (-0.1%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=footer). Last update [ebd598a...d0efc5f](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451679207",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-451679207",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 451679207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY3OTIwNw==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-01-05T18:26:20Z",
    "updated_at": "2019-01-06T17:04:29Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=h1) Report\n> Merging [#24645](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/393d0aa1dc1b2b0cd478cbded6fb13e530589c4e?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/24645/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #24645      +/-   ##\n==========================================\n+ Coverage   92.37%   92.38%   +<.01%     \n==========================================\n  Files         166      166              \n  Lines       52384    52386       +2     \n==========================================\n+ Hits        48390    48396       +6     \n+ Misses       3994     3990       -4\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.8% <100%> (ø)` | :arrow_up: |\n| #single | `43.02% <10%> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/arrays/timedeltas.py](https://codecov.io/gh/pandas-dev/pandas/pull/24645/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL3RpbWVkZWx0YXMucHk=) | `88.64% <100%> (+0.55%)` | :arrow_up: |\n| [pandas/core/ops.py](https://codecov.io/gh/pandas-dev/pandas/pull/24645/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvb3BzLnB5) | `94.28% <100%> (ø)` | :arrow_up: |\n| [pandas/core/indexes/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/24645/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9iYXNlLnB5) | `96.36% <100%> (+0.06%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=footer). Last update [393d0aa...1b533ff](https://codecov.io/gh/pandas-dev/pandas/pull/24645?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451680066",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-451680066",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 451680066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY4MDA2Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T18:37:54Z",
    "updated_at": "2019-01-05T18:37:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "-1 on this. I would rather have a purpose-built missing value object that we can use in place of NaT, np.nan; this is very tricky though with the current implementation. If everything is EA's then its possible.\r\n\r\nWould rather you just patch NaT if you need."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451690300",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-451690300",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 451690300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY5MDMwMA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T21:06:15Z",
    "updated_at": "2019-01-05T21:06:15Z",
    "author_association": "MEMBER",
    "body": "> Would rather you just patch NaT if you need.\r\n\r\nNaT not knowing whether it is a datetime or a timedelta is part of the problem; overloading it further would make things worse.\r\n\r\nThe alternative is to define these methods as regular functions\r\n\r\n```\r\ndef nat_td_div(left, right):\r\n```\r\n\r\nand call the appropriate one in the appropriate place.  By making them into methods we let python figure out which one to call and de-duplicate a lot of code elsewhere."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451690536",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-451690536",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 451690536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY5MDUzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T21:10:18Z",
    "updated_at": "2019-01-05T21:10:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The alternative is to define these methods as regular functions\r\n\r\nmaybe that's better. I agree this is a thorny problem. But we need a comprehensive solution, not more missing data types.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451767637",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-451767637",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 451767637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc2NzYzNw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T19:28:21Z",
    "updated_at": "2019-01-06T19:28:21Z",
    "author_association": "MEMBER",
    "body": "Another option (that involves significantly less code) would be to subclass `Timedelta` and override `__new__` to allow us to get an internal `NaTD` object with `self.value == NPY_NAT`.  The tweaks needed in Timedelta to catch the `if self.value == NPY_NAT` cases would be small compared to the current diff."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451768370",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-451768370",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 451768370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc2ODM3MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T19:37:46Z",
    "updated_at": "2019-01-06T19:37:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "how would you reconcile an external pd.NaT with NaTD? is there a way to internally make a NaT_datetime and NaT_timedelta objects so that we always unbox the external object (pd.NaT) for all datetimelike ops ?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451773902",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-451773902",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 451773902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MzkwMg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:54:08Z",
    "updated_at": "2019-01-06T20:54:08Z",
    "author_association": "MEMBER",
    "body": "> how would you reconcile an external pd.NaT with NaTD?\r\n\r\nFor the foreseeable future (i.e. until pandas2) I wouldn't expose NaTD to users at all.  So if a user passes pd.NaT, it behaves exactly like it does now.\r\n\r\n> is there a way to internally make a NaT_datetime and NaT_timedelta objects so that we always unbox the external object (pd.NaT) for all datetimelike ops ?\r\n\r\nThe \"always\" part of that is hard.  Or more specifically, it is hard to do that without risking returning NaTD to users.  The approach in this PR is to identify all the places internally where we would/should use NaTD and swap it in where appropriate.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474655755",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24645#issuecomment-474655755",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24645",
    "id": 474655755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDY1NTc1NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-20T02:09:56Z",
    "updated_at": "2019-03-20T02:09:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing. I think we need a comprehensive soln for this."
  }
]
