[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346490677",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346490677",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346490677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQ5MDY3Nw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T22:31:59Z",
    "updated_at": "2017-11-22T22:31:59Z",
    "author_association": "MEMBER",
    "body": "Looks related : #17920"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346700588",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346700588",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346700588,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjcwMDU4OA==",
    "user": {
      "login": "1kastner",
      "id": 5236165,
      "node_id": "MDQ6VXNlcjUyMzYxNjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5236165?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/1kastner",
      "html_url": "https://github.com/1kastner",
      "followers_url": "https://api.github.com/users/1kastner/followers",
      "following_url": "https://api.github.com/users/1kastner/following{/other_user}",
      "gists_url": "https://api.github.com/users/1kastner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/1kastner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/1kastner/subscriptions",
      "organizations_url": "https://api.github.com/users/1kastner/orgs",
      "repos_url": "https://api.github.com/users/1kastner/repos",
      "events_url": "https://api.github.com/users/1kastner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/1kastner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-23T21:38:44Z",
    "updated_at": "2017-11-23T21:38:44Z",
    "author_association": "NONE",
    "body": "@jbrockmendel Your abbreviations make it difficult for me to read what exactly you mean. Could you use more explicit variable naming for explaining? Thanks a lot!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346702642",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346702642",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346702642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjcwMjY0Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-23T22:01:59Z",
    "updated_at": "2017-11-23T22:04:10Z",
    "author_association": "MEMBER",
    "body": "Woops, didn't notice at first it was the variable names where abbreviations were unclear, assumed it was vernacular.\r\n\r\n`pd` is standard for `pandas`, as is `np` for `numpy`.  `dti` is pretty common for `DatetimeIndex`.\r\n\r\nIn this case `lb` and `rb` are taken from the referenced test `test_getitem_setitem_datetimeindex`, presumably are short for `left_bound` and `right_bound` or something like that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346861033",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346861033",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346861033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njg2MTAzMw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T16:10:54Z",
    "updated_at": "2017-11-24T16:10:54Z",
    "author_association": "MEMBER",
    "body": "Migrated from #18376\r\n\r\n>  I would rather go for the split between naive and timezoned datetime-like objects and my UserWarning instead of an error was rather for backwards-compability\r\n\r\nSo if backward-compat weren't a concern, you would be OK with raising and requiring users to pass tzaware indexers to tzaware DatetimeIndexes?  If so, then I bet @jreback will agree that correctness is more important than backwards-compat in this case and we should Do It Right.  (If so, the rest of this comment is redundant)\r\n\r\n> It is motivated by a use case with data from several different data sources. Some are UTC, some are German Winter Time (without daylight saving time, definitely not a standard time), some are CET etc. I believe that mixing different data sources often has timezone issues as a consequence. But a prove I can not serve.\r\n>\r\n> Adding a TZ is not an option in ISO 8601 as far as I have read it. And I would try to comply to that standard for the labels. Your attempt sounds quite experimential to me.\r\n\r\nYou're right that it is not part of the standard.  The idea is that the \"TZ\" directive would be identified before the date-parsing step-- but on second thought it'd be easier just to append the offset e.g. \"-0500\".  I wrote quickly last night; let me try to explain the suggestion more clearly.\r\n\r\nThere are three issues involved here.  There is the correct behavior, the convenient behavior, and the consistent behavior.  The Technically Correct thing to do is to disallow tznaive/tzaware comparisons.  The convenient thing to do is to Just Work when trying to index/slice a tzaware DatetimeIndex with strings.  The consistent behavior is that slicing and comparison are linked, e.g. `series[lower:upper] == series[(series.index >= lower) & (series.index <= upper)]` match.  AFAICT we cannot have all three of these at the same time.\r\n\r\nThe easy cases:\r\n\r\n- If a DatetimeIndex is tznaive and an indexer/slicer is tznaive, then the current behavior is both correct and convenient.\r\n- If a DatetimeIndex is tzaware and an indexer/slicer is tzaware, then the correct behavior and the convenient behavior and the correct behavior are the same (I'll have to double-check before claiming this is also the same as the current behavior)\r\n\r\nThe hard cases:\r\n\r\n- If a DatetimeIndex is tznaive and an indexer/slicer is tzaware, then #17920 assumes the DatetimeIndex is UTC.  I would _much_ rather raise and require the user explicitly make the index tzaware.  Is there is a reason why this wouldn't work in your use case?\r\n\r\n- If a DatetimeIndex is tzaware and an indexer/slicer is tznaive, then #17920 assumes the indexer implicitly has the same tz as the index.  This is intuitively appealing, since it may be fairly obvious what the user has in mind.\r\n\r\nBut for DatetimeIndex behavior to be internally consistent, that would require that comparison methods _also_ assume that tznaive objects implicitly have the same tz as the index.  And we should definitely not be making that assumption.  It would better to raise in this case and require that users explicitly pass tzaware indexers/slicers."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346864004",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346864004",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346864004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njg2NDAwNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T16:27:10Z",
    "updated_at": "2017-11-24T16:27:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel you need to strictly differentiate between strings and actual datetimes here. \r\n\r\ncomparision with datetimes are necessarily and always will be strict w.r.t. tz-awareness. The conversion of strings *can* be a question, but is orthogonal."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346896444",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346896444",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346896444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njg5NjQ0NA==",
    "user": {
      "login": "1kastner",
      "id": 5236165,
      "node_id": "MDQ6VXNlcjUyMzYxNjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5236165?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/1kastner",
      "html_url": "https://github.com/1kastner",
      "followers_url": "https://api.github.com/users/1kastner/followers",
      "following_url": "https://api.github.com/users/1kastner/following{/other_user}",
      "gists_url": "https://api.github.com/users/1kastner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/1kastner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/1kastner/subscriptions",
      "organizations_url": "https://api.github.com/users/1kastner/orgs",
      "repos_url": "https://api.github.com/users/1kastner/repos",
      "events_url": "https://api.github.com/users/1kastner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/1kastner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T21:12:27Z",
    "updated_at": "2017-11-24T21:12:27Z",
    "author_association": "NONE",
    "body": "@jbrockmendel \r\n\r\n> If a DatetimeIndex is tznaive and an indexer/slicer is tzaware, then #17920 assumes the DatetimeIndex is UTC. I would much rather raise and require the user explicitly make the index tzaware. Is there is a reason why this wouldn't work in your use case?\r\n\r\nIt would work in my use case, this assumption was done not to break other people's code unnecessarily. I agree that your solution is cleaner but for me pandas means having a lot of convenience and the convenience of today creates lots of edge cases. When you look at the documentation, you can pass a lot of string labels which do not look like a datetime-like object but instead are just the year, the year and the month or something similar. We should not assume the user to provide a ISO8601 conform label only. And how do you suggest to make a timezone aware label look like that way? A small sample:\r\n\r\n```python\r\nt = pd.date_range(start=pd.datetime(2000, 1, 1), periods=400, freq='d')\r\ndf = pd.DataFrame(index=t, data={\"val\": range(len(t))})\r\ndf.loc[\"2000-01\":\"2000-03\"]\r\ndf.loc[\"2000-01\"]\r\n```\r\n\r\nI see no way in how we can add timezones to these kinds of labels which can be intuitively read. And only if all kinds of possible labels allow adding timezones, the strictness you suggest is suitable for this library. But that would be a major update for me, rather something which can be discussed for a similar but completely new library."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346898841",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346898841",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346898841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njg5ODg0MQ==",
    "user": {
      "login": "1kastner",
      "id": 5236165,
      "node_id": "MDQ6VXNlcjUyMzYxNjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5236165?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/1kastner",
      "html_url": "https://github.com/1kastner",
      "followers_url": "https://api.github.com/users/1kastner/followers",
      "following_url": "https://api.github.com/users/1kastner/following{/other_user}",
      "gists_url": "https://api.github.com/users/1kastner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/1kastner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/1kastner/subscriptions",
      "organizations_url": "https://api.github.com/users/1kastner/orgs",
      "repos_url": "https://api.github.com/users/1kastner/repos",
      "events_url": "https://api.github.com/users/1kastner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/1kastner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T21:40:38Z",
    "updated_at": "2017-11-24T21:40:38Z",
    "author_association": "NONE",
    "body": "@jbrockmendel Have you made a list of possible string index labels (except the string which equals an ISO8601 string) and how you want to make them timezone aware? Just create a concept before you push more commits on this issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346905250",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346905250",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346905250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkwNTI1MA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T23:13:49Z",
    "updated_at": "2017-11-24T23:13:49Z",
    "author_association": "MEMBER",
    "body": "> Have you made a list of possible string index labels (except the string which equals an ISO8601 string) and how you want to make them timezone aware?\r\n\r\nThat was the idea behind adding \"TZ\" at the end of a non-aware string.\r\n\r\n> pandas means having a lot of convenience\r\n\r\nAgreed.  My contention is that special-casing strings in this context and not others is going to create _more_ corner cases; inconsistency will make things less predictable and therefore less convenient.\r\n\r\n> Just create a concept before you push more commits on this issue.\r\n\r\nNot sure I understand this bit.  This is an Issue, has no commits."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346974992",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-346974992",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 346974992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njk3NDk5Mg==",
    "user": {
      "login": "1kastner",
      "id": 5236165,
      "node_id": "MDQ6VXNlcjUyMzYxNjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5236165?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/1kastner",
      "html_url": "https://github.com/1kastner",
      "followers_url": "https://api.github.com/users/1kastner/followers",
      "following_url": "https://api.github.com/users/1kastner/following{/other_user}",
      "gists_url": "https://api.github.com/users/1kastner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/1kastner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/1kastner/subscriptions",
      "organizations_url": "https://api.github.com/users/1kastner/orgs",
      "repos_url": "https://api.github.com/users/1kastner/repos",
      "events_url": "https://api.github.com/users/1kastner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/1kastner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-26T00:17:52Z",
    "updated_at": "2017-11-27T21:12:27Z",
    "author_association": "NONE",
    "body": "With issue I meant the concern in a non-technical way, not the GitHub issue itself. The idea of adding \"TZ\" sounds like a possible concept but do other people agree on that? Is it the way to go? I somehow like the idea because it allows \"2016-01TZ+01:00\" and currently I don't know how to achieve that with a similar easiness."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/347049087",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-347049087",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 347049087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzA0OTA4Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-26T23:47:33Z",
    "updated_at": "2017-11-26T23:47:33Z",
    "author_association": "MEMBER",
    "body": "> @jbrockmendel you need to strictly differentiate between strings and actual datetimes here.\r\n>\r\n> comparision with datetimes are necessarily and always will be strict w.r.t. tz-awareness. The conversion of strings can be a question, but is orthogonal.\r\n\r\nI agree we should consider both string and actual datetime objects. \r\nHowever, shouldn't this distinction then also not be true for slicing? Eg `df[pd.Timestamp(..):pd.Timestamp(..)]` with naive Timestamps on a tz-aware dataframe? Because this is eg a case there are tests being added for in https://github.com/pandas-dev/pandas/pull/17920 that this works. Following your rules of \"comparison with actual datetimes should be strict\" this should then raise?\r\n\r\n> My contention is that special-casing strings in this context and not others is going to create more corner cases; inconsistency will make things less predictable and therefore less convenient.\r\n\r\nYes indeed. So since for slicing we *want* to special case strings (I don't think we should start thinking of extending datetime string formats with kind of a 'TZ' indicator), let's do it everywhere? So also for comparisons? (which we already do in master I think)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/347052210",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-347052210",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 347052210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzA1MjIxMA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T00:37:09Z",
    "updated_at": "2017-11-27T00:37:09Z",
    "author_association": "MEMBER",
    "body": "@jorisvandenbossche thanks for weighing in here and elsewhere.\r\n\r\nSupposing we assume that strings are implicitly localized to the same tz as a DatetimeIndex for comparisons, do we do the same for Timestamps?  i.e.  are we ok with `DatetimeIndex([foo]) == bar` and `Timestamp(foo) == bar` behaving differently?\r\n\r\nWhat about other DatetimeIndex binary operations that take a datetime-like arg?  Subtraction is the only one that comes to mind.\r\n\r\nConditional on #17920 going in (and I'm +0.75 on it because it _is_ convenient), there is going to be an equivalence-breakage somewhere.  Right now I'm inclined to keep comparisons technically correct (well, make them technically correct with #18376) and break the `ser.loc[lb:ub] == ser[(ser.index >= lb) & (ser.index <= ub)]` equivalence.  That's the only case that doesn't immediately snowball into \"well what about this other thing...\" (I think/hope)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351752925",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-351752925",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 351752925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTc1MjkyNQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T15:59:16Z",
    "updated_at": "2017-12-14T15:59:16Z",
    "author_association": "MEMBER",
    "body": "Copied from #18376:\r\n\r\n> And I think we certainly should not regard it is as just a bug fix (eg in the whatsnew notes).\r\n\r\nHow to treat it in the whatsnew notes is above my pay grade. But over the course of this PR's history I've become increasingly convinced that the current comparison behavior is Just Plain Wrong and should be treated like a bug.\r\n\r\nThe three options on hand are 1) this PR which makes `DatetimeIndex` comparisons behave like all other datetime-like comparisons, 2) edit the spec to explicitly make string comparisons a special case, 3) do nothing. I'm going to assume away 3 and argue against 2.\r\n\r\nAFAICT the main objection to 1) is that in conjunction with #17920 it breaks the equivalence between `ser.loc[lower:upper]` and `ser[(ser.index >= lower) & (ser.index <= upper)]`. But consider what other equivalences are broken by 2:\r\n\r\n- We can no longer count on `DatetimeIndex` comparisons to be transitive. `a >= b` and `b >= c` no longer implies `a >= c`.\r\n- Comparison-broadcasting becomes inconsistent. `(index >= bound)[n]` no longer equals `index[n] >= bound` (unless we then go mess with `Timestamp`...)\r\n- Comparison-boxing becomes inconsistent. `index >= bound` no longer necessarily equals `index >= Timestamp(bound)`.\r\n- Box-conversion becomes inconsistent. `index >= bound` no longer necessarily equals `index.astype(object) >= bound` or `Series(index) >= bound` or `DataFrame(index) >= bound`\r\n\r\n... and most of all, I am not remotely confident that this list is complete. How many places across the code-base do comparisons with DatetimeIndex objects in one place or another? I have no idea.\r\n\r\nA tz-aware `DatetimeIndex` is not easy to get by accident. If a user has one, they have made a decision that timezones matter.\r\n\r\n----------\r\n\r\nAny of the available options introduces an inconsistency _somewhere_. AFAICT Option1 breaks a convenience equivalency, will do so loudly, and as a result will not snowball into other inconsistencies.\r\n\r\nSpecial-casing string comparisons generates a whole mess of other potential (often silent) problems that can be avoided by enforcing behavior that is already canonical.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351979604",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-351979604",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 351979604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTk3OTYwNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T11:09:12Z",
    "updated_at": "2017-12-15T11:09:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\nIn [3]: pd.Timestamp(\"2016-01-01\", tz=\"Europe/Berlin\") > pd.Timestamp(\"now\", tz='UTC')\r\nOut[3]: False\r\n```\r\n\r\n@jbrockmendel on the list?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351994741",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-351994741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 351994741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTk5NDc0MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T12:31:51Z",
    "updated_at": "2017-12-15T12:31:51Z",
    "author_association": "MEMBER",
    "body": "> In [3]: pd.Timestamp(\"2016-01-01\", tz=\"Europe/Berlin\") > pd.Timestamp(\"now\", tz='UTC')\r\n> Out[3]: False\r\n>\r\n> these should all raise (on the list)\r\n\r\nI would say that is up for debate. We currently allow it, and I don't think there is anything ambiguous about what the result should be. Why breaking backwards compatibility to start erroring on this?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352061163",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-352061163",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 352061163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjA2MTE2Mw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T17:16:25Z",
    "updated_at": "2017-12-15T17:16:25Z",
    "author_association": "MEMBER",
    "body": "@jreback why would 2016-01-01 be > now?  Assuming you ran this recently...\r\n\r\n@jorisvandenbossche Is your last comment (the one blockquoting the 2016-01-01) about 2016-01-01?  AFAICT that is unrelated to this Issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352090268",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-352090268",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 352090268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjA5MDI2OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T19:23:40Z",
    "updated_at": "2017-12-15T19:23:40Z",
    "author_association": "MEMBER",
    "body": "@jreback didn't mean the False was wrong, but that he wants it to raise an error (different timezones), and my answer was on that aspect. \r\nIt's related to the general topic (comparisons with timezones) but indeed a bit different (two different timezones instead of naive vs aware).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352092807",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-352092807",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 352092807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjA5MjgwNw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T19:35:09Z",
    "updated_at": "2017-12-15T19:35:09Z",
    "author_association": "MEMBER",
    "body": "> didn't mean the False was wrong, but that he wants it to raise an error\r\n\r\n@jreback can you confirm this is what you intended?  If so I'm surprised because the scalar behavior is pretty well-established."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352094782",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-352094782",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 352094782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjA5NDc4Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T19:44:25Z",
    "updated_at": "2017-12-15T19:44:25Z",
    "author_association": "MEMBER",
    "body": "See the discussion in the linked issue:\nhttps://github.com/pandas-dev/pandas/issues/15249\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352095310",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-352095310",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 352095310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjA5NTMxMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T19:46:54Z",
    "updated_at": "2017-12-15T19:46:54Z",
    "author_association": "MEMBER",
    "body": "> How to treat it in the whatsnew notes is above my pay grade. But over the course of this PR's history I've become increasingly convinced that the current comparison behavior is Just Plain Wrong and should be treated like a bug.\r\n\r\nI think you are certainly experienced enough to have a valuable opinion about that! \r\nI can certainly understand you are opposed to keeping the behaviour (there are good reasons for that), but I don't see why it would be \"plain wrong\". IMO it is not wrong to interpret a string (I would even say it is not really ambiguous what it should do), but it is just a *choice* we make: are we strict about it or do we parse the string to the type of the timestamp it is being compared to. Both are valid choices, with its pros and cons.\r\n\r\n> this PR which makes DatetimeIndex comparisons behave like all other datetime-like comparisons,\r\n\r\nWhat do you mean with \"all other datetime-like comparisons\" ? \r\nAnd to be clear: your PR is only about disallowing to compare tz-aware index to strings, correct? Because your following arguments sound more against all comparisons to strings (so also for tz-naive).\r\n\r\n> We can no longer count on DatetimeIndex comparisons to be transitive. a >= b and b >= c no longer implies a >= c.\r\n\r\nI don't understand this one. Can you give a concrete example? \r\n\r\n> Comparison-broadcasting becomes inconsistent. (index >= bound)[n] no longer equals index[n] >= bound (unless we then go mess with Timestamp...)\r\n\r\nI would say: of course, if we choose for allowing strings to compare to tz aware, we do the same for Timestamp (those currenlty don't even compare to strings at all, so this equivalency already does not hold at the moment\r\n\r\n> Comparison-boxing becomes inconsistent. index >= bound no longer necessarily equals index >= Timestamp(bound).\r\n\r\nThat's true. But that is the same with slicing with strings, there this also does not hold up. So I think I would be OK with that.\r\n\r\n> Box-conversion becomes inconsistent. index >= bound no longer necessarily equals index.astype(object) >= bound or Series(index) >= bound or DataFrame(index) >= bound\r\n\r\nThe boxing is true (but for all strings, not only in the case of tz-aware), but Series with datetime values happily compares to a string at the moment.\r\n\r\n> A tz-aware DatetimeIndex is not easy to get by accident. If a user has one, they have made a decision that timezones matter.\r\n\r\nYes. And if a user uses strings instead of aware objects, he made the decision to see the string as 'local' time (I mean local to the data).\r\n\r\n---\r\n\r\nTo be clear, I am not necessarily against the disallowing of comparing strings to tz-aware data, but I am strongly opposed to comparing to strings in general, and it is not fully clear if you are arguing for that or only the former."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352108127",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-352108127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 352108127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjEwODEyNw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T20:48:01Z",
    "updated_at": "2017-12-15T20:48:01Z",
    "author_association": "MEMBER",
    "body": "> See the discussion in the linked issue: #15249 \r\n\r\nThanks, the context there helps.\r\n\r\n> we do the same for Timestamp (those currenlty don't even compare to strings at all, so this equivalency already does not hold at the moment\r\n\r\nI was under the mistaken impression that those comparisons were done, my mistake.  This tempers the strength of my opinion somewhat, will need to think on it before deciding how much.\r\n\r\n> What do you mean with \"all other datetime-like comparisons\" ?\r\n\r\nChoose any two: DatetimeIndex, Timestamp, datetime, datetime64-Series, datetime64-Dataframe-column.\r\n\r\n> I don't understand this one [loss of transitivity]. Can you give a concrete example?\r\n\r\nThe following is in 0.21.1 and is part of what #18376 is intended to fix:\r\n\r\n```\r\nIn [2]: tstr = '2016-01-01 12:00:00'\r\nIn [3]: west = pd.DatetimeIndex([tstr], tz='US/Pacific')\r\nIn [4]: east = pd.DatetimeIndex([tstr], tz='US/Eastern')\r\n\r\nIn [7]: east == tstr\r\nOut[7]: array([ True], dtype=bool)\r\n\r\nIn [8]: west == tstr\r\nOut[8]: array([ True], dtype=bool)\r\n\r\nIn [9]: east == west\r\nOut[9]: array([False], dtype=bool)\r\n```\r\n\r\ni.e. equality is not transitive.  Am I the only one who finds that troubling from a ability-to-reason-about-code perspective?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352879879",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-352879879",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 352879879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjg3OTg3OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T20:40:22Z",
    "updated_at": "2017-12-19T20:40:22Z",
    "author_association": "MEMBER",
    "body": "> > What do you mean with \"like all other datetime-like comparisons\" ?\r\n\r\n> Choose any two: DatetimeIndex, Timestamp, datetime, datetime64-Series, datetime64-Dataframe-column.\r\n\r\nWell, DatetimeIndex and datetime64 Series/DataFrame all allow comparison to strings when they are tz-aware. It is only `Timestamp` that does not do this, but as discussed above it does not support string comparison at all. I don't think datetime is that relevant here, as we extend the standard functionality already in many ways.\r\n\r\n> > I don't understand this one [loss of transitivity]. Can you give a concrete example?\r\n\r\n> The following is in 0.21.1 and is part of what #18376 is intended to fix:\r\n\r\nThe example you give is for tz-aware timestamps strings, where indeed `a >= b` and `b >= c` no longer implies `a >= c`. \r\nThat is correct, but, I can perfectly make a similar example for tz-naive timestamps as well, and is just a consequence of allowing this convenience of interpreting strings as datetimes. And so IMO not an argument for this specific case of tz-aware timestamps (but could be an argument against any string interpretation at all). \r\n\r\n```\r\nIn [26]: a = \"2012-01-01\"\r\n\r\nIn [27]: b = pd.DatetimeIndex(['2012-01-01'], tz='US/Pacific')\r\n\r\nIn [28]: c = \"2012-01-01 00:00:00\"\r\n\r\nIn [29]: a == b\r\nOut[29]: array([ True], dtype=bool)\r\n\r\nIn [30]: b == c\r\nOut[30]: array([ True], dtype=bool)\r\n\r\nIn [31]: a == c\r\nOut[31]: False\r\n```\r\n\r\nOf course I \"cheat\" a bit as I have taken strings for a and c (so the other way around as in your example), but again, equality is not transitive. \r\nYes, that can make it more complex to reason about expected outcome if you are comparing variables. But interpreting strings is there for convenience, in interactive use, and you can always choose to use actual timestamps for complex library code where those strings would be hidden in variables.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352893001",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-352893001",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 352893001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjg5MzAwMQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T21:34:00Z",
    "updated_at": "2017-12-19T21:34:00Z",
    "author_association": "MEMBER",
    "body": "> Of course I \"cheat\" a bit as I have taken strings for a and c (so the other way around as in your example), but again, equality is not transitive.\r\n\r\nYou are [technically correct](https://www.youtube.com/watch?v=hou0lU8WMgo).\r\n\r\nI'm still not wild about allowing inconsistent string comparisons through, but this isn't a hill I want to die on.  If I can get your blessing on #18376 in its current form (that punts on strings, requires tzawareness-compat for everything else) I'll happily spend my time elsewhere.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429382560",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-429382560",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 429382560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTM4MjU2MA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-12T16:24:17Z",
    "updated_at": "2018-10-12T16:24:17Z",
    "author_association": "MEMBER",
    "body": "I think this has been resolved.  Closing."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444869110",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-444869110",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 444869110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDg2OTExMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T13:23:49Z",
    "updated_at": "2018-12-06T13:23:49Z",
    "author_association": "MEMBER",
    "body": "> I think this has been resolved.\r\n\r\nI what way has it been resolved?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444956625",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18435#issuecomment-444956625",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18435",
    "id": 444956625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDk1NjYyNQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T17:25:41Z",
    "updated_at": "2018-12-06T17:25:41Z",
    "author_association": "MEMBER",
    "body": "> I what way has it been resolved?\r\n\r\nI thought that #17920 had been merged, apparently was wrong about that."
  }
]
