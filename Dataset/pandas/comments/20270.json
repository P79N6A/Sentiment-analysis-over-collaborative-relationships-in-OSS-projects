[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372085884",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20270#issuecomment-372085884",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20270",
    "id": 372085884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjA4NTg4NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T03:10:11Z",
    "updated_at": "2018-03-11T03:10:11Z",
    "author_association": "MEMBER",
    "body": "Lot's of comments but just wanted to say nice job! This is one of the tougher docstrings"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372240872",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20270#issuecomment-372240872",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20270",
    "id": 372240872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjI0MDg3Mg==",
    "user": {
      "login": "math-and-data",
      "id": 10563164,
      "node_id": "MDQ6VXNlcjEwNTYzMTY0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10563164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/math-and-data",
      "html_url": "https://github.com/math-and-data",
      "followers_url": "https://api.github.com/users/math-and-data/followers",
      "following_url": "https://api.github.com/users/math-and-data/following{/other_user}",
      "gists_url": "https://api.github.com/users/math-and-data/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/math-and-data/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/math-and-data/subscriptions",
      "organizations_url": "https://api.github.com/users/math-and-data/orgs",
      "repos_url": "https://api.github.com/users/math-and-data/repos",
      "events_url": "https://api.github.com/users/math-and-data/events{/privacy}",
      "received_events_url": "https://api.github.com/users/math-and-data/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T09:17:30Z",
    "updated_at": "2018-03-12T09:17:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I hope to finish these great suggestions some time today."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372486760",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20270#issuecomment-372486760",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20270",
    "id": 372486760,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQ4Njc2MA==",
    "user": {
      "login": "math-and-data",
      "id": 10563164,
      "node_id": "MDQ6VXNlcjEwNTYzMTY0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10563164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/math-and-data",
      "html_url": "https://github.com/math-and-data",
      "followers_url": "https://api.github.com/users/math-and-data/followers",
      "following_url": "https://api.github.com/users/math-and-data/following{/other_user}",
      "gists_url": "https://api.github.com/users/math-and-data/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/math-and-data/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/math-and-data/subscriptions",
      "organizations_url": "https://api.github.com/users/math-and-data/orgs",
      "repos_url": "https://api.github.com/users/math-and-data/repos",
      "events_url": "https://api.github.com/users/math-and-data/events{/privacy}",
      "received_events_url": "https://api.github.com/users/math-and-data/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T22:41:32Z",
    "updated_at": "2018-03-12T23:21:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you for the thorough review, @WillAyd \r\nI made some changes. \r\n\r\nI believe the errors below can be ignored, because they relate to known issues (**kwargs, .. versionadded::, etc.)\r\n```\r\n################################################################################\r\n################### Docstring (pandas.DataFrame.interpolate) ###################\r\n################################################################################\r\n\r\nInterpolate values according to different methods.\r\n\r\nPlease note that only ``method='linear'`` is supported for\r\nDataFrames/Series with a MultiIndex.\r\n\r\nParameters\r\n----------\r\nmethod : {'linear', 'time', 'index', 'values', 'nearest', 'zero',\r\n          'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh',\r\n          'polynomial', 'spline', 'piecewise_polynomial', 'pad',\r\n          'from_derivatives', 'pchip', 'akima'}\r\n    Interpolation technique to use.\r\n\r\n    * 'linear': Ignore the index and treat the values as equally\r\n      spaced. This is the only method supported on MultiIndexes.\r\n    * 'time': Works on daily and higher resolution\r\n      data to interpolate given length of interval.\r\n    * 'index', 'values': use the actual numerical values of the index.\r\n    * 'pad': Fill in NaNs using existing values.\r\n    * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'spline',\r\n      'barycentric', 'polynomial': Passed to\r\n      ``scipy.interpolate.interp1d``. Both 'polynomial' and 'spline'\r\n      require that you also specify an `order` (int),\r\n      e.g. df.interpolate(method='polynomial', order=4).\r\n      These use the actual numerical values of the index.\r\n    * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima':\r\n      Wrappers around the scipy interpolation methods of similar\r\n      names. See `Notes`.\r\n    * 'from_derivatives': Refers to\r\n      ``scipy.interpolate.BPoly.from_derivatives`` which\r\n      replaces 'piecewise_polynomial' interpolation method in\r\n      scipy 0.18.\r\n\r\n    .. versionadded:: 0.18.1\r\n\r\n       Added support for the 'akima' method\r\n       Added interpolate method 'from_derivatives' which replaces\r\n       'piecewise_polynomial' in scipy 0.18; backwards-compatible with\r\n       scipy < 0.18\r\n\r\naxis : {0 or 'index', 1 or 'columns', None}, default None\r\n    Axis to interpolate along.\r\nlimit : int, optional\r\n    Maximum number of consecutive NaNs to fill. Must be greater than\r\n    0.\r\ninplace : bool, default False\r\n    Update the data in place if possible.\r\nlimit_direction : {'forward', 'backward', 'both'}, default 'forward'\r\n    If limit is specified, consecutive NaNs will be filled in this\r\n    direction.\r\nlimit_area : {`None`, 'inside', 'outside'}\r\n    If limit is specified, consecutive NaNs will be filled with this\r\n    restriction.\r\n\r\n    * None: No fill restriction (default).\r\n    * 'inside': Only fill NaNs surrounded by valid values\r\n      (interpolate).\r\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\r\n\r\n    .. versionadded:: 0.21.0\r\n\r\ndowncast : optional, 'infer' or None, defaults to None\r\n    Downcast dtypes if possible.\r\n**kwargs\r\n    Keyword arguments to pass on to the interpolating function.\r\n\r\nReturns\r\n-------\r\nSeries or DataFrame\r\n    Same-shape object interpolated at the NaN values\r\n\r\nSee Also\r\n--------\r\nreplace : replace a value\r\nfillna : fill missing values\r\nscipy.interpolate.Akima1DInterpolator : piecewise cubic polynomials\r\n    (Akima interpolator)\r\nscipy.interpolate.BPoly.from_derivatives : piecewise polynomial in the\r\n    Bernstein basis\r\nscipy.interpolate.interp1d : interpolate a 1-D function\r\nscipy.interpolate.KroghInterpolator : interpolate polynomial (Krogh\r\n    interpolator)\r\nscipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\r\n    interpolation\r\nscipy.interpolate.CubicSpline : cubic spline data interpolator\r\n\r\nNotes\r\n-----\r\nIf the selected `method` is one of 'krogh', 'piecewise_polynomial',\r\n'spline', 'pchip', 'akima':\r\nThey are wrappers around the scipy interpolation methods of similar\r\nnames. These use the actual numerical values of the index.\r\nFor more information on their behavior, see the\r\n`scipy documentation\r\n<http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\r\nand `tutorial documentation\r\n<http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__.\r\n\r\nExamples\r\n--------\r\n\r\nFilling in `NaN` in a :class:`~pandas.Series` via linear\r\ninterpolation.\r\n\r\n>>> s = pd.Series([0, 1, np.nan, 3])\r\n>>> s.interpolate()\r\n0    0.0\r\n1    1.0\r\n2    2.0\r\n3    3.0\r\ndtype: float64\r\n\r\nFilling in `NaN` in a Series by padding, but filling at most two\r\nconsecutive `NaN` at a time.\r\n\r\n>>> s = pd.Series([np.nan, \"single_one\", np.nan,\r\n...                  \"fill_two_more\", np.nan, np.nan, np.nan,\r\n...                  4.71, np.nan])\r\n>>> s\r\n0              NaN\r\n1       single_one\r\n2              NaN\r\n3    fill_two_more\r\n4              NaN\r\n5              NaN\r\n6              NaN\r\n7             4.71\r\n8              NaN\r\ndtype: object\r\n>>> s.interpolate(method='pad', limit=2)\r\n0              NaN\r\n1       single_one\r\n2       single_one\r\n3    fill_two_more\r\n4    fill_two_more\r\n5    fill_two_more\r\n6              NaN\r\n7             4.71\r\n8             4.71\r\ndtype: object\r\n\r\nFilling in `NaN` in a Series via polynomial interpolation or splines:\r\nBoth `polynomial` and `spline` methods require that you also specify\r\nan `order` (int).\r\n\r\n>>> s = pd.Series([0, 2, np.nan, 8])\r\n>>> s.interpolate(method='polynomial', order=1)\r\n0    0.0\r\n1    2.0\r\n2    5.0\r\n3    8.0\r\ndtype: float64\r\n>>> s.interpolate(method='polynomial', order=2)\r\n0    0.000000\r\n1    2.000000\r\n2    4.666667\r\n3    8.000000\r\ndtype: float64\r\n\r\nCreate a :class:`~pandas.DataFrame` with missing values to fill it\r\nwith diffferent methods.\r\n\r\n>>> df = pd.DataFrame([[0,1,2,0,4],[1,2,3,-1,8],\r\n...                    [2,3,4,-2,12],[3,4,5,-3,16]],\r\n...                   columns=['a', 'b', 'c', 'd', 'e'])\r\n>>> df\r\n   a  b  c  d   e\r\n0  0  1  2  0   4\r\n1  1  2  3 -1   8\r\n2  2  3  4 -2  12\r\n3  3  4  5 -3  16\r\n>>> df.loc[1,'a'] = np.nan\r\n>>> df.loc[3,'a'] = np.nan\r\n>>> df.loc[0,'b'] = np.nan\r\n>>> df.loc[1,'d'] = np.nan\r\n>>> df.loc[2,'d'] = np.nan\r\n>>> df.loc[1,'e'] = np.nan\r\n>>> df\r\n     a    b  c    d     e\r\n0  0.0  NaN  2  0.0   4.0\r\n1  NaN  2.0  3  NaN   NaN\r\n2  2.0  3.0  4  NaN  12.0\r\n3  NaN  4.0  5 -3.0  16.0\r\n\r\nFill the DataFrame forward (that is, going down) along each column.\r\nNote how the last entry in column `a` is interpolated differently\r\n(because there is no entry after it to use for interpolation).\r\nNote how the first entry in column `b` remains `NaN` (because there\r\nis no entry befofe it to use for interpolation).\r\n\r\n>>> df.interpolate(method='linear', limit_direction='forward', axis=0)\r\n     a    b  c    d     e\r\n0  0.0  NaN  2  0.0   4.0\r\n1  1.0  2.0  3 -1.0   8.0\r\n2  2.0  3.0  4 -2.0  12.0\r\n3  2.0  4.0  5 -3.0  16.0\r\n\r\n################################################################################\r\n################################## Validation ##################################\r\n################################################################################\r\n\r\nErrors found:\r\n        Errors in parameters section\r\n                Parameters {'kwargs'} not documented\r\n                Unknown parameters {'**kwargs'}\r\n                Parameter \"method\" description should start with capital letter\r\n                Parameter \"method\" description should finish with \".\"\r\n                Parameter \"limit_area\" description should finish with \".\"\r\n                Parameter \"**kwargs\" has no  @type\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373205251",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20270#issuecomment-373205251",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20270",
    "id": 373205251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIwNTI1MQ==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T23:10:32Z",
    "updated_at": "2018-08-19T00:25:33Z",
    "author_association": "NONE",
    "body": "Hello @math-and-data! Thanks for updating the PR.\n\n\n\nCheers ! There are no PEP8 issues in this Pull Request. :beers: \n\n##### Comment last updated on August 19, 2018 at 00:25 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373205257",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20270#issuecomment-373205257",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20270",
    "id": 373205257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIwNTI1Nw==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-03-14T23:10:34Z",
    "updated_at": "2018-08-19T00:25:41Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20270?src=pr&el=h1) Report\n> Merging [#20270](https://codecov.io/gh/pandas-dev/pandas/pull/20270?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/92dcf5f4cce9c7221c8556f0251ec56095cc1b2b?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/20270/graphs/tree.svg?src=pr&width=650&token=eZ4WkYLtcO&height=150)](https://codecov.io/gh/pandas-dev/pandas/pull/20270?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master   #20270   +/-   ##\n=======================================\n  Coverage   92.05%   92.05%           \n=======================================\n  Files         169      169           \n  Lines       50713    50713           \n=======================================\n  Hits        46683    46683           \n  Misses       4030     4030\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.46% <ø> (ø)` | :arrow_up: |\n| #single | `42.25% <ø> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/20270?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/generic.py](https://codecov.io/gh/pandas-dev/pandas/pull/20270/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZ2VuZXJpYy5weQ==) | `96.44% <ø> (ø)` | :arrow_up: |\n| [pandas/core/series.py](https://codecov.io/gh/pandas-dev/pandas/pull/20270/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvc2VyaWVzLnB5) | `93.73% <0%> (ø)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20270?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20270?src=pr&el=footer). Last update [92dcf5f...3f00e93](https://codecov.io/gh/pandas-dev/pandas/pull/20270?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373209338",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20270#issuecomment-373209338",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20270",
    "id": 373209338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIwOTMzOA==",
    "user": {
      "login": "math-and-data",
      "id": 10563164,
      "node_id": "MDQ6VXNlcjEwNTYzMTY0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10563164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/math-and-data",
      "html_url": "https://github.com/math-and-data",
      "followers_url": "https://api.github.com/users/math-and-data/followers",
      "following_url": "https://api.github.com/users/math-and-data/following{/other_user}",
      "gists_url": "https://api.github.com/users/math-and-data/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/math-and-data/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/math-and-data/subscriptions",
      "organizations_url": "https://api.github.com/users/math-and-data/orgs",
      "repos_url": "https://api.github.com/users/math-and-data/repos",
      "events_url": "https://api.github.com/users/math-and-data/events{/privacy}",
      "received_events_url": "https://api.github.com/users/math-and-data/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T23:31:39Z",
    "updated_at": "2018-03-14T23:31:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "- [ ] docstring validation issues below, should be known kwarg and .\r\n```\r\n################################################################################\r\n################### Docstring (pandas.DataFrame.interpolate) ###################\r\n################################################################################\r\n\r\nInterpolate values according to different methods.\r\n\r\nPlease note that only ``method='linear'`` is supported for\r\nDataFrames/Series with a MultiIndex.\r\n\r\nParameters\r\n----------\r\nmethod : {'linear', 'time', 'index', 'values', 'nearest', 'zero',\r\n          'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh',\r\n          'polynomial', 'spline', 'piecewise_polynomial', 'pad',\r\n          'from_derivatives', 'pchip', 'akima'}\r\n    Interpolation technique to use.\r\n\r\n    * 'linear': Ignore the index and treat the values as equally\r\n      spaced. This is the only method supported on MultiIndexes.\r\n    * 'time': Works on daily and higher resolution\r\n      data to interpolate given length of interval.\r\n    * 'index', 'values': use the actual numerical values of the index.\r\n    * 'pad': Fill in NaNs using existing values.\r\n    * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'spline',\r\n      'barycentric', 'polynomial': Passed to\r\n      ``scipy.interpolate.interp1d``. Both 'polynomial' and 'spline'\r\n      require that you also specify an `order` (int),\r\n      e.g. df.interpolate(method='polynomial', order=4).\r\n      These use the numerical values of the index.\r\n    * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima':\r\n      Wrappers around the SciPy interpolation methods of similar\r\n      names. See `Notes`.\r\n    * 'from_derivatives': Refers to\r\n      ``scipy.interpolate.BPoly.from_derivatives`` which\r\n      replaces 'piecewise_polynomial' interpolation method in\r\n      scipy 0.18.\r\n\r\n    .. versionadded:: 0.18.1\r\n\r\n       Added support for the 'akima' method\r\n       Added interpolate method 'from_derivatives' which replaces\r\n       'piecewise_polynomial' in SciPy 0.18; backwards-compatible with\r\n       SciPy < 0.18\r\n\r\naxis : {0 or 'index', 1 or 'columns', None}, default None\r\n    Axis to interpolate along.\r\nlimit : int, optional\r\n    Maximum number of consecutive NaNs to fill. Must be greater than\r\n    0.\r\ninplace : bool, default False\r\n    Update the data in place if possible.\r\nlimit_direction : {'forward', 'backward', 'both'}, default 'forward'\r\n    If limit is specified, consecutive NaNs will be filled in this\r\n    direction.\r\nlimit_area : {`None`, 'inside', 'outside'}\r\n    If limit is specified, consecutive NaNs will be filled with this\r\n    restriction.\r\n\r\n    * None: No fill restriction.\r\n    * 'inside': Only fill NaNs surrounded by valid values\r\n      (interpolate).\r\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\r\n\r\n    .. versionadded:: 0.21.0\r\n\r\ndowncast : optional, 'infer' or None, defaults to None\r\n    Downcast dtypes if possible.\r\n**kwargs\r\n    Keyword arguments to pass on to the interpolating function.\r\n\r\nReturns\r\n-------\r\nSeries or DataFrame\r\n    Returns the same object type as the caller, interpolated at\r\n    some or all `NaN` values\r\n\r\nSee Also\r\n--------\r\nreplace : replace a value\r\nfillna : fill missing values\r\nscipy.interpolate.Akima1DInterpolator : piecewise cubic polynomials\r\n    (Akima interpolator)\r\nscipy.interpolate.BPoly.from_derivatives : piecewise polynomial in the\r\n    Bernstein basis\r\nscipy.interpolate.interp1d : interpolate a 1-D function\r\nscipy.interpolate.KroghInterpolator : interpolate polynomial (Krogh\r\n    interpolator)\r\nscipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\r\n    interpolation\r\nscipy.interpolate.CubicSpline : cubic spline data interpolator\r\n\r\nNotes\r\n-----\r\nThe 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\r\nmethods are wrappers around the respective SciPy implementations of\r\nsimilar names. These use the actual numerical values of the index.\r\nFor more information on their behavior, see the\r\n`SciPy documentation\r\n<http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\r\nand `SciPy tutorial\r\n<http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__.\r\n\r\nExamples\r\n--------\r\n\r\nFilling in `NaN` in a :class:`~pandas.Series` via linear\r\ninterpolation.\r\n\r\n>>> s = pd.Series([0, 1, np.nan, 3])\r\n>>> s.interpolate()\r\n0    0.0\r\n1    1.0\r\n2    2.0\r\n3    3.0\r\ndtype: float64\r\n\r\nFilling in `NaN` in a Series by padding, but filling at most two\r\nconsecutive `NaN` at a time.\r\n\r\n>>> s = pd.Series([np.nan, \"single_one\", np.nan,\r\n...                \"fill_two_more\", np.nan, np.nan, np.nan,\r\n...                4.71, np.nan])\r\n>>> s\r\n0              NaN\r\n1       single_one\r\n2              NaN\r\n3    fill_two_more\r\n4              NaN\r\n5              NaN\r\n6              NaN\r\n7             4.71\r\n8              NaN\r\ndtype: object\r\n>>> s.interpolate(method='pad', limit=2)\r\n0              NaN\r\n1       single_one\r\n2       single_one\r\n3    fill_two_more\r\n4    fill_two_more\r\n5    fill_two_more\r\n6              NaN\r\n7             4.71\r\n8             4.71\r\ndtype: object\r\n\r\nFilling in `NaN` in a Series via polynomial interpolation or splines:\r\nBoth `polynomial` and `spline` methods require that you also specify\r\nan `order` (int).\r\n\r\n>>> s = pd.Series([0, 2, np.nan, 8])\r\n>>> s.interpolate(method='polynomial', order=2)\r\n0    0.000000\r\n1    2.000000\r\n2    4.666667\r\n3    8.000000\r\ndtype: float64\r\n\r\nFilling in `NaN` in a :class:`~pandas.DataFrame` via linear\r\ninterpolation.\r\n\r\n>>> df = pd.DataFrame({'a': range(0,4),\r\n...                    'b': range(1,5),\r\n...                    'c': range(-1, -5, -1),\r\n...                    'd': [x**2 for x in range(1,5)]})\r\n>>> df\r\n   a  b  c   d\r\n0  0  1 -1   1\r\n1  1  2 -2   4\r\n2  2  3 -3   9\r\n3  3  4 -4  16\r\n>>> df.loc[1,'a'] = np.nan\r\n>>> df.loc[3,'a'] = np.nan\r\n>>> df.loc[0,'b'] = np.nan\r\n>>> df.loc[1,'c'] = np.nan\r\n>>> df.loc[2,'c'] = np.nan\r\n>>> df.loc[1,'d'] = np.nan\r\n>>> df\r\n     a    b    c     d\r\n0  0.0  NaN -1.0   1.0\r\n1  NaN  2.0  NaN   NaN\r\n2  2.0  3.0  NaN   9.0\r\n3  NaN  4.0 -4.0  16.0\r\n\r\nFill the DataFrame forward (that is, going down) along each column.\r\nNote how the last entry in column `a` is interpolated differently,\r\nbecause there is no entry after it to use for interpolation.\r\nNote how the first entry in column `b` remains `NaN`, because there\r\nis no entry befofe it to use for interpolation.\r\n\r\n>>> df.interpolate(method='linear', limit_direction='forward', axis=0)\r\n     a    b    c     d\r\n0  0.0  NaN -1.0   1.0\r\n1  1.0  2.0 -2.0   5.0\r\n2  2.0  3.0 -3.0   9.0\r\n3  2.0  4.0 -4.0  16.0\r\n\r\n>>> df['d'].interpolate(method='polynomial', order=2)\r\n0     1.0\r\n1     4.0\r\n2     9.0\r\n3    16.0\r\nName: d, dtype: float64\r\n\r\n################################################################################\r\n################################## Validation ##################################\r\n################################################################################\r\n\r\nErrors found:\r\n        Errors in parameters section\r\n                Parameters {'kwargs'} not documented\r\n                Unknown parameters {'**kwargs'}\r\n                Parameter \"method\" description should start with capital letter\r\n                Parameter \"method\" description should finish with \".\"\r\n                Parameter \"limit_area\" description should finish with \".\"\r\n                Parameter \"**kwargs\" has no type\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/414094584",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20270#issuecomment-414094584",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20270",
    "id": 414094584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDA5NDU4NA==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-19T00:27:23Z",
    "updated_at": "2018-08-19T00:27:23Z",
    "author_association": "MEMBER",
    "body": "Yep, agree. I think they should be all right now. Thanks @WillAyd !"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/414094974",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20270#issuecomment-414094974",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20270",
    "id": 414094974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDA5NDk3NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-19T00:39:11Z",
    "updated_at": "2018-08-19T00:39:11Z",
    "author_association": "MEMBER",
    "body": "Thanks @math-and-data and @datapythonista !"
  }
]
