[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/71931685",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9366#issuecomment-71931685",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9366",
    "id": 71931685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTMxNjg1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-28T22:36:55Z",
    "updated_at": "2015-01-28T22:36:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls show an example of what you are looking for ; code or pseudo code \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/71992107",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9366#issuecomment-71992107",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9366",
    "id": 71992107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTkyMTA3",
    "user": {
      "login": "bytesemantics",
      "id": 1457985,
      "node_id": "MDQ6VXNlcjE0NTc5ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1457985?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bytesemantics",
      "html_url": "https://github.com/bytesemantics",
      "followers_url": "https://api.github.com/users/bytesemantics/followers",
      "following_url": "https://api.github.com/users/bytesemantics/following{/other_user}",
      "gists_url": "https://api.github.com/users/bytesemantics/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bytesemantics/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bytesemantics/subscriptions",
      "organizations_url": "https://api.github.com/users/bytesemantics/orgs",
      "repos_url": "https://api.github.com/users/bytesemantics/repos",
      "events_url": "https://api.github.com/users/bytesemantics/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bytesemantics/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-29T09:13:15Z",
    "updated_at": "2015-01-29T09:13:15Z",
    "author_association": "NONE",
    "body": "Sure.\n\nI'm reluctant to suggest a change which fundamentally could alter many existing APIs, and so would suggest the following:\n\nA function made available on Panel, Series, and DataFrame called 'lastOpStatus'\n\nThis would return a tuple of:\n(\n    numRowsModified,\n    op: { expr: \"expresssion executed\",\n            status: \"Fail\" | \"Success\"}\n)\n\nwhere:\n\"numRowsModified\" (number of rows affected by the last operation),\n \"op\" is a dict containing info on the last operation executed on self, and the status of that execution\n(0 (Fail), 1(Success))\n\nAny operations which affect the structure of self, alter values of any rows or columns in self would be expected to populate internal data members such that a subsequent call to 'lastOpStatus' would be correctly populated.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72005526",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9366#issuecomment-72005526",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9366",
    "id": 72005526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMDA1NTI2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-29T10:51:28Z",
    "updated_at": "2015-01-29T10:51:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "You should do this external with a wrapper of your own. This would completely break the API.\n\nJust sum the boolean indexers before and you can see what will change. Or compare the before and after frames to see what actually changed. It really depends on your usecase.\n\n```\nIn [20]: df = DataFrame(np.random.randn(1000,2),columns=list('AB'))\n\nIn [21]: mask = (df['A']>0) & (df['B']<0)\n\nIn [22]: len(df)\nOut[22]: 1000\n\nIn [23]: sum(mask)\nOut[23]: 234\n\nIn [24]: df[mask] *= 2\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72008718",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9366#issuecomment-72008718",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9366",
    "id": 72008718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMDA4NzE4",
    "user": {
      "login": "bytesemantics",
      "id": 1457985,
      "node_id": "MDQ6VXNlcjE0NTc5ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1457985?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bytesemantics",
      "html_url": "https://github.com/bytesemantics",
      "followers_url": "https://api.github.com/users/bytesemantics/followers",
      "following_url": "https://api.github.com/users/bytesemantics/following{/other_user}",
      "gists_url": "https://api.github.com/users/bytesemantics/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bytesemantics/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bytesemantics/subscriptions",
      "organizations_url": "https://api.github.com/users/bytesemantics/orgs",
      "repos_url": "https://api.github.com/users/bytesemantics/repos",
      "events_url": "https://api.github.com/users/bytesemantics/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bytesemantics/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-29T11:18:51Z",
    "updated_at": "2015-01-29T11:18:51Z",
    "author_association": "NONE",
    "body": "We've written an extensive ETL layer using Pandas. To write code which executes a filter - to determine how many changes will be made - prior to using the filter in an .ix or .loc call breaks the DRY principle.\n\nI'm aware of how to check and count what changes. I'm asking for this function to be provided so that I don't violate DRY.\n\nCan you explain how this proposal breaks the API - when it extends the API - and doesn't propose any changes to existing API methods ? (Internal implementation changes only).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72012174",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9366#issuecomment-72012174",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9366",
    "id": 72012174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMDEyMTc0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-29T11:50:41Z",
    "updated_at": "2015-01-29T11:50:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "well I can think of several issue here:\n- this would be a drag on performance, since updating just overwrites a memory space, determing if something changed would involved quite a few (non-cheap) operations. IOW to do this 'correctly' you actually have to compare the before/after data, not just the filter\n- errors should be obvious and fail fast, iow, these setter should raise and exception and not silently return a status if they succeed/fail (this always overrides DRY btw).\n- you seem to want to keep some additional state in the object itself, e.g. the last ops thingy). This opens a whole host of issues in propogation of data (violating pure object principles).\n\nSo while in theory its a decent idea. In practice I think at best this would have to be an optional feature that is layered is such a way as not to interfere with anything else. Hence out of scope for pandas.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72014923",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9366#issuecomment-72014923",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9366",
    "id": 72014923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMDE0OTIz",
    "user": {
      "login": "bytesemantics",
      "id": 1457985,
      "node_id": "MDQ6VXNlcjE0NTc5ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1457985?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bytesemantics",
      "html_url": "https://github.com/bytesemantics",
      "followers_url": "https://api.github.com/users/bytesemantics/followers",
      "following_url": "https://api.github.com/users/bytesemantics/following{/other_user}",
      "gists_url": "https://api.github.com/users/bytesemantics/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bytesemantics/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bytesemantics/subscriptions",
      "organizations_url": "https://api.github.com/users/bytesemantics/orgs",
      "repos_url": "https://api.github.com/users/bytesemantics/repos",
      "events_url": "https://api.github.com/users/bytesemantics/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bytesemantics/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-29T12:16:27Z",
    "updated_at": "2015-01-29T12:16:27Z",
    "author_association": "NONE",
    "body": "Thanks for the feedback - it helps a lot.\n\nI've clearly miscommunicated here - as I wasn't suggesting changing any of the existing approaches to error handling and in fact I'd be happy to drop the lastOp/status features.\n\nBut in terms of being able to retrieve a \"how many rows were affected by that last executed operation\"..... could we not add that ?\n\nAlternative data manipulation tools  generally provide information indicating how many rows were changed by the last executed command. Its a very useful piece of feedback which helps when presenting audit trails of ETL dataflows.\n\nCan we not add this ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72113506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9366#issuecomment-72113506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9366",
    "id": 72113506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMTEzNTA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-29T22:03:09Z",
    "updated_at": "2015-01-29T22:03:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "how exactly would add that?\nyou would need to do a full comparison to the before and after. which is quite expensive to do in the general case\nand how exactly would you return this to the user?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72854010",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9366#issuecomment-72854010",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9366",
    "id": 72854010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyODU0MDEw",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-04T13:29:42Z",
    "updated_at": "2015-02-04T13:29:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bytesemantics I've used decorators in the past for logging this sort of stuff. It really helps keep things DRY. Essentially, every operation is a function that takes one DataFrame (or two if you're doing a merge) and `**kwargs`. Then you can add decorators to each function. I've used ones that log the size going in and out, the number of `NaN`s. I've never done one for the number of rows affected. It may be something as simple as `(original_df != transformed_df).any(1).sum()` if the shape is the same.\n\nBut that operation will be somewhat expensive to calculate, and will only work in certain situations. I guess what I'm saying is that I think this really has to be implemented by the end-user.\n\nIf you haven't used decorators before, [this](http://chimera.labs.oreilly.com/books/1230000000393/ch09.html) is the best reference.\n"
  }
]
