[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/271563966",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-271563966",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 271563966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTU2Mzk2Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T12:31:49Z",
    "updated_at": "2017-01-10T12:31:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "can u put up a simple example with the various options exercised? (e.g. simulate the output)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272311593",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-272311593",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 272311593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjMxMTU5Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-12T23:01:28Z",
    "updated_at": "2017-01-12T23:01:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated with an example.\r\n\r\nI also changed the suggested API: Before I had\r\n\r\n```python\r\ndf.rolling(n, axis=None).apply(f)\r\n```\r\n\r\nBut really it should be\r\n\r\n```python\r\ndf.rolling(n).apply(f, axis=None).\r\n```\r\n\r\nThe `.rolling(axis=.)` parameter controls the direction for rolling. The `.rolling(...).apply(f, axis=.)` parameter controls the axis for function application."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272454109",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-272454109",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 272454109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQ1NDEwOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T14:23:34Z",
    "updated_at": "2017-01-13T14:23:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger correct me if I am wrong, but what you *really* want is for ``.apply`` to be passed one of 2 cases.\r\n\r\n- a single column (now)\r\n- the entire table (option)\r\n\r\n?\r\nThe other functions *are* only univariate so this doesn't matter.\r\n\r\nbut apply is pretty generic so we don't know what the user wants (but the original implementation was a single column)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272568642",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-272568642",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 272568642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjU2ODY0Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T22:45:42Z",
    "updated_at": "2017-01-13T22:47:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "You're correct.\r\n\r\nThis should make things clear\r\n\r\n```python\r\nIn [9]: def f(x):\r\n   ...:     print(x)\r\n   ...:     return 0\r\n\r\nIn [8]: df = pd.DataFrame(np.arange(9).reshape(3, 3))\r\n\r\nIn [14]: df\r\nOut[14]:\r\n   0  1  2\r\n0  0  1  2\r\n1  3  4  5\r\n2  6  7  8\r\n\r\n\r\n```\r\n\r\nCurrently, and the default in the future, this prints out\r\n\r\n```python\r\nIn [10]: df.rolling(2).apply(f)\r\n[ 0.  3.]\r\n[ 3.  6.]\r\n[ 1.  4.]\r\n[ 4.  7.]\r\n[ 2.  5.]\r\n[ 5.  8.]\r\n```\r\n\r\nWith the new implementation and `axis=None`, the printed output would be\r\n\r\n```python\r\nIn [10]: df.rolling(2).apply(f, axis=None)\r\n[[ 0  1, 2],  # first window; 2x3 array\r\n [ 3, 4, 5]]\r\n[[ 3, 4, 5],  # second window; 2x3 array\r\n  [6, 7, 8]]\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272593537",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-272593537",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 272593537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjU5MzUzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-14T02:08:28Z",
    "updated_at": "2017-01-14T02:08:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger I know you used ``axis=None`` this way in ``.style``, but I personally find this a bit confusing.\r\n\r\nI think its better to follow our current model, IOW\r\n\r\nreceive a DataFrame ``df.rolling(...).apply(...)``\r\nreceive a Series ``df.rolling(...).column.apply(...)``\r\n\r\nis very natural. This would be an API change, though even now I think we pass a ``ndarray``.\r\n\r\nanother possibilty is to have ``return_type = 'frame', 'series', 'ndarray'`` (with a default of ``None``, so that we can make this change easier)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/289229417",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-289229417",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 289229417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTIyOTQxNw==",
    "user": {
      "login": "dbivolaru",
      "id": 17240340,
      "node_id": "MDQ6VXNlcjE3MjQwMzQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17240340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbivolaru",
      "html_url": "https://github.com/dbivolaru",
      "followers_url": "https://api.github.com/users/dbivolaru/followers",
      "following_url": "https://api.github.com/users/dbivolaru/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbivolaru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbivolaru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbivolaru/subscriptions",
      "organizations_url": "https://api.github.com/users/dbivolaru/orgs",
      "repos_url": "https://api.github.com/users/dbivolaru/repos",
      "events_url": "https://api.github.com/users/dbivolaru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbivolaru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-25T18:15:27Z",
    "updated_at": "2017-03-25T18:17:14Z",
    "author_association": "NONE",
    "body": "I ran into a similar issue with a rolling function that uses OLS internally and needs to return more than one column (eg. the confidence interval).\r\n\r\nWould the test cases cover also ```df.groupby(level=...)['column'].rolling(...).apply(...)``` and is there a workaround for pre-0.20 versions that would prevent re-calculating the OLS twice ie. for each returned column?\r\n\r\nRegarding API, I think the best way it should look like:\r\n```\r\ndef f(narray):\r\n    res = sm.OLS(narray, ...).fit()\r\n    m_min, m_max = res.conf_int(0.05)[0]\r\n    return m_min, m_max\r\n\r\n# Single column\r\ndf.groupby(level=...)['column'].rolling(...).apply(lambda x: f(x))\r\n\r\ndef g(exogen, endogen):\r\n    res = sm.OLS(exogen, endogen).fit()\r\n    m_min, m_max = res.conf_int(0.05)[0]\r\n    return m_min, m_max\r\n\r\n# Multiple columns\r\ndf.groupby(level=...).rolling(...).apply(lambda x: g(x['exogen'], x['endogen']))\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/289231587",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-289231587",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 289231587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTIzMTU4Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-25T18:50:15Z",
    "updated_at": "2017-03-25T18:50:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dbivolaru \r\n\r\n> Would the test cases cover also df.groupby(level=...)['column'].rolling(...).apply(...) and is there a workaround for pre-0.20 versions that would prevent re-calculating the OLS twice ie. for each returned column?\r\n\r\nThis is just an idea. You are welcome to submit a patch for this.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435952224",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-435952224",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 435952224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk1MjIyNA==",
    "user": {
      "login": "makmanalp",
      "id": 161965,
      "node_id": "MDQ6VXNlcjE2MTk2NQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/161965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makmanalp",
      "html_url": "https://github.com/makmanalp",
      "followers_url": "https://api.github.com/users/makmanalp/followers",
      "following_url": "https://api.github.com/users/makmanalp/following{/other_user}",
      "gists_url": "https://api.github.com/users/makmanalp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makmanalp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makmanalp/subscriptions",
      "organizations_url": "https://api.github.com/users/makmanalp/orgs",
      "repos_url": "https://api.github.com/users/makmanalp/repos",
      "events_url": "https://api.github.com/users/makmanalp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makmanalp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T17:02:16Z",
    "updated_at": "2018-11-05T17:02:16Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  think its better to follow our current model, IOW\r\n> receive a DataFrame df.rolling(...).apply(...)\r\n> receive a Series df.rolling(...).column.apply(...)\r\n> is very natural. This would be an API change, though even now I think we pass a ndarray.\r\n\r\nI definitely agree with this - it fits well with everything else.\r\n\r\nSo is the idea here that because apply() currently works column-wise and not dataframe-wise on `dataframe.rolling.apply()`, we're kinda locked in now and don't want to break backwards compat, and we need a new API? Or are we just waiting for a patch and and opportune moment to release?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435955680",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15095#issuecomment-435955680",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15095",
    "id": 435955680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk1NTY4MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T17:12:00Z",
    "updated_at": "2018-11-05T17:12:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So is the idea here that because apply() currently works column-wise and not dataframe-wise on dataframe.rolling.apply(), we're kinda locked in now and don't want to break backwards compat, and we need a new API?\r\n\r\nThat's my opinion. We could maybe do this with a deprecation cycle with keywords."
  }
]
