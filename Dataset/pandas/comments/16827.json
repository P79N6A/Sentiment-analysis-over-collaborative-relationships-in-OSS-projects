[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/313091781",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16827#issuecomment-313091781",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16827",
    "id": 313091781,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzA5MTc4MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-05T12:43:47Z",
    "updated_at": "2017-07-05T12:43:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think there's some overlap here with\r\n\r\n- https://github.com/pandas-dev/pandas/issues/16485, and\r\n- https://github.com/pandas-dev/pandas/issues/8244\r\n\r\nIs that correct? Can you go through those and explain the differences to this one?\r\n\r\nIMO, I'd like to see pandas handle the `size` argument (#8244) and a bit more flexible `color` (#16485). I don't really think we should expand the grouped / facetted plotting API. Seaborn does a much better job at that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314875265",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16827#issuecomment-314875265",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16827",
    "id": 314875265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDg3NTI2NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-12T19:41:45Z",
    "updated_at": "2017-07-12T19:41:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nipunbatra do you have any interest in working on either of those two issues? Or in the meantime, submitting that cookbook recipe would be helpful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326689496",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16827#issuecomment-326689496",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16827",
    "id": 326689496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY4OTQ5Ng==",
    "user": {
      "login": "VincentAntoine",
      "id": 27647971,
      "node_id": "MDQ6VXNlcjI3NjQ3OTcx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/27647971?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VincentAntoine",
      "html_url": "https://github.com/VincentAntoine",
      "followers_url": "https://api.github.com/users/VincentAntoine/followers",
      "following_url": "https://api.github.com/users/VincentAntoine/following{/other_user}",
      "gists_url": "https://api.github.com/users/VincentAntoine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VincentAntoine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VincentAntoine/subscriptions",
      "organizations_url": "https://api.github.com/users/VincentAntoine/orgs",
      "repos_url": "https://api.github.com/users/VincentAntoine/repos",
      "events_url": "https://api.github.com/users/VincentAntoine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VincentAntoine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-01T21:39:37Z",
    "updated_at": "2017-09-01T21:39:37Z",
    "author_association": "NONE",
    "body": "Hi,\r\n\r\nI would like to help with this. This would be my first contribution to open source so I might need guidance in the process. I'll give it a try and should be back in the next two weeks with something hopefully."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326691085",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16827#issuecomment-326691085",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16827",
    "id": 326691085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY5MTA4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-01T21:49:25Z",
    "updated_at": "2017-09-01T21:49:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@VincentAntoine great! Just holler early and often if you get stuck."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/327319240",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16827#issuecomment-327319240",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16827",
    "id": 327319240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMxOTI0MA==",
    "user": {
      "login": "VincentAntoine",
      "id": 27647971,
      "node_id": "MDQ6VXNlcjI3NjQ3OTcx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/27647971?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VincentAntoine",
      "html_url": "https://github.com/VincentAntoine",
      "followers_url": "https://api.github.com/users/VincentAntoine/followers",
      "following_url": "https://api.github.com/users/VincentAntoine/following{/other_user}",
      "gists_url": "https://api.github.com/users/VincentAntoine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VincentAntoine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VincentAntoine/subscriptions",
      "organizations_url": "https://api.github.com/users/VincentAntoine/orgs",
      "repos_url": "https://api.github.com/users/VincentAntoine/repos",
      "events_url": "https://api.github.com/users/VincentAntoine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VincentAntoine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T22:16:20Z",
    "updated_at": "2017-09-05T22:18:09Z",
    "author_association": "NONE",
    "body": "Hi,\r\n\r\nI have started to look around and fiddle with the ScatterPlot class.\r\nScatterPlot before any modification:\r\n\r\n``` python\r\nclass ScatterPlot(PlanePlot):\r\n    _kind = 'scatter'\r\n \r\n    def __init__(self, data, x, y, s=None, c=None, **kwargs):\r\n        if s is None:\r\n            # hide the matplotlib default for size, in case we want to change\r\n            # the handling of this argument later\r\n        s = 20\r\n```\r\n\r\nI changed this bit to detect whether s was a column name and grab and normalize the data in the corresponding column. I think a maximum size of 200 pts is a decent default, but of course the most appropriate maximum bubble size will depend on the number of points to display so I think it is necessary to have a new parameter **s_grow = 1** to allow users make bubbles bigger or smaller and find the correct scaling for each situation.\r\n\r\nSo this is what I wrote so far:\r\n\r\n``` python\r\nclass ScatterPlot(PlanePlot):\r\n    _kind = 'scatter'\r\n \r\n    def __init__(self, data, x, y, s=None, s_grow=1, c=None, **kwargs):\r\n        if s is None:\r\n            # Set default size if no argument is given\r\n            s = 20\r\n        elif is_hashable(s) and s in data.columns:\r\n            # If s is a label of a column of the df, grab and normalize the data to 200 * s_grow\r\n            size_data = data.loc[:, s].values\r\n            if is_numeric_dtype(size_data):\r\n                s = 200 * s_grow * size_data / size_data.max()\r\n            else:\r\n                raise TypeError('s must be of numeric dtype')\r\n```\r\n\r\nSo s can be any of the following when creating a scatter plot from a DataFrame:\r\n* None --> defaults to s = 20\r\n* Column name --> we grab the data in the corresponding column as bubble sizes\r\n* Scalar --> fixed bubble size\r\n* array --> used as bubble sizes\r\n\r\nThere is a possible confusion, if for instance \"s=50\" and 50 is a column name --> should we use a fixed bubble size of 50, or use the data in the column 50? This does not seem like a serious problem to me, and I think it makes more sense to use the data in the column 50 in this case.\r\n\r\nI will now make the bubble size scale. Your feedback will be greatly appreciated!\r\n\r\nThanks\r\nVincent"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/327332615",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16827#issuecomment-327332615",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16827",
    "id": 327332615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMzMjYxNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T23:36:32Z",
    "updated_at": "2017-09-05T23:36:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There is a possible confusion, if for instance \"s=50\" and 50 is a column name --> should we use a fixed bubble size of 50,\r\n\r\nI think we always default to a scalar `50` in this case. They can specify `s=df['50']` if they absolutely want a column.\r\n\r\nFWIW, I think a simple / partial solution is great here. If `s_grow` is too awkward / difficult to implement, feel free to leave it out. A 90% solution is just fine, and if people need to customize further they can use matplotlib directly."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329997598",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16827#issuecomment-329997598",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16827",
    "id": 329997598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTk5NzU5OA==",
    "user": {
      "login": "VincentAntoine",
      "id": 27647971,
      "node_id": "MDQ6VXNlcjI3NjQ3OTcx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/27647971?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VincentAntoine",
      "html_url": "https://github.com/VincentAntoine",
      "followers_url": "https://api.github.com/users/VincentAntoine/followers",
      "following_url": "https://api.github.com/users/VincentAntoine/following{/other_user}",
      "gists_url": "https://api.github.com/users/VincentAntoine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VincentAntoine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VincentAntoine/subscriptions",
      "organizations_url": "https://api.github.com/users/VincentAntoine/orgs",
      "repos_url": "https://api.github.com/users/VincentAntoine/repos",
      "events_url": "https://api.github.com/users/VincentAntoine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VincentAntoine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-16T22:05:35Z",
    "updated_at": "2017-09-16T22:05:35Z",
    "author_association": "NONE",
    "body": "Hey!\r\n\r\nI've made progress with the sizes, haven't looked at colors yet. Taking the same data as @nipunbatra in his example above, this is what I have now:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\n\r\n# fetching and filtering data\r\nmidwest = pd.read_csv(\"http://goo.gl/G1K41K\")\r\nmidwest = midwest[midwest['poptotal'] < 50000]\r\n\r\n# plotting\r\nmidwest.plot(kind='scatter', x='area', y='poptotal', s='popdensity',\r\n             title='Popuation vs area and density')\r\nplt.show()\r\n```\r\n![figure_1](https://user-images.githubusercontent.com/27647971/30515654-9907f5e0-9b2c-11e7-87bf-ab5a8753daf7.png)\r\n\r\nAnd if you want to make the bubbles smaller or bigger, you can use s_grow (defaut 1) to change that:\r\n\r\n\r\n```python\r\nmidwest.plot(kind='scatter', x='area', y='poptotal', s='popdensity',\r\n             title='Popuation vs area and density', s_grow=0.2)\r\nplt.show()\r\n```\r\n![figure_2](https://user-images.githubusercontent.com/27647971/30515689-1a2e5cea-9b2d-11e7-982d-0e03f408908c.png)\r\n\r\nHere is what I did so far:\r\n* 1: grab the data, normalize the data appropriately to get reasonable bubble sizes, pass that to matplotlib to make the bubble plot\r\n* 2: make the legend\r\n\r\n### Grabbing & normalizing data\r\nCompared to what I explained in my previous post, I only slightly modified the __init__ method of the ScatterPlot class to turn s_grow, size_title, size_data_max and bubble_points (the default bubble max size of 200 points) into attributes of ScatterPlot instances, as that makes these 4 parameters easily accessible to the other methods when building the legend for the bubble sizes.\r\n\r\n```python\r\nclass ScatterPlot(PlanePlot):\r\n    _kind = 'scatter'\r\n\r\n    def __init__(self, data, x, y, s=None, s_grow=1, c=None, **kwargs):\r\n        if s is None:\r\n            # Set default size if no argument is given\r\n            s = 20\r\n        elif is_hashable(s) and s in data.columns:\r\n            # Handle the case where s is a label of a column of the df\r\n            # The data is normalized to 200 * s_grow\r\n            size_data = data.loc[:, s].values\r\n            if is_numeric_dtype(size_data):\r\n                self.size_title = s\r\n                self.size_data_max=size_data.max()\r\n                self.s_grow= s_grow\r\n                self.bubble_points = 200\r\n                s = self.bubble_points * s_grow * size_data / self.size_data_max\r\n            else:\r\n                raise TypeError('s must be of numeric dtype')\r\n        super(ScatterPlot, self).__init__(data, x, y, s=s, **kwargs)\r\n\r\n```\r\n\r\n### Building the legend\r\nBefore actually building the legend, we must define the sizes and labels of the bubbles to include in the legend. For instance if we want 4 bubbles in our legend, a straighforward approach is to use data_max, 0.75 * data_max, 0.5 * data_max and 0.25 * data_max. However as you can see in the graph built by @nipunbatra this leads to values like 82, 733, 1382... which is not as nice having labels with \"round\" values like in the graph produced by Altair (see @nipunbatra 's [blog post](https://nipunbatra.github.io/blog/2017/50-ggplot-python-1.html)).\r\n\r\nI have therefore tried to achieve this nice behaviour and to build a legend with round values. In order to make a legend with 4 bubbles, we therefore need to define 4 bubble sizes and the 4 corresponding labels, with 'round' values for the labels, the biggest of which is close to the maximum of the data.\r\n\r\nFor this I first need a helper function to extract the mantissa (or coefficient) and exponent of a number in decimal base.\r\n\r\n\r\n```python\r\n#class ScatterPlot(PlanePlot):\r\n    def _sci_notation(self, num):\r\n        scientific_notation = '{:e}'.format(num)\r\n        expnt = float(re.search(r'e([+-]\\d*)$', scientific_notation).groups()[0])\r\n        coef = float(re.search(r'^([+-]?\\d\\.\\d)', scientific_notation).groups()[0])\r\n        return coef, expnt\r\n```\r\n\r\n**Example**: _sci_notation(782489.89247823) returns (7.8, 5.0)\r\n\r\nThen, given a data_max, s_grow and bubble_points, this function finds 4 appropriate sizes and labels for the legend:\r\n\r\n```python\r\n#class ScatterPlot(PlanePlot):\r\n    def _legend_bubbles(self, data_max, s_grow, bubble_points):\r\n        coef, expnt = self._sci_notation(data_max)\r\n        labels_catalog = {\r\n            (9, 10) : [10, 5, 2.5, 1],\r\n            (7, 9) : [8, 4, 2, 0.5],\r\n            (5.5, 7) : [6, 3, 1.5, 0.5],\r\n            (4.5, 5.5) : [5, 2, 1, 0.2],\r\n            (3.5, 4.5) : [4, 2, 1, 0.2],\r\n            (2.5, 3.5) : [3, 1, 0.5, 0.2],\r\n            (1.5, 2.5) : [2, 1, 0.5, 0.2],\r\n            (0, 1.5) : [1, 0.5, 0.25, 0.1]\r\n        }\r\n        for lower_bound, upper_bound in labels_catalog:\r\n            if (coef >= lower_bound) & (coef < upper_bound):\r\n                labels = np.array(labels_catalog[lower_bound, upper_bound]) * 10**expnt\r\n                sizes = list(bubble_points * s_grow * labels / data_max)\r\n                labels =['{:g}'.format(l) for l in labels]\r\n                return (sizes, labels)\r\n```\r\n**Example**: _legend_bubbles(data_max = 2678.0588199999, s_grow = 1, bubble_points = 200) returns:\r\n([224.04287595147829, 74.680958650492769, 37.340479325246385,  14.936191730098553],\r\n ['3000', '1000', '500', '200'])\r\n\r\nThe first list gives 4 bubbles sizes (in points) and the second list the 4 corresponding labels.\r\n\r\nIn our exemple with population density, the maximum of popdensity is 2678.0588199999. So what happens is:\r\n* we compute mantissa (2.6) and exponent (3.0)\r\n* 2.6 lies between 2.5 and 3.5, so in the labels_catalog we pick [3, 1, 0.5, 0.2]\r\n* we compute the labels which are 3e3, 1e3, 0.5e3 and 0.2e3\r\n* we compute bubble sizes corresponding to these labels, that is bubble_points * s_grow *  3e3 / 2678.0588199999 etc\r\n\r\nFinally, we put all the pieces together in a _make_legend method which is specific to the ScatterPlot class. After building the legend for the bubbles, we call the _make_legend method of the parent.\r\n\r\n```python\r\n#class ScatterPlot(PlanePlot):\r\n    def _make_legend(self):\r\n        if hasattr(self, \"size_title\"):\r\n            ax = self.axes[0]\r\n            size_title = self.size_title\r\n            data_max = self.size_data_max\r\n            s_grow = self.s_grow\r\n            bubble_points = self.bubble_points\r\n            import matplotlib.legend as legend\r\n            sizes, labels=self._legend_bubbles(data_max, s_grow, bubble_points)\r\n            bubbles=[]\r\n            for size in sizes:\r\n                bubbles.append(ax.scatter([], [], s=size, color='white', edgecolor='gray'))\r\n            bubble_legend=legend.Legend(ax, handles=bubbles, labels=labels, loc='lower right')\r\n            bubble_legend.set_title(size_title)\r\n            ax.add_artist(bubble_legend)\r\n        super()._make_legend()\r\n```\r\n\r\nI also have a few questions:\r\n* my helper function to grab mantissa and exponent of a number should probably not live in the ScatterPlot class, but I don't really know where to put it. Any idea?\r\n* if we use large values for s_grow, and the bubbles become quite large, the bubbles in the legend will become so big that they will overlap and/or they may hide the labels and legend title. We can make the legend layout somewhat adaptative with respect to s_grow by scaling labelspacing, borderpad and handletextpad proportionnaly to sqrt(s_grow), but the result is not always very good. A more flexible approach would be to put the legend in the separate subplot. We could thus place the legend outside of the main plot axes, like in the graph produced by Altair, and having the legend in a separate subplot gives much more layout options and flexibility. Is this an approach you would like me to try or do you prefer keeping it as it is?\r\n\r\n\r\nHow does this look to you?\r\n\r\nThanks!\r\nVincent"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330049949",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16827#issuecomment-330049949",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16827",
    "id": 330049949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDA0OTk0OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-17T14:17:29Z",
    "updated_at": "2017-09-17T14:17:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "It may be easiest to make a PR at this point so we can review the code.\r\n\r\nMy only general comment is we shouldn't worry about edge cases, like the values getting too large, with this high-level API. If people need to customize it further, they can just use matplotlib directly."
  }
]
