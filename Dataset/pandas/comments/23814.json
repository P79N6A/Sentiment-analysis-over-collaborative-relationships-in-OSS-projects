[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440253624",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23814#issuecomment-440253624",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23814",
    "id": 440253624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDI1MzYyNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T12:18:10Z",
    "updated_at": "2018-11-20T12:18:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems like a lot of time is spent in `Categorical.__init__(Series[Categorical])`, when that should essentially just be\r\n\r\n```python\r\nif isinstance(data, (ABCSeries, ABCIndexClass)):\r\n    data = data._values\r\nif isinstance(data, type(self)):\r\n    dtype = data.dtype\r\n    codes = data.codes\r\n```\r\n\r\n\r\nWe would need to handle not-default args for `categories`, `ordered`, and `codes`.\r\n\r\n\r\n\r\n<details>\r\n\r\n```\r\nTimer unit: 1e-06 s\r\n\r\nTotal time: 0.02405 s\r\nFile: /Users/taugspurger/sandbox/pandas/pandas/core/arrays/categorical.py\r\nFunction: __init__ at line 329\r\n\r\nLine #      Hits         Time  Per Hit   % Time  Line Contents\r\n==============================================================\r\n   329                                               def __init__(self, values, categories=None, ordered=None, dtype=None,\r\n   330                                                            fastpath=False):\r\n   331                                           \r\n   332                                                   # Ways of specifying the dtype (prioritized ordered)\r\n   333                                                   # 1. dtype is a CategoricalDtype\r\n   334                                                   #    a.) with known categories, use dtype.categories\r\n   335                                                   #    b.) else with Categorical values, use values.dtype\r\n   336                                                   #    c.) else, infer from values\r\n   337                                                   #    d.) specifying dtype=CategoricalDtype and categories is an error\r\n   338                                                   # 2. dtype is a string 'category'\r\n   339                                                   #    a.) use categories, ordered\r\n   340                                                   #    b.) use values.dtype\r\n   341                                                   #    c.) infer from values\r\n   342                                                   # 3. dtype is None\r\n   343                                                   #    a.) use categories, ordered\r\n   344                                                   #    b.) use values.dtype\r\n   345                                                   #    c.) infer from values\r\n   346         1          2.0      2.0      0.0          if dtype is not None:\r\n   347                                                       # The dtype argument takes precedence over values.dtype (if any)\r\n   348                                                       if isinstance(dtype, compat.string_types):\r\n   349                                                           if dtype == 'category':\r\n   350                                                               dtype = CategoricalDtype(categories, ordered)\r\n   351                                                           else:\r\n   352                                                               msg = \"Unknown `dtype` {dtype}\"\r\n   353                                                               raise ValueError(msg.format(dtype=dtype))\r\n   354                                                       elif categories is not None or ordered is not None:\r\n   355                                                           raise ValueError(\"Cannot specify both `dtype` and `categories`\"\r\n   356                                                                            \" or `ordered`.\")\r\n   357                                           \r\n   358                                                       categories = dtype.categories\r\n   359                                           \r\n   360         1         13.0     13.0      0.1          elif is_categorical(values):\r\n   361                                                       # If no \"dtype\" was passed, use the one from \"values\", but honor\r\n   362                                                       # the \"ordered\" and \"categories\" arguments\r\n   363         1          5.0      5.0      0.0              dtype = values.dtype._from_categorical_dtype(values.dtype,\r\n   364         1          5.0      5.0      0.0                                                           categories, ordered)\r\n   365                                                   else:\r\n   366                                                       # If dtype=None and values is not categorical, create a new dtype\r\n   367                                                       dtype = CategoricalDtype(categories, ordered)\r\n   368                                           \r\n   369                                                   # At this point, dtype is always a CategoricalDtype\r\n   370                                                   # if dtype.categories is None, we are inferring\r\n   371                                           \r\n   372         1          1.0      1.0      0.0          if fastpath:\r\n   373                                                       self._codes = coerce_indexer_dtype(values, categories)\r\n   374                                                       self._dtype = self._dtype.update_dtype(dtype)\r\n   375                                                       return\r\n   376                                           \r\n   377                                                   # null_mask indicates missing values we want to exclude from inference.\r\n   378                                                   # This means: only missing values in list-likes (not arrays/ndframes).\r\n   379         1         10.0     10.0      0.0          null_mask = np.array(False)\r\n   380                                           \r\n   381                                                   # sanitize input\r\n   382         1          8.0      8.0      0.0          if is_categorical_dtype(values):\r\n   383         1          5.0      5.0      0.0              if dtype.categories is None:\r\n   384                                                           dtype = CategoricalDtype(values.categories, dtype.ordered)\r\n   385                                           \r\n   386                                                   elif not isinstance(values, (ABCIndexClass, ABCSeries)):\r\n   387                                                       # _sanitize_array coerces np.nan to a string under certain versions\r\n   388                                                       # of numpy\r\n   389                                                       values = maybe_infer_to_datetimelike(values, convert_dates=True)\r\n   390                                                       if not isinstance(values, np.ndarray):\r\n   391                                                           values = _convert_to_list_like(values)\r\n   392                                                           from pandas.core.series import _sanitize_array\r\n   393                                                           # By convention, empty lists result in object dtype:\r\n   394                                                           if len(values) == 0:\r\n   395                                                               sanitize_dtype = 'object'\r\n   396                                                           else:\r\n   397                                                               sanitize_dtype = None\r\n   398                                                           null_mask = isna(values)\r\n   399                                                           if null_mask.any():\r\n   400                                                               values = [values[idx] for idx in np.where(~null_mask)[0]]\r\n   401                                                           values = _sanitize_array(values, None, dtype=sanitize_dtype)\r\n   402                                           \r\n   403         1          2.0      2.0      0.0          if dtype.categories is None:\r\n   404                                                       try:\r\n   405                                                           codes, categories = factorize(values, sort=True)\r\n   406                                                       except TypeError:\r\n   407                                                           codes, categories = factorize(values, sort=False)\r\n   408                                                           if dtype.ordered:\r\n   409                                                               # raise, as we don't have a sortable data structure and so\r\n   410                                                               # the user should give us one by specifying categories\r\n   411                                                               raise TypeError(\"'values' is not ordered, please \"\r\n   412                                                                               \"explicitly specify the categories order \"\r\n   413                                                                               \"by passing in a categories argument.\")\r\n   414                                                       except ValueError:\r\n   415                                           \r\n   416                                                           # FIXME\r\n   417                                                           raise NotImplementedError(\"> 1 ndim Categorical are not \"\r\n   418                                                                                     \"supported at this time\")\r\n   419                                           \r\n   420                                                       # we're inferring from values\r\n   421                                                       dtype = CategoricalDtype(categories, dtype.ordered)\r\n   422                                           \r\n   423         1          7.0      7.0      0.0          elif is_categorical_dtype(values):\r\n   424         1        394.0    394.0      1.6              old_codes = (values.cat.codes if isinstance(values, ABCSeries)\r\n   425                                                                    else values.codes)\r\n   426         1          5.0      5.0      0.0              codes = _recode_for_categories(old_codes, values.dtype.categories,\r\n   427         1      23530.0  23530.0     97.8                                             dtype.categories)\r\n   428                                           \r\n   429                                                   else:\r\n   430                                                       codes = _get_codes_for_values(values, dtype.categories)\r\n   431                                           \r\n   432         1         27.0     27.0      0.1          if null_mask.any():\r\n   433                                                       # Reinsert -1 placeholders for previously removed missing values\r\n   434                                                       full_codes = - np.ones(null_mask.shape, dtype=codes.dtype)\r\n   435                                                       full_codes[~null_mask] = codes\r\n   436                                                       codes = full_codes\r\n   437                                           \r\n   438         1         27.0     27.0      0.1          self._dtype = self._dtype.update_dtype(dtype)\r\n   439         1          9.0      9.0      0.0          self._codes = coerce_indexer_dtype(codes, dtype.categories)\r\n```\r\n\r\n</details>\r\n\r\n@colinfang can you post your pandas version?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440256954",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23814#issuecomment-440256954",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23814",
    "id": 440256954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDI1Njk1NA==",
    "user": {
      "login": "colinfang",
      "id": 1499555,
      "node_id": "MDQ6VXNlcjE0OTk1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1499555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/colinfang",
      "html_url": "https://github.com/colinfang",
      "followers_url": "https://api.github.com/users/colinfang/followers",
      "following_url": "https://api.github.com/users/colinfang/following{/other_user}",
      "gists_url": "https://api.github.com/users/colinfang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/colinfang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/colinfang/subscriptions",
      "organizations_url": "https://api.github.com/users/colinfang/orgs",
      "repos_url": "https://api.github.com/users/colinfang/repos",
      "events_url": "https://api.github.com/users/colinfang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/colinfang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T12:30:41Z",
    "updated_at": "2018-11-20T12:30:41Z",
    "author_association": "NONE",
    "body": "I am using v0.23.4.  The performance for v0.20.3 is good."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440258962",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23814#issuecomment-440258962",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23814",
    "id": 440258962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDI1ODk2Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T12:38:19Z",
    "updated_at": "2018-11-20T12:38:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you see if my suggestion would fix it? I think it may need to happen\neven before\nhttps://github.com/pandas-dev/pandas/blob/029d57cb828b053d112ed4e23f446ee07d147935/pandas/core/arrays/categorical.py#L331,\nbecause we need to know whether the user passed None for all the optional\nparameters.\n\nOn Tue, Nov 20, 2018 at 6:30 AM colinfang <notifications@github.com> wrote:\n\n> I am using v0.23.4. The performance for v0.20.3 is good.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/23814#issuecomment-440256954>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHInyzbvgbkKtMKetkzNMTK_Uvb3AMks5uw_X2gaJpZM4Yq9mh>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440461928",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23814#issuecomment-440461928",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23814",
    "id": 440461928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDQ2MTkyOA==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T23:09:40Z",
    "updated_at": "2018-11-20T23:09:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger / @colinfang , I tried inserting code similar to Tom's suggestion, near the beginning of Categorical.__init__, and it appears it does indeed fix the perf issue.  I also noticed there is a \"fastpath\" in that method also, not sure if that is applicable in this case. \r\n\r\nI'd be interested in working on a fix for this issue, unless you were wanting to @colinfang.  I understand there would need to be some more investigation about where exactly to do this short-circuiting, and handling non-default args.  Also, are there perf tests that can be used for this type of thing (those are probably tricky since it may be machine dependent, not sure if there is a good solution for that)?\r\n\r\n```Python\r\nif isinstance(values, (ABCSeries, ABCIndexClass)):\r\n    values = values._values\r\nif isinstance(values, type(self)):\r\n    self._dtype = values.dtype\r\n    self._codes = values.codes\r\n    return\r\n```\r\n```Python\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: s = pd.Series(list('abcd') * 1000000).astype('category')\r\n\r\nIn [3]: %timeit s == 'a'\r\n3.13 ms ± 117 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n\r\nIn [4]: %timeit s.cat.codes == s.cat.categories.get_loc('a')\r\n3.25 ms ± 68.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441054546",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23814#issuecomment-441054546",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23814",
    "id": 441054546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTA1NDU0Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-22T14:57:04Z",
    "updated_at": "2018-11-22T14:57:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd say go ahead and work on this.\n\nYou'd need to add an ASV in asv_bench/benchmarks/categoricals.py for timing\nCategorical(categorical).\n\nOn Tue, Nov 20, 2018 at 5:09 PM Erik <notifications@github.com> wrote:\n\n> @TomAugspurger <https://github.com/TomAugspurger> / @colinfang\n> <https://github.com/colinfang> , I tried inserting code similar to Tom's\n> suggestion, near the beginning of Categorical.*init*, and it appears it\n> does indeed fix the perf issue. I also noticed there is a \"fastpath\" in\n> that method also, not sure if that is applicable in this case.\n>\n> I'd be interested in working on a fix for this issue, unless you were\n> wanting to @colinfang <https://github.com/colinfang>. I understand there\n> would need to be some more investigation about where exactly to do this\n> short-circuiting, and handling non-default args. Also, are there perf tests\n> that can be used for this type of thing (those are probably tricky since it\n> may be machine dependent, not sure if there is a good solution for that)?\n>\n> if isinstance(values, (ABCSeries, ABCIndexClass)):\n>     values = values._valuesif isinstance(values, type(self)):\n>     self._dtype = values.dtype\n>     self._codes = values.codes\n>     return\n>\n> In [1]: import pandas as pd\n>\n> In [2]: s = pd.Series(list('abcd') * 1000000).astype('category')\n>\n> In [3]: %timeit s == 'a'3.13 ms ± 117 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n>\n> In [4]: %timeit s.cat.codes == s.cat.categories.get_loc('a')3.25 ms ± 68.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/23814#issuecomment-440461928>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIofWioeIOoIYkS8aCOjaEAU0tKVKks5uxIu9gaJpZM4Yq9mh>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441339604",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23814#issuecomment-441339604",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23814",
    "id": 441339604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTMzOTYwNA==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T03:04:02Z",
    "updated_at": "2018-11-24T03:04:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "One option I saw may be to short-circuit within _recode_for_categories() (not sure if this would help in any other scenarios also).  It may be safer, since all of the other logic for the other parameters runs as it did before?  In _recode_for_categories(), I tried adding the following code:\r\n```Python\r\nif new_categories.equals(old_categories):\r\n    # Same categories, so no need to actually recode\r\n    return codes.copy()\r\n```\r\nWhich yielded:\r\n```Python\r\nIn [3]: %timeit s == 'a'\r\n7.29 ms ± 33.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n\r\nIn [4]: %timeit s.cat.codes == s.cat.categories.get_loc('a')\r\n3.14 ms ± 29.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\nIf I instead add the following code basically at the beginning of __init()__ (the approach first discussed):\r\n```Python\r\nif categories is None and ordered is None and dtype is None:\r\n    if isinstance(values, (ABCSeries, ABCIndexClass)):\r\n        values = values._values\r\n    if isinstance(values, type(self)):\r\n        self._dtype = values.dtype\r\n        self._codes = values.codes.copy()\r\n        return\r\n```\r\nThis yielded:\r\n```Python\r\nIn [3]: %timeit s == 'a'\r\n5.38 ms ± 116 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\nSo, not a huge difference between the two approaches.  Also, I'm not sure whether I need to copy() the codes as I have in the above snippets.  @TomAugspurger any thoughts?  I can just send a PR and we can continue to discuss there if you prefer.."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441390744",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23814#issuecomment-441390744",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23814",
    "id": 441390744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTM5MDc0NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T19:36:18Z",
    "updated_at": "2018-11-24T19:36:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the change to `Categorical.__init__` is clearly good.\r\n\r\nThe downside to adding a `.equals` check to `_recode_for_categories` is that you always have to pay the cost to check `.equals`, even if they aren't actually equal. I *suspect* that in many cases where you'd end up taking the shortcut in `_recode_for_categories`, you'll *already* know whether on not the categories are equal or not. Still, there may be some cases where you can't know that, so it may be OK to just check that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441400524",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23814#issuecomment-441400524",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23814",
    "id": 441400524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQwMDUyNA==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T22:41:40Z",
    "updated_at": "2018-11-24T22:41:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sounds good, I will go with the __init__ change."
  }
]
