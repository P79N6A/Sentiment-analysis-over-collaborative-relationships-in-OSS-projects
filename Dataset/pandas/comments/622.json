[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3480533",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-3480533",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 3480533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA1MzM=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-13T14:45:56Z",
    "updated_at": "2012-01-13T14:45:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, pandas has only four dtypes right now: int64, float64, bool, and object. This is in the interest of making it user-friendly, but at the expense of memory conservation obviously.  In the future it might make sense to add more as long as it doesn't complicate the user-facing API.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9228163",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-9228163",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 9228163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMjgxNjM=",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-08T14:48:54Z",
    "updated_at": "2012-10-08T14:48:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just got bit by this, upcasting from float32, int8 and int16.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11251731",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-11251731",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 11251731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjUxNzMx",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T16:54:20Z",
    "updated_at": "2012-12-11T16:54:20Z",
    "author_association": "MEMBER",
    "body": "I actually like the fact that the dtypes are simpler when using pandas. Also, If you don't use a `dict`, then the `dtype` is preserved. \n\nIn practice is this a big deal? Maybe I'm a bit green, but I've never run into a situation using pandas where it really mattered whether I used `int32` vs `int64`. \n\nIt matters for things like reading raw bytes from binary files, but if you're creating arrays large enough that the distinction between 32 and 64-bit width numbers matters, you'd be better off just getting more RAM.\n\nFor example, even if you had 4GB of RAM on your machine and you had a 2GB array of 32-bit integers, you're still going to need another 2GB if you want to do any non destructive arithmetic on that array thus maxing out your system's RAM.\n\nPoint is, doesn't seem like this is a bug. Just my two cents.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11256151",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-11256151",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 11256151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjU2MTUx",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T18:36:29Z",
    "updated_at": "2012-12-11T18:36:29Z",
    "author_association": "MEMBER",
    "body": "I agree that the simplicity is good-- you don't have to have to write down the dtype of a DataFrame like you do with a structured array. I think the design should be: have simple defaults, but when a data type is already set (e.g. int32), it's OK to \"live and let live\". \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12391940",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12391940",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12391940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzkxOTQw",
    "user": {
      "login": "adamsd5",
      "id": 997320,
      "node_id": "MDQ6VXNlcjk5NzMyMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/997320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamsd5",
      "html_url": "https://github.com/adamsd5",
      "followers_url": "https://api.github.com/users/adamsd5/followers",
      "following_url": "https://api.github.com/users/adamsd5/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamsd5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamsd5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamsd5/subscriptions",
      "organizations_url": "https://api.github.com/users/adamsd5/orgs",
      "repos_url": "https://api.github.com/users/adamsd5/repos",
      "events_url": "https://api.github.com/users/adamsd5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamsd5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-17T21:13:43Z",
    "updated_at": "2013-01-17T21:13:43Z",
    "author_association": "NONE",
    "body": "I am new to Pandas, but would like to put in my vote for supporting all ndarray types.  From my testing, Series already will support other types, but DataFrame will not.  I have two arguments... memory and speed.  cpcloud suggested that you can always buy more memory, which is a reasonable suggestion.  However, systems do have memory limits, and there are computation tasks that will use all of it (yes, even 256GB or more).  Being able to fit twice as many samples on the system, regardless of how much memory you have, is a good thing.\n\nOn the speed front, I want to load binary files quickly into memory and process them with pandas.  I wrote a C++ module for this purpose.  I don't want to copy the memory after reading it from disk.  For the processing we are doing, this would double the number of memory operations, which slows down the processing by almost 1/2.  Unfortunately, after reading the binary into memory, I need to iterate over it and copy the int32 array into an int64 array.  It is even worse than just a large memory copy because it also must up-cast each value to int64.\n\nI like wesm's suggestion.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12392987",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12392987",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12392987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzkyOTg3",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-17T21:36:06Z",
    "updated_at": "2013-01-17T21:36:06Z",
    "author_association": "MEMBER",
    "body": "@adamsd5 You might try numpy's memmap ndarray subclass. It allows you to treat a file like an in-memory array. Of course, if your file is not just an array then this might be tricky. You could then pass the memmap to the pandas dataframe constructor and the dtype should be preserved. I agree with you that in the long run dtype preservation is desirable. Just out of curiosity, what kind of data are you working with? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12393582",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12393582",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12393582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzkzNTgy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-17T21:50:10Z",
    "updated_at": "2013-01-17T21:52:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@adamsd5 sounds like what you really want is out-of-core computation (similar to what @cpcloud suggested).\nthat is, your data is represented on disk, then slices are put in memory as needed and computed. I know @wesm has this as a goal as well. this will allow you to not even worry about the memory issue at all\n\nHDFStore supports this now, though in a somewhat non-transparent manner.\n\nHere's what you could do\n1. store your data on-disk using HDFStore in a table format (could be a series of append operations from say csv files, or wherever you have now)\n2. iterate over either a) a series of queries, or b) the indicies of the 'mapped frame'\n3. compute and repeat\n\nso imagine this pseudo code (this is the 2 b) part):\n\n```\nstore = HDFStore('a_big_file.h5')\n\n# pretend we have a store of the frame as a table 'df'\n\nnrows = store.get_storer('df').nrows\nchunk_size = 100000\n\nfor i in xrange(int(nrows / chunk_size) + 1):\n    start_i = i * chunk_size\n    stop_i = min((i + 1) * chunk_size, nrows)\n\n    data_for_this_chunk = store.select('df', start = start_i, stop = stop_i)\n    store.append('df_result', process_chunk(data_for_this_chunk))\n```\n\nwould essentially give you a transformation operation, similar to process_chunk(df),\nbut processed in chunks. should be quite memory and speed insensitive, and could be easily parrallellizable\nreduction operations are even simpler (as they can be accumulated in memory)\n\nnot that hard to create a wrapper around this....\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12440331",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12440331",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12440331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDQwMzMx",
    "user": {
      "login": "adamsd5",
      "id": 997320,
      "node_id": "MDQ6VXNlcjk5NzMyMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/997320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamsd5",
      "html_url": "https://github.com/adamsd5",
      "followers_url": "https://api.github.com/users/adamsd5/followers",
      "following_url": "https://api.github.com/users/adamsd5/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamsd5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamsd5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamsd5/subscriptions",
      "organizations_url": "https://api.github.com/users/adamsd5/orgs",
      "repos_url": "https://api.github.com/users/adamsd5/repos",
      "events_url": "https://api.github.com/users/adamsd5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamsd5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-18T20:47:50Z",
    "updated_at": "2013-01-18T20:47:50Z",
    "author_association": "NONE",
    "body": "cpcloud, does pandas.DataFrame treat such memmap ndarrays differently?  You've presented a technique that I might use, but I think the DataFrame will still convert all int32 into int64.\n\nI'm not actually trying to process things out of memory.  I'm happy loading the entire Data Frame into memory.  However, I would like to minimize the memory operations.  Once the bytes are loaded from disk (and alas, I have no control over the format they are written), I do not want to copy them around at all (and I don't want pandas to make a copy for me either).  From what I can tell, Pandas will always up-convert Int32 to Int64, which is a slow operation.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12441252",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12441252",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12441252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDQxMjUy",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-18T21:12:46Z",
    "updated_at": "2013-01-18T21:12:46Z",
    "author_association": "MEMBER",
    "body": "@adamsd5 A cursory glance at frame.py suggests that the dtype is preserved with instances of ndarray (isinstance tests for subclasses) that are not record arrays. You can also pass the dtype in the constructor. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12476851",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12476851",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12476851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDc2ODUx",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T20:29:52Z",
    "updated_at": "2013-01-20T20:30:18Z",
    "author_association": "MEMBER",
    "body": "@adamsd5 I was wrong. It seems that floating point types _are_ preserved in the `DataFrame` constructor, but integer types are _not_. E.g.,\n\n![df-dtypes](https://f.cloud.github.com/assets/417981/81505/60876cce-6336-11e2-8920-846a5beba6dd.png)\n\nThe issue still stands. I poked around in `pandas/core/internals.py` and saw that the function `make_block` converts any integer subtypes to `int64`, but preserves other types. Is there any reason to suspect that getting of the call to `values.astype('i8')` would break anything? Either way I'll try it and report back.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12477331",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12477331",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12477331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDc3MzMx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T20:59:41Z",
    "updated_at": "2013-01-20T21:02:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud see PR #2705. this is a bit more complicated than it first appears, this change will appear on 0.10.2. the existing implementation will upcast for most operations, eg even though u can create a float32 (or int32) frame most operations will not preserve it\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12530503",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12530503",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12530503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTMwNTAz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-22T04:42:57Z",
    "updated_at": "2013-01-22T04:42:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "what dtypes should pandas fully support - this means all types of pad,fill,take,diff operations - their are specific cython functions created for each of the dtypes - the following are currently supported\nfloat64,int64,int32,datetime64[ns],bool,object\n\nfloat32 should be added clearly\nwhat about float16,int16,int8,uint64,uint32,uint16,uint8?\n\nyou can always store these other dtypes, but certain operations will raise (or can auto upcast them)\neg say we don't support int16, can upcast to int32 and perform the ops\n\ndownside of adding more fully supported dtypes is additional compile time on installation and testing\nand after a certain point prob should move to code generation (rather than copy/paste of the functions)\ncomments?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12531040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-12531040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 12531040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTMxMDQw",
    "user": {
      "login": "adamsd5",
      "id": 997320,
      "node_id": "MDQ6VXNlcjk5NzMyMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/997320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamsd5",
      "html_url": "https://github.com/adamsd5",
      "followers_url": "https://api.github.com/users/adamsd5/followers",
      "following_url": "https://api.github.com/users/adamsd5/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamsd5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamsd5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamsd5/subscriptions",
      "organizations_url": "https://api.github.com/users/adamsd5/orgs",
      "repos_url": "https://api.github.com/users/adamsd5/repos",
      "events_url": "https://api.github.com/users/adamsd5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamsd5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-22T05:18:50Z",
    "updated_at": "2013-01-22T05:18:50Z",
    "author_association": "NONE",
    "body": "For my purposes, int32 and float32 would suffice.  I see value in the smaller types for some people.  If operations mean an upcast during the operation, the value is diminished.  A use case would be a huge time series DataFrame on disk that has many int8 columns (perhaps factors), and the user wants to load, then filter based on time stamp and save a sub range of time.  None of the int8 columns should be up converted.  Just my ideas, hope it is helpful.\n\nDarryl\n\nOn Jan 21, 2013, at 11:43 PM, jreback notifications@github.com wrote:\n\nwhat dtypes should pandas fully support - this means all types of pad,fill,take,diff operations - their are specific cython functions created for each of the dtypes - the following are currently supported\nfloat64,int64,int32,datetime64[ns],bool,object\n\nfloat32 should be added clearly\nwhat about float16,int16,int8,uint64,uint32,uint16,uint8?\n\nyou can always store these other dtypes, but certain operations will raise (or can auto upcast them)\neg say we don't support int16, can upcast to int32 and perform the ops\n\ndownside of adding more fully supported dtypes is additional compile time on installation and testing\nand after a certain point prob should move to code generation (rather than copy/paste of the functions)\ncomments?\n\n—\nReply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/13353375",
    "html_url": "https://github.com/pandas-dev/pandas/issues/622#issuecomment-13353375",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/622",
    "id": 13353375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzUzMzc1",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-10T16:23:57Z",
    "updated_at": "2013-02-10T16:23:57Z",
    "author_association": "MEMBER",
    "body": "Boom. resolved by #2708, merged to master today\n"
  }
]
