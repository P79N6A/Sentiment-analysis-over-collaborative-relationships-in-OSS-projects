[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/262250468",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-262250468",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 262250468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjI1MDQ2OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T14:12:50Z",
    "updated_at": "2016-11-22T14:12:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @janschulz (let me know if you want me to stop pinging you on this categorical issues ðŸ˜„ ). Also @mrocklin I think this may interest you as the fastparquet stuff could use `CategoricalDtype` since you know the categories ahead of time."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/262347205",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-262347205",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 262347205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjM0NzIwNQ==",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T19:52:57Z",
    "updated_at": "2016-11-22T19:52:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Will this also mean that `Categorical` is changed to save the `categories/order` information in the the dtype object? As pandas2 seems to go the \"we ave our own dtypes\"-way, it seems that would be a sensible way (if that would also happening with the rest of the dtypes)\r\n\r\n[Thanks for pinging me!]"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/262352012",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-262352012",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 262352012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjM1MjAxMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T20:10:58Z",
    "updated_at": "2016-11-22T20:10:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Will this also mean that Categorical is changed to save the categories/order information in the the dtype object? \r\n\r\nYeah, `pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'], ordered=True).dtype` would be `CategoricalDtype(['a', 'b', 'c'], ordered=True)`.\r\n\r\nDunno if we want to expand the `pd.Categorical` constructor to take a `dtype=CategoricalDtype` option. Perhaps."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/262400906",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-262400906",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 262400906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjQwMDkwNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T23:51:26Z",
    "updated_at": "2016-11-22T23:51:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes, this was the original plan when I first did this, but too many moving parts.\r\n\r\nIf this can be implemented in a back-compat manner (as this is pretty much an implementation detail). I think would be great."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/262460651",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-262460651",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 262460651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjQ2MDY1MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-23T08:54:39Z",
    "updated_at": "2016-11-23T08:54:39Z",
    "author_association": "MEMBER",
    "body": "> 1. CategoricalDtype currently isn't part of the public API. Which methods on it do we make public?\r\n\r\nSpecific for categorical, I suppose we would have a `categories` and `ordered` attribute? But for the existing attributes/methods, maybe to start with we could say in the docs that none of these are public? (not sure if there are that you would want to use)\r\n\r\n> 2. Equality semantics: For backwards compat, I think all instances of CategoricalDtype should compare equal with all others. You can use identity to check if two types are the same\r\n\r\nSounds OK \r\n\r\n> 3. Should the categories argument be required? Would CategoricalDtype(None, ordered=False) be allowed?\r\n\r\nI would not allow this to start with. Is the idea that you can this way let the categories be inferred from the values, but set the ordered attribute through the dtype? Or what would be the application?\r\n\r\n> 4. Strictness?  I would probably expect a TypeError or ValueError as c isn't \"supposed\" to be there. Or do we replace 'c' with NA?\r\n\r\nIt seems that we currently replace with NA:\r\n\r\n```\r\nIn [53]: pd.Categorical(['a', 'b', 'c'], categories=['a', 'b'])\r\nOut[53]: \r\n[a, b, NaN]\r\nCategories (2, object): [a, b]\r\n\r\nIn [54]: pd.Series(['a', 'b', 'c']).astype('category', categories=['a', 'b'])\r\nOut[54]: \r\n0      a\r\n1      b\r\n2    NaN\r\ndtype: category\r\nCategories (2, object): [a, b]\r\n```\r\n\r\nalthough I also think I would like a TypeError more as the default behaviour.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/262500030",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-262500030",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 262500030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjUwMDAzMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-23T12:25:07Z",
    "updated_at": "2016-11-23T12:25:07Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger How is this issue different from https://github.com/pandas-dev/pandas/issues/14676, can that one be closed?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/262663181",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-262663181",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 262663181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjY2MzE4MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-24T00:35:20Z",
    "updated_at": "2016-11-24T00:35:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "That one will be a trivial change to .astype once this is fixed. I think leave it open as a reminder to implement it once the CategoricalDtype changes are done. \n\n> On Nov 23, 2016, at 05:25, Joris Van den Bossche <notifications@github.com> wrote:\n> \n> @TomAugspurger How is this issue different from #14676, can that one be closed?\n> \n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264021127",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264021127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264021127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDAyMTEyNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T22:46:37Z",
    "updated_at": "2016-11-30T22:46:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Small update for future reference. I'm having trouble with the current approach where `CategoricalDtype[categories, ordered]` is a singleton, i.e. one instance of `CategoricalDtype` for each category and ordered. The problem is `_cache` being a (weakref) dictionary. We need\r\n\r\n```python\r\nCategoricalDtype([1, 2])\r\n```\r\n\r\nto be different from\r\n\r\n```python\r\nCategoricalDtype([1., 2.])\r\n```\r\n\r\nbut if we use a dictionary to do singleton stuff, the keys compare equal so we only ever get one. @jreback do you have any links to info on what-all requirements the numpy duck-type has to satisfy?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264039398",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264039398",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264039398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDAzOTM5OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T00:17:01Z",
    "updated_at": "2016-12-01T00:18:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "so the cache would need to be changed to something like a ``WeakDictionary`` and use keys like:\r\n\r\n``(c.categories, c.ordered)``\r\n\r\nBUT the categories are an Index which are not hashable. But prob could do something like:\r\n\r\n```\r\n# showing that ordering does matter (I am deliberately including the index, so we track ordering)\r\nIn [50]: c = Series(pd.Categorical([1, 2], ordered=True))\r\n\r\nIn [51]:  np.bitwise_xor.reduce(hash_pandas_object(c).values)\r\nOut[51]: 6505546918052763540\r\n\r\nIn [52]: c = Series(pd.Categorical([2, 1], ordered=True))\r\n\r\nIn [53]:  np.bitwise_xor.reduce(hash_pandas_object(c).values)\r\nOut[53]: 6135121269729399882\r\n\r\nIn [54]: c = Series(pd.Categorical([1., 2.], ordered=True))\r\n\r\nIn [55]:  np.bitwise_xor.reduce(hash_pandas_object(c).values)\r\nOut[55]: 6505546918052763540\r\n\r\n# you would actually store the CategoricalDtype here (and not c)\r\nIn [58]: {(6505546918052763540, c.cat.ordered) : c}\r\nOut[58]: \r\n{(6505546918052763540, True): 0    1.0\r\n 1    2.0\r\n dtype: category\r\n Categories (2, float64): [1.0 < 2.0]}\r\n```\r\n\r\ncc @mikegraham \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264039536",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264039536",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264039536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDAzOTUzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T00:17:53Z",
    "updated_at": "2016-12-01T00:17:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I may add an option to ``hash_pandas_object`` to directly produce this (if so desired) as this is a data hash for a pandas object. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264041761",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264041761",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264041761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDA0MTc2MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T00:28:59Z",
    "updated_at": "2016-12-01T00:28:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/jreback/pandas/commit/908161b6232414fc982e97bdbfcc1ad1154d4dce"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264086821",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264086821",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264086821,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDA4NjgyMQ==",
    "user": {
      "login": "mikegraham",
      "id": 233655,
      "node_id": "MDQ6VXNlcjIzMzY1NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/233655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegraham",
      "html_url": "https://github.com/mikegraham",
      "followers_url": "https://api.github.com/users/mikegraham/followers",
      "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegraham/orgs",
      "repos_url": "https://api.github.com/users/mikegraham/repos",
      "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegraham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T06:05:20Z",
    "updated_at": "2016-12-01T06:05:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since an index's `__eq__` does not return a bool, I'm not sure that having indices be directly hashable for use as dict keys makes sense to me. It seems to me maybe some proxy is in order to be able to do this...\r\n\r\nIs it the case the Index order matters when the categorical is ordered=True and not when not?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264155014",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264155014",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264155014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDE1NTAxNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T11:59:39Z",
    "updated_at": "2016-12-01T11:59:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is not competing with __eq__ ; we actually use .equals to compare equivalents generally for an Index\r\n\r\nfurthermore this by by default DOES consider ordering (a user could control this by index=False)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264165739",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264165739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264165739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDE2NTczOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T12:50:02Z",
    "updated_at": "2016-12-01T12:50:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback great, thanks. Had to make a minor patch for a parameter that controls whether or not to categorize before hashing. We can't categorize in the CategoricalDtype constructor since we'll hit an infinite loop.\r\n\r\n```diff\r\ndiff --git a/pandas/tools/hashing.py b/pandas/tools/hashing.py\r\nindex 3ed51497d..94739b199 100644\r\n--- a/pandas/tools/hashing.py\r\n+++ b/pandas/tools/hashing.py\r\n@@ -86,7 +86,8 @@ def hash_pandas_object(obj, index=True, encoding='utf8', hash_key=None,\r\n     return h\r\n \r\n \r\n-def hash_array(vals, encoding='utf8', hash_key=None, reduce=False):\r\n+def hash_array(vals, encoding='utf8', hash_key=None, reduce=False,\r\n+               categorize_objects=True):\r\n     \"\"\"\r\n     Given a 1d array, return an array of deterministic integers.\r\n \r\n@@ -100,6 +101,7 @@ def hash_array(vals, encoding='utf8', hash_key=None, reduce=False):\r\n     hash_key : string key to encode, default to _default_hash_key\r\n     reduce : boolean, default False\r\n         produce a single hash result\r\n+    categorize_objects : bool\r\n \r\n     Returns\r\n     -------\r\n@@ -137,16 +139,19 @@ def hash_array(vals, encoding='utf8', hash_key=None, reduce=False):\r\n     else:\r\n \r\n         # its MUCH faster to categorize object dtypes, then hash and rename\r\n-        codes, categories = factorize(vals, sort=False)\r\n-        categories = Index(categories)\r\n-        c = Series(Categorical(codes, categories,\r\n-                               ordered=False, fastpath=True))\r\n-        vals = _hash.hash_object_array(categories.values,\r\n-                                       hash_key,\r\n-                                       encoding)\r\n-\r\n-        # rename & extract\r\n-        vals = c.cat.rename_categories(Index(vals)).astype(np.uint64).values\r\n+        if categorize_objects:\r\n+            codes, categories = factorize(vals, sort=False)\r\n+            categories = Index(categories)\r\n+            c = Series(Categorical(codes, categories,\r\n+                                   ordered=False, fastpath=True))\r\n+            vals = _hash.hash_object_array(categories.values,\r\n+                                           hash_key,\r\n+                                           encoding)\r\n+\r\n+            # rename & extract\r\n+            vals = c.cat.rename_categories(Index(vals)).astype(np.uint64).values\r\n+        else:\r\n+            vals = _hash.hash_object_array(np.asarray(vals), hash_key, encoding)\r\n \r\n     # Then, redistribute these 64-bit ints within the space of 64-bit ints\r\n     vals ^= vals >> 30\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264183342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264183342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264183342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDE4MzM0Mg==",
    "user": {
      "login": "mikegraham",
      "id": 233655,
      "node_id": "MDQ6VXNlcjIzMzY1NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/233655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegraham",
      "html_url": "https://github.com/mikegraham",
      "followers_url": "https://api.github.com/users/mikegraham/followers",
      "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegraham/orgs",
      "repos_url": "https://api.github.com/users/mikegraham/repos",
      "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegraham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T14:15:48Z",
    "updated_at": "2016-12-01T14:15:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> this is not competing with `__eq__`\r\n\r\nI must have taken too literally what you meant when you showed an index being used as part of a dict key."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264195611",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264195611",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264195611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDE5NTYxMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T15:02:28Z",
    "updated_at": "2016-12-01T15:02:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger I wouldn't add like that. instead simply call \r\n``_hash.hash_object_array(np.asarray(vals), hash_key, encoding)`` directly"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264195961",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264195961",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264195961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDE5NTk2MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T15:03:44Z",
    "updated_at": "2016-12-01T15:03:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mikegraham yeah this is to 'hash' Index objects, so in theory it would work for this purpose, IOW, providing a data-hash. But I think we would need much more validation / testing if we actually wanted to replace the equiv of ``__hash__`` for an Index (it may be worth it, but I suspect this is too compute intensive for general usage)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264242687",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264242687",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264242687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDI0MjY4Nw==",
    "user": {
      "login": "mikegraham",
      "id": 233655,
      "node_id": "MDQ6VXNlcjIzMzY1NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/233655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegraham",
      "html_url": "https://github.com/mikegraham",
      "followers_url": "https://api.github.com/users/mikegraham/followers",
      "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegraham/orgs",
      "repos_url": "https://api.github.com/users/mikegraham/repos",
      "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegraham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T17:47:53Z",
    "updated_at": "2016-12-01T17:50:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I read your code closer and I see what you've done now. I think this code might be a bit unsafe because of hash collisions. If this was a 160+ bit cryptographic hash, I could imagine feeling safe enough, but the hashing here.....I'm really not certain it's the right thing to do.\r\n\r\nI'd consider keying on something like\r\n\r\n```\r\nclass UnorderedCategoricalKey(object):\r\n    def __init__(self, index):\r\n        self.index = index\r\n    def __hash__(self):\r\n        return np.bitwise_xor.reduce(hash_pandas_object(c).values)\r\n    def __eq__(self, other):\r\n        return (isinstance(other, type(self)) and \r\n                self.index.dtype is other.index.dtype and\r\n                self.index.sort_values().equals(other.index.sort_values()))\r\n\r\nclass OrderedCategoricalKey(object):\r\n    def __init__(self, index):\r\n        self.index = index\r\n    def __hash__(self):\r\n        return siphash(hash_pandas_object(c).data)\r\n    def __eq__(self, other):\r\n        return (isinstance(other, type(self)) and \r\n                self.index.dtype is other.index.dtype and\r\n                self.index.equals(other.index))\r\n```\r\n\r\nObviously having the key and value have to have references to the index is annoying, but you can get weakref semantics with some work."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264885726",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264885726",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264885726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDg4NTcyNg==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T15:35:56Z",
    "updated_at": "2016-12-05T15:35:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "As predicted by @mikegraham , here is a failure:\r\n\r\n```python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: from pandas.tools.hashing import hash_array\r\n\r\nIn [3]: L = ['Ingrid-9Z9fKIZmkO7i7Cn51Li34pJm44fgX6DYGBNj3VPlOH50m7HnBlPxfIwFMrc\r\n   ...: NJNMP6PSgLmwWnInciMWrCSAlLEvt7JkJl4IxiMrVbXSa8ZQoVaq5xoQPjltuJEfwdNlO6jo\r\n   ...: 8qRRHvD8sBEBMQASrRa6TsdaPTPCBo3nwIBpE7YzzmyH0vMBhjQZLx1aCT7faSEx7PgFxQhH\r\n   ...: dKFWROcysamgy9iVj8DO2Fmwg1NNl93rIAqC3mdqfrCxrzfvIY8aJdzin2cHVzy3QUJxZgHv\r\n   ...: tUtOLxoqnUHsYbNTeq0xcLXpTZEZCxD4PGubIuCNf32c33M7HFsnjWSEjE2yVdWKhmSVodyF\r\n   ...: 8hFYVmhYnMCztQnJrt3O8ZvVRXd5IKwlLexiSp4h888w7SzAIcKgc3g5XQJf6MlSMftDXm9l\r\n   ...: IsE1mJNiJEv6uY6pgvC3fUPhatlR5JPpVAHNSbSEE73MBzJrhCAbOLXQumyOXigZuPoME7Qg\r\n   ...: JcBalliQol7YZ9', 'Tim-b9MddTxOWW2AT1Py6vtVbZwGAmYCjbp89p8mxsiFoVX4FyDOF3\r\n   ...: wFiAkyQTUgwg9sVqVYOZo09Dh1AzhFHbgij52ylF0SEwgzjzHH8TGY8Lypart4p4onnDoDvV\r\n   ...: MBa0kdthVGKl6K0BDVGzyOXPXKpmnMF1H6rJzqHJ0HywfwS4XYpVwlAkoeNsiicHkJUFdUAh\r\n   ...: G229INzvIAiJuAHeJDUoyO4DCBqtoZ5TDend6TK7Y914yHlfH3g1WZu5LksKv68VQHJriWFY\r\n   ...: usW5e6ZZ6dKaMjTwEGuRgdT66iU5nqWTHRH8WSzpXoCFwGcTOwyuqPSe0fTe21DVtJn1FKj9\r\n   ...: F9nEnR9xOvJUO7E0piCIF4Ad9yAIDY4DBimpsTfKXCu1vdHpKYerzbndfuFe5AhfMduLYZJi\r\n   ...: 5iAw8qKSwR5h86ttXV0Mc0QmXz8dsRvDgxjXSmupPxBggdlqUlC828hXiTPD7am0yETBV0F3\r\n   ...: bEtvPiNJfremszcV8NcqAoARMe']\r\n\r\nIn [4]: hash_array(np.asarray(L, dtype=object), 'utf8')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-4-5f657fa82496> in <module>()\r\n----> 1 hash_array(np.asarray(L, dtype=object), 'utf8')\r\n\r\n/home/mrocklin/workspace/pandas/pandas/tools/hashing.py in hash_array(vals, encoding, hash_key)\r\n    127 \r\n    128         # rename & extract\r\n--> 129         vals = c.cat.rename_categories(Index(vals)).astype(np.uint64).values\r\n    130 \r\n    131     # Then, redistribute these 64-bit ints within the space of 64-bit ints\r\n\r\n/home/mrocklin/workspace/pandas/pandas/core/base.py in f(self, *args, **kwargs)\r\n    208 \r\n    209             def f(self, *args, **kwargs):\r\n--> 210                 return self._delegate_method(name, *args, **kwargs)\r\n    211 \r\n    212             f.__name__ = name\r\n\r\n/home/mrocklin/workspace/pandas/pandas/core/categorical.py in _delegate_method(self, name, *args, **kwargs)\r\n   1959         from pandas import Series\r\n   1960         method = getattr(self.categorical, name)\r\n-> 1961         res = method(*args, **kwargs)\r\n   1962         if res is not None:\r\n   1963             return Series(res, index=self.index)\r\n\r\n/home/mrocklin/workspace/pandas/pandas/core/categorical.py in rename_categories(self, new_categories, inplace)\r\n    756         \"\"\"\r\n    757         cat = self if inplace else self.copy()\r\n--> 758         cat.categories = new_categories\r\n    759         if not inplace:\r\n    760             return cat\r\n\r\n/home/mrocklin/workspace/pandas/pandas/core/categorical.py in _set_categories(self, categories, fastpath)\r\n    586         \"\"\"\r\n    587 \r\n--> 588         categories = self._validate_categories(categories, fastpath=fastpath)\r\n    589         if (not fastpath and self._categories is not None and\r\n    590                 len(categories) != len(self._categories)):\r\n\r\n/home/mrocklin/workspace/pandas/pandas/core/categorical.py in _validate_categories(cls, categories, fastpath)\r\n    572 \r\n    573             if not categories.is_unique:\r\n--> 574                 raise ValueError('Categorical categories must be unique')\r\n    575 \r\n    576         return categories\r\n\r\nValueError: Categorical categories must be unique\r\n```\r\n\r\nBoth of these inputs hash down to the same value, which causes Pandas to correctly raise."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264887343",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264887343",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264887343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDg4NzM0Mw==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T15:41:43Z",
    "updated_at": "2016-12-05T15:41:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mikegraham do you have suggestions on the best course of action here?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264914553",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264914553",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264914553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDkxNDU1Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T17:13:32Z",
    "updated_at": "2016-12-05T17:13:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/jreback/pandas/commit/ac360e95c53d85e5dd17e3c694e1ae64466261b7\r\n\r\nhere is the test code.\r\n\r\nI *think* this might be some sort of overflow in siphash."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264915390",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264915390",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264915390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDkxNTM5MA==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T17:16:33Z",
    "updated_at": "2016-12-05T17:16:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is siphash a cryptographic hash?   If not then it should not surprise us to see collisions."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264998984",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264998984",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264998984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDk5ODk4NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T22:30:49Z",
    "updated_at": "2016-12-05T22:31:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "so these are failing if len(string) is an exact power of 2, e.g. these area ``2**9``, ``2**9 + 1`` is fine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264999702",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264999702",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 264999702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDk5OTcwMg==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T22:33:36Z",
    "updated_at": "2016-12-05T22:33:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "http://crypto.stackexchange.com/questions/17996/is-siphash-cryptographically-secure\r\n\r\nThis implies that collisions are likely.  I don't think that this is a problem with the implementation.  My guess is that we can't use siphash and assume that it won't collide."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265000550",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-265000550",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 265000550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTAwMDU1MA==",
    "user": {
      "login": "mikegraham",
      "id": 233655,
      "node_id": "MDQ6VXNlcjIzMzY1NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/233655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegraham",
      "html_url": "https://github.com/mikegraham",
      "followers_url": "https://api.github.com/users/mikegraham/followers",
      "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegraham/orgs",
      "repos_url": "https://api.github.com/users/mikegraham/repos",
      "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegraham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T22:36:58Z",
    "updated_at": "2016-12-05T22:36:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "siphash isn't a cryptographic hash. In many senses it should be about as good as one, but it's by definition 64-bit, which obviously will make collisions very normal.\r\n\r\nI don't see the uniqueness assumption of categorical values as being needed to do this trick -- shouldn't you be able to accomplish the same optimization trick more reliably with a `drop_duplicates` and a `merge`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265001512",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-265001512",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 265001512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTAwMTUxMg==",
    "user": {
      "login": "mikegraham",
      "id": 233655,
      "node_id": "MDQ6VXNlcjIzMzY1NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/233655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegraham",
      "html_url": "https://github.com/mikegraham",
      "followers_url": "https://api.github.com/users/mikegraham/followers",
      "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegraham/orgs",
      "repos_url": "https://api.github.com/users/mikegraham/repos",
      "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegraham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T22:40:57Z",
    "updated_at": "2016-12-05T22:40:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "(I don't know what optimizations are hiding in the categorical implementation that are hard to reproduce in other contexts.)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265002311",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-265002311",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 265002311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTAwMjMxMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T22:44:25Z",
    "updated_at": "2016-12-05T22:44:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "why do powers of 2 len hash the same? that seems very odd"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265002658",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-265002658",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 265002658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTAwMjY1OA==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T22:45:51Z",
    "updated_at": "2016-12-05T22:45:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback one solution to this problem would be to keep this optimization in, but give up quickly if there are duplicate hash values and revert to the old solution.  This optimization is probably good 95% of the time.  The other 5% will just be slow."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265002774",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-265002774",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 265002774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTAwMjc3NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T22:46:26Z",
    "updated_at": "2016-12-05T22:46:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mikegraham this is not using categoricals at all\r\nit is directly repro as above (with raw siphash)\r\n\r\nis my key wrong?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/265003129",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-265003129",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14711",
    "id": 265003129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTAwMzEyOQ==",
    "user": {
      "login": "mikegraham",
      "id": 233655,
      "node_id": "MDQ6VXNlcjIzMzY1NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/233655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegraham",
      "html_url": "https://github.com/mikegraham",
      "followers_url": "https://api.github.com/users/mikegraham/followers",
      "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegraham/orgs",
      "repos_url": "https://api.github.com/users/mikegraham/repos",
      "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegraham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T22:47:56Z",
    "updated_at": "2016-12-05T22:47:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I hadn't ignored your finding there. I was getting a pandas master environment going to get a closer look at it."
  }
]
