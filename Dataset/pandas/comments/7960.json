[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53710850",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-53710850",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 53710850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzEwODUw",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-28T12:07:24Z",
    "updated_at": "2014-08-28T12:07:24Z",
    "author_association": "MEMBER",
    "body": "If we want to tackle this for 0.15, we should start with this.\n\n@hayd @mangecoeur @danielballan @JoergRittinger @artemyk @maxgrenderjones @aldanor @jreback  \nSome input would be useful. What do you think of above questions? What would you want to be able to do with the object interface?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55868917",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55868917",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55868917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODY4OTE3",
    "user": {
      "login": "artemyk",
      "id": 833768,
      "node_id": "MDQ6VXNlcjgzMzc2OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/833768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/artemyk",
      "html_url": "https://github.com/artemyk",
      "followers_url": "https://api.github.com/users/artemyk/followers",
      "following_url": "https://api.github.com/users/artemyk/following{/other_user}",
      "gists_url": "https://api.github.com/users/artemyk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/artemyk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/artemyk/subscriptions",
      "organizations_url": "https://api.github.com/users/artemyk/orgs",
      "repos_url": "https://api.github.com/users/artemyk/repos",
      "events_url": "https://api.github.com/users/artemyk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/artemyk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T09:20:26Z",
    "updated_at": "2014-09-17T09:20:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche Let me throw out another possibility that occurred to me after some hacking away on SQL code:\n- Have two `backend` classes that abstract away differences between sqlalchemy and legacy mode (implementing methods like `execute`, `drop_table`, creation of tables, insert statements, appropriate representation of tables & metadata, etc.).\n- Unify `PandasSQLAlchemy` and `PandasSQLTable` into a single class --- its not really clear to me how useful is the distinction between these two.  Drop the legacy versions of these classes.  Let's just call this class `PandasSQL` for now.\n- Give `PandasSQL` a property that points to the proper backend object (either sqlalchemy or legacy); have it call methods on this backend when it needs to actually hit the database.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55894222",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55894222",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55894222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODk0MjIy",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T13:38:48Z",
    "updated_at": "2014-09-17T13:38:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@artemyk unifying `PandasSQLAlchemy` and `PandasSQLTable` is not a good idea. I originally wrote some of that code and started with a unified model and quickly found it was better to split so that you save table related state and methods with the table and engine related state and methods separately. (actually if memory serves there was some parallel development by other ppl who also converged on the same solution)\n\nAdditionally, it is more flexible if you want to add features or create subclasses. For instance you might want to manipulate more than one table at a time with the same engine. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55897442",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55897442",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55897442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODk3NDQy",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T14:01:25Z",
    "updated_at": "2014-09-17T14:01:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche this is my input (i'm slowly getting back to dealing with this after long period of other work). \n\nPersonally I'm happy with the architecture, especially with respect to being able to create subclasses to add custom functionality. \n\nBeing able to provide custom MetaData and Table definitions I think is important, as well as to override the various type conversion routines. However it would be nice to avoid cramming in too many keyword arguments, so it would be better to let people do this by subclassing rather than passing optional parameters. We should make sure that the architecture is truely modular and you can swap in your own classes as needed. The exception may be for schema handling where you currently need to pass in MetaData - but from recent commits it seems this will be handled through a schema parameter (I personally use this and so far have had to create a custom metadata object).\n\nWith respect to `HDF5Store` like getitem, and in general HDF5-store-like patterns: I think we need to be wary of excessive consistency. There are major differences between how SQL and HDF work and what their features are, so while it makes sense that they should work in broadly familiar ways we shouldn't force SQL to have a certain api just because HDF5 does. \n\nSo for example I find that `pandas_sql['table_name']` doesn't give the impression that you are starting a potentially heavy and slow IO task, while `pandas_sql.read_table('table_name')` makes it clear that you are triggering a read process.\n\nAs to how we see `PandasSQLAlchemy` and `PandasSQLTable` - both should be considered public for maximum flexibility, with the understanding that only advanced users should need them. `PandasSQLAlchemy` holds deals with state and data relating to the database as a whole - so `Engine + MetaData` (since there is always a 1:1 relation between engine and metadata). `PandasSQLTable` holds state and data relating to a given data table. This might be extended (by us of by users) to also cover things like SQL Views.\n\nFinally for naming - I'm not great with names, but I like simply `SQLDatabase` and `SQLTable`, with corresponding `SQLiteDatabase` and `SQLiteTable` to replace `Legacy...` since legacy is now only SQLite anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55903376",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55903376",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55903376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTAzMzc2",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T14:39:49Z",
    "updated_at": "2014-09-17T14:39:49Z",
    "author_association": "MEMBER",
    "body": "@mangecoeur good to have your intput! (I wanted to ask it as you wrote part of the current code base (also @danielballan I think?), but you already did) \nI will try to comment later more in depth, but a question: regarding to the subclassing/adapting functionality, can you give some concrete use cases? (maybe some code you have lying around that uses PandasSQLTable?) To see if we can improve things to make this easier/more modular. Some customizations you could want to do that I think of now:\n- providing a custom `meta` object is easy -> just create a `PandasSQLEngine(engine, meta=meta)`\n- providing custom `Table` object: you can do this by overwriting the automatically generated table property `PandasSQLTable.table = my_custom_table` I suppose?\n- adapting type conversion routines: you have to overwrite `_sqlalchemy_type` I suppose. However, this is not really a type conversion, only to specify the SQLAlchemy type in the Table. And this is also not that user friendly if you just want to adapt one type (you have to redefine the whole function)\n\nDo you have other use cases?\n\nI think we should try to add an 'advanced' section in the docs to give some examples of these use cases.\n\nAnd indeed, for solely specifying a `schema`, you don't need to specify a custom meta object anymore, this is handled by the `schema` keyword (as this is probably the biggest use-case for having to modify the meta)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55905905",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55905905",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55905905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTA1OTA1",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T14:55:04Z",
    "updated_at": "2014-09-17T14:55:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \nsome use cases for altering the internals of SQLEngine or SQLTable\n- force a specific type conversion, e.g. float to int because of incorrect incoming data\n- create custom object columns for some type (on the fly parsing)\n- handle functionality specific to a given DB backend, such as Postgres HStore, that would never go into the generic implementation\n- Create a custom engine handler that can run queries in parallel\n- Support a DB cluster\n- create a custom SQLTable class that could be mapped to a Join, a View\n- create a custom SQLTable that returns a data stream instead\n\nI'm sure there is more and we don't have to implement any of this, just make sure that you can swap out one or the other of Engine or Table without it blowing up in your face, and that overriding in sub-classes is reasonably straightforward.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55912024",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55912024",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55912024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEyMDI0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T15:32:51Z",
    "updated_at": "2014-09-17T15:32:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur +1 on all of those conversions, except the first/second. They user should simply cast the frame as appropriate.  Many ways to do this and should not be specific to SQL.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55912608",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55912608",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55912608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEyNjA4",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T15:36:36Z",
    "updated_at": "2014-09-17T15:36:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I think someone will find the need for both the first and second, never underestimate how weird someone's use case might be. \n\nThe point however is we don't need to care whether they do or not, just that we make the system reasonably easy to subclass and customize. If people want to make something completely ridiculous with it afterwards its up to them :P\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55915135",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55915135",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55915135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTE1MTM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T15:52:49Z",
    "updated_at": "2014-09-17T15:52:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur yes, people do have odd things they try to do!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55919033",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55919033",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55919033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTE5MDMz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T16:17:40Z",
    "updated_at": "2014-09-17T16:17:40Z",
    "author_association": "MEMBER",
    "body": "@mangecoeur The problem is, I think we _have_ to care what people would do with it, as otherwise we could easily break things.\n\nSo I think we will have to outline some typical advanced usage case, and test for them (and document them). Because along the way af adding features/modifying the internals of SQLTable, we can certainly break such usage cases if they rely on the specific implementation in the internals. \nE.g. the example I gave of providing a custom Table. In the way I said above (`SQLTable.table = my_custom_table`). I think this will not work anymore with current master, because of the way the meta object is handled.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55919620",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-55919620",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 55919620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTE5NjIw",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T16:21:31Z",
    "updated_at": "2014-09-17T16:21:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche true, so we need to make an internal api that will be modular and stable and easy to replace. Cant say what that might be without diving in, no time just now, hopefully soon...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57438602",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-57438602",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 57438602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDM4NjAy",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-01T09:19:41Z",
    "updated_at": "2014-10-01T09:19:41Z",
    "author_association": "MEMBER",
    "body": "I think, for 0.15, I will try to do some of the renaming (SQLDatabase, SQLTable, ..), as we agree on this I think (and then the old names don't linger on longer than needed). The other things discussed here will then be for a next release.\n\n@artemyk I also think the distinction between Database and Table is good, but trying to abstract the differences between sqlalchemy and sqlite away I think would maybe be a good idea, as it is now sometimes difficult to add something without duplicating a lot of code. Using something like a backend class would possibly a way, you can always try something and see how things work out. It is however not yet fully clear what would be the difference with the existing PandasSQLAlchemy and PandasSQLLegacy (or it would split the current class in mode (sqlalchemy/sqlite) specific things and more general methods like to_sql/read_sql?)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57457341",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-57457341",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 57457341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDU3MzQx",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-01T12:44:10Z",
    "updated_at": "2014-10-01T12:44:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "This sounds good to me, @jorisvandenbossche. Sorry to offering minimal input -- defending my thesis this fall!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57527196",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-57527196",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 57527196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTI3MTk2",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-01T19:53:30Z",
    "updated_at": "2014-10-01T19:53:30Z",
    "author_association": "MEMBER",
    "body": "@danielballan good luck! knock 'em dead!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57600092",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-57600092",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 57600092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjAwMDky",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-02T08:51:04Z",
    "updated_at": "2014-10-02T08:51:04Z",
    "author_association": "MEMBER",
    "body": "@danielballan good luck! \nI put up #8440 with some of the renaming. Should there be deprecations of the old names? I did not do it now, as it were not yet publicized functions in the docs, but someone thinks it is needed, I can add this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59258288",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7960#issuecomment-59258288",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7960",
    "id": 59258288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjU4Mjg4",
    "user": {
      "login": "artemyk",
      "id": 833768,
      "node_id": "MDQ6VXNlcjgzMzc2OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/833768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/artemyk",
      "html_url": "https://github.com/artemyk",
      "followers_url": "https://api.github.com/users/artemyk/followers",
      "following_url": "https://api.github.com/users/artemyk/following{/other_user}",
      "gists_url": "https://api.github.com/users/artemyk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/artemyk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/artemyk/subscriptions",
      "organizations_url": "https://api.github.com/users/artemyk/orgs",
      "repos_url": "https://api.github.com/users/artemyk/repos",
      "events_url": "https://api.github.com/users/artemyk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/artemyk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T19:04:51Z",
    "updated_at": "2014-10-15T19:04:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback @jorisvandenbossche I made an initial stab at reorganizing the backend code in #8562 .  It eliminates some redundancy and now `SQLTable` does not depend on the backend-type anymore (Instead `SQLDatabase` and `SQLiteDatabase` handle all the dependencies).  Thoughts?\n"
  }
]
