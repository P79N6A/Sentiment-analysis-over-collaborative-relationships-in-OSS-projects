[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/406648486",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-406648486",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 406648486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjY0ODQ4Ng==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T16:11:52Z",
    "updated_at": "2018-07-20T16:11:52Z",
    "author_association": "MEMBER",
    "body": "Well there is a parameter for `skip_blank_lines` which is `True` by default, but setting it to `False` didn't change your example which seems off.\r\n\r\nInvestigation and PRs certainly welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/406672628",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-406672628",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 406672628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjY3MjYyOA==",
    "user": {
      "login": "dahlbaek",
      "id": 30782351,
      "node_id": "MDQ6VXNlcjMwNzgyMzUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/30782351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dahlbaek",
      "html_url": "https://github.com/dahlbaek",
      "followers_url": "https://api.github.com/users/dahlbaek/followers",
      "following_url": "https://api.github.com/users/dahlbaek/following{/other_user}",
      "gists_url": "https://api.github.com/users/dahlbaek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dahlbaek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dahlbaek/subscriptions",
      "organizations_url": "https://api.github.com/users/dahlbaek/orgs",
      "repos_url": "https://api.github.com/users/dahlbaek/repos",
      "events_url": "https://api.github.com/users/dahlbaek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dahlbaek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T17:35:09Z",
    "updated_at": "2018-07-20T21:04:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think `skip_blank_lines` is related to truly blank lines, not lines that contain separator characters. Consider\r\n\r\n```\r\nfrom io import StringIO\r\nimport pandas as pd\r\nfilepath_or_buffer = StringIO(\"a,b\\n\\n\\n1,2\")\r\npd.read_csv(filepath_or_buffer)\r\n```\r\n\r\nas opposed to\r\n\r\n```\r\nfrom io import StringIO\r\nimport pandas as pd\r\nfilepath_or_buffer = StringIO(\"a,b\\n,\\n,\\n1,2\")\r\npd.read_csv(filepath_or_buffer)\r\n```\r\n\r\nor\r\n\r\n```\r\nfrom io import StringIO\r\nimport pandas as pd\r\nfilepath_or_buffer = StringIO(\"a,b\\n\\n\\n1,2\")\r\npd.read_csv(filepath_or_buffer, skip_blank_lines=False)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/406723661",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-406723661",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 406723661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjcyMzY2MQ==",
    "user": {
      "login": "dahlbaek",
      "id": 30782351,
      "node_id": "MDQ6VXNlcjMwNzgyMzUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/30782351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dahlbaek",
      "html_url": "https://github.com/dahlbaek",
      "followers_url": "https://api.github.com/users/dahlbaek/followers",
      "following_url": "https://api.github.com/users/dahlbaek/following{/other_user}",
      "gists_url": "https://api.github.com/users/dahlbaek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dahlbaek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dahlbaek/subscriptions",
      "organizations_url": "https://api.github.com/users/dahlbaek/orgs",
      "repos_url": "https://api.github.com/users/dahlbaek/repos",
      "events_url": "https://api.github.com/users/dahlbaek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dahlbaek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T20:52:31Z",
    "updated_at": "2018-07-20T20:52:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess this is what `git-blame` is for! Related: #5298\r\n\r\nAs far as I can tell, this had to do with supporting the output format of `pandas.DataFrame.to_csv`. I dusted off an old version of pandas and ran the following:\r\n```python\r\ndf = pd.DataFrame([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]],\r\n               index=['one', 'two'],\r\n               columns=pd.MultiIndex.from_tuples(\r\n                   [('a', 'q'), ('a', 'r'), ('a', 's'),\r\n                    ('b', 't'), ('c', 'u'), ('c', 'v')]))\r\nprint(result.to_csv(), \"\\npandas version:\", pd.__version__)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n,a,a,a,b,c,c\r\n,q,r,s,t,u,v\r\n,,,,,,\r\none,1,2,3,4,5,6\r\ntwo,7,8,9,10,11,12\r\n\r\npandas version: 0.14.0\r\n```\r\n\r\nWhen running the same code on master, I get\r\n```\r\n,a,a,a,b,c,c\r\n,q,r,s,t,u,v\r\none,1,2,3,4,5,6\r\ntwo,7,8,9,10,11,12\r\n\r\npandas version: 0.24.0.dev0+332.g1f6ddc4\r\n```\r\n\r\nLooks like this 'feature' is no longer needed, right?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/406724353",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-406724353",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 406724353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjcyNDM1Mw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T20:55:29Z",
    "updated_at": "2018-07-20T20:55:29Z",
    "author_association": "MEMBER",
    "body": "Thanks for the investigation. I would agree with you that the \"feature\" in question is not necessary. PRs welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/406726303",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-406726303",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 406726303,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjcyNjMwMw==",
    "user": {
      "login": "dahlbaek",
      "id": 30782351,
      "node_id": "MDQ6VXNlcjMwNzgyMzUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/30782351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dahlbaek",
      "html_url": "https://github.com/dahlbaek",
      "followers_url": "https://api.github.com/users/dahlbaek/followers",
      "following_url": "https://api.github.com/users/dahlbaek/following{/other_user}",
      "gists_url": "https://api.github.com/users/dahlbaek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dahlbaek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dahlbaek/subscriptions",
      "organizations_url": "https://api.github.com/users/dahlbaek/orgs",
      "repos_url": "https://api.github.com/users/dahlbaek/repos",
      "events_url": "https://api.github.com/users/dahlbaek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dahlbaek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T21:02:54Z",
    "updated_at": "2018-07-20T21:02:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great, I'll give it a go then!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/406802834",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-406802834",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 406802834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgwMjgzNA==",
    "user": {
      "login": "dahlbaek",
      "id": 30782351,
      "node_id": "MDQ6VXNlcjMwNzgyMzUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/30782351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dahlbaek",
      "html_url": "https://github.com/dahlbaek",
      "followers_url": "https://api.github.com/users/dahlbaek/followers",
      "following_url": "https://api.github.com/users/dahlbaek/following{/other_user}",
      "gists_url": "https://api.github.com/users/dahlbaek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dahlbaek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dahlbaek/subscriptions",
      "organizations_url": "https://api.github.com/users/dahlbaek/orgs",
      "repos_url": "https://api.github.com/users/dahlbaek/repos",
      "events_url": "https://api.github.com/users/dahlbaek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dahlbaek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-21T15:10:23Z",
    "updated_at": "2018-07-21T15:27:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is not as clear cut as i had hoped. Modifying the above example to\r\n\r\n```python\r\ndf = pd.DataFrame([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]],\r\n               index=pd.Index(['one', 'two'], name='index_name'),\r\n               columns=pd.MultiIndex.from_tuples(\r\n                   [('a', 'q'), ('a', 'r'), ('a', 's'),\r\n                    ('b', 't'), ('c', 'u'), ('c', 'v')]))\r\nprint(df.to_csv())\r\n```\r\n\r\nyields the output\r\n\r\n```\r\n,a,a,a,b,c,c\r\n,q,r,s,t,u,v\r\nindex_name,,,,,,\r\none,1,2,3,4,5,6\r\ntwo,7,8,9,10,11,12\r\n```\r\n\r\nThus, the current behaviour seems to be that `DataFrame.to_csv` will change the output format according to the presence of the `name`/`names` attribute of `DataFrame.index`. However, `pandas.read_csv` cannot know how to correctly parse csv files then. Consider\r\n\r\n```python\r\ndf_nan = pd.DataFrame(\r\n    data=[[np.NaN, np.NaN], [1, 2]],\r\n    index=pd.MultiIndex.from_tuples([\r\n        ('first', 'foo'),\r\n        ('second', 'bar'),\r\n    ]),\r\n)\r\nprint(\r\n    \"dataframe:\", df_nan,\r\n    \"\\ncsv representation:\", df_nan.to_csv(),\r\n    \"\\nroundtrip dataframe:\", pd.read_csv(StringIO(df_nan.to_csv()), index_col=[0, 1]),\r\n    sep=\"\\n\",\r\n)\r\n```\r\n\r\nwhich outputs\r\n\r\n```\r\ndataframe:\r\n              0    1\r\nfirst  foo  NaN  NaN\r\nsecond bar  1.0  2.0\r\n\r\ncsv representation:\r\n,,0,1\r\nfirst,foo,,\r\nsecond,bar,1.0,2.0\r\n\r\n\r\nroundtrip dataframe:\r\n                     0    1\r\n       Unnamed: 1\r\nfirst  foo         NaN  NaN\r\nsecond bar         1.0  2.0\r\n```\r\n\r\nSuprisingly, the output changes if a multiindex is supplied for the header:\r\n\r\n```python\r\ndf_nan = pd.DataFrame(\r\n    data=[[np.NaN, np.NaN], [1, 2]],\r\n    index=pd.MultiIndex.from_tuples([\r\n        ('first', 'foo'),\r\n        ('second', 'bar'),\r\n    ]),\r\n    columns=pd.MultiIndex.from_tuples([\r\n        ('a', 'baz'),\r\n        ('b', 'baz'),\r\n    ]),\r\n)\r\nprint(\r\n    \"dataframe:\", df_nan,\r\n    \"\\ncsv representation:\", df_nan.to_csv(),\r\n    \"\\nroundtrip dataframe:\", pd.read_csv(StringIO(df_nan.to_csv()),\r\n                                          index_col=[0, 1],\r\n                                          header=[0,1]),\r\n    sep=\"\\n\",\r\n)\r\n```\r\noutputs\r\n\r\n```\r\ndataframe:\r\n              a    b\r\n            baz  baz\r\nfirst  foo  NaN  NaN\r\nsecond bar  1.0  2.0\r\n\r\ncsv representation:\r\n,,a,b\r\n,,baz,baz\r\nfirst,foo,,\r\nsecond,bar,1.0,2.0\r\n\r\n\r\nroundtrip dataframe:\r\n              a    b\r\n            baz  baz\r\nfirst  foo\r\nsecond bar  1.0  2.0\r\n```\r\n\r\nNote that this is still not the parsing I would expect; here pandas is interpreting the third line as a `names` attribute for the index multiindex.\r\n\r\nTo me, the default settings are surprising. As far as I can tell, the problem is that the csv format is not sufficiently rich to naturally encode the `name`/`names` attributes of multiindices. In view of that, the behaviour I would expect is:\r\n\r\nWhen outputting to csv with a multiindex header, pandas strips `name`/`names` attributes, as if the function\r\n```python\r\ndef strip_level_names(df):\r\n    df_copy = df.copy()\r\n    index = df_copy.index\r\n    header = df_copy.columns\r\n    if issubclass(type(index), pd.MultiIndex):\r\n        index = pd.MultiIndex.from_tuples(list(index))\r\n    elif issubclass(type(index), pd.Index):\r\n        index = pd.Index(list(index))\r\n    if issubclass(type(header), pd.MultiIndex):\r\n        header = pd.MultiIndex.from_tuples(list(header))\r\n    elif issubclass(type(header), pd.Index):\r\n        header = pd.Index(list(header))\r\n    return pd.DataFrame(data=df_copy.values, index=index, columns=header)\r\n\r\n```\r\nhad been called before `to_csv`. Setting a keyword parameter `level_names=True` changes the behaviour such that the output contains header and index `name`/`names` by always including an extra row for the index `name`/`names` (similar to current functionality, but explicit and tuneable instead of implicit). Similarly, `read_csv` would support a `level_names` keyword, in order to determine how to parse csv files.\r\n\r\nThis way the behaviour would be completely predictable, with the `level_names` keyword allowing the user to opt-in for pandas specific formating to include index level `name`/`names` if necessary."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/406805403",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-406805403",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 406805403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgwNTQwMw==",
    "user": {
      "login": "dahlbaek",
      "id": 30782351,
      "node_id": "MDQ6VXNlcjMwNzgyMzUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/30782351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dahlbaek",
      "html_url": "https://github.com/dahlbaek",
      "followers_url": "https://api.github.com/users/dahlbaek/followers",
      "following_url": "https://api.github.com/users/dahlbaek/following{/other_user}",
      "gists_url": "https://api.github.com/users/dahlbaek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dahlbaek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dahlbaek/subscriptions",
      "organizations_url": "https://api.github.com/users/dahlbaek/orgs",
      "repos_url": "https://api.github.com/users/dahlbaek/repos",
      "events_url": "https://api.github.com/users/dahlbaek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dahlbaek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-21T15:49:59Z",
    "updated_at": "2018-07-21T15:53:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, here's the behaviour I would expect:\r\n\r\nInput:\r\n\r\n```python\r\ndf = pd.DataFrame(\r\n    data=[[np.NaN, np.NaN], [1, 2]],\r\n    index=pd.MultiIndex.from_tuples([\r\n        ('first', 'foo'),\r\n        ('second', 'bar'),\r\n    ]),\r\n)\r\nprint(df.to_csv())\r\n```\r\n\r\nOutput (no change needed):\r\n\r\n```\r\n,,0,1\r\nfirst,foo,,\r\nsecond,bar,1.0,2.0\r\n```\r\n\r\nInput:\r\n\r\n```python\r\ndf = pd.DataFrame(\r\n    data=[[np.NaN, np.NaN], [1, 2]],\r\n    index=pd.MultiIndex.from_tuples(\r\n        [\r\n            ('first', 'foo'),\r\n            ('second', 'bar'),\r\n        ],\r\n        names=[\"lvl_0\", \"lvl_1\"]\r\n    ),\r\n    columns=[\"a\", \"b\"]\r\n)\r\nprint(df.to_csv())\r\n```\r\n\r\nOutput (no change needed): \r\n\r\n```\r\nlvl_0,lvl_1,a,b\r\nfirst,foo,,\r\nsecond,bar,1.0,2.0\r\n```\r\n\r\nInput:\r\n\r\n```python\r\ndf = pd.DataFrame(\r\n    data=[[np.NaN, np.NaN], [1, 2]],\r\n    index=pd.MultiIndex.from_tuples(\r\n        [\r\n            ('first', 'foo'),\r\n            ('second', 'bar'),\r\n        ],\r\n    ),\r\n    columns=pd.MultiIndex.from_tuples(\r\n        [\r\n            (\"a\", \"A\"),\r\n            (\"b\", \"A\"),\r\n        ]\r\n    )\r\n)\r\nprint(df.to_csv())\r\n```\r\n\r\nOutput (no change needed):\r\n\r\n```\r\n,,a,b\r\n,,A,A\r\nfirst,foo,,\r\nsecond,bar,1.0,2.0\r\n```\r\n```python\r\nprint(df.to_csv(level_names=True))\r\n```\r\n\r\nOutput (change needed):\r\n\r\n```\r\n,,a,b\r\n,,A,A\r\n,,,\r\nfirst,foo,,\r\nsecond,bar,1.0,2.0\r\n```\r\n\r\n\r\nInput:\r\n\r\n```python\r\ndf = pd.DataFrame(\r\n    data=[[np.NaN, np.NaN], [1, 2]],\r\n    index=pd.MultiIndex.from_tuples(\r\n        [\r\n            ('first', 'foo'),\r\n            ('second', 'bar'),\r\n        ],\r\n        names=[\"idx_lvl_0\", \"idx_lvl_1\"],\r\n    ),\r\n    columns=pd.MultiIndex.from_tuples(\r\n        [\r\n            (\"a\", \"A\"),\r\n            (\"b\", \"A\"),\r\n        ],\r\n        names=[\"hdr_lvl_0\", \"hdr_lvl_1\"],\r\n    )\r\n)\r\nprint(df.to_csv())\r\n```\r\n\r\nOutput (change needed):\r\n\r\n```\r\n,,a,b\r\n,,A,A\r\nfirst,foo,,\r\nsecond,bar,1.0,2.0\r\n```\r\n\r\n```python\r\nprint(df.to_csv(level_names=True))\r\n```\r\n\r\nOutput (change needed):\r\n\r\n```\r\nhdr_lvl_0,,a,b\r\nhdr_lvl_1,,A,A\r\nidx_lvl_0,idx_lvl_1,,\r\nfirst,foo,,\r\nsecond,bar,1.0,2.0\r\n```\r\n\r\nIn the other direction, I would expect `pd.read_csv` with appropriate values for `header`, `index_col` and `level_names` to correctly reconstruct the original dataframes from the csv output (possibly omitting level names according to situation, but never failing to reconstruct the data itself)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407570289",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-407570289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 407570289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU3MDI4OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-24T22:17:43Z",
    "updated_at": "2018-07-24T22:17:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dahlbaek I am not sure why you are trying to make csv a high-fidelity format, its not. You have to do the best you can with the options and data in the file. We 'write' this format, why should we not read it?\r\n\r\ncc @gfyoung "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407571328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-407571328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 407571328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU3MTMyOA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-24T22:22:26Z",
    "updated_at": "2018-07-24T22:22:30Z",
    "author_association": "MEMBER",
    "body": "Yeah...missing data situations are likely to introduce corner cases here and there.  @dahlbaek : welcome to investigate and see, but be careful to not introduce too make special cases."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407607157",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21995#issuecomment-407607157",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21995",
    "id": 407607157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzYwNzE1Nw==",
    "user": {
      "login": "dahlbaek",
      "id": 30782351,
      "node_id": "MDQ6VXNlcjMwNzgyMzUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/30782351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dahlbaek",
      "html_url": "https://github.com/dahlbaek",
      "followers_url": "https://api.github.com/users/dahlbaek/followers",
      "following_url": "https://api.github.com/users/dahlbaek/following{/other_user}",
      "gists_url": "https://api.github.com/users/dahlbaek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dahlbaek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dahlbaek/subscriptions",
      "organizations_url": "https://api.github.com/users/dahlbaek/orgs",
      "repos_url": "https://api.github.com/users/dahlbaek/repos",
      "events_url": "https://api.github.com/users/dahlbaek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dahlbaek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T01:52:40Z",
    "updated_at": "2018-07-25T09:25:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I'm not sure what you mean that csv is not a high-fidelity format. As far as I know, it is the main workhorse format for import/export used by postgres for instance, see [COPY](https://www.postgresql.org/docs/10/static/sql-copy.html) and [Populating a Database](https://www.postgresql.org/docs/10/static/populate.html#POPULATE-COPY-FROM). This happens to be a usecase that is relevant to my interests, as I sometimes want to move data between pandas and postgres . What formats do you consider high-fidelity?\r\n\r\n@jreback @gfyoung Of course it is entirely up to you which csv formats `pandas` should accept/support, and `pandas` is great whichever one(s) you pick.\r\n\r\nHowever:\r\n\r\nI do believe that the csv family is a main workhorse for a lot of data analysis today—not least because so many tools can read and write csv files (like… well… `pandas`). I would wager that to many users of `pandas`, the csv format is the main language that `pandas` uses to communicate with the outside world. As such, I do think there is good reason to support the more 'standard' dialects, and a great place to start seems to be the [Frictionless Data Tabular Specification](https://frictionlessdata.io/specs/tabular-data-resource/). Which, of course, `pandas` already supports to a high degree!\r\n\r\nQuoting the [`Readme.md`](https://github.com/pandas-dev/pandas), `pandas`…\r\n\r\n> has the broader goal of becoming the most powerful and flexible open source data analysis / manipulation tool available in any language.\r\n\r\nI should think that robust and predictable handling of the most classical and wide spread open data format is a prerequisite in order to achieve that goal!\r\n\r\nJust to make my point of view completely clear: I am not proposing that `pandas` should not be able to encode level names in csv files. I am proposing that header/index level names should be encoded in a consistent and predictable manner, or not at all. This *is* possible. The `pandas` specific format (with index level names in the row following the header row(s)) *is* consistent and predictable (and `pandas` does use this output format sometimes). Similarly, the more 'standard' format where level names of the header/index is omitted *is* consistent and predictable (and `pandas` does use this output format sometimes). But mixing the two formats without providing a keyword argument (or a hint in the docs) for the user inevitably leads to unexpected behaviour.\r\n\r\nPerhaps a middle ground could just be a section in the `read_csv`/`to_csv` docstrings describing how one might ensure consistent csv input/output (without any source code changes), coupled with tests that enforce that precise consistent behaviour?"
  }
]
