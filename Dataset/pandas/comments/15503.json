[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/282506768",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15503#issuecomment-282506768",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15503",
    "id": 282506768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjUwNjc2OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-25T19:33:28Z",
    "updated_at": "2017-02-25T19:33:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "So this is quite a lot of work to actually create a separate MI type of index to do this. The bottleneck is not indexing anyhow. Its the reshaping.\r\n\r\n```\r\ndiff --git a/pandas/core/reshape.py b/pandas/core/reshape.py\r\nindex 87cb088..64d89bb 100644\r\n--- a/pandas/core/reshape.py\r\n+++ b/pandas/core/reshape.py\r\n@@ -175,6 +175,7 @@ class _Unstacker(object):\r\n         return DataFrame(values, index=index, columns=columns)\r\n \r\n     def get_new_values(self):\r\n+\r\n         values = self.values\r\n \r\n         # place the values\r\n@@ -184,23 +185,26 @@ class _Unstacker(object):\r\n         result_shape = (length, result_width)\r\n \r\n         # if our mask is all True, then we can use our existing dtype\r\n-        if self.mask.all():\r\n-            dtype = values.dtype\r\n-            new_values = np.empty(result_shape, dtype=dtype)\r\n+        if self.mask.all() and len(values):\r\n+            new_values = self.sorted_values.reshape(result_shape)\r\n+            new_mask = np.ones(result_shape, dtype=bool)\r\n         else:\r\n-            dtype, fill_value = _maybe_promote(values.dtype, self.fill_value)\r\n-            new_values = np.empty(result_shape, dtype=dtype)\r\n-            new_values.fill(fill_value)\r\n-\r\n-        new_mask = np.zeros(result_shape, dtype=bool)\r\n+            new_mask = np.zeros(result_shape, dtype=bool)\r\n+            if self.mask.all():\r\n+                dtype = values.dtype\r\n+                new_values = np.empty(result_shape, dtype=dtype)\r\n+            else:\r\n+                dtype, fill_value = _maybe_promote(values.dtype, self.fill_value)\r\n+                new_values = np.empty(result_shape, dtype=dtype)\r\n+                new_values.fill(fill_value)\r\n \r\n-        # is there a simpler / faster way of doing this?\r\n-        for i in range(values.shape[1]):\r\n-            chunk = new_values[:, i * width:(i + 1) * width]\r\n-            mask_chunk = new_mask[:, i * width:(i + 1) * width]\r\n+            # is there a simpler / faster way of doing this?\r\n+            for i in range(values.shape[1]):\r\n+                chunk = new_values[:, i * width:(i + 1) * width]\r\n+                mask_chunk = new_mask[:, i * width:(i + 1) * width]\r\n \r\n-            chunk.flat[self.mask] = self.sorted_values[:, i]\r\n-            mask_chunk.flat[self.mask] = True\r\n+                chunk.flat[self.mask] = self.sorted_values[:, i]\r\n+                mask_chunk.flat[self.mask] = True\r\n \r\n         return new_values, new_mask\r\n \r\n```\r\n\r\nmakes this about 10x faster, BUT there are several cases that are failing. You are welcome to have a look at seeing if this can pass the test suite."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/282506864",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15503#issuecomment-282506864",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15503",
    "id": 282506864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjUwNjg2NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-25T19:35:08Z",
    "updated_at": "2017-02-25T19:35:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\nIn [1]: m = 100\r\n   ...: n = 1000\r\n   ...: \r\n   ...: levels = np.arange(m)\r\n   ...: index = pd.MultiIndex.from_product([levels]*2)\r\n   ...: columns = np.arange(n)\r\n   ...: values = np.arange(m*m*n).reshape(m*m, n)\r\n   ...: df = pd.DataFrame(values, index, columns)\r\n   ...: \r\n\r\nIn [2]: %timeit df.unstack()\r\n1 loop, best of 3: 289 ms per loop\r\n\r\n# with change\r\nIn [2]: %timeit df.unstack()\r\n10 loops, best of 3: 33.8 ms per loop\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/282527686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15503#issuecomment-282527686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15503",
    "id": 282527686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjUyNzY4Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-26T02:27:06Z",
    "updated_at": "2017-02-26T02:27:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@adbull ok done in #15510 \r\n\r\n(note that my final version is about 2x slower than before), because I have to do multiple reshapings to get things in the correct order. But still about 4x faster.\r\n\r\nyou generally cannot simply do a reshaping, and esp directly on ``.values`` (well you can but you have to do it by dtype; which we already handle internally), and the ordering is a bit tricky."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/282549602",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15503#issuecomment-282549602",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15503",
    "id": 282549602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjU0OTYwMg==",
    "user": {
      "login": "adbull",
      "id": 7279321,
      "node_id": "MDQ6VXNlcjcyNzkzMjE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7279321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adbull",
      "html_url": "https://github.com/adbull",
      "followers_url": "https://api.github.com/users/adbull/followers",
      "following_url": "https://api.github.com/users/adbull/following{/other_user}",
      "gists_url": "https://api.github.com/users/adbull/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adbull/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adbull/subscriptions",
      "organizations_url": "https://api.github.com/users/adbull/orgs",
      "repos_url": "https://api.github.com/users/adbull/repos",
      "events_url": "https://api.github.com/users/adbull/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adbull/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-26T11:32:07Z",
    "updated_at": "2017-02-26T11:32:07Z",
    "author_association": "NONE",
    "body": "That's awesome, thanks! I was thinking we'd need a separate type to avoid checking the index each time, but I guess that's not an issue.\r\n\r\nWith `df` as above, would it be possible to do the same for `df.T.stack()`? `df.swaplevel().sortlevel()`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/282550572",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15503#issuecomment-282550572",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15503",
    "id": 282550572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjU1MDU3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-26T11:50:04Z",
    "updated_at": "2017-02-26T11:50:04Z",
    "author_association": "CONTRIBUTOR",
    "body": ".stack and .sorting are separate issues \r\n\r\nwhy don't u profile a bit and see where the hotspots are"
  }
]
