[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470912637",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25601#issuecomment-470912637",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25601",
    "id": 470912637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDkxMjYzNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-08T12:30:45Z",
    "updated_at": "2019-03-08T12:30:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Configure CI for type checking (assuming mypy?)\r\n\r\nI think this can be started at any time, since it's independent of how the types are written.\r\n\r\n> Various PRs to start adding types (by module? Maybe good sprint material)\r\n\r\nIt'd be helpful to hear from people who have experience typing a large code base about where best to start. https://mypy.readthedocs.io/en/latest/existing_code.html provides some guidance."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/471144631",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25601#issuecomment-471144631",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25601",
    "id": 471144631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTE0NDYzMQ==",
    "user": {
      "login": "Naddiseo",
      "id": 115951,
      "node_id": "MDQ6VXNlcjExNTk1MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/115951?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Naddiseo",
      "html_url": "https://github.com/Naddiseo",
      "followers_url": "https://api.github.com/users/Naddiseo/followers",
      "following_url": "https://api.github.com/users/Naddiseo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Naddiseo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Naddiseo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Naddiseo/subscriptions",
      "organizations_url": "https://api.github.com/users/Naddiseo/orgs",
      "repos_url": "https://api.github.com/users/Naddiseo/repos",
      "events_url": "https://api.github.com/users/Naddiseo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Naddiseo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-09T04:33:51Z",
    "updated_at": "2019-03-09T04:33:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since I was asked, and I'm in the middle of annotating our codebase at $work, I'll share some of what I've learnt.\r\n\r\n> Convert existing type hints to Python 3 syntax (started in PR #25576 - is this complete?)\r\n\r\n#25576 only allowed stubgen to run on pandas to generate the .pyi files, the generated files are far from complete, most things are annotated as `Any`. It's a good starting point though to see what stubgen/mypy sees. At $work, I've been using the python3 syntax for annotating inline since I've found for my own code that maintaining .pyi outside of the code allows for drift between the .py and .pyi, and it's more files to keep track of. \r\n\r\nI've also been taking advantage of python 3.7 `from __future__ import annotations` and `if typing.TYPE_CHECKING:` to make sure that the annotations don't have a runtime overhead. It is a bit of boiler plate, but for me personally I like the trade-off. It does however mean that types using `typing.NamedTuple` and `typing.cast` need to be outside of the `if TYPE_CHECKING` block.\r\n\r\n> Configure CI for type checking (assuming mypy?)\r\n> @TomAugspurger: I think this can be started at any time, since it's independent of how the types are written.\r\n\r\nIn general I think CI typing checking a good idea, but I think it should be an \"optional\" pass while the types are being written. I enabled mypy in our CI for a project a few years ago, and it was discouraging and frustrating to get started because of all the untyped code, which then caused us to ignore it and eventually disable it. If I were to do it again, it'd make the CI linting more of a warning than and error initially, and make mypy as permissive as possible until everything was properly typed; which might take time, and may even require a mypy plugin for complex things.\r\n\r\n> * Define base typing module for pandas (array_like, dt_like, etc...)\r\n> * Various PRs to start adding types (by module? Maybe good sprint material)\r\n\r\nI can't speak to much on this since I'm not all that familiar with pandas itself, but I would expect good typing on the main data types, and the public API would be most useful for people using pandas. If thorough/correct typing on the main data types is too difficult without a plugin, perhaps `Type` or `NewType` would work initially, and they can be refined in the future.\r\n\r\nMy approach at work has been to add annotations to new functions/files, and add them to existing functions as I've had need to (if mypy complains for example). I've found that there were some very common files/classes that were used in a lot of places that I needed to annotate, and that would reduce a large percentage of the mypy errors. Mypy is pretty good at guessing types. I think the link that @TomAugspurger provided about annotating existing code bases is pretty much how I started, and has been helpful.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/471693583",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25601#issuecomment-471693583",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25601",
    "id": 471693583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTY5MzU4Mw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-11T19:44:31Z",
    "updated_at": "2019-03-11T19:44:31Z",
    "author_association": "MEMBER",
    "body": "Right now in #25622 I've whitelisted existing modules that have type annotations and made what I would consider \"simple\" updates (imports, typo fixes) to get a clean return run against those files. \r\n\r\nWhen you look at all files that have annotations, that would leave the following which are currently causing failures but probably need deeper inspection to resolve the issue:\r\n\r\n```sh\r\npandas/core/base.py\r\npandas/core/arrays/array_.py\r\npandas/core/arrays/datetimelike.py\r\npandas/core/arrays/sparse.py\r\npandas/core/arrays/period.py\r\npandas/core/arrays/integer.py\r\npandas/core/indexes/datetimelike.py\r\npandas/core/indexes/period.py\r\npandas/core/internals/blocks.py\r\n```\r\n\r\nI think each of them may need a dedicated PR(s) before adding into our whitelist, but I think that's the best go forward path to get momentum on this. Feedback welcome"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474648951",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25601#issuecomment-474648951",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25601",
    "id": 474648951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDY0ODk1MQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-20T01:33:55Z",
    "updated_at": "2019-03-20T01:34:07Z",
    "author_association": "MEMBER",
    "body": "FYI I've added a Typing label and added this as a project which might be easier to navigate than this issue. Leaving this open of course for ongoing discussions"
  }
]
