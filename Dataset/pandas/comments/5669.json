[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30170618",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-30170618",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 30170618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTcwNjE4",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-09T20:33:58Z",
    "updated_at": "2013-12-10T00:55:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "I do not think this is a bug, and the current behavior in my opinion makes more sense. 'nan' values can be valid \"actual\" values in some scenarios. the concept of an actual 'nan' value should be different from 'nan' value because of changing index. If I have a dataframe like this:\n\n```\n       A      B      C\n1  1.242    NaN  0.110\n3    NaN -0.185 -0.209\n5 -0.581  1.483    NaN\n```\n\nand i want to keep all nan as nan, it makes much more sense to have:\n\n```\n df.reindex( [2, 4, 6], method='ffill' )\n        A      B      C\n2  1.242    NaN  0.110\n4    NaN -0.185 -0.209\n6 -0.581  1.483    NaN\n```\n\n_just take whatever value there is ( nan or not nan ) and fill forward until the next available index_. This is completely different from\n\n```\ndf.reindex( [2, 4, 6], method=None )\n```\n\nwhich produces\n\n```\n    A   B   C\n2 NaN NaN NaN\n4 NaN NaN NaN\n6 NaN NaN NaN\n```\n\n**TLDR**: in reindexing a dataframe, forward flll means _just take whatever value there is ( nan or not nan ) and fill forward until the next available index_. otherwise, you have no choice but to fill 'nan' values simply because you want to reindex. Reindexing should not enforce a mandatory fillna on the data.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30170981",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-30170981",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 30170981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTcwOTgx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-09T20:38:14Z",
    "updated_at": "2013-12-09T20:38:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "`df.reindex(new_index,method=''ffill')` should be equivalent of `df.reindex(new_index).ffill()`\n\nyour middle example can be done by taking a union of the existing indices and the new, then forward-filling\n\nyou can also specify a `fill_value` if you want something other than `nan`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30171385",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-30171385",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 30171385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTcxMzg1",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-09T20:43:21Z",
    "updated_at": "2013-12-09T20:49:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \"your middle example can be done by taking a union of the existing indices and the new, then forward-filling\"\n\nwhy?! why this way?\n\njust keep reindexing as reindexing, and fillna as fillna. a \"nan\" value can be an actual valid value, when you reindex with ffill you want to take all the _actual_ values ( nan or not nan) and fill forward until the next available index.  _Reindexing should not enforce a mandatory fillna on the data._\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30172070",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-30172070",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 30172070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTcyMDcw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-09T20:51:25Z",
    "updated_at": "2013-12-09T20:51:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am not sure what you mean by this. `Reindexing should not enforce a mandatory fillna on the data.`\n\nby definition `np.nan` is the marker for missing data. you have the option to provide a `fill-forward` if you want (or not); you can also fill with a specific value (`fill_value=`). But reindexing will by definition possibly create missing values. Not sure that you can have _both_ a missing value and a `np.nan` (unless you want to swap the `nan` to something else first).\n\nFYI, this behavior has been their since as far as I can remember. It IS tested for in the context of a non-monotonic index (this is an error), but not in the general case.\n\nSeries works this way, the bug is on DataFrame which does not.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30173134",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-30173134",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 30173134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTczMTM0",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-09T21:04:09Z",
    "updated_at": "2013-12-09T21:06:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "If I want to `reindex` with `ffill` just to forward fill whatever value is in the original dataframe ( again `nan` or not `nan` ) until the next available index, but I do not want to `fillna` what should I do?\n\nwhat you are saying is that, `reindex` will do the `fillna` for me and then I have to revert that.\n\nHere is an example: `np.nan` can just mean **not applicable**; say i have hourly data, and on weekends some calculations are just not applicable. I will fill `nan` for those columns during the weekends. now if I `reindex` to finer index, say every minute, the reindex will pick the last value from Friday, and fill it out for the whole weekend. This is wrong.\n\nIf this is the behavior for the time series then maybe there shoudl be a bug report there.\n\nIf I want to `fillna` I can always call `fillna` directly.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30173506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-30173506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 30173506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTczNTA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-09T21:08:24Z",
    "updated_at": "2013-12-09T21:08:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "see here for the current docs: http://pandas.pydata.org/pandas-docs/dev/basics.html#filling-while-reindexing\nSeries currently does this, DataFrame does not\n\ncan you make your words into an example and show me what you mean?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30174979",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-30174979",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 30174979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTc0OTc5",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-09T21:25:26Z",
    "updated_at": "2013-12-09T21:25:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "say you have trade data across markets, and you are measuring the correlations across these markets: Tokyo, London, New York, Chicago.\n\nThese market open and close at different hours during the day, so for example for periods during the day you can measure `corr( New York, London )` but you just have to fill `nan` for `corr( New York, Tokyo )` at say 11am EST simply because it is not possible to measure the correlation when the market is closed.\n\nnow, if I `reindex` the time series into a different frequency( say every half hour), it should not fill out `nan` values in the dataframe at the time the market is closed. It should just forward fill whatever is in the original dataframe.\n\nis the example clear?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33698312",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-33698312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 33698312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjk4MzEy",
    "user": {
      "login": "dbew",
      "id": 6034908,
      "node_id": "MDQ6VXNlcjYwMzQ5MDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6034908?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbew",
      "html_url": "https://github.com/dbew",
      "followers_url": "https://api.github.com/users/dbew/followers",
      "following_url": "https://api.github.com/users/dbew/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbew/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbew/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbew/subscriptions",
      "organizations_url": "https://api.github.com/users/dbew/orgs",
      "repos_url": "https://api.github.com/users/dbew/repos",
      "events_url": "https://api.github.com/users/dbew/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbew/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-30T15:31:29Z",
    "updated_at": "2014-01-30T15:31:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "We came across this as well. We expected the behaviour similar to that @behzadnouri described i.e. forward fill within buckets. Hopefully the examples below explain what I mean by this.\n\n``` python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.arange(10.), index=range(10), columns=['A'])\ndf.ix[2] = np.nan\ndf.ix[5:8] = np.nan\ndf\n#     A\n# 0   0\n# 1   1\n# 2 NaN\n# 3   3\n# 4   4\n# 5 NaN\n# 6 NaN\n# 7 NaN\n# 8 NaN\n# 9   9\n\n\n# Straight reindex, no fill. Value for 2, 6 and 8 should be np.nan.\ndf.reindex(range(0, 10, 2))\n#     A\n# 0   0\n# 2 NaN\n# 4   4\n# 6 NaN\n# 8 NaN\n\n\n# reindex with ffill - current behaviour - gets the wrong value for 2.\ndf.reindex(range(0, 10, 2), method='ffill')\n#     A\n# 0   0\n# 2 NaN   # should not be NaN\n# 4   4\n# 6 NaN\n# 8 NaN\n\n\n# reindex with ffill - expected behaviour - fill within \"buckets\" - so we expect\n# value for 2 to be 1 (ffilled from 1) but values for 6, 8 to be NaN (no data to ffill).\ndf.reindex(range(0, 10, 2), method='ffill')\n#     A\n# 0   0\n# 2   1\n# 4   4\n# 6 NaN\n# 8 NaN\n\n\n# behaviour when reindexing then ffilling - note that this is different to reindex with\n# method='ffill' because we ffill *after* the reindex instead of during the reindex\n# In particular the value for 2 is now 0 not 1 and the for 6 and 8 we have value 4.\ndf.reindex(range(0, 10, 2)).ffill()\n#    A\n# 0  0\n# 2  0\n# 4  4\n# 6  4\n# 8  4\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33699664",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5669#issuecomment-33699664",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5669",
    "id": 33699664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjk5NjY0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-30T15:44:18Z",
    "updated_at": "2014-01-30T15:44:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's one way to do this; essentially your own groupby\n\n```\nIn [36]: concat([df.loc[:4].ffill(),df.loc[5:].ffill()]).reindex(range(0,10,2))\nOut[36]: \n    A\n0   0\n2   1\n4   4\n6 NaN\n8 NaN\n\n[5 rows x 1 columns]\n```\n\nAnotherway is to introduce a multindex where your data 'breaks' and treat the groups separately.\n(this is not exactly your result, but close); MultiIndex.from_product is new in 0.13.1\n\n```\nIn [55]: df.index = MultiIndex.from_product([list('ab'),list(range(5))])\n\nIn [56]: df\nOut[56]: \n      A\na 0   0\n  1   1\n  2 NaN\n  3   3\n  4   4\nb 0 NaN\n  1 NaN\n  2 NaN\n  3 NaN\n  4   9\n\n[10 rows x 1 columns]\n\nIn [54]: df.groupby(level=0).apply(lambda x: x.ffill().reset_index(drop=True).reindex(range(0,5,2))).reset_index(drop=True)\nOut[54]: \n    A\n0   0\n1   1\n2   4\n3 NaN\n4 NaN\n5   9\n\n[6 rows x 1 columns]\n```\n\nHTH\n"
  }
]
