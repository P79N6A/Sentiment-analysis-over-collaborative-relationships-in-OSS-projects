[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367952263",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19860#issuecomment-367952263",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19860",
    "id": 367952263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk1MjI2Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T09:11:19Z",
    "updated_at": "2018-02-23T09:11:19Z",
    "author_association": "MEMBER",
    "body": "@c-thiel : Thanks for reporting this!  I'm a little unclear as to what's being reported.  Is this a regression from a previous version (you said this used to be possible), or is this a general API inconsistency that you're referring to?\r\n\r\nThat aside, I do agree that the behavior does look strange."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367971330",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19860#issuecomment-367971330",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19860",
    "id": 367971330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk3MTMzMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T10:29:13Z",
    "updated_at": "2018-02-23T10:29:13Z",
    "author_association": "MEMBER",
    "body": "I don't think it is a regression from a previous version (test with 0.16, already broken there), but it is possible with `get_value`. However, this is deprecated, and we say people should use `.at` instead. So then `.at` should work correctly on this as well.\r\n\r\nThe problem comes from here:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/572476f0a3652222c17458d418a107554580eaa5/pandas/core/indexing.py#L1907-L1916\r\n\r\nwhere we do this check. But I agree the check looks to strict, as a mixed object index can indeed contain integers as well.\r\n\r\nWelcome to try to fix this (eg try removing this check, and see if some tests fail due to that).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367980306",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19860#issuecomment-367980306",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19860",
    "id": 367980306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk4MDMwNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T11:08:42Z",
    "updated_at": "2018-02-23T11:08:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah I think prob ok to remove the else check; this ultimately goes thru ``.loc`` so indexing verfication can occur there "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367980420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19860#issuecomment-367980420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19860",
    "id": 367980420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk4MDQyMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T11:09:12Z",
    "updated_at": "2018-02-23T11:09:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@c-thiel indexing with mixed dtype indexes is simply going to be slow generally."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367994925",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19860#issuecomment-367994925",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19860",
    "id": 367994925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk5NDkyNQ==",
    "user": {
      "login": "c-thiel",
      "id": 12560027,
      "node_id": "MDQ6VXNlcjEyNTYwMDI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12560027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/c-thiel",
      "html_url": "https://github.com/c-thiel",
      "followers_url": "https://api.github.com/users/c-thiel/followers",
      "following_url": "https://api.github.com/users/c-thiel/following{/other_user}",
      "gists_url": "https://api.github.com/users/c-thiel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/c-thiel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/c-thiel/subscriptions",
      "organizations_url": "https://api.github.com/users/c-thiel/orgs",
      "repos_url": "https://api.github.com/users/c-thiel/repos",
      "events_url": "https://api.github.com/users/c-thiel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/c-thiel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T12:21:11Z",
    "updated_at": "2018-02-23T12:21:11Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche Yes, this is what I was reffering to.\r\n\r\n@jreback : Regarding Performance, ``at`` is still much faster than ``loc``, especially when setting values. The setting-performance for single values is the main reason for me using the set_value and get_value functions. But also the ``get_value``, ``set_value`` functions are twice as fast as ``at`` :\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\nimport time\r\n\r\nc = ['a', 'b', 'c', 'd', 'e']\r\ndata = np.random.rand(10000, 5)\r\ndf = pd.DataFrame(data, columns=c)\r\nrows = np.random.randint(0, 9999, (100000,))\r\ncolumns = np.random.choice(c, (100000,))\r\n\r\nt = time.time()\r\nfor row, column in zip(rows, columns):\r\n    a = df.get_value(row, column)    \r\nprint(f'get_value: {time.time()-t}')\r\n\r\nt = time.time()\r\nfor row, column in zip(rows, columns):\r\n    a = df.at[row, column]    \r\nprint(f'at: {time.time()-t}')\r\n\r\nt = time.time()\r\nfor row, column in zip(rows, columns):\r\n    a = df.loc[row, column]    \r\nprint(f'loc: {time.time()-t}')\r\n\r\nt = time.time()\r\nfor row, column in zip(rows, columns):\r\n    df.at[row, column] = 4\r\nprint(f'set at: {time.time()-t}')\r\n\r\nt = time.time()\r\nfor row, column in zip(rows, columns):\r\n    df.loc[row, column] = 5\r\nprint(f'set loc: {time.time()-t}')\r\n\r\nt = time.time()\r\nfor row, column in zip(rows, columns):\r\n    df.set_value(row, column, 4)\r\nprint(f'set_value: {time.time()-t}')\r\n```\r\n```\r\nget_value: 0.257692813873291\r\nat: 0.52744460105896\r\nloc: 0.7349758148193359\r\nset at: 0.687880277633667\r\nset loc: 11.664336204528809\r\nset_value: 0.3008086681365967\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367995950",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19860#issuecomment-367995950",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19860",
    "id": 367995950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk5NTk1MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T12:26:18Z",
    "updated_at": "2018-02-23T12:26:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@c-thiel setting individual values in a loop is non-idiomatic. set_value/get_value were deprecated because they didn't properly handle *any* edge cases nor had any type safetly whatsoever. Correct is much much better then wrong but *slightly* faster."
  }
]
