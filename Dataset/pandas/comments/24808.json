[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454899455",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454899455",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 454899455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDg5OTQ1NQ==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T19:02:48Z",
    "updated_at": "2019-01-16T19:11:54Z",
    "author_association": "NONE",
    "body": "Hello @pinakibose! Thanks for updating the PR.\n\n\n\n\n\nCheers ! There are no PEP8 issues in this Pull Request. :beers: \n\n##### Comment last updated on January 16, 2019 at 19:11 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454908465",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454908465",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 454908465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDkwODQ2NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T19:29:30Z",
    "updated_at": "2019-01-16T19:29:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "can u show a real use case with and w/o this function"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454910782",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454910782",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 454910782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDkxMDc4Mg==",
    "user": {
      "login": "pinakibose",
      "id": 46754634,
      "node_id": "MDQ6VXNlcjQ2NzU0NjM0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46754634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinakibose",
      "html_url": "https://github.com/pinakibose",
      "followers_url": "https://api.github.com/users/pinakibose/followers",
      "following_url": "https://api.github.com/users/pinakibose/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinakibose/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinakibose/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinakibose/subscriptions",
      "organizations_url": "https://api.github.com/users/pinakibose/orgs",
      "repos_url": "https://api.github.com/users/pinakibose/repos",
      "events_url": "https://api.github.com/users/pinakibose/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinakibose/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T19:36:07Z",
    "updated_at": "2019-01-16T19:36:07Z",
    "author_association": "NONE",
    "body": "Here is an example I added to the test suite:\r\n```\r\nPoint = collections.namedtuple('Point', ['x', 'y'])\r\nptser = pd.Series([Point(1, 2), Point(3, 7)])\r\n```\r\n\r\nWith this method, we can write:\r\n```\r\nptser.getattr('x')\r\n```\r\n\r\nWithout this method, we would have to write:\r\n```\r\nptser.map(operator.attrgetter('x'))\r\n```\r\n\r\n...and even then it wouldn't work if `ptser` has `None` or `np.nan` in it:\r\n```\r\nptser = pd.Series([Point(1, 2), Point(3, 7), None])\r\nptser.map(operator.attrgetter('x'))  # won't work\r\nptser.getattr('x')  # NaN where missing\r\n```\r\n\r\nA `Point` class is admittedly a little contrived, but this method would be a lot more useful for more complex objects with attributes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454913180",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454913180",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 454913180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDkxMzE4MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T19:43:08Z",
    "updated_at": "2019-01-16T19:43:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the most compelling use cases are already covered by the existing\naccessors.\n\nIn the case of the Point example, I'd argue that `None` isn't a good\nmissing value indicator for that type. It'd be better to use Point(nan,\nnan).\n\nPersonally, I've OK with users writing `.map(lambda x: getattr(x, 'x',\nNone))`, as it's clear what happens if the getattr fails. It's not clear\nwhat\nthe default value would be for a generic Series.getattr.\n\nOn Wed, Jan 16, 2019 at 1:36 PM pinakibose <notifications@github.com> wrote:\n\n> Here is an example I added to the test suite:\n>\n> Point = collections.namedtuple('Point', ['x', 'y'])\n> ptser = pd.Series([Point(1, 2), Point(3, 7)])\n>\n> With this method, we can write:\n>\n> ptser.getattr('x')\n>\n> Without this method, we would have to write:\n>\n> ptser.map(operator.attrgetter('x'))\n>\n> ...and even then it wouldn't work if ptser has None or np.nan in it:\n>\n> ptser = pd.Series([Point(1, 2), Point(3, 7), None])\n> ptser.map(operator.attrgetter('x'))  # won't work\n> ptser.getattr('x')  # NaN where missing\n>\n> A Point class is admittedly a little contrived, but this method would be\n> a lot more useful for more complex objects with attributes.\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454910782>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIo4xESo7_w_xl1LtBHQw6tCB-b2pks5vD38tgaJpZM4aDvO2>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454921650",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454921650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 454921650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDkyMTY1MA==",
    "user": {
      "login": "pinakibose",
      "id": 46754634,
      "node_id": "MDQ6VXNlcjQ2NzU0NjM0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46754634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinakibose",
      "html_url": "https://github.com/pinakibose",
      "followers_url": "https://api.github.com/users/pinakibose/followers",
      "following_url": "https://api.github.com/users/pinakibose/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinakibose/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinakibose/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinakibose/subscriptions",
      "organizations_url": "https://api.github.com/users/pinakibose/orgs",
      "repos_url": "https://api.github.com/users/pinakibose/repos",
      "events_url": "https://api.github.com/users/pinakibose/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinakibose/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T20:08:21Z",
    "updated_at": "2019-01-16T20:09:10Z",
    "author_association": "NONE",
    "body": "Would it make more sense if a `default=nan` parameter were included?\r\n\r\nI mainly see this from a readability perspective. I personally often end up with DataFrames full of objects from other modules, and I think `foo_series.getattr('bar.baz')` is a little more readable and robust to missing values than `foo_series.map(lambda x: x.bar.baz)`, especially when when I'm accustomed to seeing `foo.bar.baz` from working with a single objects.\r\n\r\nTo make things look nicer, I've sometimes monkey-patched `pd.Series` like this:\r\n```\r\npd.Series.getattr = lambda S, x: S.apply(operator.attrgetter(x))\r\n```\r\n\r\nI'm wondering if anyone else would benefit from this piece of syntactic sugar when working with `Series`s full of non-Pandas objects."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454923127",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454923127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 454923127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDkyMzEyNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T20:13:39Z",
    "updated_at": "2019-01-16T20:13:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm sure some people would benefit from and appreciate it, but we need to\nbalance that against the cost of every new method. Each method makes pandas\nharder to learn and remember how to use.\n\nOn Wed, Jan 16, 2019 at 2:08 PM pinakibose <notifications@github.com> wrote:\n\n> Would it make more sense if a default=nan parameter were included?\n>\n> I mainly see this from a readability perspective. I personally often end\n> up with DataFrames full of objects from other modules, and I think\n> foo_series.getattr('bar.baz') is a little more readable than foo_series.map(lambda\n> x: x.bar.baz), especially when when I'm accustomed to seeing foo.bar.baz\n> from working with a single objects.\n>\n> To make things look nicer, I've sometimes monkey-patched pd.Series like\n> this:\n>\n> pd.Series.getattr = lambda S, x: S.apply(operator.attrgetter(x))\n>\n> I'm wondering if anyone else would benefit from this piece of syntactic\n> sugar when working with Seriess full of non-Pandas objects.\n>\n> â€”\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454921650>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIjfifmElsptFw2mfXt8Szd1_l6uMks5vD4a6gaJpZM4aDvO2>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454927875",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-454927875",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 454927875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDkyNzg3NQ==",
    "user": {
      "login": "pinakibose",
      "id": 46754634,
      "node_id": "MDQ6VXNlcjQ2NzU0NjM0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46754634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinakibose",
      "html_url": "https://github.com/pinakibose",
      "followers_url": "https://api.github.com/users/pinakibose/followers",
      "following_url": "https://api.github.com/users/pinakibose/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinakibose/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinakibose/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinakibose/subscriptions",
      "organizations_url": "https://api.github.com/users/pinakibose/orgs",
      "repos_url": "https://api.github.com/users/pinakibose/repos",
      "events_url": "https://api.github.com/users/pinakibose/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinakibose/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T20:27:37Z",
    "updated_at": "2019-01-16T20:27:37Z",
    "author_association": "NONE",
    "body": "Understood. Thank you for considering."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/455488744",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-455488744",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 455488744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ4ODc0NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T09:50:26Z",
    "updated_at": "2019-01-18T09:50:26Z",
    "author_association": "MEMBER",
    "body": "Note that `map` also has a keyword to deal with missing values, in case your function cannot:\r\n\r\n```\r\nIn [34]: ptser = pd.Series([Point(1, 2), Point(3, 7), None])                    \r\n\r\nIn [35]: ptser.map(operator.attrgetter('x'), na_action='ignore')                \r\nOut[35]: \r\n0    1.0\r\n1    3.0\r\n2    NaN\r\ndtype: float64\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/455529041",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24808#issuecomment-455529041",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24808",
    "id": 455529041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTUyOTA0MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T12:23:16Z",
    "updated_at": "2019-01-18T12:23:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing as would bloat the API"
  }
]
