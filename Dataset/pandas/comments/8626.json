[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60443415",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60443415",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60443415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDQzNDE1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-24T20:19:21Z",
    "updated_at": "2014-10-24T20:19:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, the second part `to_frame()` converting back to object is a bug (it should remain a categorical)\n\nI am not sure I buy the first part. If you want to see if you can 'fix' and demonstrate that would help.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60450425",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60450425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60450425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDUwNDI1",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-24T21:15:38Z",
    "updated_at": "2014-10-24T21:15:38Z",
    "author_association": "NONE",
    "body": "Actually, there are several issues. I only had the impression that they are somehow related in the sense that it makes a difference whether I use `dtype=pd.core.common.CategoricalDtype`or `dtype='category`. But in fact for `to_frame()` this doesn't matter and removes the categorical either way.\n\nMy main problem is this\n\n``` python\ndf=pd.DataFrame(list('abc'), columns=['A'])\ndf['A'] = df['A'].astype('category')\ndf.to_records()\n```\n\nResult:\n\n```\n[...]\n//anaconda/envs/pd15/lib/python2.7/site-packages/pandas-0.15.0_20_g2737f5a-py2.7-macosx-10.5-x86_64.egg/pandas/core/common.pyc in __bytes__(self)\n    163         Yields a bytestring in both py2/py3.\n    164         \"\"\"\n--> 165         from pandas.core.config import get_option\n    166 \n    167         encoding = get_option(\"display.encoding\")\n\nTypeError: data type not understood\n```\n\nI have no problems when converting as follows:\n\n``` python\ndf['A'] = df['A'].astype(pd.core.categorical.Categorical)\ndf.to_records()\n```\n\nThe same is true for `pd.DataFrame(list('abc'), dtype='category')` which I discovered only coincidently when I was about to prepare a minimal example to report this supposedly `to_records` issue; I usually don't use `dtype='category'` in the df constructor.\n\nAnother example which shows it is not only related to `to_records`:\n\n``` python\ndf['A'] = df['A'].astype(pd.core.common.CategoricalDtype)\npd.lib.fast_zip([df.A.values, df.B.values])\n```\n\n... works as expected.\n\n``` python\ndf['A'] = df['A'].astype('category')\npd.lib.fast_zip([df.A.values, df.B.values])\n```\n\n... returns:\n\n```\n...\n//anaconda/envs/pd15/lib/python2.7/site-packages/pandas-0.15.0_20_g2737f5a-py2.7-macosx-10.5-x86_64.egg/pandas/lib.so in pandas.lib.fast_zip (pandas/lib.c:9860)()\n\nSystemError: numpy/core/src/multiarray/iterators.c:370: bad argument to internal function\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60461654",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60461654",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60461654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDYxNjU0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-24T23:22:12Z",
    "updated_at": "2014-10-24T23:22:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "you realize that using to_ records() defeats the entire purpose of categorical as numpy cannot support this\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60470827",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60470827",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60470827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDcwODI3",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-25T04:04:58Z",
    "updated_at": "2014-10-25T04:04:58Z",
    "author_association": "NONE",
    "body": "Sure, but I don't see point. Most `to_...` methods decode categoricals, but obviously there are reasons to use them.\n\nIronically I came across this issue when creating factor/key variables from multiple columns:\n\n``` python\npd.factorize(df.to_records())\n```\n\nBut I ended up using `pd.lib.fast_zip` anyway, which is less convenient but faster by an order of magnitude:\n\n``` python\npd.factorize(pd.lib.fast_zip([df[c].values for c in df.columns]))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60470955",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60470955",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60470955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDcwOTU1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-25T04:11:51Z",
    "updated_at": "2014-10-25T04:11:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "by your reply I am confused \n\nto_records gives you a structured array \nthe only thing you could do with a categorical is make it into a regular object array\nthe back end has to support the categorical - in fact NO back ends currently support it and only HDF5 will actually be able to reproduce it faithfully \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60487509",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60487509",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60487509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDg3NTA5",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-25T16:06:16Z",
    "updated_at": "2014-10-25T16:06:16Z",
    "author_association": "NONE",
    "body": "Sorry for the confusion.\n\nJust to make sure: the main issue here is the inconsistency between using `pandas.core.common.CategoricalDtype` and its alias `'category'` for various functions (e.g. `to_records`) and the fact the using `'category'` sometimes triggers exceptions. IMO these exceptions are bugs. But reading your comments above and on my request (#8633) for graceful degradation behavior for categorical conversion in general, makes be believe you consider the exceptions are intentional.\n\nBut if this is the case and you think `to_records` shouldn't work for categoricals and raising `TypeError: data type not understood` is correct, then `to_records` should also fail for `pandas.core.common.CategoricalDtype`, right?\n\nBut instead\n\n``` python\ndf=pd.DataFrame(list('abc'), columns=['A'])\ndf['A'] = df['A'].astype('category')\ndf.to_records()\nOut[...]\n...\nTypeError: data type not understood\n```\n\nWhereas\n\n```\ndf['A'] = df['A'].astype(pd.core.categorical.Categorical)\ndf.to_records()\nOut[...]\nrec.array([(0, 'a'), (1, 'b'), (2, 'c')], \n      dtype=[('index', '<i8'), ('A', 'O')])\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60488029",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60488029",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60488029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDg4MDI5",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-25T16:20:31Z",
    "updated_at": "2014-10-25T16:20:31Z",
    "author_association": "NONE",
    "body": "Oh wait, it seems the reason for the inconsistency is even more weird. The second call of `.astype(pd.core.categorical.Categorical)` converts back to object.\n\n``` python\ndf=pd.DataFrame(list('abc'), columns=['A'])\ndf['A'] = df['A'].astype(pd.core.categorical.Categorical)\ndf.to_records()\n...\nTypeError: data type not understood\ndf['A'] = df['A'].astype(pd.core.categorical.Categorical)\ndf.to_records()\nrec.array([(0, 'a'), (1, 'b'), (2, 'c')], \n      dtype=[('index', '<i8'), ('A', 'O')])\ndf['A'] = df['A'].astype(pd.core.categorical.Categorical)\ndf.to_records()\n...\nTypeError: data type not understood\n```\n\n `.astype('category')` is - as expected - idempotent on categoricals.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60489070",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60489070",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60489070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDg5MDcw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-25T16:53:16Z",
    "updated_at": "2014-10-25T16:53:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer \n\nin the other thread, I was refering specifically to serialization/deserilization to other formats (e.g. `to_*`), that are actual formats, e.g. `hdf,csv,stata,msgpack` (NotImplemented)\n\nwhile `to_records` is a bug, an is a conversion issue (this is a subtle point here). I agree this should simply coerce (and that's what this issue is about).\n\nFurther, you shoulld never need touch the actual `CategoricalDtype` object directly, and simply use `'category'` (they should be interchangeable and if not that's a bug).\n\nThe reason we released categorical is its simply impossible to catch ALL possible cases. This is a massive addition and I think we got most, but that's why its helpful for you to find bugs! (which turn into tests and will get fixed for 0.15.1)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60489388",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60489388",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60489388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDg5Mzg4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-25T17:04:15Z",
    "updated_at": "2014-10-25T17:04:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I realize u r using pd.core.categorical.Category as a dtype\nthat is undefined! (the dtype is CategoricalDtype)\n\nCategorical is the actual object\n\ntechnically it's actually ok and doesn't actually raise (nor does Numpy when u do this) - but prob should simply raise as its not correct at all\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60589986",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-60589986",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 60589986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTg5OTg2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-27T13:14:47Z",
    "updated_at": "2014-10-27T13:14:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer so #8652 \nshould fix all 3 issues that you brought up (in future, FYI, its better to put check boxes in the top so can keep track).\n\npls test and lmk.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62283106",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62283106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62283106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjgzMTA2",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T23:25:04Z",
    "updated_at": "2014-11-08T23:25:04Z",
    "author_association": "NONE",
    "body": "Sorry for the late reply - `to_records` works, `pd.lib.fast_zip` still (0.15.1-1-g66a0a74) doesn't.\n\n``` python\ndf=pd.DataFrame(np.random.choice(list(u'abcde'), 20).reshape(10, 2),\n    columns=list(u'AB'))\npd.lib.fast_zip([df.A.values, df.B.values])\n```\n\n```\n[...]\narray([(u'c', u'b'), (u'e', u'a'), (u'c', u'b'), (u'd', u'e'),\n       (u'e', u'a'), (u'a', u'a'), (u'a', u'e'), (u'e', u'e'),\n       (u'e', u'c'), (u'e', u'a')], dtype=object)\n```\n\n``` python\ndf=pd.DataFrame(np.random.choice(list(u'abcde'), 20).reshape(10, 2),\n    columns=list(u'AB'))\nfor col in df.columns: df[col] = df[col].astype('category')\npd.lib.fast_zip([df.A.values, df.B.values])\n```\n\n```\n[...]\nSystemError: numpy/core/src/multiarray/iterators.c:370: bad argument to internal function\n```\n\nBut perhaps that's a different issue.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62283196",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62283196",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62283196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjgzMTk2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T23:28:16Z",
    "updated_at": "2014-11-08T23:28:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "that's an internal routine\nI wouldn't expect it to work\nyou have to present an ndarray to it\nwhy are you using it?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62283239",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62283239",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62283239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjgzMjM5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T23:29:37Z",
    "updated_at": "2014-11-08T23:29:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "if u really want to use it\nyou can do\ndf.A.get_values() which is guaranteed to give u an ndarray\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62301597",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62301597",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62301597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzAxNTk3",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T12:23:16Z",
    "updated_at": "2014-11-09T12:23:16Z",
    "author_association": "NONE",
    "body": "Oh, wasn't aware of the subtle difference between `values` and `get_values()`. Think, it's also not obvious from the [doc](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.get_values.html). Gotcha.\n\nI use `pd.lib.fast_zip` as input for `pd.factorize` (see comment above .. 15 days ago), since there is no `DataFrame.factorize()`, but only `Series.factorize()` (btw: why?):\n\n``` python\ndf['gid'], grps =pd.factorize(pd.lib.fast_zip([df.A.get_values(), df.B.get_values()]))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62302330",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62302330",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62302330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzAyMzMw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T12:50:47Z",
    "updated_at": "2014-11-09T12:50:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer I like that you are finding bugs in `Categoricals`! But you should never have to use `.values/.get_values()` or any routines internally. `get_values()` for all intents is a completely internal routine, and the user should never need use it.\n\nyou can do:\n\n`Dataframe.apply(lamda x: x.factorize())`\n\nor if you really want to factorize all values\n\n`pd.factorize(DataFrame.values.ravel())`\n\nnote that using `.values` on a DataFrame coerces to a compatible dtype, so by definition be careful.\n\nanother approach is to simply construct the series and then factorize,\n\n`(df.A.append(df.B.append)).factorize()`\n\nbut really why are you factorizing directly?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62404318",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62404318",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62404318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDA0MzE4",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-10T15:54:04Z",
    "updated_at": "2014-11-10T15:54:04Z",
    "author_association": "NONE",
    "body": "Seems, we're a bit in a loop. So let me explain a bit more detailed.\n\nUpfront the general question: **Why factorizing directly?**\nI need multi-column factorization in the sense of creating an integer id (while keeping the mapping key<->value-combinations separately) for every unique combination of values across multiple columns of a DataFrame (not necessary all columns!) for various use cases: Custom data cleansing/deduplication algorithms on column subsets (no primary key -> generate primary key candidates), DWH-like splitting of large aggregated data into fact tables/frames and dimension tables, preprocessing for Machine Learning algorithms (clustering, classification). For some of these use cases it's possible to use groupby-apply/transform, but not always.\n\nNow: **Why using the sketched technical approach?**\nThe current approach is basically a cascade of workarounds and I'm aware that I'm partially using internal functions. Step by step:\n- Ideally, there would be a `DataFrame.factorize()` method, but there is only `Series.factorize()`. So I was searching for a workaround and discovered `pd.factorize()`\n- Unfortunately `pd.factorize()` does not take a DataFrame or ndarray (with n>1) either, so I have to \"emulate\" and pack n columns into a single column.\n- My first approach for this packing was to use `DataFrame.to_records()`. This was the original trigger for this issue, because `to_records` failed for categorical columns (side note: although factorize and categoricals are related, they are not in this context, it just happened to be that I had categoricals for the some of columns over which I factorized).\n- Since `DataFrame.to_records()` was broken for categoricals and is quite slow anyway, I searched for an alternative and found `pd.lib.fast_zip` which is really fast but being a zip function requires to split the DataFrame beforehand.\n- Next issue: `pd.lib.fast_zip` doesn't take an array of series', which is the reason I used `.values`. And `.values` is part of the [API reference](http://pandas.pydata.org/pandas-docs/version/0.15.1/api.html) which makes me wonder that you state \"you should never have to use .values [...]\". I'd say you have to use `.values` whenever you leave pandas land (or enter pandas twilight zone -> `pd.lib.fast_zip`, `pd.factorize`), need pure Numpy data structures and DataFrame/Series are not coerced to suitable dtypes automatically, right?\n- So, `pd.lib.fast_zip([df.A.values, df.B.values])` would work if A/B do not contain categoricals, i.e. `df['A'] = df['A'].astype('category'); pd.lib.fast_zip([df.A.values, df.B.values])` raises `SystemError: numpy/core/src/multiarray/iterators.c:370: bad argument to internal function`. \n- This is what I reported two days ago. You replied with a recommendation to use \"`df.A.get_values()` which is guaranteed to give u an ndarray\". I haven't used `get_values()` before but indeed this works als for categoricals. In your last comment you now wrote \"`get_values()` for all intents is a completely internal routine, and the user should never need use it.\". That's what I meant with we're in a loop at the beginning.\n\nTo sum up, the following workaround now works:\n\n``` python\npd.factorize(pd.lib.fast_zip([df[col].get_values() for col in factorize_cols]))\n```\n\nI don't see how your proposals are equivalent alternatives to what I'm doing:\n- `Dataframe.apply(lambda x: x.factorize())` applies `factorize` for each Series _separately_.\n- `pd.factorize(DataFrame.values.ravel())` treats the DataFrame as one single Series.\n\nBut if you provide a `DataFrame.factorize()` method such that I can simply do ...\n\n``` python\ndf[factorize_cols].factorize()\n```\n\n... then I promise that I'll keep my hands off internal functions .. for now.\n\nAs a general remark regarding \"categorical bug reporting\". I'm not sitting here being overly eager to find as many categoricals bugs as possible and therefore also testing all internal functions. It's just that having categoricals is really beneficial for my work such that for some tasks I'm currently working directly on the development/master pandas branch. By that I just stumble across the issues and report them without distinguishing between issues with supposedly internal functions and official API functions but just report any inconsistencies I come across. And I think it is really important that categoricals behave consistently with other dtypes such that you can get just the extra benefits of categoricals without breaking existing code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62466172",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62466172",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62466172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDY2MTcy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-10T22:17:57Z",
    "updated_at": "2014-11-10T22:17:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "can u show me a small example of what you are wanting\n\nit seems that u simply want a categorical for a few selected columns that have the same categories?\n\ngive me a complete concrete example and I'll show you how you should do it\n\nall of the functionary is there now (or if not we'll see what we can do)\n\nDataFrame.factoriize() doesn't make sense but maybe your example will shed some light\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62476040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62476040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62476040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDc2MDQw",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-10T23:30:49Z",
    "updated_at": "2014-11-10T23:30:49Z",
    "author_association": "NONE",
    "body": "Probably it would be better to open a new issue: \"ENH: DataFrame.factorize()\" but here you go ...\n\n| firstname | lastname | city | login_date |\n| --- | --- | --- | --- |\n| John | Doe | London | 2013-01-02 |\n| John | Doe | Berlin | 2013-11-02 |\n| Peter | Doe | London | 2013-11-03 |\n| John | Doe | London | 2014-02-02 |\n| John | Doe | Berlin | 2014-04-28 |\n\n``` python\ndf['user_id_1'], labels_1 = df[['firstname', 'lastname']].factorize()\ndf['user_id_2'], labels_2 = df[['firstname', 'lastname', 'city']].factorize()\ndf\n```\n\n| user_id_1 | user_id_2 | firstname | lastname | city | login_date |\n| --- | --- | --- | --- | --- | --- |\n| 1 | 1 | John | Doe | London | 2013-01-02 |\n| 1 | 2 | John | Doe | Berlin | 2013-11-02 |\n| 2 | 3 | Peter | Doe | London | 2013-11-03 |\n| 1 | 1 | John | Doe | London | 2014-02-02 |\n| 1 | 2 | John | Doe | Berlin | 2014-04-28 |\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62476181",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62476181",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62476181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDc2MTgx",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-10T23:32:00Z",
    "updated_at": "2014-11-10T23:37:19Z",
    "author_association": "MEMBER",
    "body": "A small example as far as I understand (@fkaufer correct me if I am wrong!)\n\n```\nIn [41]: df = pd.DataFrame({'A':['a1','a1','a2','a2','a1'], 'B':['b1','b2','b1','b2','b1']})\n\nIn [42]: df\nOut[42]: \n    A   B\n0  a1  b1\n1  a1  b2\n2  a2  b1\n3  a2  b2\n4  a1  b1\n\nIn [43]: cols_as_tuples = pd.lib.fast_zip([df[col].get_values() for col in df.columns])\n\nIn [44]: cols_as_tuples \nOut[44]: array([('a1', 'b1'), ('a1', 'b2'), ('a2', 'b1'), ('a2', 'b2'), ('a1', 'b1')], dtype=object)\n\nIn [47]: pd.factorize(cols_as_tuples)\nOut[47]: \n(array([0, 1, 2, 3, 0]),\n array([('a1', 'b1'), ('a1', 'b2'), ('a2', 'b1'), ('a2', 'b2')], dtype=object))\n\nIn [48]: pd.Categorical(cols_as_tuples)\nOut[48]: \n[(a1, b1), (a1, b2), (a2, b1), (a2, b2), (a1, b1)]\nCategories (4, object): [(a1, b1) < (a1, b2) < (a2, b1) < (a2, b2)]\n\nIn [59]: pd.Categorical(df.to_records(index=False))\nOut[59]: \n[(a1, b1), (a1, b2), (a2, b1), (a2, b2), (a1, b1)]\nCategories (4, object): [(a1, b1) < (a1, b2) < (a2, b1) < (a2, b2)]\n```\n\nSo, @jreback, @fkaufer wants to make categories based on values as the full rows (combined values of all (or a selection of the) columns), a bit like `df.drop_duplicates` also regards the full rows as entities to check uniqueness.\n\n@fkaufer I think this is a more uncommon operation, and I don't know if pandas should provide a built-in way to do this (I am not fully convinced that `df.factorize()` should do this. UPDATE: hmm, maybe this does make sense ..). \nBut given that, I think your solution (as I used it in the example above) seems quite good. The question is maybe if there should be some kind of `to_array_of_tuples` method (some wrapper around `fast_zip`, as is also used in `DataFrame.duplicated`)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62479905",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62479905",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62479905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDc5OTA1",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-11T00:06:13Z",
    "updated_at": "2014-11-11T00:07:11Z",
    "author_association": "NONE",
    "body": "`DataFrame.factorize()` makes as much sense as `DataFrame.groupby()` and  `DataFrame.drop_duplicates()`/`DataFrame.duplicated()` make sense. The difference is just, that you want to deal with the groups (group ids) without (direct) aggregation/dropping and preserve the data frame structure.\n\n@jorisvandenbossche I do not agree that this is uncommon. Generating ids for a column subset is an important preprocessing step for a lot of algorithms doing duplicate detection, clustering, classification, association rule mining, functional/inclusion dependency detection, etc. It is even more useful when dealing with denormalized dirty data which I would say is pandas' bread-and-butter business.\n\nStata has `egen ... group` for that purpose:\n\n``` stata\negen user_id = group(firstname lastname city)\n```\n\nhttp://www.stata.com/support/faqs/data-management/creating-group-identifiers/\n\nIn R I would to something like\n\n``` R\ntransform(df, user_id = as.numeric(interaction(firstname lastname city, drop=TRUE)))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62483360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62483360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62483360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDgzMzYw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-11T00:42:33Z",
    "updated_at": "2014-11-11T00:47:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer \n\nSee #8709 for an idea to how to represent this. A 2-d categorical will represent this well (with tuples for categories). Will think about this for CategoricalIndex as well (which this would be natural at).\n\nBut this works now\n\n```\nIn [36]: df\nOut[36]: \n    A   B\n0  a1  b1\n1  a1  b2\n2  a2  b1\n3  a2  b2\n4  a1  b1\n\nIn [37]: columns = ['A','B']\n\n\nIn [50]: index = MultiIndex.from_arrays([df[col] for col in columns ])\n\nIn [51]: index\nOut[51]: \nMultiIndex(levels=[[u'a1', u'a2'], [u'b1', u'b2']],\n           labels=[[0, 0, 1, 1, 0], [0, 1, 0, 1, 0]],\n           names=[u'A', u'B'])\n\nIn [52]: index.unique()\nOut[52]: array([('a1', 'b1'), ('a1', 'b2'), ('a2', 'b1'), ('a2', 'b2')], dtype=object)\n\nIn [53]: pd.factorize(index.values)\nOut[53]: \n(array([0, 1, 2, 3, 0]),\n array([('a1', 'b1'), ('a1', 'b2'), ('a2', 'b1'), ('a2', 'b2')], dtype=object))\n\n```\n\nI suppose could make a cookbook entry for this. @fkaufer how are you then using the factorized values?\n\nAnd here's the big difference between `groupby/drop_duplicates...etc`.\n\nThese don't preseve the structure! Instead they are an aggregation across a dimension (here some columns). I suppose you could make a `DataFrame.factorize()` to do this (or just have `pd.factorize()` handle this). I am still not understanding what you are going to DO with this.\n\nBelieve me, all for a better function/way to do X. But what is X here?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62537168",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62537168",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62537168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTM3MTY4",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-11T11:55:56Z",
    "updated_at": "2014-11-11T11:58:52Z",
    "author_association": "NONE",
    "body": "I'm wondering a bit why the use cases are not obvious, but I'll try elaborate on the \"X\" factor asap with an example.\n\nIn general the use cases are algorithms working on groups/value-combinations, so clustering in the broadest sense (I threw in some buzzwords in a comment above: \"algorithms doing duplicate detection, clustering, classification, association rule mining, functional/inclusion dependency detection, etc.\"). Most ML algorithms for clustering and classification work on numeric values or at least it's faster to work on numeric/integer values instead of dealing with records potentially containing lengthy strings. So encodings of records is an important step.\n\n> And here's the big difference between groupby/drop_duplicates...etc.\n> These don't preseve the structure!\n\nYes exactly, that's what I said. For the use cases mentioned I want to keep the structure, partially because I want to work on many (potentially overlapping) groups in parallel.\n\nRegarding your proposal. The result is equivalent, but I'm not convinced and here is why:\n\n``` python\n%timeit pd.factorize(pd.MultiIndex.from_arrays([df[columns]]))\n1 loops, best of 3: 1.33 s per loop\n\n# has not worked for categoricals, but is fixed now, see #8652\n%timeit pd.factorize(df.to_records())\n1 loops, best of 3: 1.42 s per loop\n\n# still does not work for categoricals!\n%timeit pd.lib.fast_zip([df[c].values for c in columns])\n10 loops, best of 3: 99.8 ms per loop\n\n# necessary when columns contain categoricals\n%timeit pd.lib.fast_zip([df[c].get_values() for c in columns])\n10 loops, best of 3: 99.4 ms per loop\n\n# further alternatives possible with groupby.groups/groupby.indices\n```\n\nActually I favor `pd.factorize(df.to_records())` with respect to syntax but it's too slow. My workarounds with `fast_zip` are fast, but are inconvenient and look like workarounds, use internals and at least the `.values` subvariant is brittle.\n\nRecall: this brittleness or more precise this inconsistency when using categoricals in some of the columns of a df is the actual topic of this issue, i.e. having categoricals in my data broke my workarounds for `df.factorize()`. Not having `df.factorize()` is of course not a bug but a new feature. I think a PR for `DataFrame.factorize()` using `pd.lib.fast_zip` is almost trivial, main effort is providing a test suite ... and initializing \"X\" of course.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62537917",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62537917",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62537917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTM3OTE3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-11T12:04:18Z",
    "updated_at": "2014-11-11T12:04:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer \n\njust show what you are doing with the results of factorize\nan example of why you need it  - he above shows why it might be nice to implement but you repeated you explanation - I want to see code that uses the RESULTS of it\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62543125",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8626#issuecomment-62543125",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8626",
    "id": 62543125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTQzMTI1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-11T12:58:20Z",
    "updated_at": "2014-11-11T12:58:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer the reason I keep asking questions is that I want to know you flow better\nI think .factorize() can easily be added but I am trying to figure out if there is a larger operation at work here\n"
  }
]
