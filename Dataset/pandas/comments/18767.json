[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351470595",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351470595",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351470595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ3MDU5NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T17:55:25Z",
    "updated_at": "2017-12-13T17:55:25Z",
    "author_association": "MEMBER",
    "body": "Wow, detailed proposal!\r\n\r\nFirst question that comes to my mind: why is it needed to be included in pandas (from technical point of view). Or to put it differently: what is currently in `pandas_ip` not working with storing the externally defined block in a pandas Series / DataFrame?\r\n\r\nE.g. in geopandas the GeometryBlock can be stored in a Series as well, the main reason we have the subclasses GeoSeries and GeoDataFrame is to add a bunch of additional methods (but which could be solved with an accessor).\r\n(I have to be honest: there are still some other methods we need to override to get everything working (like `isna`), but having yet another library with an external defined block might be an extra driver to fix those in pandas, like I fixed already a few things to get concat working with external blocks)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351471924",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351471924",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351471924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ3MTkyNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T18:00:07Z",
    "updated_at": "2017-12-13T18:00:07Z",
    "author_association": "MEMBER",
    "body": "For example, I see you list concat and indexing in the notebook as things that don't work. However, if you define the correct method on your block, concatting Series objects should work, and basic indexing should work as well."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351472798",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351472798",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351472798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ3Mjc5OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T18:03:05Z",
    "updated_at": "2017-12-13T18:07:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> what is currently in pandas_ip not working with storing the externally defined block in a pandas Series / DataFrame?\r\n\r\nUnless I'm missing something, there isn't a good way stuff an arbitrary \"thing\" into the regular `Series` / `DataFrame` constructors and have it work:\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\npi\r\nIn [2]: import pandas_ip as ip\r\n\r\nIn [3]: arr = ip.IPAddress.from_pyints([1, 2])\r\n\r\nIn [4]: arr\r\nOut[4]: <IPAddress(['0.0.0.1', '0.0.0.2'])>\r\n\r\nIn [5]: pd.Series(arr)\r\nOut[5]:\r\n0    <IPAddress(['0.0.0.1', '0.0.0.2'])>\r\ndtype: object\r\n```\r\n\r\nAFAICT, the only way to do this from outside pandas is to construct blocks directly and use fastpath\r\n\r\n```python\r\nIn [8]: pd.Series(ip.IPBlock(arr, slice(0, 1)), pd.RangeIndex(2), fastpath=True)\r\nOut[8]:\r\n0    0.0.0.1\r\n1    0.0.0.2\r\ndtype: ip\r\n```\r\n\r\nSo an alternative to my proposal would be to make something like `In[8]` possible, with a bit less of pandas internals coming through.\r\n\r\n(edited a bug in my example)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351474374",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351474374",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351474374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ3NDM3NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T18:08:49Z",
    "updated_at": "2017-12-13T18:08:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I could imagine coming up with an interface where if an object passed to the interface satisfies it, we dispatch *some* of the `DataFrame` / `Series` constructor behavior to the object. In https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351472798, `In[5]` does the \"wrong\" thing since it casts it to NumPy. But, if the object passed in satisfies some interface so that pandas can determine\r\n\r\n- the length (2)\r\n- the type (`ip`, which is a NumPy or PyArrow dtype)\r\n- various other things I'm sure\r\n\r\nThen pandas can (maybe) figure out the right thing to do. To be clear, I'd be *more* than satisfied if we can make this solution work."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351500884",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351500884",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351500884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTUwMDg4NA==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T19:44:46Z",
    "updated_at": "2017-12-13T20:34:32Z",
    "author_association": "MEMBER",
    "body": "I was actually thinking about this yesterday, but in the context of `Interval` and `IntervalIndex`: there are situations where people care more about ranges of IP Addresses than a singular IP Address, either as the traditional IP Network groupings, or custom ranges of addresses.  Seems like it would be nice to have good compatibility between IP Addresses and `Interval`/`IntervalIndex` for this, if not custom extensions of these, depending on how much customization there is.\r\n\r\nObviously a bit of work would need to be done on IP Addresses and `Interval`/`IntervalIndex` individually before trying to combine them, but it might be a good idea to consider compatibility between the two during initial design/implementation.  Haven't scoped out the details of this much at all, so maybe  `Interval`/`IntervalIndex` aren't appropriate for what I'm describing, but I think there should be some way of working with logical groups of IP Addresses.  I'd classify this as more of a \"nice to have\" than something that'd need to be present in the initial implementation though.\r\n\r\nAdditionally, the PostgreSQL docs might be useful as an additional reference/another perspective in general:\r\n  - [Network Address Types in Postgres](https://www.postgresql.org/docs/current/static/datatype-net-types.html)\r\n  - [Network Address Functions and Operators in Postgres](https://www.postgresql.org/docs/current/static/functions-net.html)\r\n "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351520244",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351520244",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351520244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTUyMDI0NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T20:59:20Z",
    "updated_at": "2017-12-13T20:59:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated the original with some information on why doing this outside pandas is (currently) difficult, but I'd be happy to work on making that smoother.\r\n\r\n@jschendel, yes I was just reading through https://docs.python.org/3/howto/ipaddress.html#defining-networks on this. I'm not especially familiar with the network side of things, so I'm not sure what that would look like.\r\n\r\nAnd good call on using Postgres for design inspiration."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351840811",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351840811",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351840811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg0MDgxMQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T21:27:15Z",
    "updated_at": "2017-12-14T21:27:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not opposed to having an IP type in pandas, but does seem like it could be an interesting case to try develop an \"extension block API\" around,  i.e., you do something like subclass `Block` and `ExtensionDtype` and through metaclass registration or whatever, everything works!\r\n\r\nThat said, I really don't know our own internal interfaces well enough to know if this is feasible without massive refactoring or even a good idea."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351843624",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351843624",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351843624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg0MzYyNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T21:38:23Z",
    "updated_at": "2017-12-14T21:38:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW, I plan to experiment with defining an interface through ABCs next\nweek. I'll update with how that turns out.\n\nOn Thu, Dec 14, 2017 at 3:27 PM, chris-b1 <notifications@github.com> wrote:\n\n> I'm not opposed to having an IP type in pandas, but does seem like it\n> could be an interesting case to try develop an \"extension block API\"\n> around, i.e., you do something like subclass Block and ExtensionDtype and\n> through metaclass registration or whatever, everything works!\n>\n> That said, I really don't know our own internal interfaces well enough to\n> know if this is feasible without massive refactoring or even a good idea.\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351840811>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIsjr4QTqm_j2sCedSyV5WSMK7Z0Aks5tAZK4gaJpZM4RA0QJ>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351846335",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351846335",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351846335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg0NjMzNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T21:49:13Z",
    "updated_at": "2017-12-14T21:49:13Z",
    "author_association": "MEMBER",
    "body": "> Unless I'm missing something, there isn't a good way stuff an arbitrary \"thing\" into the regular Series / DataFrame constructors and have it work:\r\n\r\nYes, that is correct. That is also something with which I have struggled in geopandas. \r\n\r\nFor the short term, you could provide functional constructors like `ip.series(..)` returning a Series with ip block.\r\n\r\nBTW, the fact that it doesn't see your ip array-like as an array-like and unwraps it in a series (so getting series of length 2) feels like a bug in pandas (in `is_list_like`) (but not that it would do anything better otherwise in this case of course).\r\n\r\n> But, if the object passed in satisfies some interface so that pandas can determine\r\n\r\nAn alternative interface could be pandas checking for a `_data` attribute (or other name) that is a Block subclass instance (although you typically want to store your ip-array-like in a block, and not the block as an attribute on the array-like .., so maybe not a good idea)\r\n\r\n> I plan to experiment with defining an interface through ABCs next week. \r\n\r\nCan you explain this a bit in more detail?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351872852",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-351872852",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 351872852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg3Mjg1Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T23:59:05Z",
    "updated_at": "2017-12-14T23:59:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> feels like a bug in pandas (in is_list_like)\r\n\r\nI haven't (yet) implemented the methods to make that IP array an iterable.\r\n\r\n\r\n\r\n> >    I plan to experiment with defining an interface through ABCs next week.\r\n\r\n> Can you explain this a bit in more detail?\r\n\r\nA class (ABC or otherwise) that contains enough information for the pandas constructors to do the right thing (the `dtype`, `shape`, a block type, etc). Right now in the Series constructor we try a whole bunch of things like checking if the array is an extension type before falling back to sticking it into an object-type numpy array (this is in `_sanitize_array). "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/391203842",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-391203842",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 391203842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTIwMzg0Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-23T02:51:25Z",
    "updated_at": "2018-05-23T02:51:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing this. It's implemented in https://cyberpandas.readthedocs.io/."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/398567209",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-398567209",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 398567209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODU2NzIwOQ==",
    "user": {
      "login": "mpenning",
      "id": 36991,
      "node_id": "MDQ6VXNlcjM2OTkx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/36991?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpenning",
      "html_url": "https://github.com/mpenning",
      "followers_url": "https://api.github.com/users/mpenning/followers",
      "following_url": "https://api.github.com/users/mpenning/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpenning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpenning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpenning/subscriptions",
      "organizations_url": "https://api.github.com/users/mpenning/orgs",
      "repos_url": "https://api.github.com/users/mpenning/repos",
      "events_url": "https://api.github.com/users/mpenning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpenning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T22:32:40Z",
    "updated_at": "2018-06-19T22:32:40Z",
    "author_association": "NONE",
    "body": "@TomAugspurger the title of this issue mentions mac-addresses; I see that cyberpandas groks IPs now, but is there a solution for mac addresses?  If so, can you elaborate?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/398763262",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18767#issuecomment-398763262",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18767",
    "id": 398763262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODc2MzI2Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T14:10:03Z",
    "updated_at": "2018-06-20T14:10:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, cyberpandas has a MACArray type.\nhttps://cyberpandas.readthedocs.io/en/latest/api.html#macarray\n\nFeel free to open an issue at https://github.com/ContinuumIO/cyberpandas if\nyou have questions / issues.\n\nOn Tue, Jun 19, 2018 at 5:32 PM, Mike Pennington <notifications@github.com>\nwrote:\n\n> @TomAugspurger <https://github.com/TomAugspurger> the title of this issue\n> mentions mac-addresses; I see that cyberpandas groks IPs now, but is there\n> a solution for mac addresses? If so, can you elaborate?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/18767#issuecomment-398567209>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIvW-6fwHAYx8eAnpz85usHpqYp0Mks5t-XwPgaJpZM4RA0QJ>\n> .\n>\n"
  }
]
