[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217634965",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-217634965",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 217634965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzYzNDk2NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-07T13:29:47Z",
    "updated_at": "2016-05-07T13:29:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "This came up somewhat recently in https://github.com/pydata/pandas/issues/12464, but I don't think anything came out of it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217641201",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-217641201",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 217641201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzY0MTIwMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-07T14:29:28Z",
    "updated_at": "2016-05-07T14:29:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mdickinson this is very very common to do. The entire point of `pandas` is to turn things to `NaN` AND propogate them. \n\nIt IS possible to turn this off by having practially every deferral option to numpy wrap this in a context manager (rather than setting the global). \n\nIt would'nt be that invasive (could do it with a decorator), but adds complexity, may be somewhat non-performant, and its a fair amount of work.\n\nIf you want to give this a stab, then i'll reopen.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217702543",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-217702543",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 217702543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzcwMjU0Mw==",
    "user": {
      "login": "mdickinson",
      "id": 662003,
      "node_id": "MDQ6VXNlcjY2MjAwMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/662003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mdickinson",
      "html_url": "https://github.com/mdickinson",
      "followers_url": "https://api.github.com/users/mdickinson/followers",
      "following_url": "https://api.github.com/users/mdickinson/following{/other_user}",
      "gists_url": "https://api.github.com/users/mdickinson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mdickinson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mdickinson/subscriptions",
      "organizations_url": "https://api.github.com/users/mdickinson/orgs",
      "repos_url": "https://api.github.com/users/mdickinson/repos",
      "events_url": "https://api.github.com/users/mdickinson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mdickinson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-08T08:06:21Z",
    "updated_at": "2016-05-08T08:06:21Z",
    "author_association": "NONE",
    "body": "> The entire point of pandas is to turn things to NaN AND propogate them.\n\nSure, and that's fine when you're using Pandas to do data analysis at a command line. It's a long way from fine when you're using Pandas as a library for a couple of small tasks (in this particular case, flexible reading from .csv files) within a larger application. Then you're in the situation where one of your application dependencies has unilaterally and silently turned off NumPy warnings for the _entire_ application, oblivious to the needs of that application or any of its many other libraries. That's just rude. :-) Deciding to turn off NumPy warnings (or any warnings, for that matter) globally is a decision that should be made at application level, not at the level of one particular library.\n\nIt's interesting to compare with the `seaborn` library, where `import seaborn` changes several matplotlib settings. Again, that's a useful thing to do for the purposes of visual exploration from the command line, but you want to avoid that import-time side-effect when using `seaborn` as a library in a larger application. The seaborn folks have provided a `seaborn.apionly` module for that exact purpose, so that you do `import seaborn.apionly as sns` and any changes that have been made to the matplotlib settings elsewhere in your app are unaffected. Would something like this be possible for Pandas?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217722395",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-217722395",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 217722395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzcyMjM5NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-08T14:11:05Z",
    "updated_at": "2016-05-08T14:11:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "well this setting has existed since pandas inception. as I layed out above I don't see much gain in changing this. If you would like to make an attempt by all means.\n\n> Sure, and that's fine when you're using Pandas to do data analysis at a command line. It's a long way from fine when you're using Pandas as a library for a couple of small tasks (in this particular case, flexible\n\nyour statement is very odd. Virtually the entire user base uses pandas for data analysis. Want to drop back to some exception handling in numpy w/o using pandas seems dubious at best.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218349781",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-218349781",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 218349781,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM0OTc4MQ==",
    "user": {
      "login": "anntzer",
      "id": 1322974,
      "node_id": "MDQ6VXNlcjEzMjI5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anntzer",
      "html_url": "https://github.com/anntzer",
      "followers_url": "https://api.github.com/users/anntzer/followers",
      "following_url": "https://api.github.com/users/anntzer/following{/other_user}",
      "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions",
      "organizations_url": "https://api.github.com/users/anntzer/orgs",
      "repos_url": "https://api.github.com/users/anntzer/repos",
      "events_url": "https://api.github.com/users/anntzer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anntzer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T03:01:28Z",
    "updated_at": "2016-05-11T03:01:28Z",
    "author_association": "NONE",
    "body": "I agree that this behavior is very annoying.  Most of the time, my only use of pandas is to have a (great) implementation of groupby, and do not want other errors to pass silently.  Likewise, because seaborn depends on pandas, it is easy to end up with this change even without explicitly importing pandas.\n\nTwo possible solutions may be\n- Provide `pandas.apionly`, similar to `seaborn.apionly`.  The problem is that this is going to take a while to propagate down to other packages that depend on pandas.\n- Only change the errstate if at an interactive prompt (as defined by the presence of `sys.ps1`, not `sys.flags.interactive`, as the latter is unset when in IPython).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218397209",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-218397209",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 218397209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM5NzIwOQ==",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T08:39:29Z",
    "updated_at": "2016-05-11T08:39:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I do not believe that unilaterally modifying numpy's error-handling is a common practice. If you proposed that over at `numpy-discussion`, I think you would get some pushback. Importing `numpy.ma` used to do this for basically the same reasons, and we eventually received enough complaints about it to fix it. If you would like to propose that pandas' default settings are better than numpy's (and I am rather more sympathetic to that idea now than I was in the past), then let's change numpy's defaults so that we have consistent, documented behavior across the board.\n\nPart of the reason that you have seen only a few complaints about this behavior since pandas' inception is that it changes behavior silently. It took a couple of years after the same behavior's inception in `numpy.ma` for us to notice it and fix it too.\n\nHaving an application that has both data analysis (where NaN may mean missing data) and moderately-complicated numerical algorithms (where NaNs can appear from perfectly-clean inputs due to domain violations and other numerical errors) is not at all dubious. Most nontrivial data analysis tasks have both. [Cleaning missing data](http://pandas.pydata.org/pandas-docs/stable/missing_data.html#cleaning-filling-missing-data) first before doing the heavy numerical work of data analysis/statistics/machine learning is quite common. That's why numpy has the ability to control the FPE-handling at a pretty fine grain.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218437767",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-218437767",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 218437767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODQzNzc2Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T11:55:24Z",
    "updated_at": "2016-05-11T11:55:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "well @rkern this has been in place from < 2012 AFAICT. This IS possible, but performance of the context managers would need to be considered, and much more importantly someone to do it; are you volunteering?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218490731",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-218490731",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 218490731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODQ5MDczMQ==",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T15:14:08Z",
    "updated_at": "2016-05-11T15:14:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "In progress.\n\nIn so doing, I found another reason to avoid the fire-and-forget `np.seterr()` in favor of more fine-grained `np.errstate()`. pandas assumes that no one else has changed the settings. If someone uses `with np.errstate(invalid='raise'):` then binary comparisons will be silently wrecked.\n\n```\n[~]\n|1> import pandas\n\n[~]\n|2> df = pandas.DataFrame(dict(x=[np.nan, 1, 2]))\n\n[~]\n|3> df\n     x\n0  NaN\n1  1.0\n2  2.0\n\n[~]\n|4> df < 0\n       x\n0  False\n1  False\n2  False\n\n[~]\n|5> df > 0\n       x\n0  False\n1   True\n2   True\n\n[~]\n|6> with np.errstate(invalid='raise'): print df < 0\n      x\n0  True\n1  True\n2  True\n\n[~]\n|7> with np.errstate(invalid='raise'): print df > 0\n      x\n0  True\n1  True\n2  True\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218491630",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-218491630",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 218491630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODQ5MTYzMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T15:17:06Z",
    "updated_at": "2016-05-11T15:17:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok thanks @rkern that would be awesome!\n\nyeah I have seen that inverse case as well.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218523151",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-218523151",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 218523151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODUyMzE1MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T17:01:37Z",
    "updated_at": "2016-05-11T17:01:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback how do we envision this interacting with the internals refactor? This is kind of a gray-zone on the _defined_ behavior right now, I don't think we would want to commit to anything that could change with the refactor. \nAs an example:\n\n``` python\ns = pd.Series([1, 2, 3])\nwith np.errstate(invalid='raise'): s.reindex(range(4)) > 1\n```\n\nThat casts to float and uses the `np.nan` marker for NaN, so it raises. Post internals-refactor that should still be an int dtype, so it won't use the `np.nan` missing values, so presumably it wouldn't raise, unless pandas explicitly does so. Should we give Wes a heads up?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218531874",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-218531874",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 218531874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODUzMTg3NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T17:32:58Z",
    "updated_at": "2016-05-11T17:32:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "no @TomAugspurger I don't think it will have much of an effect. IF its done, then computation that is deferred to numpy will use a context manager to wrap the err state. That's it, as it is one now. Ideally one would have a function like:\n\n```\ndef compute_numpy(name, arr, *args, **kwargs):\n    with np.errstate(invalid='raise'):\n          return getattr(arr, name)(*args, **kwargs)\n```\n\nsomething like that. There would have to be some logic in this function to handle some of this but its not a big deal. It will mostly be isolated.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238969395",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-238969395",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 238969395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODk2OTM5NQ==",
    "user": {
      "login": "mcg1969",
      "id": 2797735,
      "node_id": "MDQ6VXNlcjI3OTc3MzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2797735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcg1969",
      "html_url": "https://github.com/mcg1969",
      "followers_url": "https://api.github.com/users/mcg1969/followers",
      "following_url": "https://api.github.com/users/mcg1969/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcg1969/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcg1969/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcg1969/subscriptions",
      "organizations_url": "https://api.github.com/users/mcg1969/orgs",
      "repos_url": "https://api.github.com/users/mcg1969/repos",
      "events_url": "https://api.github.com/users/mcg1969/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcg1969/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T19:02:04Z",
    "updated_at": "2016-08-10T19:02:04Z",
    "author_association": "NONE",
    "body": "Just hit this problem myself, I'm definitely in favor of a fix. In this case, Pandas was a dependency of another package I was using---and indeed I wasn't even using the Pandas-dependent functionality---but I was bitten by this anyway. Thanks to @rkern for working on this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/241268966",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13109#issuecomment-241268966",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13109",
    "id": 241268966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTI2ODk2Ng==",
    "user": {
      "login": "mcg1969",
      "id": 2797735,
      "node_id": "MDQ6VXNlcjI3OTc3MzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2797735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcg1969",
      "html_url": "https://github.com/mcg1969",
      "followers_url": "https://api.github.com/users/mcg1969/followers",
      "following_url": "https://api.github.com/users/mcg1969/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcg1969/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcg1969/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcg1969/subscriptions",
      "organizations_url": "https://api.github.com/users/mcg1969/orgs",
      "repos_url": "https://api.github.com/users/mcg1969/repos",
      "events_url": "https://api.github.com/users/mcg1969/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcg1969/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-21T17:02:12Z",
    "updated_at": "2016-08-21T17:02:12Z",
    "author_association": "NONE",
    "body": "This is great. @rkern thank you for the hard work!\n"
  }
]
