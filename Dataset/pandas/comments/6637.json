[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/37684129",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6637#issuecomment-37684129",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6637",
    "id": 37684129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njg0MTI5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-14T19:06:32Z",
    "updated_at": "2014-03-14T19:08:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "AFAICT this was not done for 2 reasons:\n- performance, unless you are doing a time-series operation that needs to freq no need to 'compute' it (if it is not already specified)\n- their is not an easy way to represent 'no freq' except by `None`. So you can have a freq even though it really shouldn't (I have seen this when you have 5 mon-fri days, it get's inferred to a business day freq), and thus the inferernce _can_ be a tad ambiguous (see above)\n\nmaybe @wesm has a different view\n\nanother possible reason (and the reason the tests fail) is that merge/join doesn't want this and can lead to spurios errors, e.g. joining a single day that happens to be a month-end to a 'daily' frequency, is allowed but if you already have frequency assigned then it will fail.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/37685603",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6637#issuecomment-37685603",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6637",
    "id": 37685603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njg1NjAz",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-14T19:21:44Z",
    "updated_at": "2014-03-14T19:21:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see your points, though the join thing seems more like a corner case implementation detail.\n\nOk, so pretty much I _should_ just always used `inferred_freq` in statsmodels and take the possible (one-time) performance hit. The reason for this is that `freq` is only defined if it's given when the Index is created, but even then you can't count on `freq` being defined because `freq` gets stepped on when you're resetting indices, etc. #6631.\n\nThis just seems so esoteric from a user standpoint. I.e., `freq` == `user_defined_freq` unless it's been stepped on, and `infer_freq` == always gives me something if it can. It seems like 98% of the use-cases want the latter. I'm biased to data that almost always has a sane frequency.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/37686291",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6637#issuecomment-37686291",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6637",
    "id": 37686291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njg2Mjkx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-14T19:29:20Z",
    "updated_at": "2014-03-14T19:30:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the reset case is really the issue. Say you reset, then set the index, freq is lost (and must be re-inferred), because the meta-data is not 'kept' anywhere. I suppose you could have a flag in DatetimeIndex that would 'force' inference to happen. Might make sense for statsmodels.\n\nActually the reset/set case _could_ be dealt with by caching the indexes on a reset/set. hmm.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/37687097",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6637#issuecomment-37687097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6637",
    "id": 37687097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njg3MDk3",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-14T19:37:45Z",
    "updated_at": "2014-03-14T19:37:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Right now I'm just leaning towards always using `infer_freq` (lazily) and the status quo. All the dates magic we can do requires some kind of frequency (forecast, backcasting, re-sampling, etc.). Thinking about it, dates really aren't that useful to have around without frequencies (from where I sit). I just have to remember, because it's not all that intuitive. If `infer_freq` is your performance bottleneck, then you should likely be closer to the metal anyway. Plus the vast majority of the time users load in data rather than creating a DatetimeIndex, passing in a freq. It's best if users don't have to think about frequencies and periodicities at all.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/37687492",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6637#issuecomment-37687492",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6637",
    "id": 37687492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njg3NDky",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-14T19:42:07Z",
    "updated_at": "2014-03-14T19:42:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think you will have an issue as long as you don't reset/set (or pay the penality if you do). The more I think about it the more that's the reason it doesn't do this automatically. reset/set are cheap operations and you want them to stay that way.\n"
  }
]
