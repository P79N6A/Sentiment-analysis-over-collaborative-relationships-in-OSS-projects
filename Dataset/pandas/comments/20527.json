[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377188859",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20527#issuecomment-377188859",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20527",
    "id": 377188859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzE4ODg1OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T10:09:26Z",
    "updated_at": "2018-03-29T10:09:26Z",
    "author_association": "MEMBER",
    "body": "The problem with your expected output is that some other 'containers', like a tuple, are actually allowed as an index name:\r\n\r\n```\r\nIn [45]: df = DataFrame(index=Index([1, 2, 3, 4]), columns=['A', 'B'])\r\n\r\nIn [46]: df.index = df.index.rename(('foo',))\r\n\r\nIn [47]: df.reset_index()\r\nOut[47]: \r\n   (foo,)    A    B\r\n0       1  NaN  NaN\r\n1       2  NaN  NaN\r\n2       3  NaN  NaN\r\n3       4  NaN  NaN\r\n```\r\n\r\nSo since this is already allowed, we would need to keep this behaviour. And then unpacking a list but not a tuple would also be strange I think.\r\n\r\nThat said, I think if we choose to not change this behaviour, we should raise the error earlier, and `df.index.rename(['foo'])` could already raise an error.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377192903",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20527#issuecomment-377192903",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20527",
    "id": 377192903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzE5MjkwMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T10:26:46Z",
    "updated_at": "2018-03-29T10:27:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "technically we *do* allow non-hashable things in index names. IIRC we did try to remove this in a previous PR (but was not merged). Note that we *do* require hashability in Series names. So would take a PR to raise (both on construction and renaming)\r\n\r\n```\r\nIn [3]: Series([1,2, 3], name=['foo'])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-7e95b8d7ccb6> in <module>()\r\n----> 1 Series([1,2, 3], name=['foo'])\r\n\r\n~/pandas/pandas/core/series.py in __init__(self, data, index, dtype, name, copy, fastpath)\r\n    272         generic.NDFrame.__init__(self, data, fastpath=True)\r\n    273 \r\n--> 274         self.name = name\r\n    275         self._set_axis(0, index, fastpath=True)\r\n    276 \r\n\r\n~/pandas/pandas/core/generic.py in __setattr__(self, name, value)\r\n   4398             object.__setattr__(self, name, value)\r\n   4399         elif name in self._metadata:\r\n-> 4400             object.__setattr__(self, name, value)\r\n   4401         else:\r\n   4402             try:\r\n\r\n~/pandas/pandas/core/series.py in name(self, value)\r\n    391     def name(self, value):\r\n    392         if value is not None and not is_hashable(value):\r\n--> 393             raise TypeError('Series.name must be a hashable type')\r\n    394         object.__setattr__(self, '_name', value)\r\n    395 \r\n\r\nTypeError: Series.name must be a hashable type\r\n```\r\n\r\nso will repurpose this issue"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377231560",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20527#issuecomment-377231560",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20527",
    "id": 377231560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzIzMTU2MA==",
    "user": {
      "login": "arminv",
      "id": 13618953,
      "node_id": "MDQ6VXNlcjEzNjE4OTUz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13618953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arminv",
      "html_url": "https://github.com/arminv",
      "followers_url": "https://api.github.com/users/arminv/followers",
      "following_url": "https://api.github.com/users/arminv/following{/other_user}",
      "gists_url": "https://api.github.com/users/arminv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arminv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arminv/subscriptions",
      "organizations_url": "https://api.github.com/users/arminv/orgs",
      "repos_url": "https://api.github.com/users/arminv/repos",
      "events_url": "https://api.github.com/users/arminv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arminv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T13:16:13Z",
    "updated_at": "2018-03-30T14:10:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would like to work on this issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378144433",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20527#issuecomment-378144433",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20527",
    "id": 378144433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODE0NDQzMw==",
    "user": {
      "login": "hodossy",
      "id": 19623656,
      "node_id": "MDQ6VXNlcjE5NjIzNjU2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/19623656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hodossy",
      "html_url": "https://github.com/hodossy",
      "followers_url": "https://api.github.com/users/hodossy/followers",
      "following_url": "https://api.github.com/users/hodossy/following{/other_user}",
      "gists_url": "https://api.github.com/users/hodossy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hodossy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hodossy/subscriptions",
      "organizations_url": "https://api.github.com/users/hodossy/orgs",
      "repos_url": "https://api.github.com/users/hodossy/repos",
      "events_url": "https://api.github.com/users/hodossy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hodossy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T06:39:43Z",
    "updated_at": "2018-04-03T06:42:28Z",
    "author_association": "NONE",
    "body": "What if rename would be only modified as\r\n\r\n```python\r\ndef rename(self, *names, inplace=False):\r\n\"\"\"...\"\"\"\r\n    return self.set_names(names, inplace=inplace)\r\n```\r\n\r\nand remove the rename overwrite\r\n\r\n```python\r\nclass MultiIndex(Index):\r\n    \r\n    rename = Index.set_names  # delete this\r\n```\r\n\r\nfrom MultiIndex. This way old functionality is kept (except MultiIndex.rename), but one can achive what I want by passing multiple `name` arguments. Meaning that\r\n\r\n```python\r\ndf = DataFrame(index=Index([1, 2, 3, 4]), columns=['A', 'B'])\r\ndf.index.rename(['foo'], inplace=True)\r\ndf.reset_index()\r\n```\r\n\r\nStill raises an error but\r\n\r\n```python\r\nindex.rename(*['foo'])\r\nindex.rename(*['baz', 'quz'])\r\n```\r\n\r\ncan be called on either Index and MultiIndex objects. So that in cases like mine, where it is not known beforehand whether I will be dealing with a multi or single level index, I can avoid the typecheck and rename the levels easily and then reset the index on the dataframe.\r\n\r\nPlease note that I did not have time to check te corner cases or run a regression on this idea, I am only interested in your opinion."
  }
]
