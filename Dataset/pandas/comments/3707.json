[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18617391",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18617391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18617391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE3Mzkx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T13:50:57Z",
    "updated_at": "2013-05-29T13:50:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since numpy cannot support a native `NaN` for integers, this must be cast to floats (it IS possible to do this in some cases as integers, e.g. when you KNOW that nans will not result, but this makes the operation take extra time). As for casting back, that is consistent will all other pandas operations. You are free to start with a dtype of `float64`. Working with extreme range integers is IMO, not useful, and what you are seeing is machine roundoff error.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18617710",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18617710",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18617710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE3NzEw",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T13:55:35Z",
    "updated_at": "2013-05-29T13:55:35Z",
    "author_association": "MEMBER",
    "body": "@jreback how annoying would it be to roll up a `NaI` like `NaT`? there have probably been discussions about this, but then we'd have a missing value for the types that pandas supports (int, floats, objects (can still use regular nan), and dates/times)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18618013",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18618013",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18618013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE4MDEz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T13:59:41Z",
    "updated_at": "2015-02-09T06:10:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud you _could_ use the `NaT` value for a not-available for ints, BUT, this runs into issues on 32-bit (where you effectively have to use the maxint on 32-bit). That's why we ONLY use `datetime64[ns]` (as its always 64-bit). Another option is to do masked type stuff. None of these are good solutions unfortunately.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18618140",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18618140",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18618140,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE4MTQw",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T14:01:39Z",
    "updated_at": "2013-05-29T14:01:39Z",
    "author_association": "MEMBER",
    "body": "yeah i hate maskedarrays...(link doesn't work) :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18618526",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18618526",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18618526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE4NTI2",
    "user": {
      "login": "gerdemb",
      "id": 218609,
      "node_id": "MDQ6VXNlcjIxODYwOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/218609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerdemb",
      "html_url": "https://github.com/gerdemb",
      "followers_url": "https://api.github.com/users/gerdemb/followers",
      "following_url": "https://api.github.com/users/gerdemb/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerdemb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerdemb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerdemb/subscriptions",
      "organizations_url": "https://api.github.com/users/gerdemb/orgs",
      "repos_url": "https://api.github.com/users/gerdemb/repos",
      "events_url": "https://api.github.com/users/gerdemb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerdemb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T14:07:32Z",
    "updated_at": "2013-05-29T14:07:32Z",
    "author_association": "NONE",
    "body": "If I understand you correctly, rather than trying to determine if an operation would create `NaN` values, pandas simply casts ints to floats in any case where this _might_ happen because this performs better. Is that correct? In my trivial examples it's obvious that there is no missing data, but I could see how that may not always be obvious.\n\nI still think that in the case where an int as cast to a float to do an operation, pandas should return floats. It's very non-obvious that an operation that accepts ints and returns ints is actually doing floating point calculations in the background!\n\nMy example uses big integers, to demonstrate the problem, but it could occur with smaller numbers too. `int(float(i)) == i` for all integer values of `i` is not always true. In monetary applications this is important. \n\nFinally, changing the topic slightly, the behavior I'm actually looking for is to replace `NaN` with `0` when working with ints. For example:\n\n```\n>>> dates = (datetime(2013, 1, 1), datetime(2013,1,2), datetime(2013,3,1))\n>>> s = Series([1,2,4],index=dates)\n>>> s\n2013-01-01    1\n2013-01-02    2\n2013-03-01    4\ndtype: int64\n>>> s.resample('M', how='sum')\n2013-01-31     3\n2013-02-28     0\n2013-03-31     4\nFreq: M, dtype: int64\n```\n\nI can't see how this is easily possible, but I'm not an expert here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18619779",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18619779",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18619779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE5Nzc5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T14:25:47Z",
    "updated_at": "2013-05-29T14:25:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gerdemb \n\nchecking for Nans costs time, and in any event these types of routines are implemented only as floats (they could in theory be done as ints, but this ONLY works if there are NO Nans at all, which when doing resampling is very rare if you think about it, most of the time you will end up generating nan for missing periods)\n\npandas tries to return the input type, its just more intuitve that way (before 0.11 pandas used to return floats in almost all cases, THAT was a bit of an issue). Now that pandas supports many dtypes it tries to return the correct one, casting is done ONLY when there is not loss of result. (do your above operation with floats, it returns the same result, 0)\n\n2nd question\n\n```\nIn [7]: s.astype('float').resample('M',how='sum').fillna(0).astype('int')\nOut[7]: \n2013-01-31    3\n2013-02-28    0\n2013-03-31    4\nFreq: M, dtype: int64\n```\n\nwill work; I don't think pandas supports a `fill=` in resample; in theory it could I suppose\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18619835",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18619835",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18619835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE5ODM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T14:26:39Z",
    "updated_at": "2013-05-29T14:26:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's another way of doing this w/o the casting\n\nhttp://stackoverflow.com/questions/16807836/how-to-resample-a-timeseries-in-pandas-with-a-fill-value\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18636281",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18636281",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18636281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjM2Mjgx",
    "user": {
      "login": "gerdemb",
      "id": 218609,
      "node_id": "MDQ6VXNlcjIxODYwOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/218609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerdemb",
      "html_url": "https://github.com/gerdemb",
      "followers_url": "https://api.github.com/users/gerdemb/followers",
      "following_url": "https://api.github.com/users/gerdemb/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerdemb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerdemb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerdemb/subscriptions",
      "organizations_url": "https://api.github.com/users/gerdemb/orgs",
      "repos_url": "https://api.github.com/users/gerdemb/repos",
      "events_url": "https://api.github.com/users/gerdemb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerdemb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T18:26:11Z",
    "updated_at": "2013-05-29T18:29:05Z",
    "author_association": "NONE",
    "body": "@jreback \n\nI'm not sure what's wrong with returning floats when floats have been used to do the calculations, and I personally think it is much clearer than silently casting them back into ints with the subsequent loss of precsion, but it sounds like there may be other issues that I am not aware of.\n\nAnyway, it seems that when using ints there are two possible scenarios: (1) the calculation is done entirely with ints without casting (2) the ints are cast to floats for calculation and then cast back to ints when the results are returned. When calling a method, how can I tell which one will happen? \n\nSeems like this should at least be documented or even better a signal could be emitted when precision is lost by casting (perhaps by using a mechanism like decimal.Context which allows the user to decide which conditions they wish to trap).\n\nThank you for your answers to my second question. The stackoverflow question you linked was actually my post! Using a custom aggregation function as suggested in the answer does work correctly, but unfortunately the performance is about 30 times worse than `how='sum'`. I suppose this is because of the overhead of calling a Python function instead a C function?\n\nFinally, just want to say thanks for developing and supporting pandas. Despite my complaints, I've found it to be an incredibly useful tool in my work.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18636635",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18636635",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18636635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjM2NjM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T18:31:23Z",
    "updated_at": "2013-05-29T18:31:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gerdemb \n\nyes, unfortunately using a lambda is much slower; that said, it might be worth it to build this type of filling in (e.g. provide a `fill_value=` to resample, but a bit non-trivial\n\nusing `ints` in general is problematic because of the lack of a native `nan` as have mentioned\n\nhowever, pandas does try to maintain dtype where possible; that is why the cast back happens. And as I said there is NO loss of precision (IF numpy allows it, which it does in this case), e.g.\n\n```\nIn [1]: np.array([1],dtype='float64')\nOut[1]: array([ 1.])\n\nIn [2]: np.array([1],dtype='int64')\nOut[2]: array([1])\n\nIn [3]: np.array([1],dtype='float64') == np.array([1],dtype='int64')\nOut[3]: array([ True], dtype=bool)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18645328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18645328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18645328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ1MzI4",
    "user": {
      "login": "gerdemb",
      "id": 218609,
      "node_id": "MDQ6VXNlcjIxODYwOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/218609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerdemb",
      "html_url": "https://github.com/gerdemb",
      "followers_url": "https://api.github.com/users/gerdemb/followers",
      "following_url": "https://api.github.com/users/gerdemb/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerdemb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerdemb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerdemb/subscriptions",
      "organizations_url": "https://api.github.com/users/gerdemb/orgs",
      "repos_url": "https://api.github.com/users/gerdemb/repos",
      "events_url": "https://api.github.com/users/gerdemb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerdemb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T20:52:19Z",
    "updated_at": "2013-05-29T21:04:14Z",
    "author_association": "NONE",
    "body": "@jreback \n\nIt's not true that there is no loss of precision when casting from int to float. The code in my first post demonstrates the problem and how it can effect the results of a resample operation. Another trivial example:\n\n```\n>>> a=np.int64(18014398509481983)\n>>> a, np.float64(a)\n(18014398509481983, 18014398509481984.0)\n>>> np.int64(np.float64(a)) == a\nFalse\n```\n\nThe value of `a` has more precision than is possible to store in an float64. Your example uses a value of 1 which is small enough to store exactly as a float64. Additionally, I believe it is casting the int64 to a float64 and then comparing the two floats which doesn't really prove anything.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18646355",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18646355",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18646355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ2MzU1",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T21:08:45Z",
    "updated_at": "2013-05-29T21:12:43Z",
    "author_association": "MEMBER",
    "body": "> It's not true that there is no loss of precision when casting from int to float.\n\nIn general, sure (but by definition this is true).\n\n@jreback pandas does lose precision with these values. For example,\n\n``` python\ns = Series([18014398509481983] * 10, date_range(start='1/1/2000', periods=10, freq='D'))\ns.resample('M')[0] == s[0] # False\ns.resample('M')[0] == s[0] + 1 # True\ns += 1\ns.resample('M')[0] == s[0] # True\n```\n\nIt (`numpy`) should be able to handle up to `2 ** 62` without overflow...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18647022",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18647022",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18647022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ3MDIy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-29T21:20:35Z",
    "updated_at": "2013-05-29T21:20:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "i think u are misunderstanding what pandas is actually doing. the conversion from float back to int occurs ONLY if numpy compares the values as equal (and there are no Nan's and the original dtype was int to begin with)\nthis is considered safe casting\n\nyour above example fails as the numbers don't compare equal in the first place\n\nhowever, if there is a loss of precision, eg your example\nthen I think the conversion is 'wrong' in numpy and so pandas is wrong as well\nbut that is a very narrow case and I don't think near the end points of values it's guaranteed to work in any event\n\nthat said if could figure out a reasonable way to determine if there possibly would be a loss of precision then could raise an error ( and let the user decide what to do ). as u suggested above\n\nhere's a numpy related discussinon:\nhttps://github.com/numpy/numpy/issues/3118\n\nI think we could do the test before casting, essentially this:\n\n```\nif isinstance(np.integer,x):\n\n    if not (x.astype('float64') == x).all():\n         raise Exception(\"possible data loss from casting int to float\")\n```\n\nI don't believe this is expensive to do either\n\nonly issue is prob should do this in lots of places :)\n\nThe cast back does this test so that's not a problem (or it will leave it as float)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18666597",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18666597",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18666597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjY2NTk3",
    "user": {
      "login": "gerdemb",
      "id": 218609,
      "node_id": "MDQ6VXNlcjIxODYwOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/218609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerdemb",
      "html_url": "https://github.com/gerdemb",
      "followers_url": "https://api.github.com/users/gerdemb/followers",
      "following_url": "https://api.github.com/users/gerdemb/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerdemb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerdemb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerdemb/subscriptions",
      "organizations_url": "https://api.github.com/users/gerdemb/orgs",
      "repos_url": "https://api.github.com/users/gerdemb/repos",
      "events_url": "https://api.github.com/users/gerdemb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerdemb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-30T08:00:05Z",
    "updated_at": "2013-05-30T08:05:08Z",
    "author_association": "NONE",
    "body": "@jreback \n\nThere are TWO casts being done in the resample example that I originally posted. The first is as cast from int to float the second is a cast back to int from float. It doesn't mater if the second cast from float to int occurs only if numpy compares the values as equal, because we've already lost the precision in the FIRST cast from int to float. The code @cpcloud posted shows another example of the same problem. You said \"your above example fails as the numbers don't compare equal in the first place\" which is exactly the point! We CANNOT guarantee that a cast from int to float will not lose precision! (More precisely, if we are working with 64-bit types, I believe that if the number of bits in the integer exceeds 53, then it cannot be represented exactly as float as that would exceed the float's significand precision.)\n\nAnyway, I propose the following possible solutions:\n1. Leave the behavior as-is and document it as a gotcha.\n2. Leave the behavior as-is, but create a mechanism to warn the user about loss of precision. We could consider if this warning would be raised only on a potential loss of precision (ie. we are doing a cast that might lose precision) or a confirmed loss of precision (like your example above that actually checks the values).\n3. Remove the behavior of casting results back into their original dtypes\n\nPersonally, I am strongly in favor of 3, but I realize there may be other opinions. My reasons are: \n1. It is very confusing and non-obvious that a method that accepts and returns integers is actually doing the calculations with floats and potentially losing precision. If the values are returned as floats this would be more obvious to the user.\n2. We already have cases where a method passed ints will return floats. For example, if I reindex a Series of ints with missing values, they are converted to floats so that `NaN`s can be inserted.\n3. It leaves the decision of what do with the results in the hands of the programmer. Perhaps, they are happy to work with floats or they could cast the results back into integers if they wish. It is a waste of time to always perform a cast back to the original dtype if the user doesn't care.\n4. Adding a mechanism to check for the potential loss of precision, would slow down the default case when the majority of users probably don't care. Adding these checks also makes the code more complicated.\n\nIn short, I believe this solution has the least confusing behavior, performs the fastest and requires the least amount of code.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18672389",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18672389",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18672389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjcyMzg5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-30T10:26:52Z",
    "updated_at": "2013-05-30T10:29:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "nice summary. The issue is the FIRST cast is not 'safe' (as I defined above), while SECOND is. As far as your solutions.\n\nI know you like option 3 (cast most things to float and leave), but\n1. This violates least surprise principle. Things shouldn't change just because of an implementation detail. If you have an int, you generally have a good reason for it, so pandas shouldn't change it unless there is no other way.\n2. numpy and pandas go to great lengths to avoid changing dtype except where necessary. Your example is actually a special case (reindexing where you have missing values so change to `float` dtype). In fact see this: http://pandas.pydata.org/pandas-docs/dev/whatsnew.html#dtype-gotchas, there ARE times when we can preserve the dtype even though the implementation actually 'changes' it.\n3. you make a point (3) that the user should be in control of the dtype. Well this is exactly right, but you can't have it both ways. Either pandas takes and int and returns and int or the user should pass a float. Doing halfway is not a good solution (but is unavoidable in certain cases as we have seen). Converting EVERYTHING to float is a worse option.\n4. Your point (4) is relevant, it does make the code a bit more dense; I don't actually think slows it down as an `astype` check is pretty cheap (however, a-priori checking for `nan` to determne if we need to cast is not a good option)\n\nSo we are left with a gotchas doc, or  providing a warning (or exception).\n\nI think providing a `LossOfPrecisionWarning` (a sub-class of `UserWarning`) might be a good solution, as well as documenting; may not get to this to 0.12\n\nWould you do a PR for a short section in http://pandas.pydata.org/pandas-docs/dev/gotchas.html for 0.11.1?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18675234",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18675234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18675234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njc1MjM0",
    "user": {
      "login": "gerdemb",
      "id": 218609,
      "node_id": "MDQ6VXNlcjIxODYwOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/218609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerdemb",
      "html_url": "https://github.com/gerdemb",
      "followers_url": "https://api.github.com/users/gerdemb/followers",
      "following_url": "https://api.github.com/users/gerdemb/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerdemb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerdemb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerdemb/subscriptions",
      "organizations_url": "https://api.github.com/users/gerdemb/orgs",
      "repos_url": "https://api.github.com/users/gerdemb/repos",
      "events_url": "https://api.github.com/users/gerdemb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerdemb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-30T11:43:31Z",
    "updated_at": "2013-05-30T11:43:31Z",
    "author_association": "NONE",
    "body": "@jreback \n1. In my opinion, it is much more surprising to get the WRONG ANSWER (see the code in my very first post) than a value cast to a different dtype! You're right, I am using ints for a reason and it's more than just an \"implementation detail\" that they are changed to floats (and then sneakily cast back to integers) for some calculations, because this can give INCORRECT integer results.\n2. You're only giving the user the false illusion of being in control of the dtype since some calculations may be done by casting to intermediate types effectively ignoring the original dtype anyway. I believe like _The Zen of Python_ says that _\"Explicit is better than implicit\"_. If it's not possible for a method do a calculation without casting to float you should explicitly return that float and not implicitly hide it by converting it back to an int.\n\nI've been using pandas for quite a while, but this is my first time venturing into the \"development\" side of things and I'm not sure how changes are introduced to the code, but I'd be curious to hear the opinions of other developers or users on this issue.\n\nFinally, I realize my use-case is probably unusual and that is why no one has reported this problem before. I'm going to redesign my application to use Decimal objects instead of integers which will be a big performance hit, but I don't want to risk finding any more \"gotchas\" like this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18675711",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18675711",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18675711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njc1NzEx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-30T11:56:59Z",
    "updated_at": "2013-05-30T11:56:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some calculations could be done using ints directly, however this means additional code generation and complexity. This is a really narrow case that in practice is very unlikely. Dtype preservation is quite important; it comes up much more in that almost all calculates with for example `datetime64[ns]` are actually done using ints and then cast back.\n\nThere are tradeoffs that are done in pandas for performance gains, if they are giving an incorrect result, that can be fixed, its not really difficult (as I mentioned above), so I think a doc change now is appropriate, and can fix in 0.12\n\nmy 2c. Using `Decimal` objects is really missing the point of using pandas. Everything will be object type.\n\nThere are not many _gotchas_ in pandas, in fact, great length has gone to remove many, many more gotchas/outright bugs that exist in numpy.\n\nThanks for bringing this issue up, that's how things get fixed!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18676117",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18676117",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18676117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njc2MTE3",
    "user": {
      "login": "gerdemb",
      "id": 218609,
      "node_id": "MDQ6VXNlcjIxODYwOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/218609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerdemb",
      "html_url": "https://github.com/gerdemb",
      "followers_url": "https://api.github.com/users/gerdemb/followers",
      "following_url": "https://api.github.com/users/gerdemb/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerdemb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerdemb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerdemb/subscriptions",
      "organizations_url": "https://api.github.com/users/gerdemb/orgs",
      "repos_url": "https://api.github.com/users/gerdemb/repos",
      "events_url": "https://api.github.com/users/gerdemb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerdemb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-30T12:08:01Z",
    "updated_at": "2013-05-30T12:08:01Z",
    "author_association": "NONE",
    "body": "@jreback \n\nOK. I think we've both made all our points. :) Agree that at least a documentation gotcha should be added here and perhaps a `LossOfPrecisionWarning` warning later.\n\nFinally, can I make a feature request for adding a `fill_value` option to `resample()` like `reindex()` has? If I could resample an integer series and fill it with zeros instead of `NaN` to avoid a cast to float, that would be perfect.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18676256",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-18676256",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 18676256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njc2MjU2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-30T12:11:42Z",
    "updated_at": "2013-05-30T12:11:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gerdemb go ahead and put up the `resample` request. Its a good idea.\n\nIf you could do a PR for the docs (or just post here, and I can put in, either way)..\n\nthanks.....\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/271393876",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-271393876",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 271393876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM5Mzg3Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T20:10:40Z",
    "updated_at": "2017-01-09T20:10:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing in favor of #11199 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/307670146",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3707#issuecomment-307670146",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3707",
    "id": 307670146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzY3MDE0Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T01:16:23Z",
    "updated_at": "2017-06-12T01:16:23Z",
    "author_association": "MEMBER",
    "body": "Resurrected in #16674."
  }
]
