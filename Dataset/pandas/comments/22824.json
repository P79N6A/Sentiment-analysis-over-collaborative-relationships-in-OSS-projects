[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424150649",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424150649",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424150649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE1MDY0OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T22:48:11Z",
    "updated_at": "2018-09-24T22:48:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "there are multiple issues about changing .unique (for quite some time)\r\n\r\npls show the references \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424150790",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424150790",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424150790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE1MDc5MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T22:48:54Z",
    "updated_at": "2018-09-24T22:48:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "-1 in pd.unique being 2-d as this will make an already complicated function much more so"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424152037",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424152037",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424152037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE1MjAzNw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T22:54:35Z",
    "updated_at": "2018-09-24T22:54:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\n> there are multiple issues about changing .unique (for quite some time)\r\npls show the references\r\n\r\nI tried best I could. Searching open issues with \"unique\" yields 185 results which are at first glance completely unrelated - so I'll admit I didn't comb through all of those. (https://github.com/pandas-dev/pandas/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+unique)\r\n\r\nSearching for \"df.unique\" or \"dataframe.unique\" yielded only #21357, and now also this issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424152994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424152994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424152994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE1Mjk5NA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T22:59:10Z",
    "updated_at": "2018-09-24T23:00:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> -1 in pd.unique being 2-d as this will make an already complicated function much more so\r\n\r\nif `df.unique` wraps `df.drop_duplicates` as suggested, then it would be very easy to dispatch to the different types, and work with existing code at almost no extra cost.\r\n\r\nAlso, the implementation of `pd.unique` is not very complicated at all - just dispatching to hashtables (https://github.com/pandas-dev/pandas/blob/v0.23.4/pandas/core/algorithms.py#L358-L378)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424157813",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424157813",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424157813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE1NzgxMw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T23:25:41Z",
    "updated_at": "2018-09-24T23:25:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> there are multiple issues about changing .unique (for quite some time)\r\npls show the references\r\n\r\nWent over the list again and found one related #15442, and one partly related #13984 and two barely related: #18291 #19595"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424159052",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424159052",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424159052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE1OTA1Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T23:33:04Z",
    "updated_at": "2018-09-24T23:33:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "there was tremendous discussion on this - what should Series.unique return - rather than rehash much better to search for it - follow the links in the first issue"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424221246",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424221246",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424221246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDIyMTI0Ng==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T06:23:17Z",
    "updated_at": "2018-09-25T06:23:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Changing `Index.unique()` to return index: #4126 #13395 (where there's the discussion about what `Series.unique()` should return), finished in #13979.\r\n\r\n> rather than rehash much better to search for it\r\n\r\nFor someone who hasn't been through these discussions through the years, it's nigh impossible to find. Not going to go through thousands of closed issues to find some orthogonal discussions that may or not be hiding in there.\r\n\r\n> there was tremendous discussion on this - what should Series.unique return\r\n\r\nThis is but one aspect of this issue (in particular, the rest are independent of it). And still, most of the discussion in #13395 was what index `Series.unique()` would have - if we postulate `unique = drop_duplicates`, that question already has an answer."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424324619",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424324619",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424324619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDMyNDYxOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T12:33:23Z",
    "updated_at": "2018-09-25T12:33:23Z",
    "author_association": "MEMBER",
    "body": "@h-vetinari Thanks for all the discussion\r\n\r\nI think the main previous discussions on the return value of `unique` have been about having an index vs array vs categorical as output (so all non-indexed objects). So that is a bit different than the issue raised here.\r\n\r\nBut thanks for looking through the older issues! That is indeed not always easy (even for a core dev that might have participated in them ..)\r\n\r\n---\r\n\r\nSome replies to the inconsistencies / solutions:\r\n\r\n\r\n> Change return type for [Series/Index].unique to be same as caller (deprecation cycle by introducing raw=None which at first defaults to True?)\r\n\r\nPersonally, I think that boat has sailed (for Series, Index already returns an Index). I don't really see the added value in having our users go through such a deprecation cycle for such a core function. \r\n\r\nAlso, returning a Series, i.e. returning an indexed object, gives you more complexity, which is what `drop_duplicates` is dealing with. Adding this to `unique` would make them essentially the same. This might be a good thing, but now at least they each serve a slightly different purpose. \r\n\r\n> [pd/Series/Index].unique does not have keep-kwarg\r\n\r\nWhich is not relevant as long as the the return value is non an indexed object?\r\n\r\n> DataFrame.unique does not exist, but is a much more natural candidate (from the behaviour of numpy, resp. Series/Index) than .drop_duplicates\r\n\r\nIn naming yes, but what is the \"natural\" behaviour? If you consider the difference between the current `Series.drop_duplicates` and `Series.unique`, then `DataFrame.drop_duplicates` is the consistent equivalent with Series.drop_duplicates I think?\r\n\r\n> no return_inverse-kwarg for any of the .unique variants; see #4087 (milestoned since 0.14), #21357\r\n\r\nAs I said in the other thread, I think there would be not much disagreement on adding `return_inverse` to the current `unique` methods (but that is only my opinion of course).\r\n\r\n> pd.unique chokes on 2-dimensional data\r\n\r\nBut what would you want it to do? Work on the flattened values, or on a certain axis? (for `np.unique` they recently added an `axis` argument)\r\n\r\n> Add keep-kwarg to pd.unique and dispatch to DataFrame/Series/Index as necessary\r\n\r\nFor `keep` the same comment as above. And currently it is the Series/Index version that dispatches to `pd.unique` (if the underlying values itself have no unique method), what would be the advantage of changing it around?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424327209",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424327209",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424327209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDMyNzIwOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T12:41:41Z",
    "updated_at": "2018-09-25T12:41:41Z",
    "author_association": "MEMBER",
    "body": "So maybe the main question for me is this (limiting it to `Series` methods here): `Series.unique` and `Series.drop_duplicates` are now two distinct functions, doing slightly different things. Is this good or not? \r\n\r\n@h-vetinari's proposal is to unify them, but now they serve an overlapping but still different purpose, and it can also be fine to have two different methods for that (eg `unique` does not need to care about the `keep` argument) \r\nPersonally, I think it is fine to have both."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424417453",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424417453",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424417453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDQxNzQ1Mw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T16:45:08Z",
    "updated_at": "2018-09-25T19:38:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\nThanks for the detailed response!\r\n\r\n> So maybe the main question for me is this (limiting it to Series methods here): Series.unique and Series.drop_duplicates are now two distinct functions, doing slightly different things. Is this good or not?\r\n\r\nI would argue that they do *exactly* the same thing (up to and including `keep`; more on that below), and having them do it in slightly different ways is **inconsistent, confusing and error-prone from a user-perspective**.\r\n\r\n> > [pd/Series/Index].unique does not have keep-kwarg\r\n\r\n> Which is not relevant as long as the the return value is non an indexed object?\r\n\r\nNo, it *IS* relevant even now. Pandas strongly advertises that `[pd/Series/Index].unique` does not sort, and then `keep='first'|'last'` makes a real difference. Whenever the order of a `Series` matters (especially, but not only, with a `DatetimeIndex`) there is a clear distinction between keeping the first and last occurrence, even if the output does not have an index itself.\r\n\r\n>> pd.unique chokes on 2-dimensional data\r\n\r\n> But what would you want it to do? Work on the flattened values, or on a certain axis? (for np.unique they recently added an axis argument)\r\n\r\nAdd `axis=0` to the signature and raise `NotImplementedError` if `axis!=0`. Then `pd.unique` can dispatch to the respective `.unique` method of pandas objects (and default to standard treatment for other objects). All methods would continue to take the row-uniques.\r\n\r\n> And currently it is the Series/Index version that dispatches to pd.unique (if the underlying values itself have no unique method), what would be the advantage of changing it around?\r\n\r\nWRT that, I found another inconsistency,  `pd.unique(idx) != idx.unique()`:\r\n```\r\n>>> idx = pd.Index([1, 2, 3])\r\n>>> idx.unique()\r\nInt64Index([1, 2, 3], dtype='int64')\r\n>>> pd.unique(idx)\r\narray([1, 2, 3], dtype=int64)\r\n```\r\n\r\nFinally,\r\n> Personally, I think that boat has sailed (for Series, Index already returns an Index). I don't really see the added value in having our users go through such a deprecation cycle for such a core function.\r\n\r\nIf the change was ok for `Index` in 0.19 two years ago, and another such central function (`groupby.apply`) was changed in a similar way in 0.23 just months ago, then IMO users will be able to deal with it without issue, and the long-term benefits far outweigh that single transition hump."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424787858",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424787858",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424787858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDc4Nzg1OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-26T16:44:15Z",
    "updated_at": "2018-09-26T16:44:15Z",
    "author_association": "MEMBER",
    "body": "BTW, @h-vetinari in case you would be interested, we are having a dev hangout tomorrow: https://mail.python.org/pipermail/pandas-dev/2018-September/000830.html"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424894223",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-424894223",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 424894223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDg5NDIyMw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-26T22:49:13Z",
    "updated_at": "2018-09-26T22:49:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\nThanks for the invitation! I've got a deadline on Friday, so I'm skeptical whether I'll make it. Hoping I could get a go-ahead on #22812 though. ;-)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/425055804",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-425055804",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 425055804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTA1NTgwNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-27T11:28:21Z",
    "updated_at": "2018-09-27T11:28:21Z",
    "author_association": "MEMBER",
    "body": "@h-vetinari ah, that wasn't on the agenda yet, will add it to the list of potential topics to discuss, but can't promise we will get to it"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/425149261",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-425149261",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 425149261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTE0OTI2MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-27T16:03:36Z",
    "updated_at": "2018-09-27T16:03:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Whenever the order of a Series matters (especially, but not only, with a DatetimeIndex) there is a clear distinction between keeping the first and last occurrence, even if the output does not have an index itself.\r\n\r\nWhat do you mean by this? I don't see how the output would differ if just an array is being returned."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/425167622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-425167622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 425167622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTE2NzYyMg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-27T17:00:36Z",
    "updated_at": "2018-09-27T22:02:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger \r\n\r\nSince pandas advertises not sorting `This does NOT sort` (https://pandas.pydata.org/pandas-docs/stable/generated/pandas.unique.html), it makes a difference:\r\n``` \r\n>>> s = pd.Series([0, 1, 99, 1, 3, 99, 1], name='error_codes')\r\n>>> s.index = pd.DatetimeIndex(start='2018-01-01', end = '2018-01-7', freq='D')\r\n>>>\r\n>>> # numpy chooses to ignore order\r\n>>> np.unique(s)\r\narray([ 0,  1,  3, 99], dtype=int64)\r\n>>>\r\n>>> # first occurrence\r\n>>> pd.unique(s)\r\narray([ 0,  1, 99,  3], dtype=int64)\r\n>>>\r\n>>> # last occurrence\r\n>>> pd.unique(s, keep='last') # hypothetical; used: s.drop_duplicates(keep='last').values\r\narray([ 0,  3, 99,  1], dtype=int64)\r\n``` \r\n\r\nImagine you want to find out which unique errors occurred in whatever system generated the output, and when they last (or first occurred) - presumably the order of events will have some relevant information. Since `.unique` doesn't sort, it is a very natural approach for this, but it\r\n* loses the index information (which I argue should be changed)\r\n* doesn't allow `keep='last'`\r\n\r\nI fully understand that `drop_duplicates` has the capabilities I'm talking about, but my point is exactly that `unique` fundamentally does the same thing (if it were to *sort* like numpy, this argument would be less strong). The question about the index of the result (e.g. in #13395) has an unambiguous answer (just depending on `keep`), and if someone truly wants just the array, they can always use `.values` afterwards.\r\n\r\nIt's not even a perf-issue, because the hashtable code has the info at which index it is (for `StringHashTable.unique`, this would just mean also returning `uindexer`, for example)\r\n\r\nFinally, this is how it should look, IMO:\r\n```\r\n>>> s.unique(keep='last')  # hypothetical; used: s.drop_duplicates(keep='last')\r\n2018-01-01     0\r\n2018-01-05     3\r\n2018-01-06    99\r\n2018-01-07     1\r\nName: error_codes, dtype: int64\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/425486403",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-425486403",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 425486403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTQ4NjQwMw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-28T16:10:54Z",
    "updated_at": "2018-09-28T16:10:54Z",
    "author_association": "MEMBER",
    "body": "After speaking about this in the dev chat yesterday I'm wondering if it wouldn't make the most sense for `unique` to return an ndarray and `drop_duplicates` to return the same type as caller. Doing so delineates the two functions, and if that's the case then `return_inverse` I think could just be added to `drop_duplicates`. \r\n\r\nBecause Index, Series and DataFrame already have drop_duplicates it's an easier change to add the keyword there than creating new methods. For consistency the return value of Index `.unique` would need to change to an ndarray but I think that causes the least friction and makes sense from an end user perspective"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/425511153",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-425511153",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 425511153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTUxMTE1Mw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-28T17:36:14Z",
    "updated_at": "2018-09-28T17:36:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry I couldn't take part in the dev chat yesterday.\r\n\r\nI understand that the hurdle is larger to change the output from `Series.unique` to a `Series`, but it's the only consistent choice and 1.0 is the perfect time for this because people will be very motivated/tolerant for changes in 1.0.\r\n\r\nThe distinction between `unique` and `drop_duplicates` is purely semantic, and it's confusing that things behave differently - and changing the return type of `Index.unique` is arguably as large a change as changing `Series.unique`. That aside, if `unique` were to always return an `ndarray`:\r\n* it would be confusing why `np.unique` and `df.drop_duplicates` have a `return_inverse`, but not the pandas-`unique` methods, and would really feel (IMO) like a left-over from the early days.\r\n* currently, the user has to remember a lot of relevant differences between `pd.unique` and `np.unique`, but both return an `ndarray`. `pd.unique` should really be able to deal with its own types, and that would also help differentiating those methods.\r\n\r\nAgain, 1.0 is the perfect time for this - it only gets harder later."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427920626",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-427920626",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 427920626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzkyMDYyNg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-08T17:42:18Z",
    "updated_at": "2018-10-09T09:33:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche @TomAugspurger @jreback @WillAyd \r\n\r\nI wanna pick this up again, please, and need your feedback. In addition to the points mentioned directly above, there's another important point:\r\n* the utility of / need for `return_inverse` is not in question AFAICT\r\n* we already had some discussion about the return type of `return_inverse` in #21645, and I'll make the case again that:\r\n  * the inverse should be a `Series`\r\n  * otherwise the user has to play \"puzzle\" with *two* different kind of `Index` objects (or `ndarray` holding index info)\r\n* one of the main goals of `return_inverse` is to allow reconstruction (perhaps after some other calculation) -- this too would only really be possible if `Series.unique` maintains its type/index.\r\n  \r\n  [the array of values would be reconstructible from `uniques`/`inverse` (as two `ndarray`), but then the original index is still missing. Just assuming that it will be available from somewhere else is not justified, and would feel hacky, with little user-confidence in the validity if this is not a direct result of the `unique`-calculation.]\r\n* it would be strange to have the uniques be an `ndarray`, but the `inverse` a `Series` (again, the only other option would be to return *three* times `ndarray`)\r\n\r\nLong story short:\r\n* the only consistent option is a type-preserving `unique`, particularly for having `return_inverse` and enabling reconstruction\r\n* 1.0 is the perfect time to do this\r\n* changing the return type of `Index.unique` to `ndarray` would be an equally disruptive change, with no gains towards being able to reconstruct.\r\n* I'm volunteering to make the changes (starting slowly in #22986...)\r\n* I need a go-ahead, or at least some feedback/discussion, please [not on all points of this issue, just the return-type of `Series.unique`, which needs a deprecation cycle]"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/428951772",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-428951772",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 428951772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyODk1MTc3Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-11T13:18:34Z",
    "updated_at": "2018-10-11T13:18:34Z",
    "author_association": "MEMBER",
    "body": "> I understand that the hurdle is larger to change the output from Series.unique to a Series, but it's the only consistent choice\r\n\r\n> The distinction between unique and drop_duplicates is purely semantic, \r\n\r\nI still don't see the point of unifying those two functions. For me, they have a clear different behaviour (and use case). `unique` gives you an array-like of the unique values in order of occurence, `drop_duplicates` is the more advanced method where you keep the index / can specify which duplicates to drop. \r\n\r\n(personal use case: If I quickly want to check the unique values, I use `unique` (typically a limited number of unique values), and if I have a Series with a few duplicates I want to drop, I use `drop_duplicates`)\r\n\r\nSo I am personally fine with the current distinction between both functions.\r\n\r\n\r\n> it would be strange to have the uniques be an ndarray, but the inverse a Series (again, the only other option would be to return three times ndarray)\r\n\r\nSo for `pd.unique`, I think `return_inverse` should always be an array. But for `Series.unique` I agree that it would be strange to have the inverse be a Series while the uniques are an array. This is not ideal (both this, as having the inverse as array which looses information), but IMO not enough to warrant a change in return type for Series.unique\r\n\r\n> I need a go-ahead, or at least some feedback/discussion, please [not on all points of this issue, just the return-type of Series.unique, which needs a deprecation cycle]\r\n\r\nLet's start with adding the functionality to the hashtables and to `pd.unique` (where the API is not under discussion I think). We can then further discuss the other points / how to integrate it in `Series.unique`/`Series.drop_duplicates`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432841642",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-432841642",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 432841642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjg0MTY0Mg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T21:54:05Z",
    "updated_at": "2018-10-24T21:54:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\nThanks for the response and sorry for the slow reply.\r\n\r\n@jreback @TomAugspurger @WillAyd @gfyoung @jschendel @toobaz \r\nGentle ping to invite feedback about the case I make below. TLDR: *Changing the type of `Series.unique` is the only way that allows using `return_inverse` without several anti-patterns and disjoint parts.*\r\n\r\n## Return type of `Series.unique` based on reconstructing with inverse\r\n\r\nInstead of arguing again for the similarities of `.unique` and `.drop_duplicates`, let me give an example for the main reason to have a `return_inverse` at all - reconstruction from the uniques.\r\n\r\nAs a toy example, say we have a log of users interacting with a website, and want to identify the first time they arrive (to calculate behaviour per duration spent or whatever). Let's begin from a common starting point\r\n```python\r\n>>> import pandas as pd\r\n>>> import numpy as np\r\n>>> import pandas.util.testing as tm\r\n>>> from numpy.random import randint\r\n>>> np.random.seed(444)\r\n>>>\r\n>>> N = 7  # number of timestamps\r\n>>> k = 3  # number of unique IDs\r\n>>> \r\n>>> # generate random timestamps during the day\r\n>>> dti = pd.date_range(start='2018/10/24', end='2018/10/25', periods=N ** 3)\r\n>>> dti = dti[randint(0, N ** 3, (N,))].sort_values()\r\n>>> \r\n>>> # generate \"k\" user IDs and assign them to the timestamps\r\n>>> with tm.RNGContext(444):\r\n>>>     s = pd.Series(tm.makeStringIndex(k).str[:4][randint(0, k, (N,))],\r\n...                   index=dti, name='User_ID')\r\n>>> s\r\n2018-10-24 01:49:28.421052672    dWxi\r\n2018-10-24 03:34:44.210526208    mkqZ\r\n2018-10-24 07:34:44.210526208    dWxi\r\n2018-10-24 07:38:56.842105344    dWxi\r\n2018-10-24 08:46:18.947368448    iPSk\r\n2018-10-24 18:06:18.947368448    iPSk\r\n2018-10-24 19:13:41.052631552    mkqZ\r\nName: User_ID, dtype: object\r\n```\r\nand we want to achieve:\r\n```\r\n>>> goal\r\n                              User_ID first_contact_today\r\n2018-10-24 01:49:28.421052672    dWxi     01:49:28.421052\r\n2018-10-24 03:34:44.210526208    mkqZ     03:34:44.210526\r\n2018-10-24 07:34:44.210526208    dWxi     01:49:28.421052\r\n2018-10-24 07:38:56.842105344    dWxi     01:49:28.421052\r\n2018-10-24 08:46:18.947368448    iPSk     08:46:18.947368\r\n2018-10-24 18:06:18.947368448    iPSk     08:46:18.947368\r\n2018-10-24 19:13:41.052631552    mkqZ     03:34:44.210526\r\n```\r\n\r\n**Note:** The problems here are not limited to `DatetimeIndex` or this specific use-case, but about **generally needing pandas-capabilities to work on the uniques**, and then rebroadcasting to the original. This is similar to the problem of `groupby.apply` pre-v.0.23, where it was eventually realized that it's necessary to have pandas-objects (and not raw ndarrays) available within the function.\r\n\r\n### The good: `Series.unique` returns `Series`, inverse also a `Series`\r\n\r\nIn the world that I'm proposing, the workflow is super simple:\r\n```python\r\n>>> # both uniques/inv are Series in this example\r\n>>> uniques, inv = s.unique(return_inverse=True)  # takes first occurrence\r\n>>> uniques_enh = uniques.to_frame().assign(first_contact_today = uniques.index.time)\r\n>>> # broadcast back to original: first select from uniques, then (re)set index\r\n>>> s_enh = uniques_enh.reindex(inv).set_index(inv.index)\r\n>>> s_enh.equals(goal)\r\nTrue\r\n>>> uniques_enh  # for comparison\r\n                              User_ID first_contact_today\r\n2018-10-24 01:49:28.421052672    dWxi     01:49:28.421052\r\n2018-10-24 03:34:44.210526208    mkqZ     03:34:44.210526\r\n2018-10-24 08:46:18.947368448    iPSk     08:46:18.947368\r\n```\r\n\r\n### The weird: `Series.unique` returns `ndarray`, but inverse is a `Series`\r\n\r\nAs I wrote further up the thread, \"it would be strange to have the uniques be an `ndarray`, but the `inverse` a `Series`\", and this really is a half-assed solution IMO. It also makes it necessary to kludge around to get the required info on the level of the `uniques` -- otherwise we'd need two kwargs/arrays, see \"the monstrous\" below.\r\n\r\n```python\r\n>>> # Series.unique is ndarray in this example, but inverse is a Series\r\n>>> uniques, inv = s.unique(return_inverse=True)\r\n>>>\r\n>>> # cannot operate on \"uniques\" here to get index, kludge in index-info from \"inv\"\r\n>>> # using \"inv.unique()\" while trying to reconstruct from previous unique is circular!\r\n>>> # need to reconstruct - lost all label information\r\n>>> uniques_enh = pd.DataFrame({'User_ID': uniques,\r\n...                             'first_contact_today': inv.index[inv.unique()].time},\r\n...                            index = inv.unique())\r\n>>> \r\n>>> # broadcast back to original: first select from uniques, then (re)set index\r\n>>> s_enh = uniques_enh.reindex(inv).set_index(inv.index)\r\n>>> s_enh.equals(goal)\r\nTrue\r\n>>> uniques_enh  # for comparison\r\n  User_ID first_contact_today\r\n0    dWxi     01:49:28.421052\r\n1    mkqZ     03:34:44.210526\r\n4    iPSk     08:46:18.947368\r\n```\r\nFurther deepening the weird mix between ndarray/Series, the inverse would be using two different kind of indexes, instead of one that's compatible both for `s` and `uniques`.\r\n\r\n### The monstrous: `Series.unique` returns `ndarray`, inverse(s) also `ndarray`\r\n\r\nThis is not really under discussion AFAICT, but I'm adding it in case someone thinks this scenario would be easier than \"the weird\" above. This case would necessitate adding *two* keywords (`return_inverse` and `return_index` like for `np.unique`), and really shouldn't be considered IMO.\r\n\r\n```python\r\n>>> # Series.unique is ndarray here; if inverse is not a Series, we need *two* arrays\r\n>>> uniques, idx, inv = s.unique(return_inverse=True, return_index=True)\r\n>>>\r\n>>> # cannot use pd.concat; numpy doesn't handle Datetimes well\r\n>>> # np.concatenate cannot turn 1-d arrays into 2-d array -> use np.stack\r\n>>> # cannot operate on \"uniques\" here to get index; re-using \"dti\" is fragile!\r\n>>> uniques_enh = np.stack([uniques, dti[idx]], axis=1)\r\n>>>\r\n>>> # need to reconstruct instead of reindex; lost all label information\r\n>>> # re-using \"dti\" is fragile! should natively come out of unique-calculation!\r\n>>> s_enh = pd.DataFrame(uniques_enh[inv], index=dti,\r\n...                      columns=['User_ID', 'first_contact_today'])\r\n>>> # need to manually restore Datetime info\r\n>>> s_enh.first_contact_today = s_enh.first_contact_today.astype('datetime64').dt.time\r\n>>> s_enh.equals(goal)\r\nTrue\r\n>>> uniques_enh  # for comparison\r\narray([['dWxi', 1540345768421052672],\r\n       ['mkqZ', 1540352084210526208],\r\n       ['iPSk', 1540370778947368448]], dtype=object)\r\n```\r\n\r\n\r\n#### Other comments/responses\r\n\r\n1. As @jorisvandenbossche correctly noted in https://github.com/pandas-dev/pandas/pull/21645#issuecomment-422314195, the inverse should be first and foremost on `unique`, not `drop_duplicates` - i.e. the above discussion shouldn't be circumvented by saying \"use `drop_duplicates`\".\r\n1. Like for `groupby.apply` there's strong reasons for being able to stay in pandas-land\r\n1. Changing the type of `Series.unique` is the only way that allows using `return_inverse` without several anti-patterns and disjoint parts.\r\n1. Regarding: \"personal use case: If I quickly want to check the unique values, I use `unique` (typically a limited number of unique values), and if I have a Series with a few duplicates I want to drop, I use `drop_duplicates`\"\r\n  IMO, if you really need an `ndarray`, it's trivial to add `.values`, but it's highly non-trivial to reconstruct the index.\r\n1. > Let's start with adding the functionality to the hashtables [...]. We can then further discuss the other points / how to integrate it in `Series.unique`/`Series.drop_duplicates`\r\n  \r\n  Working on it. But it's a slow process, and I think changing this should ideally be done for 1.0, hence deprecate for 0.24, which is soon."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432842875",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-432842875",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 432842875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjg0Mjg3NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T21:59:10Z",
    "updated_at": "2018-10-24T21:59:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "your example looks like a simple group by and merge or just a merge_asod for ordered things\r\n\r\nwhy is that not simply the answer?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432855654",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-432855654",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 432855654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjg1NTY1NA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T22:54:57Z",
    "updated_at": "2018-10-24T23:00:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\n\r\nI tried to make a short enough toy example (as the post is already very long), so obviously some complexity gets brushed under the carpet, which then may allow alternative solutions. But even then, using `.groupby` for problems like this is orders of magnitude slower than `.unique` - e.g. 20min vs. 10sec (this is how I started this journey of trying to get `return_inverse` implemented, for more details see #21357).\r\n\r\nA merge with (modified) uniques is fundamentally the same as using `return_inverse`, but A) that would need (like I'm arguing) for uniques to be `Series`, and B) it is also much more inefficient (esp. for large sizes, or if the uniques are formed over many columns), because it needs to recalculate the exact same HashTables/HashVectors for joining that are already available from the original computation of those very same uniques!\r\n\r\nI had another toy example in mind that does something like \"cumsum-only-new-values\" (not a simple groupby AFAICT) - I just didn't work that one out as thoroughly:\r\n\r\n```python\r\n>>> s = pd.Series([1, 4, 1, 2, 2, 4, 3], index=[x ** 2 for x in range(7)])\r\n>>> uniques, inv = s.unique(return_inverse=True)\r\n>>> # csonv = cumsum-only-new-values\r\n>>> uniques_enh = uniques.to_frame('orig').assign(csonv = uniques.cumsum())\r\n>>> s_enh = uniques_enh.reindex(inv).set_index(inv.index)\r\n>>> s_enh.csonv = s_enh.csonv.expanding().max().astype(int)\r\n>>> s_enh\r\n    orig  csonv \r\n0      1      1\r\n1      4      5\r\n4      1      5\r\n9      2      7\r\n16     2      7\r\n25     4      7\r\n36     3     10\r\n```\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433401104",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-433401104",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 433401104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQwMTEwNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T13:07:14Z",
    "updated_at": "2018-10-26T13:07:14Z",
    "author_association": "MEMBER",
    "body": "@h-vetinari it might be besides the point, since it is only a simplified example and the below might not be the case in other actual use case, but I would solve the toy problem with `drop_duplicates`, and not unique:\r\n\r\n```\r\nIn [26]: first_contact = (s.sort_index().drop_duplicates(keep='first')\r\n    ...:                   .reset_index().rename(columns={'index': 'first_contact'}))\r\n\r\n\r\nIn [27]: pd.merge(s.reset_index(), first_contact, how='left')\r\nOut[27]: \r\n                          index User_ID                 first_contact\r\n0 2018-10-24 04:42:06.315789568    dWxi 2018-10-24 04:42:06.315789568\r\n1 2018-10-24 07:51:34.736841984    mkqZ 2018-10-24 07:51:34.736841984\r\n2 2018-10-24 09:49:28.421052672    dWxi 2018-10-24 04:42:06.315789568\r\n3 2018-10-24 12:46:18.947368448    dWxi 2018-10-24 04:42:06.315789568\r\n4 2018-10-24 16:33:41.052631552    iPSk 2018-10-24 16:33:41.052631552\r\n5 2018-10-24 18:31:34.736841984    iPSk 2018-10-24 16:33:41.052631552\r\n6 2018-10-24 19:34:44.210526208    mkqZ 2018-10-24 07:51:34.736841984\r\n```\r\n\r\n(I won't say this is the most beautiful code, but the annoyance are rather in different things: not being able to set the name of the index in `reset_index`, losing the index in `pd.merge` so therefore needing to do the reset_index, and then actually still a set_index to get to desired result)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433406099",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-433406099",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 433406099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQwNjA5OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T13:24:18Z",
    "updated_at": "2018-10-26T13:24:18Z",
    "author_association": "MEMBER",
    "body": "I see now you touched in your last post as answer to Jeff on reasons why you don't want the above, because a merge is less efficient? \r\nBut for that, you mention the case of when the uniques are formed over multiple columns. So for this case, we still need some way for getting the inverse here (so Series.unique would not be enough, we then either need return_inverse in DataFrame.drop_duplicates or add a DataFrame.unique, whatever it would be)\r\n\r\n---\r\n\r\nAnother way, assuming the uniques and inverse are arrays:\r\n\r\n```\r\nIn [50]: uniques = np.array(['dWxi', 'mkqZ', 'iPSk'], dtype=object)\r\n\r\nIn [51]: inverse = np.array([0, 1, 0, 0, 2, 2, 1])\r\n\r\nIn [52]: _, index = np.unique(inverse, return_index=True)\r\n\r\nIn [53]: result = s.to_frame()\r\n\r\nIn [54]: result['first_contact'] = s.index[index][inverse]\r\n\r\nIn [55]: result\r\nOut[55]: \r\n                              User_ID                 first_contact\r\n2018-10-24 04:42:06.315789568    dWxi 2018-10-24 04:42:06.315789568\r\n2018-10-24 07:51:34.736841984    mkqZ 2018-10-24 07:51:34.736841984\r\n2018-10-24 09:49:28.421052672    dWxi 2018-10-24 04:42:06.315789568\r\n2018-10-24 12:46:18.947368448    dWxi 2018-10-24 04:42:06.315789568\r\n2018-10-24 16:33:41.052631552    iPSk 2018-10-24 16:33:41.052631552\r\n2018-10-24 18:31:34.736841984    iPSk 2018-10-24 16:33:41.052631552\r\n2018-10-24 19:34:44.210526208    mkqZ 2018-10-24 07:51:34.736841984\r\n```\r\n\r\nSo from that, a `return_index` might actually be interesting"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434064677",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-434064677",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 434064677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDA2NDY3Nw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-29T20:22:22Z",
    "updated_at": "2018-10-29T20:22:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\nThanks for your response:\r\n\r\n> I see now you touched in your last post as answer to Jeff on reasons why you don't want the above, because a merge is less efficient?\r\n\r\nBecause to merge with the `uniques` (or applying `drop_duplicates` in your example), one needs to first calculate the whole hashtable for the calculation of the `uniques`, and *then* recalculate it for the merge.\r\n\r\n> But for that, you mention the case of when the uniques are formed over multiple columns. So for this case, we still need some way for getting the inverse here (so Series.unique would not be enough, we then either need return_inverse in DataFrame.drop_duplicates or add a DataFrame.unique, whatever it would be)\r\n\r\nThis was not as cleanly delineated as it could have been:\r\n* reconstruction for `DataFrame` needs to be handled as well (whether in `drop_duplicates` or a to-be-added `unique`)\r\n* the inverse makes much more sense for `unique` (as you remarked)\r\n* the longer-term goal for me is to enable `df.unique(return_inverse=True)`\r\n\r\n> Another way, assuming the uniques and inverse are arrays:\r\n  [...]\r\n  So from that, a return_index might actually be interesting\r\n\r\nI'm really -1 on having to deal with both `return_index` and `return_inverse`, because then you'd need *four objects* to reconstruct (the unique, the array-index, the array-inverse, and finally, the original index) - numpy can't avoid it because there are no indexes, but pandas *can*. Furthermore that exact functionality is already available in numpy (aside the issue with sorting).\r\n\r\nI'm proposing a solution that's pandas-native, and only needs two objects for reconstruction (instead of four)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437116089",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-437116089",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 437116089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzExNjA4OQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T18:58:58Z",
    "updated_at": "2018-11-08T18:58:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\nFriendly ping. :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440432804",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-440432804",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 440432804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDQzMjgwNA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T21:18:23Z",
    "updated_at": "2018-11-20T21:18:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\nWith #23400 nearing completion, could you please have another look at this?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442990962",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-442990962",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 442990962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjk5MDk2Mg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T20:59:11Z",
    "updated_at": "2018-11-29T20:59:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\nNow that #23400 is in, could I please ask you for another comment? I'd like to proceed with:\r\n1. Changing the return type of `Series.unique` to `Series`\r\n1. Adding `return_inverse` to `Series.unique` / `Index.unique` (this needs the first step to be coherent, see any of my posts in this thread)\r\n1. ..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444604988",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-444604988",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 444604988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDYwNDk4OA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T19:08:56Z",
    "updated_at": "2018-12-05T19:08:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Copying from #24108:\r\n\r\n> @jreback: the question about the return value of .unique needs to be answered first; \r\n\r\nThis is what #24108 is about, since the issue had stalled for >1 months despite several pings.\r\n\r\n> @jreback: return an .array of the result (for Index and Series) is probably the most reasonable change and is mostly backward compatible\r\n\r\nI disagree with this quite strongly:\r\n* Changing `Index.unique` from `Index`->`ndarray` is *as much* of a breaking change as changing `Series.unique` from `ndarray`->`Series` (but has no benefits for reconstruction)\r\n* `Series.unique` already special-cases `Categorical` and `EA`. An `ndarray` fits even less as the return of a `Series` method for where pandas is heading.\r\n* Since `.unique` strongly advertises that it does not sort, there's an implicit index mapping happening already, only that it's very hard to coax out.\r\n* If it were to keep returning `ndarray`, having an inverse is basically impossible without running into several antipatterns.\r\n* etc.\r\n\r\n> @jreback: however better to bring this up on the issue (for unique return value)\r\n\r\nWould you mind chiming in here then?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/444659046",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22824#issuecomment-444659046",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22824",
    "id": 444659046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDY1OTA0Ng==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T21:37:27Z",
    "updated_at": "2018-12-05T21:37:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's just inconsistencies over inconsistencies (discovered while writing tests for a precursor PR of #24108):\r\n```\r\n>>> import pandas as pd\r\n>>> idx = pd.Index([0, 1, 1, 0])\r\n>>> pd.unique(idx)\r\narray([0, 1], dtype=int64)\r\n```\r\nSo `pd.unique(Index)` yields an array, except if the `Index` is categorical...?\r\n```\r\n>>> idx = idx.astype('category')\r\n>>> pd.unique(idx)\r\nCategoricalIndex([0, 1], categories=[0, 1], ordered=False, dtype='category')\r\n```"
  }
]
