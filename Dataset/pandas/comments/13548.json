[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230073617",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230073617",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230073617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDA3MzYxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T00:37:53Z",
    "updated_at": "2016-07-02T00:39:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is just partial string indexing: http://pandas.pydata.org/pandas-docs/stable/timeseries.html#datetimeindex-partial-string-indexing\n\nyou can do this on a particular MultiIndex level in 0.18.0 (some bugs are fixed in forthcoming 0.18.2)\n\nso not sure what you are actually motivating here - your use case is wel convered \n\npls add a more useful example \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230075137",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230075137",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230075137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDA3NTEzNw==",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T01:03:28Z",
    "updated_at": "2016-07-02T01:03:28Z",
    "author_association": "NONE",
    "body": "My point was to be able to do this type of slicing and indexing and any datetime columns (not just on DatetimeIndex). \n\nMy understanding from the documentation you sent is that this works only with DatetimeIndexes.\n\n> On Jul 1, 2016, at 8:38 PM, Jeff Reback notifications@github.com wrote:\n> \n> this is just partial string indexing: http://pandas.pydata.org/pandas-docs/stable/timeseries.html#datetimeindex-partial-string-indexing\n> \n> you can do this on a particular MultiIndex level in 0.18.2 (coming soon)\n> \n> so not sure what you are actually motivating here - your use case is wel convered\n> \n> pls add a more useful example\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230075517",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230075517",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230075517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDA3NTUxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T01:10:35Z",
    "updated_at": "2016-07-02T01:10:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "so set the index\n\nnot sure you gain much by doing this with yet another indexer \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230075963",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230075963",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230075963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDA3NTk2Mw==",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T01:19:39Z",
    "updated_at": "2016-07-02T01:19:39Z",
    "author_association": "NONE",
    "body": "First, setting an index, slicing, and then resetting the index is not very elegant. Correct if I'm wrong, but I think this is the only instance for which slicing is considerably easier when used as an index, compared to a column.\n\nThe other reason is that if the index is already set to another column, this operation requires saving the previous index, setting the column, slicing, and then setting back the index. Even more laborious\n\nGiven that time slices are extremely common, I still maintain that this would be a worthy addition.\n\nI feel like you are not convinced (perhaps because you don't work with datetime columns often?). Would adding such a new operator be too much work?\n\n> On Jul 1, 2016, at 9:10 PM, Jeff Reback notifications@github.com wrote:\n> \n> so set the index\n> \n> not sure you gain much by doing this with yet another indexer\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230076811",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230076811",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230076811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDA3NjgxMQ==",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T01:37:32Z",
    "updated_at": "2016-07-02T01:39:24Z",
    "author_association": "NONE",
    "body": "Perhaps another motivating example would be useful. Consider this Dataframe:\n\n``` python\ndf = pd.DataFrame([[pd.to_datetime('2016-4-3 15:32:04'), pd.to_datetime('2016-9-9 15:32:04')],\n                  [pd.to_datetime('2016-5-3 12:19:04'), pd.to_datetime('2016-12-9 19:12:04')]], \n                  columns=['start_date', 'end_date'], \n                 index=[\"a\",\"b\"])\ndf\n```\n\n```\n           start_date            end_date\na 2016-04-03 15:32:04 2016-09-09 15:32:04\nb 2016-05-03 12:19:04 2016-12-09 19:12:04\n  ...\n\n```\n\nLet's say I want to see the events that started in April '16, and that ended any time before December '16. \n\nWith the \"hack\" that you mention, this would look like this:\n\n``` python\ndf.reset_index().set_index('start_date')['2016-4'].reset_index().set_index('end_date')[:'2016-12'].reset_index().set_index('index')\n```\n\nA lot of unnecessary index operations, but otherwise the date portions are very easy to see.\n\nThe preferred, \"non-hack\" version using datetimes it would look like this: (again, please do tell me if there is a better way)\n\n``` python\ndf[(df['start_date'] >= pd.to_datetime('2016-4')) & (df['start_date'] < pd.to_datetime('2016-6')) & \\\n   (df['end_date'] <= pd.to_datetime('2016-12'))\n   ]\n```\n\nThis is probably the worst. Since `pd.to_datetime` returns a `Timestamp`, month or year equality does not work. In order to get the results for a single month, I have to use inequalities, and think about adding the next month. If I decide to look at a different month later, I have to reparse the whole line, and then remember to also change the next time.\n\nMy proposed method would involve using a new date indexer. Let's call it `ds`:\n\n``` python\ndf.ds['start_date','2016-4'].ds['end_date',:'2016-12']\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230103464",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230103464",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230103464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDEwMzQ2NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T14:09:08Z",
    "updated_at": "2016-07-02T14:12:29Z",
    "author_association": "MEMBER",
    "body": "@bbirand First, this issue is not specific to datetime columns. In general, you can easily slice on an index (eg with an integer index `df[3:10]`), but not on a column (the slice example when the int index is a column would be `df[(df['int_col'] >= 3) & (df['int_col'] <= 10)]`).\n\nSecond, in those comparisons, you can also use strings (which makes the code a little bit less long). So your above line would look like:\n\n```\ndf[(df['start_date'] >= '2016-4') & (df['start_date'] < '2016-6') & (df['end_date'] <= '2016-12')]\n```\n\n> I feel like you are not convinced (perhaps because you don't work with datetime columns often?). Would adding such a new operator be too much work?\n\nIt is not necessarily a matter of 'too much work' (I don't think it would be much work). It is more a question of \"is this functionality worth the addition of a new method to the API, and so worth the added complexity\". Pandas dataframes already have very many (too many, depending on your opinion) methods, so we are very carefully with adding new ones. \nIn any case, if we add something, I think it should be more generic.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230103626",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230103626",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230103626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDEwMzYyNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T14:12:02Z",
    "updated_at": "2016-07-02T14:12:02Z",
    "author_association": "MEMBER",
    "body": "Something that also makes filtering rows on column values a bit easier is the `query` method. For example, you can do:\n\n```\nIn [24]: df.query(\"'2016-04-01' < start_date < '2016-04-20'\")\nOut[24]:\n           start_date            end_date\na 2016-04-03 15:32:04 2016-09-09 15:32:04\n```\n\n(in this case chained comparisons work and make it a bit shorter)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230103936",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230103936",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230103936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDEwMzkzNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T14:18:42Z",
    "updated_at": "2016-07-02T14:18:42Z",
    "author_association": "MEMBER",
    "body": "And actually, what you ask for maybe already exists in the form of `between`?\n\n```\nIn [30]: df[df['start_date'].between('2016-04', '2016-06') & df['end_date'].between('2016-01', '2016-12')]\nOut[30]:\n           start_date            end_date\na 2016-04-03 15:32:04 2016-09-09 15:32:04\n\n```\n\nThis does not do the implicit datetime string slicing (eg '2013' which is interpreted as '2013-01-01':'2013-12-31), but is quite close to the `ds` indexer you proposes I think.\n\nIn any case, my last posts also show that there are already many ways :-) That does of course not mean it is never worth to add yet another way if it is a clear improvement.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230118984",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230118984",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230118984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDExODk4NA==",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T19:52:28Z",
    "updated_at": "2016-07-02T19:52:28Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche Thanks a lot for the replies! Your points are very well taken.\n\nFirst off, I didn't know that one could use strings for Datetime comparisons:\n\n```\ndf['start_date'] >= '2016-4'\n```\n\nI looked through the documentation again, but still couldn't find any mention of it (though I'm happy to accept the responsibility for my oversight). This is already a big step up from before.\n\nI looked for the `between()` method, but couldn't find that either. I know there is a `truncate` command also, which I tried to use. It never felt natural though. Both of these seem to be limited in that they only work with inequalities. \n\nWhat's really useful when doing time-series analysis, is to select a particular month or year. In essence, the `ds` selector I propose could get rid of both of these functions.\n\nOut of the examples that you give, I think the one using `query` is closest to what I'd have in mind (besides adding a new operator/method). So maybe adding the `=` functionality found in partial strings to `query` would be an improvement. For instance, for doing this to pick out elements that are within that month:\n\n```\ndf.query(\"start_date = '2016-04'\")\n```\n\nThen my example would be\n\n```\ndf.query(\"start_date = '2016-4'\").query(\"end_date < '2016-12'\")\n```\n\nIn short:\n1. Given the existence `between` and `truncate`, it might make sense API-wise to create a single way of accessing datetimes (both inequality and equality).\n2. Adding this functionality to `query` would also be useful.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230182255",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-230182255",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 230182255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDE4MjI1NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-03T23:35:44Z",
    "updated_at": "2016-07-03T23:35:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bbirand so partial string indexing which is the link I pointed above has some caveats.\n- It is not 'meant' for production, meaning it is a convenience for interactively working with data.\n- It works because the index itself is monotonic (meaning its sorted), and so can be very efficient.\n\nIf its NOT sorted, and generally a column is not, then boolean indexing is used and so its the same as selecting (as you have above); this is true for `.query` as well.\n\nThis is why indexes are special and can have a special syntax. This is not applicable more generally. Further I would be really really hesistant to introduce more non-production oriented convenience features such as this.\n\nIn fact we are going to be moving away from unexpected things like:\n\n`df['2016']`, though still allow `df.loc['2016']` as the first actually slices the ROWS even though its typically a COLUMN indexer.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/236207439",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-236207439",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 236207439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjIwNzQzOQ==",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-29T15:12:39Z",
    "updated_at": "2016-07-29T15:12:39Z",
    "author_association": "NONE",
    "body": "Hi @jreback ,\n\nThanks for the explanation. I see that you've closed the issue, so I won't drag this on any longer. But if I can humbly comment on one point, it would be this:\n\n> It is not 'meant' for production, meaning it is a convenience for interactively working with data.\n\nI'd be very careful while defining what really consists of \"production\". The vast, vast majority of people I know that use Pandas, use it first and foremost as an interactive environment. So in that context, \"production\" features would be exactly things that make it easy to deal with basic data analysis tasks, say via quick indexing.\n\nIt seems that your definition of production is vastly different. I realized that things like the safety of operations become important when code is meant to run non-interactively. \n\nIn order to deal with this vast discrepancy in usage, my 2c would be to have a type of global flag. When I launch Jupyter Notebook, and I'm playing around with data, I can use all sorts of shortcuts that made Pandas so attractive for data analysis work. When I have a good first version, I can change the flag, which may output warnings for \"unsafe\" operations, like indexing shortcuts, and ask the user to change these more specific and safe versions.\n\nI realize this issue is not the best place to discuss this, but I figured I'd note this here and get your thoughts before creating any more issues. What do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/236216394",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-236216394",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 236216394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjIxNjM5NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-29T15:45:43Z",
    "updated_at": "2016-07-29T15:45:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bbirand this certainly could be enabled via an option (and actually prob should be).  That's exactly what I mean by 'production'. A non-interactive run may, or may not have the same semantics / usage as an interactive environment. This could be configurable.\n\nIf you are willing to submit a pull-request for this, great.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/236538849",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-236538849",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 236538849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjUzODg0OQ==",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-01T09:56:22Z",
    "updated_at": "2016-08-01T09:56:22Z",
    "author_association": "NONE",
    "body": "@jreback I'll definitely take a stab at it! But should I then start a new issue for this \"production vs interactive configuration\" topic?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/236539554",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13548#issuecomment-236539554",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13548",
    "id": 236539554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjUzOTU1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-01T09:59:33Z",
    "updated_at": "2016-08-01T09:59:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "sure\n"
  }
]
