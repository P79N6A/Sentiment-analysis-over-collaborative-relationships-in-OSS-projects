[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50912255",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7897#issuecomment-50912255",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7897",
    "id": 50912255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTEyMjU1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-01T17:31:41Z",
    "updated_at": "2014-08-01T17:31:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, actually it should always return `True`. You cannot construct an empty MultiIndex at all. But more to the point, this is a very odd thing to do and is ambiguous (maybe this should ALWAYS raise).. See docs (for Series), here: http://pandas.pydata.org/pandas-docs/stable/gotchas.html\n\nand in reality this should simply raise. its a numpy artifact that it does not.\n\nyou should do:\n\n```\nif len(my_frame.index):\n    pass \n```\n\nor \n\n```\nif len(pandas_object):\n    pass\n```\n\nas the index can never be None\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50913921",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7897#issuecomment-50913921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7897",
    "id": 50913921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTEzOTIx",
    "user": {
      "login": "langmore",
      "id": 178152,
      "node_id": "MDQ6VXNlcjE3ODE1Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/178152?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/langmore",
      "html_url": "https://github.com/langmore",
      "followers_url": "https://api.github.com/users/langmore/followers",
      "following_url": "https://api.github.com/users/langmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/langmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/langmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/langmore/subscriptions",
      "organizations_url": "https://api.github.com/users/langmore/orgs",
      "repos_url": "https://api.github.com/users/langmore/repos",
      "events_url": "https://api.github.com/users/langmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/langmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-01T17:47:04Z",
    "updated_at": "2014-08-01T17:47:04Z",
    "author_association": "NONE",
    "body": "The case that caused a bug for me was this:\n\n``` python\n# Reindex by a common index\nnew_index = frame_1.index.intersection(frame_2.index)\nframe_1 = frame_1.reindex(index=new_index)\nframe_2 = frame_2.reindex(index=new_index)\n```\n\nThe natural thing to do, since you have `new_index` ready, is to check if it is empty.  The natural python way to do this is with `if new_index`.  Since the `levels` array in `new_index` is empty, I would expect `bool(new_index)` to be `False` (or to raise a `ValueError` such as numpy arrays do). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50914145",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7897#issuecomment-50914145",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7897",
    "id": 50914145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTE0MTQ1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-01T17:49:14Z",
    "updated_at": "2014-08-01T17:49:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "can u post the starting indexes? or a facsimile ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50919703",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7897#issuecomment-50919703",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7897",
    "id": 50919703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTE5NzAz",
    "user": {
      "login": "langmore",
      "id": 178152,
      "node_id": "MDQ6VXNlcjE3ODE1Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/178152?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/langmore",
      "html_url": "https://github.com/langmore",
      "followers_url": "https://api.github.com/users/langmore/followers",
      "following_url": "https://api.github.com/users/langmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/langmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/langmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/langmore/subscriptions",
      "organizations_url": "https://api.github.com/users/langmore/orgs",
      "repos_url": "https://api.github.com/users/langmore/repos",
      "events_url": "https://api.github.com/users/langmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/langmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-01T18:38:40Z",
    "updated_at": "2014-08-01T18:38:40Z",
    "author_association": "NONE",
    "body": "My previous comment (about my bug) was confusing.  The bug occurred when there was a non-empty index intersection, and I therefore expected to step into an `if` block.  Since `bool` returned `False`, my code did not step in.\n\n``` python\n>>> frame_1 = pandas.DataFrame({'col1': [1, 2]},\n                               index= pandas.MultiIndex.from_tuples([('A', 1), ('A', 2)]))\n>>> frame_2 = pandas.DataFrame({'col1': [1, 2]},\n                               index= pandas.MultiIndex.from_tuples([('A', 1), ('A', 3)]))\n>>> common_index = frame_1.index.intersection(frame_2.index)\n>>> common_index\nMultiIndex(levels=[[u'A'], [1]],\n           labels=[[0], [0]],\n           sortorder=0)\n```\n\nAnd then\n\n``` python\n>>> if common_index:\n         print \"Stepped in\"\n        else:\n          print \"Did not step in\"\n\nDid not step in\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50920135",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7897#issuecomment-50920135",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7897",
    "id": 50920135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTIwMTM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-01T18:42:27Z",
    "updated_at": "2014-08-01T18:42:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok I'll have a look\n\nI don't this was defined and relied on numpy behavior. was always false because of the way a MultiIndex is defined\n\nI think it's reasonable to make the **nonzero** simply return the len boolean\nbut let me see\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50943234",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7897#issuecomment-50943234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7897",
    "id": 50943234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTQzMjM0",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-01T22:48:54Z",
    "updated_at": "2014-08-01T22:48:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is such an awesome source of silent bugs\n\n+1. IMO doing anything other than raising would be surprising (same argument as Series and DataFrame).\n\n_Wow to the other PR this inspired!_\n"
  }
]
