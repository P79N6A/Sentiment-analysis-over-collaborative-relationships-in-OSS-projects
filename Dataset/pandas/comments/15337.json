[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278165095",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-278165095",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 278165095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE2NTA5NQ==",
    "user": {
      "login": "erewok",
      "id": 4587833,
      "node_id": "MDQ6VXNlcjQ1ODc4MzM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4587833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erewok",
      "html_url": "https://github.com/erewok",
      "followers_url": "https://api.github.com/users/erewok/followers",
      "following_url": "https://api.github.com/users/erewok/following{/other_user}",
      "gists_url": "https://api.github.com/users/erewok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erewok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erewok/subscriptions",
      "organizations_url": "https://api.github.com/users/erewok/orgs",
      "repos_url": "https://api.github.com/users/erewok/repos",
      "events_url": "https://api.github.com/users/erewok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erewok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T22:34:06Z",
    "updated_at": "2017-02-07T22:35:00Z",
    "author_association": "NONE",
    "body": "Couldn't help exploring it a bit because the test-case is so easy. \r\n\r\nI installed the develop branch of pandas from source just now and traced the bug back to where it enters the parser defined in [cython](https://github.com/pandas-dev/pandas/blob/master/pandas/parser.pyx#L281) at this point in the `read_csv` process: https://github.com/pandas-dev/pandas/blob/master/pandas/io/parsers.py#L1534\r\n\r\nSeems like a sound strategy would be to maybe rule out that whatever is getting passed to that parser inside `parser.pyx` is definitely not a string or file handle or buffer and if so to reject it?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278167490",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-278167490",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 278167490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE2NzQ5MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T22:42:11Z",
    "updated_at": "2017-02-07T22:42:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "sure it must be a string, bytes, or a file-like (which mainly involves having ``.read``, ``.seek`` (maybe ``tell``) I think might be enough)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278168851",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-278168851",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 278168851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE2ODg1MQ==",
    "user": {
      "login": "erewok",
      "id": 4587833,
      "node_id": "MDQ6VXNlcjQ1ODc4MzM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4587833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erewok",
      "html_url": "https://github.com/erewok",
      "followers_url": "https://api.github.com/users/erewok/followers",
      "following_url": "https://api.github.com/users/erewok/following{/other_user}",
      "gists_url": "https://api.github.com/users/erewok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erewok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erewok/subscriptions",
      "organizations_url": "https://api.github.com/users/erewok/orgs",
      "repos_url": "https://api.github.com/users/erewok/repos",
      "events_url": "https://api.github.com/users/erewok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erewok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T22:46:49Z",
    "updated_at": "2017-02-07T22:54:53Z",
    "author_association": "NONE",
    "body": "Yeah, but I am suspicious that pandas is testing for `read` and friends in the wrong place or that simply asking for those attributes is too fuzzy.\r\n\r\nFor instance, I isolated the error to this chunk of code: \r\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/parser.pyx#L700\r\n\r\nIf you comment this `elif hasattr...` block out, it throws the following, which is way better than a segfault:\r\n\r\n```\r\nOSError: Expected file path name or file-like object, got <class 'unittest.mock.Mock'> type\r\n```\r\n\r\nHowever, I think the test inside `TextReader` here is little bit too soft: my mock object goes through because it pretends to have a `read` attribute, but it might also be possible to craft something malicious with a `read` attribute, and it seems like that thing-with-a-read-object would make it all the way through to this cython parser. \r\n\r\nAnyway, I believe that the test for whether it really is a `filepath_or_buffer` should happen much earlier in the call to `read_csv` and I am not sure testing whether there's a `read` or `seek` attribute is good enough?\r\n\r\n**Edit:** I may have misread your comment, a bit. Apologies for any confusion."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278173733",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-278173733",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 278173733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE3MzczMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T23:05:06Z",
    "updated_at": "2017-02-07T23:05:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pellagic-puffbomb sure, you can test earlier. We have a fairly complicated opening process (because of many many possibilities of what it could be, encoding, from url etc). So it may not be possible to do it earlier (though it certainly might be).\r\n\r\nI wouldn't worry about malicious things, that is the resonsibility of the user. We necessarily have a string to a file (which may or may not exist), or a file-like object which we read bytes. If someone wants to give a duck-like that is just fine.\r\n\r\nIf you can check earlier and have everything passing that would be great. We DO have a fairly extensive test suite for things like this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278177092",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-278177092",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 278177092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE3NzA5Mg==",
    "user": {
      "login": "erewok",
      "id": 4587833,
      "node_id": "MDQ6VXNlcjQ1ODc4MzM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4587833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erewok",
      "html_url": "https://github.com/erewok",
      "followers_url": "https://api.github.com/users/erewok/followers",
      "following_url": "https://api.github.com/users/erewok/following{/other_user}",
      "gists_url": "https://api.github.com/users/erewok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erewok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erewok/subscriptions",
      "organizations_url": "https://api.github.com/users/erewok/orgs",
      "repos_url": "https://api.github.com/users/erewok/repos",
      "events_url": "https://api.github.com/users/erewok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erewok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T23:20:38Z",
    "updated_at": "2017-02-07T23:20:38Z",
    "author_association": "NONE",
    "body": "Alright, well, I have an idea that may help a bit."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291272299",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-291272299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 291272299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTI3MjI5OQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T20:59:41Z",
    "updated_at": "2017-04-03T20:59:58Z",
    "author_association": "MEMBER",
    "body": "Hmm...seems like this thread has gone a bit stale.  Reading through this, I do agree that we can do a better job if we encounter invalid objects for parsing.  For example, specifying the Python engine leads to this:\r\n~~~python\r\n>>> read_csv(mock.Mock(), engine=\"python\")\r\n...\r\nTypeError: argument 1 must be an iterator\r\n~~~\r\n\r\nThat comes from Python's native `csv` library.  Not really that useful either.\r\n\r\nThe problem with attribute checking is that `mock` objects have overloaded the `__getattr__` method so that most attributes will exist.  However, one that does catch my attention is this:\r\n\r\n~~~python\r\n>>> mock.Mock().__iter__\r\n...\r\nAttributeError: __iter__\r\n~~~\r\n\r\nIf you take a look at the C-code for Python's `csv` library <a href=\"https://hg.python.org/cpython/file/tip/Modules/_csv.c#l967\">here</a>, that's how they catch that `mock.Mock()` is an invalid file object."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291273399",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-291273399",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 291273399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTI3MzM5OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T21:03:53Z",
    "updated_at": "2017-04-03T21:04:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "it *might* be enough to check if a file-like (IOW not a string) ``is_iterator`` and otherwise raise a nice error (before passing to to anything else). xref to #15862.\r\n\r\n> sure it must be a string, bytes, or a file-like (which mainly involves having .read, .seek (maybe tell) I think might be enough).\r\n\r\nfrom above, we might need a more sophisticated test (which could use ``is_iterator``)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291285671",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-291285671",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 291285671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTI4NTY3MQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T21:54:52Z",
    "updated_at": "2017-04-03T21:55:24Z",
    "author_association": "MEMBER",
    "body": "How about adding that as a check in `pandas.io.common`?  We do plenty of file-handling there for all of our I/O file operations.  It seems like we should be able to abstract this validation logic."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291289712",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15337#issuecomment-291289712",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15337",
    "id": 291289712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTI4OTcxMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T22:13:50Z",
    "updated_at": "2017-04-03T22:14:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gfyoung \r\n\r\nyes ``is_file_like`` would be great! (*maybe* could put in ``pandas.types.common`` alternatively). its kind of a 'type' check.\r\n\r\nThen calling in parser (and other methods would be great). "
  }
]
