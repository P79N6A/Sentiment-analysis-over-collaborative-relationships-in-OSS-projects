[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17199502",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-17199502",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 17199502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTk5NTAy",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-29T22:46:48Z",
    "updated_at": "2013-04-29T22:47:00Z",
    "author_association": "MEMBER",
    "body": "Is the desired behavior to compare two strings from two series for the same index?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17200017",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-17200017",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 17200017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjAwMDE3",
    "user": {
      "login": "darindillon",
      "id": 2766856,
      "node_id": "MDQ6VXNlcjI3NjY4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2766856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darindillon",
      "html_url": "https://github.com/darindillon",
      "followers_url": "https://api.github.com/users/darindillon/followers",
      "following_url": "https://api.github.com/users/darindillon/following{/other_user}",
      "gists_url": "https://api.github.com/users/darindillon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darindillon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darindillon/subscriptions",
      "organizations_url": "https://api.github.com/users/darindillon/orgs",
      "repos_url": "https://api.github.com/users/darindillon/repos",
      "events_url": "https://api.github.com/users/darindillon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darindillon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-29T22:58:55Z",
    "updated_at": "2013-04-29T22:58:55Z",
    "author_association": "NONE",
    "body": "Yes, that's right. It seems like very reasonable functionality. But right now, not only is it not supported, but pandas silently returns the wrong answer rather than returning an error. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17200159",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-17200159",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 17200159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjAwMTU5",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-29T23:02:31Z",
    "updated_at": "2013-04-29T23:02:31Z",
    "author_association": "MEMBER",
    "body": "For now you can do something like:\n\n``` python\nc = Series(map(lambda x, y: x.startswith(y), a, b), a.index)\n```\n\nwhere `a` and `b` are `Series` with the same index.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17200219",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-17200219",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 17200219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjAwMjE5",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-29T23:04:33Z",
    "updated_at": "2013-04-29T23:07:15Z",
    "author_association": "MEMBER",
    "body": "There's a function called `_map` that lives in `core.strings` and right now it only maps over single argument functions. Extend that, and you're in business, but then you're just rewriting Python's map function using NA's which might not be such a bad idea.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17201133",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-17201133",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 17201133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjAxMTMz",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-29T23:30:18Z",
    "updated_at": "2013-04-29T23:30:18Z",
    "author_association": "MEMBER",
    "body": "Also, see `str_cat` for an example. It works with N inputs.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17290032",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-17290032",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 17290032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjkwMDMy",
    "user": {
      "login": "darindillon",
      "id": 2766856,
      "node_id": "MDQ6VXNlcjI3NjY4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2766856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darindillon",
      "html_url": "https://github.com/darindillon",
      "followers_url": "https://api.github.com/users/darindillon/followers",
      "following_url": "https://api.github.com/users/darindillon/following{/other_user}",
      "gists_url": "https://api.github.com/users/darindillon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darindillon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darindillon/subscriptions",
      "organizations_url": "https://api.github.com/users/darindillon/orgs",
      "repos_url": "https://api.github.com/users/darindillon/repos",
      "events_url": "https://api.github.com/users/darindillon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darindillon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-01T16:23:22Z",
    "updated_at": "2013-05-01T16:23:22Z",
    "author_association": "NONE",
    "body": "Yes, there are many workarounds. But the more important issue is just having pandas clearly signal (via an error) that a workaround is needed -- today pandas silently just does the wrong thing, so I didn't even notice that it wasn't working until very late in the process.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/417526858",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-417526858",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 417526858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzUyNjg1OA==",
    "user": {
      "login": "christopherkang",
      "id": 42285636,
      "node_id": "MDQ6VXNlcjQyMjg1NjM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/42285636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christopherkang",
      "html_url": "https://github.com/christopherkang",
      "followers_url": "https://api.github.com/users/christopherkang/followers",
      "following_url": "https://api.github.com/users/christopherkang/following{/other_user}",
      "gists_url": "https://api.github.com/users/christopherkang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christopherkang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christopherkang/subscriptions",
      "organizations_url": "https://api.github.com/users/christopherkang/orgs",
      "repos_url": "https://api.github.com/users/christopherkang/repos",
      "events_url": "https://api.github.com/users/christopherkang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christopherkang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-31T02:05:51Z",
    "updated_at": "2018-08-31T02:05:51Z",
    "author_association": "NONE",
    "body": "Could we close the issue and re-open if necessary?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/417529968",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-417529968",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 417529968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzUyOTk2OA==",
    "user": {
      "login": "darindillon",
      "id": 2766856,
      "node_id": "MDQ6VXNlcjI3NjY4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2766856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darindillon",
      "html_url": "https://github.com/darindillon",
      "followers_url": "https://api.github.com/users/darindillon/followers",
      "following_url": "https://api.github.com/users/darindillon/following{/other_user}",
      "gists_url": "https://api.github.com/users/darindillon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darindillon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darindillon/subscriptions",
      "organizations_url": "https://api.github.com/users/darindillon/orgs",
      "repos_url": "https://api.github.com/users/darindillon/repos",
      "events_url": "https://api.github.com/users/darindillon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darindillon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-31T02:23:05Z",
    "updated_at": "2018-08-31T02:23:26Z",
    "author_association": "NONE",
    "body": "I'd say no -- it is a legit issue that we hope to fix someday (Pandas is silently returning obviously wrong data from a use case that seems intuitive, so we should either support that case or else signal an error). If we defer this as low-priority for another five years, then I'm ok with that. But closing it implies we think this is not a legit issue or its philosophically incompatible with pandas or whatever. Do you believe that? I think everyone agrees we should fix this, it's just a question of priority, right? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/417534264",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-417534264",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 417534264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzUzNDI2NA==",
    "user": {
      "login": "christopherkang",
      "id": 42285636,
      "node_id": "MDQ6VXNlcjQyMjg1NjM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/42285636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christopherkang",
      "html_url": "https://github.com/christopherkang",
      "followers_url": "https://api.github.com/users/christopherkang/followers",
      "following_url": "https://api.github.com/users/christopherkang/following{/other_user}",
      "gists_url": "https://api.github.com/users/christopherkang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christopherkang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christopherkang/subscriptions",
      "organizations_url": "https://api.github.com/users/christopherkang/orgs",
      "repos_url": "https://api.github.com/users/christopherkang/repos",
      "events_url": "https://api.github.com/users/christopherkang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christopherkang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-31T02:48:10Z",
    "updated_at": "2018-08-31T02:48:10Z",
    "author_association": "NONE",
    "body": "Cool, that makes more sense. Yeah, it's a lower priority issue, but I agree that it's still important that it's eventually fixed.\r\n(Also, I'm new to open source contribution, so I really appreciate your explanation! 😄 )"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426527825",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-426527825",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 426527825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjUyNzgyNQ==",
    "user": {
      "login": "kokes",
      "id": 8451755,
      "node_id": "MDQ6VXNlcjg0NTE3NTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8451755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kokes",
      "html_url": "https://github.com/kokes",
      "followers_url": "https://api.github.com/users/kokes/followers",
      "following_url": "https://api.github.com/users/kokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/kokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kokes/subscriptions",
      "organizations_url": "https://api.github.com/users/kokes/orgs",
      "repos_url": "https://api.github.com/users/kokes/repos",
      "events_url": "https://api.github.com/users/kokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T06:39:49Z",
    "updated_at": "2018-10-03T06:40:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just tested it and it no longer returns False, it gives you NaN instead. I suppose that OP suggested that either this works or there is a TypeError triggered? (It returns NaN for all other types, try passing True, 0, lists, ...)\r\n\r\n```\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: df = pd.DataFrame({'a': ['foo', 'bar'], 'b': ['foox', 'xxx']})\r\n\r\nIn [3]: df.b.str.startswith(df.a)\r\nOut[3]: \r\n0   NaN\r\n1   NaN\r\nName: b, dtype: float64```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426538063",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3485#issuecomment-426538063",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3485",
    "id": 426538063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjUzODA2Mw==",
    "user": {
      "login": "kokes",
      "id": 8451755,
      "node_id": "MDQ6VXNlcjg0NTE3NTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8451755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kokes",
      "html_url": "https://github.com/kokes",
      "followers_url": "https://api.github.com/users/kokes/followers",
      "following_url": "https://api.github.com/users/kokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/kokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kokes/subscriptions",
      "organizations_url": "https://api.github.com/users/kokes/orgs",
      "repos_url": "https://api.github.com/users/kokes/repos",
      "events_url": "https://api.github.com/users/kokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T07:27:31Z",
    "updated_at": "2018-10-03T07:27:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suppose something like this would work? I'm not sure about conventions regarding string type testing (`compat.string_types` or `is_string_like`?) and perhaps the tests are written in a non-standard way.\r\n\r\n```\r\ndiff --git a/pandas/core/strings.py b/pandas/core/strings.py\r\nindex 861739f6c..f85bd62a0 100644\r\n--- a/pandas/core/strings.py\r\n+++ b/pandas/core/strings.py\r\n@@ -458,6 +458,8 @@ def str_startswith(arr, pat, na=np.nan):\r\n     3    False\r\n     dtype: bool\r\n     \"\"\"\r\n+    if not isinstance(pat, compat.string_types):\r\n+        raise TypeError(\"pattern supplied in str.startswith has to be a string\")\r\n     f = lambda x: x.startswith(pat)\r\n     return _na_map(f, arr, na, dtype=bool)\r\n \r\n@@ -513,6 +515,8 @@ def str_endswith(arr, pat, na=np.nan):\r\n     3    False\r\n     dtype: bool\r\n     \"\"\"\r\n+    if not isinstance(pat, compat.string_types):\r\n+        raise TypeError(\"pattern supplied in str.endswith has to be a string\")\r\n     f = lambda x: x.endswith(pat)\r\n     return _na_map(f, arr, na, dtype=bool)\r\n \r\ndiff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py\r\nindex bd450cdcf..5ce9bbbfd 100644\r\n--- a/pandas/tests/test_strings.py\r\n+++ b/pandas/tests/test_strings.py\r\n@@ -609,6 +609,13 @@ class TestStringMethods(object):\r\n         result = values.str.endswith('foo', na=False)\r\n         tm.assert_series_equal(result, exp.fillna(False).astype(bool))\r\n \r\n+    def test_startswith_endswith_non_str_patterns(self):\r\n+        values = Series(['foo', 'bar'])\r\n+        invalid_patterns = [0, True, values]\r\n+        for pattern in invalid_patterns:\r\n+            pytest.raises(TypeError, values.str.startswith, pattern)\r\n+            pytest.raises(TypeError, values.str.endswith, pattern)\r\n+\r\n     def test_title(self):\r\n         values = Series([\"FOO\", \"BAR\", NA, \"Blah\", \"blurg\"])\r\n \r\n```"
  }
]
