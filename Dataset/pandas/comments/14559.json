[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/257809909",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14559#issuecomment-257809909",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14559",
    "id": 257809909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzgwOTkwOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-02T09:11:47Z",
    "updated_at": "2016-11-02T09:11:47Z",
    "author_association": "MEMBER",
    "body": "Not sure what you are trying to do, as `to_datetime` acts on a full series as well, so the idiomatic thing to do is `pd.to_datetime(s)`.\n\nThe docstring of `apply` says about `convert_dtype`:\n\n> convert_dtype : boolean, default True\n> \n> > Try to find better dtype for elementwise function results. If\n> >         False, leave as dtype=object\n\nSo this keyword only applies when the function works elementwise. As mentioned above, `pd.to_datetime` can act on the full series at once. \nIf you take an example function that will only work element-wise, you can see the effect of this `convert_dtype` keyword\n\n```\nIn [2]: s = pd.Series(['a', 'b'])\n\nIn [3]: s\nOut[3]: \n0    a\n1    b\ndtype: object\n\nIn [4]: def f(val):\n   ...:     if val == 'a':\n   ...:         return 1\n   ...:     else:\n   ...:         return 2\n\nIn [6]: s.apply(f)\nOut[6]: \n0    1\n1    2\ndtype: int64\n\nIn [7]: s.apply(f, convert_dtype=False)\nOut[7]: \n0    1\n1    2\ndtype: object\n```\n\nBut again, your code does not feel idiomatic, so please clarify what you are trying to achieve. In many cases you don't want to keep this object dtype. Having the series a `datetime64` dtype gives you access to specific functionality.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/257821018",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14559#issuecomment-257821018",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14559",
    "id": 257821018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzgyMTAxOA==",
    "user": {
      "login": "PyDeq",
      "id": 7268060,
      "node_id": "MDQ6VXNlcjcyNjgwNjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7268060?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PyDeq",
      "html_url": "https://github.com/PyDeq",
      "followers_url": "https://api.github.com/users/PyDeq/followers",
      "following_url": "https://api.github.com/users/PyDeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/PyDeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PyDeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PyDeq/subscriptions",
      "organizations_url": "https://api.github.com/users/PyDeq/orgs",
      "repos_url": "https://api.github.com/users/PyDeq/repos",
      "events_url": "https://api.github.com/users/PyDeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PyDeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-02T10:00:49Z",
    "updated_at": "2016-11-02T10:13:16Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche, I was under impression that `pandas.to_datetime` is applied elementwise since:\n\n``` python\n>>> isinstance(pandas.to_datetime, numpy.ufunc)\nFalse\n```\n\nAnyway, `s.apply(lambda x: pandas.to_datetime(x), convert_dtype=False)` behaves the same and that is applied elementwise for sure.\n\nIn my case, my function receives different functions to apply on the series and thus it does not know beforehand whether it will get `pandas.to_datetime` or anything else. A simplified version of my code looks like:\n\n``` python\nclass Foo:\n    def __init__(self, generator):\n        self.dataframe = generator.generate()\n\n    def convert(self, name, converter):\n        self.dataframe[name] = self.dataframe[name].apply(converter, convert_dtype=False)\n```\n\nIn my case, it's much easier to describe the behavior of the `convert` method as that it preserves `dtype=object` rather than explaining that it applies some smart logic to change the dtype. Also it's much easier to unit test the method since a `DataFrame` with the same values but different dtypes do not equal and it's easier to create an \"object dtyped\" `DataFrame` than a `DataFrame` with each column having different dtype. In my case, code simplicity is preferred over performance optimizations.\n\nAlso, regardless of my use case, **the behavior of the `apply` method does not match the documentation** [1] and thus it's a bug either in the code or in the documentation.\n\n[1] if not in the case of `apply(pandas.to_datetime)` then in the case of `apply(lambda x: pandas.to_datetime(x))` (or some more complex function that may return `pandas.Timestamp`) for sure\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/257828670",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14559#issuecomment-257828670",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14559",
    "id": 257828670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzgyODY3MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-02T10:35:59Z",
    "updated_at": "2016-11-02T10:35:59Z",
    "author_association": "MEMBER",
    "body": "I understand that you don't want to distinguish between elementwise functions or not in your application, and for that the use of `apply` is appropriate. \nBut if you only want object dtype, then don't convert your data. I really don't recommend trying to keep everything as object dtype. Once you start doing manipulations with those data, data types will get deduced and you get dtypes anyway.\n\n> it's much easier to unit test the method since a DataFrame with the same values but different dtypes do not equal \n\nyou can specify not to check the dtype\n\n>  it's easier to create an \"object dtyped\" DataFrame than a DataFrame with each column having different dtype\n\nthat is not true, as when creating a dataframe the default is to deduce the dtypes from the data you pass in\n\nIf you want to keep object dtype, you can simply do `.astype(object)` after the apply call (or `astype(self.dataframe[name].dtype)` if it is not always object dtype)\n\n---\n\nFor the specifics, the reason this does not work as documented for datetimes, is this:\n\n```\nIn [43]: pd.Series(np.array([1, 2], dtype=object))\nOut[43]: \n0    1\n1    2\ndtype: object\n\nIn [45]: pd.Series(np.array([pd.Timestamp('2012-01-01'), pd.Timestamp('2012-01-02')], dtype=object))\nOut[45]: \n0   2012-01-01\n1   2012-01-02\ndtype: datetime64[ns]\n```\n\nUnder the hood, if `convert_dtypes=False`, on object array is returned, but when putting this in a series the object dtype is kept for numerical values, but not for datetimes.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/257833779",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14559#issuecomment-257833779",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14559",
    "id": 257833779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzgzMzc3OQ==",
    "user": {
      "login": "PyDeq",
      "id": 7268060,
      "node_id": "MDQ6VXNlcjcyNjgwNjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7268060?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PyDeq",
      "html_url": "https://github.com/PyDeq",
      "followers_url": "https://api.github.com/users/PyDeq/followers",
      "following_url": "https://api.github.com/users/PyDeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/PyDeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PyDeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PyDeq/subscriptions",
      "organizations_url": "https://api.github.com/users/PyDeq/orgs",
      "repos_url": "https://api.github.com/users/PyDeq/repos",
      "events_url": "https://api.github.com/users/PyDeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PyDeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-02T11:00:32Z",
    "updated_at": "2016-11-02T11:00:32Z",
    "author_association": "NONE",
    "body": "> you can specify not to check the dtype\n\nYou mean using `.astype(object)` on both `DataFrames` before? Good idea, I'll consider that. Thank you.\n\n> that is not true, as when creating a dataframe the default is to deduce the dtypes from the data you pass in\n\nIn which case, I'm hitting the #14558 issue. I'll retest this idea with Pandas 0.20. Thank you.\n\n@jorisvandenbossche, OK, I think I can use one of the approaches you have suggested. Anyway, may I ask you to reopen this in order to track the issue between the behavior and the documentation?\n"
  }
]
