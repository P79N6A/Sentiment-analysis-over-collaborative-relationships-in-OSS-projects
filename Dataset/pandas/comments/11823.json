[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/163962321",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11823#issuecomment-163962321",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11823",
    "id": 163962321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Mzk2MjMyMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-11T15:22:33Z",
    "updated_at": "2015-12-11T15:22:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "we had an issue about this IIRC, but can't seem to locate it.\n\ncan you replace the top with some self-reproducing examples that demonstrate this? (use StringIO and in-line data)\n\n(its actually an easy fix, just need some tests cases). The issue is that we pass a dict of the results to the DataFrame constructor.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/165682662",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11823#issuecomment-165682662",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11823",
    "id": 165682662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTY4MjY2Mg==",
    "user": {
      "login": "sxwang",
      "id": 1084048,
      "node_id": "MDQ6VXNlcjEwODQwNDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1084048?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sxwang",
      "html_url": "https://github.com/sxwang",
      "followers_url": "https://api.github.com/users/sxwang/followers",
      "following_url": "https://api.github.com/users/sxwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/sxwang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sxwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sxwang/subscriptions",
      "organizations_url": "https://api.github.com/users/sxwang/orgs",
      "repos_url": "https://api.github.com/users/sxwang/repos",
      "events_url": "https://api.github.com/users/sxwang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sxwang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-18T06:17:32Z",
    "updated_at": "2015-12-18T06:17:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe I'm missing something, but this doesn't appear to be an easy fix ...\nThe c parser `pandas/parser.pyx` first converts the `usecols` to a set, removing duplicates:\n\nin `cdef class TextReader, function __init__`:\n\n``` python\n        # suboptimal\n        if usecols is not None:\n            self.has_usecols = 1\n            self.usecols = set(usecols)\n```\n\nBut then it seems that when it's reading the file, it stops after `len(usecols)` values are read. So in the example above, that 3rd column is never read:\nIn `TextReader._convert_column_data`:\n\n``` python\n            elif self.usecols and nused == len(self.usecols):\n                # Once we've gathered all requested columns, stop. GH5766\n                break\n```\n\nThis occurs before the dict of the result is passed to the DataFrame constructor.\nI'm wondering why `usecols` needs to be a set. Apart from that, any suggestions?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/165788762",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11823#issuecomment-165788762",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11823",
    "id": 165788762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTc4ODc2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-18T14:21:13Z",
    "updated_at": "2015-12-18T14:21:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sxwang yeh might be a bit more involved :)\n\nYou can try to change `usecols` to a list and see where that takes you\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166499519",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11823#issuecomment-166499519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11823",
    "id": 166499519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjQ5OTUxOQ==",
    "user": {
      "login": "sxwang",
      "id": 1084048,
      "node_id": "MDQ6VXNlcjEwODQwNDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1084048?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sxwang",
      "html_url": "https://github.com/sxwang",
      "followers_url": "https://api.github.com/users/sxwang/followers",
      "following_url": "https://api.github.com/users/sxwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/sxwang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sxwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sxwang/subscriptions",
      "organizations_url": "https://api.github.com/users/sxwang/orgs",
      "repos_url": "https://api.github.com/users/sxwang/repos",
      "events_url": "https://api.github.com/users/sxwang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sxwang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-22T03:56:10Z",
    "updated_at": "2015-12-22T03:56:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I think `usecols` does not need to be a set, I changed it to a list, that seems to fix it for the c engine. I also updated the python engine to handle duplicated columns/usecols and now it should behave the same.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216395100",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11823#issuecomment-216395100",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11823",
    "id": 216395100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjM5NTEwMA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-02T23:31:01Z",
    "updated_at": "2016-05-02T23:32:05Z",
    "author_association": "MEMBER",
    "body": "Just jumping in now: while I am +1 for changing `usecols` to a `list`, I am -0.5 for declaring the situation described in the issue as being a bug for `pandas`.  If you are using duplicate names and then specifying those same duplicate `str` names as `usecols`, that is inherently ambiguous IMO.  If you want to be crystal clear, you should be using integer indices instead.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/221129835",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11823#issuecomment-221129835",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11823",
    "id": 221129835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTEyOTgzNQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T23:56:17Z",
    "updated_at": "2016-05-24T00:00:12Z",
    "author_association": "MEMBER",
    "body": "Having played around with this issue for a little bit, the fix is not very clear-cut, and in fact the changes made in #11882 were not very robust.  This is because the underlying code currently assumes that we iterate through the column names in the original file _only once_ because we assume that the column names in `usecols` are unique.  This results in phenomenon like this using the changes in #11882:\n\n``` python\n>>> data = '1,2,3'\n>>> names = ['A', 'A', 'B']\n>>> read_csv(StringIO(data), names=names, usecols=[0,1,1], engine='c')\n   A  A.1    B\n0  1    2  NaN\n>>> read_csv(StringIO(data), names=names, usecols=[0,1,1], engine='python')\n   A  A.1\n0  1    2\n```\n\nThat leads to a couple of points and questions:\n\n1) A complete fix would involve refactoring the column iterations so that it varies depending on whether we have a `usecols` attribute (i.e. non-null) or not.  Is that complexity worth it?\n\n2) Duplicate string names - allowed or not?  I'm in the NOT camp because that is inherently ambiguous, especially if we have duplicate column names.  Duplicate integer indices are more acceptable IMO.\n\n3) How much should we allow the user to duplicate?  For example, should we allow `usecols=[1] * 1000` if `names=['a', 'b']`?\n\n<b>OR...</b>\n\nWhat is the use case exactly for being able to duplicate `usecols` like this?  Can we go for simple documentation change that says we process ONLY unique column names / indices and error if there are duplicates?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/479455388",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11823#issuecomment-479455388",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11823",
    "id": 479455388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTQ1NTM4OA==",
    "user": {
      "login": "kimsey0",
      "id": 984760,
      "node_id": "MDQ6VXNlcjk4NDc2MA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/984760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kimsey0",
      "html_url": "https://github.com/kimsey0",
      "followers_url": "https://api.github.com/users/kimsey0/followers",
      "following_url": "https://api.github.com/users/kimsey0/following{/other_user}",
      "gists_url": "https://api.github.com/users/kimsey0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kimsey0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kimsey0/subscriptions",
      "organizations_url": "https://api.github.com/users/kimsey0/orgs",
      "repos_url": "https://api.github.com/users/kimsey0/repos",
      "events_url": "https://api.github.com/users/kimsey0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kimsey0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-03T11:48:08Z",
    "updated_at": "2019-04-03T11:48:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've just been hit by this bug as well. I expected `pd.read_csv('pandas.csv', header=0, usecols=['A', 'B'])` to give the same result as `pd.read_csv('pandas.csv', header=0)` for a CSV file:\r\n\r\n```\r\nA,A,B\r\n1,2,3\r\n```\r\n\r\nI understand why this can't be changed now due to backwards compatibility, but it would at least be nice to document for parameter `usecols`."
  }
]
