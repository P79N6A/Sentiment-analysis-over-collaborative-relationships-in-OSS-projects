[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30025405",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5657#issuecomment-30025405",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5657",
    "id": 30025405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDI1NDA1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-06T20:12:41Z",
    "updated_at": "2013-12-06T20:12:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is not a simple 'in' check, it is actually matching a regex; pls compare against that (you can match with 'in' with `isin`). put up that timing too.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/30537884",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5657#issuecomment-30537884",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5657",
    "id": 30537884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM3ODg0",
    "user": {
      "login": "dragoljub",
      "id": 2701562,
      "node_id": "MDQ6VXNlcjI3MDE1NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2701562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dragoljub",
      "html_url": "https://github.com/dragoljub",
      "followers_url": "https://api.github.com/users/dragoljub/followers",
      "following_url": "https://api.github.com/users/dragoljub/following{/other_user}",
      "gists_url": "https://api.github.com/users/dragoljub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dragoljub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dragoljub/subscriptions",
      "organizations_url": "https://api.github.com/users/dragoljub/orgs",
      "repos_url": "https://api.github.com/users/dragoljub/repos",
      "events_url": "https://api.github.com/users/dragoljub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dragoljub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-13T19:46:57Z",
    "updated_at": "2013-12-13T20:01:52Z",
    "author_association": "NONE",
    "body": "df.columns.isin() requires you to explicitly enumerate a list of patterns you want to check against. Its still ~20% slower than the list comprehension. From what I can tell if you are doing a column select that checks for a sub string 'TEST' its faster and easier to do the list comprehension. If you do lots of selections like this you may hit the slowdown of loading the re library.\n\nI'm not sure what most people use when filtering columns but for me its usually simply checking if a column contains a sub string. In that case, 3x speedup is nice to see from a simple implementation. Not sure if there is a way to check if a regex is being passed and if not use the faster code.\n\n``` python\n%timeit df[df.columns[df.columns.isin(['TEST','TEST2'])]]\n1000 loops, best of 3: 468 µs per loop\n\n%timeit df[[col for col in df.columns if 'TEST' in col]]\n1000 loops, best of 3: 378 µs per loop\n\n```\n"
  }
]
