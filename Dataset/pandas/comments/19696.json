[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367573022",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-367573022",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 367573022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzU3MzAyMg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T05:37:12Z",
    "updated_at": "2018-02-22T05:37:12Z",
    "author_association": "MEMBER",
    "body": "Should these have a `_typ` attribute?  If so, should `SparseArray._typ` be changed from \"array\" to something more specific?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367656517",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-367656517",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 367656517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzY1NjUxNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T11:47:16Z",
    "updated_at": "2018-02-22T11:47:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "We're adding an ABCExtensionArray and `EA._type` with the value 'extension'\nin https://github.com/pandas-dev/pandas/pull/19520.\n\nSparseArray being _array isn't the perfect name, but I don't think that\nmatters, do you? The more important name is the ABC.\n\nOn Wed, Feb 21, 2018 at 11:37 PM, jbrockmendel <notifications@github.com>\nwrote:\n\n> Should these have a _typ attribute? If so, should SparseArray._typ be\n> changed from \"array\" to something more specific?\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/19696#issuecomment-367573022>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIkHC59w-YBE7ATTy1l6gtL-GgsSgks5tXP0MgaJpZM4SFUFN>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367996665",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-367996665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 367996665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk5NjY2NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T12:29:47Z",
    "updated_at": "2018-02-23T12:29:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Quick status update. The two big ones are in, and now work can mostly proceed in parallel (aside from https://github.com/pandas-dev/pandas/pull/19863 which a couple of my followups depend on).\r\n\r\nI'm currently rebasing all my branches on master and will make PRs today.\r\n\r\nI'll also go through all the TODOs we've added an make issues / checkboxes for those.\r\n\r\nIf anyone is interested in working on these, `PeriodArray` will likely be the most sizable PR that I don't really have a start on, aside from a now out of date branch."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368046031",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-368046031",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 368046031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODA0NjAzMQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T15:44:47Z",
    "updated_at": "2018-02-23T15:44:47Z",
    "author_association": "MEMBER",
    "body": "re PeriodArray, were in spitting distance of being ready to refactor arith/cmp methods out from DatetimeIndexOpsMixin/DatetimeIndexTimedeltaIndex/PeriodIndex.  If you can wait for #19847, #19835, and #19800, I can get the ball rolling and save you some work."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374016573",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-374016573",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 374016573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDAxNjU3Mw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-18T17:05:48Z",
    "updated_at": "2018-10-16T16:55:29Z",
    "author_association": "MEMBER",
    "body": "- [x] Refactor arithmetic methods from DatetimeIndexOpsMixin/DatetimeIndex/TimedeltaIndex/PeriodIndex into array classes (#19902)\r\n- [x] Refactor comparison methods from DTI/TDI/PI into array classes\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374768882",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-374768882",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 374768882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDc2ODg4Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T21:48:59Z",
    "updated_at": "2018-03-20T21:49:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Porting from https://github.com/pandas-dev/pandas/pull/19902#issuecomment-374768547\r\n\r\nWhen do we want to call it and release 0.23? I can get `__setitem__` finished up tonight or tomorrow. Groupby is I think close to being done (we have the API issue for `argsort` and a similar one for factorize. Actually supporting groupby doesn't seem difficult). Once those are done, I would call the interface sufficiently complete (aside perhaps from support for arithmetic ops, which I haven't really looked into. I'm not sure how difficult that will be, but I imagine it'll be some effort).\r\n\r\nThe big remaining question then is moving other array types to EAs\r\n\r\n- Period\r\n- Interval\r\n- DatetimeTZ\r\n- Sparse\r\n\r\nDo we want to block 0.23 for those? Do we have an estimate for how long that would take?\r\n\r\ncc @shoyer @jreback @jorisvandenbossche @chris-b1."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374793177",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-374793177",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 374793177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDc5MzE3Nw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T23:34:36Z",
    "updated_at": "2018-03-20T23:34:36Z",
    "author_association": "MEMBER",
    "body": "> Do we have an estimate for how long that would take?\r\n\r\nFor the datetime/timedelta/period arrays (or the arithmetic/comparison bits of them), if/when #19902 goes through, I can get the next two PRs in that sequence out pretty quickly.  But after those are in there will be some non-trivial design decisions to be made.  The end of March would be an optimistic goal."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374977278",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-374977278",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 374977278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDk3NzI3OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T15:23:31Z",
    "updated_at": "2018-03-21T15:23:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-374768882\r\n\r\ncc @shoyer @jreback @jorisvandenbossche @chris-b1 (don't think you got pinged on this, since I did it in an edit)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375651581",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-375651581",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 375651581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY1MTU4MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T12:35:50Z",
    "updated_at": "2018-03-23T12:35:50Z",
    "author_association": "MEMBER",
    "body": "I think ideally, we would already have converted Interval, Period, etc to use ExtensionArrays *before* doing a release, as this will exercise and stress-test the interface a lot. \r\nBut on the other hand, for projects like cyberpandas and geopandas, it would also be easier to already have a release that supports a basic extension array interface, making it easier for users to test it. \r\nAnd we can be clear that the extension array interface for the extension *authors* will still be subject to change (which does not mean things will change for their *users*). So that would be in favor of releasing more quickly.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375653047",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-375653047",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 375653047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY1MzA0Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T12:42:06Z",
    "updated_at": "2018-03-23T12:42:06Z",
    "author_association": "MEMBER",
    "body": "Another topic we need to discuss (although actually trying to implement it might make a discussion more tangible), is whether we want our current Index classes to subclass the ExtensionArrays (eg `PeriodIndex` subclassing `PeriodArray`) or to be composed of an ExtensionArray (`PeriodIndex._data` being a `PeriodArray`). \r\n\r\nI think we previously thought to do composition, but @TomAugspurger said here https://github.com/pandas-dev/pandas/pull/19902#issuecomment-374606612: (also @jreback mentioned this in https://github.com/pandas-dev/pandas/pull/19957#issuecomment-375618584)\r\n\r\n> I've been going back and forth on which approach is best here. I'm slightly coming around to the idea of subclassing, but haven't 100% settled yet.\r\n\r\n@TomAugspurger what do you see as advantages of using inheritance instead of composition? \r\n\r\nI didn't really think about in detail (code-wise), but: `Series` uses composition, so not doing this for Index might reduce ability to share code. `CategoricalIndex` is already an existing example of Index with ExtensionArray that does composition. Other index classes with numeric or object dtypes (the ones having a numpy array under the hood) will keep using composition."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375694003",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-375694003",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 375694003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY5NDAwMw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T15:02:23Z",
    "updated_at": "2018-03-23T15:02:23Z",
    "author_association": "MEMBER",
    "body": "> I didn't really think about in detail (code-wise), but: Series uses composition, so not doing this for Index might reduce ability to share code\r\n\r\nI think Series might be the wrong comparison: FooBlock should be the analogous object to FooIndex, shouldn't it?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375992437",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-375992437",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 375992437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTk5MjQzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-25T18:31:56Z",
    "updated_at": "2018-03-25T18:31:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "So I am a big +1 on making Index a subclass of EA. This will unify the external interface with the internal one (e.g. the user facing API). And will allow us to make sure the impl shares code (e.g. mainly this will involve changing some bespoke impl details of Index to conform to the new patterns of EA).\r\n\r\nWe already have a de-facto implementation of this for Datetime w/tz, meaning we are using it *like* an EA. subclassing DTI will just formalize this. We also get the Period & II impl for free if we do this. We could also change the categorical impl to actually use CI and again get some more code sharing / harmony.\r\n\r\nThe point of all this is to really dogfood EA internally in pandas. This will simplify code and promote a unified interface.\r\n\r\nThen once the above is done, we can actually *remove* all of the Block types that are not simple ones. These would then merely become EA implementations. Again this would simplify the implementation details and friction that we currently have. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376064695",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-376064695",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 376064695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjA2NDY5NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T06:56:23Z",
    "updated_at": "2018-03-26T06:56:23Z",
    "author_association": "MEMBER",
    "body": "> So I am a big +1 on making Index a subclass of EA. This will unify the external interface with the internal one (e.g. the user facing API).\r\n\r\nWhat do you mean with unify interfaces? Which interfaces? You mean the ExtensionArray API and the Index API? I don't think those should be unified. The ExtensionArray interface is deliberately *much* smaller.\r\n\r\n> We already have a de-facto implementation of this for Datetime w/tz, meaning we are using it like an EA. \r\n\r\nAs far as I know, `DatetimeIndex` is an Index composed of a array holding the values, not subclassing anything. It is true that a Series of tz-aware data holds a DatetimeIndex, but they can both perfectly hold a DatetimeArray, without the Index subclassing from it. \r\nAgain, this might be a good approach, but what you raise are not actual reasons to do it IMO.\r\n\r\n> The point of all this is to really dogfood EA internally in pandas. \r\n\r\nWe can perfectly dogfood EA internally in pandas using composition instead of subclassing. So this is not relevant for the discussion (it is not about whether we *want to use* EAs internally in pandas, but *how* to use them).\r\n\r\n> Then once the above is done, we can actually remove all of the Block types that are not simple ones. \r\n\r\nThat's already the goal of the ExtensionBlock. Again that is AFAIK no argument in favor or against subclassing.\r\n \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376278562",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-376278562",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 376278562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjI3ODU2Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T19:10:51Z",
    "updated_at": "2018-03-26T19:10:51Z",
    "author_association": "MEMBER",
    "body": "The main advantage I see to subclassing is avoiding `series._values._foo_values.values._bar_values...`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376284210",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-376284210",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 376284210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjI4NDIxMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T19:31:04Z",
    "updated_at": "2018-03-26T19:31:04Z",
    "author_association": "MEMBER",
    "body": "@jbrockmendel you give an example with Series. But I don't think we are actually contemplating making Series a subclass of extension array? Or are we, which would be a huge change in design? (in my head at least it was only about Index) \r\nBut to the point (considering Index): it will be no more the case than it is today, but only more consistently (Index is now composed of an array, but how this is done varies among different subtypes), and we also actually *have* different array representions that won't go away (the extension array, underlying codes, coerced to numpy array in some way, ..), so we will have such attributes anyhow. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376303043",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-376303043",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 376303043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjMwMzA0Mw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T20:36:05Z",
    "updated_at": "2018-03-26T20:36:05Z",
    "author_association": "MEMBER",
    "body": "@jorisvandenbossche You're right, a more apt example would have been `series._data.blocks[0].values.data._values...`.  The point is that there is a cost to layers of unwrapping as well as variants of values/_values/_ndarray_values/data/_data/... and if a layer of unwrapping can be avoided without adding complications elsewhere it would be nice."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377505412",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-377505412",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 377505412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzUwNTQxMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T11:25:03Z",
    "updated_at": "2018-03-30T11:25:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> we also actually have different array representions that won't go away (the extension array, underlying codes, coerced to numpy array in some way, ..),\r\n\r\n@jreback, @jbrockmendel do you have thoughts on this? `NumericIndex` is still going to compose an ndarray as the `._data` attribute. Shouldn't our extension index classes do the same, but with an EA? I think declaring that `._data` is a `Union[ndarray, ExtensionArray]` makes sense."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377570421",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-377570421",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 377570421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU3MDQyMQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T16:59:51Z",
    "updated_at": "2018-03-30T16:59:51Z",
    "author_association": "MEMBER",
    "body": "> is still going to compose an ndarray as the ._data attribute. Shouldn't our extension index classes do the same\r\n\r\nAssuming we are going with the Index-subclasses-EA approach, then yes.  That said two preferences on naming conventions:\r\n\r\n- `Block.values` should also be brought into alignment with whatever name is chosen for this.\r\n- It would be really nice if all references to `BlockManager` could be found by grepping for `\\._data`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377572566",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-377572566",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 377572566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU3MjU2Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T17:09:32Z",
    "updated_at": "2018-03-30T17:09:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Assuming we are going with the Index-subclasses-EA approach, then yes\r\n\r\nI don't follow. Doesn't the fact that `Int64Index` composing an ndarray as `._values` argue for `CategoricalIndex` composing a `Categorical` as `._values`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377585768",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-377585768",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 377585768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU4NTc2OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T18:08:30Z",
    "updated_at": "2018-03-30T18:08:30Z",
    "author_association": "MEMBER",
    "body": "> Assuming we are going with the Index-subclasses-EA approach, then yes\r\n\r\nTom's question was rather about *not* assuming this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377596850",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-377596850",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 377596850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU5Njg1MA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T18:58:16Z",
    "updated_at": "2018-03-30T18:58:16Z",
    "author_association": "MEMBER",
    "body": "> I don't follow. Doesn't the fact that Int64Index composing an ndarray as ._values argue for CategoricalIndex composing a Categorical as ._values?\r\n\r\n> Tom's question was rather about not assuming this.\r\n\r\nMy answer then has to be a convex combination of \"I don't have an opinion\" and \"I don't have an informed opinion.\""
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380521881",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380521881",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380521881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDUyMTg4MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T16:52:56Z",
    "updated_at": "2018-04-11T16:52:56Z",
    "author_association": "MEMBER",
    "body": "Should this issue have a ExtensionArray label?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380522828",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380522828",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380522828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDUyMjgyOA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T16:56:02Z",
    "updated_at": "2018-04-11T16:56:02Z",
    "author_association": "MEMBER",
    "body": "New thought on inheritance vs composition: there are `cache_readonly` attributes on` Index` subclasses that would need to be `property`s on mutable `Array` classes.  With inheritance we can just override the relevant properties on the subclass; getting the same affect with composition is less obvious."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380555622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380555622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380555622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDU1NTYyMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T18:43:24Z",
    "updated_at": "2018-04-11T18:43:24Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  With inheritance we can just override the relevant properties on the subclass; getting the same affect with composition is less obvious.\r\n\r\nFWIW, https://github.com/pandas-dev/pandas/pull/20611/files didn't require any changes to the read only attributes (e.g. `_hasnans`). It's using the same code as before."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380570988",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380570988",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380570988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDU3MDk4OA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T19:36:52Z",
    "updated_at": "2018-04-11T19:36:52Z",
    "author_association": "MEMBER",
    "body": "I don't know the `IntervalIndex` code that well, but it looks like `is_non_overlapping_monotonic` is a `cache_readonly` on the Index and a `property` on the Array.  AFAICT the Array class never actually _uses_ that attribute.  To make the analogy hold, I think we need to imagine a hypothetical in which a bunch of IntervalArray methods access `is_non_overlapping_monotonic`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380712083",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380712083",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380712083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDcxMjA4Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T07:53:33Z",
    "updated_at": "2018-04-12T07:53:33Z",
    "author_association": "MEMBER",
    "body": "> To make the analogy hold, I think we need to imagine a hypothetical in which a bunch of IntervalArray methods access is_non_overlapping_monotonic.\r\n\r\nCan you explain this further? What is the problem with the Array class using it for the Index having cached it?\r\n\r\nThe Index caching such properties of the underlying values is *in principle* somewhat brittle in case somebody changes the underlying values of the Index in place; but, users are not 'supposed' to do that, and you can currently already break some of the cached properties of Index in a similar way.\r\n\r\nFurther, if we want, we can actually also think about caching expensive properties on Arrays as well, if we want. We just need to make sure to clear the cache once its underlying values (left, right, closed in case of Interval) are changed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380859516",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380859516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380859516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDg1OTUxNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T16:09:00Z",
    "updated_at": "2018-04-12T16:25:09Z",
    "author_association": "MEMBER",
    "body": "@jreback @TomAugspurger to come back to our discussion on hangout\r\n\r\nAs I understand it now (Jeff, correct me if I am wrong), one of the main arguments you make is: \r\n\r\n> Index needs to be an ExtensionArray (= adhere to the \"ExtensionArray interface\", not necessarily by subclassing it), to ensure:  \r\na) we have a guaranteed consistency in the public methods (like the IndexOpsMixin for Series/Index guarantees that a subset of their methods are consistent)\r\nb) to avoid internally special casing between Index and Arrays\r\n\r\nI agree that those two points are important to have, but I think the main discussion is how to achieve this. IMO it is not needed for Index to *be* an ExtensionArray to have those points.\r\n\r\nBut let's use some very *concrete examples* to discuss this, so using some methods that are *currently* part of the ExtensionArray interface\r\n\r\n* Factorization: we have a `ExtensionArray._values_for_factorize` as a way to implement array-specific factorization (eg for `Categorical` this are the codes), so that `pd.factorize(array)` works correctly (to be correct, `pd.factorize` only needs to `EA.factorize()` method, but the *interface* also provides the other methods to implement them). \r\n  And of course, it would be nice that `pd.factorize(index[EA])` works consistently and without special casing. I think this is already the case, without the need that `Index` itself has this `_values_for_factorize` method.\r\n\r\n  The `factorize` implementation does this:\r\n \r\n  https://github.com/pandas-dev/pandas/blob/2794474334cbd53315c248b605953579d010c693/pandas/core/algorithms.py#L606-L611\r\n\r\n  So basically it checks for extension dtypes, in that case gets the extension array, and calls its own `factorize` method. In the other case, it is converted to a numpy array and uses the corresponding hashtable.\r\n\r\n  The above code will work perfectly fine for Index of which the dtype is an extension dtype, without that it has the full extension array interface of `_values_for_factorize ` and without that there is a special casing for \"index\". The special casing is for extension arrays vs numpy arrays (everything else like Series, Index, list, .. boils down to one of those two code paths).\r\n\r\n* Missing values: we have an `ExtensionArray.isna`. Yes, we want that `Index.isna` and `ExtensionArray.isna` behave consistently. But IMO it does not make sense that Index and ExtensionArray share an implementation from a mixin like we have IndexOpsMixin for Index/Series. \r\n  The reason for this is that `isna` will depend on the physical layout of your extension array (eg in my case of GeometryArray, my data our pointers and use `data == 0` for `isna`), and one of the reasons to have an ExtensionArray interface is because the rest of pandas (Series, Index) does not need to be aware of the exact physical implementation of the array, but just knows that it can call `isna` to get the desired result. So in that sense, `Index[EA].isna` will need to call `EA.isna`.\r\n\r\nIn both those examples, I think we indeed want that Index and ExtensionArray have a consistent *public interface*, I fully agree on that. But I don't think we want them both having the *ExtensionArray interface* (because this interface is more than the public `factorize`, `unique`, `isna`, ... methods, but also the extension array specific things like `_values_for_factorize`, `_from_factorized`, ... which are IMO not needed for the Index class)\r\n\r\n--> So let's think about how to make the public API consistent and having this consistency guaranteed by the code, without making Index an actual extension array? \r\n\r\nJust brainstorming here, but we could have a `ArrayLikeMixin` where we put abstract methods for all the public methods of ExtensionArray that we want to be consistent on Index. Those methods will all need to be only abstract without any code, because the actual implementation will not be shared between Index and ExtensionArray. But by having this, we can ensure that both Index and ExtensionArray need to implement those methods. It could maybe also be a good home for shared docstrings.\r\n(I don't think it guarantees consistent signatures, as you can always override an abstract method with a different signature, but we could add a test that manually checks for such consistency, or it might be that tools like LGTM check for this).\r\n\r\n@jreback does the above explanation makes some sense? (which does not mean you have to agree :)) Do you understand our standpoint? \r\nThanks to the discussion, I now understand your point of that we have to pay attention to a consistent interface for Index/Array, as that is indeed an important point (eg Index.factorize and EA.factorize already have a slightly different signature). I just disagree that ensuring this consistency means that Index needs to have the *full* extension array interface.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380867409",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380867409",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380867409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDg2NzQwOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T16:34:10Z",
    "updated_at": "2018-04-12T16:34:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "One more specific case, this time in Series / DataFrame constructors which @jreback mentioned on the call.\r\n\r\nIndexes have names, while arrays don't. So `Series.__init__` will have to have an `isinstance(data, Index)` check to extract the name."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380870191",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380870191",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380870191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDg3MDE5MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T16:42:52Z",
    "updated_at": "2018-04-12T16:42:52Z",
    "author_association": "MEMBER",
    "body": "> Can you explain this further? What is the problem with the Array class using it for the Index having cached it?\r\n\r\n```\r\ndti  = pd.date_range('2016-01-01', periods=3)\r\nother = dti - dti.shift(1)\r\n\r\n>>> dti + other\r\n>>> dti - other\r\n```\r\n\r\nUnder composition, both the addition and the subtraction ops involve lookups of `dti._values._hasnans`, which is not cached.  This is where the analogy breaks down, since `is_non_overlapping_monotonic` is never used by the `IntervalArray`, only the `IntervalIndex`.\r\n\r\n> and you can currently already break some of the cached properties of Index in a similar way.\r\n\r\nYah, if a user does that they're on their own.  This usage would render the cache invalid in all scenarios being discussed.\r\n\r\n> Further, if we want, we can actually also think about caching expensive properties on Arrays as well, if we want. \r\n\r\nYah, its doable, just less-obvious.  FWIW I'm coming around to liking the composition approach more and more.\r\n\r\nBTW sorry I missed the hangout.  UTC-7.  I'll take a look at the minutes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380873883",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19696#issuecomment-380873883",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19696",
    "id": 380873883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDg3Mzg4Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T16:54:34Z",
    "updated_at": "2018-04-12T16:54:34Z",
    "author_association": "MEMBER",
    "body": "> I'll take a look at the minutes.\r\n\r\nWe didn't take much notes, I think the main thing that came out of the discussion is my long comment above."
  }
]
