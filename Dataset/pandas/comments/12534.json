[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/192777596",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12534#issuecomment-192777596",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12534",
    "id": 192777596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mjc3NzU5Ng==",
    "user": {
      "login": "troglotit",
      "id": 10955264,
      "node_id": "MDQ6VXNlcjEwOTU1MjY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10955264?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troglotit",
      "html_url": "https://github.com/troglotit",
      "followers_url": "https://api.github.com/users/troglotit/followers",
      "following_url": "https://api.github.com/users/troglotit/following{/other_user}",
      "gists_url": "https://api.github.com/users/troglotit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troglotit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troglotit/subscriptions",
      "organizations_url": "https://api.github.com/users/troglotit/orgs",
      "repos_url": "https://api.github.com/users/troglotit/repos",
      "events_url": "https://api.github.com/users/troglotit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troglotit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-06T01:34:15Z",
    "updated_at": "2016-03-06T01:34:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's because of datetime64[ns] overflow. See #6741: other units of datetime64 are not implemented in pandas yet. \n\nHere's dirty workaround:\n\n```\nimport pandas as pd\ndates = pd.Series(pd.date_range('1700-01-01', periods=4500, freq='m'))\ndays_delta = (pd.Series(dates.values.astype('uint64') - dates.values.min().astype('uint64')))/86400000000000\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/192851869",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12534#issuecomment-192851869",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12534",
    "id": 192851869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mjg1MTg2OQ==",
    "user": {
      "login": "MMCMA",
      "id": 10107101,
      "node_id": "MDQ6VXNlcjEwMTA3MTAx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10107101?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MMCMA",
      "html_url": "https://github.com/MMCMA",
      "followers_url": "https://api.github.com/users/MMCMA/followers",
      "following_url": "https://api.github.com/users/MMCMA/following{/other_user}",
      "gists_url": "https://api.github.com/users/MMCMA/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MMCMA/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MMCMA/subscriptions",
      "organizations_url": "https://api.github.com/users/MMCMA/orgs",
      "repos_url": "https://api.github.com/users/MMCMA/repos",
      "events_url": "https://api.github.com/users/MMCMA/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MMCMA/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-06T09:41:25Z",
    "updated_at": "2016-03-06T09:41:25Z",
    "author_association": "NONE",
    "body": "Thanks for the workaround. Maybe it would make sense to raise at least warning \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/192891414",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12534#issuecomment-192891414",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12534",
    "id": 192891414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mjg5MTQxNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-06T13:52:28Z",
    "updated_at": "2016-03-06T13:52:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Timedeltas and Timestamps are based off numpy's int64, so we follow their wraparound behavior. I believe this is intentional.\n\n```\nIn [3]: np.int64(9223372036854775807)\nOut[3]: 9223372036854775807\n\nIn [4]: np.int64(9223372036854775807) + 1\nOut[4]: -9223372036854775808\n```\n\nAt the very least we should add this info to the documentation., \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193380233",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12534#issuecomment-193380233",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12534",
    "id": 193380233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzM4MDIzMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T18:21:49Z",
    "updated_at": "2016-03-07T18:22:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeh, see the numpy discussion [here](http://stackoverflow.com/questions/1970680/integer-overflow-in-numpy-arrays).\n\nThere is kind of a theoretical soln here. we could reduce the magniture when doing ops if they are equally compat\n\n```\nIn [19]: (dates.values.astype('i8') == (dates.values.astype('i8')/1000000)*1000000).all()\nOut[19]: True\n```\n\nBut this would be not be a complete panacea, though might make practical some results.\nKeeping in mind that this introduces a perf penalty _always_\n"
  }
]
