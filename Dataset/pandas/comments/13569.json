[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/230623384",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13569#issuecomment-230623384",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13569",
    "id": 230623384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDYyMzM4NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-05T22:39:35Z",
    "updated_at": "2016-07-05T22:39:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is using the expansion of the frame. This should simply fail. Detecting that this is actually happening is a bit tricky though.\n\nHere is how\n\n```\n> /Users/jreback/pandas/pandas/core/indexing.py(321)_setitem_with_indexer()\n-> index = self.obj.index\n(Pdb) p self.obj\n0    10\n1    20\n2    30\nName: a, dtype: int64\n(Pdb) l\n316                 if missing:\n317     \n318                     # reindex the axis to the new value\n319                     # and set inplace\n320                     if self.ndim == 1:\n321  ->                     index = self.obj.index\n322                         new_index = index.insert(len(index), indexer)\n323     \n324                         # we have a coerced indexer, e.g. a float\n325                         # that matches in an Int64Index, so\n326                         # we will not create a duplicate index, rather\n(Pdb) n\n> /Users/jreback/pandas/pandas/core/indexing.py(322)_setitem_with_indexer()\n-> new_index = index.insert(len(index), indexer)\n(Pdb) p self.obj._cacher\n('a', <weakref at 0x1124e62b8; to 'DataFrame' at 0x1123dde90>)\n```\n\nThis is a clue that you are being cached by someone else. (and in this part of the code you know you are expanding as `missing==True`). \n\nhere's the actual frame\n\n```\n(Pdb) p self.obj._cacher[1]()\n    a\n0  10\n1  20\n2  30\n```\n\nI _think_ you could then go back up to the frame and do the setitem (which will update everything appropriately, alternatively you could raise at this point). \n"
  }
]
