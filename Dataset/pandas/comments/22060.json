[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408079695",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22060#issuecomment-408079695",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22060",
    "id": 408079695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODA3OTY5NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T12:25:02Z",
    "updated_at": "2018-07-26T12:25:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are likely two different cases\r\n\r\nThe first, `b['col3'] = []`, converts  the DatetimetIndex to a RangeIndex, which shouldn't happen.\r\n\r\n```python\r\nIn [51]: b = a.set_index(['col0'])\r\n\r\nIn [52]: b.index\r\nOut[52]: DatetimeIndex([], dtype='datetime64[ns]', name='col0', freq=None)\r\n\r\nIn [53]: b['col3'] = []\r\n\r\nIn [54]: b.index\r\nOut[54]: RangeIndex(start=0, stop=0, step=1)\r\n```\r\n\r\nNot sure about the second issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408764869",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22060#issuecomment-408764869",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22060",
    "id": 408764869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODc2NDg2OQ==",
    "user": {
      "login": "s-wakaba",
      "id": 8855640,
      "node_id": "MDQ6VXNlcjg4NTU2NDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8855640?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s-wakaba",
      "html_url": "https://github.com/s-wakaba",
      "followers_url": "https://api.github.com/users/s-wakaba/followers",
      "following_url": "https://api.github.com/users/s-wakaba/following{/other_user}",
      "gists_url": "https://api.github.com/users/s-wakaba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s-wakaba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s-wakaba/subscriptions",
      "organizations_url": "https://api.github.com/users/s-wakaba/orgs",
      "repos_url": "https://api.github.com/users/s-wakaba/repos",
      "events_url": "https://api.github.com/users/s-wakaba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s-wakaba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T06:54:19Z",
    "updated_at": "2018-07-30T06:54:19Z",
    "author_association": "NONE",
    "body": "in 1st case (NOT MultiIndex), type of index is lost in method `DataFrame._ensure_valid_index()` in file `pandas/core/frame.py`. This method is used in `__setitem__()` and `insert()`, thus `DataFrame.insert()` also has the same problem.\r\n\r\n```python3\r\nIn [6]: b.shape\r\nOut[6]: (0, 2)\r\n\r\nIn [7]: b.index\r\nOut[7]: DatetimeIndex([], dtype='datetime64[ns]', name='col0', freq=None)\r\n\r\nIn [8]: b.insert(2, 'col3', [])\r\n\r\nIn [9]: b.index\r\nOut[9]: RangeIndex(start=0, stop=0, step=1)\r\n```\r\n\r\nin `_ensure_valid_index()` method,\r\n```python3\r\n# pandas/core/frame.py\r\nclass DataFrame(NDFrame):\r\n    ...\r\n    def _ensure_valid_index(self, value):\r\n        \"\"\"\r\n        ensure that if we don't have an index, that we can create one from the\r\n        passed value\r\n        \"\"\"\r\n        # GH5632, make sure that we are a Series convertible\r\n        if not len(self.index) and is_list_like(value):\r\n            ...\r\n```\r\n\r\nI'm not sure that it's appropriate that `if not len(self.index)` means \"if we don't have an index\"\r\n\r\nFurthermore, on substitution non-zero-length list into zero-rows DataFrame as new column, it also behaves strange.\r\n\r\n```python3\r\nimport pandas as pd\r\nfrom datetime import datetime\r\na = pd.DataFrame([[datetime.now(), 1234, 3.1415]], columns=['col0', 'col1', 'col2']).iloc[[]]\r\n\r\nb = a.set_index(['col0']) # b has 0 rows, 3 columns and non-multi index\r\nb['col3'] = [1,2,3] # <- NO ERROR!\r\nprint(b)\r\n#    col1  col2  col3\r\n# 0   NaN   NaN     1\r\n# 1   NaN   NaN     2\r\n# 2   NaN   NaN     3\r\n\r\nc = a.set_index(['col0', 'col1']) # c has 0 rows, 2 columns and multi index\r\nc['col3'] = [1,2,3] # <- ERROR!\r\n# ValueError: Buffer dtype mismatch, expected 'Python object' but got 'long'\r\nprint(c)\r\n```\r\nIf DataFrame has non-zero rows, substitution of length-mismatch list as a new column occurs \"ValueError: Length of values does not match length of index\" in both non-multi index and multi index cases."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408856293",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22060#issuecomment-408856293",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22060",
    "id": 408856293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODg1NjI5Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T13:06:04Z",
    "updated_at": "2018-07-30T13:06:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I'm not sure that it's appropriate that if not len(self.index) means \"if we don't have an index\"\r\n\r\nI don't think it is appropriate."
  }
]
