[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96037860",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96037860",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96037860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDM3ODYw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T19:07:10Z",
    "updated_at": "2015-04-24T19:07:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ARF1 looks like a good start, but need some more testing\n- https://github.com/pydata/pandas/blob/master/pandas/core/common.py#L2145 needs to default to a `RangeIndex`, otherwise the entire point of this change is lost. There _might_ be other things like this where `Int64Index` are hard-coded. I think need to change them (but look thru them as well)\n- need a section in `tests/test_frame.py`, where you check `.set_index/reset_index` and assigning an index. e.g. `df.index = range(5)` should tests that its doing the right thing (and work !)\n- need a section (make a separate class like I did for `TestCategoricalIndex` in `tests/test_indexing`) to cover various indexing cases. This might be somewhat duplicative, but you can simply cover the most common (e.g.. `[]/iloc/loc` with `scalar/slice/list/index/array` indexers)\n- eventually will need a small doc/warning for 0.17.0 (you can't actually write this atm as it doesn't exist)\n- my brief look saw a couple of changed/deleted tests. you _cannot_ do that for this kind of non-API change. That is the biggest issue here, that you inadvertantly change some API guarantees in (maybe subtle) ways. That is why we need a lot of tests/validation for this.\n- some kind of vbench / metric to see that this indeed a good idea (I think we agree it is, but a couple of simple metrics for showing memory savings / faster ops, whatever). These tend to become part of the whatsnew (like hey pandas changed this and here's why it was done).\n\nput up a list of todo's at the top of the PR, as detailed as possible, and check off as you are done.\n\nWe can do an in-depth review once some of these are checked off.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96056300",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96056300",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96056300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDU2MzAw",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T20:34:52Z",
    "updated_at": "2015-04-24T20:45:31Z",
    "author_association": "MEMBER",
    "body": "Here's thought on the constructor:\n\n``` python\nclass Index(IndexOpsMixin, PandasObject):\n    # ...\n\n    def __new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=False,\n                 tupleize_cols=True, **kwargs):\n        # ...\n\n        if all(hasattr(data, a) for a in ['start', 'stop', 'step']):\n            return RangeIndex._simple_new(data, name)\n\n# ...\n\nclass RangeIndex(Int64Index):\n   def __new__(cls, *args, **kwargs):\n       # range should be xrange on Python 2\n       range_obj = range(*args)\n       name = kwargs.pop('name', None)\n       if kwargs:\n           raise TypeError('too many keyword arguments')\n       return _simple_new(range_obj, name)\n\n    @classmethod\n    def _simple_new(cls, range_obj, name=None):\n        result = object.__new__(cls)\n        result._start = range_obj.start\n        result._stop = range_obj.stop\n        result._step = range_obj.step\n        result.name = name\n        return result\n```\n\nThere are two nice things about this approach:\n\n1, the `Index` constructor remains entirely backwards compatible.\n2. you can explicitly make a range index with either `RangeIndex(...)` or `Index(range(...))`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96062703",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96062703",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96062703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDYyNzAz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T20:56:24Z",
    "updated_at": "2015-04-24T20:56:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think there are a ton of edge cases that can be dealt with by having a proper constructor. E.g.\n\n`Index(np.arange(5))` -> _should_ return `RangeIndex`\n`Index(range(5))` -> `RangeIndex`\n`Index([0,1,2,3,4,5])` -> what does this return?\n\nI don't think there will be much explict usage of `RangeIndex`, but it should be a drop-in replacement for `Int64Index`, thus should be able to accept the same exact input\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96065303",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96065303",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96065303,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDY1MzAz",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T21:06:06Z",
    "updated_at": "2015-04-24T21:07:31Z",
    "author_association": "NONE",
    "body": "@jreback Thank you very much for taking the time for extensively commenting the code. I really appreciate it.\n\nOn some points I will need clarification (see comments in the line notes). Two more fundamental questions I think we should discuss follow below:\n\n### Making `RangeIndex` the default index\n\nI held off on making `RangeIndex` the default index class since I thought a \"soft phase-in\" might be a better approach than an \"all or nothing\" approach: Once it is in the code base, people could start to use it and remaining bugs / performance issues could be ironed out before making it the default.\n\nAlso, until really all conceivable operations are conserving the `RangeIndex` type, there will probably be performance implications in some cases since materialization to `Int64Index` will be triggered by many operations (probably) which will be slower than the use of an already existing index as is the case currently.\n\nMaterialization of the index will happen repeatedly if the user calls non-`RangeIndex`-conserving functions repeatedly on an object indexed with a `RangeIndex`. (See also my line comments regarding the slicing operation.)\n\nIn its present form I do not see `RangeIndex` as a performance PR. In the long term I have a hunch that it could be but I think we are still far from it. Making it so, is a far larger effort I believe. Also I am not sure I am really up to that task. - I am kind of surprised I managed to get it working at all as a pandas novice. ;-)\n\nAre you 100% certain you want to make it the default index straight away? I really was trying to keep the PR manageable to start with and optimize its performance with smaller, more manageable subsequent PRs.\n\n### changed/deleted tests\n\nThere is only the one `test_constructor_corner(self)` test that I deleted.\n\nThis became necessary since I suggested allowing more inputs to the `Index(...)` constructor. If I change that constructor I have to change its tests accordingly. (See also line comments.)\n\nI could restore the `Index(...)` constructor to its current, more limited functionality in which case I can then also restore the test. Should I to that?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96066771",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96066771",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96066771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDY2Nzcx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T21:11:51Z",
    "updated_at": "2015-04-24T21:11:51Z",
    "author_association": "MEMBER",
    "body": "RE the cost of repeatedly allocating the values -- I would cache the array of values on the RangeIndex once accessed. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96069955",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96069955",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96069955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDY5OTU1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T21:30:27Z",
    "updated_at": "2015-04-24T21:30:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ARF1 np, always nice to have someone work on the internals!\n\nI think the original intention WAS to have `RangeIndex` be the default index created. However as you have noted then the semantics of the operations need to be quite clearly defined, e.g. when and when not to materialize to a baser type (e.g. we experience similar discussion on when to morph `CategoricalIndex` to a `Index`).\n\n@shoyer does have a good point that simple, predictible rules are useful. \n\nIf its release in a more limited scope (e.g. say non-default and slices only preserving, with a similar to existing constructor). Then how/when would this actually be created / where would it be useful enough that one would explicity create it?\n\nSee that's the rub. Pandas does lots of inference for users (arguable points whether too much at times of course!).\n\nSo if somethings natural (and I think we agree this is), then it should be put in the natural places for utility.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96081185",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96081185",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96081185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDgxMTg1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T22:16:47Z",
    "updated_at": "2015-04-24T22:18:36Z",
    "author_association": "MEMBER",
    "body": "@jreback My notion of a drop in replacement is different. I don't think we should allow for `RangeIndex(np.arange(...))` and we _certainly_ should not try to infer a range index from `Index(np.arange(...))`. That is simply too magical, and will have unexpected performance implications -- converting an integer ndarray to an Index should take constant, not linear time. If a user wants this sort of thing, it's not hard to construct the arguments to pass to `RangeIndex` on their own (e.g., usually this will just be `RangeIndex(array[0], array[-1])`).\n\nI would like to see this enabled as the default index (when none is explicitly provided) for two reasons:\n1. Currently, the default index _is_ very wasteful. It often gets created and then immediately thrown away. This happens all the time in user code.\n2. Testing RangeIndex as the default will be necessary to be confident that it works properly, and at that point, we've already done most of the hard work here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96166991",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96166991",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96166991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MTY2OTkx",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-25T09:19:39Z",
    "updated_at": "2015-04-25T09:19:39Z",
    "author_association": "NONE",
    "body": "@shoyer Regarding your constructor suggestion above: the `xrange` object in python 2 is much more limited than the `range` object in python 3. In particular it does not have `start`, `stop` or `step` properties. We could infer these by testing the return from the object - except for `stop` for which we could at best determine a new value that will lead to the same results.\n\nTo be honest, I do not really see the point however. What sane user would write `Index(xrange(0,10))` when `Index(0, 10)` does the same thing?\n\nIn short: of course we can do it, but is it worth the effort?\n\n@shoyer Regarding your suggestion of caching the values of `RangeIndex` when they are accessed: I probably misunderstood you here but:\n- If we cache all the values in a `RangeIndex` why not just convert to a `Int64Index` in the first place? With your suggestion we are carrying around two objects describing the same thing that we need to keep synchronized. - Sounds like a nightmare to me.\n- If we cache only parts of the values in the `RangeIndex`: how would that work in practice?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96167654",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96167654",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96167654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MTY3NjU0",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-25T09:23:35Z",
    "updated_at": "2015-04-25T09:24:20Z",
    "author_association": "NONE",
    "body": "@jreback @shoyer I added a list of topics on which we still need a consensus (or alternatively an authoritative decision) to the OP. - I am off for today. Have a nice weekend.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96237265",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96237265",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96237265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MjM3MjY1",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-25T17:06:50Z",
    "updated_at": "2015-04-25T17:06:50Z",
    "author_association": "NONE",
    "body": "@shoyer Re caching values: Never mind, I was a bit slow. I think I now understand what you meant: For `RangeIndex` to have a sort of lazy instantiation of a private `Int64Index` object the first time the values or a `Int64Index` is required. I am going to implement it and we'll see whether we mean the same thing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96239877",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96239877",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96239877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MjM5ODc3",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-25T17:17:03Z",
    "updated_at": "2015-04-25T17:17:03Z",
    "author_association": "MEMBER",
    "body": "For caching values, you can use the `cache_readonly` decorator. So this looks something like:\n\n```\n@cache_readonly\ndef _data(self):\n    # ...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96241199",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96241199",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96241199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MjQxMTk5",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-25T17:27:01Z",
    "updated_at": "2015-04-25T17:27:01Z",
    "author_association": "MEMBER",
    "body": "As for handling `range`/`xrange` as an argument:\n\nI think this is nice to support, simply because it's slightly fewer characters to type than `pd.RangeIndex`. It's also nice because it gives us an unambiguous way to use the generic `Index` constructor to make a `RangeIndex`. (I think both @jreback and I have noted that supporting `Index(start, stop, step)` seems like a bad idea.)\n\nIt's definitely unfortunate Python 2 doesn't define start, step and stop for `xrange`. But that information is all still accessible via `repr`. So you could write something like:\n\n```\nif PY2 and isinstance(data, xrange):\n    g, = re.match('xrange\\((.+)\\)', repr(data)).groups()\n    return RangeIndex(*map(int, m.split(', ')))\n```\n\nNot so elegant, but it gets the job done.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/96603220",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-96603220",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 96603220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2NjAzMjIw",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T10:38:44Z",
    "updated_at": "2015-04-27T10:42:29Z",
    "author_association": "NONE",
    "body": "@jreback @shoyer I spun-off work on the \"default index issue\" to a new PR (#9999) to avoid messing up this PR with its more limited scope and to keep the discussions separate.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/99931202",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-99931202",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 99931202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5OTMxMjAy",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-07T16:33:28Z",
    "updated_at": "2015-05-07T16:33:28Z",
    "author_association": "NONE",
    "body": "I am considering making `RangeIndex` a subclass of `slice` to be able to use a `RangeIndex` for slicing objects without instantiating a numpy array. (Since the `__getitem__()` functions seem to consistently check for instances of `slice` before checking for instances of `ndarray`.)\n\nWhat do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/99932759",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-99932759",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 99932759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5OTMyNzU5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-07T16:39:47Z",
    "updated_at": "2015-05-07T16:39:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "no, don't subclass except for `Index`. This just makes things harder / more confusing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/99933494",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-99933494",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 99933494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5OTMzNDk0",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-07T16:42:48Z",
    "updated_at": "2015-05-07T16:42:48Z",
    "author_association": "MEMBER",
    "body": "Yeah, that seems likely to be quite problematic. For example, a negative start has a totally different meaning between range (start at that value) and slice (count from the end).\n\nOn Thu, May 7, 2015 at 9:39 AM, jreback notifications@github.com wrote:\n\n> ## no, don't subclass except for `Index`. This just makes things harder / more confusing.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/pydata/pandas/pull/9977#issuecomment-99932759\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/161513637",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-161513637",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 161513637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTUxMzYzNw==",
    "user": {
      "login": "auvipy",
      "id": 6212603,
      "node_id": "MDQ6VXNlcjYyMTI2MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6212603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/auvipy",
      "html_url": "https://github.com/auvipy",
      "followers_url": "https://api.github.com/users/auvipy/followers",
      "following_url": "https://api.github.com/users/auvipy/following{/other_user}",
      "gists_url": "https://api.github.com/users/auvipy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/auvipy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/auvipy/subscriptions",
      "organizations_url": "https://api.github.com/users/auvipy/orgs",
      "repos_url": "https://api.github.com/users/auvipy/repos",
      "events_url": "https://api.github.com/users/auvipy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/auvipy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-03T04:51:59Z",
    "updated_at": "2015-12-03T04:51:59Z",
    "author_association": "NONE",
    "body": "@ARF1 could u plz fix the merge conflict?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167000340",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9977#issuecomment-167000340",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9977",
    "id": 167000340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzAwMDM0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T22:11:22Z",
    "updated_at": "2015-12-23T22:11:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "replace by #11892 \ncc @ARF1 \n"
  }
]
