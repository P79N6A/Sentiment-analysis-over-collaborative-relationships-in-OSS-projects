[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167404816",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11911#issuecomment-167404816",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11911",
    "id": 167404816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzQwNDgxNg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-27T12:12:33Z",
    "updated_at": "2015-12-27T12:12:33Z",
    "author_association": "MEMBER",
    "body": "Note that `is in` is not valid Python syntax -- the correct operator is simply `in`.\n\nUnfortunately, the result of Python's `in` operator is always cast to a boolean. So I'm afraid there's nothing we can do make this work with pandas.\n\nAlso, even if this was possible, it would be a major backwards compatibility break -- we already use `in` to return a boolean indicating whether an element is found in a Series or not:\n\n```\n>>> -1 in pd.Series(range(3))\nFalse\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167415200",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11911#issuecomment-167415200",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11911",
    "id": 167415200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzQxNTIwMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-27T13:59:04Z",
    "updated_at": "2015-12-27T13:59:04Z",
    "author_association": "MEMBER",
    "body": "@DeepSpace2 apart from what @shoyer explained you about the `in` operator, there is already a rather convenient method to achieve this kind of `in` filtering (if I understand the case correctly):\n\n```\ndf[df['city'].str.contains('TA')]\n```\n\nThis is equivalent to the `apply` example you gave.\n"
  }
]
