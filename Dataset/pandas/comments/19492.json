[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362318346",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19492#issuecomment-362318346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19492",
    "id": 362318346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjMxODM0Ng==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-01T16:20:27Z",
    "updated_at": "2018-02-01T16:20:27Z",
    "author_association": "MEMBER",
    "body": "> It'd be nice to put 1 into favor of a _maybe_coerce_values method defined by each block, and remove all the subclasses init methods.\r\n\r\n+1\r\n\r\n> The one sticking point will be DatetimeTZBlock.__init__, which accepts a dtype parameter that no other block does.\r\n\r\nIf `dtype` were added to `Block.__init__` then `Block.__new__` could be defined more or less as `internals.make_block` is now.\r\n\r\nSide-note bc I don't want to pile on extraneous suggestions in #19268: the recent addition of `_maybe_validate_ndim` is nice.  Would it be cleaner to include the `if ndim is None: ndim = values.ndim` inside the method and have it return `ndim`, so `__init__` just starts with `self.ndim = self._maybe_validate_ndim(ndim, values)`?  Pretty much an aesthetic consideration.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362586035",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19492#issuecomment-362586035",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19492",
    "id": 362586035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjU4NjAzNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T13:27:50Z",
    "updated_at": "2018-02-02T13:27:50Z",
    "author_association": "MEMBER",
    "body": "We also need to take into account that for 'real' extension blocks (not ones we internally still adapt a little bit), can never do such \"maybe coerce\" logic, as they infer the `_holder` from the passed values.\r\n\r\nIt would probably be cleaner to make sure for our internal extension blocks we also only pass it correct data (so no \"maybe coerce\" is needed), but that might require a lot of cleaning up internally / many difficult to find cases.\r\n\r\n> If dtype were added to Block.__init__ then Block.__new__ could be defined more or less as internals.make_block is now.\r\n\r\nI would then rather don't add dtype everywhere, and make sure we use `make_block` if `dtype` is needed, and the dtype is processed inside `make_block` and `Block` gets then the correct values type."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362635502",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19492#issuecomment-362635502",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19492",
    "id": 362635502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjYzNTUwMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T16:32:39Z",
    "updated_at": "2018-02-02T16:32:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Re extension blocks (internal or external), I'm finding it might be helpful to define an `ExtensionBlock._maybe_coerce_values` that just unwraps Series/Indexes.  Currently this is logic is in `form_blocks`, which isn't the best place."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362639332",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19492#issuecomment-362639332",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19492",
    "id": 362639332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjYzOTMzMg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T16:46:35Z",
    "updated_at": "2018-02-02T16:46:35Z",
    "author_association": "MEMBER",
    "body": "> I would then rather don't add dtype everywhere\r\n\r\n@jorisvandenbossche I don't want to de-rail the thread here, so we can discuss this in #19444 if necessary.\r\n\r\nThe motivation is that to make Frame/Series/Index arithmetic/comparison ops consistent (#18824) they will need to share a single implementation.  Focusing on the datetime/timedelta[/period] cases, the idea is to adapt the index implementations since they perform type/timezone checks most carefully/correctly.\r\n\r\nThe sticking point is that they call Index/DatetimeIndex/TimedeltaIndex, which we will need to replace with something more generic if we're mixing the implementations into the blocks.  The solution I've been kicking around is to define something like:\r\n\r\n```\r\nclass Index(...):\r\n    @property\r\n    def _base_constructor(self):\r\n        return Index\r\n\r\nclass Block(...):\r\n    @property\r\n    def _base_constructor(self):\r\n        return Block\r\n```\r\n\r\nand replace e.g. occurrences of `return TimedeltaIndex(values, ...)` with `return self._base_constructor(values, ..., dtype='timedelta64[ns]')`.   (I guess `Block._base_constructor` could return `internals.make_block` just as easily...)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362688236",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19492#issuecomment-362688236",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19492",
    "id": 362688236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY4ODIzNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T19:50:02Z",
    "updated_at": "2018-02-02T19:50:02Z",
    "author_association": "MEMBER",
    "body": "> I guess Block._base_constructor could return internals.make_block just as easily...\r\n\r\nThat what I wanted to response when reading up to there :-)"
  }
]
