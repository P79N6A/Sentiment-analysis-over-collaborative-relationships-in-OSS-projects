[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8467399",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-8467399",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 8467399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjczOTk=",
    "user": {
      "login": "changhiskhan",
      "id": 759245,
      "node_id": "MDQ6VXNlcjc1OTI0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/759245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/changhiskhan",
      "html_url": "https://github.com/changhiskhan",
      "followers_url": "https://api.github.com/users/changhiskhan/followers",
      "following_url": "https://api.github.com/users/changhiskhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/changhiskhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/changhiskhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/changhiskhan/subscriptions",
      "organizations_url": "https://api.github.com/users/changhiskhan/orgs",
      "repos_url": "https://api.github.com/users/changhiskhan/repos",
      "events_url": "https://api.github.com/users/changhiskhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/changhiskhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-11T18:20:04Z",
    "updated_at": "2012-09-11T18:20:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Good idea actually. Useful to make the user more explicit about invoking side-effects.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8514764",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-8514764",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 8514764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTQ3NjQ=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-13T00:23:35Z",
    "updated_at": "2012-09-13T00:23:35Z",
    "author_association": "MEMBER",
    "body": "I go back and forth on it. At some point I'd decided it was better to have a consistent API w.r.t. return values (vs. `None` in the `inplace=True` case), e.g. whether or not `inplace=True`, you can always count on getting a reference back to the modified object. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8597706",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-8597706",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 8597706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTc3MDY=",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-16T18:58:20Z",
    "updated_at": "2012-09-16T18:58:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure, but this is different than the in-place operations in python and in numpy. When I was first using pandas, I was really thrown by the default, make copies everywhere and return an object, especially when python and numpy lead me to expect in-place operation (e.g., sort, assigment to a view). I was bit by not catching this often (kind of like mpl returns things that you don't really need). Then I discovered the inplace keyword. Great, because I almost always want to do things in-place and avoid all the extra typing of assignment, though I have to use the keyword now everywhere. Just seems unnecessary to return the object since I explicitly asked for inplace and I already have the reference to it. Just noise at the interpreter when working interactively.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9568922",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-9568922",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 9568922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1Njg5MjI=",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-18T15:35:21Z",
    "updated_at": "2012-10-18T15:35:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just as a follow-up, when writing notebooks I have to put semi-colons after every line where I do in-place operations so it doesn't barf the returned self.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10969257",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10969257",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10969257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY5MjU3",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:08:05Z",
    "updated_at": "2012-12-03T20:09:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wes, your argument confuses me. Do you consider the `inplace` option a special case or not? Also, I just learned that ipython keeps unassigned memory objects alive for the history (the `_` thingie). Is this true for notebooks as well and could this be an argument for really not returning an object when doing things `inplace`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10969519",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10969519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10969519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY5NTE5",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:14:00Z",
    "updated_at": "2012-12-03T20:14:00Z",
    "author_association": "MEMBER",
    "body": "I think the proposal on the table is to always return `None` when using `inplace=True`. Moving this to 0.10\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10969633",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10969633",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10969633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY5NjMz",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:16:32Z",
    "updated_at": "2012-12-03T20:16:32Z",
    "author_association": "NONE",
    "body": "Note that not returning `self` breaks the [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface): a.opA().opB().opC()\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10969730",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10969730",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10969730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY5NzMw",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:18:35Z",
    "updated_at": "2012-12-03T20:18:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, inplace is optional, so the easy solution is don't use inplace if you want to in turn do an operation on the returned object.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10969739",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10969739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10969739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY5NzM5",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:18:50Z",
    "updated_at": "2012-12-03T20:18:50Z",
    "author_association": "MEMBER",
    "body": "Another place where Python's eager evaluation can be a weakness\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10969767",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10969767",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10969767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY5NzY3",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:19:29Z",
    "updated_at": "2012-12-03T20:19:29Z",
    "author_association": "NONE",
    "body": "those are two orthogonal considerations. one (arguably) should not force the other.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10970173",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10970173",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10970173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTcwMTcz",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:30:12Z",
    "updated_at": "2012-12-03T20:30:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fair enough, but pandas is still an outlier in this respect compared to many of the methods in numpy and python itself. Admittedly, my argument for a (default) inplace not returning self is because I want to save myself typing and improve readability of output at the interpreter for teaching, presenting, or demonstrating. I don't often have serious concerns about memory use and readability of scripts.\n\nWhat's the alternative? Having options where inplace can be 'true', 'false', or 'return'?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10970578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10970578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10970578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTcwNTc4",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:40:17Z",
    "updated_at": "2012-12-03T20:40:17Z",
    "author_association": "MEMBER",
    "body": "Or you could provide some kind of chainable, inplace interface. I'm thinking a lot lately about building a DSL layer around pandas so you could do things like:\n\n```\nframe do {\n    .dropna axis=1\n    ab_diff = a - b       \n} group by key1 key2  {\n    max(ab_diff)\n    std(a)\n}\n```\n\nand have that be as fast and memory-efficient as possible. And then you could easily chain \"in place operations\" and get what you expect\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10970994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10970994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10970994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTcwOTk0",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T20:49:13Z",
    "updated_at": "2012-12-03T20:49:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I fail to see the 'orthogonality' (maybe because 'orthogonal' is linguistically overrated, IMHO). Your claim that these design questions would be independent (i.e. 'orthogonal'), supports the use of something like `obj.opA().obB(inplace=True).obC()`. I even don't want to start thinking about what I just did there and which of all the objects flying around has what content now. The cleanest interface for me is: When I do `inplace`, it effects my original object, if not, it is safe.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10972015",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10972015",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10972015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTcyMDE1",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:13:21Z",
    "updated_at": "2012-12-03T21:14:02Z",
    "author_association": "NONE",
    "body": "- Actually, the result returned from the code you quoted would contain the expected result of those operations.\n- since you didn't use inplace in the first operation, all the interim results should be GC'd anyway.\n- Actually, this could be a useful idiom:\n\n``` python\nobj.expensive_op(inplace=true).ViewOp1()\nobj.ViewOp2()\n```\n\nis not that bad IMHO.\n- IPython's history behaviour is a tooling issue, and can probably be disabled when needed.\n- Seems to me that the reason you don't want to think about what you did there is mostly\n  because it's clear to you that you might be misusing the API.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10972283",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10972283",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10972283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTcyMjgz",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:18:43Z",
    "updated_at": "2012-12-03T21:18:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Seems to me that the reason you don't want to think about what you did there is mostly because it's clear to you that you might be misusing the API.\n\nSure. But I understood you in the way that this kind of usage is what you suggest should be allowed? I'm sorry if I still misunderstand... Or maybe you are actually saying, even so it's powerful and harder to understand, it still should be allowed and possible?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10972724",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10972724",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10972724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTcyNzI0",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:29:42Z",
    "updated_at": "2012-12-03T21:30:14Z",
    "author_association": "NONE",
    "body": "I think:\n1) powerful AND harder to understand is not a bad thing. I agree that I would not consider that\ncommon usage, just acceptable usage.\n2) Agreed that inplace=True with None as return value makes the semantics clearer. \n3) I do not agree that 2) justifies giving up the convenience of fluent interfaces, which ofcourse\nare useful when all your ops are inplace=True, as well.\n4) chaining inplace=True and regular operations is specialized enough that I suspect\nsomeone who would use it would not be confused by it, but actually be a power-user \nmaxing-out.\n5) unless the first op is inplace=True, you won't even clobber anything your code already\nhas a reference to. \n6) I believe the issues raised are real concerns,  which can be solved by other means however, without \ngiving up the fluent interface.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10972808",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10972808",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10972808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTcyODA4",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:31:34Z",
    "updated_at": "2012-12-03T21:32:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "About GC: \nIf I were to do a `_ = obj.op(inplace=True)` just to avoid the printout messing up my notebook, the GC won't work. Is there an alternative to that? Ah, but that's not a new object, so this is okay, right?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10973196",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10973196",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10973196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTczMTk2",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:40:52Z",
    "updated_at": "2012-12-03T21:41:50Z",
    "author_association": "NONE",
    "body": "Another interesting case:\n\n``` python\nobj.clone().MuchMemoryOp(inplace=True).MMO2(inplace=True).MMO3(inplace=True)\n```\n\nthat looks useful to me if I'd like to keep obj _and_ save memory.\nIn fact I wonder why I can't find the `df.clone()` method .\n**edit**: there it is - `df.copy()`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10973451",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10973451",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10973451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTczNDUx",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:46:44Z",
    "updated_at": "2012-12-03T21:47:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "you could 'abuse' `df.astype()` to enforce getting a new array.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10973505",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10973505",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10973505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTczNTA1",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:47:59Z",
    "updated_at": "2012-12-03T21:47:59Z",
    "author_association": "NONE",
    "body": "jseabold suggested ending your lines with semicolons, I guess they took that from Mathematica. \nThat's not too obtrusive I think.\nDoesn't work with qtconsole though, which I usually use.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10973650",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10973650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10973650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTczNjUw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:51:21Z",
    "updated_at": "2012-12-03T21:51:21Z",
    "author_association": "NONE",
    "body": "regarding GC, `Out` is much more of a problem in that regard,\nI would have expected\n\n``` ipython\nget_ipython().history_length=0\n```\n\nto do the trick, but it doesn't.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10974063",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10974063",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10974063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTc0MDYz",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T21:59:47Z",
    "updated_at": "2012-12-03T21:59:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I tried to say that above, but then my memory failed me that it is the `Out` part that is the problem. Wes is warning about that in his book as well. So, is that another argument for returning `None`? Because one would not want to give up the history just to avoid caching huge objects, right?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10974478",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-10974478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 10974478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTc0NDc4",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-03T22:09:16Z",
    "updated_at": "2012-12-03T22:09:16Z",
    "author_association": "NONE",
    "body": "I think that's better addresed in IPython, though,  and I find the input history far more useful \nfor productivity then the output history, so maybe giving just that up is acceptable if you\nwork with such huge objects frequently. if that's currently implemented now - I don't know.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11153088",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-11153088",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 11153088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTUzMDg4",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-08T01:21:10Z",
    "updated_at": "2012-12-08T01:21:10Z",
    "author_association": "MEMBER",
    "body": "Alright I made a game-time decision to do this-- I think it will make people more mindful about mutation.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12203196",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-12203196",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 12203196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjAzMTk2",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-14T00:08:44Z",
    "updated_at": "2013-01-14T00:08:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI @njsmith just posted this to numpy ML re: fluent interface. Actively discouraged by Guido.\n\nhttp://mail.python.org/pipermail/python-dev/2003-October/038855.html\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12203877",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-12203877",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 12203877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjAzODc3",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-14T01:01:44Z",
    "updated_at": "2013-01-14T01:21:46Z",
    "author_association": "NONE",
    "body": "I would argue that his argument doesn't apply, since in pandas you are  explicitly \nspecifying `inplace=true`, and so \"intimate knowledge required\" is no reason. \nThat's just my love of argument talking though, The decision has been made and \nif it's turned out to be in-line with guido - so much the better.\n\nin what context was this quoted? can't find the post on the numpy ml archive...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12203917",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-12203917",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 12203917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjAzOTE3",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-14T01:05:57Z",
    "updated_at": "2013-01-14T01:05:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Response to a suggestion that fill could return self for arrays. \n\nhttp://mail.scipy.org/pipermail/numpy-discussion/2013-January/065158.html\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12477008",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-12477008",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 12477008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDc3MDA4",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T20:39:21Z",
    "updated_at": "2013-01-20T20:39:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Was there any deprecation warning for this? I have some code that works fine in 0.9.0 and I just switched systems to one with 0.10.0 and things were silently broken. Took me a minute to figure out what was going on, and it looks like there are other problems that I'm now having to hunt down.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12480343",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-12480343",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 12480343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDgwMzQz",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-21T00:06:36Z",
    "updated_at": "2013-01-21T00:06:36Z",
    "author_association": "NONE",
    "body": "It's possible to detect when someone uses an inplace call on the RHS of a statement by \nusing stack inspection and the ast module (to issue a warning), but that's rather a lot of voodoo.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12480414",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1893#issuecomment-12480414",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1893",
    "id": 12480414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDgwNDE0",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-21T00:11:58Z",
    "updated_at": "2013-01-21T00:11:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Huh?\n\nhttps://github.com/pydata/pandas/blob/36043e887ae644d72424a50379c0a9c565d98be3/pandas/core/frame.py#L2753\n\n```\nif inplace is True:\n    warn(\"In release XYZ, inplace will no longer return self.\", FutureWarning)\n    new_obj = self\n```\n"
  }
]
