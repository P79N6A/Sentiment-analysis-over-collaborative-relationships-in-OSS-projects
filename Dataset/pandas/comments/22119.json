[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408706320",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-408706320",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 408706320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODcwNjMyMA==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-29T21:13:11Z",
    "updated_at": "2018-07-29T21:13:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "I didn't debug it yet, but the issue is probably similar to #21866 (with the difference, that there is no special handling in `isin()` in the case of Python-objects as there is in the case of float64).\r\n\r\nThe right fix would be probably to fix the behavior of the hash-table and not to try to implement workarounds."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408829068",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-408829068",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 408829068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODgyOTA2OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T11:14:09Z",
    "updated_at": "2018-07-30T11:14:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does this result in a higher-level bug for you? This is the same behavior as Python\r\n\r\n```python\r\nIn [1]: float('nan') in {float('nan')}\r\nOut[1]: False\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408835452",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-408835452",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 408835452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODgzNTQ1Mg==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T11:43:28Z",
    "updated_at": "2018-07-30T11:50:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger \r\n\r\nI have used `isin`  directly. I guess there are some workarounds in place for `Series`, which catch this corner case, when `Series.isin(...)` is used - at least I was not able to reproduce this error without much trying.\r\n\r\nHowever, to be precise, my example corresponds to:\r\n\r\n```\r\n>>> import numpy as np\r\n>>> np.nan in set([np.nan])\r\nTrue\r\n```\r\n\r\nOr using float('nan')\r\n\r\n```\r\n>>> my_nan=float(\"nan\")\r\n>>> my_nan in {my_nan}\r\nTrue\r\n```\r\n\r\nProbably, this is the case because `==`  uses `is` at first and only than the equal operator of floats - in your example two different nan-objects are created.\r\n\r\nNot very stable approach in anycase though...\r\n\r\nAlso, I would prefer to be consistent with the sane pandas float64-behavior than with to some degree irratic python-set behavior."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408873256",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-408873256",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 408873256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODg3MzI1Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T13:59:40Z",
    "updated_at": "2018-07-30T13:59:40Z",
    "author_association": "MEMBER",
    "body": "The fact that we're getting inconsistent results depending on the `np.nan` \"wrapper\" (`ndarray` vs `list`) looks weird in itself.\r\n\r\ncc @jreback : do we have precedent for treating `np.nan` as equal to itself?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408874969",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-408874969",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 408874969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODg3NDk2OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T14:04:40Z",
    "updated_at": "2018-07-30T14:04:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "NaN is never equal to itself.\n\nThe fact that `dictionary[my_nan]` gives a different result to\n`dictionary[float('nan')]` is because Python's hashtable first checks for\nobject identity. If this doesn't turn up anything, then it falls back to\nequality. `np.nan` happens to be a singleton, but IIRC, this isn't part of\nthe documented API.\n\nSo I guess my recommendation would be to not try to look up NaNs :)\n\nOn Mon, Jul 30, 2018 at 8:59 AM gfyoung <notifications@github.com> wrote:\n\n> The fact that we're getting inconsistent results depending on the np.nan\n> \"wrapper\" (ndarray vs list) looks weird in itself.\n>\n> cc @jreback <https://github.com/jreback> : do we have precedent for\n> treating np.nan as equal to itself?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/22119#issuecomment-408873256>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIguBHXPNv7lVWgDoUL4U9BkNLNf2ks5uLxFTgaJpZM4VlkUO>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408876885",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-408876885",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 408876885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODg3Njg4NQ==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T14:10:17Z",
    "updated_at": "2018-07-30T14:10:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gfyoung  pd.unique() treats all nans as being the same:\r\n\r\n```\r\n>>> import pandas as pd\r\n>>> pd.unique([np.nan, -np.nan, float('nan'), -float('nan')])\r\narray([nan])\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409001564",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-409001564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 409001564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTAwMTU2NA==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T20:37:01Z",
    "updated_at": "2018-07-30T20:37:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "In order to have a consistent behavior, a hash-map/hash-set requires (among other things) that the relation `==` is an equivalence relation. That means in particular that `x==x` holds for every `x`.\r\n\r\nHowever, for floats with ieee-754-standard `==` isn't an equivalence relation, because `nan!=nan`, thus in order to get meaningful behavior with a hash-map/set either it must be ensured, that nans are not used or the relation `==` must be redefined.\r\n\r\nThere are multiple ways to extend ieee-754-`==`-relation to an equivalence relation:\r\n\r\n  1. compare nans bitwise (every nan becomes it own equivalence-class)\r\n  2. all nans are \"the same\", i.e. from the same equivalence-class\r\n  3. anything between 1. and 2.\r\n\r\nPandas opted for the second. Thus the behavior of `np.unique()`:\r\n\r\n```\r\n>>> pd.unique([np.nan, -np.nan, float('nan'), -float('nan')])\r\n array([nan])\r\n```\r\n the `isin()`:\r\n\r\n```\r\n>>> algos.isin(np.array([np.nan]), [-np.nan]))\r\narray([ True], dtype=bool)\r\n```\r\n\r\nSo having a different behavior for nans as Python-objects is at least surprising.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409626493",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-409626493",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 409626493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTYyNjQ5Mw==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T16:01:52Z",
    "updated_at": "2018-08-10T14:12:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are actually two different (even if somewhat related) issues:\r\n\r\n 1. `algos.isin(np.array([np.nan]), [np.nan])` with the same object `np.nan`.\r\n      \r\n      There were discussions some time ago in the Python community https://bugs.python.org/issue4296#msg75735 and it has been settled that `a in {a}` should be true even for nans.\r\n\r\n    The way the hash-table is implemented: https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/src/klib/khash_python.h#L45  - it uses  [`PyObject_RichCompareBool`](https://github.com/python/cpython/blob/master/Objects/object.c#L721) which does short-circuit for the same object.\r\n\r\n  So I assume there is a bug somewhere, which results in different nan-objects arriving in the hash-table, see #22160.\r\n\r\n2.  `algos.isin([float('nan')], [float('nan')])` with different nan-objects\r\n\r\n   The Python-way is to say, that nans are not important enough to have a special treatment for them, for which all other objects/classes would pay in performance.\r\n\r\n  I'm not sure pandas can say nans are not important enough (it is probably the most frequently used value:)), so adding special handling for nans could be worth it, in order to be consistent with the behavior of\r\n\r\n   `algos.isin(np.array([float('nan')]), np.array([float('nan')]))`\r\n\r\nbut this is obviously not my decision to make.\r\n    "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/410225968",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-410225968",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 410225968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDIyNTk2OA==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-03T11:29:03Z",
    "updated_at": "2018-08-03T11:29:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually, #22148 is at its core the 2. part of this issue: Do we consider \r\n\r\n```\r\npd.Series([float('nan')], dtype='object').isin([np.nan])\r\n```\r\n\r\nie. for different nan-objects to be True or False (right now it is False)?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/410549179",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-410549179",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 410549179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDU0OTE3OQ==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-05T21:25:09Z",
    "updated_at": "2018-08-10T14:14:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "My proposal (i.e. starting point for a discussion) is in PR #22207 : If both objects are floats, then check whether they are both nans - the same way it is done for float64. The used hash-function has the necessary behavior, so there is no need to change something.\r\n\r\n It doesn't prevent the user to define custom classes with behaviors similar to nan and shoot themselves in the foot - it is probably too much ask for handling such cases as well.\r\n\r\nAs to performance, I could not see any worsening (added some additional performance tests myself), the results are:\r\n\r\n```\r\nasv continuous -f 1.01 upstream/master HEAD -b ^series_methods -b ^algorithms\r\n....                                                           \r\n       before           after         ratio\r\n     [d30c4a06]       [e583a0c9]\r\n-      2.14±0.04s         672±10μs     0.00  series_methods.IsInForObjects.time_isin_nans\r\n```\r\n\r\nBtw, the )new) test above shows, how easy it is to trigger the wost case behavior of `O(n^2)` for the current implementation: just hash different nan-objects. They all have hash-value = 0 and all are not equal to each other, thus `O(n)` is needed to add an element into the hashtable with n keys.\r\n\r\nMy take aways from it: \r\n\r\n  - the performance penalty isn't severe (if one calculates a hash, one also can stomach to check whether a value is nan)\r\n  - The current implementation has a performance problem for the cases of different nan-objects.\r\n  - It will not be easy to achieve consistency for the whole project, the different way numpy treats the \"sameness\" of nans is not easy to overcome. However, the consistency in handling float64 and float-object for this very method is feasible. \r\n\r\nThis would also fix #22148.\r\n\r\n  "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412071765",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22119#issuecomment-412071765",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22119",
    "id": 412071765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjA3MTc2NQ==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-10T12:46:23Z",
    "updated_at": "2018-08-10T12:46:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Probably worth mentioning:  `pd.NaT`  is such an object with `pd.NaT == pd.NaT` being False.\r\n\r\nHowever, `pd.NaT`  is a singleton and thus the shorcut-evaluation `pd.NaT is pd.NaT` in the hash-map is enough to save us from troubles.\r\n\r\nIIRC the user could create another `pd.NaT`, but then well, if one messes with private stuff...  \r\n\r\nEnforcing singleton would be probably a cleaner solution than trying to fix this esoteric possibility in the hash-map."
  }
]
