[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/450064131",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24440#issuecomment-450064131",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24440",
    "id": 450064131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDA2NDEzMQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-27T03:17:22Z",
    "updated_at": "2018-12-27T03:17:22Z",
    "author_association": "MEMBER",
    "body": "I am -1 here as I don't think this is ever really something you can guarantee so it would add a large amount of complexity, but let's see what others think"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/450064959",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24440#issuecomment-450064959",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24440",
    "id": 450064959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDA2NDk1OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-27T03:24:36Z",
    "updated_at": "2018-12-27T03:24:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there any reason not to use the builtin CSV sniffer, and pass the output \r\n\r\n```python\r\nwith open(\"file.csv\") as f:\r\n    header = csv.Sniffer(f).has_header(1024)\r\n\r\npd.read_csv(\"file.csv\", header=header)\r\n```\r\n\r\nOn its own that doesn't seem too bad. I worry about the explosion in complexity you get when you have all of pandas' other keywords / capabilities (how would that work for network files? How does it interact with row-based things like `skiprows`?, etc.)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/450141746",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24440#issuecomment-450141746",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24440",
    "id": 450141746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDE0MTc0Ng==",
    "user": {
      "login": "Iddoyadlin",
      "id": 11427786,
      "node_id": "MDQ6VXNlcjExNDI3Nzg2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11427786?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iddoyadlin",
      "html_url": "https://github.com/Iddoyadlin",
      "followers_url": "https://api.github.com/users/Iddoyadlin/followers",
      "following_url": "https://api.github.com/users/Iddoyadlin/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iddoyadlin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iddoyadlin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iddoyadlin/subscriptions",
      "organizations_url": "https://api.github.com/users/Iddoyadlin/orgs",
      "repos_url": "https://api.github.com/users/Iddoyadlin/repos",
      "events_url": "https://api.github.com/users/Iddoyadlin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iddoyadlin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-27T12:26:43Z",
    "updated_at": "2018-12-27T12:28:17Z",
    "author_association": "NONE",
    "body": "1.\r\n> I am -1 here as I don't think this is ever really something you can guarantee so it would add a large \r\namount of complexity, but let's see what others think\r\n\r\nIts true you cannot guarantee the header detection is correct but so are other mechanisms that pandas read_csv api already implements (some are quite complex such as automatically detecting datetime formats when passing parse_dates and infer_datetime_format). The complexity of the header detection depends on the actual implementation.\r\n\r\n2.\r\nIndeed these are stuff that should be considered, but this is one of the advantages of having a single api for this (and not csv.Sniffer's api and pandas). for skiprows for example, I think that any rows that are skipped should not be considered as part of the header detection algorithm. \r\n\r\nI admit I am not familiar with all of panda's internal implementations, and I agree that there are some api considerations that need to be made. If you find this feature interesting, I am willing to work on a pull request for this matter.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/450287771",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24440#issuecomment-450287771",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24440",
    "id": 450287771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDI4Nzc3MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-28T04:30:00Z",
    "updated_at": "2018-12-28T04:30:00Z",
    "author_association": "MEMBER",
    "body": "I agree with Tom and Will that this is probably not a good fit for pandas internally, and also with the OP that this would be a really nice feature to have _somewhere_.\r\n\r\nFor the features wishlist: correctly round-trip `df.to_csv` when one or both of index/columns is a MultiIndex."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/450398170",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24440#issuecomment-450398170",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24440",
    "id": 450398170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDM5ODE3MA==",
    "user": {
      "login": "mail2saiky",
      "id": 6866829,
      "node_id": "MDQ6VXNlcjY4NjY4Mjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6866829?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mail2saiky",
      "html_url": "https://github.com/mail2saiky",
      "followers_url": "https://api.github.com/users/mail2saiky/followers",
      "following_url": "https://api.github.com/users/mail2saiky/following{/other_user}",
      "gists_url": "https://api.github.com/users/mail2saiky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mail2saiky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mail2saiky/subscriptions",
      "organizations_url": "https://api.github.com/users/mail2saiky/orgs",
      "repos_url": "https://api.github.com/users/mail2saiky/repos",
      "events_url": "https://api.github.com/users/mail2saiky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mail2saiky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-28T17:40:32Z",
    "updated_at": "2018-12-28T17:40:32Z",
    "author_association": "NONE",
    "body": "if i understand the issue correctly, some csv files may not contain header row but most of the csv files will contain header row. Why not there be a function that reads all the header rows(user specified) in all the csv files irrespective of whether it contains it or not, and then finally use the mostly occurring row.\r\n\r\nfinal_header = MostOf (list_of_all_header_rows)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/450539714",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24440#issuecomment-450539714",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24440",
    "id": 450539714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDUzOTcxNA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-30T05:11:58Z",
    "updated_at": "2018-12-30T05:11:58Z",
    "author_association": "MEMBER",
    "body": "> Why not there be a function that reads all the header rows(user specified) in all the csv files irrespective of whether it contains it or not, and then finally use the mostly occurring row.\r\n\r\nI'm not sure I fully understand this?\r\n\r\nIn terms of the broader discussion, I am indeed wary of adding more parameters to the `read_csv` function given how bloated it is.  In reality, we should be trying to condense it! 🙂 \r\n\r\nAlso, as was mentioned earlier, the way it would interact with the myriad other parameters we have makes the potential maintenance issue of this parameter somewhat daunting to me.\r\n\r\n> If you find this feature interesting, I am willing to work on a pull request for this matter.\r\n\r\n@Iddoyadlin : I don't think we disagree that a feature would be nice, but we are very much concerned about how it would integrate with the existing implementation.\r\n\r\n@TomAugspurger @WillAyd : That being said, perhaps we could fit something about this in the docs (or cookbook)?  Though I have not experienced it, the concern does not sound super unreasonable to me."
  }
]
