[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383883861",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-383883861",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 383883861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzg4Mzg2MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-24T10:31:02Z",
    "updated_at": "2018-04-24T10:31:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mroeschke if you want to re-run and update would be appreciated"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/384166085",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-384166085",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 384166085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDE2NjA4NQ==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-25T05:36:28Z",
    "updated_at": "2018-04-25T05:36:28Z",
    "author_association": "MEMBER",
    "body": "Sure thing. Will try to get to it by the end of the week. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385190350",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-385190350",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 385190350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTE5MDM1MA==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-28T16:56:40Z",
    "updated_at": "2018-10-24T16:03:24Z",
    "author_association": "MEMBER",
    "body": "```\r\n$ asv continuous -f 1.1 81372093f1fdc0c07e4b45ba0f47b upstream/master\r\n\r\nbefore           after         ratio\r\n     [81372093]       [563a6ad1]\r\n!       115±0.2ms           failed      n/a  io.sql.ReadSQLTable.time_read_sql_table_all\r\n!      36.6±0.2ms           failed      n/a  io.sql.ReadSQLTable.time_read_sql_table_parse_dates\r\n!     28.6±0.01ms           failed      n/a  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('bool')\r\n!        47.2±0ms           failed      n/a  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('datetime')\r\n!     28.7±0.08ms           failed      n/a  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('float')\r\n!     28.2±0.02ms           failed      n/a  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('float_with_nan')\r\n!     30.5±0.08ms           failed      n/a  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('int')\r\n!     32.6±0.02ms           failed      n/a  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('string')\r\n!     86.4±0.06ms           failed      n/a  io.sql.SQL.time_read_sql_query('sqlalchemy')\r\n!      411±0.06ms           failed      n/a  io.sql.SQL.time_to_sql_dataframe('sqlalchemy')\r\n!     24.0±0.03ms           failed      n/a  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'bool')\r\n!     25.7±0.02ms           failed      n/a  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'datetime')\r\n!     22.9±0.06ms           failed      n/a  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'float')\r\n!     22.8±0.05ms           failed      n/a  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'float_with_nan')\r\n!     24.5±0.04ms           failed      n/a  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'int')\r\n!      26.1±0.2ms           failed      n/a  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'string')\r\n!       170±0.2ms           failed      n/a  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'bool')\r\n!       248±0.2ms           failed      n/a  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'datetime')\r\n!      159±0.09ms           failed      n/a  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'float')\r\n!       170±0.3ms           failed      n/a  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'float_with_nan')\r\n!       155±0.2ms           failed      n/a  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'int')\r\n!       157±0.3ms           failed      n/a  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'string')\r\n!           7.51s           failed      n/a  strings.Dummies.time_get_dummies\r\n+         345±5μs            1.04s  3026.47  series_methods.SeriesConstructor.time_constructor(None)\r\n+     1.47±0.01μs      59.1±0.07μs    40.16  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+        1.48±0μs      58.2±0.06μs    39.36  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+        1.22±0μs      46.7±0.07μs    38.32  indexing.MethodLookup.time_lookup_ix\r\n+     1.45±0.01μs       39.6±0.2μs    27.42  timestamp.TimestampProperties.time_weekday_name(None, 'B')\r\n+        1.44±0μs      39.4±0.06μs    27.39  timestamp.TimestampProperties.time_weekday_name(None, None)\r\n+      26.5±0.2ms        213±0.2ms     8.06  frame_methods.Repr.time_frame_repr_wide\r\n+       186±0.6μs         1.32±0ms     7.10  timeseries.AsOf.time_asof_single_early('DataFrame')\r\n+       262±0.6μs         1.16±0ms     4.42  groupby.GroupByMethods.time_dtype_as_field('float', 'cummax', 'direct')\r\n+       264±0.6μs         1.17±0ms     4.42  groupby.GroupByMethods.time_dtype_as_field('float', 'cummax', 'transformation')\r\n+       264±0.8μs         1.17±0ms     4.41  groupby.GroupByMethods.time_dtype_as_field('float', 'cummin', 'transformation')\r\n+       266±0.5μs         1.16±0ms     4.36  groupby.GroupByMethods.time_dtype_as_field('datetime', 'cummin', 'transformation')\r\n+         269±1μs         1.16±0ms     4.32  groupby.GroupByMethods.time_dtype_as_field('float', 'cummin', 'direct')\r\n+         279±1μs         1.20±0ms     4.31  groupby.GroupByMethods.time_dtype_as_field('float', 'cumprod', 'direct')\r\n+         282±1μs         1.20±0ms     4.26  groupby.GroupByMethods.time_dtype_as_field('float', 'cumprod', 'transformation')\r\n+      60.7±0.1ms            254ms     4.18  frame_methods.Dropna.time_dropna('any', 0)\r\n+         296±1μs      1.24±0.01ms     4.17  groupby.GroupByMethods.time_dtype_as_field('float', 'cumsum', 'direct')\r\n+         273±2μs         1.13±0ms     4.14  groupby.GroupByMethods.time_dtype_as_field('datetime', 'cummin', 'direct')\r\n+        63.1±0ms            260ms     4.13  frame_methods.Dropna.time_dropna('any', 1)\r\n+       299±0.7μs         1.23±0ms     4.11  groupby.GroupByMethods.time_dtype_as_field('float', 'cumsum', 'transformation')\r\n+     20.5±0.02μs      79.3±0.03μs     3.87  index_object.Indexing.time_slice_step('Int')\r\n+     20.8±0.06μs      79.2±0.06μs     3.82  index_object.Indexing.time_slice('Int')\r\n+         110±2ms          406±7ms     3.70  frame_methods.Interpolate.time_interpolate(None)\r\n+         366±2μs         1.33±0ms     3.62  groupby.GroupByMethods.time_dtype_as_group('datetime', 'cummin', 'direct')\r\n+         369±3μs         1.33±0ms     3.60  groupby.GroupByMethods.time_dtype_as_group('float', 'cummax', 'transformation')\r\n+         371±1μs         1.32±0ms     3.55  groupby.GroupByMethods.time_dtype_as_group('float', 'cummax', 'direct')\r\n+         370±1μs         1.31±0ms     3.54  groupby.GroupByMethods.time_dtype_as_group('float', 'cummin', 'transformation')\r\n+       369±0.8μs         1.30±0ms     3.52  groupby.GroupByMethods.time_dtype_as_group('datetime', 'cummin', 'transformation')\r\n+      19.9±0.1μs       69.8±0.3μs     3.51  indexing.DataFrameStringIndexing.time_ix\r\n+       373±0.2μs         1.30±0ms     3.50  groupby.GroupByMethods.time_dtype_as_group('float', 'cummin', 'direct')\r\n+       368±0.6μs         1.29±0ms     3.50  groupby.GroupByMethods.time_dtype_as_group('int', 'cummin', 'transformation')\r\n+         377±1μs      1.30±0.01ms     3.45  groupby.GroupByMethods.time_dtype_as_group('int', 'cummax', 'direct')\r\n+         374±2μs         1.29±0ms     3.45  groupby.GroupByMethods.time_dtype_as_group('int', 'cummax', 'transformation')\r\n+         374±2μs         1.29±0ms     3.44  groupby.GroupByMethods.time_dtype_as_group('int', 'cummin', 'direct')\r\n+         379±2μs         1.30±0ms     3.44  groupby.GroupByMethods.time_dtype_as_field('int', 'cummin', 'direct')\r\n+         379±1μs         1.30±0ms     3.43  groupby.GroupByMethods.time_dtype_as_field('int', 'cummax', 'transformation')\r\n+         379±3μs         1.29±0ms     3.41  groupby.GroupByMethods.time_dtype_as_field('int', 'cummax', 'direct')\r\n+       381±0.5μs         1.30±0ms     3.40  groupby.GroupByMethods.time_dtype_as_field('int', 'cummin', 'transformation')\r\n+         413±1μs         1.37±0ms     3.32  groupby.GroupByMethods.time_dtype_as_group('float', 'cumsum', 'direct')\r\n+       413±0.8μs      1.37±0.01ms     3.31  groupby.GroupByMethods.time_dtype_as_group('float', 'cumsum', 'transformation')\r\n+       414±0.7μs         1.36±0ms     3.29  groupby.GroupByMethods.time_dtype_as_group('int', 'cumsum', 'transformation')\r\n+         410±1μs         1.35±0ms     3.29  groupby.GroupByMethods.time_dtype_as_group('int', 'cumsum', 'direct')\r\n+      15.9±0.1ms       52.0±0.1ms     3.27  multiindex_object.GetLoc.time_small_get_loc_warm\r\n+         417±2μs         1.35±0ms     3.23  groupby.GroupByMethods.time_dtype_as_field('int', 'cumsum', 'transformation')\r\n+     16.3±0.07μs       52.3±0.1μs     3.21  multiindex_object.GetLoc.time_string_get_loc\r\n+         412±2μs         1.31±0ms     3.19  groupby.GroupByMethods.time_dtype_as_field('int', 'cumsum', 'direct')\r\n+     32.1±0.04μs        102±0.3μs     3.19  timestamp.TimestampAcrossDst.time_replace_across_dst\r\n+     16.5±0.08ms       52.0±0.1ms     3.15  multiindex_object.GetLoc.time_med_get_loc_warm\r\n+     17.0±0.07μs       52.5±0.3μs     3.08  multiindex_object.GetLoc.time_med_get_loc\r\n+     39.1±0.07μs        115±0.1μs     2.93  timestamp.TimestampOps.time_replace_tz(None)\r\n+       353±0.6ms            912ms     2.58  groupby.Groups.time_series_groups('int64_large')\r\n+         193±3ms          492±1ms     2.54  frame_methods.Interpolate.time_interpolate('infer')\r\n+     3.05±0.04ms      7.29±0.06ms     2.39  frame_methods.Interpolate.time_interpolate_some_good(None)\r\n+         142±0ms            332ms     2.33  frame_methods.Dropna.time_dropna('all', 0)\r\n+      149±0.06ms            346ms     2.32  frame_methods.Dropna.time_dropna('all', 1)\r\n+         764±2μs      1.76±0.01ms     2.30  groupby.GroupByMethods.time_dtype_as_field('int', 'cumprod', 'transformation')\r\n+         519±6μs      1.18±0.01ms     2.28  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dd08>, False)\r\n+         771±5μs      1.74±0.01ms     2.25  groupby.GroupByMethods.time_dtype_as_field('int', 'cumprod', 'direct')\r\n+        511±20μs      1.15±0.01ms     2.25  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530de18>, False)\r\n+         275±2ms          615±3ms     2.24  reshape.WideToLong.time_wide_to_long_big\r\n+      62.3±0.1μs        139±0.4μs     2.22  timestamp.TimestampOps.time_replace_tz('US/Eastern')\r\n+        523±10μs      1.16±0.01ms     2.22  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dd90>, False)\r\n+         831±2μs         1.82±0ms     2.19  groupby.GroupByMethods.time_dtype_as_group('float', 'cumprod', 'transformation')\r\n+         839±3μs      1.83±0.01ms     2.18  groupby.GroupByMethods.time_dtype_as_group('float', 'cumprod', 'direct')\r\n+        537±20μs      1.17±0.02ms     2.18  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dea0>, False)\r\n+         839±5μs      1.81±0.01ms     2.16  groupby.GroupByMethods.time_dtype_as_group('int', 'cumprod', 'direct')\r\n+         838±1μs         1.80±0ms     2.15  groupby.GroupByMethods.time_dtype_as_group('int', 'cumprod', 'transformation')\r\n+        577±10μs      1.24±0.03ms     2.15  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dea0>, True)\r\n+        568±10μs      1.22±0.01ms     2.14  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530de18>, True)\r\n+         505±1ms            1.08s     2.14  groupby.Groups.time_series_groups('object_large')\r\n+        586±10μs      1.22±0.01ms     2.09  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dd90>, True)\r\n+        604±10μs      1.24±0.01ms     2.06  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dd08>, True)\r\n+       147±0.1μs        293±0.3μs     1.99  indexing.NumericSeriesIndexing.time_ix_slice(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+     9.60±0.06ms      19.1±0.04ms     1.99  categoricals.Rank.time_rank_int\r\n+     6.44±0.02ms      12.5±0.06ms     1.94  period.Algorithms.time_drop_duplicates('series')\r\n+     2.14±0.01ms      4.00±0.03ms     1.87  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'custom')\r\n+     1.98±0.01ms      3.65±0.01ms     1.85  io.csv.ReadUint64Integers.time_read_uint64\r\n+     1.91±0.02ms      3.52±0.01ms     1.84  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'ymd')\r\n+     7.91±0.07ms      14.6±0.09ms     1.84  period.Algorithms.time_value_counts('series')\r\n+        2.09±0ms      3.84±0.01ms     1.84  io.csv.ReadUint64Integers.time_read_uint64_neg_values\r\n+     1.92±0.01ms      3.54±0.01ms     1.84  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'iso8601')\r\n+      91.7±0.1ms        168±0.2ms     1.84  groupby.ApplyDictReturn.time_groupby_apply_dict_return\r\n+     1.89±0.01ms         3.47±0ms     1.83  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(False, 'iso8601')\r\n+     1.88±0.02ms      3.44±0.01ms     1.83  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(False, 'ymd')\r\n+        10.9±1ms      19.6±0.09ms     1.80  categoricals.Rank.time_rank_int_cat_ordered\r\n+     2.24±0.02ms      4.00±0.01ms     1.79  io.csv.ReadUint64Integers.time_read_uint64_na_values\r\n+      11.1±0.9ms       19.6±0.1ms     1.77  categoricals.Rank.time_rank_string_cat_ordered\r\n+       369±0.4ms        652±0.2ms     1.77  replace.Convert.time_replace('Series', 'Timestamp')\r\n+       371±0.7ms        642±0.4ms     1.73  replace.Convert.time_replace('Series', 'Timedelta')\r\n+      6.83±0.2ms       11.8±0.1ms     1.73  frame_methods.Interpolate.time_interpolate_some_good('infer')\r\n+       205±0.3μs          350±5μs     1.71  indexing.IntervalIndexing.time_loc_list\r\n+        12.0±1ms      20.5±0.05ms     1.71  categoricals.Rank.time_rank_int_cat\r\n+      23.8±0.8μs       40.2±0.2μs     1.69  offset.OnOffset.time_on_offset(<YearEnd: month=12>)\r\n+     13.9±0.05μs      23.3±0.02μs     1.68  index_object.Indexing.time_get_loc('Int')\r\n+       419±0.2ms            704ms     1.68  replace.Convert.time_replace('DataFrame', 'Timestamp')\r\n+     9.54±0.04μs      16.0±0.04μs     1.68  offset.OnOffset.time_on_offset(<MonthBegin>)\r\n+        1.39±0ms      2.31±0.01ms     1.66  frame_ctor.FromRecords.time_frame_from_records_generator(1000)\r\n+     13.8±0.02μs       23.0±0.1μs     1.66  index_object.Indexing.time_get_loc_sorted('Int')\r\n+       107±0.2μs        177±0.8μs     1.66  indexing.NumericSeriesIndexing.time_iloc_slice(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+       418±0.9ms        686±0.4ms     1.64  replace.Convert.time_replace('DataFrame', 'Timedelta')\r\n+       106±0.2μs        174±0.6μs     1.64  indexing.NumericSeriesIndexing.time_iloc_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+       139±0.2μs          225±1μs     1.62  indexing.NumericSeriesIndexing.time_loc_slice(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+     4.53±0.02ms      7.32±0.01ms     1.62  io.csv.ReadCSVComment.time_comment\r\n+        3.03±0ms      4.89±0.04ms     1.62  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'high')\r\n+       128±0.8ms        205±0.8ms     1.61  binary_ops.Ops.time_frame_comparison(False, 'default')\r\n+       127±0.8ms          204±1ms     1.60  binary_ops.Ops.time_frame_comparison(False, 1)\r\n+       109±0.2μs        175±0.5μs     1.60  indexing.NumericSeriesIndexing.time_ix_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+           779ms            1.25s     1.60  groupby.Transform.time_transform_lambda_max\r\n+     5.97±0.04ms      9.54±0.06ms     1.60  reshape.SimpleReshape.time_stack\r\n+       252±0.6μs          399±1μs     1.58  indexing.IntervalIndexing.time_getitem_list\r\n+     3.07±0.02ms      4.85±0.01ms     1.58  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'round_trip')\r\n+       113±0.5μs        179±0.6μs     1.58  indexing.NumericSeriesIndexing.time_ix_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n+     2.99±0.01ms      4.71±0.01ms     1.58  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'high')\r\n+     3.00±0.02ms      4.73±0.01ms     1.58  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', None)\r\n+     3.01±0.02ms      4.75±0.01ms     1.58  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', None)\r\n+     3.03±0.02ms         4.76±0ms     1.57  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', 'round_trip')\r\n+     3.03±0.01ms      4.76±0.03ms     1.57  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', None)\r\n+     3.03±0.01ms      4.76±0.01ms     1.57  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', 'high')\r\n+        3.03±0ms         4.75±0ms     1.57  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', 'high')\r\n+     3.02±0.02ms      4.73±0.01ms     1.57  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', 'round_trip')\r\n+     42.4±0.08μs       66.2±0.2μs     1.56  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+      42.7±0.1μs       66.5±0.1μs     1.56  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     42.7±0.03μs      66.5±0.09μs     1.56  timestamp.TimestampProperties.time_is_quarter_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     42.6±0.06μs       66.1±0.2μs     1.55  timestamp.TimestampProperties.time_is_month_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     42.6±0.03μs       66.0±0.1μs     1.55  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     3.06±0.02ms      4.74±0.02ms     1.55  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', None)\r\n+     42.4±0.06μs       65.5±0.1μs     1.55  timestamp.TimestampProperties.time_is_month_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     3.09±0.01ms      4.78±0.01ms     1.54  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'round_trip')\r\n+     1.59±0.01ms      2.45±0.02ms     1.54  indexing.NumericSeriesIndexing.time_getitem_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+      75.1±0.2ms        116±0.2ms     1.54  groupby.Datelike.time_sum('period_range')\r\n+     5.31±0.04ms      8.11±0.03ms     1.53  binary_ops.Timeseries.time_series_timestamp_compare('US/Eastern')\r\n+     5.22±0.03ms      7.96±0.04ms     1.53  binary_ops.Timeseries.time_timestamp_series_compare(None)\r\n+     2.99±0.01ms      4.56±0.01ms     1.53  timeseries.ResampleDataFrame.time_method('min')\r\n+     86.2±0.05ms        131±0.2ms     1.52  strings.Methods.time_get\r\n+      43.2±0.1μs       65.7±0.1μs     1.52  timestamp.TimestampProperties.time_is_year_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     3.49±0.01ms      5.30±0.03ms     1.52  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', None)\r\n+       149±0.9μs          225±3μs     1.51  indexing.NumericSeriesIndexing.time_iloc_array(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+       143±0.2μs        216±0.2μs     1.51  indexing.NumericSeriesIndexing.time_getitem_slice(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+     3.02±0.01ms      4.54±0.01ms     1.51  timeseries.ResampleDataFrame.time_method('max')\r\n+     3.45±0.02ms      5.19±0.04ms     1.50  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', None)\r\n+     3.46±0.02ms      5.19±0.01ms     1.50  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', None)\r\n+     3.43±0.01ms      5.12±0.01ms     1.49  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', 'round_trip')\r\n+     3.47±0.01ms      5.18±0.01ms     1.49  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', 'round_trip')\r\n+      5.53±0.1ms      8.25±0.04ms     1.49  reshape.Melt.time_melt_dataframe\r\n+     3.44±0.01ms      5.12±0.01ms     1.49  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', 'high')\r\n+     50.6±0.07μs      75.4±0.02μs     1.49  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: days=2, months=2>)\r\n+     3.47±0.06ms         5.15±0ms     1.49  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', 'high')\r\n+     3.49±0.01ms      5.19±0.02ms     1.49  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', 'high')\r\n+     5.38±0.04ms      7.97±0.01ms     1.48  binary_ops.Timeseries.time_timestamp_series_compare('US/Eastern')\r\n+     3.51±0.02ms      5.18±0.01ms     1.48  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', 'high')\r\n+     3.50±0.01ms      5.15±0.02ms     1.47  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', 'round_trip')\r\n+       127±0.1ms        186±0.4ms     1.47  stat_ops.Correlation.time_corr('spearman')\r\n+      5.31±0.1ms      7.80±0.04ms     1.47  binary_ops.Timeseries.time_series_timestamp_compare(None)\r\n+     3.47±0.01ms         5.09±0ms     1.47  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', 'round_trip')\r\n+       184±0.3μs        270±0.7μs     1.47  indexing.NumericSeriesIndexing.time_ix_slice(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n+       471±0.5ms        691±0.3ms     1.47  groupby.GroupByMethods.time_dtype_as_group('datetime', 'unique', 'transformation')\r\n+     3.51±0.02ms      5.13±0.01ms     1.46  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', None)\r\n+       471±0.2ms        687±0.8ms     1.46  groupby.GroupByMethods.time_dtype_as_group('datetime', 'unique', 'direct')\r\n+       296±0.2ms          431±1ms     1.46  groupby.GroupByMethods.time_dtype_as_group('int', 'unique', 'transformation')\r\n+       470±0.3ms          682±2ms     1.45  groupby.GroupByMethods.time_dtype_as_group('float', 'unique', 'transformation')\r\n+     1.33±0.01ms      1.92±0.01ms     1.45  indexing.NumericSeriesIndexing.time_loc_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+       203±0.4ms       293±0.09ms     1.45  groupby.GroupByMethods.time_dtype_as_field('int', 'unique', 'direct')\r\n+      60.3±0.1μs       87.1±0.3μs     1.45  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: days=2, months=2>)\r\n+       109±0.6ms        157±0.5ms     1.44  period.DataFramePeriodColumn.time_setitem_period_column\r\n+           540ms            778ms     1.44  reindex.Reindex.time_reindex_multiindex\r\n+       463±0.2ms        663±0.2ms     1.43  groupby.GroupByMethods.time_dtype_as_group('float', 'unique', 'direct')\r\n+      16.0±0.6ms       22.8±0.1ms     1.42  categoricals.Rank.time_rank_string_cat\r\n+       300±0.4ms        427±0.6ms     1.42  groupby.GroupByMethods.time_dtype_as_group('int', 'unique', 'direct')\r\n+       204±0.7ms       290±0.05ms     1.42  groupby.GroupByMethods.time_dtype_as_field('int', 'unique', 'transformation')\r\n+       203±0.2ms        288±0.2ms     1.42  groupby.GroupByMethods.time_dtype_as_field('float', 'unique', 'transformation')\r\n+        635±20μs         899±10μs     1.42  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dbf8>, True)\r\n+       206±0.6ms        291±0.4ms     1.41  groupby.GroupByMethods.time_dtype_as_field('float', 'unique', 'direct')\r\n+     35.8±0.08ms       50.3±0.1ms     1.40  frame_methods.Repr.time_repr_tall\r\n+      63.0±0.2μs      86.8±0.02μs     1.38  offset.OffestDatetimeArithmetic.time_add(<DateOffset: days=2, months=2>)\r\n+        584±10μs         803±20μs     1.37  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dbf8>, False)\r\n+     32.7±0.01ms       44.9±0.3ms     1.37  categoricals.Constructor.time_regular\r\n+      17.9±0.3ms       24.4±0.3ms     1.36  stat_ops.Rank.time_rank('Series', False)\r\n+       241±0.3ms        328±0.6ms     1.36  groupby.GroupByMethods.time_dtype_as_field('datetime', 'unique', 'direct')\r\n+     19.0±0.06ms       25.8±0.1ms     1.36  stat_ops.Rank.time_average_old('Series', False)\r\n+       244±0.8ms        332±0.4ms     1.36  groupby.GroupByMethods.time_dtype_as_field('datetime', 'unique', 'transformation')\r\n+       586±0.1ms            789ms     1.35  sparse.SparseDataFrameConstructor.time_from_scipy\r\n+     5.99±0.02ms      8.05±0.03ms     1.34  io.csv.ReadCSVParseDates.time_baseline\r\n+         468±2μs          628±3μs     1.34  groupby.GroupByMethods.time_dtype_as_field('object', 'last', 'transformation')\r\n+     6.04±0.03ms      8.11±0.03ms     1.34  io.csv.ReadCSVParseDates.time_multiple_date\r\n+      19.0±0.2ms       25.4±0.1ms     1.34  stat_ops.Rank.time_rank('Series', True)\r\n+       256±0.4ms        342±0.5ms     1.34  groupby.GroupByMethods.time_dtype_as_field('object', 'unique', 'transformation')\r\n+       258±0.4ms        343±0.5ms     1.33  groupby.GroupByMethods.time_dtype_as_field('object', 'unique', 'direct')\r\n+      30.3±0.4ms      40.0±0.07ms     1.32  join_merge.Concat.time_concat_series(0)\r\n+      56.9±0.5ms       74.7±0.3ms     1.31  join_merge.MergeAsof.time_by_int\r\n+           560ms            734ms     1.31  frame_methods.Iteration.time_iterrows\r\n+      20.4±0.2ms       26.7±0.1ms     1.31  stat_ops.Rank.time_average_old('Series', True)\r\n+      50.1±0.3ms      65.4±0.02ms     1.30  io.msgpack.MSGPack.time_write_msgpack\r\n+     29.9±0.05ms      38.8±0.04ms     1.30  join_merge.MergeAsof.time_on_int\r\n+           1.12s            1.45s     1.30  panel_methods.PanelMethods.time_pct_change('items')\r\n+         470±1μs          608±3μs     1.29  groupby.GroupByMethods.time_dtype_as_field('object', 'last', 'direct')\r\n+     2.66±0.01ms      3.44±0.01ms     1.29  timeseries.ResampleDataFrame.time_method('mean')\r\n+     1.58±0.01ms         2.03±0ms     1.29  groupby.GroupByMethods.time_dtype_as_group('object', 'unique', 'direct')\r\n+       127±0.4μs        164±0.1μs     1.29  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: days=2, months=2>)\r\n+      466±0.02ms          599±2ms     1.29  groupby.GroupByMethods.time_dtype_as_group('int', 'skew', 'transformation')\r\n+     1.07±0.01ms      1.38±0.01ms     1.28  period.Algorithms.time_value_counts('index')\r\n+     1.60±0.01ms         2.05±0ms     1.28  groupby.GroupByMethods.time_dtype_as_group('object', 'unique', 'transformation')\r\n+         481±1μs          615±2μs     1.28  groupby.GroupByMethods.time_dtype_as_field('object', 'first', 'direct')\r\n+       784±0.7μs      1.00±0.05ms     1.28  indexing.MultiIndexing.time_series_ix\r\n+          43.0μs           54.9μs     1.28  index_object.Indexing.time_get_loc('Float')\r\n+       317±0.8ms        403±0.8ms     1.27  groupby.GroupByMethods.time_dtype_as_field('int', 'skew', 'transformation')\r\n+           738ms            940ms     1.27  groupby.GroupByMethods.time_dtype_as_group('float', 'skew', 'transformation')\r\n+         400±2μs          509±2μs     1.27  indexing.DataFrameNumericIndexing.time_iloc_dups\r\n+           732ms            929ms     1.27  groupby.GroupByMethods.time_dtype_as_group('float', 'skew', 'direct')\r\n+       306±0.7ms          387±1ms     1.27  groupby.GroupByMethods.time_dtype_as_field('float', 'skew', 'transformation')\r\n+         483±2μs          611±2μs     1.26  groupby.GroupByMethods.time_dtype_as_field('object', 'first', 'transformation')\r\n+     42.6±0.09μs      53.8±0.07μs     1.26  offset.OffestDatetimeArithmetic.time_apply(<YearBegin: month=1>)\r\n+     24.8±0.04ms       31.3±0.2ms     1.26  reindex.DropDuplicates.time_frame_drop_dups(False)\r\n+       317±0.5ms        400±0.3ms     1.26  groupby.GroupByMethods.time_dtype_as_field('int', 'skew', 'direct')\r\n+     7.77±0.05ms      9.77±0.01ms     1.26  groupby.Datelike.time_sum('date_range_tz')\r\n+       308±0.4ms        386±0.7ms     1.25  groupby.GroupByMethods.time_dtype_as_field('float', 'skew', 'direct')\r\n+           911ms            1.14s     1.25  groupby.GroupByMethods.time_dtype_as_field('int', 'mad', 'direct')\r\n+      67.4±0.2μs      84.3±0.06μs     1.25  inference.ToNumeric.time_from_float('ignore')\r\n+          19.0ms           23.8ms     1.25  eval.Query.time_query_datetime_column\r\n+       467±0.2ms        583±0.1ms     1.25  groupby.GroupByMethods.time_dtype_as_group('int', 'skew', 'direct')\r\n+           894ms            1.11s     1.24  groupby.GroupByMethods.time_dtype_as_field('int', 'mad', 'transformation')\r\n+     43.4±0.08ms         54.0±5ms     1.24  eval.Eval.time_add('numexpr', 'all')\r\n+           890ms            1.11s     1.24  groupby.GroupByMethods.time_dtype_as_field('float', 'mad', 'direct')\r\n+          43.4μs           53.9μs     1.24  index_object.Indexing.time_get_loc_sorted('Float')\r\n+      98.5±0.1ms          122±2ms     1.24  join_merge.MergeAsof.time_by_object\r\n+     43.5±0.05μs       53.9±0.2μs     1.24  offset.OffestDatetimeArithmetic.time_apply(<YearEnd: month=12>)\r\n+     3.11±0.03ms      3.85±0.03ms     1.24  reindex.DropDuplicates.time_frame_drop_dups_int(True)\r\n+     5.35±0.03μs      6.61±0.05μs     1.24  timestamp.TimestampConstruction.time_parse_iso8601_no_tz\r\n+      32.8±0.2ms         40.5±2ms     1.24  binary_ops.Timeseries.time_timestamp_ops_diff(None)\r\n+           892ms            1.10s     1.23  groupby.GroupByMethods.time_dtype_as_field('float', 'mad', 'transformation')\r\n+     41.4±0.08ms       50.9±0.2ms     1.23  frame_methods.Lookup.time_frame_fancy_lookup_all\r\n+           6.57s            8.05s     1.23  sparse.SparseDataFrameConstructor.time_constructor\r\n+      216±0.08μs        265±0.7μs     1.22  frame_methods.Dtypes.time_frame_dtypes\r\n+      51.8±0.1μs       63.4±0.2μs     1.22  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<YearBegin: month=1>)\r\n+      40.4±0.2ms       49.4±0.4ms     1.22  reshape.PivotTable.time_pivot_table\r\n+     3.46±0.01ms      4.22±0.02ms     1.22  sparse.FromCoo.time_sparse_series_from_coo\r\n+     4.27±0.02ms         5.20±0ms     1.22  reindex.DropDuplicates.time_frame_drop_dups_bool(True)\r\n+         350±1μs        426±0.3μs     1.22  frame_methods.GetDtypeCounts.time_frame_get_dtype_counts\r\n+      69.0±0.2μs       83.8±0.1μs     1.21  inference.ToNumeric.time_from_float('coerce')\r\n+           3.83s            4.64s     1.21  groupby.GroupByMethods.time_dtype_as_group('int', 'describe', 'direct')\r\n+           2.60s            3.15s     1.21  groupby.GroupByMethods.time_dtype_as_field('float', 'describe', 'direct')\r\n+         906±3μs      1.10±0.01ms     1.21  indexing.MultiIndexing.time_frame_ix\r\n+      34.8±0.2ms      42.3±0.01ms     1.21  join_merge.MergeAsof.time_on_int32\r\n+     54.4±0.04μs       66.0±0.1μs     1.21  offset.OffestDatetimeArithmetic.time_add(<YearBegin: month=1>)\r\n+      9.74±0.2ms      11.8±0.03ms     1.21  timeseries.AsOf.time_asof('Series')\r\n+           6.07s            7.34s     1.21  groupby.GroupByMethods.time_dtype_as_group('float', 'describe', 'transformation')\r\n+           3.82s            4.62s     1.21  groupby.GroupByMethods.time_dtype_as_group('int', 'describe', 'transformation')\r\n+     49.6±0.08μs       59.9±0.2μs     1.21  indexing.NumericSeriesIndexing.time_getitem_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+           2.59s            3.13s     1.21  groupby.GroupByMethods.time_dtype_as_field('int', 'describe', 'transformation')\r\n+        25.2±1ms       30.4±0.6ms     1.21  gil.ParallelReadCSV.time_read_csv('object')\r\n+     9.41±0.04ms      11.3±0.03ms     1.20  reindex.DropDuplicates.time_frame_drop_dups(True)\r\n+     14.3±0.05ms      17.2±0.03ms     1.20  frame_methods.Apply.time_apply_pass_thru\r\n+        926±10μs      1.11±0.01ms     1.20  multiindex_object.Duplicates.time_remove_unused_levels\r\n+           2.60s            3.11s     1.20  groupby.GroupByMethods.time_dtype_as_field('float', 'describe', 'transformation')\r\n+           6.05s            7.23s     1.20  groupby.GroupByMethods.time_dtype_as_group('float', 'describe', 'direct')\r\n+     4.65±0.03ms      5.56±0.01ms     1.19  join_merge.Merge.time_merge_dataframe_integer_key(False)\r\n+           1.57s            1.88s     1.19  groupby.GroupByMethods.time_dtype_as_group('int', 'mad', 'direct')\r\n+           2.62s            3.12s     1.19  groupby.GroupByMethods.time_dtype_as_field('int', 'describe', 'direct')\r\n+     1.02±0.01ms         1.21±0ms     1.19  indexing.NumericSeriesIndexing.time_ix_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+      9.81±0.2ms       11.7±0.4ms     1.19  timeseries.AsOf.time_asof_nan('Series')\r\n+     4.41±0.02ms      5.25±0.05ms     1.19  groupby.Datelike.time_sum('date_range')\r\n+     53.1±0.07μs      63.0±0.06μs     1.19  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<YearEnd: month=12>)\r\n+       143±0.9ms        170±0.5ms     1.19  groupby.Groups.time_series_groups('object_small')\r\n+         290±1μs        345±0.6μs     1.19  groupby.GroupByMethods.time_dtype_as_group('object', 'shift', 'transformation')\r\n+         827±8μs          981±3μs     1.19  reindex.DropDuplicates.time_series_drop_dups_int(False)\r\n+     4.04±0.01ms      4.79±0.01ms     1.19  timeseries.ResampleSeries.time_resample('datetime', '1D', 'mean')\r\n+      78.4±0.2ms      92.9±0.07ms     1.19  frame_ctor.FromDictwithTimestamp.time_dict_with_timestamp_offsets(<Nano>)\r\n+     4.47±0.02ms      5.30±0.01ms     1.19  timeseries.ResampleSeries.time_resample('period', '1D', 'mean')\r\n+       204±0.1μs        241±0.3μs     1.18  indexing.IntervalIndexing.time_loc_scalar\r\n+         239±2ms        282±0.7ms     1.18  join_merge.Concat.time_concat_series(1)\r\n+     66.9±0.07μs      79.1±0.07μs     1.18  indexing.NumericSeriesIndexing.time_getitem_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n+         678±4μs         801±30μs     1.18  groupby.GroupByMethods.time_dtype_as_group('float', 'tail', 'direct')\r\n+     2.86±0.02ms      3.38±0.01ms     1.18  reshape.SparseIndex.time_unstack\r\n+     7.43±0.03ms      8.77±0.02ms     1.18  timeseries.AsOf.time_asof_nan_single('DataFrame')\r\n+         270±1μs        318±0.4μs     1.18  groupby.GroupByMethods.time_dtype_as_field('float', 'shift', 'transformation')\r\n+           2.36s            2.79s     1.18  groupby.GroupByMethods.time_dtype_as_group('float', 'mad', 'transformation')\r\n+      67.7±0.3ms       79.7±0.4ms     1.18  stat_ops.FrameMultiIndexOps.time_op(0, 'kurt')\r\n+         269±1μs        316±0.5μs     1.18  groupby.GroupByMethods.time_dtype_as_field('float', 'shift', 'direct')\r\n+           1.59s            1.87s     1.18  groupby.GroupByMethods.time_dtype_as_group('int', 'mad', 'transformation')\r\n+      24.7±0.1ms       29.0±0.1ms     1.18  frame_methods.Apply.time_apply_np_mean\r\n+         237±1μs          279±1μs     1.18  groupby.GroupByMethods.time_dtype_as_field('int', 'count', 'transformation')\r\n+         237±1μs        278±0.4μs     1.17  groupby.GroupByMethods.time_dtype_as_field('datetime', 'count', 'transformation')\r\n+         777±3μs         912±40μs     1.17  groupby.GroupByMethods.time_dtype_as_group('int', 'std', 'transformation')\r\n+     5.40±0.05ms      6.34±0.01ms     1.17  join_merge.Merge.time_merge_dataframe_integer_key(True)\r\n+     55.5±0.05μs      65.0±0.02μs     1.17  offset.OffestDatetimeArithmetic.time_add(<YearEnd: month=12>)\r\n+     7.64±0.04ms      8.94±0.03ms     1.17  timeseries.AsOf.time_asof_single('DataFrame')\r\n+           2.38s            2.79s     1.17  groupby.GroupByMethods.time_dtype_as_group('float', 'mad', 'direct')\r\n+     5.52±0.03ms      6.46±0.02ms     1.17  reindex.DropDuplicates.time_frame_drop_dups_bool(False)\r\n+       240±0.6μs        280±0.6μs     1.17  groupby.GroupByMethods.time_dtype_as_field('int', 'count', 'direct')\r\n+         240±1μs          281±2μs     1.17  groupby.GroupByMethods.time_dtype_as_group('object', 'count', 'direct')\r\n+     10.9±0.05ms      12.8±0.05ms     1.17  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'float', 'max')\r\n+      51.4±0.3ms       60.0±0.4ms     1.17  sparse.ToCoo.time_sparse_series_to_coo\r\n+       177±0.3μs        207±0.3μs     1.17  indexing.NumericSeriesIndexing.time_loc_slice(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n+        28.5±4ms       33.3±0.4ms     1.17  binary_ops.Ops.time_frame_add(True, 'default')\r\n+         241±1μs        281±0.9μs     1.17  groupby.GroupByMethods.time_dtype_as_group('float', 'count', 'direct')\r\n+       234±0.5μs        273±0.9μs     1.17  groupby.GroupByMethods.time_dtype_as_field('float', 'count', 'direct')\r\n+         781±2μs         910±40μs     1.17  groupby.GroupByMethods.time_dtype_as_group('int', 'std', 'direct')\r\n+       299±0.9μs        348±0.6μs     1.17  groupby.GroupByMethods.time_dtype_as_group('datetime', 'shift', 'transformation')\r\n+      23.5±0.1ms      27.4±0.06ms     1.17  frame_methods.Apply.time_apply_lambda_mean\r\n+        2.83±0ms      3.29±0.01ms     1.16  groupby.SumMultiLevel.time_groupby_sum_multiindex\r\n+         597±4μs          695±6μs     1.16  groupby.GroupByMethods.time_dtype_as_group('object', 'head', 'transformation')\r\n+         685±3μs         797±20μs     1.16  groupby.GroupByMethods.time_dtype_as_group('float', 'tail', 'transformation')\r\n+         292±1μs          340±4μs     1.16  groupby.GroupByMethods.time_dtype_as_group('object', 'shift', 'direct')\r\n+       241±0.5μs          281±1μs     1.16  groupby.GroupByMethods.time_dtype_as_group('datetime', 'count', 'direct')\r\n+      115±0.08μs        133±0.2μs     1.16  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323d795ea0>, True)\r\n+       238±0.2μs        276±0.8μs     1.16  groupby.GroupByMethods.time_dtype_as_field('datetime', 'count', 'direct')\r\n+        28.1±2ms       32.6±0.5ms     1.16  inference.DateInferOps.time_add_timedeltas\r\n+      10.9±0.3ms      12.7±0.03ms     1.16  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'float', 'min')\r\n+       242±0.7μs        281±0.7μs     1.16  groupby.GroupByMethods.time_dtype_as_group('datetime', 'count', 'transformation')\r\n+     2.11±0.05ms      2.45±0.06ms     1.16  indexing.NumericSeriesIndexing.time_ix_array(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+         642±3μs          744±1μs     1.16  groupby.GroupByMethods.time_dtype_as_group('float', 'head', 'direct')\r\n+      11.6±0.1ms      13.4±0.04ms     1.16  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'int', 'max')\r\n+     13.7±0.06ms       15.9±0.1ms     1.16  rolling.Pairwise.time_pairwise(10, 'corr', False)\r\n+         242±2μs        280±0.4μs     1.16  groupby.GroupByMethods.time_dtype_as_group('int', 'count', 'transformation')\r\n+         320±1μs          370±1μs     1.16  groupby.GroupByMethods.time_dtype_as_group('int', 'shift', 'direct')\r\n+        7.13±0μs      8.24±0.05μs     1.16  timestamp.TimestampConstruction.time_parse_now\r\n+         300±1μs          347±1μs     1.16  groupby.GroupByMethods.time_dtype_as_group('datetime', 'shift', 'direct')\r\n+     7.08±0.02μs      8.17±0.03μs     1.15  timestamp.TimestampConstruction.time_parse_today\r\n+         670±3μs          774±4μs     1.15  groupby.GroupByMethods.time_dtype_as_field('int', 'head', 'transformation')\r\n+         675±3μs          779±4μs     1.15  groupby.GroupByMethods.time_dtype_as_group('int', 'head', 'direct')\r\n+      15.5±0.3ms       17.8±0.5ms     1.15  gil.ParallelRolling.time_rolling('std')\r\n+         668±4μs          770±3μs     1.15  groupby.GroupByMethods.time_dtype_as_field('int', 'head', 'direct')\r\n+       241±0.9μs        278±0.8μs     1.15  groupby.GroupByMethods.time_dtype_as_group('float', 'count', 'transformation')\r\n+         601±3μs          692±4μs     1.15  groupby.GroupByMethods.time_dtype_as_group('object', 'head', 'direct')\r\n+       301±0.3μs        347±0.1μs     1.15  groupby.GroupByMethods.time_dtype_as_group('float', 'shift', 'direct')\r\n+         679±5μs          781±4μs     1.15  groupby.GroupByMethods.time_dtype_as_group('datetime', 'tail', 'transformation')\r\n+     13.8±0.05ms      15.8±0.04ms     1.15  rolling.Pairwise.time_pairwise(1000, 'corr', False)\r\n+         709±5μs          814±6μs     1.15  groupby.GroupByMethods.time_dtype_as_group('int', 'tail', 'transformation')\r\n+       291±0.3μs          334±1μs     1.15  groupby.GroupByMethods.time_dtype_as_field('datetime', 'shift', 'direct')\r\n+         650±4μs          746±1μs     1.15  groupby.GroupByMethods.time_dtype_as_group('datetime', 'head', 'direct')\r\n+         321±1μs        369±0.7μs     1.15  groupby.GroupByMethods.time_dtype_as_group('int', 'shift', 'transformation')\r\n+         633±4μs          727±2μs     1.15  groupby.GroupByMethods.time_dtype_as_group('object', 'tail', 'transformation')\r\n+       235±0.5μs        270±0.4μs     1.15  groupby.GroupByMethods.time_dtype_as_field('float', 'count', 'transformation')\r\n+         189±1μs          217±1μs     1.15  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+         640±2μs          733±2μs     1.15  groupby.GroupByMethods.time_dtype_as_group('datetime', 'head', 'transformation')\r\n+         703±3μs          805±6μs     1.15  groupby.GroupByMethods.time_dtype_as_field('object', 'head', 'transformation')\r\n+       239±0.5μs        274±0.8μs     1.15  groupby.GroupByMethods.time_dtype_as_group('object', 'count', 'transformation')\r\n+     13.5±0.09ms      15.4±0.05ms     1.15  groupby.Transform.time_transform_multi_key2\r\n+         652±5μs         746±10μs     1.15  groupby.GroupByMethods.time_dtype_as_group('float', 'head', 'transformation')\r\n+         318±2μs          363±1μs     1.14  groupby.GroupByMethods.time_dtype_as_field('int', 'shift', 'direct')\r\n+         681±3μs          780±3μs     1.14  groupby.GroupByMethods.time_dtype_as_field('datetime', 'head', 'direct')\r\n+       181±0.6μs        207±0.7μs     1.14  groupby.GroupByMethods.time_dtype_as_field('datetime', 'size', 'transformation')\r\n+         675±5μs          773±5μs     1.14  groupby.GroupByMethods.time_dtype_as_group('int', 'head', 'transformation')\r\n+         686±1μs          785±3μs     1.14  groupby.GroupByMethods.time_dtype_as_field('datetime', 'head', 'transformation')\r\n+         243±1μs        278±0.5μs     1.14  groupby.GroupByMethods.time_dtype_as_group('int', 'count', 'direct')\r\n+         674±3μs          771±4μs     1.14  groupby.GroupByMethods.time_dtype_as_field('float', 'head', 'direct')\r\n+     13.9±0.04ms      15.9±0.05ms     1.14  rolling.Pairwise.time_pairwise(None, 'corr', False)\r\n+      21.0±0.6ms       24.0±0.5ms     1.14  gil.ParallelRolling.time_rolling('kurt')\r\n+      7.21±0.5ms       8.23±0.5ms     1.14  rolling.Methods.time_rolling('DataFrame', 10, 'float', 'std')\r\n+       304±0.5μs        348±0.6μs     1.14  groupby.GroupByMethods.time_dtype_as_group('float', 'shift', 'transformation')\r\n+       370±0.9μs        422±0.5μs     1.14  groupby.GroupByMethods.time_dtype_as_field('object', 'shift', 'transformation')\r\n+       181±0.6μs        207±0.3μs     1.14  groupby.GroupByMethods.time_dtype_as_group('int', 'size', 'direct')\r\n+         713±4μs          812±2μs     1.14  groupby.GroupByMethods.time_dtype_as_field('datetime', 'tail', 'transformation')\r\n+     13.0±0.07ms      14.8±0.04ms     1.14  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'float', 'max')\r\n+         737±5μs          839±2μs     1.14  groupby.GroupByMethods.time_dtype_as_field('object', 'tail', 'transformation')\r\n+      13.2±0.1ms      15.0±0.03ms     1.14  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'int', 'max')\r\n+       317±0.3μs        361±0.7μs     1.14  groupby.GroupByMethods.time_dtype_as_field('int', 'shift', 'transformation')\r\n+         683±3μs          776±3μs     1.14  groupby.GroupByMethods.time_dtype_as_group('datetime', 'tail', 'direct')\r\n+         614±1μs        698±0.5μs     1.14  multiindex_object.Values.time_datetime_level_values_sliced\r\n+         643±2μs          730±1μs     1.14  groupby.GroupByMethods.time_dtype_as_group('object', 'tail', 'direct')\r\n+         290±1μs        329±0.1μs     1.14  offset.OffestDatetimeArithmetic.time_add_10(<DateOffset: days=2, months=2>)\r\n+      28.4±0.1ms      32.3±0.05ms     1.14  groupby.MultiColumn.time_col_select_numpy_sum\r\n+     46.4±0.09ms       52.6±0.2ms     1.13  strings.Methods.time_len\r\n+         173±1μs        197±0.1μs     1.13  indexing.NumericSeriesIndexing.time_getitem_slice(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n+     1.00±0.01ms         1.14±0ms     1.13  reindex.DropDuplicates.time_series_drop_dups_string(False)\r\n+         672±5μs          762±4μs     1.13  groupby.GroupByMethods.time_dtype_as_field('float', 'head', 'transformation')\r\n+         713±4μs          808±4μs     1.13  groupby.GroupByMethods.time_dtype_as_group('int', 'tail', 'direct')\r\n+     18.2±0.05ms       20.6±0.1ms     1.13  indexing.NumericSeriesIndexing.time_getitem_lists(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n+         703±3μs         796±20μs     1.13  groupby.GroupByMethods.time_dtype_as_field('float', 'tail', 'transformation')\r\n+     94.6±0.04ms        107±0.3ms     1.13  frame_ctor.FromDictwithTimestamp.time_dict_with_timestamp_offsets(<Hour>)\r\n+     7.96±0.07ms      9.00±0.05ms     1.13  timeseries.ResampleSeries.time_resample('period', '5min', 'mean')\r\n+       183±0.5μs        207±0.5μs     1.13  groupby.GroupByMethods.time_dtype_as_field('float', 'size', 'transformation')\r\n+       185±0.6μs        209±0.5μs     1.13  groupby.GroupByMethods.time_dtype_as_group('float', 'size', 'transformation')\r\n+       181±0.4μs          205±2μs     1.13  groupby.GroupByMethods.time_dtype_as_field('datetime', 'size', 'direct')\r\n+         324±1ms          366±2ms     1.13  stat_ops.FrameMultiIndexOps.time_op(1, 'mad')\r\n+       185±0.3μs          209±1μs     1.13  groupby.GroupByMethods.time_dtype_as_group('datetime', 'size', 'transformation')\r\n+       294±0.6μs        332±0.9μs     1.13  groupby.GroupByMethods.time_dtype_as_field('datetime', 'shift', 'transformation')\r\n+     1.97±0.01ms      2.23±0.01ms     1.13  groupby.GroupByMethods.time_dtype_as_field('int', 'sem', 'direct')\r\n+         712±2μs         804±20μs     1.13  groupby.GroupByMethods.time_dtype_as_field('float', 'tail', 'direct')\r\n+         708±4μs          798±2μs     1.13  groupby.GroupByMethods.time_dtype_as_field('int', 'tail', 'transformation')\r\n+     13.0±0.04ms      14.7±0.04ms     1.13  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'float', 'min')\r\n+       184±0.6μs        208±0.2μs     1.13  groupby.GroupByMethods.time_dtype_as_group('datetime', 'size', 'direct')\r\n+       311±0.4ms        350±0.2ms     1.13  frame_methods.Apply.time_apply_axis_1\r\n+     3.60±0.02ms      4.06±0.03ms     1.13  replace.FillNa.time_replace(True)\r\n+     4.84±0.04ms       5.45±0.3ms     1.13  series_methods.NSort.time_nlargest('last')\r\n+     1.81±0.02ms      2.04±0.01ms     1.13  groupby.GroupByMethods.time_dtype_as_field('float', 'sem', 'direct')\r\n+       183±0.6μs        206±0.3μs     1.13  groupby.GroupByMethods.time_dtype_as_field('int', 'size', 'transformation')\r\n+      118±0.09ms        133±0.2ms     1.13  join_merge.Concat.time_concat_small_frames(0)\r\n+     2.25±0.01ms      2.53±0.01ms     1.12  groupby.GroupByMethods.time_dtype_as_group('int', 'sem', 'direct')\r\n+     14.4±0.03μs      16.1±0.03μs     1.12  inference.ToNumericDowncast.time_downcast('int32', None)\r\n+       134±0.2μs        150±0.5μs     1.12  indexing.IntervalIndexing.time_getitem_scalar\r\n+         376±1μs          422±1μs     1.12  groupby.GroupByMethods.time_dtype_as_field('object', 'shift', 'direct')\r\n+         368±1μs        412±0.9μs     1.12  timeseries.DatetimeIndex.time_unique('dst')\r\n+          20.5μs           22.9μs     1.12  index_object.Indexing.time_slice_step('Float')\r\n+     7.16±0.03ms      8.01±0.05ms     1.12  timeseries.ResampleSeries.time_resample('datetime', '5min', 'mean')\r\n+       158±0.4ms        177±0.4ms     1.12  frame_ctor.FromRecords.time_frame_from_records_generator(None)\r\n+       184±0.5μs        206±0.7μs     1.12  groupby.GroupByMethods.time_dtype_as_group('object', 'size', 'transformation')\r\n+       183±0.5μs        205±0.5μs     1.12  groupby.GroupByMethods.time_dtype_as_field('float', 'size', 'direct')\r\n+         713±3μs          797±4μs     1.12  groupby.GroupByMethods.time_dtype_as_field('object', 'head', 'direct')\r\n+     13.3±0.05ms      14.8±0.05ms     1.12  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'int', 'min')\r\n+         239±3ms        267±0.8ms     1.12  gil.ParallelDatetimeFields.time_datetime_to_period\r\n+      4.29±0.1ms      4.80±0.02ms     1.12  series_methods.ValueCounts.time_value_counts('int')\r\n+       237±0.5μs        265±0.4μs     1.12  frame_ctor.FromSeries.time_mi_series\r\n+         585±1μs          652±1μs     1.11  groupby.GroupByMethods.time_dtype_as_group('float', 'std', 'direct')\r\n+     9.77±0.03ms      10.9±0.02ms     1.11  reindex.DropDuplicates.time_frame_drop_dups_na(True)\r\n+       646±0.7μs          720±2μs     1.11  groupby.GroupByMethods.time_dtype_as_group('int', 'var', 'transformation')\r\n+           665ms            741ms     1.11  strings.Split.time_split(True)\r\n+     10.1±0.03ms      11.2±0.04ms     1.11  rolling.Methods.time_rolling('Series', 1000, 'float', 'std')\r\n+          20.4μs           22.8μs     1.11  index_object.Indexing.time_slice('Float')\r\n+       184±0.7μs        204±0.3μs     1.11  groupby.GroupByMethods.time_dtype_as_field('object', 'size', 'transformation')\r\n+       298±0.6μs        331±0.6μs     1.11  groupby.GroupByMethods.time_dtype_as_field('float', 'min', 'direct')\r\n+         199±1μs        221±0.3μs     1.11  frame_ctor.FromNDArray.time_frame_from_ndarray\r\n+       186±0.8μs        207±0.7μs     1.11  groupby.GroupByMethods.time_dtype_as_group('float', 'size', 'direct')\r\n+       185±0.6μs        206±0.7μs     1.11  groupby.GroupByMethods.time_dtype_as_field('object', 'size', 'direct')\r\n+     16.1±0.07ms      17.9±0.08ms     1.11  groupby.Transform.time_transform_multi_key1\r\n+     33.4±0.02ms       37.1±0.2ms     1.11  groupby.MultiColumn.time_cython_sum\r\n+       276±0.4ms          307±1ms     1.11  stat_ops.FrameMultiIndexOps.time_op(1, 'kurt')\r\n+      34.6±0.2μs      38.4±0.07μs     1.11  timeseries.DatetimeIndex.time_get('tz_aware')\r\n+           2.98s            3.31s     1.11  stat_ops.FrameMultiIndexOps.time_op([0, 1], 'mad')\r\n+           466μs            518μs     1.11  index_object.SetOperations.time_operation('datetime', 'union')\r\n+      26.6±0.4ms       29.5±0.4ms     1.11  groupby.Categories.time_groupby_ordered_nosort\r\n+         721±4μs          800±2μs     1.11  groupby.GroupByMethods.time_dtype_as_field('int', 'tail', 'direct')\r\n+     2.00±0.01ms      2.22±0.01ms     1.11  groupby.GroupByMethods.time_dtype_as_field('int', 'sem', 'transformation')\r\n+         575±3μs          638±3μs     1.11  groupby.GroupByMethods.time_dtype_as_field('int', 'std', 'direct')\r\n+     98.0±0.07ms        109±0.3ms     1.11  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<CustomBusinessDay>)\r\n+       185±0.6μs          205±1μs     1.11  groupby.GroupByMethods.time_dtype_as_field('int', 'size', 'direct')\r\n+     10.4±0.06ms      11.5±0.03ms     1.11  rolling.Methods.time_rolling('Series', 10, 'int', 'std')\r\n+      82.0±0.2μs       90.8±0.2μs     1.11  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323d795ea0>, False)\r\n+       184±0.3μs        204±0.5μs     1.11  groupby.GroupByMethods.time_dtype_as_group('int', 'size', 'transformation')\r\n+     10.2±0.07ms      11.3±0.01ms     1.11  rolling.Methods.time_rolling('Series', 10, 'float', 'std')\r\n+      35.1±0.1ms      38.8±0.05ms     1.11  indexing.InsertColumns.time_assign_with_setitem\r\n+         935±6μs         1.03±0ms     1.11  timeseries.ResetIndex.time_reest_datetimeindex(None)\r\n+      25.8±0.1ms       28.6±0.1ms     1.11  ctors.MultiIndexConstructor.time_multiindex_from_iterables\r\n+         466±2μs          515±1μs     1.11  groupby.GroupByMethods.time_dtype_as_group('float', 'var', 'direct')\r\n+        1.52±0ms      1.68±0.07ms     1.11  groupby.GroupByMethods.time_dtype_as_group('object', 'value_counts', 'direct')\r\n+     4.11±0.02ms      4.54±0.02ms     1.10  frame_methods.NSort.time_nlargest('first')\r\n+         747±2μs          825±3μs     1.10  groupby.GroupByMethods.time_dtype_as_field('object', 'tail', 'direct')\r\n+         407±2μs          450±1μs     1.10  groupby.GroupByMethods.time_dtype_as_group('datetime', 'max', 'direct')\r\n+     7.98±0.01ms      8.81±0.03ms     1.10  timeseries.ToDatetimeISO8601.time_iso8601_nosep\r\n+         156±1ms        172±0.4ms     1.10  join_merge.MergeOrdered.time_merge_ordered\r\n+         712±2ns          785±2ns     1.10  timestamp.TimestampProperties.time_dayofweek(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+         727±3μs          802±4μs     1.10  groupby.GroupByMethods.time_dtype_as_field('datetime', 'tail', 'direct')\r\n+       300±0.3μs        331±0.5μs     1.10  groupby.GroupByMethods.time_dtype_as_field('float', 'mean', 'transformation')\r\n+     7.13±0.01ms      7.86±0.05ms     1.10  stat_ops.FrameMultiIndexOps.time_op(0, 'sum')\r\n+        7.96±0ms         8.77±0ms     1.10  timeseries.ToDatetimeISO8601.time_iso8601_format_no_sep\r\n+     1.94±0.01ms      2.14±0.01ms     1.10  ctors.SeriesConstructors.time_series_constructor(<class 'list'>, True)\r\n+         299±1μs        329±0.8μs     1.10  groupby.GroupByMethods.time_dtype_as_field('float', 'min', 'transformation')\r\n```\r\n\r\n<details>\r\n\r\n```\r\n-          18.3ms           16.6ms     0.90  frame_methods.Reindex.time_reindex_axis0\r\n-          19.8ms         17.8±1ms     0.90  frame_methods.Reindex.time_reindex_upcast\r\n-     22.8±0.06μs      20.6±0.03μs     0.90  offset.OnOffset.time_on_offset(<BusinessMonthBegin>)\r\n-      7.42±0.1ms      6.68±0.04ms     0.90  stat_ops.SeriesMultiIndexOps.time_op(0, 'mean')\r\n-       157±0.5ms        140±0.3ms     0.90  offset.ApplyIndex.time_apply_index(<SemiMonthBegin: day_of_month=15>)\r\n-      21.8±0.2ms       19.5±0.1ms     0.90  offset.OffsetSeriesArithmetic.time_add_offset(<SemiMonthEnd: day_of_month=15>)\r\n-      63.0±0.4ms      56.3±0.08ms     0.89  categoricals.ValueCounts.time_value_counts(True)\r\n-     20.0±0.06ms      17.9±0.05ms     0.89  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\r\n-     8.68±0.04ms      7.76±0.08ms     0.89  stat_ops.SeriesMultiIndexOps.time_op(0, 'var')\r\n-      47.5±0.5ms       42.4±0.9ms     0.89  stat_ops.SeriesMultiIndexOps.time_op(0, 'mad')\r\n-         364±2ms          324±7ms     0.89  gil.ParallelGroupbyMethods.time_parallel(4, 'count')\r\n-           357ms        317±0.8ms     0.89  io.stata.Stata.time_read_stata('tc')\r\n-     8.82±0.03ms      7.84±0.02ms     0.89  stat_ops.SeriesMultiIndexOps.time_op(0, 'std')\r\n-     12.5±0.01ms      11.1±0.05ms     0.89  timeseries.DatetimeIndex.time_normalize('repeated')\r\n-     7.41±0.05ms      6.58±0.01ms     0.89  stat_ops.SeriesMultiIndexOps.time_op(0, 'sum')\r\n-      483±0.04ms        428±0.2ms     0.89  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<CustomBusinessMonthBegin>)\r\n-        56.1±2ms       49.6±0.2ms     0.88  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift('US/Eastern')\r\n-      94.4±0.1μs       83.3±0.2μs     0.88  offset.OffestDatetimeArithmetic.time_add_10(<BusinessDay>)\r\n-     12.4±0.01ms      11.0±0.02ms     0.88  timeseries.DatetimeIndex.time_normalize('tz_naive')\r\n-       358±0.9ms        316±0.4ms     0.88  plotting.TimeseriesPlotting.time_plot_regular\r\n-      53.4±0.1ms       47.1±0.2ms     0.88  frame_methods.Repr.time_html_repr_trunc_si\r\n-     7.58±0.06ms      6.66±0.03ms     0.88  stat_ops.SeriesMultiIndexOps.time_op(0, 'prod')\r\n-      71.7±0.1ms       62.8±0.1ms     0.88  frame_methods.Repr.time_html_repr_trunc_mi\r\n-     12.0±0.04ms      10.5±0.05ms     0.88  stat_ops.SeriesMultiIndexOps.time_op(0, 'median')\r\n-      84.1±0.1μs       73.6±0.2μs     0.88  offset.OffestDatetimeArithmetic.time_add(<BusinessDay>)\r\n-      21.5±0.1ms       18.8±0.1ms     0.87  offset.OffsetSeriesArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\r\n-       512±0.7μs          445±1μs     0.87  offset.OffestDatetimeArithmetic.time_add_10(<CustomBusinessMonthBegin>)\r\n-       157±0.6ms        137±0.3ms     0.87  offset.ApplyIndex.time_apply_index(<SemiMonthEnd: day_of_month=15>)\r\n-       468±0.5μs        406±0.3μs     0.87  offset.OffestDatetimeArithmetic.time_add(<CustomBusinessMonthBegin>)\r\n-         453±2μs          394±1μs     0.87  offset.OffestDatetimeArithmetic.time_apply(<CustomBusinessMonthBegin>)\r\n-      22.5±0.1ms      19.5±0.09ms     0.87  stat_ops.FrameOps.time_op('median', 'float', 0, True)\r\n-       247±0.2μs        215±0.3μs     0.87  period.PeriodProperties.time_property('min', 'end_time')\r\n-       460±0.6μs        399±0.3μs     0.87  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessMonthBegin>)\r\n-      138±0.05ms        119±0.4ms     0.87  io.hdf.HDFStoreDataFrame.time_write_store_table_wide\r\n-       229±0.3μs        198±0.2μs     0.86  period.PeriodUnaryMethods.time_to_timestamp('min')\r\n-         493±2ms        426±0.5ms     0.86  offset.OffsetSeriesArithmetic.time_add_offset(<CustomBusinessMonthBegin>)\r\n-     6.22±0.01ms         5.37±0ms     0.86  timeseries.DatetimeIndex.time_timeseries_is_month_start('repeated')\r\n-       232±0.1μs        201±0.4μs     0.86  period.PeriodProperties.time_property('min', 'start_time')\r\n-      22.5±0.2ms      19.4±0.08ms     0.86  stat_ops.FrameOps.time_op('median', 'float', 0, False)\r\n-       111±0.2ms      96.0±0.08ms     0.86  frame_ctor.FromDicts.time_nested_dict_columns\r\n-     6.26±0.01ms      5.39±0.01ms     0.86  timeseries.DatetimeIndex.time_timeseries_is_month_start('tz_naive')\r\n-       232±0.6μs          199±5μs     0.86  period.PeriodProperties.time_property('M', 'start_time')\r\n-      73.3±0.2μs      63.0±0.09μs     0.86  offset.OffestDatetimeArithmetic.time_apply(<BusinessDay>)\r\n-     9.25±0.06ms      7.94±0.04ms     0.86  stat_ops.SeriesMultiIndexOps.time_op(1, 'std')\r\n-         204±1μs        175±0.3μs     0.86  period.PeriodUnaryMethods.time_now('min')\r\n-       376±0.4ms        323±0.6ms     0.86  frame_methods.ToHTML.time_to_html_mixed\r\n-       248±0.4μs        213±0.9μs     0.86  period.PeriodProperties.time_property('M', 'end_time')\r\n-     9.18±0.05ms      7.81±0.04ms     0.85  stat_ops.SeriesMultiIndexOps.time_op(1, 'var')\r\n-      7.85±0.1ms      6.66±0.03ms     0.85  stat_ops.SeriesMultiIndexOps.time_op(1, 'prod')\r\n-     11.1±0.03ms      9.44±0.02ms     0.85  groupby.Size.time_category_size\r\n-       233±0.8μs        197±0.3μs     0.85  period.PeriodUnaryMethods.time_to_timestamp('M')\r\n-       159±0.5μs       135±0.09μs     0.85  offset.OffestDatetimeArithmetic.time_subtract_10(<Day>)\r\n-     12.4±0.05ms      10.5±0.07ms     0.84  stat_ops.SeriesMultiIndexOps.time_op(1, 'median')\r\n-      7.83±0.1ms      6.61±0.05ms     0.84  stat_ops.SeriesMultiIndexOps.time_op(1, 'mean')\r\n-      84.8±0.3μs      71.5±0.08μs     0.84  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessDay>)\r\n-     28.1±0.02ms       23.6±0.1ms     0.84  series_methods.ValueCounts.time_value_counts('object')\r\n-       232±0.3ms        194±0.3ms     0.84  plotting.TimeseriesPlotting.time_plot_regular_compat\r\n-     7.94±0.08ms      6.62±0.03ms     0.83  stat_ops.SeriesMultiIndexOps.time_op(1, 'sum')\r\n-       432±0.3μs        360±0.2μs     0.83  offset.OffestDatetimeArithmetic.time_subtract_10(<CustomBusinessMonthBegin>)\r\n-     18.8±0.06ms      15.7±0.04ms     0.83  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessDay>)\r\n-       239±0.3ms        198±0.2ms     0.83  plotting.TimeseriesPlotting.time_plot_irregular\r\n-     62.3±0.09μs      51.5±0.04μs     0.83  timedelta.TimedeltaConstructor.time_from_components\r\n-     20.2±0.08ms      16.6±0.06ms     0.82  period.PeriodIndexConstructor.time_from_pydatetime('D')\r\n-         420±1μs       346±0.08μs     0.82  offset.OffestDatetimeArithmetic.time_subtract(<CustomBusinessMonthBegin>)\r\n-       458±0.3ms        374±0.8ms     0.82  categoricals.Rank.time_rank_string\r\n-      73.2±0.2ms       59.7±0.2ms     0.82  timeseries.Iteration.time_iter_preexit(<function period_range at 0x7f323854abf8>)\r\n-           6.74s            5.48s     0.81  timeseries.Iteration.time_iter(<function period_range at 0x7f323854abf8>)\r\n-       129±0.6ms        105±0.7ms     0.81  gil.ParallelGroupbyMethods.time_parallel(2, 'sum')\r\n-      24.3±0.1ms           19.4ms     0.80  categoricals.Isin.time_isin_categorical('int64')\r\n-      24.0±0.3ms       19.1±0.2ms     0.80  stat_ops.SeriesMultiIndexOps.time_op(1, 'sem')\r\n-      20.7±0.1ms       16.4±0.1ms     0.79  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessDay>)\r\n-      23.9±0.3ms       18.7±0.2ms     0.78  stat_ops.SeriesMultiIndexOps.time_op(0, 'sem')\r\n-     3.15±0.04ms      2.46±0.01ms     0.78  offset.OffsetSeriesArithmetic.time_add_offset(<DateOffset: days=2, months=2>)\r\n-       101±0.2μs       78.7±0.2μs     0.78  offset.OffestDatetimeArithmetic.time_subtract(<YearBegin: month=1>)\r\n-     96.5±0.05μs       75.3±0.2μs     0.78  offset.OffestDatetimeArithmetic.time_add_10(<YearBegin: month=1>)\r\n-         128±1ms       99.8±0.3ms     0.78  gil.ParallelGroupbyMethods.time_parallel(2, 'min')\r\n-         267±3ms          207±1ms     0.78  gil.ParallelGroupbyMethods.time_parallel(4, 'min')\r\n-         156±1ms          121±7ms     0.78  gil.ParallelGroupbyMethods.time_parallel(2, 'var')\r\n-      22.9±0.1ms       17.7±0.1ms     0.77  stat_ops.FrameOps.time_op('median', 'int', 0, True)\r\n-     16.5±0.04ms      12.8±0.01ms     0.77  timeseries.DatetimeAccessor.time_dt_accessor_normalize\r\n-       121±0.3μs       93.6±0.2μs     0.77  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessDay>)\r\n-       265±0.9ms          203±1ms     0.77  gil.ParallelGroupbyMethods.time_parallel(4, 'sum')\r\n-       101±0.3μs      77.4±0.04μs     0.77  offset.OffestDatetimeArithmetic.time_subtract(<YearEnd: month=12>)\r\n-      23.4±0.2ms       17.9±0.1ms     0.76  stat_ops.FrameOps.time_op('median', 'int', 0, False)\r\n-        1.27±0μs          966±8ns     0.76  indexing.MethodLookup.time_lookup_loc\r\n-       155±0.8ms        117±0.2ms     0.76  offset.ApplyIndex.time_apply_index(<BusinessDay>)\r\n-         390±1ms        295±0.4ms     0.76  multiindex_object.GetLoc.time_large_get_loc\r\n-         140±1ms          105±4ms     0.75  gil.ParallelGroupbyMethods.time_parallel(2, 'mean')\r\n-        405±20ms          303±5ms     0.75  gil.ParallelGroupbyMethods.time_loop(8, 'count')\r\n-        407±20ms          303±2ms     0.75  gil.ParallelGroupbyMethods.time_loop(8, 'var')\r\n-     1.23±0.01μs          917±7ns     0.74  indexing.MethodLookup.time_lookup_iloc\r\n-        206±20ms        152±0.8ms     0.74  gil.ParallelGroupbyMethods.time_loop(4, 'count')\r\n-        203±20ms        150±0.3ms     0.74  gil.ParallelGroupbyMethods.time_loop(4, 'var')\r\n-         105±8ms         77.6±1ms     0.74  gil.ParallelGroupbyMethods.time_loop(2, 'count')\r\n-         733±6ms         539±10ms     0.74  gil.ParallelGroupbyMethods.time_parallel(8, 'count')\r\n-     2.42±0.01ms         1.76±0ms     0.73  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n-        21.7±1ms      15.7±0.02ms     0.73  inference.DateInferOps.time_subtract_datetimes\r\n-         141±1ms          102±5ms     0.72  gil.ParallelGroupbyMethods.time_parallel(2, 'max')\r\n-     19.1±0.07ms      13.8±0.02ms     0.72  offset.OnOffset.time_on_offset(<CustomBusinessMonthBegin>)\r\n-       141±0.2ms          102±3ms     0.72  gil.ParallelGroupbyMethods.time_parallel(2, 'last')\r\n-         289±1ms          208±2ms     0.72  gil.ParallelGroupbyMethods.time_parallel(4, 'prod')\r\n-      91.1±0.2μs       65.3±0.2μs     0.72  period.PeriodUnaryMethods.time_now('M')\r\n-        604±10ms          432±5ms     0.72  gil.ParallelGroupbyMethods.time_parallel(8, 'var')\r\n-         105±8ms       75.5±0.2ms     0.72  gil.ParallelGroupbyMethods.time_loop(2, 'var')\r\n-         312±2ms          222±3ms     0.71  gil.ParallelGroupbyMethods.time_parallel(4, 'var')\r\n-         268±7ms          191±3ms     0.71  gil.ParallelGroupbyMethods.time_parallel(4, 'mean')\r\n-       141±0.7ms          100±2ms     0.71  gil.ParallelGroupbyMethods.time_parallel(2, 'prod')\r\n-     2.30±0.02ms         1.63±0ms     0.71  offset.OffsetSeriesArithmetic.time_add_offset(<MonthBegin>)\r\n-        556±10ms          392±7ms     0.71  gil.ParallelGroupbyMethods.time_parallel(8, 'sum')\r\n-     2.34±0.02ms      1.64±0.01ms     0.70  offset.OffsetSeriesArithmetic.time_add_offset(<MonthEnd>)\r\n-     10.5±0.05ms      7.35±0.02ms     0.70  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x7f323530dc80>, False)\r\n-       110±0.2μs       76.2±0.3μs     0.69  offset.OffestDatetimeArithmetic.time_add_10(<QuarterEnd: startingMonth=3>)\r\n-       112±0.2μs       77.3±0.1μs     0.69  offset.OffestDatetimeArithmetic.time_subtract(<QuarterEnd: startingMonth=3>)\r\n-        592±10ms          409±6ms     0.69  gil.ParallelGroupbyMethods.time_parallel(8, 'min')\r\n-       114±0.2μs       78.3±0.1μs     0.68  offset.OffestDatetimeArithmetic.time_subtract(<BusinessQuarterEnd: startingMonth=3>)\r\n-         290±2ms        198±0.9ms     0.68  gil.ParallelGroupbyMethods.time_parallel(4, 'max')\r\n-       124±0.2μs       84.1±0.2μs     0.68  offset.OffestDatetimeArithmetic.time_subtract_10(<QuarterEnd: startingMonth=3>)\r\n-       125±0.1μs      84.5±0.04μs     0.68  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessQuarterEnd: startingMonth=3>)\r\n-      99.3±0.2μs      66.8±0.07μs     0.67  offset.OffestDatetimeArithmetic.time_add(<QuarterEnd: startingMonth=3>)\r\n-        93.7±9ms      63.0±0.02ms     0.67  gil.ParallelGroupbyMethods.time_loop(2, 'mean')\r\n-     19.0±0.06ms      12.8±0.01ms     0.67  offset.OnOffset.time_on_offset(<CustomBusinessMonthEnd>)\r\n-         644±1μs        431±0.5μs     0.67  offset.OffestDatetimeArithmetic.time_subtract(<CustomBusinessMonthEnd>)\r\n-       102±0.3μs       68.2±0.3μs     0.67  offset.OffestDatetimeArithmetic.time_add(<BusinessQuarterEnd: startingMonth=3>)\r\n-         544±8ms          361±6ms     0.66  gil.ParallelGroupbyMethods.time_parallel(8, 'max')\r\n-      96.8±0.4μs       64.2±0.2μs     0.66  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<QuarterEnd: startingMonth=3>)\r\n-        186±20ms        123±0.8ms     0.66  gil.ParallelGroupbyMethods.time_loop(4, 'mean')\r\n-        93.4±7ms       61.8±0.1ms     0.66  gil.ParallelGroupbyMethods.time_loop(2, 'min')\r\n-        185±20ms          123±3ms     0.66  gil.ParallelGroupbyMethods.time_loop(4, 'max')\r\n-        375±20ms          247±1ms     0.66  gil.ParallelGroupbyMethods.time_loop(8, 'min')\r\n-        93.1±9ms       61.2±0.2ms     0.66  gil.ParallelGroupbyMethods.time_loop(2, 'sum')\r\n-        189±20ms        124±0.4ms     0.66  gil.ParallelGroupbyMethods.time_loop(4, 'sum')\r\n-        94.0±9ms       61.7±0.2ms     0.66  gil.ParallelGroupbyMethods.time_loop(2, 'prod')\r\n-        94.5±9ms       62.1±0.4ms     0.66  gil.ParallelGroupbyMethods.time_loop(2, 'max')\r\n-        36.7±1ms         24.0±4ms     0.65  algorithms.Factorize.time_factorize_int(True)\r\n-       341±0.7ms        222±0.7ms     0.65  multiindex_object.Integer.time_get_indexer\r\n-        374±20ms          244±1ms     0.65  gil.ParallelGroupbyMethods.time_loop(8, 'mean')\r\n-        378±20ms          247±1ms     0.65  gil.ParallelGroupbyMethods.time_loop(8, 'sum')\r\n-        189±20ms        123±0.2ms     0.65  gil.ParallelGroupbyMethods.time_loop(4, 'min')\r\n-        375±20ms          244±3ms     0.65  gil.ParallelGroupbyMethods.time_loop(8, 'max')\r\n-      99.3±0.2μs       64.4±0.1μs     0.65  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessQuarterEnd: startingMonth=3>)\r\n-        382±20ms          246±1ms     0.64  gil.ParallelGroupbyMethods.time_loop(8, 'prod')\r\n-        195±20ms          126±1ms     0.64  gil.ParallelGroupbyMethods.time_loop(4, 'last')\r\n-        192±20ms          123±1ms     0.64  gil.ParallelGroupbyMethods.time_loop(4, 'prod')\r\n-        97.4±9ms       62.2±0.3ms     0.64  gil.ParallelGroupbyMethods.time_loop(2, 'last')\r\n-      86.7±0.1μs      54.4±0.07μs     0.63  offset.OffestDatetimeArithmetic.time_apply(<QuarterEnd: startingMonth=3>)\r\n-       136±0.1μs      84.8±0.06μs     0.62  offset.OffestDatetimeArithmetic.time_subtract_10(<YearBegin: month=1>)\r\n-        589±10ms          367±6ms     0.62  gil.ParallelGroupbyMethods.time_parallel(8, 'mean')\r\n-         593±7ms          369±8ms     0.62  gil.ParallelGroupbyMethods.time_parallel(8, 'last')\r\n-      89.1±0.2μs      55.2±0.07μs     0.62  offset.OffestDatetimeArithmetic.time_apply(<BusinessQuarterEnd: startingMonth=3>)\r\n-         289±2ms          179±6ms     0.62  gil.ParallelGroupbyMethods.time_parallel(4, 'last')\r\n-        390±20ms          241±1ms     0.62  gil.ParallelGroupbyMethods.time_loop(8, 'last')\r\n-         585±8ms          360±3ms     0.62  gil.ParallelGroupbyMethods.time_parallel(8, 'prod')\r\n-       537±0.5μs        326±0.2μs     0.61  offset.OffestDatetimeArithmetic.time_subtract_10(<CustomBusinessMonthEnd>)\r\n-       125±0.3μs       75.7±0.1μs     0.60  offset.OffestDatetimeArithmetic.time_add_10(<YearEnd: month=12>)\r\n-         523±2μs        312±0.3μs     0.60  offset.OffestDatetimeArithmetic.time_add_10(<CustomBusinessMonthEnd>)\r\n-        1.03±0μs          602±2ns     0.58  timedelta.TimedeltaProperties.time_timedelta_days\r\n-       147±0.3μs      85.4±0.07μs     0.58  offset.OffestDatetimeArithmetic.time_subtract_10(<QuarterBegin: startingMonth=3>)\r\n-       491±0.3ms        286±0.6ms     0.58  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<CustomBusinessMonthEnd>)\r\n-       136±0.4μs       78.6±0.1μs     0.58  offset.OffestDatetimeArithmetic.time_subtract(<QuarterBegin: startingMonth=3>)\r\n-           373ms            212ms     0.57  index_object.IndexAppend.time_append_int_list\r\n-       139±0.4μs       78.7±0.1μs     0.57  offset.OffestDatetimeArithmetic.time_subtract(<BusinessQuarterBegin: startingMonth=3>)\r\n-       150±0.4μs       84.5±0.1μs     0.57  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessQuarterBegin: startingMonth=3>)\r\n-       474±0.8μs        267±0.1μs     0.56  offset.OffestDatetimeArithmetic.time_add(<CustomBusinessMonthEnd>)\r\n-         506±2ms        285±0.2ms     0.56  offset.OffsetSeriesArithmetic.time_add_offset(<CustomBusinessMonthEnd>)\r\n-       134±0.1μs       75.2±0.4μs     0.56  offset.OffestDatetimeArithmetic.time_add_10(<QuarterBegin: startingMonth=3>)\r\n-        1.04±0μs          577±6ns     0.56  timedelta.TimedeltaProperties.time_timedelta_microseconds\r\n-         478±1μs        265±0.2μs     0.55  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessMonthEnd>)\r\n-         461±1μs        254±0.3μs     0.55  offset.OffestDatetimeArithmetic.time_apply(<CustomBusinessMonthEnd>)\r\n-       122±0.3μs      67.2±0.09μs     0.55  offset.OffestDatetimeArithmetic.time_add(<QuarterBegin: startingMonth=3>)\r\n-       124±0.2μs       68.1±0.2μs     0.55  offset.OffestDatetimeArithmetic.time_add(<BusinessYearBegin: month=1>)\r\n-       125±0.2μs       67.6±0.1μs     0.54  offset.OffestDatetimeArithmetic.time_add(<BusinessQuarterBegin: startingMonth=3>)\r\n-       120±0.3μs       65.2±0.1μs     0.54  offset.OffestDatetimeArithmetic.time_add(<MonthBegin>)\r\n-       139±0.5μs      75.4±0.08μs     0.54  offset.OffestDatetimeArithmetic.time_add_10(<BusinessQuarterBegin: startingMonth=3>)\r\n-      48.7±0.4ms      26.3±0.06ms     0.54  frame_methods.ToString.time_to_string_floats\r\n-       157±0.3μs       84.6±0.1μs     0.54  offset.OffestDatetimeArithmetic.time_subtract_10(<YearEnd: month=12>)\r\n-       135±0.3μs       72.7±0.3μs     0.54  period.PeriodUnaryMethods.time_asfreq('min')\r\n-      123±0.07μs      65.7±0.08μs     0.54  offset.OffestDatetimeArithmetic.time_add(<BusinessMonthEnd>)\r\n-     1.12±0.02μs          596±5ns     0.53  timedelta.TimedeltaProperties.time_timedelta_seconds\r\n-       120±0.2μs      64.1±0.09μs     0.53  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<QuarterBegin: startingMonth=3>)\r\n-       137±0.4μs       72.9±0.1μs     0.53  period.PeriodUnaryMethods.time_asfreq('M')\r\n-       122±0.1μs       64.3±0.2μs     0.53  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessYearBegin: month=1>)\r\n-       120±0.3μs      62.3±0.03μs     0.52  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<MonthBegin>)\r\n-       148±0.4μs       76.7±0.3μs     0.52  offset.OffestDatetimeArithmetic.time_subtract(<MonthBegin>)\r\n-       124±0.1μs       64.2±0.2μs     0.52  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessQuarterBegin: startingMonth=3>)\r\n-       142±0.4μs       73.3±0.1μs     0.52  offset.OffestDatetimeArithmetic.time_add_10(<MonthBegin>)\r\n-       122±0.2μs       62.8±0.2μs     0.51  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessMonthEnd>)\r\n-       151±0.5μs      77.2±0.06μs     0.51  offset.OffestDatetimeArithmetic.time_subtract(<BusinessMonthEnd>)\r\n-           813ms            415ms     0.51  timeseries.ToDatetimeISO8601.time_iso8601_tz_spaceformat\r\n-      26.9±0.2ms       13.7±0.1ms     0.51  timeseries.Iteration.time_iter_preexit(<function date_range at 0x7f3238596950>)\r\n-       145±0.2μs       73.2±0.1μs     0.51  offset.OffestDatetimeArithmetic.time_add_10(<BusinessMonthEnd>)\r\n-       152±0.3μs       76.4±0.1μs     0.50  offset.OffestDatetimeArithmetic.time_subtract(<BusinessMonthBegin>)\r\n-       164±0.3μs       81.4±0.1μs     0.50  offset.OffestDatetimeArithmetic.time_subtract_10(<MonthBegin>)\r\n-     4.05±0.03ms      2.00±0.01ms     0.49  series_methods.Map.time_map('dict')\r\n-       112±0.2μs      54.9±0.03μs     0.49  offset.OffestDatetimeArithmetic.time_apply(<BusinessYearBegin: month=1>)\r\n-       109±0.2μs       53.7±0.1μs     0.49  offset.OffestDatetimeArithmetic.time_apply(<MonthBegin>)\r\n-      167±0.07μs       81.8±0.1μs     0.49  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessMonthBegin>)\r\n-       112±0.1μs      54.6±0.06μs     0.49  offset.OffestDatetimeArithmetic.time_apply(<QuarterBegin: startingMonth=3>)\r\n-       112±0.2μs      54.2±0.07μs     0.49  offset.OffestDatetimeArithmetic.time_apply(<BusinessMonthEnd>)\r\n-       170±0.3μs       81.4±0.2μs     0.48  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessMonthEnd>)\r\n-       115±0.2μs       55.1±0.3μs     0.48  offset.OffestDatetimeArithmetic.time_apply(<BusinessQuarterBegin: startingMonth=3>)\r\n-       141±0.2μs      65.8±0.06μs     0.47  offset.OffestDatetimeArithmetic.time_add(<BusinessMonthBegin>)\r\n-       161±0.4μs       74.7±0.1μs     0.46  offset.OffestDatetimeArithmetic.time_add_10(<BusinessMonthBegin>)\r\n-       171±0.3μs       79.0±0.9μs     0.46  offset.OffestDatetimeArithmetic.time_subtract(<BusinessYearEnd: month=12>)\r\n-         164±5μs      75.8±0.05μs     0.46  offset.OffestDatetimeArithmetic.time_add_10(<BusinessYearEnd: month=12>)\r\n-       164±0.2μs      75.4±0.05μs     0.46  offset.OffestDatetimeArithmetic.time_add_10(<BusinessYearBegin: month=1>)\r\n-       170±0.2μs       78.1±0.2μs     0.46  offset.OffestDatetimeArithmetic.time_subtract(<BusinessYearBegin: month=1>)\r\n-       140±0.4μs       62.5±0.1μs     0.45  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessMonthBegin>)\r\n-       210±0.5μs      91.2±0.08μs     0.43  offset.OffestDatetimeArithmetic.time_subtract_10(<SemiMonthBegin: day_of_month=15>)\r\n-       125±0.2ms       54.1±0.3ms     0.43  categoricals.Constructor.time_all_nan\r\n-       214±0.5μs       91.2±0.1μs     0.43  offset.OffestDatetimeArithmetic.time_subtract_10(<SemiMonthEnd: day_of_month=15>)\r\n-       204±0.4μs       85.3±0.1μs     0.42  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessYearBegin: month=1>)\r\n-       129±0.3μs       53.7±0.2μs     0.42  offset.OffestDatetimeArithmetic.time_apply(<BusinessMonthBegin>)\r\n-       201±0.2μs      83.6±0.09μs     0.42  offset.OffestDatetimeArithmetic.time_subtract(<SemiMonthBegin: day_of_month=15>)\r\n-       207±0.6μs       85.3±0.2μs     0.41  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessYearEnd: month=12>)\r\n-       196±0.5μs       80.6±0.2μs     0.41  offset.OffestDatetimeArithmetic.time_add_10(<SemiMonthBegin: day_of_month=15>)\r\n-       205±0.5μs      83.9±0.08μs     0.41  offset.OffestDatetimeArithmetic.time_subtract(<SemiMonthEnd: day_of_month=15>)\r\n-       200±0.9μs       80.2±0.1μs     0.40  offset.OffestDatetimeArithmetic.time_add_10(<SemiMonthEnd: day_of_month=15>)\r\n-           902ms          346±1ms     0.38  multiindex_object.GetLoc.time_large_get_loc_warm\r\n-           2.34s            891ms     0.38  timeseries.DatetimeIndex.time_to_time('tz_aware')\r\n-       186±0.3μs       70.0±0.3μs     0.38  offset.OffestDatetimeArithmetic.time_add(<SemiMonthBegin: day_of_month=15>)\r\n-       190±0.2μs       70.0±0.1μs     0.37  offset.OffestDatetimeArithmetic.time_add(<SemiMonthEnd: day_of_month=15>)\r\n-       205±0.6μs       74.6±0.1μs     0.36  offset.OffestDatetimeArithmetic.time_add_10(<MonthEnd>)\r\n-       186±0.3μs      67.7±0.06μs     0.36  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<SemiMonthBegin: day_of_month=15>)\r\n-       185±0.2μs      67.1±0.06μs     0.36  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<SemiMonthEnd: day_of_month=15>)\r\n-       212±0.3μs      75.8±0.06μs     0.36  offset.OffestDatetimeArithmetic.time_subtract(<MonthEnd>)\r\n-       218±0.1μs       77.7±0.1μs     0.36  offset.OffestDatetimeArithmetic.time_add_10(<BusinessQuarterEnd: startingMonth=3>)\r\n-       230±0.3μs      81.7±0.06μs     0.36  offset.OffestDatetimeArithmetic.time_subtract_10(<MonthEnd>)\r\n-       189±0.6μs       66.3±0.1μs     0.35  offset.OffestDatetimeArithmetic.time_add(<MonthEnd>)\r\n-       184±0.2μs      63.0±0.06μs     0.34  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<MonthEnd>)\r\n-       174±0.7μs       57.5±0.1μs     0.33  offset.OffestDatetimeArithmetic.time_apply(<SemiMonthBegin: day_of_month=15>)\r\n-       175±0.2μs      57.3±0.04μs     0.33  offset.OffestDatetimeArithmetic.time_apply(<SemiMonthEnd: day_of_month=15>)\r\n-     5.05±0.03ms         1.61±0ms     0.32  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n-     5.11±0.05ms         1.61±0ms     0.32  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n-       215±0.3μs       66.8±0.1μs     0.31  offset.OffestDatetimeArithmetic.time_add(<BusinessYearEnd: month=12>)\r\n-       173±0.2μs      53.6±0.09μs     0.31  offset.OffestDatetimeArithmetic.time_apply(<MonthEnd>)\r\n-       218±0.3μs       64.7±0.1μs     0.30  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessYearEnd: month=12>)\r\n-         119±2ms       35.0±0.4ms     0.29  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift(None)\r\n-     1.53±0.01ms        446±0.9μs     0.29  indexing.AssignTimeseriesIndex.time_frame_assign_timeseries_index\r\n-       203±0.2μs      54.2±0.06μs     0.27  offset.OffestDatetimeArithmetic.time_apply(<BusinessYearEnd: month=12>)\r\n-     2.30±0.01ms          609±2μs     0.26  series_methods.Map.time_map('Series')\r\n-         137±2ms      32.7±0.07ms     0.24  inference.DateInferOps.time_timedelta_plus_datetime\r\n-     2.01±0.01ms          466±1μs     0.23  groupby.GroupByMethods.time_dtype_as_group('object', 'bfill', 'transformation')\r\n-         959±2μs        222±0.4μs     0.23  groupby.GroupByMethods.time_dtype_as_group('object', 'any', 'transformation')\r\n-        2.01±0ms          463±2μs     0.23  groupby.GroupByMethods.time_dtype_as_group('object', 'bfill', 'direct')\r\n-     2.04±0.01ms          469±1μs     0.23  groupby.GroupByMethods.time_dtype_as_group('object', 'ffill', 'direct')\r\n-         962±2μs        219±0.4μs     0.23  groupby.GroupByMethods.time_dtype_as_group('object', 'any', 'direct')\r\n-         963±1μs        217±0.7μs     0.23  groupby.GroupByMethods.time_dtype_as_group('object', 'all', 'transformation')\r\n-        2.02±0ms          454±2μs     0.22  groupby.GroupByMethods.time_dtype_as_group('object', 'ffill', 'transformation')\r\n-         290±2ms       64.9±0.3ms     0.22  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'midpoint')\r\n-         964±2μs        215±0.2μs     0.22  groupby.GroupByMethods.time_dtype_as_group('object', 'all', 'direct')\r\n-         291±1ms       65.1±0.2ms     0.22  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'linear')\r\n-         287±3ms         63.3±1ms     0.22  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'linear')\r\n-       286±0.8ms       63.1±0.9ms     0.22  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'midpoint')\r\n-         291±2ms       62.2±0.2ms     0.21  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'midpoint')\r\n-         288±1ms       61.4±0.2ms     0.21  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'higher')\r\n-       292±0.5ms       61.2±0.2ms     0.21  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'nearest')\r\n-         297±3ms       62.2±0.2ms     0.21  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'linear')\r\n-         289±5ms       59.6±0.9ms     0.21  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'higher')\r\n-         293±2ms       60.3±0.5ms     0.21  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'linear')\r\n-         287±1ms       59.0±0.9ms     0.21  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'nearest')\r\n-         298±1ms       60.7±0.2ms     0.20  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'lower')\r\n-         293±3ms         58.8±1ms     0.20  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'lower')\r\n-         295±6ms       58.6±0.2ms     0.20  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'nearest')\r\n-         296±3ms       58.4±0.3ms     0.20  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'higher')\r\n-         297±4ms       58.1±0.2ms     0.20  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'lower')\r\n-     3.17±0.01ms          609±6μs     0.19  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n-         297±1ms       56.8±0.5ms     0.19  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'nearest')\r\n-       292±0.8ms       55.7±0.5ms     0.19  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'lower')\r\n-         295±1ms       55.9±0.5ms     0.19  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'higher')\r\n-     3.25±0.01ms          603±5μs     0.19  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n-     19.9±0.06ms      3.65±0.07ms     0.18  series_methods.Dir.time_dir_strings\r\n-         325±1ms       59.6±0.5ms     0.18  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'midpoint')\r\n-     7.24±0.02ms         1.25±0ms     0.17  offset.ApplyIndex.time_apply_index(<QuarterBegin: startingMonth=3>)\r\n-         680±6ms        112±0.2ms     0.16  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'linear')\r\n-         675±1ms        110±0.4ms     0.16  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'midpoint')\r\n-         708±4ms        112±0.2ms     0.16  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'midpoint')\r\n-     7.10±0.03ms      1.11±0.01ms     0.16  offset.ApplyIndex.time_apply_index(<YearBegin: month=1>)\r\n-         677±5ms        105±0.3ms     0.15  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'lower')\r\n-         718±2ms        110±0.7ms     0.15  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'linear')\r\n-         685±4ms        105±0.4ms     0.15  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'higher')\r\n-         697±8ms        104±0.1ms     0.15  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'nearest')\r\n-         685±3ms        102±0.6ms     0.15  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'nearest')\r\n-         699±1ms        102±0.4ms     0.15  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'higher')\r\n-         707±1ms        103±0.6ms     0.15  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'lower')\r\n-         644±1ms       87.5±0.2ms     0.14  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'midpoint')\r\n-         649±3ms       87.4±0.1ms     0.13  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'linear')\r\n-         644±1ms       85.5±0.2ms     0.13  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'linear')\r\n-         646±2ms       85.0±0.3ms     0.13  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'midpoint')\r\n-       639±0.9ms       78.7±0.1ms     0.12  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'lower')\r\n-       646±0.5ms       78.8±0.1ms     0.12  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'nearest')\r\n-         653±2ms       78.7±0.1ms     0.12  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'higher')\r\n-         639±4ms      76.9±0.08ms     0.12  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'higher')\r\n-         639±4ms       76.1±0.3ms     0.12  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'lower')\r\n-       652±0.8ms       76.1±0.1ms     0.12  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'nearest')\r\n-       210±0.2ms      20.6±0.01ms     0.10  categoricals.Isin.time_isin_categorical('object')\r\n-     25.5±0.03ms         2.17±0ms     0.09  timeseries.DatetimeIndex.time_to_date('dst')\r\n-           729ms       56.9±0.3ms     0.08  timeseries.DatetimeIndex.time_to_time('repeated')\r\n-           707ms      54.3±0.02ms     0.08  timeseries.DatetimeIndex.time_to_date('repeated')\r\n-           715ms      54.5±0.03ms     0.08  timeseries.DatetimeIndex.time_to_date('tz_naive')\r\n-           725ms       55.1±0.2ms     0.08  timeseries.DatetimeIndex.time_to_time('tz_naive')\r\n-     26.4±0.05ms      1.95±0.01ms     0.07  timeseries.DatetimeIndex.time_to_time('dst')\r\n-       212±0.4ms      14.9±0.01ms     0.07  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'int', 'max')\r\n-      212±0.05ms      14.8±0.04ms     0.07  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'max')\r\n-       213±0.1ms      14.7±0.02ms     0.07  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'min')\r\n-       213±0.5ms      14.7±0.04ms     0.07  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'int', 'min')\r\n-       295±0.7μs       18.8±0.1μs     0.06  offset.OnOffset.time_on_offset(<QuarterEnd: startingMonth=3>)\r\n-       210±0.7ms       13.3±0.2ms     0.06  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'int', 'max')\r\n-      26.4±0.1ms         1.65±0ms     0.06  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n-       211±0.2ms      13.2±0.03ms     0.06  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'int', 'min')\r\n-       210±0.3ms      12.9±0.03ms     0.06  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'float', 'max')\r\n-      27.1±0.2ms      1.66±0.01ms     0.06  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n-      210±0.04ms      12.6±0.03ms     0.06  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'float', 'min')\r\n-           2.33s        124±0.7ms     0.05  timeseries.DatetimeIndex.time_to_date('tz_aware')\r\n-           1.79s       66.6±0.3ms     0.04  series_methods.SeriesConstructor.time_constructor('dict')\r\n-     38.1±0.02μs         1.18±0μs     0.03  timestamp.TimestampProperties.time_is_month_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     38.0±0.09μs         1.13±0μs     0.03  timestamp.TimestampProperties.time_is_month_end(None, None)\r\n-     34.4±0.02μs          939±6ns     0.03  timestamp.TimestampProperties.time_dayofyear(None, None)\r\n-      34.9±0.1μs        933±0.6ns     0.03  timestamp.TimestampProperties.time_week(None, None)\r\n-     34.6±0.08μs          923±3ns     0.03  timestamp.TimestampProperties.time_week(None, 'B')\r\n-     34.6±0.08μs          912±5ns     0.03  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-     24.1±0.08ms        631±0.9μs     0.03  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n-     34.9±0.05μs          910±8ns     0.03  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     34.8±0.05μs         906±10ns     0.03  timestamp.TimestampProperties.time_dayofyear(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     34.5±0.04μs          880±3ns     0.03  timestamp.TimestampProperties.time_dayofyear(None, 'B')\r\n-     34.7±0.06μs          859±2ns     0.02  timestamp.TimestampProperties.time_dayofyear(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-      25.3±0.1ms        617±0.7μs     0.02  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n-     34.9±0.05μs        836±0.8ns     0.02  timestamp.TimestampProperties.time_days_in_month(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     34.5±0.09μs          822±2ns     0.02  timestamp.TimestampProperties.time_days_in_month(None, 'B')\r\n-     34.9±0.05μs          827±2ns     0.02  timestamp.TimestampProperties.time_days_in_month(None, None)\r\n-     35.1±0.08μs          823±3ns     0.02  timestamp.TimestampProperties.time_days_in_month(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-     38.2±0.06μs         873±10ns     0.02  timestamp.TimestampProperties.time_is_year_start(None, None)\r\n-      37.6±0.1μs          816±7ns     0.02  timestamp.TimestampProperties.time_is_leap_year(None, None)\r\n-     34.6±0.04μs          740±3ns     0.02  timestamp.TimestampProperties.time_quarter(None, 'B')\r\n-      38.3±0.1μs          816±2ns     0.02  timestamp.TimestampProperties.time_is_year_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     34.4±0.03μs          734±2ns     0.02  timestamp.TimestampProperties.time_quarter(None, None)\r\n-      34.9±0.1μs          728±3ns     0.02  timestamp.TimestampProperties.time_quarter(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-     37.8±0.02μs          788±3ns     0.02  timestamp.TimestampProperties.time_is_quarter_end(None, None)\r\n-     37.8±0.05μs          775±2ns     0.02  timestamp.TimestampProperties.time_is_quarter_start(None, None)\r\n-     34.4±0.04μs          706±3ns     0.02  timestamp.TimestampProperties.time_quarter(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      37.8±0.1μs          772±3ns     0.02  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     38.0±0.05μs          775±3ns     0.02  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     37.9±0.04μs          766±4ns     0.02  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      37.8±0.1μs          759±1ns     0.02  timestamp.TimestampProperties.time_is_year_end(None, None)\r\n-     37.7±0.06μs          755±3ns     0.02  timestamp.TimestampProperties.time_is_quarter_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     37.7±0.05μs          741±4ns     0.02  timestamp.TimestampProperties.time_is_month_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     37.4±0.08μs          731±2ns     0.02  timestamp.TimestampProperties.time_is_month_start(None, None)\r\n-           12.4s        239±0.7ms     0.02  plotting.Plotting.time_frame_plot\r\n-       113±0.5ms      1.70±0.01ms     0.02  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n-       135±0.3ms         1.70±0ms     0.01  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n-       136±0.4ms      1.66±0.01ms     0.01  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n-       137±0.6ms      1.65±0.01ms     0.01  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n-       154±0.4ms         1.65±0ms     0.01  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n-           12.7s          119±2ms     0.01  plotting.Plotting.time_series_plot\r\n-           1.26s      11.8±0.02ms     0.01  timeseries.Iteration.time_iter(<function date_range at 0x7f3238596950>)\r\n-           8.12s       62.7±0.5ms     0.01  stat_ops.FrameOps.time_op('median', 'int', 1, True)\r\n-           8.02s       60.1±0.6ms     0.01  stat_ops.FrameOps.time_op('median', 'float', 1, False)\r\n-           8.00s       59.5±0.4ms     0.01  stat_ops.FrameOps.time_op('median', 'float', 1, True)\r\n-       202±0.3ms         1.49±0ms     0.01  offset.ApplyIndex.time_apply_index(<YearEnd: month=12>)\r\n-           8.10s       57.4±0.4ms     0.01  stat_ops.FrameOps.time_op('median', 'int', 1, False)\r\n-       249±0.6ms      1.73±0.01ms     0.01  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n-      88.7±0.1μs         589±10ns     0.01  timedelta.DatetimeAccessor.time_dt_accessor\r\n-           6.39s       42.3±0.2ms     0.01  rolling.Pairwise.time_pairwise(1000, 'corr', True)\r\n-           6.34s       41.8±0.2ms     0.01  rolling.Pairwise.time_pairwise(10, 'corr', True)\r\n-           6.40s       42.0±0.1ms     0.01  rolling.Pairwise.time_pairwise(None, 'corr', True)\r\n-       216±0.4ms         1.37±0ms     0.01  offset.ApplyIndex.time_apply_index(<QuarterEnd: startingMonth=3>)\r\n-       254±0.4ms         1.60±0ms     0.01  groupby.GroupByMethods.time_dtype_as_field('float', 'rank', 'transformation')\r\n-         263±1ms         1.64±0ms     0.01  groupby.GroupByMethods.time_dtype_as_field('int', 'rank', 'direct')\r\n-       254±0.4ms         1.59±0ms     0.01  groupby.GroupByMethods.time_dtype_as_field('float', 'rank', 'direct')\r\n-       266±0.8ms         1.65±0ms     0.01  groupby.GroupByMethods.time_dtype_as_field('int', 'rank', 'transformation')\r\n-       110±0.5ms          678±5μs     0.01  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n-           6.36s       36.8±0.1ms     0.01  rolling.Pairwise.time_pairwise(10, 'cov', True)\r\n-           6.39s       36.9±0.1ms     0.01  rolling.Pairwise.time_pairwise(1000, 'cov', True)\r\n-           6.43s      36.9±0.02ms     0.01  rolling.Pairwise.time_pairwise(None, 'cov', True)\r\n-     7.96±0.02ms       43.1±0.3μs     0.01  offset.OnOffset.time_on_offset(<BusinessYearEnd: month=12>)\r\n-       134±0.5ms          668±2μs     0.00  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n-      69.5±0.2μs          332±4ns     0.00  timeseries.DatetimeAccessor.time_dt_accessor\r\n-       133±0.4ms          627±3μs     0.00  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n-       135±0.6ms          634±1μs     0.00  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n-       341±0.5ms         1.48±0ms     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'rank', 'direct')\r\n-       385±0.4ms         1.67±0ms     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'rank', 'transformation')\r\n-       343±0.5ms         1.48±0ms     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'rank', 'transformation')\r\n-       386±0.8ms         1.65±0ms     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'rank', 'direct')\r\n-       151±0.3ms        628±0.9μs     0.00  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n-        6.15±0ms      21.3±0.08μs     0.00  offset.OnOffset.time_on_offset(<BusinessMonthEnd>)\r\n-     5.26±0.01ms      18.0±0.07μs     0.00  offset.OnOffset.time_on_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n-           4.43s      14.8±0.04ms     0.00  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'max')\r\n-           4.43s      14.7±0.01ms     0.00  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'max')\r\n-           4.46s      14.7±0.04ms     0.00  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'min')\r\n-           4.44s      14.6±0.02ms     0.00  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'min')\r\n-     5.24±0.01ms      17.2±0.08μs     0.00  offset.OnOffset.time_on_offset(<QuarterBegin: startingMonth=3>)\r\n-           4.43s      13.3±0.04ms     0.00  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'max')\r\n-           4.42s      13.1±0.04ms     0.00  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'min')\r\n-     6.51±0.02ms      18.6±0.06μs     0.00  offset.OnOffset.time_on_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n-           4.43s      12.6±0.03ms     0.00  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'max')\r\n-           4.43s      12.5±0.06ms     0.00  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'min')\r\n-           775ms      2.18±0.01ms     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'pct_change', 'direct')\r\n-           776ms      2.18±0.01ms     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'pct_change', 'transformation')\r\n-       600±0.8ms      1.68±0.01ms     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'rank', 'transformation')\r\n-       248±0.6ms          685±5μs     0.00  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n-       608±0.7ms         1.67±0ms     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'rank', 'direct')\r\n-       610±0.8ms      1.65±0.01ms     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'rank', 'direct')\r\n-      614±0.05ms         1.66±0ms     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'rank', 'transformation')\r\n-       216±0.2ms        564±0.7μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'bfill', 'direct')\r\n-       215±0.8ms        561±0.7μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'ffill', 'direct')\r\n-       218±0.5ms        564±0.6μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'bfill', 'transformation')\r\n-       216±0.4ms        555±0.9μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'ffill', 'transformation')\r\n-           868ms      2.07±0.01ms     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'pct_change', 'transformation')\r\n-           878ms      2.06±0.02ms     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'pct_change', 'direct')\r\n-      219±0.09ms        439±0.4μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'any', 'transformation')\r\n-       218±0.6ms          433±1μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'all', 'direct')\r\n-           2.72s      5.34±0.02ms     0.00  timedelta.DatetimeAccessor.time_timedelta_nanoseconds\r\n-       218±0.4ms          425±1μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'all', 'transformation')\r\n-       220±0.6ms        428±0.9μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'any', 'direct')\r\n-           2.78s         5.25±0ms     0.00  timedelta.DatetimeAccessor.time_timedelta_days\r\n-           2.78s      5.25±0.02ms     0.00  timedelta.DatetimeAccessor.time_timedelta_microseconds\r\n-     5.88±0.01ms      10.9±0.02μs     0.00  offset.OnOffset.time_on_offset(<BusinessYearBegin: month=1>)\r\n-           2.83s         5.20±0ms     0.00  timedelta.DatetimeAccessor.time_timedelta_seconds\r\n-       318±0.3ms          567±2μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'bfill', 'direct')\r\n-       318±0.5ms          564±1μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'bfill', 'transformation')\r\n-       318±0.3ms          562±2μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'ffill', 'direct')\r\n-       320±0.9ms         566±10μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'ffill', 'transformation')\r\n-           1.38s      2.28±0.01ms     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'pct_change', 'direct')\r\n-           1.40s      2.27±0.02ms     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'pct_change', 'transformation')\r\n-       523±0.3ms        728±0.9μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'bfill', 'transformation')\r\n-       520±0.7ms          720±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'ffill', 'direct')\r\n-       518±0.7ms          715±3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'ffill', 'transformation')\r\n-       329±0.5ms        453±0.5μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'bfill', 'transformation')\r\n-       525±0.5ms          720±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'bfill', 'direct')\r\n-       335±0.9ms        452±0.5μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'ffill', 'direct')\r\n-       334±0.9ms        449±0.5μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'bfill', 'direct')\r\n-        344±10ms          442±1μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'ffill', 'transformation')\r\n-       183±0.2ms        225±0.5μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'any', 'transformation')\r\n-           2.05s      2.52±0.03ms     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'pct_change', 'direct')\r\n-           2.04s      2.49±0.02ms     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'pct_change', 'transformation')\r\n-       179±0.6ms          218±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'all', 'direct')\r\n-       181±0.6ms        220±0.3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'any', 'transformation')\r\n-       182±0.2ms          221±1μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'any', 'direct')\r\n-       183±0.2ms        222±0.5μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'any', 'direct')\r\n-       184±0.5ms        220±0.4μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'all', 'transformation')\r\n-       185±0.7ms          219±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'all', 'transformation')\r\n-       186±0.6ms        219±0.3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'all', 'direct')\r\n-       503±0.5ms          566±1μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'bfill', 'transformation')\r\n-       201±0.2ms        226±0.3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'any', 'transformation')\r\n-       500±0.8ms        560±0.4μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'bfill', 'direct')\r\n-       497±0.4ms          555±2μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'ffill', 'direct')\r\n-       202±0.8ms        222±0.4μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'any', 'direct')\r\n-      501±0.06ms        549±0.6μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'ffill', 'transformation')\r\n-       202±0.8ms        220±0.4μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'all', 'transformation')\r\n-       205±0.2ms          223±1μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'all', 'direct')\r\n-       482±0.9ms          472±1μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'bfill', 'direct')\r\n-       483±0.9ms          469±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'ffill', 'direct')\r\n-       485±0.6ms        467±0.7μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'bfill', 'transformation')\r\n-       480±0.3ms        461±0.8μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'ffill', 'transformation')\r\n-       509±0.3ms          461±1μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'ffill', 'transformation')\r\n-       506±0.4ms        458±0.8μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'bfill', 'transformation')\r\n-       513±0.6ms        460±0.9μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'bfill', 'direct')\r\n-       511±0.2ms        459±0.9μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'ffill', 'direct')\r\n-       274±0.3ms          229±1μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'any', 'direct')\r\n-       270±0.8ms        224±0.6μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'any', 'transformation')\r\n-       269±0.8ms        223±0.7μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'all', 'transformation')\r\n-       272±0.3ms        220±0.4μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'all', 'direct')\r\n-       418±0.2ms        226±0.3μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'any', 'transformation')\r\n-       419±0.2ms          225±1μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'any', 'direct')\r\n-       427±0.8ms        228±0.5μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'any', 'direct')\r\n-       425±0.2ms        226±0.6μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'all', 'transformation')\r\n-       431±0.4ms        229±0.6μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'any', 'transformation')\r\n-         426±1ms        224±0.4μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'all', 'transformation')\r\n-         423±4ms        220±0.9μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'all', 'direct')\r\n-         431±1ms        223±0.5μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'all', 'direct')\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n\r\n```\r\n\r\n</details>\r\n\r\n(edited by Tom to put the speedups in a details section)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385245929",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-385245929",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 385245929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTI0NTkyOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-29T11:56:29Z",
    "updated_at": "2018-04-29T11:56:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/pandas-dev/pandas/pull/18496/ for the Series constructor. PR incoming."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385246329",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-385246329",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 385246329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTI0NjMyOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-29T12:02:30Z",
    "updated_at": "2018-04-29T12:02:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @jbrockmendel for thoughts on the timestamp ones\r\n\r\n```\r\n+     1.47±0.01μs      59.1±0.07μs    40.16  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+        1.48±0μs      58.2±0.06μs    39.36  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+     1.45±0.01μs       39.6±0.2μs    27.42  timestamp.TimestampProperties.time_weekday_name(None, 'B')\r\n+        1.44±0μs      39.4±0.06μs    27.39  timestamp.TimestampProperties.time_weekday_name(None, None)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385261751",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-385261751",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 385261751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTI2MTc1MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-29T16:04:33Z",
    "updated_at": "2018-04-29T16:04:33Z",
    "author_association": "MEMBER",
    "body": "#18164 made `Timestamp.weekday_name` locale-specific.  No surprise that perf was hurt."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385262206",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-385262206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 385262206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTI2MjIwNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-29T16:11:04Z",
    "updated_at": "2018-04-29T16:11:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, in that case not a big deal I think. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385272802",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-385272802",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 385272802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTI3MjgwMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-29T18:52:57Z",
    "updated_at": "2018-04-29T18:52:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looking briefly at the `indexing.MethodLookup.time_lookup_ix` slowdown, 80% of our time is spent doing the warning. Probably not worth optimizing."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385273220",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-385273220",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 385273220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTI3MzIyMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-29T18:59:33Z",
    "updated_at": "2018-04-29T18:59:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Having trouble reproducing the `frame_methods.Repr.time_frame_repr_wide` slowdown in the notebook, though I do see it through ASV."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385328215",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-385328215",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 385328215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTMyODIxNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T07:25:59Z",
    "updated_at": "2018-04-30T07:25:59Z",
    "author_association": "MEMBER",
    "body": "> Having trouble reproducing the frame_methods.Repr.time_frame_repr_wide slowdown in the notebook, though I do see it through ASV.\r\n\r\nI see it clearly in the terminal (I suppose notebook repr takes a different path) with \r\n\r\n```\r\nnrows = 10000\r\ndf_wide = pd.DataFrame(np.random.randn(10, nrows))\r\n%timeit repr(df_wide)\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/390337734",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-390337734",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 390337734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDMzNzczNA==",
    "user": {
      "login": "david-liu-brattle-1",
      "id": 36486871,
      "node_id": "MDQ6VXNlcjM2NDg2ODcx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/36486871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/david-liu-brattle-1",
      "html_url": "https://github.com/david-liu-brattle-1",
      "followers_url": "https://api.github.com/users/david-liu-brattle-1/followers",
      "following_url": "https://api.github.com/users/david-liu-brattle-1/following{/other_user}",
      "gists_url": "https://api.github.com/users/david-liu-brattle-1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/david-liu-brattle-1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/david-liu-brattle-1/subscriptions",
      "organizations_url": "https://api.github.com/users/david-liu-brattle-1/orgs",
      "repos_url": "https://api.github.com/users/david-liu-brattle-1/repos",
      "events_url": "https://api.github.com/users/david-liu-brattle-1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/david-liu-brattle-1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T21:30:55Z",
    "updated_at": "2018-05-18T21:31:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "The slowing in `frame_methods.Repr.time_frame_repr_wide` seems likely to be related to #16579.\r\n\r\nIf that's the case the slowdown should be expected?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432066994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432066994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432066994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjA2Njk5NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-23T02:41:53Z",
    "updated_at": "2018-10-23T02:41:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mroeschke would you mind rerunning and changing the top of the PR here."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432720348",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432720348",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432720348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjcyMDM0OA==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T16:03:51Z",
    "updated_at": "2018-10-24T16:03:51Z",
    "author_association": "MEMBER",
    "body": "Updated the regressions in my top comment\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432725797",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432725797",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432725797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjcyNTc5Nw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T16:18:44Z",
    "updated_at": "2018-10-24T16:18:44Z",
    "author_association": "MEMBER",
    "body": "Hmm looks like a lot of regressions. I can take a look at the GroupBy stuff over the next few days."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432726555",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432726555",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432726555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjcyNjU1NQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T16:20:41Z",
    "updated_at": "2018-10-24T16:20:41Z",
    "author_association": "MEMBER",
    "body": "Are these consistent across runs?  IIRC correctly asv's use of the word \"SIGNIFICANTLY\" does not refer to statistical significance."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432729504",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432729504",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432729504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjcyOTUwNA==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T16:27:53Z",
    "updated_at": "2018-10-24T16:27:53Z",
    "author_association": "MEMBER",
    "body": "I can run the suite one more time on my machine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432731238",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432731238",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432731238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjczMTIzOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T16:32:31Z",
    "updated_at": "2018-10-24T16:32:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Reminder: we also have http://pandas.pydata.org/speed/pandas/"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432731923",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432731923",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432731923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjczMTkyMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T16:34:16Z",
    "updated_at": "2018-10-24T16:34:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ahh, the benchmarks there look out of date :/\r\n\r\nLooking into it now."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432734034",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432734034",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432734034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjczNDAzNA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T16:40:30Z",
    "updated_at": "2018-10-24T16:40:30Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger I get the feeling the web portal may not be showing all of the benchmarks, at the very least those that are parametrized. For instance, it only shows two benchmarks from the groupby.GroupByMethods class, though I think the combinations of parameters there should generate 264 benchmarks\r\n\r\n<img width=\"1206\" alt=\"image\" src=\"https://user-images.githubusercontent.com/609873/47446765-c9fe5f00-d770-11e8-8437-5f1d4618541b.png\">\r\n\r\nAny idea where to even start looking at that?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432747474",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432747474",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432747474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc0NzQ3NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T17:13:24Z",
    "updated_at": "2018-10-24T17:13:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm looking into it. When pandas added the HTML results to the .gitignore\nwe stopped updating. We at least have the data though.\n\nOn Wed, Oct 24, 2018 at 11:40 AM William Ayd <notifications@github.com>\nwrote:\n\n> @TomAugspurger <https://github.com/TomAugspurger> I get the feeling the\n> web portal may not be showing all of the benchmarks, at the very least\n> those that are parametrized. For instance, it only shows two benchmarks\n> from the groupby.GroupByMethods class, though I think the combinations of\n> parameters there should generate 264 benchmarks\n>\n> [image: image]\n> <https://user-images.githubusercontent.com/609873/47446765-c9fe5f00-d770-11e8-8437-5f1d4618541b.png>\n>\n> Any idea where to even start looking at that?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432734034>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIt0uMg2fTr8UeTSPLWFMHlOh7QBoks5uoJgEgaJpZM4QsZ91>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432752481",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432752481",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432752481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc1MjQ4MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T17:26:57Z",
    "updated_at": "2018-10-24T17:26:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "No luck yet. I'll need to do more debugging later.\n\nOn Wed, Oct 24, 2018 at 12:13 PM Tom Augspurger <tom.augspurger88@gmail.com>\nwrote:\n\n> I'm looking into it. When pandas added the HTML results to the .gitignore\n> we stopped updating. We at least have the data though.\n>\n> On Wed, Oct 24, 2018 at 11:40 AM William Ayd <notifications@github.com>\n> wrote:\n>\n>> @TomAugspurger <https://github.com/TomAugspurger> I get the feeling the\n>> web portal may not be showing all of the benchmarks, at the very least\n>> those that are parametrized. For instance, it only shows two benchmarks\n>> from the groupby.GroupByMethods class, though I think the combinations of\n>> parameters there should generate 264 benchmarks\n>>\n>> [image: image]\n>> <https://user-images.githubusercontent.com/609873/47446765-c9fe5f00-d770-11e8-8437-5f1d4618541b.png>\n>>\n>> Any idea where to even start looking at that?\n>>\n>> —\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432734034>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/ABQHIt0uMg2fTr8UeTSPLWFMHlOh7QBoks5uoJgEgaJpZM4QsZ91>\n>> .\n>>\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432871751",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-432871751",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 432871751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjg3MTc1MQ==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-25T00:25:07Z",
    "updated_at": "2018-10-25T00:25:07Z",
    "author_association": "MEMBER",
    "body": "Here's the second run for the interested:\r\n\r\nAt a high level there's consistency between runs.\r\n\r\nRegressions\r\n<details>\r\n\r\n```\r\n+       55.9±10μs       1.52±0.04s 27224.82  indexing.IntervalIndexing.time_loc_list\r\n+       85.7±20μs        1.57±0.2s 18312.55  indexing.IntervalIndexing.time_getitem_list\r\n+      14.9±0.2μs      1.36±0.03ms    91.71  categoricals.CategoricalSlicing.time_getitem_bool_array('monotonic_decr')\r\n+        36.0±1ms       2.06±0.01s    57.32  offset.ApplyIndex.time_apply_index(<BusinessDay>)\r\n+         449±4ns       25.2±0.6μs    56.03  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+         455±6ns         25.4±2μs    55.83  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+        24.3±1ms        1.35±0.5s    55.59  period.DataFramePeriodColumn.time_setitem_period_column\r\n+      39.1±0.8ms       2.07±0.07s    52.89  offset.ApplyIndex.time_apply_index(<SemiMonthBegin: day_of_month=15>)\r\n+        39.5±1ms       2.05±0.04s    51.94  offset.ApplyIndex.time_apply_index(<SemiMonthEnd: day_of_month=15>)\r\n+     4.87±0.07ms         208±10ms    42.66  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessDay>)\r\n+      5.27±0.2ms         207±10ms    39.38  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\r\n+      5.43±0.1ms         209±10ms    38.40  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<SemiMonthEnd: day_of_month=15>)\r\n+      5.61±0.1ms          210±6ms    37.39  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessDay>)\r\n+      15.4±0.4ms         549±20ms    35.71  timeseries.Iteration.time_iter_preexit(<function period_range at 0x11284df28>)\r\n+      6.35±0.2ms         217±10ms    34.12  offset.OffsetSeriesArithmetic.time_add_offset(<SemiMonthEnd: day_of_month=15>)\r\n+      6.33±0.2ms         213±10ms    33.64  offset.OffsetSeriesArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\r\n+         389±7ns       12.9±0.8μs    33.27  indexing.MethodLookup.time_lookup_ix\r\n+     3.73±0.09ms          113±5ms    30.40  period.PeriodIndexConstructor.time_from_pydatetime('D')\r\n+     1.78±0.04ms         54.0±2ms    30.28  indexing.CategoricalIndexIndexing.time_get_indexer_list('monotonic_decr')\r\n+         453±8ns       9.84±0.7μs    21.72  timestamp.TimestampProperties.time_weekday_name(None, 'B')\r\n+         447±8ns      8.54±0.04μs    19.09  timestamp.TimestampProperties.time_weekday_name(None, None)\r\n+      5.25±0.1ms       99.7±0.9ms    18.99  timeseries.DatetimeIndex.time_timeseries_is_month_start('tz_aware')\r\n+     9.48±0.08ms          175±2ms    18.50  multiindex_object.Values.time_datetime_level_values_copy\r\n+      7.32±0.3μs          120±4μs    16.40  period.Indexing.time_get_loc\r\n+     6.64±0.07μs         69.0±1μs    10.39  period.Indexing.time_shallow_copy\r\n+      7.54±0.5ms        76.5±10ms    10.14  frame_methods.Repr.time_frame_repr_wide\r\n+        78.8±7ms         696±10ms     8.83  plotting.TimeseriesPlotting.time_plot_regular\r\n+      23.4±0.6ms          191±3ms     8.16  binary_ops.Ops2.time_frame_float_floor_by_zero\r\n+      7.71±0.1μs         60.1±5μs     7.80  index_object.Indexing.time_slice('Int')\r\n+      7.81±0.3μs         60.9±2μs     7.79  index_object.Indexing.time_slice_step('Int')\r\n+       83.5±20μs         587±20μs     7.03  groupby.GroupByMethods.time_dtype_as_field('float', 'cummin', 'transformation')\r\n+        82.7±4μs         580±50μs     7.01  groupby.GroupByMethods.time_dtype_as_field('datetime', 'cummin', 'transformation')\r\n+        83.2±4μs         580±40μs     6.97  groupby.GroupByMethods.time_dtype_as_field('datetime', 'cummin', 'direct')\r\n+       87.5±10μs         588±30μs     6.72  groupby.GroupByMethods.time_dtype_as_field('float', 'cummax', 'transformation')\r\n+      19.5±0.4μs        130±0.9μs     6.66  period.PeriodUnaryMethods.time_now('M')\r\n+       84.4±10μs         559±20μs     6.62  groupby.GroupByMethods.time_dtype_as_field('float', 'cummin', 'direct')\r\n+        85.7±9μs         567±30μs     6.62  groupby.GroupByMethods.time_dtype_as_field('float', 'cummax', 'direct')\r\n+       92.4±10μs         572±20μs     6.20  groupby.GroupByMethods.time_dtype_as_field('float', 'cumprod', 'direct')\r\n+      18.6±0.4ms          114±9ms     6.10  frame_methods.Dropna.time_dropna('any', 1)\r\n+      18.2±0.3ms          107±3ms     5.85  frame_methods.Dropna.time_dropna('any', 0)\r\n+       99.3±30μs         573±20μs     5.77  groupby.GroupByMethods.time_dtype_as_field('float', 'cumprod', 'transformation')\r\n+        97.4±6μs         559±20μs     5.74  groupby.GroupByMethods.time_dtype_as_field('float', 'cumsum', 'direct')\r\n+        96.6±5μs         546±70μs     5.65  groupby.GroupByMethods.time_dtype_as_field('float', 'cumsum', 'transformation')\r\n+         116±5μs         636±90μs     5.48  groupby.GroupByMethods.time_dtype_as_group('float', 'cummin', 'transformation')\r\n+      33.4±0.6μs          182±1μs     5.43  period.PeriodUnaryMethods.time_asfreq('M')\r\n+         122±5μs         660±50μs     5.39  groupby.GroupByMethods.time_dtype_as_group('int', 'cummax', 'direct')\r\n+      34.0±0.6μs          180±1μs     5.31  period.PeriodUnaryMethods.time_asfreq('min')\r\n+        125±10μs         660±30μs     5.27  groupby.GroupByMethods.time_dtype_as_group('int', 'cummin', 'direct')\r\n+        128±10μs         672±30μs     5.26  groupby.GroupByMethods.time_dtype_as_field('int', 'cummax', 'transformation')\r\n+      69.7±0.6μs         358±10μs     5.14  period.PeriodProperties.time_property('min', 'end_time')\r\n+        121±20μs         622±30μs     5.14  groupby.GroupByMethods.time_dtype_as_group('int', 'cummin', 'transformation')\r\n+         111±2μs          571±4μs     5.13  groupby.GroupByMethods.time_dtype_as_group('datetime', 'cummin', 'direct')\r\n+         125±7μs         635±20μs     5.10  groupby.GroupByMethods.time_dtype_as_group('int', 'cummax', 'transformation')\r\n+         127±5μs         646±30μs     5.09  groupby.GroupByMethods.time_dtype_as_field('int', 'cummax', 'direct')\r\n+         112±4μs          571±3μs     5.09  groupby.GroupByMethods.time_dtype_as_group('datetime', 'cummin', 'transformation')\r\n+        118±30μs         596±20μs     5.03  groupby.GroupByMethods.time_dtype_as_group('float', 'cummax', 'direct')\r\n+         123±5μs         614±50μs     5.01  groupby.GroupByMethods.time_dtype_as_field('int', 'cummin', 'transformation')\r\n+        117±10μs         581±10μs     4.96  groupby.GroupByMethods.time_dtype_as_group('float', 'cummin', 'direct')\r\n+        71.6±8μs          348±2μs     4.87  period.PeriodProperties.time_property('M', 'end_time')\r\n+      3.55±0.2μs         17.2±1μs     4.85  indexing.DataFrameStringIndexing.time_ix\r\n+        128±10μs         620±10μs     4.84  groupby.GroupByMethods.time_dtype_as_field('int', 'cummin', 'direct')\r\n+        142±10μs         687±60μs     4.83  groupby.GroupByMethods.time_dtype_as_group('float', 'cumsum', 'direct')\r\n+         137±8μs         655±60μs     4.79  groupby.GroupByMethods.time_dtype_as_field('int', 'cumsum', 'transformation')\r\n+      33.5±0.5ms          158±2ms     4.73  eval.Eval.time_and('python', 1)\r\n+        124±20μs         580±10μs     4.68  groupby.GroupByMethods.time_dtype_as_group('float', 'cummax', 'transformation')\r\n+        140±20μs         632±20μs     4.52  groupby.GroupByMethods.time_dtype_as_field('int', 'cumsum', 'direct')\r\n+        135±10μs         608±10μs     4.50  groupby.GroupByMethods.time_dtype_as_group('int', 'cumsum', 'direct')\r\n+        140±10μs          628±7μs     4.50  groupby.GroupByMethods.time_dtype_as_group('int', 'cumsum', 'transformation')\r\n+        141±10μs         627±20μs     4.44  groupby.GroupByMethods.time_dtype_as_group('float', 'cumsum', 'transformation')\r\n+        42.1±3ms          162±3ms     3.84  eval.Eval.time_and('python', 'all')\r\n+        37.6±1ms          144±9ms     3.84  frame_methods.Dropna.time_dropna('all', 0)\r\n+        64.7±1μs          237±1μs     3.66  period.PeriodUnaryMethods.time_to_timestamp('M')\r\n+        70.0±3μs         255±20μs     3.63  period.PeriodProperties.time_property('min', 'start_time')\r\n+        65.0±1μs        236±0.8μs     3.63  period.PeriodUnaryMethods.time_to_timestamp('min')\r\n+        41.8±2ms          151±7ms     3.61  frame_methods.Dropna.time_dropna('all', 1)\r\n+        65.4±1μs          235±1μs     3.59  period.PeriodProperties.time_property('M', 'start_time')\r\n+        54.1±1μs         188±20μs     3.47  period.Indexing.time_unique\r\n+         109±4ms         369±10ms     3.38  groupby.Groups.time_series_groups('int64_large')\r\n+     3.52±0.07μs       11.6±0.3μs     3.28  multiindex_object.GetLoc.time_med_get_loc\r\n+        252±20μs         823±50μs     3.27  groupby.GroupByMethods.time_dtype_as_field('int', 'cumprod', 'direct')\r\n+        266±30μs        850±100μs     3.20  groupby.GroupByMethods.time_dtype_as_group('float', 'cumprod', 'direct')\r\n+      3.57±0.3μs       11.2±0.3μs     3.14  multiindex_object.GetLoc.time_string_get_loc\r\n+      57.4±0.6μs          179±9μs     3.12  period.PeriodUnaryMethods.time_now('min')\r\n+      3.58±0.1ms       11.1±0.1ms     3.11  multiindex_object.GetLoc.time_med_get_loc_warm\r\n+        95.4±8μs         295±30μs     3.09  period.Algorithms.time_drop_duplicates('index')\r\n+      29.8±0.4ms         91.4±3ms     3.06  binary_ops.Ops.time_frame_multi_and(False, 'default')\r\n+      30.4±0.6ms         92.9±2ms     3.06  binary_ops.Ops.time_frame_multi_and(False, 1)\r\n+      5.82±0.1ms       17.6±0.4ms     3.02  frame_methods.Equals.time_frame_nonunique_unequal\r\n+         112±2μs         336±20μs     3.00  period.PeriodIndexConstructor.time_from_date_range('D')\r\n+        49.3±3μs         148±40μs     3.00  groupby.GroupByMethods.time_dtype_as_field('float', 'size', 'direct')\r\n+        260±20μs         776±40μs     2.98  groupby.GroupByMethods.time_dtype_as_group('int', 'cumprod', 'transformation')\r\n+      9.25±0.2μs       27.5±0.6μs     2.97  timestamp.TimestampProperties.time_is_month_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     5.75±0.08ms       17.0±0.1ms     2.96  frame_methods.Equals.time_frame_nonunique_equal\r\n+        51.1±2μs         148±30μs     2.90  groupby.GroupByMethods.time_dtype_as_field('float', 'size', 'transformation')\r\n+        259±30μs         751±50μs     2.89  groupby.GroupByMethods.time_dtype_as_field('int', 'cumprod', 'transformation')\r\n+        279±30μs         807±10μs     2.89  groupby.GroupByMethods.time_dtype_as_group('int', 'cumprod', 'direct')\r\n+      33.7±0.7ms        96.5±40ms     2.87  binary_ops.Ops.time_frame_multi_and(True, 1)\r\n+         154±5ms         440±30ms     2.85  groupby.Groups.time_series_groups('object_large')\r\n+         145±5μs          411±3μs     2.84  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x113681950>, False)\r\n+        22.9±1ms         65.0±2ms     2.84  groupby.ApplyDictReturn.time_groupby_apply_dict_return\r\n+         158±5μs         448±20μs     2.83  period.Indexing.time_intersection\r\n+      9.59±0.3μs         27.2±3μs     2.83  timestamp.TimestampProperties.time_is_month_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+         147±5μs          413±6μs     2.82  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c0840>, False)\r\n+        57.6±6ms         161±20ms     2.79  groupby.GroupByMethods.time_dtype_as_field('float', 'unique', 'direct')\r\n+         157±5μs          439±5μs     2.79  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x113681950>, True)\r\n+      9.60±0.2μs      26.3±0.09μs     2.74  timestamp.TimestampProperties.time_is_year_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+      9.73±0.2μs       26.7±0.4μs     2.74  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+        160±10μs          438±7μs     2.74  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c0840>, True)\r\n+         151±9μs          413±6μs     2.73  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c07b8>, False)\r\n+         151±9μs         412±20μs     2.73  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c08c8>, False)\r\n+        355±10μs         966±90μs     2.72  period.Algorithms.time_value_counts('index')\r\n+         164±7μs          445±8μs     2.71  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c07b8>, True)\r\n+      10.0±0.2μs       27.0±0.6μs     2.69  timestamp.TimestampProperties.time_is_quarter_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+        163±20μs         439±20μs     2.69  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c08c8>, True)\r\n+      9.74±0.3μs       26.1±0.1μs     2.68  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+        57.5±2μs          154±5μs     2.68  period.Indexing.time_series_loc\r\n+     9.88±0.09μs       26.3±0.1μs     2.66  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+      6.91±0.3μs       18.0±0.3μs     2.61  timestamp.TimestampAcrossDst.time_replace_across_dst\r\n+        58.7±4ms         152±10ms     2.59  groupby.GroupByMethods.time_dtype_as_field('float', 'unique', 'transformation')\r\n+        82.5±4ms          210±9ms     2.55  groupby.GroupByMethods.time_dtype_as_group('int', 'unique', 'transformation')\r\n+      39.2±0.4ms         99.5±2ms     2.54  binary_ops.Ops.time_frame_multi_and(True, 'default')\r\n+        288±30μs          730±9μs     2.54  groupby.GroupByMethods.time_dtype_as_group('float', 'cumprod', 'transformation')\r\n+      1.22±0.1ms       3.07±0.2ms     2.52  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(False, 'iso8601')\r\n+        803±50μs      2.00±0.03ms     2.49  io.csv.ReadCSVParseDates.time_multiple_date\r\n+        82.2±5ms          204±8ms     2.48  groupby.GroupByMethods.time_dtype_as_group('int', 'unique', 'direct')\r\n+        73.7±2ms         180±20ms     2.45  groupby.GroupByMethods.time_dtype_as_field('object', 'unique', 'direct')\r\n+         102±5ms          249±6ms     2.44  reshape.WideToLong.time_wide_to_long_big\r\n+      4.70±0.6ms       11.4±0.1ms     2.44  multiindex_object.GetLoc.time_small_get_loc_warm\r\n+        50.5±5ms          123±7ms     2.43  join_merge.MergeAsof.time_by_int\r\n+      38.9±0.5ms         94.4±2ms     2.43  frame_methods.Interpolate.time_interpolate(None)\r\n+        72.3±4ms         175±20ms     2.42  groupby.GroupByMethods.time_dtype_as_field('datetime', 'unique', 'direct')\r\n+        129±10ms          309±2ms     2.39  groupby.GroupByMethods.time_dtype_as_group('datetime', 'unique', 'direct')\r\n+     1.98±0.03ms       4.72±0.3ms     2.38  binary_ops.Timeseries.time_series_timestamp_compare(None)\r\n+      8.43±0.4μs       19.9±0.4μs     2.36  timestamp.TimestampOps.time_replace_tz(None)\r\n+        131±10ms        308±0.9ms     2.34  groupby.GroupByMethods.time_dtype_as_group('float', 'unique', 'direct')\r\n+      8.30±0.3μs       19.3±0.5μs     2.33  ctors.SeriesDtypesConstructors.time_dtindex_from_series\r\n+     1.97±0.02ms      4.57±0.01ms     2.32  binary_ops.Timeseries.time_timestamp_series_compare(None)\r\n+        58.6±6ms          134±3ms     2.29  groupby.GroupByMethods.time_dtype_as_field('int', 'unique', 'direct')\r\n+        58.1±4ms          133±2ms     2.29  groupby.GroupByMethods.time_dtype_as_field('int', 'unique', 'transformation')\r\n+        66.5±3μs         152±20μs     2.28  groupby.GroupByMethods.time_dtype_as_group('float', 'count', 'transformation')\r\n+        136±10ms          309±1ms     2.28  groupby.GroupByMethods.time_dtype_as_group('datetime', 'unique', 'transformation')\r\n+        845±20μs       1.91±0.2ms     2.26  indexing.NonNumericSeriesIndexing.time_getitem_list_like('datetime', 'unique_monotonic_inc')\r\n+      74.4±0.6ms         167±10ms     2.25  groupby.GroupByMethods.time_dtype_as_field('object', 'unique', 'transformation')\r\n+        70.5±2ms         157±10ms     2.23  groupby.GroupByMethods.time_dtype_as_field('datetime', 'unique', 'transformation')\r\n+        89.2±8ms         196±50ms     2.20  groupby.GroupByMethods.time_dtype_as_field('float', 'skew', 'direct')\r\n+      14.2±0.3μs       31.1±0.7μs     2.20  timestamp.TimestampOps.time_replace_tz('US/Eastern')\r\n+       2.29±0.2s        4.98±0.4s     2.17  replace.ReplaceDict.time_replace_series(False)\r\n+         178±2μs          386±5μs     2.17  multiindex_object.Values.time_datetime_level_values_sliced\r\n+     1.75±0.02ms       3.74±0.9ms     2.14  reshape.SimpleReshape.time_stack\r\n+      8.84±0.2ms         18.8±4ms     2.12  stat_ops.FrameOps.time_op('mad', 'float', 1, False)\r\n+        146±30ms          306±5ms     2.09  groupby.GroupByMethods.time_dtype_as_group('float', 'unique', 'transformation')\r\n+        95.3±7μs         197±80μs     2.07  groupby.GroupByMethods.time_dtype_as_field('float', 'sum', 'direct')\r\n+        83.1±4μs         172±50μs     2.06  series_methods.SeriesConstructor.time_constructor(None)\r\n+        524±10μs      1.06±0.01ms     2.02  groupby.GroupByMethods.time_dtype_as_group('object', 'unique', 'transformation')\r\n+        139±10μs        279±100μs     2.01  groupby.GroupByMethods.time_dtype_as_field('float', 'std', 'transformation')\r\n+        525±20μs      1.06±0.01ms     2.01  groupby.GroupByMethods.time_dtype_as_group('object', 'unique', 'direct')\r\n+        54.3±3μs        108±0.8μs     2.00  timeseries.AsOf.time_asof_single_early('DataFrame')\r\n+        51.1±3μs         101±10μs     1.99  groupby.GroupByMethods.time_dtype_as_field('datetime', 'size', 'direct')\r\n+        67.4±5μs          133±2μs     1.97  groupby.GroupByMethods.time_dtype_as_group('int', 'count', 'transformation')\r\n+     1.75±0.02ms       3.43±0.2ms     1.97  reshape.Melt.time_melt_dataframe\r\n+        51.7±1μs          102±5μs     1.96  groupby.GroupByMethods.time_dtype_as_field('object', 'size', 'transformation')\r\n+       1.06±0.1s        2.06±0.2s     1.95  stat_ops.FrameMultiIndexOps.time_op([0, 1], 'mad')\r\n+        84.4±2ms          163±6ms     1.94  join_merge.MergeAsof.time_by_object\r\n+        50.8±1μs         98.0±6μs     1.93  groupby.GroupByMethods.time_dtype_as_field('object', 'size', 'direct')\r\n+      2.67±0.4ms       5.12±0.7ms     1.91  reindex.DropDuplicates.time_frame_drop_dups_bool(True)\r\n+        867±70μs      1.66±0.01ms     1.91  io.csv.ReadCSVParseDates.time_baseline\r\n+        50.3±2μs         95.9±5μs     1.91  groupby.GroupByMethods.time_dtype_as_field('datetime', 'size', 'transformation')\r\n+        66.8±3μs         127±10μs     1.90  groupby.GroupByMethods.time_dtype_as_field('int', 'count', 'direct')\r\n+        67.0±6ms          127±3ms     1.90  frame_methods.Interpolate.time_interpolate('infer')\r\n+        51.9±7μs         98.0±4μs     1.89  groupby.GroupByMethods.time_dtype_as_group('int', 'size', 'transformation')\r\n+       1.29±0.2s       2.44±0.04s     1.89  timeseries.ToDatetimeNONISO8601.time_different_offset\r\n+        116±10ms          219±3ms     1.88  stat_ops.FrameMultiIndexOps.time_op(1, 'mad')\r\n+        50.0±2μs       94.0±0.6μs     1.88  groupby.GroupByMethods.time_dtype_as_group('datetime', 'size', 'direct')\r\n+       2.93±0.1s        5.50±0.3s     1.88  replace.ReplaceDict.time_replace_series(True)\r\n+        66.5±4μs          124±2μs     1.86  groupby.GroupByMethods.time_dtype_as_field('float', 'count', 'transformation')\r\n+        67.4±9μs          125±7μs     1.86  groupby.GroupByMethods.time_dtype_as_field('datetime', 'count', 'direct')\r\n+        65.6±3μs          122±4μs     1.86  groupby.GroupByMethods.time_dtype_as_field('float', 'count', 'direct')\r\n+      1.87±0.03s       3.48±0.07s     1.86  sparse.SparseDataFrameConstructor.time_constructor\r\n+        49.6±2μs         91.9±1μs     1.85  groupby.GroupByMethods.time_dtype_as_field('int', 'size', 'direct')\r\n+        927±30μs      1.71±0.03ms     1.85  frame_methods.Interpolate.time_interpolate_some_good(None)\r\n+        50.0±4μs       92.4±0.6μs     1.85  groupby.GroupByMethods.time_dtype_as_group('float', 'size', 'direct')\r\n+     8.77±0.09ms       16.2±0.7ms     1.84  stat_ops.FrameOps.time_op('mad', 'float', 1, True)\r\n+        66.1±3μs          122±8μs     1.84  groupby.GroupByMethods.time_dtype_as_field('datetime', 'count', 'transformation')\r\n+        50.4±3μs         92.7±1μs     1.84  groupby.GroupByMethods.time_dtype_as_field('int', 'size', 'transformation')\r\n+        50.8±2μs       93.3±0.7μs     1.84  groupby.GroupByMethods.time_dtype_as_group('float', 'size', 'transformation')\r\n+        50.8±2μs       92.8±0.3μs     1.83  groupby.GroupByMethods.time_dtype_as_group('datetime', 'size', 'transformation')\r\n+      49.9±0.6μs       91.2±0.3μs     1.83  groupby.GroupByMethods.time_dtype_as_group('object', 'size', 'direct')\r\n+        86.6±3μs         158±20μs     1.83  indexing.CategoricalIndexIndexing.time_getitem_bool_array('monotonic_decr')\r\n+      65.0±0.5μs        118±0.6μs     1.82  groupby.GroupByMethods.time_dtype_as_group('datetime', 'count', 'direct')\r\n+        52.4±4μs         95.3±1μs     1.82  groupby.GroupByMethods.time_dtype_as_group('int', 'size', 'direct')\r\n+        50.5±2μs       91.7±0.7μs     1.82  groupby.GroupByMethods.time_dtype_as_group('object', 'size', 'transformation')\r\n+      65.0±0.2μs        118±0.7μs     1.81  groupby.GroupByMethods.time_dtype_as_group('datetime', 'count', 'transformation')\r\n+        87.8±5ms         159±10ms     1.81  groupby.GroupByMethods.time_dtype_as_field('float', 'skew', 'transformation')\r\n+      64.3±0.6μs        115±0.4μs     1.79  groupby.GroupByMethods.time_dtype_as_group('object', 'count', 'direct')\r\n+      14.3±0.5μs       25.5±0.7μs     1.78  ctors.SeriesDtypesConstructors.time_index_from_array_floats\r\n+        66.5±4μs          118±4μs     1.78  groupby.GroupByMethods.time_dtype_as_field('int', 'count', 'transformation')\r\n+     2.68±0.06ms         4.76±1ms     1.78  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'int', 'min')\r\n+        30.3±2ms         53.4±2ms     1.76  binary_ops.Ops.time_frame_comparison(False, 'default')\r\n+      18.9±0.3μs       33.4±0.6μs     1.76  ctors.SeriesDtypesConstructors.time_dtindex_from_index_with_series\r\n+        343±10μs         597±80μs     1.74  groupby.GroupByMethods.time_dtype_as_field('float', 'sem', 'transformation')\r\n+      29.3±0.4μs         50.8±1μs     1.73  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136818c8>, True)\r\n+         102±2μs          176±3μs     1.72  frame_methods.GetDtypeCounts.time_frame_get_dtype_counts\r\n+     1.09±0.02ms      1.87±0.06ms     1.71  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(False, 'ymd')\r\n+        31.7±2ms       53.4±0.4ms     1.69  binary_ops.Ops.time_frame_comparison(False, 1)\r\n+      3.80±0.1μs       6.41±0.7μs     1.69  inference.ToNumericDowncast.time_downcast('int32', None)\r\n+      2.90±0.3ms       4.88±0.3ms     1.69  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'int', 'max')\r\n+         191±2ms         318±20ms     1.66  sparse.SparseDataFrameConstructor.time_from_scipy\r\n+        186±10μs         308±50μs     1.65  groupby.GroupByMethods.time_dtype_as_field('object', 'last', 'direct')\r\n+        138±10ms          226±4ms     1.64  groupby.GroupByMethods.time_dtype_as_group('int', 'skew', 'direct')\r\n+      3.03±0.2ms         4.94±1ms     1.63  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'std')\r\n+         123±5ms          199±4ms     1.62  frame_methods.Iteration.time_iterrows\r\n+     3.66±0.09μs       5.91±0.4μs     1.62  offset.OnOffset.time_on_offset(<MonthBegin>)\r\n+       71.9±10μs        116±0.3μs     1.62  groupby.GroupByMethods.time_dtype_as_group('object', 'count', 'transformation')\r\n+       117±0.9μs         187±20μs     1.61  indexing.DataFrameNumericIndexing.time_iloc_dups\r\n+     4.59±0.05ms       7.39±0.6ms     1.61  categoricals.Rank.time_rank_string_cat_ordered\r\n+     4.80±0.06ms       7.68±0.6ms     1.60  categoricals.Rank.time_rank_int_cat\r\n+      2.96±0.1ms       4.73±0.8ms     1.59  rolling.Methods.time_rolling('DataFrame', 10, 'int', 'std')\r\n+        98.5±5μs          156±8μs     1.59  groupby.GroupByMethods.time_dtype_as_field('float', 'var', 'direct')\r\n+     1.07±0.02ms      1.69±0.03ms     1.59  timeseries.ResampleDataFrame.time_method('min')\r\n+      6.15±0.1μs      9.74±0.08μs     1.58  timestamp.TimestampOps.time_replace_None('US/Eastern')\r\n+         164±5μs          259±3μs     1.58  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x113681730>, True)\r\n+      4.54±0.2ms       7.15±0.7ms     1.58  categoricals.Rank.time_rank_int_cat_ordered\r\n+     1.07±0.04ms      1.69±0.01ms     1.58  timeseries.ResampleDataFrame.time_method('max')\r\n+        21.4±1μs         33.7±1μs     1.57  ctors.SeriesDtypesConstructors.time_index_from_array_string\r\n+     1.70±0.03ms       2.67±0.2ms     1.57  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'iso8601')\r\n+        46.3±4μs         72.6±3μs     1.57  timeseries.SortIndex.time_get_slice(False)\r\n+        92.8±6μs         145±10μs     1.56  groupby.GroupByMethods.time_dtype_as_field('float', 'prod', 'transformation')\r\n+         112±2μs          175±1μs     1.56  timeseries.DatetimeIndex.time_unique('dst')\r\n+        89.0±5μs         138±30μs     1.55  groupby.GroupByMethods.time_dtype_as_field('datetime', 'max', 'direct')\r\n+       95.6±10μs         148±40μs     1.55  groupby.GroupByMethods.time_dtype_as_field('datetime', 'min', 'direct')\r\n+         150±5μs          232±2μs     1.55  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x113681730>, False)\r\n+        477±40μs         737±40μs     1.55  groupby.GroupByMethods.time_dtype_as_group('int', 'sem', 'transformation')\r\n+         534±6μs          824±2μs     1.54  indexing.MultiIndexing.time_frame_ix\r\n+      3.56±0.2ms       5.50±0.9ms     1.54  rolling.Methods.time_rolling('Series', 10, 'float', 'std')\r\n+      2.87±0.1ms       4.43±0.2ms     1.54  rolling.Methods.time_rolling('DataFrame', 10, 'float', 'std')\r\n+     1.70±0.03ms       2.60±0.2ms     1.53  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'ymd')\r\n+         282±6μs         432±10μs     1.53  indexing.NonNumericSeriesIndexing.time_getitem_label_slice('datetime', 'nonunique_monotonic_inc')\r\n+        91.8±3ms          140±7ms     1.53  groupby.GroupByMethods.time_dtype_as_field('int', 'skew', 'transformation')\r\n+     2.64±0.08ms       4.03±0.4ms     1.53  categoricals.Concat.time_union\r\n+     4.44±0.03ms      6.78±0.05ms     1.53  categoricals.Rank.time_rank_int\r\n+      8.50±0.1ms         13.0±5ms     1.53  stat_ops.FrameOps.time_op('mad', 'float', 0, True)\r\n+     1.69±0.09ms       2.58±0.5ms     1.52  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'high')\r\n+         128±6μs          195±4μs     1.52  groupby.GroupByMethods.time_dtype_as_group('float', 'first', 'direct')\r\n+     1.77±0.08ms       2.68±0.5ms     1.52  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', None)\r\n+      10.0±0.3ms       15.2±0.3ms     1.52  eval.Query.time_query_datetime_column\r\n+       96.1±10μs         145±20μs     1.51  groupby.GroupByMethods.time_dtype_as_field('float', 'sum', 'transformation')\r\n+         124±9μs          188±8μs     1.51  groupby.GroupByMethods.time_dtype_as_group('float', 'last', 'direct')\r\n+     3.39±0.04ms       5.14±0.2ms     1.51  frame_methods.Apply.time_apply_pass_thru\r\n+         128±9μs          194±8μs     1.51  groupby.GroupByMethods.time_dtype_as_group('float', 'first', 'transformation')\r\n+     2.96±0.02μs       4.48±0.1μs     1.51  categoricals.CategoricalSlicing.time_getitem_scalar('non_monotonic')\r\n+        727±60ms       1.10±0.06s     1.51  groupby.GroupByMethods.time_dtype_as_group('float', 'mad', 'direct')\r\n+     6.22±0.04ms       9.28±0.5ms     1.49  frame_methods.Apply.time_apply_lambda_mean\r\n+        80.2±4μs         119±20μs     1.49  groupby.GroupByMethods.time_dtype_as_field('float', 'shift', 'direct')\r\n+        861±30μs      1.27±0.06ms     1.47  period.Indexing.time_align\r\n+      3.59±0.3ms       5.29±0.4ms     1.47  reindex.DropDuplicates.time_frame_drop_dups_bool(False)\r\n+         130±3μs         191±20μs     1.47  groupby.GroupByMethods.time_dtype_as_field('object', 'count', 'transformation')\r\n+      13.4±0.3ms         19.7±5ms     1.47  reshape.PivotTable.time_pivot_table\r\n+        154±10μs          226±8μs     1.47  groupby.GroupByMethods.time_dtype_as_field('int', 'var', 'transformation')\r\n+         250±5μs         366±10μs     1.46  frame_ctor.FromRecords.time_frame_from_records_generator(None)\r\n+        50.0±2ms         73.0±4ms     1.46  index_object.IndexAppend.time_append_range_list\r\n+     3.08±0.01μs       4.50±0.1μs     1.46  categoricals.CategoricalSlicing.time_getitem_scalar('monotonic_incr')\r\n+      2.68±0.1ms       3.91±0.2ms     1.46  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'int', 'max')\r\n+      23.8±0.4ms       34.7±0.2ms     1.46  frame_methods.Equals.time_frame_object_unequal\r\n+         117±3ms          171±3ms     1.46  sparse.SparseSeriesToFrame.time_series_to_frame\r\n+        468±30ms         679±40ms     1.45  groupby.GroupByMethods.time_dtype_as_group('int', 'mad', 'transformation')\r\n+     3.05±0.09ms       4.41±0.1ms     1.45  gil.ParallelRolling.time_rolling('var')\r\n+        299±10ms         432±10ms     1.45  groupby.GroupByMethods.time_dtype_as_field('float', 'mad', 'transformation')\r\n+        304±20ms         439±20ms     1.44  groupby.GroupByMethods.time_dtype_as_field('int', 'mad', 'direct')\r\n+      11.7±0.6μs       16.9±0.4μs     1.44  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: days=2, months=2>)\r\n+      1.65±0.1ms       2.38±0.1ms     1.44  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'high')\r\n+         286±7μs         411±20μs     1.44  groupby.GroupByMethods.time_dtype_as_group('float', 'median', 'direct')\r\n+        734±80ms       1.05±0.06s     1.43  groupby.GroupByMethods.time_dtype_as_group('float', 'mad', 'transformation')\r\n+     2.22±0.08ms      3.16±0.04ms     1.43  frame_methods.Interpolate.time_interpolate_some_good('infer')\r\n+        169±20ms          241±2ms     1.43  indexing.NumericSeriesIndexing.time_getitem_list_like(<class 'pandas.core.indexes.numeric.Float64Index'>, 'unique_monotonic_inc')\r\n+      86.8±0.7ms          124±3ms     1.43  frame_methods.Apply.time_apply_axis_1\r\n+        218±10ms          310±6ms     1.42  groupby.GroupByMethods.time_dtype_as_group('float', 'skew', 'direct')\r\n+      2.95±0.2ms       4.19±0.2ms     1.42  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'int', 'min')\r\n+        215±30ms          305±2ms     1.42  groupby.GroupByMethods.time_dtype_as_group('float', 'skew', 'transformation')\r\n+        132±10μs          187±9μs     1.42  groupby.GroupByMethods.time_dtype_as_group('float', 'last', 'transformation')\r\n+     3.77±0.08ms         5.33±1ms     1.41  rolling.Methods.time_rolling('Series', 1000, 'float', 'std')\r\n+        95.2±6μs          135±4μs     1.41  groupby.GroupByMethods.time_dtype_as_field('float', 'min', 'transformation')\r\n+      9.73±0.1μs       13.8±0.2μs     1.41  timestamp.TimestampConstruction.time_parse_iso8601_tz\r\n+         240±7μs          338±7μs     1.41  groupby.GroupByMethods.time_dtype_as_group('float', 'head', 'transformation')\r\n+         222±4ms          311±6ms     1.40  frame_methods.Duplicated.time_frame_duplicated_wide\r\n+        687±20μs         963±80μs     1.40  groupby.GroupByMethods.time_dtype_as_field('datetime', 'value_counts', 'direct')\r\n+         127±5μs          177±8μs     1.40  groupby.GroupByMethods.time_dtype_as_field('object', 'count', 'direct')\r\n+        94.5±5μs         132±10μs     1.40  groupby.GroupByMethods.time_dtype_as_field('int', 'shift', 'transformation')\r\n+         242±8μs          339±5μs     1.40  groupby.GroupByMethods.time_dtype_as_group('float', 'head', 'direct')\r\n+       92.7±10μs          129±1μs     1.40  groupby.GroupByMethods.time_dtype_as_field('float', 'first', 'transformation')\r\n+        96.8±7μs          135±5μs     1.39  groupby.GroupByMethods.time_dtype_as_field('float', 'max', 'transformation')\r\n+        840±40μs       1.17±0.2ms     1.39  groupby.GroupByMethods.time_dtype_as_field('float', 'value_counts', 'direct')\r\n+      2.88±0.2ms       4.01±0.1ms     1.39  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'float', 'max')\r\n+        755±20μs      1.05±0.01ms     1.39  timeseries.ResampleDataFrame.time_method('mean')\r\n+        391±20μs          542±2μs     1.39  groupby.GroupByMethods.time_dtype_as_group('float', 'sem', 'direct')\r\n+      7.02±0.1μs       9.73±0.7μs     1.39  index_object.Indexing.time_get_loc_sorted('Int')\r\n+         139±8μs         192±10μs     1.38  groupby.GroupByMethods.time_dtype_as_group('int', 'first', 'direct')\r\n+        98.0±4μs          135±4μs     1.38  groupby.GroupByMethods.time_dtype_as_field('float', 'min', 'direct')\r\n+      1.74±0.1ms       2.41±0.1ms     1.38  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', 'round_trip')\r\n+      14.1±0.7μs      19.4±0.09μs     1.38  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: days=2, months=2>)\r\n+        94.6±7μs          130±1μs     1.38  groupby.GroupByMethods.time_dtype_as_field('float', 'max', 'direct')\r\n+        392±10μs          540±3μs     1.38  groupby.GroupByMethods.time_dtype_as_group('float', 'sem', 'transformation')\r\n+     1.96±0.09ms       2.69±0.6ms     1.38  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'count')\r\n+         118±3μs          161±7μs     1.37  groupby.GroupByMethods.time_dtype_as_field('int', 'last', 'transformation')\r\n+         125±8μs         171±10μs     1.37  groupby.GroupByMethods.time_dtype_as_group('int', 'last', 'transformation')\r\n+        433±10μs        593±200μs     1.37  reindex.Reindex.time_reindex_columns\r\n+        473±30ms         646±20ms     1.37  groupby.GroupByMethods.time_dtype_as_group('int', 'mad', 'direct')\r\n+        88.1±7μs          120±6μs     1.36  groupby.GroupByMethods.time_dtype_as_field('datetime', 'shift', 'direct')\r\n+      2.82±0.1ms      3.83±0.07ms     1.36  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'float', 'min')\r\n+     1.47±0.06ms       1.99±0.1ms     1.35  groupby.Datelike.time_sum('date_range')\r\n+      27.0±0.3ms         36.5±2ms     1.35  strings.Methods.time_get\r\n+      31.7±0.7ms         42.8±2ms     1.35  indexing.InsertColumns.time_insert\r\n+         100±8μs          135±2μs     1.35  groupby.GroupByMethods.time_dtype_as_field('float', 'prod', 'direct')\r\n+        849±30μs       1.14±0.1ms     1.35  groupby.GroupByMethods.time_dtype_as_field('float', 'value_counts', 'transformation')\r\n+      6.92±0.1ms       9.28±0.3ms     1.34  frame_methods.Apply.time_apply_np_mean\r\n+         434±7μs          583±8μs     1.34  categoricals.CategoricalSlicing.time_getitem_list('non_monotonic')\r\n+        69.8±1μs         93.6±7μs     1.34  indexing.NonNumericSeriesIndexing.time_getitem_label_slice('datetime', 'unique_monotonic_inc')\r\n+        706±30μs         945±60μs     1.34  groupby.GroupByMethods.time_dtype_as_field('datetime', 'value_counts', 'transformation')\r\n+        277±10μs          370±8μs     1.34  groupby.GroupByMethods.time_dtype_as_group('float', 'prod', 'transformation')\r\n+         122±1μs        163±0.4μs     1.33  groupby.GroupByMethods.time_dtype_as_group('datetime', 'last', 'direct')\r\n+        275±10μs         366±20μs     1.33  groupby.GroupByMethods.time_dtype_as_group('int', 'prod', 'direct')\r\n+        50.0±1μs         66.5±2μs     1.33  frame_ctor.FromNDArray.time_frame_from_ndarray\r\n+         118±3μs         156±10μs     1.33  groupby.GroupByMethods.time_dtype_as_group('object', 'first', 'transformation')\r\n+         129±5μs          171±4μs     1.33  groupby.GroupByMethods.time_dtype_as_group('datetime', 'max', 'transformation')\r\n+      19.2±0.3μs       25.4±0.8μs     1.33  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136818c8>, False)\r\n+         131±6μs         174±20μs     1.33  groupby.GroupByMethods.time_dtype_as_field('int', 'first', 'direct')\r\n+         131±6μs          174±6μs     1.32  groupby.GroupByMethods.time_dtype_as_group('datetime', 'max', 'direct')\r\n+         122±2μs          161±3μs     1.32  groupby.GroupByMethods.time_dtype_as_field('int', 'last', 'direct')\r\n+     5.67±0.05ms       7.48±0.1ms     1.32  reindex.DropDuplicates.time_frame_drop_dups_na(True)\r\n+      6.26±0.5ms       8.23±0.2ms     1.32  strings.Cat.time_cat(0, None, None, 0.001)\r\n+     1.72±0.09ms      2.26±0.02ms     1.32  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', None)\r\n+        596±20ns         784±60ns     1.31  index_object.Indexing.time_get('String')\r\n+         128±2μs          169±3μs     1.31  groupby.GroupByMethods.time_dtype_as_group('datetime', 'min', 'direct')\r\n+         127±8μs          166±9μs     1.31  groupby.GroupByMethods.time_dtype_as_group('int', 'last', 'direct')\r\n+      2.78±0.1ms      3.65±0.07ms     1.31  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'float', 'max')\r\n+         135±6μs          177±3μs     1.31  groupby.GroupByMethods.time_dtype_as_field('int', 'first', 'transformation')\r\n+      3.73±0.2ms      4.87±0.03ms     1.31  rolling.Methods.time_rolling('Series', 10, 'int', 'std')\r\n+         130±5μs        170±0.7μs     1.31  groupby.GroupByMethods.time_dtype_as_group('datetime', 'min', 'transformation')\r\n+         145±5μs         189±10μs     1.30  groupby.GroupByMethods.time_dtype_as_group('int', 'first', 'transformation')\r\n+         135±6μs          175±1μs     1.30  groupby.GroupByMethods.time_dtype_as_field('int', 'max', 'transformation')\r\n+        149±10μs         194±10μs     1.30  groupby.GroupByMethods.time_dtype_as_group('float', 'var', 'transformation')\r\n+      1.72±0.1ms       2.24±0.2ms     1.30  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', 'round_trip')\r\n+      1.71±0.1ms      2.22±0.03ms     1.30  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', None)\r\n+      6.28±0.2ms       8.12±0.2ms     1.29  categoricals.Rank.time_rank_string_cat\r\n+     1.24±0.09ms      1.61±0.04ms     1.29  sparse.FromCoo.time_sparse_series_from_coo\r\n+         125±7μs          162±4μs     1.29  groupby.GroupByMethods.time_dtype_as_group('datetime', 'last', 'transformation')\r\n+        61.6±3μs         79.5±3μs     1.29  frame_ctor.FromSeries.time_mi_series\r\n+      7.89±0.4μs      10.2±0.03μs     1.29  offset.OnOffset.time_on_offset(<YearEnd: month=12>)\r\n+     1.23±0.05μs      1.59±0.07μs     1.29  index_object.Indexing.time_get('Float')\r\n+         233±9μs         299±10μs     1.29  groupby.GroupByMethods.time_dtype_as_group('datetime', 'head', 'direct')\r\n+         343±5μs         442±10μs     1.29  timeseries.ResetIndex.time_reest_datetimeindex(None)\r\n+        58.7±1ms       75.5±0.5ms     1.29  stat_ops.Correlation.time_corr('spearman')\r\n+      31.7±0.5ms         40.7±3ms     1.29  stat_ops.FrameMultiIndexOps.time_op(0, 'mad')\r\n+      9.40±0.1μs         12.1±1μs     1.28  timestamp.TimestampProperties.time_is_leap_year(None, 'B')\r\n+         450±8μs          577±3μs     1.28  categoricals.CategoricalSlicing.time_getitem_list('monotonic_incr')\r\n+      4.38±0.2ms         5.60±1ms     1.28  rolling.Pairwise.time_pairwise(1000, 'corr', False)\r\n+     3.00±0.08ms       3.83±0.1ms     1.28  timeseries.ToDatetimeISO8601.time_iso8601_format\r\n+      3.81±0.09s       4.87±0.08s     1.28  period.DataFramePeriodColumn.time_set_index\r\n+         103±3μs          132±2μs     1.28  join_merge.Concat.time_concat_empty_right(0)\r\n+        145±10μs          185±7μs     1.28  groupby.GroupByMethods.time_dtype_as_group('int', 'min', 'transformation')\r\n+         311±8μs         397±80μs     1.28  groupby.GroupByMethods.time_dtype_as_field('object', 'tail', 'direct')\r\n+      9.29±0.3μs       11.8±0.9μs     1.27  offset.OffestDatetimeArithmetic.time_apply(<YearBegin: month=1>)\r\n+      1.75±0.1ms      2.23±0.09ms     1.27  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', None)\r\n+         296±8ms          375±5ms     1.27  frame_methods.Nunique.time_frame_nunique\r\n+        99.4±7μs          126±4μs     1.27  groupby.GroupByMethods.time_dtype_as_group('int', 'shift', 'transformation')\r\n+         228±3μs          288±3μs     1.27  groupby.GroupByMethods.time_dtype_as_group('object', 'head', 'direct')\r\n+         153±1ms          194±2ms     1.26  replace.Convert.time_replace('DataFrame', 'Timedelta')\r\n+      2.39±0.1ms       3.02±0.2ms     1.26  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'round_trip')\r\n+      11.3±0.3ms       14.2±0.3ms     1.26  categoricals.Constructor.time_regular\r\n+      8.15±0.1ms       10.3±0.2ms     1.26  stat_ops.FrameOps.time_op('mad', 'float', 0, False)\r\n+      19.1±0.3ms       24.1±0.3ms     1.26  stat_ops.FrameMultiIndexOps.time_op(0, 'kurt')\r\n+      13.9±0.5ms       17.5±0.2ms     1.26  join_merge.Concat.time_concat_series(0)\r\n+        229±10μs          288±4μs     1.26  timeseries.DatetimeIndex.time_normalize('dst')\r\n+         108±8μs          135±3μs     1.26  groupby.GroupByMethods.time_dtype_as_field('float', 'var', 'transformation')\r\n+      2.84±0.3ms      3.58±0.04ms     1.26  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'float', 'min')\r\n+      2.81±0.1ms       3.53±0.2ms     1.26  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', 'round_trip')\r\n+         301±7μs         379±30μs     1.26  groupby.GroupByMethods.time_dtype_as_field('object', 'head', 'transformation')\r\n+      7.75±0.2ms       9.74±0.5ms     1.26  indexing.InsertColumns.time_assign_with_setitem\r\n+         234±3μs          294±4μs     1.26  groupby.GroupByMethods.time_dtype_as_group('datetime', 'head', 'transformation')\r\n+         236±8μs          296±4μs     1.26  groupby.GroupByMethods.time_dtype_as_group('object', 'tail', 'transformation')\r\n+         140±8μs          175±2μs     1.25  groupby.GroupByMethods.time_dtype_as_field('int', 'max', 'direct')\r\n+         149±2ms         186±20ms     1.25  binary_ops.Ops2.time_frame_float_div_by_zero\r\n+      1.98±0.1ms       2.47±0.2ms     1.25  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'sum')\r\n+      54.3±0.5μs         67.8±2μs     1.25  timeseries.SortIndex.time_get_slice(True)\r\n+        269±20μs         336±10μs     1.25  groupby.GroupByMethods.time_dtype_as_group('int', 'head', 'direct')\r\n+        91.0±2μs         113±30μs     1.25  groupby.GroupByMethods.time_dtype_as_field('datetime', 'first', 'direct')\r\n+        92.7±4μs          115±2μs     1.25  groupby.GroupByMethods.time_dtype_as_field('int', 'shift', 'direct')\r\n+        189±10μs          235±5μs     1.24  groupby.GroupByMethods.time_dtype_as_field('int', 'std', 'transformation')\r\n+      3.43±0.2ms      4.26±0.09ms     1.24  rolling.Methods.time_rolling('DataFrame', 1000, 'int', 'std')\r\n+      10.1±0.2ms       12.6±0.3ms     1.24  categoricals.CategoricalSlicing.time_getitem_bool_array('non_monotonic')\r\n+        75.1±2ms         93.1±4ms     1.24  frame_methods.ToHTML.time_to_html_mixed\r\n+         129±2μs         159±10μs     1.24  inference.NumericInferOps.time_subtract(<class 'numpy.int8'>)\r\n+      28.1±0.5ms       34.8±0.1ms     1.24  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift('US/Eastern')\r\n+         124±6μs        153±0.9μs     1.23  groupby.GroupByMethods.time_dtype_as_field('float', 'median', 'transformation')\r\n+         118±4μs          146±5μs     1.23  groupby.GroupByMethods.time_dtype_as_field('object', 'shift', 'transformation')\r\n+        427±10μs          527±6μs     1.23  timeseries.ResetIndex.time_reest_datetimeindex('US/Eastern')\r\n+     2.22±0.03ms      2.74±0.07ms     1.23  groupby.Transform.time_transform_multi_key4\r\n+         259±8μs          318±4μs     1.23  groupby.GroupByMethods.time_dtype_as_field('int', 'head', 'transformation')\r\n+        84.9±2μs        104±0.9μs     1.23  groupby.GroupByMethods.time_dtype_as_group('object', 'shift', 'direct')\r\n+     8.56±0.06ms       10.5±0.1ms     1.23  stat_ops.Rank.time_rank('Series', False)\r\n+        44.1±1ms         54.1±2ms     1.23  frame_methods.Equals.time_frame_object_equal\r\n+        263±10μs         322±10μs     1.23  groupby.GroupByMethods.time_dtype_as_field('datetime', 'head', 'direct')\r\n+      2.39±0.1ms       2.93±0.2ms     1.23  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'round_trip')\r\n+         587±4μs          720±2μs     1.23  groupby.GroupByMethods.time_dtype_as_group('object', 'value_counts', 'transformation')\r\n+      9.10±0.2μs       11.1±0.4μs     1.23  offset.OffestDatetimeArithmetic.time_apply(<YearEnd: month=12>)\r\n+        65.0±2μs         79.6±2μs     1.23  timeseries.SortIndex.time_sort_index(True)\r\n+     3.29±0.04μs       4.02±0.2μs     1.22  indexing.CategoricalIndexIndexing.time_getitem_scalar('monotonic_incr')\r\n+      10.2±0.1ms      12.5±0.09ms     1.22  gil.ParallelRolling.time_rolling('std')\r\n+      11.5±0.3ms       14.1±0.4ms     1.22  timedelta.TimedeltaOps.time_add_td_ts\r\n+        728±40μs         890±30μs     1.22  groupby.GroupByMethods.time_dtype_as_group('int', 'value_counts', 'direct')\r\n+        146±10μs          179±7μs     1.22  groupby.GroupByMethods.time_dtype_as_group('int', 'max', 'transformation')\r\n+         261±7μs          319±4μs     1.22  groupby.GroupByMethods.time_dtype_as_field('int', 'head', 'direct')\r\n+         102±6μs          124±4μs     1.22  groupby.GroupByMethods.time_dtype_as_field('float', 'mean', 'transformation')\r\n+      9.42±0.1ms       11.5±0.2ms     1.22  stat_ops.Rank.time_average_old('Series', True)\r\n+      6.53±0.1ms       7.96±0.1ms     1.22  groupby.Transform.time_transform_multi_key1\r\n+      68.1±0.6μs         83.0±7μs     1.22  indexing.DataFrameNumericIndexing.time_loc\r\n+      9.29±0.1ms       11.3±0.1ms     1.22  stat_ops.Rank.time_average_old('Series', False)\r\n+         138±2μs          168±3μs     1.22  join_merge.Concat.time_concat_empty_right(1)\r\n+       152±0.6ms          184±6ms     1.22  binary_ops.Ops2.time_frame_int_div_by_zero\r\n+      8.43±0.1ms         10.2±2ms     1.21  algorithms.Hashing.time_series_string\r\n+      43.1±0.7μs         52.3±3μs     1.21  indexing.NonNumericSeriesIndexing.time_getitem_pos_slice('string', 'nonunique_monotonic_inc')\r\n+        691±30μs         838±20μs     1.21  groupby.GroupByMethods.time_dtype_as_field('object', 'value_counts', 'transformation')\r\n+      9.48±0.1ms      11.5±0.04ms     1.21  frame_methods.MaskBool.time_frame_mask_floats\r\n+        614±10μs         744±90μs     1.21  frame_methods.Quantile.time_frame_quantile(1)\r\n+      86.9±0.7μs        105±0.3μs     1.21  groupby.GroupByMethods.time_dtype_as_group('datetime', 'shift', 'transformation')\r\n+     1.54±0.02ms      1.86±0.06ms     1.21  stat_ops.SeriesMultiIndexOps.time_op(1, 'prod')\r\n+     8.70±0.09ms       10.5±0.2ms     1.21  stat_ops.Rank.time_rank('Series', True)\r\n+      3.47±0.2ms      4.19±0.06ms     1.21  io.sas.SAS.time_read_msgpack('xport')\r\n+        88.0±3μs        106±0.7μs     1.21  groupby.GroupByMethods.time_dtype_as_group('float', 'shift', 'direct')\r\n+        601±20μs          726±4μs     1.21  groupby.GroupByMethods.time_dtype_as_group('object', 'value_counts', 'direct')\r\n+        284±20μs         343±10μs     1.21  groupby.GroupByMethods.time_dtype_as_group('int', 'median', 'transformation')\r\n+        86.6±2μs        105±0.9μs     1.21  groupby.GroupByMethods.time_dtype_as_group('object', 'shift', 'transformation')\r\n+       122±0.7ms         147±10ms     1.21  replace.Convert.time_replace('Series', 'Timestamp')\r\n+        255±20μs          307±2μs     1.21  groupby.GroupByMethods.time_dtype_as_group('float', 'tail', 'direct')\r\n+      35.6±0.7ms         42.8±1ms     1.20  io.csv.ReadCSVCategorical.time_convert_direct\r\n+        712±10μs          857±5μs     1.20  groupby.GroupByMethods.time_dtype_as_group('datetime', 'value_counts', 'direct')\r\n+      5.75±0.2ms       6.92±0.2ms     1.20  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'std')\r\n+     8.11±0.09ms       9.73±0.3ms     1.20  groupby.MultiColumn.time_col_select_numpy_sum\r\n+        305±10μs         366±20μs     1.20  groupby.GroupByMethods.time_dtype_as_field('object', 'head', 'direct')\r\n+        281±20μs         336±20μs     1.20  groupby.GroupByMethods.time_dtype_as_field('int', 'median', 'direct')\r\n+         140±1μs          168±4μs     1.20  join_merge.Concat.time_concat_empty_left(1)\r\n+        62.7±1ms         75.1±1ms     1.20  io.sas.SAS.time_read_msgpack('sas7bdat')\r\n+        54.1±1ms         64.8±2ms     1.20  stat_ops.SeriesMultiIndexOps.time_op(1, 'mad')\r\n+        71.5±3μs         85.6±6μs     1.20  inference.ToNumeric.time_from_str('ignore')\r\n+         715±9μs          853±8μs     1.19  groupby.GroupByMethods.time_dtype_as_group('datetime', 'value_counts', 'transformation')\r\n+         274±3ms          327±3ms     1.19  groupby.Apply.time_copy_overhead_single_col\r\n+        705±20μs          841±8μs     1.19  groupby.GroupByMethods.time_dtype_as_field('object', 'value_counts', 'direct')\r\n+      53.8±0.9μs       63.7±0.3μs     1.18  frame_methods.XS.time_frame_xs(0)\r\n+        35.3±1μs         41.7±1μs     1.18  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: days=2, months=2>)\r\n+        91.4±2μs          108±2μs     1.18  groupby.GroupByMethods.time_dtype_as_field('datetime', 'first', 'transformation')\r\n+        463±10μs         544±50μs     1.18  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: days=2, months=2>)\r\n+        266±10μs          313±1μs     1.18  groupby.GroupByMethods.time_dtype_as_field('float', 'head', 'direct')\r\n+     9.38±0.07ms      11.0±0.06ms     1.17  groupby.MultiColumn.time_cython_sum\r\n+      9.36±0.2μs       11.0±0.1μs     1.17  timestamp.TimestampProperties.time_is_year_start(None, 'B')\r\n+      20.7±0.3ms         24.2±2ms     1.17  stat_ops.SeriesMultiIndexOps.time_op(1, 'skew')\r\n+     1.00±0.01μs      1.17±0.04μs     1.17  timestamp.TimestampConstruction.time_parse_iso8601_no_tz\r\n+        275±10μs          320±7μs     1.16  groupby.GroupByMethods.time_dtype_as_field('int', 'sum', 'transformation')\r\n+      2.90±0.1ms       3.37±0.2ms     1.16  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', 'high')\r\n+     1.74±0.02ms      2.02±0.08ms     1.16  timeseries.ResampleSeries.time_resample('period', '1D', 'ohlc')\r\n+      9.39±0.2μs      10.9±0.07μs     1.16  timestamp.TimestampProperties.time_is_quarter_end(None, 'B')\r\n+        60.2±1ms         69.7±5ms     1.16  frame_ctor.FromDicts.time_nested_dict_int64\r\n+         205±6ms          238±3ms     1.16  strings.Split.time_split(True)\r\n+         120±2ms          138±6ms     1.16  replace.Convert.time_replace('Series', 'Timedelta')\r\n+         144±2μs          166±3μs     1.15  groupby.GroupByMethods.time_dtype_as_group('datetime', 'cumcount', 'transformation')\r\n+      6.11±0.1ms      7.04±0.05ms     1.15  strings.Cat.time_cat(0, ',', '-', 0.001)\r\n+     2.14±0.02ms      2.46±0.04ms     1.15  binary_ops.Ops.time_frame_comparison(True, 1)\r\n+        227±20μs          261±4μs     1.15  groupby.GroupByMethods.time_dtype_as_group('int', 'var', 'transformation')\r\n+     1.56±0.01ms      1.79±0.01ms     1.15  stat_ops.SeriesMultiIndexOps.time_op(0, 'mean')\r\n+      2.80±0.1ms      3.21±0.02ms     1.15  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', 'high')\r\n+     2.20±0.03ms      2.52±0.01ms     1.14  series_methods.IsIn.time_isin('object')\r\n+     2.94±0.05ms       3.36±0.2ms     1.14  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', None)\r\n+      40.2±0.3ms       46.0±0.3ms     1.14  algorithms.Factorize.time_factorize_float(True)\r\n+     2.89±0.09ms      3.29±0.05ms     1.14  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', None)\r\n+      9.74±0.4μs       11.1±0.2μs     1.14  timestamp.TimestampProperties.time_is_month_start(None, 'B')\r\n+     2.03±0.03ms      2.31±0.09ms     1.14  binary_ops.Timeseries.time_series_timestamp_compare('US/Eastern')\r\n+        552±10μs         628±10μs     1.14  ctors.SeriesConstructors.time_series_constructor(<class 'list'>, False)\r\n+      18.9±0.3ms       21.5±0.5ms     1.14  reindex.DropDuplicates.time_frame_drop_dups_na(False)\r\n+         208±8μs          237±5μs     1.14  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n+         217±5μs          246±5μs     1.14  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n+      5.24±0.3ms       5.94±0.3ms     1.13  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'custom')\r\n+        519±10μs         588±50μs     1.13  indexing.DataFrameNumericIndexing.time_bool_indexer\r\n+        257±20μs         291±30μs     1.13  groupby.GroupByMethods.time_dtype_as_field('int', 'prod', 'direct')\r\n+      3.65±0.1ms       4.13±0.9ms     1.13  binary_ops.Ops.time_frame_comparison(True, 'default')\r\n+      3.57±0.1ms       4.03±0.3ms     1.13  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', 'round_trip')\r\n+         582±8μs         655±10μs     1.13  ctors.SeriesConstructors.time_series_constructor(<class 'list'>, True)\r\n+     1.57±0.01ms      1.77±0.07ms     1.13  reshape.SimpleReshape.time_unstack\r\n+     2.05±0.04ms      2.31±0.02ms     1.13  stat_ops.FrameMultiIndexOps.time_op(1, 'mean')\r\n+     2.44±0.07ms      2.74±0.03ms     1.13  groupby.CountMultiInt.time_multi_int_count\r\n+         409±7μs          460±5μs     1.12  timeseries.DatetimeIndex.time_unique('repeated')\r\n+      9.70±0.3μs       10.9±0.1μs     1.12  timestamp.TimestampProperties.time_is_year_end(None, 'B')\r\n+     1.41±0.08μs      1.57±0.02μs     1.12  timestamp.TimestampConstruction.time_parse_today\r\n+        434±10μs         486±30μs     1.12  frame_methods.Quantile.time_frame_quantile(0)\r\n+      9.86±0.2μs       11.0±0.2μs     1.12  timestamp.TimestampProperties.time_is_quarter_start(None, 'B')\r\n+      3.47±0.2ms      3.88±0.04ms     1.12  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', 'round_trip')\r\n+      9.06±0.1ms       10.1±0.1ms     1.12  io.hdf.HDFStoreDataFrame.time_query_store_table\r\n+     1.42±0.06μs      1.58±0.01μs     1.12  timestamp.TimestampConstruction.time_parse_now\r\n+         208±7μs          232±2μs     1.11  groupby.GroupByMethods.time_dtype_as_group('object', 'nunique', 'direct')\r\n+     11.8±0.07ms       13.0±0.5ms     1.11  index_object.Ops.time_modulo('float')\r\n+     1.62±0.02ms      1.79±0.03ms     1.11  timeseries.ResampleDatetetime64.time_resample\r\n+        320±10μs          355±5μs     1.11  groupby.GroupByMethods.time_dtype_as_group('int', 'nunique', 'transformation')\r\n+     1.03±0.01ms      1.14±0.03ms     1.11  replace.FillNa.time_replace(True)\r\n+     2.07±0.01ms      2.28±0.02ms     1.10  stat_ops.SeriesMultiIndexOps.time_op(0, 'std')\r\n+     2.87±0.06ms       3.17±0.2ms     1.10  stat_ops.SeriesMultiIndexOps.time_op(1, 'sem')\r\n```\r\n\r\n</details>\r\n\r\n\r\nSpeedups\r\n<details>\r\n\r\n```\r\n-     4.52±0.02ms      4.10±0.04ms     0.91  frame_methods.NSort.time_nlargest_two_columns('last')\r\n-      3.47±0.2ms      3.15±0.02ms     0.91  sparse.ArithmeticBlock.time_make_union(nan)\r\n-      3.55±0.1ms      3.21±0.02ms     0.90  sparse.ArithmeticBlock.time_division(0)\r\n-      28.7±0.9ms       25.9±0.1ms     0.90  groupby.Nth.time_series_nth_any('float32')\r\n-        33.6±2μs       30.2±0.3μs     0.90  offset.OffestDatetimeArithmetic.time_subtract(<Day>)\r\n-      4.84±0.4ms      4.34±0.04ms     0.90  timeseries.DatetimeAccessor.time_dt_accessor_normalize\r\n-     4.86±0.07μs      4.34±0.03μs     0.89  timedelta.TimedeltaConstructor.time_from_np_timedelta\r\n-      6.63±0.9μs       5.92±0.1μs     0.89  timedelta.TimedeltaConstructor.time_from_datetime_timedelta\r\n-      4.29±0.2ms      3.83±0.02ms     0.89  timeseries.DatetimeIndex.time_normalize('repeated')\r\n-         114±4ms          101±2ms     0.89  gil.ParallelGroupbyMethods.time_loop(4, 'sum')\r\n-        62.6±2ms       55.6±0.5ms     0.89  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'datetime')\r\n-     2.76±0.02ms      2.43±0.02ms     0.88  frame_methods.NSort.time_nlargest_one_column('last')\r\n-     3.13±0.07ms      2.76±0.08ms     0.88  frame_methods.NSort.time_nsmallest_one_column('last')\r\n-        801±50μs         705±10μs     0.88  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n-     1.43±0.06ms      1.25±0.01ms     0.87  stat_ops.SeriesOps.time_op('median', 'float', True)\r\n-        42.2±2ms       36.8±0.8ms     0.87  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'float')\r\n-      1.93±0.2μs      1.68±0.03μs     0.87  timedelta.TimedeltaConstructor.time_from_missing\r\n-        17.4±1μs       15.1±0.6μs     0.87  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessDay>)\r\n-      45.0±0.9ms       39.0±0.4ms     0.87  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'bool')\r\n-     6.10±0.05μs      5.28±0.04μs     0.86  timedelta.TimedeltaConstructor.time_from_unit\r\n-        44.4±2ms         38.2±1ms     0.86  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'float_with_nan')\r\n-      2.37±0.1ms      2.04±0.02ms     0.86  timeseries.DatetimeIndex.time_timeseries_is_month_start('repeated')\r\n-      8.17±0.1ms      7.00±0.03ms     0.86  stat_ops.FrameOps.time_op('mean', 'float', 1, False)\r\n-      41.5±0.5ms       35.3±0.2ms     0.85  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'int')\r\n-        60.4±3ms         51.3±2ms     0.85  gil.ParallelGroupbyMethods.time_loop(2, 'mean')\r\n-      21.3±0.2ms      17.9±0.06ms     0.84  timeseries.DatetimeIndex.time_normalize('tz_aware')\r\n-      7.86±0.3μs      6.60±0.04μs     0.84  offset.OnOffset.time_on_offset(<BusinessMonthBegin>)\r\n-         199±5ms          166±1ms     0.83  io.stata.Stata.time_read_stata('td')\r\n-      8.60±0.7μs      7.08±0.06μs     0.82  offset.OnOffset.time_on_offset(<SemiMonthEnd: day_of_month=15>)\r\n-      9.77±0.2ms      8.03±0.07ms     0.82  strings.Cat.time_cat(0, ',', None, 0.001)\r\n-      5.11±0.1ms      4.18±0.07ms     0.82  frame_methods.NSort.time_nlargest_two_columns('first')\r\n-        35.3±7ms       28.8±0.4ms     0.82  groupby.Nth.time_groupby_nth_all('object')\r\n-        62.4±3ms       50.7±0.6ms     0.81  gil.ParallelGroupbyMethods.time_loop(2, 'prod')\r\n-     10.3±0.09ms       8.34±0.1ms     0.81  io.hdf.HDFStoreDataFrame.time_store_info\r\n-      1.61±0.5ms      1.30±0.03ms     0.80  stat_ops.SeriesOps.time_op('median', 'float', False)\r\n-        15.7±1μs       12.6±0.1μs     0.80  timedelta.TimedeltaConstructor.time_from_components\r\n-        63.1±5ms         50.3±1ms     0.80  gil.ParallelGroupbyMethods.time_loop(2, 'sum')\r\n-      24.9±0.7μs       19.8±0.1μs     0.80  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessDay>)\r\n-        9.84±1ms       7.80±0.1ms     0.79  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'float_with_nan')\r\n-         133±2μs          105±1μs     0.79  offset.OffestDatetimeArithmetic.time_apply(<CustomBusinessMonthBegin>)\r\n-         129±6μs          100±2μs     0.78  offset.OffestDatetimeArithmetic.time_subtract_10(<CustomBusinessMonthBegin>)\r\n-         141±5ms        109±0.8ms     0.78  offset.OffsetSeriesArithmetic.time_add_offset(<CustomBusinessMonthBegin>)\r\n-        17.6±1μs       13.4±0.7μs     0.76  offset.OffestDatetimeArithmetic.time_add(<BusinessDay>)\r\n-        21.5±2μs       16.2±0.4μs     0.75  timeseries.AsOf.time_asof_single('Series')\r\n-        10.2±2μs       7.70±0.1μs     0.75  timeseries.AsOf.time_asof_single_early('Series')\r\n-        97.1±1ms         71.4±4ms     0.74  frame_methods.Describe.time_series_describe\r\n-         191±5ms          139±3ms     0.73  timeseries.DatetimeIndex.time_to_pydatetime('tz_aware')\r\n-      20.1±0.2ms       14.6±0.6ms     0.73  algorithms.Factorize.time_factorize_int(True)\r\n-      5.60±0.2μs       4.04±0.2μs     0.72  timeseries.DatetimeIndex.time_get('tz_naive')\r\n-        149±10μs        107±0.8μs     0.72  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessMonthBegin>)\r\n-        16.0±4ms      11.4±0.09ms     0.71  groupby.Nth.time_series_nth('datetime')\r\n-        238±20ms          168±3ms     0.71  io.stata.Stata.time_read_stata('tc')\r\n-      9.71±0.8ms       6.86±0.4ms     0.71  groupby.Categories.time_groupby_ordered_nosort\r\n-        44.0±5ms       30.9±0.2ms     0.70  plotting.TimeseriesPlotting.time_plot_irregular\r\n-        134±10μs       94.2±0.9μs     0.70  offset.OffestDatetimeArithmetic.time_subtract(<CustomBusinessMonthBegin>)\r\n-         321±5ms         225±10ms     0.70  frame_methods.Describe.time_dataframe_describe\r\n-        15.9±4ms       11.1±0.1ms     0.70  groupby.Nth.time_series_nth('float64')\r\n-      11.3±0.3ms      7.93±0.02ms     0.70  inference.DateInferOps.time_subtract_datetimes\r\n-     1.38±0.02ms         961±10μs     0.69  stat_ops.SeriesOps.time_op('median', 'int', True)\r\n-        11.4±2ms       7.79±0.1ms     0.68  timeseries.AsOf.time_asof('DataFrame')\r\n-         290±5ns          197±4ns     0.68  timedelta.TimedeltaProperties.time_timedelta_days\r\n-        430±60ns          291±1ns     0.68  indexing.MethodLookup.time_lookup_loc\r\n-      22.7±0.4μs       15.3±0.2μs     0.68  offset.OffestDatetimeArithmetic.time_add_10(<YearBegin: month=1>)\r\n-     1.45±0.06ms         975±10μs     0.67  stat_ops.SeriesOps.time_op('median', 'int', False)\r\n-      5.88±0.4μs      3.92±0.06μs     0.67  timeseries.DatetimeIndex.time_get('dst')\r\n-     2.46±0.03ms      1.64±0.01ms     0.66  groupby.RankWithTies.time_rank_ties('float32', 'first')\r\n-     2.54±0.02ms      1.67±0.03ms     0.66  groupby.RankWithTies.time_rank_ties('float64', 'dense')\r\n-      2.51±0.3ms      1.65±0.03ms     0.65  groupby.RankWithTies.time_rank_ties('int64', 'max')\r\n-     2.50±0.08ms      1.64±0.01ms     0.65  groupby.RankWithTies.time_rank_ties('float64', 'first')\r\n-        51.0±2μs         33.3±4μs     0.65  categoricals.IsMonotonic.time_categorical_series_is_monotonic_decreasing\r\n-     2.53±0.01ms      1.64±0.01ms     0.65  groupby.RankWithTies.time_rank_ties('float64', 'min')\r\n-        13.8±2ms       8.96±0.1ms     0.65  strings.Cat.time_cat(0, ',', None, 0.15)\r\n-     2.58±0.07ms      1.67±0.01ms     0.65  groupby.RankWithTies.time_rank_ties('float32', 'dense')\r\n-         107±2ms         69.3±1ms     0.65  index_object.IndexAppend.time_append_int_list\r\n-        11.9±1ms       7.63±0.2ms     0.64  frame_methods.ToString.time_to_string_floats\r\n-      2.56±0.1ms      1.63±0.01ms     0.64  groupby.RankWithTies.time_rank_ties('float32', 'average')\r\n-      2.77±0.3ms      1.75±0.06ms     0.63  rolling.Quantile.time_quantile('Series', 10, 'int', 1, 'higher')\r\n-      2.56±0.7ms         1.62±0ms     0.63  groupby.RankWithTies.time_rank_ties('datetime64', 'max')\r\n-      6.92±0.3ms      4.37±0.03ms     0.63  stat_ops.FrameOps.time_op('median', 'int', 0, True)\r\n-         312±3ns          196±1ns     0.63  timedelta.TimedeltaProperties.time_timedelta_microseconds\r\n-      6.93±0.3ms      4.33±0.05ms     0.62  stat_ops.FrameOps.time_op('median', 'int', 0, False)\r\n-      2.64±0.1ms      1.65±0.01ms     0.62  groupby.RankWithTies.time_rank_ties('float64', 'max')\r\n-      2.69±0.2ms      1.66±0.01ms     0.62  groupby.RankWithTies.time_rank_ties('int64', 'first')\r\n-     2.65±0.08ms      1.64±0.01ms     0.62  groupby.RankWithTies.time_rank_ties('float32', 'min')\r\n-        31.0±1μs       19.2±0.9μs     0.62  offset.OffestDatetimeArithmetic.time_subtract_10(<QuarterEnd: startingMonth=3>)\r\n-      2.67±0.1ms      1.65±0.01ms     0.62  groupby.RankWithTies.time_rank_ties('float64', 'average')\r\n-     3.45±0.09ms      2.13±0.05ms     0.62  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136817b8>, True)\r\n-       474±100ms          290±5ms     0.61  indexing.NonNumericSeriesIndexing.time_getitem_list_like('datetime', 'nonunique_monotonic_inc')\r\n-        26.6±1μs       16.2±0.2μs     0.61  offset.OffestDatetimeArithmetic.time_subtract(<YearBegin: month=1>)\r\n-      2.64±0.1ms      1.61±0.01ms     0.61  groupby.RankWithTies.time_rank_ties('datetime64', 'average')\r\n-        24.2±2μs       14.5±0.2μs     0.60  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<QuarterEnd: startingMonth=3>)\r\n-      5.71±0.3ms      3.41±0.01ms     0.60  offset.OnOffset.time_on_offset(<CustomBusinessMonthEnd>)\r\n-      19.6±0.9ms      11.6±0.09ms     0.59  categoricals.ValueCounts.time_value_counts(False)\r\n-      2.78±0.6ms      1.65±0.01ms     0.59  groupby.RankWithTies.time_rank_ties('int64', 'dense')\r\n-      31.3±0.6μs       18.5±0.5μs     0.59  offset.OffestDatetimeArithmetic.time_subtract_10(<YearBegin: month=1>)\r\n-     2.57±0.08ms      1.52±0.06ms     0.59  period.Algorithms.time_value_counts('series')\r\n-         153±4μs         90.2±8μs     0.59  offset.OffestDatetimeArithmetic.time_subtract_10(<CustomBusinessMonthEnd>)\r\n-        29.6±1μs       17.3±0.3μs     0.59  offset.OffestDatetimeArithmetic.time_subtract(<BusinessQuarterEnd: startingMonth=3>)\r\n-         370±4ms          216±7ms     0.58  reindex.Reindex.time_reindex_multiindex\r\n-         555±8ns         321±10ns     0.58  timestamp.TimestampProperties.time_freqstr(None, 'B')\r\n-        34.3±2μs         19.7±2μs     0.57  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessQuarterEnd: startingMonth=3>)\r\n-      2.87±0.3ms      1.63±0.01ms     0.57  groupby.RankWithTies.time_rank_ties('float32', 'max')\r\n-        27.5±2μs       15.6±0.1μs     0.57  offset.OffestDatetimeArithmetic.time_subtract(<YearEnd: month=12>)\r\n-      2.88±0.4ms      1.62±0.01ms     0.56  groupby.RankWithTies.time_rank_ties('datetime64', 'dense')\r\n-        563±10ns         317±10ns     0.56  timestamp.TimestampProperties.time_freqstr(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-      28.6±0.7μs       16.1±0.2μs     0.56  offset.OffestDatetimeArithmetic.time_add_10(<QuarterEnd: startingMonth=3>)\r\n-        53.5±2μs         29.8±1μs     0.56  categoricals.IsMonotonic.time_categorical_series_is_monotonic_increasing\r\n-        42.8±1ms         23.8±1ms     0.56  categoricals.Constructor.time_all_nan\r\n-         144±2ms         79.8±3ms     0.56  indexing.NumericSeriesIndexing.time_getitem_array(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-      2.99±0.7ms      1.66±0.02ms     0.55  groupby.RankWithTies.time_rank_ties('int64', 'min')\r\n-      2.97±0.7ms      1.64±0.02ms     0.55  groupby.RankWithTies.time_rank_ties('int64', 'average')\r\n-      14.8±0.2ms       8.17±0.5ms     0.55  binary_ops.Timeseries.time_timestamp_ops_diff('US/Eastern')\r\n-         358±6ns          197±5ns     0.55  timedelta.TimedeltaProperties.time_timedelta_seconds\r\n-      22.4±0.8μs         12.2±1μs     0.55  offset.OffestDatetimeArithmetic.time_apply(<BusinessQuarterEnd: startingMonth=3>)\r\n-        24.5±1μs       13.1±0.2μs     0.54  offset.OffestDatetimeArithmetic.time_add(<QuarterEnd: startingMonth=3>)\r\n-         217±9μs        116±0.5μs     0.54  offset.OffestDatetimeArithmetic.time_subtract(<CustomBusinessMonthEnd>)\r\n-        309±20μs          163±8μs     0.53  indexing.CategoricalIndexIndexing.time_getitem_bool_array('monotonic_incr')\r\n-        30.6±1μs       15.8±0.2μs     0.52  offset.OffestDatetimeArithmetic.time_subtract(<QuarterEnd: startingMonth=3>)\r\n-     1.64±0.03ms         845±50μs     0.52  indexing.NumericSeriesIndexing.time_getitem_array(<class 'pandas.core.indexes.numeric.Int64Index'>, 'unique_monotonic_inc')\r\n-        7.16±3ms      3.68±0.02ms     0.51  offset.OnOffset.time_on_offset(<CustomBusinessMonthBegin>)\r\n-         134±4ms       68.5±0.4ms     0.51  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<CustomBusinessMonthEnd>)\r\n-      28.6±0.7μs       14.2±0.1μs     0.50  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessQuarterEnd: startingMonth=3>)\r\n-      23.9±0.9μs       11.9±0.2μs     0.50  offset.OffestDatetimeArithmetic.time_apply(<QuarterEnd: startingMonth=3>)\r\n-      37.5±0.8μs       18.5±0.4μs     0.49  offset.OffestDatetimeArithmetic.time_subtract_10(<QuarterBegin: startingMonth=3>)\r\n-        23.5±1ms       11.6±0.3ms     0.49  categoricals.ValueCounts.time_value_counts(True)\r\n-         134±2μs         65.9±2μs     0.49  offset.OffestDatetimeArithmetic.time_add(<CustomBusinessMonthEnd>)\r\n-         132±3μs         63.5±6μs     0.48  offset.OffestDatetimeArithmetic.time_apply(<CustomBusinessMonthEnd>)\r\n-        27.1±4μs       13.1±0.6μs     0.48  offset.OffestDatetimeArithmetic.time_add(<BusinessQuarterEnd: startingMonth=3>)\r\n-        450±20ms         216±30ms     0.48  series_methods.SeriesConstructor.time_constructor('dict')\r\n-        30.0±2μs       14.4±0.2μs     0.48  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessMonthEnd>)\r\n-      39.2±0.9μs       18.8±0.5μs     0.48  offset.OffestDatetimeArithmetic.time_subtract_10(<YearEnd: month=12>)\r\n-         141±5μs       67.8±0.8μs     0.48  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessMonthEnd>)\r\n-         104±9ms         49.4±4ms     0.47  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'midpoint')\r\n-      32.4±0.8μs         15.3±1μs     0.47  offset.OffestDatetimeArithmetic.time_add_10(<YearEnd: month=12>)\r\n-     4.13±0.08ms      1.95±0.03ms     0.47  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136817b8>, False)\r\n-        16.2±7μs       7.62±0.3μs     0.47  indexing.NumericSeriesIndexing.time_iloc_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>, 'unique_monotonic_inc')\r\n-        16.4±7μs       7.72±0.2μs     0.47  indexing.NumericSeriesIndexing.time_iloc_scalar(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'unique_monotonic_inc')\r\n-         108±5ms         50.5±3ms     0.47  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'higher')\r\n-        3.48±1ms      1.62±0.01ms     0.47  groupby.RankWithTies.time_rank_ties('datetime64', 'min')\r\n-         101±6ms         46.8±9ms     0.46  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'midpoint')\r\n-        40.6±2μs         18.5±1μs     0.46  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessQuarterBegin: startingMonth=3>)\r\n-         155±8ms         70.1±3ms     0.45  offset.OffsetSeriesArithmetic.time_add_offset(<CustomBusinessMonthEnd>)\r\n-        35.8±1μs       16.2±0.1μs     0.45  offset.OffestDatetimeArithmetic.time_subtract(<BusinessQuarterBegin: startingMonth=3>)\r\n-        108±10ms         48.5±3ms     0.45  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'lower')\r\n-        36.5±1μs       16.3±0.6μs     0.45  offset.OffestDatetimeArithmetic.time_add_10(<BusinessQuarterBegin: startingMonth=3>)\r\n-        172±70ms         76.5±2ms     0.45  indexing.NumericSeriesIndexing.time_ix_array(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-      34.9±0.6μs       15.5±0.4μs     0.44  offset.OffestDatetimeArithmetic.time_add_10(<QuarterBegin: startingMonth=3>)\r\n-        32.6±2μs       14.5±0.8μs     0.44  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<QuarterBegin: startingMonth=3>)\r\n-         105±5ms         46.3±4ms     0.44  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'higher')\r\n-      29.4±0.9μs       13.0±0.2μs     0.44  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<MonthBegin>)\r\n-        17.4±7μs      7.60±0.02μs     0.44  indexing.NumericSeriesIndexing.time_iloc_scalar(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-         106±3ms         46.3±1ms     0.44  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'midpoint')\r\n-         110±4ms         47.8±2ms     0.44  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'lower')\r\n-         106±4ms         46.4±3ms     0.44  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'nearest')\r\n-        51.7±2ms         22.4±1ms     0.43  indexing.CategoricalIndexIndexing.time_get_indexer_list('monotonic_incr')\r\n-         101±1ms       43.8±0.5ms     0.43  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'midpoint')\r\n-         105±3ms       45.1±0.5ms     0.43  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'nearest')\r\n-      38.4±0.6μs       16.4±0.2μs     0.43  offset.OffestDatetimeArithmetic.time_subtract_10(<MonthBegin>)\r\n-        30.7±3μs       13.1±0.3μs     0.43  offset.OffestDatetimeArithmetic.time_add(<BusinessYearBegin: month=1>)\r\n-         108±6ms         45.9±5ms     0.43  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'nearest')\r\n-         103±4ms         43.7±4ms     0.43  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'higher')\r\n-        18.1±8μs       7.68±0.3μs     0.42  indexing.NumericSeriesIndexing.time_iloc_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        30.1±1μs       12.7±0.8μs     0.42  offset.OffestDatetimeArithmetic.time_add(<QuarterBegin: startingMonth=3>)\r\n-      1.63±0.1ms          689±4μs     0.42  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n-      28.8±0.4μs         12.2±1μs     0.42  offset.OffestDatetimeArithmetic.time_apply(<BusinessQuarterBegin: startingMonth=3>)\r\n-      28.3±0.4μs       11.9±0.6μs     0.42  offset.OffestDatetimeArithmetic.time_apply(<BusinessYearBegin: month=1>)\r\n-         111±9ms         46.3±5ms     0.42  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'linear')\r\n-        41.5±2μs       17.3±0.4μs     0.42  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessMonthEnd>)\r\n-         109±5ms         45.0±1ms     0.41  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'linear')\r\n-         102±9ms         41.9±1ms     0.41  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'lower')\r\n-        3.92±2ms      1.62±0.01ms     0.41  groupby.RankWithTies.time_rank_ties('datetime64', 'first')\r\n-        34.1±1μs      14.1±0.09μs     0.41  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessQuarterBegin: startingMonth=3>)\r\n-        38.7±1μs       15.9±0.1μs     0.41  offset.OffestDatetimeArithmetic.time_subtract(<QuarterBegin: startingMonth=3>)\r\n-        32.1±2μs      13.0±0.08μs     0.41  offset.OffestDatetimeArithmetic.time_add(<BusinessQuarterBegin: startingMonth=3>)\r\n-      28.5±0.5μs      11.5±0.08μs     0.40  offset.OffestDatetimeArithmetic.time_apply(<QuarterBegin: startingMonth=3>)\r\n-        42.3±2μs      17.1±0.09μs     0.40  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessMonthBegin>)\r\n-         104±3ms         41.9±5ms     0.40  rolling.Quantile.time_quantile('Series', 10, 'int', 0.5, 'nearest')\r\n-        35.0±2μs       14.0±0.3μs     0.40  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessYearBegin: month=1>)\r\n-      1.75±0.03s         693±30ms     0.40  reshape.GetDummies.time_get_dummies_1d_sparse\r\n-      37.4±0.9μs       14.8±0.6μs     0.40  offset.OffestDatetimeArithmetic.time_add_10(<BusinessMonthEnd>)\r\n-      28.2±0.7μs       11.2±0.5μs     0.40  offset.OffestDatetimeArithmetic.time_apply(<BusinessMonthEnd>)\r\n-         107±3ms         42.1±1ms     0.39  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'higher')\r\n-         120±8ms         47.0±1ms     0.39  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0.5, 'linear')\r\n-     1.77±0.09ms          693±3μs     0.39  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n-        68.3±4ms       26.7±0.7ms     0.39  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift(None)\r\n-      38.5±0.7μs       15.0±0.3μs     0.39  offset.OffestDatetimeArithmetic.time_subtract(<BusinessMonthEnd>)\r\n-        34.8±3μs       13.6±0.1μs     0.39  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessMonthBegin>)\r\n-        202±10ms         78.5±6ms     0.39  indexing.NumericSeriesIndexing.time_getitem_array(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-        33.9±3μs       13.1±0.5μs     0.39  offset.OffestDatetimeArithmetic.time_add(<BusinessMonthBegin>)\r\n-      51.3±0.7μs       19.7±0.1μs     0.38  offset.OffestDatetimeArithmetic.time_subtract_10(<SemiMonthBegin: day_of_month=15>)\r\n-         111±7ms         42.3±1ms     0.38  rolling.Quantile.time_quantile('DataFrame', 10, 'int', 0.5, 'lower')\r\n-        33.2±4μs         12.7±1μs     0.38  offset.OffestDatetimeArithmetic.time_add(<BusinessMonthEnd>)\r\n-       781±200μs          298±9μs     0.38  inference.NumericInferOps.time_add(<class 'numpy.uint32'>)\r\n-      1.97±0.2ms         751±60μs     0.38  period.Algorithms.time_drop_duplicates('series')\r\n-        42.6±2μs       16.2±0.7μs     0.38  offset.OffestDatetimeArithmetic.time_add_10(<BusinessYearEnd: month=12>)\r\n-        37.4±3μs       14.2±0.2μs     0.38  offset.OffestDatetimeArithmetic.time_add_10(<MonthBegin>)\r\n-       268±100ms          100±7ms     0.38  indexing.NumericSeriesIndexing.time_loc_array(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        47.0±2μs         17.4±2μs     0.37  offset.OffestDatetimeArithmetic.time_add_10(<SemiMonthBegin: day_of_month=15>)\r\n-        41.5±1μs       15.3±0.9μs     0.37  offset.OffestDatetimeArithmetic.time_add_10(<BusinessMonthBegin>)\r\n-        46.2±2μs       16.8±0.3μs     0.36  offset.OffestDatetimeArithmetic.time_subtract(<BusinessYearEnd: month=12>)\r\n-        4.13±1ms      1.50±0.06ms     0.36  inference.NumericInferOps.time_add(<class 'numpy.int64'>)\r\n-        31.9±4μs       11.5±0.9μs     0.36  offset.OffestDatetimeArithmetic.time_apply(<MonthBegin>)\r\n-      43.3±0.7μs       15.6±0.5μs     0.36  offset.OffestDatetimeArithmetic.time_add_10(<BusinessYearBegin: month=1>)\r\n-        33.7±4μs       12.1±0.2μs     0.36  offset.OffestDatetimeArithmetic.time_add(<MonthBegin>)\r\n-      31.7±0.2μs      11.4±0.08μs     0.36  offset.OffestDatetimeArithmetic.time_apply(<BusinessMonthBegin>)\r\n-        41.2±6μs       14.7±0.2μs     0.36  offset.OffestDatetimeArithmetic.time_subtract(<BusinessMonthBegin>)\r\n-        142±30ms         50.3±3ms     0.36  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5, 'linear')\r\n-        53.9±1μs       19.0±0.3μs     0.35  offset.OffestDatetimeArithmetic.time_subtract_10(<SemiMonthEnd: day_of_month=15>)\r\n-        49.4±1μs       17.4±0.9μs     0.35  offset.OffestDatetimeArithmetic.time_add_10(<SemiMonthEnd: day_of_month=15>)\r\n-        42.1±1μs       14.8±0.1μs     0.35  offset.OffestDatetimeArithmetic.time_subtract(<MonthBegin>)\r\n-        46.2±2μs       16.2±0.2μs     0.35  offset.OffestDatetimeArithmetic.time_subtract(<BusinessYearBegin: month=1>)\r\n-       229±100ms         77.2±2ms     0.34  indexing.NumericSeriesIndexing.time_getitem_lists(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-        255±10ms         85.3±7ms     0.33  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'midpoint')\r\n-        44.0±2μs       14.5±0.5μs     0.33  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<SemiMonthBegin: day_of_month=15>)\r\n-        57.5±3μs       18.7±0.9μs     0.33  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessYearBegin: month=1>)\r\n-        4.41±2ms      1.41±0.02ms     0.32  inference.NumericInferOps.time_divide(<class 'numpy.int32'>)\r\n-        54.2±3μs       17.4±0.3μs     0.32  offset.OffestDatetimeArithmetic.time_subtract(<SemiMonthEnd: day_of_month=15>)\r\n-        55.5±4μs       17.7±0.2μs     0.32  offset.OffestDatetimeArithmetic.time_subtract(<SemiMonthBegin: day_of_month=15>)\r\n-        60.0±4μs         18.8±2μs     0.31  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessYearEnd: month=12>)\r\n-        47.2±3μs       14.7±0.4μs     0.31  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<SemiMonthEnd: day_of_month=15>)\r\n-      54.7±0.9μs         17.0±4μs     0.31  offset.OffestDatetimeArithmetic.time_add_10(<BusinessQuarterEnd: startingMonth=3>)\r\n-         253±8ms        76.5±10ms     0.30  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'higher')\r\n-        74.8±2μs         22.6±2μs     0.30  indexing.CategoricalIndexIndexing.time_getitem_list_like('non_monotonic')\r\n-        73.5±2μs         22.1±1μs     0.30  indexing.CategoricalIndexIndexing.time_getitem_list_like('monotonic_incr')\r\n-        45.6±1μs       13.7±0.3μs     0.30  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<MonthEnd>)\r\n-       267±100ms         79.9±1ms     0.30  indexing.NumericSeriesIndexing.time_getitem_lists(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        57.0±2μs       16.8±0.2μs     0.30  offset.OffestDatetimeArithmetic.time_subtract_10(<MonthEnd>)\r\n-        246±10ms         72.3±2ms     0.29  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'nearest')\r\n-        106±40μs       30.9±0.3μs     0.29  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>, 'unique_monotonic_inc')\r\n-        47.1±8μs      13.6±0.06μs     0.29  offset.OffestDatetimeArithmetic.time_add(<SemiMonthEnd: day_of_month=15>)\r\n-        263±20ms         74.6±8ms     0.28  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'linear')\r\n-        262±20ms         74.1±7ms     0.28  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'midpoint')\r\n-        46.7±2μs       13.0±0.5μs     0.28  offset.OffestDatetimeArithmetic.time_add(<SemiMonthBegin: day_of_month=15>)\r\n-      51.9±0.7μs       14.3±0.3μs     0.28  offset.OffestDatetimeArithmetic.time_add_10(<MonthEnd>)\r\n-        253±10ms         69.4±5ms     0.27  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'nearest')\r\n-        262±10ms       71.4±0.8ms     0.27  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'linear')\r\n-        45.3±2μs       12.1±0.4μs     0.27  offset.OffestDatetimeArithmetic.time_apply(<SemiMonthEnd: day_of_month=15>)\r\n-        266±20ms        71.2±10ms     0.27  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5, 'lower')\r\n-        253±20ms         67.6±2ms     0.27  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'lower')\r\n-        249±10ms         66.3±3ms     0.27  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 0.5, 'higher')\r\n-        47.0±9μs       12.3±0.5μs     0.26  offset.OffestDatetimeArithmetic.time_apply(<SemiMonthBegin: day_of_month=15>)\r\n-        657±50μs         170±10μs     0.26  groupby.GroupByMethods.time_dtype_as_group('object', 'ffill', 'direct')\r\n-         224±7ms       57.8±0.2ms     0.26  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'linear')\r\n-         224±6ms       57.7±0.7ms     0.26  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'midpoint')\r\n-        60.4±2μs       15.4±0.4μs     0.25  offset.OffestDatetimeArithmetic.time_subtract(<MonthEnd>)\r\n-      49.7±0.8μs       12.6±0.9μs     0.25  offset.OffestDatetimeArithmetic.time_apply(<BusinessYearEnd: month=12>)\r\n-        45.9±3μs       11.4±0.2μs     0.25  offset.OffestDatetimeArithmetic.time_apply(<MonthEnd>)\r\n-        972±60μs        241±100μs     0.25  series_methods.Map.time_map('Series')\r\n-        236±20ms         58.5±2ms     0.25  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'linear')\r\n-         237±8ms       57.8±0.5ms     0.24  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'midpoint')\r\n-        51.6±9μs       12.5±0.2μs     0.24  offset.OffestDatetimeArithmetic.time_add(<MonthEnd>)\r\n-        663±30μs          160±6μs     0.24  groupby.GroupByMethods.time_dtype_as_group('object', 'ffill', 'transformation')\r\n-        665±70μs        158±0.7μs     0.24  groupby.GroupByMethods.time_dtype_as_group('object', 'bfill', 'direct')\r\n-       664±100μs          157±1μs     0.24  groupby.GroupByMethods.time_dtype_as_group('object', 'bfill', 'transformation')\r\n-        53.5±2μs       12.6±0.1μs     0.24  offset.OffestDatetimeArithmetic.time_add(<BusinessYearEnd: month=12>)\r\n-         228±9ms       51.6±0.7ms     0.23  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'higher')\r\n-     1.11±0.08ms          250±5μs     0.23  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n-      6.22±0.3ms      1.40±0.02ms     0.23  series_methods.Dir.time_dir_strings\r\n-        226±20ms       50.8±0.4ms     0.22  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'lower')\r\n-        228±20ms       51.1±0.7ms     0.22  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'nearest')\r\n-        230±10ms       50.9±0.4ms     0.22  rolling.Quantile.time_quantile('Series', 1000, 'int', 0.5, 'higher')\r\n-         230±6ms       50.6±0.3ms     0.22  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'lower')\r\n-        63.4±4μs      13.8±0.09μs     0.22  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessYearEnd: month=12>)\r\n-         232±6ms       50.7±0.6ms     0.22  rolling.Quantile.time_quantile('DataFrame', 1000, 'int', 0.5, 'nearest')\r\n-         314±7μs         67.6±1μs     0.22  groupby.GroupByMethods.time_dtype_as_group('object', 'any', 'transformation')\r\n-         312±1μs       67.0±0.9μs     0.21  groupby.GroupByMethods.time_dtype_as_group('object', 'all', 'direct')\r\n-        319±10μs       67.2±0.3μs     0.21  groupby.GroupByMethods.time_dtype_as_group('object', 'all', 'transformation')\r\n-       361±200ms         76.1±2ms     0.21  indexing.NumericSeriesIndexing.time_loc_array(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-        332±30μs       66.7±0.5μs     0.20  groupby.GroupByMethods.time_dtype_as_group('object', 'any', 'direct')\r\n-         563±6ms          112±1ms     0.20  timeseries.DatetimeIndex.time_to_time('tz_aware')\r\n-      18.5±0.6ms       3.67±0.1ms     0.20  groupby.Datelike.time_sum('period_range')\r\n-     1.25±0.07ms          245±4μs     0.20  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n-        557±10ms          109±3ms     0.20  timeseries.DatetimeIndex.time_to_date('tz_aware')\r\n-        66.2±1μs       12.9±0.9μs     0.19  indexing.CategoricalIndexIndexing.time_getitem_slice('monotonic_decr')\r\n-     2.52±0.06ms          434±6μs     0.17  offset.ApplyIndex.time_apply_index(<YearBegin: month=1>)\r\n-        80.4±2μs       13.4±0.9μs     0.17  indexing.CategoricalIndexIndexing.time_getitem_slice('monotonic_incr')\r\n-      2.89±0.3ms          466±2μs     0.16  offset.ApplyIndex.time_apply_index(<QuarterBegin: startingMonth=3>)\r\n-        83.6±3μs         13.2±2μs     0.16  indexing.CategoricalIndexIndexing.time_getitem_slice('non_monotonic')\r\n-        65.8±3ms       8.84±0.2ms     0.13  categoricals.Isin.time_isin_categorical('object')\r\n-        49.5±2μs      6.01±0.05μs     0.12  offset.OnOffset.time_on_offset(<QuarterEnd: startingMonth=3>)\r\n-     3.79±0.04ms         441±30μs     0.12  indexing.CategoricalIndexIndexing.time_get_loc_scalar('non_monotonic')\r\n-      6.39±0.2ms          704±8μs     0.11  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n-      5.41±0.3ms          586±2μs     0.11  timeseries.DatetimeIndex.time_to_time('dst')\r\n-     6.66±0.09ms          702±4μs     0.11  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n-       153±0.7ms      16.0±0.05ms     0.10  timeseries.DatetimeIndex.time_to_time('repeated')\r\n-         158±3ms       16.2±0.2ms     0.10  timeseries.DatetimeIndex.time_to_time('tz_naive')\r\n-         153±3ms      14.1±0.07ms     0.09  timeseries.DatetimeIndex.time_to_date('repeated')\r\n-      5.63±0.1ms          517±3μs     0.09  timeseries.DatetimeIndex.time_to_date('dst')\r\n-         154±7ms       13.9±0.1ms     0.09  timeseries.DatetimeIndex.time_to_date('tz_naive')\r\n-         100±3ms      8.29±0.06ms     0.08  inference.DateInferOps.time_timedelta_plus_datetime\r\n-        71.1±2ms       5.20±0.3ms     0.07  sparse.Arithmetic.time_divide(0.1, nan)\r\n-        72.3±2ms       5.18±0.3ms     0.07  sparse.Arithmetic.time_divide(0.01, nan)\r\n-        9.53±5ms         546±20μs     0.06  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.UInt64Engine'>, <class 'numpy.float64'>, 'non_monotonic')\r\n-        9.71±5ms         536±10μs     0.06  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.UInt64Engine'>, <class 'numpy.float64'>, 'monotonic_decr')\r\n-        68.1±2ms       3.62±0.6ms     0.05  sparse.Arithmetic.time_add(0.1, nan)\r\n-      3.02±0.05s         157±10ms     0.05  plotting.Plotting.time_frame_plot\r\n-        78.0±2ms      3.82±0.05ms     0.05  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'max')\r\n-        79.7±4ms      3.85±0.07ms     0.05  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'min')\r\n-        68.8±3ms       3.31±0.2ms     0.05  sparse.Arithmetic.time_add(0.01, nan)\r\n-      78.0±0.9ms      3.69±0.03ms     0.05  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'int', 'max')\r\n-        9.22±6ms         431±10μs     0.05  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Int64Engine'>, <class 'numpy.float64'>, 'monotonic_decr')\r\n-      76.2±0.2ms      3.56±0.06ms     0.05  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'float', 'max')\r\n-      76.2±0.3ms      3.52±0.02ms     0.05  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'float', 'min')\r\n-        9.33±5ms         422±20μs     0.05  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Int64Engine'>, <class 'numpy.float64'>, 'non_monotonic')\r\n-      3.05±0.04s          138±7ms     0.05  plotting.Plotting.time_series_plot\r\n-        8.91±5ms         401±20μs     0.04  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.UInt64Engine'>, <class 'numpy.int64'>, 'non_monotonic')\r\n-        78.6±2ms      3.45±0.05ms     0.04  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'int', 'min')\r\n-        83.3±3ms      3.62±0.03ms     0.04  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'int', 'min')\r\n-         483±7ms       21.0±0.6ms     0.04  multiindex_object.GetLoc.time_large_get_loc_warm\r\n-        9.13±5ms          393±4μs     0.04  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Int64Engine'>, <class 'numpy.uint64'>, 'monotonic_decr')\r\n-      8.48±0.3μs          363±4ns     0.04  timestamp.TimestampProperties.time_is_month_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      80.3±0.7ms       3.43±0.2ms     0.04  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'int', 'max')\r\n-      5.96±0.1ms          252±8μs     0.04  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n-        9.68±6ms         400±20μs     0.04  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Int64Engine'>, <class 'numpy.uint64'>, 'non_monotonic')\r\n-      6.26±0.3ms          254±2μs     0.04  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n-        9.90±5ms         397±10μs     0.04  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.UInt64Engine'>, <class 'numpy.int64'>, 'monotonic_decr')\r\n-      8.76±0.2μs          348±7ns     0.04  timestamp.TimestampProperties.time_is_month_end(None, None)\r\n-      8.21±0.2μs          324±8ns     0.04  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      8.21±0.2μs         319±20ns     0.04  timestamp.TimestampProperties.time_days_in_month(None, None)\r\n-       71.8±30ms       2.77±0.7ms     0.04  indexing.NumericSeriesIndexing.time_getitem_scalar(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-      8.16±0.2μs         307±20ns     0.04  timestamp.TimestampProperties.time_dayofyear(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-      8.37±0.3μs         314±10ns     0.04  timestamp.TimestampProperties.time_week(None, 'B')\r\n-      8.43±0.2μs         316±30ns     0.04  timestamp.TimestampProperties.time_dayofyear(None, None)\r\n-      8.33±0.3μs          312±9ns     0.04  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-      8.40±0.2μs         310±30ns     0.04  timestamp.TimestampProperties.time_dayofyear(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      8.25±0.2μs          302±8ns     0.04  timestamp.TimestampProperties.time_dayofyear(None, 'B')\r\n-     8.28±0.08μs          301±7ns     0.04  timestamp.TimestampProperties.time_week(None, None)\r\n-      8.30±0.2μs          298±9ns     0.04  timestamp.TimestampProperties.time_days_in_month(None, 'B')\r\n-      8.36±0.3μs         292±10ns     0.03  timestamp.TimestampProperties.time_days_in_month(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      8.22±0.2μs          283±1ns     0.03  timestamp.TimestampProperties.time_days_in_month(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-      8.43±0.2μs         283±10ns     0.03  timestamp.TimestampProperties.time_is_quarter_end(None, None)\r\n-        15.6±9ms         524±70μs     0.03  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Float64Engine'>, <class 'numpy.uint64'>, 'monotonic_decr')\r\n-      8.26±0.2μs         266±20ns     0.03  timestamp.TimestampProperties.time_quarter(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-      8.39±0.2μs         268±10ns     0.03  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      8.34±0.3μs          264±3ns     0.03  timestamp.TimestampProperties.time_quarter(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-       94.0±40ms       2.96±0.7ms     0.03  indexing.NumericSeriesIndexing.time_ix_slice(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-      8.59±0.1μs          270±4ns     0.03  timestamp.TimestampProperties.time_is_year_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      8.47±0.2μs          264±5ns     0.03  timestamp.TimestampProperties.time_is_month_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      8.70±0.2μs          270±7ns     0.03  timestamp.TimestampProperties.time_is_leap_year(None, None)\r\n-      8.23±0.1μs          254±3ns     0.03  timestamp.TimestampProperties.time_quarter(None, 'B')\r\n-      8.59±0.1μs          264±4ns     0.03  timestamp.TimestampProperties.time_is_year_start(None, None)\r\n-      8.67±0.2μs          266±2ns     0.03  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      8.75±0.2μs          266±6ns     0.03  timestamp.TimestampProperties.time_is_month_start(None, None)\r\n-      8.61±0.2μs         261±10ns     0.03  timestamp.TimestampProperties.time_is_quarter_start(None, None)\r\n-      8.70±0.4μs        259±0.6ns     0.03  timestamp.TimestampProperties.time_is_year_end(None, None)\r\n-      8.78±0.2μs        261±0.6ns     0.03  timestamp.TimestampProperties.time_is_quarter_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-      8.60±0.2μs        255±0.7ns     0.03  timestamp.TimestampProperties.time_quarter(None, None)\r\n-       86.1±30ms       2.55±0.8ms     0.03  indexing.NumericSeriesIndexing.time_ix_scalar(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-      8.84±0.3μs          261±1ns     0.03  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-       18.0±10ms         524±10μs     0.03  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Float64Engine'>, <class 'numpy.uint64'>, 'non_monotonic')\r\n-       93.1±40ms       2.70±0.8ms     0.03  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-        8.51±5ms         246±10μs     0.03  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.UInt64Engine'>, <class 'numpy.uint64'>, 'non_monotonic')\r\n-        8.66±5ms         250±10μs     0.03  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.UInt64Engine'>, <class 'numpy.uint64'>, 'monotonic_decr')\r\n-        8.89±5ms         252±20μs     0.03  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Int64Engine'>, <class 'numpy.int64'>, 'non_monotonic')\r\n-        15.6±9ms         437±20μs     0.03  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Float64Engine'>, <class 'numpy.int64'>, 'monotonic_decr')\r\n-        9.28±5ms          244±2μs     0.03  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Int64Engine'>, <class 'numpy.int64'>, 'monotonic_decr')\r\n-      27.3±0.6ms         713±10μs     0.03  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n-       17.8±10ms         431±30μs     0.02  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Float64Engine'>, <class 'numpy.int64'>, 'non_monotonic')\r\n-        118±60ms       2.85±0.8ms     0.02  indexing.NumericSeriesIndexing.time_loc_slice(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-      32.3±0.5ms          708±8μs     0.02  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n-      32.9±0.5ms          706±1μs     0.02  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n-       2.04±0.1s         40.3±3ms     0.02  stat_ops.FrameOps.time_op('median', 'float', 1, True)\r\n-       2.02±0.1s         38.7±2ms     0.02  stat_ops.FrameOps.time_op('median', 'float', 1, False)\r\n-        37.4±1ms         702±10μs     0.02  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n-        37.0±2ms          692±6μs     0.02  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n-      1.99±0.09s       36.6±0.5ms     0.02  stat_ops.FrameOps.time_op('median', 'int', 1, True)\r\n-       2.00±0.1s       36.7±0.4ms     0.02  stat_ops.FrameOps.time_op('median', 'int', 1, False)\r\n-        15.8±9ms          258±6μs     0.02  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Float64Engine'>, <class 'numpy.float64'>, 'monotonic_decr')\r\n-       17.0±10ms          252±6μs     0.01  indexing_engines.NumericEngineIndexing.time_get_loc(<class 'pandas._libs.index.Float64Engine'>, <class 'numpy.float64'>, 'non_monotonic')\r\n-        60.0±1ms          712±3μs     0.01  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n-        72.8±2ms         817±60μs     0.01  groupby.GroupByMethods.time_dtype_as_field('float', 'rank', 'transformation')\r\n-       69.1±20ms         753±60μs     0.01  indexing.NumericSeriesIndexing.time_ix_array(<class 'pandas.core.indexes.numeric.Int64Index'>, 'unique_monotonic_inc')\r\n-        46.8±2ms          510±8μs     0.01  offset.ApplyIndex.time_apply_index(<QuarterEnd: startingMonth=3>)\r\n-        73.8±4ms          797±9μs     0.01  groupby.GroupByMethods.time_dtype_as_field('float', 'rank', 'direct')\r\n-         176±9ms      1.87±0.02ms     0.01  index_object.Indexing.time_get_loc_non_unique_sorted('Float')\r\n-        52.9±3ms         542±70μs     0.01  offset.ApplyIndex.time_apply_index(<YearEnd: month=12>)\r\n-        77.7±7ms         795±60μs     0.01  groupby.GroupByMethods.time_dtype_as_field('int', 'rank', 'direct')\r\n-        176±20ms      1.75±0.06ms     0.01  index_object.Indexing.time_get_loc_non_unique('Float')\r\n-        79.2±8ms          769±9μs     0.01  groupby.GroupByMethods.time_dtype_as_field('int', 'rank', 'transformation')\r\n-       2.01±0.2s         19.4±7ms     0.01  rolling.Pairwise.time_pairwise(1000, 'cov', True)\r\n-        27.8±1ms          261±2μs     0.01  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n-        21.7±1μs          202±3ns     0.01  timedelta.DatetimeAccessor.time_dt_accessor\r\n-       83.1±30ms         750±30μs     0.01  indexing.NumericSeriesIndexing.time_ix_array(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'unique_monotonic_inc')\r\n-       76.7±30ms         657±20μs     0.01  indexing.NumericSeriesIndexing.time_loc_array(<class 'pandas.core.indexes.numeric.Int64Index'>, 'unique_monotonic_inc')\r\n-       2.01±0.2s         16.7±7ms     0.01  rolling.Pairwise.time_pairwise(None, 'corr', True)\r\n-      1.97±0.08s         16.4±3ms     0.01  rolling.Pairwise.time_pairwise(10, 'corr', True)\r\n-       2.21±0.3s         17.2±5ms     0.01  rolling.Pairwise.time_pairwise(1000, 'corr', True)\r\n-      1.87±0.05s         14.6±2ms     0.01  rolling.Pairwise.time_pairwise(10, 'cov', True)\r\n-        116±40ms         900±60μs     0.01  groupby.GroupByMethods.time_dtype_as_group('int', 'rank', 'transformation')\r\n-      31.8±0.9μs          244±3ns     0.01  categoricals.IsMonotonic.time_categorical_index_is_monotonic_increasing\r\n-        32.3±1μs         246±10ns     0.01  categoricals.IsMonotonic.time_categorical_index_is_monotonic_decreasing\r\n-         104±3ms         773±30μs     0.01  groupby.GroupByMethods.time_dtype_as_field('datetime', 'rank', 'direct')\r\n-      1.91±0.04s         14.1±4ms     0.01  rolling.Pairwise.time_pairwise(None, 'cov', True)\r\n-        35.3±2ms        257±0.8μs     0.01  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n-        115±20ms         835±30μs     0.01  groupby.GroupByMethods.time_dtype_as_group('int', 'rank', 'direct')\r\n-        35.5±1ms          253±1μs     0.01  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n-        35.9±1ms         255±20μs     0.01  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n-        36.1±1ms          255±6μs     0.01  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n-        295±30ms      2.03±0.04ms     0.01  multiindex_object.Integer.time_get_indexer\r\n-      18.5±0.9μs          119±2ns     0.01  timeseries.DatetimeAccessor.time_dt_accessor\r\n-        123±30ms         777±60μs     0.01  groupby.GroupByMethods.time_dtype_as_field('datetime', 'rank', 'transformation')\r\n-       76.2±30ms         446±40μs     0.01  indexing.NumericSeriesIndexing.time_ix_list_like(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'unique_monotonic_inc')\r\n-     1.91±0.03ms       11.1±0.5μs     0.01  categoricals.Contains.time_categorical_contains\r\n-         266±9ms      1.49±0.01ms     0.01  index_object.Indexing.time_get_loc_non_unique_sorted('Int')\r\n-        275±10ms      1.52±0.09ms     0.01  index_object.Indexing.time_get_loc_non_unique('Int')\r\n-        136±90ms         671±50μs     0.00  indexing.NumericSeriesIndexing.time_getitem_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-     2.19±0.08ms       10.6±0.2μs     0.00  offset.OnOffset.time_on_offset(<BusinessYearEnd: month=12>)\r\n-        60.2±5ms         276±30μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'bfill', 'transformation')\r\n-      58.0±0.8ms          264±1μs     0.00  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n-     1.34±0.01ms       6.07±0.1μs     0.00  offset.OnOffset.time_on_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n-         175±7ms          767±5μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'rank', 'direct')\r\n-        61.5±3ms         263±20μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'bfill', 'direct')\r\n-        185±30ms         790±40μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'rank', 'direct')\r\n-        181±10ms         773±20μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'rank', 'transformation')\r\n-         182±9ms          766±2μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'rank', 'transformation')\r\n-     1.62±0.09ms       6.81±0.1μs     0.00  offset.OnOffset.time_on_offset(<BusinessMonthEnd>)\r\n-        63.3±3ms          264±9μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'ffill', 'transformation')\r\n-     1.36±0.05ms      5.66±0.08μs     0.00  offset.OnOffset.time_on_offset(<QuarterBegin: startingMonth=3>)\r\n-        162±70ms         651±70μs     0.00  indexing.NumericSeriesIndexing.time_getitem_list_like(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-       67.4±20ms          256±7μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'ffill', 'direct')\r\n-     1.68±0.05ms      6.18±0.09μs     0.00  offset.OnOffset.time_on_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n-        88.6±4ms          284±7μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'ffill', 'transformation')\r\n-        90.2±9ms         288±20μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'bfill', 'transformation')\r\n-        88.5±3ms         268±20μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'bfill', 'direct')\r\n-        91.0±5ms         272±20μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'ffill', 'direct')\r\n-        159±60ms         459±30μs     0.00  indexing.NumericSeriesIndexing.time_ix_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        154±70ms         442±10μs     0.00  indexing.NumericSeriesIndexing.time_ix_list_like(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-        157±60ms         434±20μs     0.00  indexing.NumericSeriesIndexing.time_ix_list_like(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-       265±100ms         692±60μs     0.00  indexing.NumericSeriesIndexing.time_getitem_list_like(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-     1.54±0.03ms      3.87±0.06μs     0.00  offset.OnOffset.time_on_offset(<BusinessYearBegin: month=1>)\r\n-      1.72±0.03s       4.19±0.7ms     0.00  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'min')\r\n-        158±70ms         369±10μs     0.00  indexing.NumericSeriesIndexing.time_loc_list_like(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-        62.2±3ms          143±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'all', 'direct')\r\n-        62.7±3ms          137±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'any', 'direct')\r\n-        64.1±2ms          139±3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'all', 'transformation')\r\n-      1.67±0.04s       3.60±0.5ms     0.00  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'min')\r\n-         1.68±0s      3.59±0.03ms     0.00  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'max')\r\n-        272±20ms          577±5μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'pct_change', 'transformation')\r\n-      1.69±0.01s      3.58±0.04ms     0.00  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'min')\r\n-        63.6±4ms          133±1μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'any', 'transformation')\r\n-      1.67±0.07s       3.52±0.3ms     0.00  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'max')\r\n-      1.71±0.02s      3.58±0.05ms     0.00  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'max')\r\n-      1.67±0.07s       3.46±0.1ms     0.00  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'min')\r\n-         107±2ms         217±30μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'bfill', 'direct')\r\n-      1.68±0.05s      3.40±0.03ms     0.00  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'max')\r\n-        282±50ms          569±4μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'pct_change', 'direct')\r\n-         109±7ms          216±6μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'bfill', 'transformation')\r\n-         301±9ms         585±30μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'pct_change', 'transformation')\r\n-         108±6ms        207±0.7μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'ffill', 'transformation')\r\n-         142±6ms          263±5μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'ffill', 'transformation')\r\n-        114±10ms          209±3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'ffill', 'direct')\r\n-         145±8ms          263±7μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'ffill', 'direct')\r\n-         168±5ms          301±6μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'ffill', 'direct')\r\n-         168±4ms          296±6μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'bfill', 'transformation')\r\n-         143±8ms          250±5μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'bfill', 'transformation')\r\n-         171±8ms          296±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'bfill', 'direct')\r\n-         651±3ms      1.13±0.01ms     0.00  timedelta.DatetimeAccessor.time_timedelta_nanoseconds\r\n-       239±100ms         410±10μs     0.00  indexing.NumericSeriesIndexing.time_loc_list_like(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'nonunique_monotonic_inc')\r\n-        668±10ms      1.14±0.01ms     0.00  timedelta.DatetimeAccessor.time_timedelta_seconds\r\n-        660±10ms      1.12±0.01ms     0.00  timedelta.DatetimeAccessor.time_timedelta_microseconds\r\n-       81.3±30ms          138±6μs     0.00  indexing.NumericSeriesIndexing.time_ix_slice(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        665±40ms      1.12±0.01ms     0.00  timedelta.DatetimeAccessor.time_timedelta_days\r\n-        176±30ms          296±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('object', 'ffill', 'transformation')\r\n-         145±9ms          239±8μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'bfill', 'direct')\r\n-       351±100ms         563±20μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'pct_change', 'direct')\r\n-        393±30ms         612±20μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'pct_change', 'transformation')\r\n-        51.2±2ms         79.4±3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'all', 'transformation')\r\n-       246±100ms         378±20μs     0.00  indexing.NumericSeriesIndexing.time_loc_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        50.6±1ms         75.6±3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'any', 'transformation')\r\n-        50.6±1ms         74.2±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'any', 'direct')\r\n-        412±50ms         596±20μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'pct_change', 'direct')\r\n-        52.5±2ms         75.1±2μs     0.00  groupby.GroupByMethods.time_dtype_as_field('float', 'all', 'direct')\r\n-        51.7±2ms         72.8±6μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'any', 'transformation')\r\n-        160±10ms         225±10μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'bfill', 'direct')\r\n-         159±6ms         223±10μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'ffill', 'transformation')\r\n-        165±10ms          229±3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'ffill', 'direct')\r\n-       86.7±30ms          119±5μs     0.00  indexing.NumericSeriesIndexing.time_ix_slice(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-       59.9±20ms        81.8±10μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'any', 'direct')\r\n-        52.9±4ms         71.8±5μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'all', 'direct')\r\n-        52.7±2ms         70.7±4μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'all', 'transformation')\r\n-       80.4±40ms          107±5μs     0.00  indexing.NumericSeriesIndexing.time_loc_slice(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        179±30ms         234±20μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'bfill', 'transformation')\r\n-        56.8±3ms         73.4±3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'any', 'transformation')\r\n-       58.6±10ms         73.6±4μs     0.00  groupby.GroupByMethods.time_dtype_as_field('int', 'any', 'direct')\r\n-        57.7±2ms         71.0±4μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'all', 'transformation')\r\n-        56.8±3ms         68.2±3μs     0.00  groupby.GroupByMethods.time_dtype_as_field('datetime', 'all', 'direct')\r\n-         139±1ms          160±4μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'bfill', 'direct')\r\n-         139±5ms          158±6μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'ffill', 'direct')\r\n-     1.92±0.04ms       2.16±0.4μs     0.00  categoricals.Contains.time_categorical_index_contains\r\n-         143±4ms          160±3μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'bfill', 'transformation')\r\n-         140±3ms          157±7μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'ffill', 'transformation')\r\n-        616±30ms         666±50μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'pct_change', 'transformation')\r\n-       76.5±30ms         81.3±2μs     0.00  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.UInt64Index'>, 'unique_monotonic_inc')\r\n-        76.1±7ms         79.9±4μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'all', 'transformation')\r\n-        77.1±2ms         77.7±3μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'all', 'direct')\r\n-        76.3±5ms         74.7±7μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'any', 'transformation')\r\n-       89.4±40ms         85.3±3μs     0.00  indexing.NumericSeriesIndexing.time_getitem_slice(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-        673±90ms         634±50μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'pct_change', 'direct')\r\n-       91.8±30ms         79.7±2μs     0.00  indexing.NumericSeriesIndexing.time_ix_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-       77.4±30ms         64.3±1μs     0.00  indexing.NumericSeriesIndexing.time_ix_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-       85.2±10ms         69.6±5μs     0.00  groupby.GroupByMethods.time_dtype_as_group('int', 'any', 'direct')\r\n-        118±70ms         83.2±6μs     0.00  indexing.NumericSeriesIndexing.time_loc_slice(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-         120±5ms         75.1±2μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'all', 'direct')\r\n-         118±3ms       69.3±0.3μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'any', 'transformation')\r\n-        123±10ms         72.6±2μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'any', 'transformation')\r\n-         117±5ms       68.8±0.3μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'all', 'transformation')\r\n-         122±6ms         71.0±2μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'all', 'transformation')\r\n-         117±2ms         68.2±1μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'all', 'direct')\r\n-       94.3±50ms         54.7±2μs     0.00  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-         119±3ms       68.6±0.3μs     0.00  groupby.GroupByMethods.time_dtype_as_group('datetime', 'any', 'direct')\r\n-        129±30ms         73.9±4μs     0.00  groupby.GroupByMethods.time_dtype_as_group('float', 'any', 'direct')\r\n-       79.6±30ms         41.6±1μs     0.00  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-       93.6±50ms         39.8±1μs     0.00  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>, 'unique_monotonic_inc')\r\n-      1.65±0.05s        544±300μs     0.00  series_methods.IsInForObjects.time_isin_nans\r\n-       88.2±40ms       22.7±0.9μs     0.00  indexing.NumericSeriesIndexing.time_getitem_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n-        298±40ms         20.5±1μs     0.00  multiindex_object.GetLoc.time_large_get_loc\r\n-      1.00±0.02s       2.51±0.4μs     0.00  series_methods.SeriesGetattr.time_series_datetimeindex_repr\r\n```\r\n\r\n</details>"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433030585",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-433030585",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 433030585,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzAzMDU4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-25T12:26:52Z",
    "updated_at": "2018-10-25T12:26:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Short update, seems like we do *not* have data for this time period on the\nbenchmark machine. At some point, the environment became corrupted,\nso that pandas failed to build. However, the Airflow process running these\ndidn't fail, so I didn't notice.\n\nI've purged that env, and am re-running the benchmarks from the last few\ncommits. Those should finish in a few hours. I'll try to manually kick\nof some runs for older commits, to fill in the gaps.\n\nOn Wed, Oct 24, 2018 at 7:25 PM Matthew Roeschke <notifications@github.com>\nwrote:\n\n> Here's the second run for the interested:\n>\n> At a high level there's consistency between runs.\n>\n> Regressions\n>\n> +       55.9±10μs       1.52±0.04s 27224.82  indexing.IntervalIndexing.time_loc_list\n> +       85.7±20μs        1.57±0.2s 18312.55  indexing.IntervalIndexing.time_getitem_list\n> +      14.9±0.2μs      1.36±0.03ms    91.71  categoricals.CategoricalSlicing.time_getitem_bool_array('monotonic_decr')\n> +        36.0±1ms       2.06±0.01s    57.32  offset.ApplyIndex.time_apply_index(<BusinessDay>)\n> +         449±4ns       25.2±0.6μs    56.03  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\n> +         455±6ns         25.4±2μs    55.83  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\n> +        24.3±1ms        1.35±0.5s    55.59  period.DataFramePeriodColumn.time_setitem_period_column\n> +      39.1±0.8ms       2.07±0.07s    52.89  offset.ApplyIndex.time_apply_index(<SemiMonthBegin: day_of_month=15>)\n> +        39.5±1ms       2.05±0.04s    51.94  offset.ApplyIndex.time_apply_index(<SemiMonthEnd: day_of_month=15>)\n> +     4.87±0.07ms         208±10ms    42.66  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessDay>)\n> +      5.27±0.2ms         207±10ms    39.38  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\n> +      5.43±0.1ms         209±10ms    38.40  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<SemiMonthEnd: day_of_month=15>)\n> +      5.61±0.1ms          210±6ms    37.39  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessDay>)\n> +      15.4±0.4ms         549±20ms    35.71  timeseries.Iteration.time_iter_preexit(<function period_range at 0x11284df28>)\n> +      6.35±0.2ms         217±10ms    34.12  offset.OffsetSeriesArithmetic.time_add_offset(<SemiMonthEnd: day_of_month=15>)\n> +      6.33±0.2ms         213±10ms    33.64  offset.OffsetSeriesArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\n> +         389±7ns       12.9±0.8μs    33.27  indexing.MethodLookup.time_lookup_ix\n> +     3.73±0.09ms          113±5ms    30.40  period.PeriodIndexConstructor.time_from_pydatetime('D')\n> +     1.78±0.04ms         54.0±2ms    30.28  indexing.CategoricalIndexIndexing.time_get_indexer_list('monotonic_decr')\n> +         453±8ns       9.84±0.7μs    21.72  timestamp.TimestampProperties.time_weekday_name(None, 'B')\n> +         447±8ns      8.54±0.04μs    19.09  timestamp.TimestampProperties.time_weekday_name(None, None)\n> +      5.25±0.1ms       99.7±0.9ms    18.99  timeseries.DatetimeIndex.time_timeseries_is_month_start('tz_aware')\n> +     9.48±0.08ms          175±2ms    18.50  multiindex_object.Values.time_datetime_level_values_copy\n> +      7.32±0.3μs          120±4μs    16.40  period.Indexing.time_get_loc\n> +     6.64±0.07μs         69.0±1μs    10.39  period.Indexing.time_shallow_copy\n> +      7.54±0.5ms        76.5±10ms    10.14  frame_methods.Repr.time_frame_repr_wide\n> +        78.8±7ms         696±10ms     8.83  plotting.TimeseriesPlotting.time_plot_regular\n> +      23.4±0.6ms          191±3ms     8.16  binary_ops.Ops2.time_frame_float_floor_by_zero\n> +      7.71±0.1μs         60.1±5μs     7.80  index_object.Indexing.time_slice('Int')\n> +      7.81±0.3μs         60.9±2μs     7.79  index_object.Indexing.time_slice_step('Int')\n> +       83.5±20μs         587±20μs     7.03  groupby.GroupByMethods.time_dtype_as_field('float', 'cummin', 'transformation')\n> +        82.7±4μs         580±50μs     7.01  groupby.GroupByMethods.time_dtype_as_field('datetime', 'cummin', 'transformation')\n> +        83.2±4μs         580±40μs     6.97  groupby.GroupByMethods.time_dtype_as_field('datetime', 'cummin', 'direct')\n> +       87.5±10μs         588±30μs     6.72  groupby.GroupByMethods.time_dtype_as_field('float', 'cummax', 'transformation')\n> +      19.5±0.4μs        130±0.9μs     6.66  period.PeriodUnaryMethods.time_now('M')\n> +       84.4±10μs         559±20μs     6.62  groupby.GroupByMethods.time_dtype_as_field('float', 'cummin', 'direct')\n> +        85.7±9μs         567±30μs     6.62  groupby.GroupByMethods.time_dtype_as_field('float', 'cummax', 'direct')\n> +       92.4±10μs         572±20μs     6.20  groupby.GroupByMethods.time_dtype_as_field('float', 'cumprod', 'direct')\n> +      18.6±0.4ms          114±9ms     6.10  frame_methods.Dropna.time_dropna('any', 1)\n> +      18.2±0.3ms          107±3ms     5.85  frame_methods.Dropna.time_dropna('any', 0)\n> +       99.3±30μs         573±20μs     5.77  groupby.GroupByMethods.time_dtype_as_field('float', 'cumprod', 'transformation')\n> +        97.4±6μs         559±20μs     5.74  groupby.GroupByMethods.time_dtype_as_field('float', 'cumsum', 'direct')\n> +        96.6±5μs         546±70μs     5.65  groupby.GroupByMethods.time_dtype_as_field('float', 'cumsum', 'transformation')\n> +         116±5μs         636±90μs     5.48  groupby.GroupByMethods.time_dtype_as_group('float', 'cummin', 'transformation')\n> +      33.4±0.6μs          182±1μs     5.43  period.PeriodUnaryMethods.time_asfreq('M')\n> +         122±5μs         660±50μs     5.39  groupby.GroupByMethods.time_dtype_as_group('int', 'cummax', 'direct')\n> +      34.0±0.6μs          180±1μs     5.31  period.PeriodUnaryMethods.time_asfreq('min')\n> +        125±10μs         660±30μs     5.27  groupby.GroupByMethods.time_dtype_as_group('int', 'cummin', 'direct')\n> +        128±10μs         672±30μs     5.26  groupby.GroupByMethods.time_dtype_as_field('int', 'cummax', 'transformation')\n> +      69.7±0.6μs         358±10μs     5.14  period.PeriodProperties.time_property('min', 'end_time')\n> +        121±20μs         622±30μs     5.14  groupby.GroupByMethods.time_dtype_as_group('int', 'cummin', 'transformation')\n> +         111±2μs          571±4μs     5.13  groupby.GroupByMethods.time_dtype_as_group('datetime', 'cummin', 'direct')\n> +         125±7μs         635±20μs     5.10  groupby.GroupByMethods.time_dtype_as_group('int', 'cummax', 'transformation')\n> +         127±5μs         646±30μs     5.09  groupby.GroupByMethods.time_dtype_as_field('int', 'cummax', 'direct')\n> +         112±4μs          571±3μs     5.09  groupby.GroupByMethods.time_dtype_as_group('datetime', 'cummin', 'transformation')\n> +        118±30μs         596±20μs     5.03  groupby.GroupByMethods.time_dtype_as_group('float', 'cummax', 'direct')\n> +         123±5μs         614±50μs     5.01  groupby.GroupByMethods.time_dtype_as_field('int', 'cummin', 'transformation')\n> +        117±10μs         581±10μs     4.96  groupby.GroupByMethods.time_dtype_as_group('float', 'cummin', 'direct')\n> +        71.6±8μs          348±2μs     4.87  period.PeriodProperties.time_property('M', 'end_time')\n> +      3.55±0.2μs         17.2±1μs     4.85  indexing.DataFrameStringIndexing.time_ix\n> +        128±10μs         620±10μs     4.84  groupby.GroupByMethods.time_dtype_as_field('int', 'cummin', 'direct')\n> +        142±10μs         687±60μs     4.83  groupby.GroupByMethods.time_dtype_as_group('float', 'cumsum', 'direct')\n> +         137±8μs         655±60μs     4.79  groupby.GroupByMethods.time_dtype_as_field('int', 'cumsum', 'transformation')\n> +      33.5±0.5ms          158±2ms     4.73  eval.Eval.time_and('python', 1)\n> +        124±20μs         580±10μs     4.68  groupby.GroupByMethods.time_dtype_as_group('float', 'cummax', 'transformation')\n> +        140±20μs         632±20μs     4.52  groupby.GroupByMethods.time_dtype_as_field('int', 'cumsum', 'direct')\n> +        135±10μs         608±10μs     4.50  groupby.GroupByMethods.time_dtype_as_group('int', 'cumsum', 'direct')\n> +        140±10μs          628±7μs     4.50  groupby.GroupByMethods.time_dtype_as_group('int', 'cumsum', 'transformation')\n> +        141±10μs         627±20μs     4.44  groupby.GroupByMethods.time_dtype_as_group('float', 'cumsum', 'transformation')\n> +        42.1±3ms          162±3ms     3.84  eval.Eval.time_and('python', 'all')\n> +        37.6±1ms          144±9ms     3.84  frame_methods.Dropna.time_dropna('all', 0)\n> +        64.7±1μs          237±1μs     3.66  period.PeriodUnaryMethods.time_to_timestamp('M')\n> +        70.0±3μs         255±20μs     3.63  period.PeriodProperties.time_property('min', 'start_time')\n> +        65.0±1μs        236±0.8μs     3.63  period.PeriodUnaryMethods.time_to_timestamp('min')\n> +        41.8±2ms          151±7ms     3.61  frame_methods.Dropna.time_dropna('all', 1)\n> +        65.4±1μs          235±1μs     3.59  period.PeriodProperties.time_property('M', 'start_time')\n> +        54.1±1μs         188±20μs     3.47  period.Indexing.time_unique\n> +         109±4ms         369±10ms     3.38  groupby.Groups.time_series_groups('int64_large')\n> +     3.52±0.07μs       11.6±0.3μs     3.28  multiindex_object.GetLoc.time_med_get_loc\n> +        252±20μs         823±50μs     3.27  groupby.GroupByMethods.time_dtype_as_field('int', 'cumprod', 'direct')\n> +        266±30μs        850±100μs     3.20  groupby.GroupByMethods.time_dtype_as_group('float', 'cumprod', 'direct')\n> +      3.57±0.3μs       11.2±0.3μs     3.14  multiindex_object.GetLoc.time_string_get_loc\n> +      57.4±0.6μs          179±9μs     3.12  period.PeriodUnaryMethods.time_now('min')\n> +      3.58±0.1ms       11.1±0.1ms     3.11  multiindex_object.GetLoc.time_med_get_loc_warm\n> +        95.4±8μs         295±30μs     3.09  period.Algorithms.time_drop_duplicates('index')\n> +      29.8±0.4ms         91.4±3ms     3.06  binary_ops.Ops.time_frame_multi_and(False, 'default')\n> +      30.4±0.6ms         92.9±2ms     3.06  binary_ops.Ops.time_frame_multi_and(False, 1)\n> +      5.82±0.1ms       17.6±0.4ms     3.02  frame_methods.Equals.time_frame_nonunique_unequal\n> +         112±2μs         336±20μs     3.00  period.PeriodIndexConstructor.time_from_date_range('D')\n> +        49.3±3μs         148±40μs     3.00  groupby.GroupByMethods.time_dtype_as_field('float', 'size', 'direct')\n> +        260±20μs         776±40μs     2.98  groupby.GroupByMethods.time_dtype_as_group('int', 'cumprod', 'transformation')\n> +      9.25±0.2μs       27.5±0.6μs     2.97  timestamp.TimestampProperties.time_is_month_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\n> +     5.75±0.08ms       17.0±0.1ms     2.96  frame_methods.Equals.time_frame_nonunique_equal\n> +        51.1±2μs         148±30μs     2.90  groupby.GroupByMethods.time_dtype_as_field('float', 'size', 'transformation')\n> +        259±30μs         751±50μs     2.89  groupby.GroupByMethods.time_dtype_as_field('int', 'cumprod', 'transformation')\n> +        279±30μs         807±10μs     2.89  groupby.GroupByMethods.time_dtype_as_group('int', 'cumprod', 'direct')\n> +      33.7±0.7ms        96.5±40ms     2.87  binary_ops.Ops.time_frame_multi_and(True, 1)\n> +         154±5ms         440±30ms     2.85  groupby.Groups.time_series_groups('object_large')\n> +         145±5μs          411±3μs     2.84  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x113681950>, False)\n> +        22.9±1ms         65.0±2ms     2.84  groupby.ApplyDictReturn.time_groupby_apply_dict_return\n> +         158±5μs         448±20μs     2.83  period.Indexing.time_intersection\n> +      9.59±0.3μs         27.2±3μs     2.83  timestamp.TimestampProperties.time_is_month_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\n> +         147±5μs          413±6μs     2.82  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c0840>, False)\n> +        57.6±6ms         161±20ms     2.79  groupby.GroupByMethods.time_dtype_as_field('float', 'unique', 'direct')\n> +         157±5μs          439±5μs     2.79  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x113681950>, True)\n> +      9.60±0.2μs      26.3±0.09μs     2.74  timestamp.TimestampProperties.time_is_year_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\n> +      9.73±0.2μs       26.7±0.4μs     2.74  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\n> +        160±10μs          438±7μs     2.74  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c0840>, True)\n> +         151±9μs          413±6μs     2.73  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c07b8>, False)\n> +         151±9μs         412±20μs     2.73  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c08c8>, False)\n> +        355±10μs         966±90μs     2.72  period.Algorithms.time_value_counts('index')\n> +         164±7μs          445±8μs     2.71  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c07b8>, True)\n> +      10.0±0.2μs       27.0±0.6μs     2.69  timestamp.TimestampProperties.time_is_quarter_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\n> +        163±20μs         439±20μs     2.69  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136c08c8>, True)\n> +      9.74±0.3μs       26.1±0.1μs     2.68  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\n> +        57.5±2μs          154±5μs     2.68  period.Indexing.time_series_loc\n> +     9.88±0.09μs       26.3±0.1μs     2.66  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\n> +      6.91±0.3μs       18.0±0.3μs     2.61  timestamp.TimestampAcrossDst.time_replace_across_dst\n> +        58.7±4ms         152±10ms     2.59  groupby.GroupByMethods.time_dtype_as_field('float', 'unique', 'transformation')\n> +        82.5±4ms          210±9ms     2.55  groupby.GroupByMethods.time_dtype_as_group('int', 'unique', 'transformation')\n> +      39.2±0.4ms         99.5±2ms     2.54  binary_ops.Ops.time_frame_multi_and(True, 'default')\n> +        288±30μs          730±9μs     2.54  groupby.GroupByMethods.time_dtype_as_group('float', 'cumprod', 'transformation')\n> +      1.22±0.1ms       3.07±0.2ms     2.52  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(False, 'iso8601')\n> +        803±50μs      2.00±0.03ms     2.49  io.csv.ReadCSVParseDates.time_multiple_date\n> +        82.2±5ms          204±8ms     2.48  groupby.GroupByMethods.time_dtype_as_group('int', 'unique', 'direct')\n> +        73.7±2ms         180±20ms     2.45  groupby.GroupByMethods.time_dtype_as_field('object', 'unique', 'direct')\n> +         102±5ms          249±6ms     2.44  reshape.WideToLong.time_wide_to_long_big\n> +      4.70±0.6ms       11.4±0.1ms     2.44  multiindex_object.GetLoc.time_small_get_loc_warm\n> +        50.5±5ms          123±7ms     2.43  join_merge.MergeAsof.time_by_int\n> +      38.9±0.5ms         94.4±2ms     2.43  frame_methods.Interpolate.time_interpolate(None)\n> +        72.3±4ms         175±20ms     2.42  groupby.GroupByMethods.time_dtype_as_field('datetime', 'unique', 'direct')\n> +        129±10ms          309±2ms     2.39  groupby.GroupByMethods.time_dtype_as_group('datetime', 'unique', 'direct')\n> +     1.98±0.03ms       4.72±0.3ms     2.38  binary_ops.Timeseries.time_series_timestamp_compare(None)\n> +      8.43±0.4μs       19.9±0.4μs     2.36  timestamp.TimestampOps.time_replace_tz(None)\n> +        131±10ms        308±0.9ms     2.34  groupby.GroupByMethods.time_dtype_as_group('float', 'unique', 'direct')\n> +      8.30±0.3μs       19.3±0.5μs     2.33  ctors.SeriesDtypesConstructors.time_dtindex_from_series\n> +     1.97±0.02ms      4.57±0.01ms     2.32  binary_ops.Timeseries.time_timestamp_series_compare(None)\n> +        58.6±6ms          134±3ms     2.29  groupby.GroupByMethods.time_dtype_as_field('int', 'unique', 'direct')\n> +        58.1±4ms          133±2ms     2.29  groupby.GroupByMethods.time_dtype_as_field('int', 'unique', 'transformation')\n> +        66.5±3μs         152±20μs     2.28  groupby.GroupByMethods.time_dtype_as_group('float', 'count', 'transformation')\n> +        136±10ms          309±1ms     2.28  groupby.GroupByMethods.time_dtype_as_group('datetime', 'unique', 'transformation')\n> +        845±20μs       1.91±0.2ms     2.26  indexing.NonNumericSeriesIndexing.time_getitem_list_like('datetime', 'unique_monotonic_inc')\n> +      74.4±0.6ms         167±10ms     2.25  groupby.GroupByMethods.time_dtype_as_field('object', 'unique', 'transformation')\n> +        70.5±2ms         157±10ms     2.23  groupby.GroupByMethods.time_dtype_as_field('datetime', 'unique', 'transformation')\n> +        89.2±8ms         196±50ms     2.20  groupby.GroupByMethods.time_dtype_as_field('float', 'skew', 'direct')\n> +      14.2±0.3μs       31.1±0.7μs     2.20  timestamp.TimestampOps.time_replace_tz('US/Eastern')\n> +       2.29±0.2s        4.98±0.4s     2.17  replace.ReplaceDict.time_replace_series(False)\n> +         178±2μs          386±5μs     2.17  multiindex_object.Values.time_datetime_level_values_sliced\n> +     1.75±0.02ms       3.74±0.9ms     2.14  reshape.SimpleReshape.time_stack\n> +      8.84±0.2ms         18.8±4ms     2.12  stat_ops.FrameOps.time_op('mad', 'float', 1, False)\n> +        146±30ms          306±5ms     2.09  groupby.GroupByMethods.time_dtype_as_group('float', 'unique', 'transformation')\n> +        95.3±7μs         197±80μs     2.07  groupby.GroupByMethods.time_dtype_as_field('float', 'sum', 'direct')\n> +        83.1±4μs         172±50μs     2.06  series_methods.SeriesConstructor.time_constructor(None)\n> +        524±10μs      1.06±0.01ms     2.02  groupby.GroupByMethods.time_dtype_as_group('object', 'unique', 'transformation')\n> +        139±10μs        279±100μs     2.01  groupby.GroupByMethods.time_dtype_as_field('float', 'std', 'transformation')\n> +        525±20μs      1.06±0.01ms     2.01  groupby.GroupByMethods.time_dtype_as_group('object', 'unique', 'direct')\n> +        54.3±3μs        108±0.8μs     2.00  timeseries.AsOf.time_asof_single_early('DataFrame')\n> +        51.1±3μs         101±10μs     1.99  groupby.GroupByMethods.time_dtype_as_field('datetime', 'size', 'direct')\n> +        67.4±5μs          133±2μs     1.97  groupby.GroupByMethods.time_dtype_as_group('int', 'count', 'transformation')\n> +     1.75±0.02ms       3.43±0.2ms     1.97  reshape.Melt.time_melt_dataframe\n> +        51.7±1μs          102±5μs     1.96  groupby.GroupByMethods.time_dtype_as_field('object', 'size', 'transformation')\n> +       1.06±0.1s        2.06±0.2s     1.95  stat_ops.FrameMultiIndexOps.time_op([0, 1], 'mad')\n> +        84.4±2ms          163±6ms     1.94  join_merge.MergeAsof.time_by_object\n> +        50.8±1μs         98.0±6μs     1.93  groupby.GroupByMethods.time_dtype_as_field('object', 'size', 'direct')\n> +      2.67±0.4ms       5.12±0.7ms     1.91  reindex.DropDuplicates.time_frame_drop_dups_bool(True)\n> +        867±70μs      1.66±0.01ms     1.91  io.csv.ReadCSVParseDates.time_baseline\n> +        50.3±2μs         95.9±5μs     1.91  groupby.GroupByMethods.time_dtype_as_field('datetime', 'size', 'transformation')\n> +        66.8±3μs         127±10μs     1.90  groupby.GroupByMethods.time_dtype_as_field('int', 'count', 'direct')\n> +        67.0±6ms          127±3ms     1.90  frame_methods.Interpolate.time_interpolate('infer')\n> +        51.9±7μs         98.0±4μs     1.89  groupby.GroupByMethods.time_dtype_as_group('int', 'size', 'transformation')\n> +       1.29±0.2s       2.44±0.04s     1.89  timeseries.ToDatetimeNONISO8601.time_different_offset\n> +        116±10ms          219±3ms     1.88  stat_ops.FrameMultiIndexOps.time_op(1, 'mad')\n> +        50.0±2μs       94.0±0.6μs     1.88  groupby.GroupByMethods.time_dtype_as_group('datetime', 'size', 'direct')\n> +       2.93±0.1s        5.50±0.3s     1.88  replace.ReplaceDict.time_replace_series(True)\n> +        66.5±4μs          124±2μs     1.86  groupby.GroupByMethods.time_dtype_as_field('float', 'count', 'transformation')\n> +        67.4±9μs          125±7μs     1.86  groupby.GroupByMethods.time_dtype_as_field('datetime', 'count', 'direct')\n> +        65.6±3μs          122±4μs     1.86  groupby.GroupByMethods.time_dtype_as_field('float', 'count', 'direct')\n> +      1.87±0.03s       3.48±0.07s     1.86  sparse.SparseDataFrameConstructor.time_constructor\n> +        49.6±2μs         91.9±1μs     1.85  groupby.GroupByMethods.time_dtype_as_field('int', 'size', 'direct')\n> +        927±30μs      1.71±0.03ms     1.85  frame_methods.Interpolate.time_interpolate_some_good(None)\n> +        50.0±4μs       92.4±0.6μs     1.85  groupby.GroupByMethods.time_dtype_as_group('float', 'size', 'direct')\n> +     8.77±0.09ms       16.2±0.7ms     1.84  stat_ops.FrameOps.time_op('mad', 'float', 1, True)\n> +        66.1±3μs          122±8μs     1.84  groupby.GroupByMethods.time_dtype_as_field('datetime', 'count', 'transformation')\n> +        50.4±3μs         92.7±1μs     1.84  groupby.GroupByMethods.time_dtype_as_field('int', 'size', 'transformation')\n> +        50.8±2μs       93.3±0.7μs     1.84  groupby.GroupByMethods.time_dtype_as_group('float', 'size', 'transformation')\n> +        50.8±2μs       92.8±0.3μs     1.83  groupby.GroupByMethods.time_dtype_as_group('datetime', 'size', 'transformation')\n> +      49.9±0.6μs       91.2±0.3μs     1.83  groupby.GroupByMethods.time_dtype_as_group('object', 'size', 'direct')\n> +        86.6±3μs         158±20μs     1.83  indexing.CategoricalIndexIndexing.time_getitem_bool_array('monotonic_decr')\n> +      65.0±0.5μs        118±0.6μs     1.82  groupby.GroupByMethods.time_dtype_as_group('datetime', 'count', 'direct')\n> +        52.4±4μs         95.3±1μs     1.82  groupby.GroupByMethods.time_dtype_as_group('int', 'size', 'direct')\n> +        50.5±2μs       91.7±0.7μs     1.82  groupby.GroupByMethods.time_dtype_as_group('object', 'size', 'transformation')\n> +      65.0±0.2μs        118±0.7μs     1.81  groupby.GroupByMethods.time_dtype_as_group('datetime', 'count', 'transformation')\n> +        87.8±5ms         159±10ms     1.81  groupby.GroupByMethods.time_dtype_as_field('float', 'skew', 'transformation')\n> +      64.3±0.6μs        115±0.4μs     1.79  groupby.GroupByMethods.time_dtype_as_group('object', 'count', 'direct')\n> +      14.3±0.5μs       25.5±0.7μs     1.78  ctors.SeriesDtypesConstructors.time_index_from_array_floats\n> +        66.5±4μs          118±4μs     1.78  groupby.GroupByMethods.time_dtype_as_field('int', 'count', 'transformation')\n> +     2.68±0.06ms         4.76±1ms     1.78  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'int', 'min')\n> +        30.3±2ms         53.4±2ms     1.76  binary_ops.Ops.time_frame_comparison(False, 'default')\n> +      18.9±0.3μs       33.4±0.6μs     1.76  ctors.SeriesDtypesConstructors.time_dtindex_from_index_with_series\n> +        343±10μs         597±80μs     1.74  groupby.GroupByMethods.time_dtype_as_field('float', 'sem', 'transformation')\n> +      29.3±0.4μs         50.8±1μs     1.73  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136818c8>, True)\n> +         102±2μs          176±3μs     1.72  frame_methods.GetDtypeCounts.time_frame_get_dtype_counts\n> +     1.09±0.02ms      1.87±0.06ms     1.71  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(False, 'ymd')\n> +        31.7±2ms       53.4±0.4ms     1.69  binary_ops.Ops.time_frame_comparison(False, 1)\n> +      3.80±0.1μs       6.41±0.7μs     1.69  inference.ToNumericDowncast.time_downcast('int32', None)\n> +      2.90±0.3ms       4.88±0.3ms     1.69  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'int', 'max')\n> +         191±2ms         318±20ms     1.66  sparse.SparseDataFrameConstructor.time_from_scipy\n> +        186±10μs         308±50μs     1.65  groupby.GroupByMethods.time_dtype_as_field('object', 'last', 'direct')\n> +        138±10ms          226±4ms     1.64  groupby.GroupByMethods.time_dtype_as_group('int', 'skew', 'direct')\n> +      3.03±0.2ms         4.94±1ms     1.63  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'std')\n> +         123±5ms          199±4ms     1.62  frame_methods.Iteration.time_iterrows\n> +     3.66±0.09μs       5.91±0.4μs     1.62  offset.OnOffset.time_on_offset(<MonthBegin>)\n> +       71.9±10μs        116±0.3μs     1.62  groupby.GroupByMethods.time_dtype_as_group('object', 'count', 'transformation')\n> +       117±0.9μs         187±20μs     1.61  indexing.DataFrameNumericIndexing.time_iloc_dups\n> +     4.59±0.05ms       7.39±0.6ms     1.61  categoricals.Rank.time_rank_string_cat_ordered\n> +     4.80±0.06ms       7.68±0.6ms     1.60  categoricals.Rank.time_rank_int_cat\n> +      2.96±0.1ms       4.73±0.8ms     1.59  rolling.Methods.time_rolling('DataFrame', 10, 'int', 'std')\n> +        98.5±5μs          156±8μs     1.59  groupby.GroupByMethods.time_dtype_as_field('float', 'var', 'direct')\n> +     1.07±0.02ms      1.69±0.03ms     1.59  timeseries.ResampleDataFrame.time_method('min')\n> +      6.15±0.1μs      9.74±0.08μs     1.58  timestamp.TimestampOps.time_replace_None('US/Eastern')\n> +         164±5μs          259±3μs     1.58  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x113681730>, True)\n> +      4.54±0.2ms       7.15±0.7ms     1.58  categoricals.Rank.time_rank_int_cat_ordered\n> +     1.07±0.04ms      1.69±0.01ms     1.58  timeseries.ResampleDataFrame.time_method('max')\n> +        21.4±1μs         33.7±1μs     1.57  ctors.SeriesDtypesConstructors.time_index_from_array_string\n> +     1.70±0.03ms       2.67±0.2ms     1.57  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'iso8601')\n> +        46.3±4μs         72.6±3μs     1.57  timeseries.SortIndex.time_get_slice(False)\n> +        92.8±6μs         145±10μs     1.56  groupby.GroupByMethods.time_dtype_as_field('float', 'prod', 'transformation')\n> +         112±2μs          175±1μs     1.56  timeseries.DatetimeIndex.time_unique('dst')\n> +        89.0±5μs         138±30μs     1.55  groupby.GroupByMethods.time_dtype_as_field('datetime', 'max', 'direct')\n> +       95.6±10μs         148±40μs     1.55  groupby.GroupByMethods.time_dtype_as_field('datetime', 'min', 'direct')\n> +         150±5μs          232±2μs     1.55  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x113681730>, False)\n> +        477±40μs         737±40μs     1.55  groupby.GroupByMethods.time_dtype_as_group('int', 'sem', 'transformation')\n> +         534±6μs          824±2μs     1.54  indexing.MultiIndexing.time_frame_ix\n> +      3.56±0.2ms       5.50±0.9ms     1.54  rolling.Methods.time_rolling('Series', 10, 'float', 'std')\n> +      2.87±0.1ms       4.43±0.2ms     1.54  rolling.Methods.time_rolling('DataFrame', 10, 'float', 'std')\n> +     1.70±0.03ms       2.60±0.2ms     1.53  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'ymd')\n> +         282±6μs         432±10μs     1.53  indexing.NonNumericSeriesIndexing.time_getitem_label_slice('datetime', 'nonunique_monotonic_inc')\n> +        91.8±3ms          140±7ms     1.53  groupby.GroupByMethods.time_dtype_as_field('int', 'skew', 'transformation')\n> +     2.64±0.08ms       4.03±0.4ms     1.53  categoricals.Concat.time_union\n> +     4.44±0.03ms      6.78±0.05ms     1.53  categoricals.Rank.time_rank_int\n> +      8.50±0.1ms         13.0±5ms     1.53  stat_ops.FrameOps.time_op('mad', 'float', 0, True)\n> +     1.69±0.09ms       2.58±0.5ms     1.52  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'high')\n> +         128±6μs          195±4μs     1.52  groupby.GroupByMethods.time_dtype_as_group('float', 'first', 'direct')\n> +     1.77±0.08ms       2.68±0.5ms     1.52  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', None)\n> +      10.0±0.3ms       15.2±0.3ms     1.52  eval.Query.time_query_datetime_column\n> +       96.1±10μs         145±20μs     1.51  groupby.GroupByMethods.time_dtype_as_field('float', 'sum', 'transformation')\n> +         124±9μs          188±8μs     1.51  groupby.GroupByMethods.time_dtype_as_group('float', 'last', 'direct')\n> +     3.39±0.04ms       5.14±0.2ms     1.51  frame_methods.Apply.time_apply_pass_thru\n> +         128±9μs          194±8μs     1.51  groupby.GroupByMethods.time_dtype_as_group('float', 'first', 'transformation')\n> +     2.96±0.02μs       4.48±0.1μs     1.51  categoricals.CategoricalSlicing.time_getitem_scalar('non_monotonic')\n> +        727±60ms       1.10±0.06s     1.51  groupby.GroupByMethods.time_dtype_as_group('float', 'mad', 'direct')\n> +     6.22±0.04ms       9.28±0.5ms     1.49  frame_methods.Apply.time_apply_lambda_mean\n> +        80.2±4μs         119±20μs     1.49  groupby.GroupByMethods.time_dtype_as_field('float', 'shift', 'direct')\n> +        861±30μs      1.27±0.06ms     1.47  period.Indexing.time_align\n> +      3.59±0.3ms       5.29±0.4ms     1.47  reindex.DropDuplicates.time_frame_drop_dups_bool(False)\n> +         130±3μs         191±20μs     1.47  groupby.GroupByMethods.time_dtype_as_field('object', 'count', 'transformation')\n> +      13.4±0.3ms         19.7±5ms     1.47  reshape.PivotTable.time_pivot_table\n> +        154±10μs          226±8μs     1.47  groupby.GroupByMethods.time_dtype_as_field('int', 'var', 'transformation')\n> +         250±5μs         366±10μs     1.46  frame_ctor.FromRecords.time_frame_from_records_generator(None)\n> +        50.0±2ms         73.0±4ms     1.46  index_object.IndexAppend.time_append_range_list\n> +     3.08±0.01μs       4.50±0.1μs     1.46  categoricals.CategoricalSlicing.time_getitem_scalar('monotonic_incr')\n> +      2.68±0.1ms       3.91±0.2ms     1.46  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'int', 'max')\n> +      23.8±0.4ms       34.7±0.2ms     1.46  frame_methods.Equals.time_frame_object_unequal\n> +         117±3ms          171±3ms     1.46  sparse.SparseSeriesToFrame.time_series_to_frame\n> +        468±30ms         679±40ms     1.45  groupby.GroupByMethods.time_dtype_as_group('int', 'mad', 'transformation')\n> +     3.05±0.09ms       4.41±0.1ms     1.45  gil.ParallelRolling.time_rolling('var')\n> +        299±10ms         432±10ms     1.45  groupby.GroupByMethods.time_dtype_as_field('float', 'mad', 'transformation')\n> +        304±20ms         439±20ms     1.44  groupby.GroupByMethods.time_dtype_as_field('int', 'mad', 'direct')\n> +      11.7±0.6μs       16.9±0.4μs     1.44  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: days=2, months=2>)\n> +      1.65±0.1ms       2.38±0.1ms     1.44  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'high')\n> +         286±7μs         411±20μs     1.44  groupby.GroupByMethods.time_dtype_as_group('float', 'median', 'direct')\n> +        734±80ms       1.05±0.06s     1.43  groupby.GroupByMethods.time_dtype_as_group('float', 'mad', 'transformation')\n> +     2.22±0.08ms      3.16±0.04ms     1.43  frame_methods.Interpolate.time_interpolate_some_good('infer')\n> +        169±20ms          241±2ms     1.43  indexing.NumericSeriesIndexing.time_getitem_list_like(<class 'pandas.core.indexes.numeric.Float64Index'>, 'unique_monotonic_inc')\n> +      86.8±0.7ms          124±3ms     1.43  frame_methods.Apply.time_apply_axis_1\n> +        218±10ms          310±6ms     1.42  groupby.GroupByMethods.time_dtype_as_group('float', 'skew', 'direct')\n> +      2.95±0.2ms       4.19±0.2ms     1.42  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'int', 'min')\n> +        215±30ms          305±2ms     1.42  groupby.GroupByMethods.time_dtype_as_group('float', 'skew', 'transformation')\n> +        132±10μs          187±9μs     1.42  groupby.GroupByMethods.time_dtype_as_group('float', 'last', 'transformation')\n> +     3.77±0.08ms         5.33±1ms     1.41  rolling.Methods.time_rolling('Series', 1000, 'float', 'std')\n> +        95.2±6μs          135±4μs     1.41  groupby.GroupByMethods.time_dtype_as_field('float', 'min', 'transformation')\n> +      9.73±0.1μs       13.8±0.2μs     1.41  timestamp.TimestampConstruction.time_parse_iso8601_tz\n> +         240±7μs          338±7μs     1.41  groupby.GroupByMethods.time_dtype_as_group('float', 'head', 'transformation')\n> +         222±4ms          311±6ms     1.40  frame_methods.Duplicated.time_frame_duplicated_wide\n> +        687±20μs         963±80μs     1.40  groupby.GroupByMethods.time_dtype_as_field('datetime', 'value_counts', 'direct')\n> +         127±5μs          177±8μs     1.40  groupby.GroupByMethods.time_dtype_as_field('object', 'count', 'direct')\n> +        94.5±5μs         132±10μs     1.40  groupby.GroupByMethods.time_dtype_as_field('int', 'shift', 'transformation')\n> +         242±8μs          339±5μs     1.40  groupby.GroupByMethods.time_dtype_as_group('float', 'head', 'direct')\n> +       92.7±10μs          129±1μs     1.40  groupby.GroupByMethods.time_dtype_as_field('float', 'first', 'transformation')\n> +        96.8±7μs          135±5μs     1.39  groupby.GroupByMethods.time_dtype_as_field('float', 'max', 'transformation')\n> +        840±40μs       1.17±0.2ms     1.39  groupby.GroupByMethods.time_dtype_as_field('float', 'value_counts', 'direct')\n> +      2.88±0.2ms       4.01±0.1ms     1.39  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'float', 'max')\n> +        755±20μs      1.05±0.01ms     1.39  timeseries.ResampleDataFrame.time_method('mean')\n> +        391±20μs          542±2μs     1.39  groupby.GroupByMethods.time_dtype_as_group('float', 'sem', 'direct')\n> +      7.02±0.1μs       9.73±0.7μs     1.39  index_object.Indexing.time_get_loc_sorted('Int')\n> +         139±8μs         192±10μs     1.38  groupby.GroupByMethods.time_dtype_as_group('int', 'first', 'direct')\n> +        98.0±4μs          135±4μs     1.38  groupby.GroupByMethods.time_dtype_as_field('float', 'min', 'direct')\n> +      1.74±0.1ms       2.41±0.1ms     1.38  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', 'round_trip')\n> +      14.1±0.7μs      19.4±0.09μs     1.38  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: days=2, months=2>)\n> +        94.6±7μs          130±1μs     1.38  groupby.GroupByMethods.time_dtype_as_field('float', 'max', 'direct')\n> +        392±10μs          540±3μs     1.38  groupby.GroupByMethods.time_dtype_as_group('float', 'sem', 'transformation')\n> +     1.96±0.09ms       2.69±0.6ms     1.38  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'count')\n> +         118±3μs          161±7μs     1.37  groupby.GroupByMethods.time_dtype_as_field('int', 'last', 'transformation')\n> +         125±8μs         171±10μs     1.37  groupby.GroupByMethods.time_dtype_as_group('int', 'last', 'transformation')\n> +        433±10μs        593±200μs     1.37  reindex.Reindex.time_reindex_columns\n> +        473±30ms         646±20ms     1.37  groupby.GroupByMethods.time_dtype_as_group('int', 'mad', 'direct')\n> +        88.1±7μs          120±6μs     1.36  groupby.GroupByMethods.time_dtype_as_field('datetime', 'shift', 'direct')\n> +      2.82±0.1ms      3.83±0.07ms     1.36  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'float', 'min')\n> +     1.47±0.06ms       1.99±0.1ms     1.35  groupby.Datelike.time_sum('date_range')\n> +      27.0±0.3ms         36.5±2ms     1.35  strings.Methods.time_get\n> +      31.7±0.7ms         42.8±2ms     1.35  indexing.InsertColumns.time_insert\n> +         100±8μs          135±2μs     1.35  groupby.GroupByMethods.time_dtype_as_field('float', 'prod', 'direct')\n> +        849±30μs       1.14±0.1ms     1.35  groupby.GroupByMethods.time_dtype_as_field('float', 'value_counts', 'transformation')\n> +      6.92±0.1ms       9.28±0.3ms     1.34  frame_methods.Apply.time_apply_np_mean\n> +         434±7μs          583±8μs     1.34  categoricals.CategoricalSlicing.time_getitem_list('non_monotonic')\n> +        69.8±1μs         93.6±7μs     1.34  indexing.NonNumericSeriesIndexing.time_getitem_label_slice('datetime', 'unique_monotonic_inc')\n> +        706±30μs         945±60μs     1.34  groupby.GroupByMethods.time_dtype_as_field('datetime', 'value_counts', 'transformation')\n> +        277±10μs          370±8μs     1.34  groupby.GroupByMethods.time_dtype_as_group('float', 'prod', 'transformation')\n> +         122±1μs        163±0.4μs     1.33  groupby.GroupByMethods.time_dtype_as_group('datetime', 'last', 'direct')\n> +        275±10μs         366±20μs     1.33  groupby.GroupByMethods.time_dtype_as_group('int', 'prod', 'direct')\n> +        50.0±1μs         66.5±2μs     1.33  frame_ctor.FromNDArray.time_frame_from_ndarray\n> +         118±3μs         156±10μs     1.33  groupby.GroupByMethods.time_dtype_as_group('object', 'first', 'transformation')\n> +         129±5μs          171±4μs     1.33  groupby.GroupByMethods.time_dtype_as_group('datetime', 'max', 'transformation')\n> +      19.2±0.3μs       25.4±0.8μs     1.33  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136818c8>, False)\n> +         131±6μs         174±20μs     1.33  groupby.GroupByMethods.time_dtype_as_field('int', 'first', 'direct')\n> +         131±6μs          174±6μs     1.32  groupby.GroupByMethods.time_dtype_as_group('datetime', 'max', 'direct')\n> +         122±2μs          161±3μs     1.32  groupby.GroupByMethods.time_dtype_as_field('int', 'last', 'direct')\n> +     5.67±0.05ms       7.48±0.1ms     1.32  reindex.DropDuplicates.time_frame_drop_dups_na(True)\n> +      6.26±0.5ms       8.23±0.2ms     1.32  strings.Cat.time_cat(0, None, None, 0.001)\n> +     1.72±0.09ms      2.26±0.02ms     1.32  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', None)\n> +        596±20ns         784±60ns     1.31  index_object.Indexing.time_get('String')\n> +         128±2μs          169±3μs     1.31  groupby.GroupByMethods.time_dtype_as_group('datetime', 'min', 'direct')\n> +         127±8μs          166±9μs     1.31  groupby.GroupByMethods.time_dtype_as_group('int', 'last', 'direct')\n> +      2.78±0.1ms      3.65±0.07ms     1.31  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'float', 'max')\n> +         135±6μs          177±3μs     1.31  groupby.GroupByMethods.time_dtype_as_field('int', 'first', 'transformation')\n> +      3.73±0.2ms      4.87±0.03ms     1.31  rolling.Methods.time_rolling('Series', 10, 'int', 'std')\n> +         130±5μs        170±0.7μs     1.31  groupby.GroupByMethods.time_dtype_as_group('datetime', 'min', 'transformation')\n> +         145±5μs         189±10μs     1.30  groupby.GroupByMethods.time_dtype_as_group('int', 'first', 'transformation')\n> +         135±6μs          175±1μs     1.30  groupby.GroupByMethods.time_dtype_as_field('int', 'max', 'transformation')\n> +        149±10μs         194±10μs     1.30  groupby.GroupByMethods.time_dtype_as_group('float', 'var', 'transformation')\n> +      1.72±0.1ms       2.24±0.2ms     1.30  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', 'round_trip')\n> +      1.71±0.1ms      2.22±0.03ms     1.30  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', None)\n> +      6.28±0.2ms       8.12±0.2ms     1.29  categoricals.Rank.time_rank_string_cat\n> +     1.24±0.09ms      1.61±0.04ms     1.29  sparse.FromCoo.time_sparse_series_from_coo\n> +         125±7μs          162±4μs     1.29  groupby.GroupByMethods.time_dtype_as_group('datetime', 'last', 'transformation')\n> +        61.6±3μs         79.5±3μs     1.29  frame_ctor.FromSeries.time_mi_series\n> +      7.89±0.4μs      10.2±0.03μs     1.29  offset.OnOffset.time_on_offset(<YearEnd: month=12>)\n> +     1.23±0.05μs      1.59±0.07μs     1.29  index_object.Indexing.time_get('Float')\n> +         233±9μs         299±10μs     1.29  groupby.GroupByMethods.time_dtype_as_group('datetime', 'head', 'direct')\n> +         343±5μs         442±10μs     1.29  timeseries.ResetIndex.time_reest_datetimeindex(None)\n> +        58.7±1ms       75.5±0.5ms     1.29  stat_ops.Correlation.time_corr('spearman')\n> +      31.7±0.5ms         40.7±3ms     1.29  stat_ops.FrameMultiIndexOps.time_op(0, 'mad')\n> +      9.40±0.1μs         12.1±1μs     1.28  timestamp.TimestampProperties.time_is_leap_year(None, 'B')\n> +         450±8μs          577±3μs     1.28  categoricals.CategoricalSlicing.time_getitem_list('monotonic_incr')\n> +      4.38±0.2ms         5.60±1ms     1.28  rolling.Pairwise.time_pairwise(1000, 'corr', False)\n> +     3.00±0.08ms       3.83±0.1ms     1.28  timeseries.ToDatetimeISO8601.time_iso8601_format\n> +      3.81±0.09s       4.87±0.08s     1.28  period.DataFramePeriodColumn.time_set_index\n> +         103±3μs          132±2μs     1.28  join_merge.Concat.time_concat_empty_right(0)\n> +        145±10μs          185±7μs     1.28  groupby.GroupByMethods.time_dtype_as_group('int', 'min', 'transformation')\n> +         311±8μs         397±80μs     1.28  groupby.GroupByMethods.time_dtype_as_field('object', 'tail', 'direct')\n> +      9.29±0.3μs       11.8±0.9μs     1.27  offset.OffestDatetimeArithmetic.time_apply(<YearBegin: month=1>)\n> +      1.75±0.1ms      2.23±0.09ms     1.27  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', None)\n> +         296±8ms          375±5ms     1.27  frame_methods.Nunique.time_frame_nunique\n> +        99.4±7μs          126±4μs     1.27  groupby.GroupByMethods.time_dtype_as_group('int', 'shift', 'transformation')\n> +         228±3μs          288±3μs     1.27  groupby.GroupByMethods.time_dtype_as_group('object', 'head', 'direct')\n> +         153±1ms          194±2ms     1.26  replace.Convert.time_replace('DataFrame', 'Timedelta')\n> +      2.39±0.1ms       3.02±0.2ms     1.26  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'round_trip')\n> +      11.3±0.3ms       14.2±0.3ms     1.26  categoricals.Constructor.time_regular\n> +      8.15±0.1ms       10.3±0.2ms     1.26  stat_ops.FrameOps.time_op('mad', 'float', 0, False)\n> +      19.1±0.3ms       24.1±0.3ms     1.26  stat_ops.FrameMultiIndexOps.time_op(0, 'kurt')\n> +      13.9±0.5ms       17.5±0.2ms     1.26  join_merge.Concat.time_concat_series(0)\n> +        229±10μs          288±4μs     1.26  timeseries.DatetimeIndex.time_normalize('dst')\n> +         108±8μs          135±3μs     1.26  groupby.GroupByMethods.time_dtype_as_field('float', 'var', 'transformation')\n> +      2.84±0.3ms      3.58±0.04ms     1.26  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'float', 'min')\n> +      2.81±0.1ms       3.53±0.2ms     1.26  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', 'round_trip')\n> +         301±7μs         379±30μs     1.26  groupby.GroupByMethods.time_dtype_as_field('object', 'head', 'transformation')\n> +      7.75±0.2ms       9.74±0.5ms     1.26  indexing.InsertColumns.time_assign_with_setitem\n> +         234±3μs          294±4μs     1.26  groupby.GroupByMethods.time_dtype_as_group('datetime', 'head', 'transformation')\n> +         236±8μs          296±4μs     1.26  groupby.GroupByMethods.time_dtype_as_group('object', 'tail', 'transformation')\n> +         140±8μs          175±2μs     1.25  groupby.GroupByMethods.time_dtype_as_field('int', 'max', 'direct')\n> +         149±2ms         186±20ms     1.25  binary_ops.Ops2.time_frame_float_div_by_zero\n> +      1.98±0.1ms       2.47±0.2ms     1.25  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'sum')\n> +      54.3±0.5μs         67.8±2μs     1.25  timeseries.SortIndex.time_get_slice(True)\n> +        269±20μs         336±10μs     1.25  groupby.GroupByMethods.time_dtype_as_group('int', 'head', 'direct')\n> +        91.0±2μs         113±30μs     1.25  groupby.GroupByMethods.time_dtype_as_field('datetime', 'first', 'direct')\n> +        92.7±4μs          115±2μs     1.25  groupby.GroupByMethods.time_dtype_as_field('int', 'shift', 'direct')\n> +        189±10μs          235±5μs     1.24  groupby.GroupByMethods.time_dtype_as_field('int', 'std', 'transformation')\n> +      3.43±0.2ms      4.26±0.09ms     1.24  rolling.Methods.time_rolling('DataFrame', 1000, 'int', 'std')\n> +      10.1±0.2ms       12.6±0.3ms     1.24  categoricals.CategoricalSlicing.time_getitem_bool_array('non_monotonic')\n> +        75.1±2ms         93.1±4ms     1.24  frame_methods.ToHTML.time_to_html_mixed\n> +         129±2μs         159±10μs     1.24  inference.NumericInferOps.time_subtract(<class 'numpy.int8'>)\n> +      28.1±0.5ms       34.8±0.1ms     1.24  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift('US/Eastern')\n> +         124±6μs        153±0.9μs     1.23  groupby.GroupByMethods.time_dtype_as_field('float', 'median', 'transformation')\n> +         118±4μs          146±5μs     1.23  groupby.GroupByMethods.time_dtype_as_field('object', 'shift', 'transformation')\n> +        427±10μs          527±6μs     1.23  timeseries.ResetIndex.time_reest_datetimeindex('US/Eastern')\n> +     2.22±0.03ms      2.74±0.07ms     1.23  groupby.Transform.time_transform_multi_key4\n> +         259±8μs          318±4μs     1.23  groupby.GroupByMethods.time_dtype_as_field('int', 'head', 'transformation')\n> +        84.9±2μs        104±0.9μs     1.23  groupby.GroupByMethods.time_dtype_as_group('object', 'shift', 'direct')\n> +     8.56±0.06ms       10.5±0.1ms     1.23  stat_ops.Rank.time_rank('Series', False)\n> +        44.1±1ms         54.1±2ms     1.23  frame_methods.Equals.time_frame_object_equal\n> +        263±10μs         322±10μs     1.23  groupby.GroupByMethods.time_dtype_as_field('datetime', 'head', 'direct')\n> +      2.39±0.1ms       2.93±0.2ms     1.23  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'round_trip')\n> +         587±4μs          720±2μs     1.23  groupby.GroupByMethods.time_dtype_as_group('object', 'value_counts', 'transformation')\n> +      9.10±0.2μs       11.1±0.4μs     1.23  offset.OffestDatetimeArithmetic.time_apply(<YearEnd: month=12>)\n> +        65.0±2μs         79.6±2μs     1.23  timeseries.SortIndex.time_sort_index(True)\n> +     3.29±0.04μs       4.02±0.2μs     1.22  indexing.CategoricalIndexIndexing.time_getitem_scalar('monotonic_incr')\n> +      10.2±0.1ms      12.5±0.09ms     1.22  gil.ParallelRolling.time_rolling('std')\n> +      11.5±0.3ms       14.1±0.4ms     1.22  timedelta.TimedeltaOps.time_add_td_ts\n> +        728±40μs         890±30μs     1.22  groupby.GroupByMethods.time_dtype_as_group('int', 'value_counts', 'direct')\n> +        146±10μs          179±7μs     1.22  groupby.GroupByMethods.time_dtype_as_group('int', 'max', 'transformation')\n> +         261±7μs          319±4μs     1.22  groupby.GroupByMethods.time_dtype_as_field('int', 'head', 'direct')\n> +         102±6μs          124±4μs     1.22  groupby.GroupByMethods.time_dtype_as_field('float', 'mean', 'transformation')\n> +      9.42±0.1ms       11.5±0.2ms     1.22  stat_ops.Rank.time_average_old('Series', True)\n> +      6.53±0.1ms       7.96±0.1ms     1.22  groupby.Transform.time_transform_multi_key1\n> +      68.1±0.6μs         83.0±7μs     1.22  indexing.DataFrameNumericIndexing.time_loc\n> +      9.29±0.1ms       11.3±0.1ms     1.22  stat_ops.Rank.time_average_old('Series', False)\n> +         138±2μs          168±3μs     1.22  join_merge.Concat.time_concat_empty_right(1)\n> +       152±0.6ms          184±6ms     1.22  binary_ops.Ops2.time_frame_int_div_by_zero\n> +      8.43±0.1ms         10.2±2ms     1.21  algorithms.Hashing.time_series_string\n> +      43.1±0.7μs         52.3±3μs     1.21  indexing.NonNumericSeriesIndexing.time_getitem_pos_slice('string', 'nonunique_monotonic_inc')\n> +        691±30μs         838±20μs     1.21  groupby.GroupByMethods.time_dtype_as_field('object', 'value_counts', 'transformation')\n> +      9.48±0.1ms      11.5±0.04ms     1.21  frame_methods.MaskBool.time_frame_mask_floats\n> +        614±10μs         744±90μs     1.21  frame_methods.Quantile.time_frame_quantile(1)\n> +      86.9±0.7μs        105±0.3μs     1.21  groupby.GroupByMethods.time_dtype_as_group('datetime', 'shift', 'transformation')\n> +     1.54±0.02ms      1.86±0.06ms     1.21  stat_ops.SeriesMultiIndexOps.time_op(1, 'prod')\n> +     8.70±0.09ms       10.5±0.2ms     1.21  stat_ops.Rank.time_rank('Series', True)\n> +      3.47±0.2ms      4.19±0.06ms     1.21  io.sas.SAS.time_read_msgpack('xport')\n> +        88.0±3μs        106±0.7μs     1.21  groupby.GroupByMethods.time_dtype_as_group('float', 'shift', 'direct')\n> +        601±20μs          726±4μs     1.21  groupby.GroupByMethods.time_dtype_as_group('object', 'value_counts', 'direct')\n> +        284±20μs         343±10μs     1.21  groupby.GroupByMethods.time_dtype_as_group('int', 'median', 'transformation')\n> +        86.6±2μs        105±0.9μs     1.21  groupby.GroupByMethods.time_dtype_as_group('object', 'shift', 'transformation')\n> +       122±0.7ms         147±10ms     1.21  replace.Convert.time_replace('Series', 'Timestamp')\n> +        255±20μs          307±2μs     1.21  groupby.GroupByMethods.time_dtype_as_group('float', 'tail', 'direct')\n> +      35.6±0.7ms         42.8±1ms     1.20  io.csv.ReadCSVCategorical.time_convert_direct\n> +        712±10μs          857±5μs     1.20  groupby.GroupByMethods.time_dtype_as_group('datetime', 'value_counts', 'direct')\n> +      5.75±0.2ms       6.92±0.2ms     1.20  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'std')\n> +     8.11±0.09ms       9.73±0.3ms     1.20  groupby.MultiColumn.time_col_select_numpy_sum\n> +        305±10μs         366±20μs     1.20  groupby.GroupByMethods.time_dtype_as_field('object', 'head', 'direct')\n> +        281±20μs         336±20μs     1.20  groupby.GroupByMethods.time_dtype_as_field('int', 'median', 'direct')\n> +         140±1μs          168±4μs     1.20  join_merge.Concat.time_concat_empty_left(1)\n> +        62.7±1ms         75.1±1ms     1.20  io.sas.SAS.time_read_msgpack('sas7bdat')\n> +        54.1±1ms         64.8±2ms     1.20  stat_ops.SeriesMultiIndexOps.time_op(1, 'mad')\n> +        71.5±3μs         85.6±6μs     1.20  inference.ToNumeric.time_from_str('ignore')\n> +         715±9μs          853±8μs     1.19  groupby.GroupByMethods.time_dtype_as_group('datetime', 'value_counts', 'transformation')\n> +         274±3ms          327±3ms     1.19  groupby.Apply.time_copy_overhead_single_col\n> +        705±20μs          841±8μs     1.19  groupby.GroupByMethods.time_dtype_as_field('object', 'value_counts', 'direct')\n> +      53.8±0.9μs       63.7±0.3μs     1.18  frame_methods.XS.time_frame_xs(0)\n> +        35.3±1μs         41.7±1μs     1.18  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: days=2, months=2>)\n> +        91.4±2μs          108±2μs     1.18  groupby.GroupByMethods.time_dtype_as_field('datetime', 'first', 'transformation')\n> +        463±10μs         544±50μs     1.18  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: days=2, months=2>)\n> +        266±10μs          313±1μs     1.18  groupby.GroupByMethods.time_dtype_as_field('float', 'head', 'direct')\n> +     9.38±0.07ms      11.0±0.06ms     1.17  groupby.MultiColumn.time_cython_sum\n> +      9.36±0.2μs       11.0±0.1μs     1.17  timestamp.TimestampProperties.time_is_year_start(None, 'B')\n> +      20.7±0.3ms         24.2±2ms     1.17  stat_ops.SeriesMultiIndexOps.time_op(1, 'skew')\n> +     1.00±0.01μs      1.17±0.04μs     1.17  timestamp.TimestampConstruction.time_parse_iso8601_no_tz\n> +        275±10μs          320±7μs     1.16  groupby.GroupByMethods.time_dtype_as_field('int', 'sum', 'transformation')\n> +      2.90±0.1ms       3.37±0.2ms     1.16  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', 'high')\n> +     1.74±0.02ms      2.02±0.08ms     1.16  timeseries.ResampleSeries.time_resample('period', '1D', 'ohlc')\n> +      9.39±0.2μs      10.9±0.07μs     1.16  timestamp.TimestampProperties.time_is_quarter_end(None, 'B')\n> +        60.2±1ms         69.7±5ms     1.16  frame_ctor.FromDicts.time_nested_dict_int64\n> +         205±6ms          238±3ms     1.16  strings.Split.time_split(True)\n> +         120±2ms          138±6ms     1.16  replace.Convert.time_replace('Series', 'Timedelta')\n> +         144±2μs          166±3μs     1.15  groupby.GroupByMethods.time_dtype_as_group('datetime', 'cumcount', 'transformation')\n> +      6.11±0.1ms      7.04±0.05ms     1.15  strings.Cat.time_cat(0, ',', '-', 0.001)\n> +     2.14±0.02ms      2.46±0.04ms     1.15  binary_ops.Ops.time_frame_comparison(True, 1)\n> +        227±20μs          261±4μs     1.15  groupby.GroupByMethods.time_dtype_as_group('int', 'var', 'transformation')\n> +     1.56±0.01ms      1.79±0.01ms     1.15  stat_ops.SeriesMultiIndexOps.time_op(0, 'mean')\n> +      2.80±0.1ms      3.21±0.02ms     1.15  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', 'high')\n> +     2.20±0.03ms      2.52±0.01ms     1.14  series_methods.IsIn.time_isin('object')\n> +     2.94±0.05ms       3.36±0.2ms     1.14  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', None)\n> +      40.2±0.3ms       46.0±0.3ms     1.14  algorithms.Factorize.time_factorize_float(True)\n> +     2.89±0.09ms      3.29±0.05ms     1.14  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', None)\n> +      9.74±0.4μs       11.1±0.2μs     1.14  timestamp.TimestampProperties.time_is_month_start(None, 'B')\n> +     2.03±0.03ms      2.31±0.09ms     1.14  binary_ops.Timeseries.time_series_timestamp_compare('US/Eastern')\n> +        552±10μs         628±10μs     1.14  ctors.SeriesConstructors.time_series_constructor(<class 'list'>, False)\n> +      18.9±0.3ms       21.5±0.5ms     1.14  reindex.DropDuplicates.time_frame_drop_dups_na(False)\n> +         208±8μs          237±5μs     1.14  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\n> +         217±5μs          246±5μs     1.14  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\n> +      5.24±0.3ms       5.94±0.3ms     1.13  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'custom')\n> +        519±10μs         588±50μs     1.13  indexing.DataFrameNumericIndexing.time_bool_indexer\n> +        257±20μs         291±30μs     1.13  groupby.GroupByMethods.time_dtype_as_field('int', 'prod', 'direct')\n> +      3.65±0.1ms       4.13±0.9ms     1.13  binary_ops.Ops.time_frame_comparison(True, 'default')\n> +      3.57±0.1ms       4.03±0.3ms     1.13  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', 'round_trip')\n> +         582±8μs         655±10μs     1.13  ctors.SeriesConstructors.time_series_constructor(<class 'list'>, True)\n> +     1.57±0.01ms      1.77±0.07ms     1.13  reshape.SimpleReshape.time_unstack\n> +     2.05±0.04ms      2.31±0.02ms     1.13  stat_ops.FrameMultiIndexOps.time_op(1, 'mean')\n> +     2.44±0.07ms      2.74±0.03ms     1.13  groupby.CountMultiInt.time_multi_int_count\n> +         409±7μs          460±5μs     1.12  timeseries.DatetimeIndex.time_unique('repeated')\n> +      9.70±0.3μs       10.9±0.1μs     1.12  timestamp.TimestampProperties.time_is_year_end(None, 'B')\n> +     1.41±0.08μs      1.57±0.02μs     1.12  timestamp.TimestampConstruction.time_parse_today\n> +        434±10μs         486±30μs     1.12  frame_methods.Quantile.time_frame_quantile(0)\n> +      9.86±0.2μs       11.0±0.2μs     1.12  timestamp.TimestampProperties.time_is_quarter_start(None, 'B')\n> +      3.47±0.2ms      3.88±0.04ms     1.12  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', 'round_trip')\n> +      9.06±0.1ms       10.1±0.1ms     1.12  io.hdf.HDFStoreDataFrame.time_query_store_table\n> +     1.42±0.06μs      1.58±0.01μs     1.12  timestamp.TimestampConstruction.time_parse_now\n> +         208±7μs          232±2μs     1.11  groupby.GroupByMethods.time_dtype_as_group('object', 'nunique', 'direct')\n> +     11.8±0.07ms       13.0±0.5ms     1.11  index_object.Ops.time_modulo('float')\n> +     1.62±0.02ms      1.79±0.03ms     1.11  timeseries.ResampleDatetetime64.time_resample\n> +        320±10μs          355±5μs     1.11  groupby.GroupByMethods.time_dtype_as_group('int', 'nunique', 'transformation')\n> +     1.03±0.01ms      1.14±0.03ms     1.11  replace.FillNa.time_replace(True)\n> +     2.07±0.01ms      2.28±0.02ms     1.10  stat_ops.SeriesMultiIndexOps.time_op(0, 'std')\n> +     2.87±0.06ms       3.17±0.2ms     1.10  stat_ops.SeriesMultiIndexOps.time_op(1, 'sem')\n>\n> Speedups\n>\n> -     4.52±0.02ms      4.10±0.04ms     0.91  frame_methods.NSort.time_nlargest_two_columns('last')\n> -      3.47±0.2ms      3.15±0.02ms     0.91  sparse.ArithmeticBlock.time_make_union(nan)\n> -      3.55±0.1ms      3.21±0.02ms     0.90  sparse.ArithmeticBlock.time_division(0)\n> -      28.7±0.9ms       25.9±0.1ms     0.90  groupby.Nth.time_series_nth_any('float32')\n> -        33.6±2μs       30.2±0.3μs     0.90  offset.OffestDatetimeArithmetic.time_subtract(<Day>)\n> -      4.84±0.4ms      4.34±0.04ms     0.90  timeseries.DatetimeAccessor.time_dt_accessor_normalize\n> -     4.86±0.07μs      4.34±0.03μs     0.89  timedelta.TimedeltaConstructor.time_from_np_timedelta\n> -      6.63±0.9μs       5.92±0.1μs     0.89  timedelta.TimedeltaConstructor.time_from_datetime_timedelta\n> -      4.29±0.2ms      3.83±0.02ms     0.89  timeseries.DatetimeIndex.time_normalize('repeated')\n> -         114±4ms          101±2ms     0.89  gil.ParallelGroupbyMethods.time_loop(4, 'sum')\n> -        62.6±2ms       55.6±0.5ms     0.89  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'datetime')\n> -     2.76±0.02ms      2.43±0.02ms     0.88  frame_methods.NSort.time_nlargest_one_column('last')\n> -     3.13±0.07ms      2.76±0.08ms     0.88  frame_methods.NSort.time_nsmallest_one_column('last')\n> -        801±50μs         705±10μs     0.88  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\n> -     1.43±0.06ms      1.25±0.01ms     0.87  stat_ops.SeriesOps.time_op('median', 'float', True)\n> -        42.2±2ms       36.8±0.8ms     0.87  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'float')\n> -      1.93±0.2μs      1.68±0.03μs     0.87  timedelta.TimedeltaConstructor.time_from_missing\n> -        17.4±1μs       15.1±0.6μs     0.87  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessDay>)\n> -      45.0±0.9ms       39.0±0.4ms     0.87  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'bool')\n> -     6.10±0.05μs      5.28±0.04μs     0.86  timedelta.TimedeltaConstructor.time_from_unit\n> -        44.4±2ms         38.2±1ms     0.86  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'float_with_nan')\n> -      2.37±0.1ms      2.04±0.02ms     0.86  timeseries.DatetimeIndex.time_timeseries_is_month_start('repeated')\n> -      8.17±0.1ms      7.00±0.03ms     0.86  stat_ops.FrameOps.time_op('mean', 'float', 1, False)\n> -      41.5±0.5ms       35.3±0.2ms     0.85  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'int')\n> -        60.4±3ms         51.3±2ms     0.85  gil.ParallelGroupbyMethods.time_loop(2, 'mean')\n> -      21.3±0.2ms      17.9±0.06ms     0.84  timeseries.DatetimeIndex.time_normalize('tz_aware')\n> -      7.86±0.3μs      6.60±0.04μs     0.84  offset.OnOffset.time_on_offset(<BusinessMonthBegin>)\n> -         199±5ms          166±1ms     0.83  io.stata.Stata.time_read_stata('td')\n> -      8.60±0.7μs      7.08±0.06μs     0.82  offset.OnOffset.time_on_offset(<SemiMonthEnd: day_of_month=15>)\n> -      9.77±0.2ms      8.03±0.07ms     0.82  strings.Cat.time_cat(0, ',', None, 0.001)\n> -      5.11±0.1ms      4.18±0.07ms     0.82  frame_methods.NSort.time_nlargest_two_columns('first')\n> -        35.3±7ms       28.8±0.4ms     0.82  groupby.Nth.time_groupby_nth_all('object')\n> -        62.4±3ms       50.7±0.6ms     0.81  gil.ParallelGroupbyMethods.time_loop(2, 'prod')\n> -     10.3±0.09ms       8.34±0.1ms     0.81  io.hdf.HDFStoreDataFrame.time_store_info\n> -      1.61±0.5ms      1.30±0.03ms     0.80  stat_ops.SeriesOps.time_op('median', 'float', False)\n> -        15.7±1μs       12.6±0.1μs     0.80  timedelta.TimedeltaConstructor.time_from_components\n> -        63.1±5ms         50.3±1ms     0.80  gil.ParallelGroupbyMethods.time_loop(2, 'sum')\n> -      24.9±0.7μs       19.8±0.1μs     0.80  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessDay>)\n> -        9.84±1ms       7.80±0.1ms     0.79  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'float_with_nan')\n> -         133±2μs          105±1μs     0.79  offset.OffestDatetimeArithmetic.time_apply(<CustomBusinessMonthBegin>)\n> -         129±6μs          100±2μs     0.78  offset.OffestDatetimeArithmetic.time_subtract_10(<CustomBusinessMonthBegin>)\n> -         141±5ms        109±0.8ms     0.78  offset.OffsetSeriesArithmetic.time_add_offset(<CustomBusinessMonthBegin>)\n> -        17.6±1μs       13.4±0.7μs     0.76  offset.OffestDatetimeArithmetic.time_add(<BusinessDay>)\n> -        21.5±2μs       16.2±0.4μs     0.75  timeseries.AsOf.time_asof_single('Series')\n> -        10.2±2μs       7.70±0.1μs     0.75  timeseries.AsOf.time_asof_single_early('Series')\n> -        97.1±1ms         71.4±4ms     0.74  frame_methods.Describe.time_series_describe\n> -         191±5ms          139±3ms     0.73  timeseries.DatetimeIndex.time_to_pydatetime('tz_aware')\n> -      20.1±0.2ms       14.6±0.6ms     0.73  algorithms.Factorize.time_factorize_int(True)\n> -      5.60±0.2μs       4.04±0.2μs     0.72  timeseries.DatetimeIndex.time_get('tz_naive')\n> -        149±10μs        107±0.8μs     0.72  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessMonthBegin>)\n> -        16.0±4ms      11.4±0.09ms     0.71  groupby.Nth.time_series_nth('datetime')\n> -        238±20ms          168±3ms     0.71  io.stata.Stata.time_read_stata('tc')\n> -      9.71±0.8ms       6.86±0.4ms     0.71  groupby.Categories.time_groupby_ordered_nosort\n> -        44.0±5ms       30.9±0.2ms     0.70  plotting.TimeseriesPlotting.time_plot_irregular\n> -        134±10μs       94.2±0.9μs     0.70  offset.OffestDatetimeArithmetic.time_subtract(<CustomBusinessMonthBegin>)\n> -         321±5ms         225±10ms     0.70  frame_methods.Describe.time_dataframe_describe\n> -        15.9±4ms       11.1±0.1ms     0.70  groupby.Nth.time_series_nth('float64')\n> -      11.3±0.3ms      7.93±0.02ms     0.70  inference.DateInferOps.time_subtract_datetimes\n> -     1.38±0.02ms         961±10μs     0.69  stat_ops.SeriesOps.time_op('median', 'int', True)\n> -        11.4±2ms       7.79±0.1ms     0.68  timeseries.AsOf.time_asof('DataFrame')\n> -         290±5ns          197±4ns     0.68  timedelta.TimedeltaProperties.time_timedelta_days\n> -        430±60ns          291±1ns     0.68  indexing.MethodLookup.time_lookup_loc\n> -      22.7±0.4μs       15.3±0.2μs     0.68  offset.OffestDatetimeArithmetic.time_add_10(<YearBegin: month=1>)\n> -     1.45±0.06ms         975±10μs     0.67  stat_ops.SeriesOps.time_op('median', 'int', False)\n> -      5.88±0.4μs      3.92±0.06μs     0.67  timeseries.DatetimeIndex.time_get('dst')\n> -     2.46±0.03ms      1.64±0.01ms     0.66  groupby.RankWithTies.time_rank_ties('float32', 'first')\n> -     2.54±0.02ms      1.67±0.03ms     0.66  groupby.RankWithTies.time_rank_ties('float64', 'dense')\n> -      2.51±0.3ms      1.65±0.03ms     0.65  groupby.RankWithTies.time_rank_ties('int64', 'max')\n> -     2.50±0.08ms      1.64±0.01ms     0.65  groupby.RankWithTies.time_rank_ties('float64', 'first')\n> -        51.0±2μs         33.3±4μs     0.65  categoricals.IsMonotonic.time_categorical_series_is_monotonic_decreasing\n> -     2.53±0.01ms      1.64±0.01ms     0.65  groupby.RankWithTies.time_rank_ties('float64', 'min')\n> -        13.8±2ms       8.96±0.1ms     0.65  strings.Cat.time_cat(0, ',', None, 0.15)\n> -     2.58±0.07ms      1.67±0.01ms     0.65  groupby.RankWithTies.time_rank_ties('float32', 'dense')\n> -         107±2ms         69.3±1ms     0.65  index_object.IndexAppend.time_append_int_list\n> -        11.9±1ms       7.63±0.2ms     0.64  frame_methods.ToString.time_to_string_floats\n> -      2.56±0.1ms      1.63±0.01ms     0.64  groupby.RankWithTies.time_rank_ties('float32', 'average')\n> -      2.77±0.3ms      1.75±0.06ms     0.63  rolling.Quantile.time_quantile('Series', 10, 'int', 1, 'higher')\n> -      2.56±0.7ms         1.62±0ms     0.63  groupby.RankWithTies.time_rank_ties('datetime64', 'max')\n> -      6.92±0.3ms      4.37±0.03ms     0.63  stat_ops.FrameOps.time_op('median', 'int', 0, True)\n> -         312±3ns          196±1ns     0.63  timedelta.TimedeltaProperties.time_timedelta_microseconds\n> -      6.93±0.3ms      4.33±0.05ms     0.62  stat_ops.FrameOps.time_op('median', 'int', 0, False)\n> -      2.64±0.1ms      1.65±0.01ms     0.62  groupby.RankWithTies.time_rank_ties('float64', 'max')\n> -      2.69±0.2ms      1.66±0.01ms     0.62  groupby.RankWithTies.time_rank_ties('int64', 'first')\n> -     2.65±0.08ms      1.64±0.01ms     0.62  groupby.RankWithTies.time_rank_ties('float32', 'min')\n> -        31.0±1μs       19.2±0.9μs     0.62  offset.OffestDatetimeArithmetic.time_subtract_10(<QuarterEnd: startingMonth=3>)\n> -      2.67±0.1ms      1.65±0.01ms     0.62  groupby.RankWithTies.time_rank_ties('float64', 'average')\n> -     3.45±0.09ms      2.13±0.05ms     0.62  ctors.SeriesConstructors.time_series_constructor(<function SeriesConstructors.<lambda> at 0x1136817b8>, True)\n> -       474±100ms          290±5ms     0.61  indexing.NonNumericSeriesIndexing.time_getitem_list_like('datetime', 'nonunique_monotonic_inc')\n> -        26.6±1μs       16.2±0.2μs     0.61  offset.OffestDatetimeArithmetic.time_subtract(<YearBegin: month=1>)\n> -      2.64±0.1ms      1.61±0.01ms     0.61  groupby."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433392883",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18532#issuecomment-433392883",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18532",
    "id": 433392883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzM5Mjg4Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T12:36:12Z",
    "updated_at": "2018-10-26T12:37:32Z",
    "author_association": "MEMBER",
    "body": "There seem to be some jumps in some of the benchmarks since the last run, eg http://pandas.pydata.org/speed/pandas/#algorithms.Factorize.time_factorize_float? \r\nThat one eg I cannot reproduce locally comparing master with 0.23.4:\r\n\r\n```\r\nN = 10**5\r\nfloat_idx = pd.Float64Index(np.random.randn(N).repeat(5))\r\n\r\n%timeit float_idx.factorize()\r\n```\r\n\r\n(and it also does not show a big difference in the output above of @mroeschke )\r\n"
  }
]
