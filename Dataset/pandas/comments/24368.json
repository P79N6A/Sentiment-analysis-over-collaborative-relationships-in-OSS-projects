[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/449037989",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24368#issuecomment-449037989",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24368",
    "id": 449037989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTAzNzk4OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-20T15:34:51Z",
    "updated_at": "2018-12-20T15:34:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "We spend basically all our time in sanitize_array / _try_cast / `construct_1d_object_array_from_listlike`\r\n\r\nAnd of that, all the time is in NumPy.\r\n\r\n```\r\nLine #      Hits         Time  Per Hit   % Time  Line Contents\r\n==============================================================\r\n  1189                                           def construct_1d_object_array_from_listlike(values):\r\n  1190                                               \"\"\"\r\n  1191                                               Transform any list-like object in a 1-dimensional numpy array of object\r\n  1192                                               dtype.\r\n  1193                                           \r\n  1194                                               Parameters\r\n  1195                                               ----------\r\n  1196                                               values : any iterable which has a len()\r\n  1197                                           \r\n  1198                                               Raises\r\n  1199                                               ------\r\n  1200                                               TypeError\r\n  1201                                                   * If `values` does not have a len()\r\n  1202                                           \r\n  1203                                               Returns\r\n  1204                                               -------\r\n  1205                                               1-dimensional numpy array of dtype object\r\n  1206                                               \"\"\"\r\n  1207                                               # numpy will try to interpret nested lists as further dimensions, hence\r\n  1208                                               # making a 1D array that contains list-likes is a bit tricky:\r\n  1209         3         29.0      9.7      0.0      result = np.empty(len(values), dtype='object')\r\n  1210         3     723782.0 241260.7    100.0      result[:] = values\r\n  1211         3          3.0      1.0      0.0      return result\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/453267382",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24368#issuecomment-453267382",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24368",
    "id": 453267382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzI2NzM4Mg==",
    "user": {
      "login": "milindsmart",
      "id": 2503860,
      "node_id": "MDQ6VXNlcjI1MDM4NjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2503860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/milindsmart",
      "html_url": "https://github.com/milindsmart",
      "followers_url": "https://api.github.com/users/milindsmart/followers",
      "following_url": "https://api.github.com/users/milindsmart/following{/other_user}",
      "gists_url": "https://api.github.com/users/milindsmart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/milindsmart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/milindsmart/subscriptions",
      "organizations_url": "https://api.github.com/users/milindsmart/orgs",
      "repos_url": "https://api.github.com/users/milindsmart/repos",
      "events_url": "https://api.github.com/users/milindsmart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/milindsmart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T21:51:03Z",
    "updated_at": "2019-01-10T21:51:03Z",
    "author_association": "NONE",
    "body": "I would like to add my vote to actually go through with this performance enhancement (more like performance bug fix): constructing a DataFrame with index and columns as Index objects is around 200 times slower than constructing with np.zeros and then assigning to index and columns... see below. It's really weird and counter-intuitive given how (seemingly?) simple the operation is\r\n\r\n```\r\ndf_a = pd.DataFrame(index=list(range(1000)))\r\ndf_b = pd.DataFrame(index=list(range(10000)))\r\n\r\n%timeit df_c = pd.DataFrame(index=df_a.index,columns=df_b.index)\r\n800 ms ± 70 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n\r\n%timeit df_d = pd.DataFrame(np.zeros((df_a.shape[0],df_b.shape[0]))); df_d.index = df_a.index; df_d.columns = df_b.index\r\n4.36 ms ± 52 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/453270443",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24368#issuecomment-453270443",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24368",
    "id": 453270443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzI3MDQ0Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T22:00:07Z",
    "updated_at": "2019-01-10T22:00:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, we'll get there, probably for 0.24.1. Just need to do it in a way that's maintainable."
  }
]
