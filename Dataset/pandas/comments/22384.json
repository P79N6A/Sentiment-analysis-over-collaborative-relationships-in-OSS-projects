[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413529622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22384#issuecomment-413529622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22384",
    "id": 413529622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzUyOTYyMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-16T12:32:26Z",
    "updated_at": "2018-08-16T12:32:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "To be clear, there are a couple levels we could take on here.\r\n\r\nAt a minimum, I think `.astype('dtype_name')` where dtype_name is in our registry, should work, even if it's inefficient. That can be solved before going down a full dispatch mechanism."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413858457",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22384#issuecomment-413858457",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22384",
    "id": 413858457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzg1ODQ1Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T13:03:31Z",
    "updated_at": "2018-08-17T13:03:31Z",
    "author_association": "MEMBER",
    "body": "Let's try to summarise the (ideal) requirements:\r\n\r\n- We want that EA's can implement logic of converting itself to another dtype, so we at least need to dispatch somehow to EA's\r\n- But, we also want that EA's don't have to be aware of all possible target dtypes + some target dtypes might want to take over the conversion (such as categorical, see below)\r\n- We want EA's to have control over how values are converted to it when the target dtype is an EA\r\n  - This is currently already done by doing `dtype.construct_array_type()._from_sequence(..)` if `dtype` is an EA dtype\r\n- The `EA.astype` function itself should be user-functional (eg not return NotImplemented for some kind of dispatch mechanism)\r\n\r\nDoes that sound right?\r\n\r\n---\r\n\r\nIn the PR I mentioned the idea of a \"negotation protocol\" (https://github.com/pandas-dev/pandas/pull/22343#issuecomment-412975823) similar to how operators work in Python:\r\n\r\n- When doing an `astype` operation (eg `Series(EA).astype(dtype)`), we first check if the values (the array backing the series) know how to do this conversion:\r\n  - if values is a numpy array, we call `astype` if `dtype` is a numpy dtype, otherwise go further with next step below\r\n  - if values is an EA, we call ``EA.__astype(dtype)`` -> if the EA knows how to handle the specific `dtype`, it returns a new EA/array; if it does not know how to convert itself to `dtype`, it returns NotImplemented and we continue with the next step\r\n- Next, we check if the target `dtype` knows how to convert the values to its own dtype -> if it knows, it returns a new EA/array; otherwise it returns NotImplemented\r\n- if both don't know (above return NotImplemented again), either raise an error or fall back to the base implementation (`np.array(self, dtype=dtype,`, which might also raise an error)\r\n\r\nI used here `__astype` instead of `astype`, because we don't want the public `EA.astype` to return NotImplemented (one of the concerns raised in the PR). As Tom noted a bit messy, but not too much I think. \r\n\r\nThe other concern raised is the divergence between `Series.astype(dtype)` and `Series.values.astype(dtype)` (where the first would be able to handle more dtypes. Eg `Series.values.astype('category')` would not work if the EA didn't implement that itself). \r\n\r\nHowever, I think it should be possible (if the EA author wants that) to have this more consistent, and we could implement a base class `astype` example that does this, by calling `dtype.construct_array_type()._from_sequence(..).`, just as we do in pandas.\r\n\r\n---\r\n\r\nAnother possibility would be that we provide some helper function for EA authors (and for internal use) that basically does the above, but simply inside the `astype` method. And then just always dispatch to EA.astype.\r\n\r\nFor example, the `EA.astype` method could look like:\r\n\r\n```\r\ndef astype(self, dtype):\r\n    if dtype ... [check if if I know what to do for this dtype]:\r\n        ...\r\n        return values\r\n    else:\r\n        return pandas_astype(self, dtype)\r\n```\r\n\r\nwith \r\n\r\n```\r\ndef pandas_astype(values, dtype):\r\n    if is_extension_dtype(dtype):\r\n        return dtype.construct_array_type()._from_sequence(values)\r\n    else:\r\n        return np.array(values, dtype=dtype)\r\n```\r\n\r\nBut that then counts on the EA's actually doing this.\r\n\r\n\r\n"
  }
]
