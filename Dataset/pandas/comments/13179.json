[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219235919",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219235919",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219235919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTIzNTkxOQ==",
    "user": {
      "login": "mpschr",
      "id": 1090105,
      "node_id": "MDQ6VXNlcjEwOTAxMDU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1090105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpschr",
      "html_url": "https://github.com/mpschr",
      "followers_url": "https://api.github.com/users/mpschr/followers",
      "following_url": "https://api.github.com/users/mpschr/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpschr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpschr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpschr/subscriptions",
      "organizations_url": "https://api.github.com/users/mpschr/orgs",
      "repos_url": "https://api.github.com/users/mpschr/repos",
      "events_url": "https://api.github.com/users/mpschr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpschr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-14T18:32:40Z",
    "updated_at": "2016-05-14T18:32:40Z",
    "author_association": "NONE",
    "body": "I cannot be a 100% sure, but it seems that this bug is closely related with: pydata/pandas#10505 and  pydata/pandas#10508\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219237975",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219237975",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219237975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTIzNzk3NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-14T19:13:42Z",
    "updated_at": "2016-05-14T19:13:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "So the purpose of the `.unique()` here is to put the categoricals in the order of appearance, BUT, crucially unused categories are removed (and that's the error that's popping up). \n\nSo in this case you are removing the values for category '1', BUT that should still show up in the results as its a categorical.\n\nfor `sort=True`, actually is already sorted in order of the categoricals.\n\n```\nIn [7]: df.query(\"chromosomes != '1'\").groupby('chromosomes').A.sum()\nOut[7]: \nchromosomes\n1       NaN\n2     157.0\n3     115.0\n4     477.0\n5     274.0\n6     172.0\n7     221.0\n8     290.0\n9     231.0\n10    434.0\n11    196.0\n12    243.0\n13    109.0\n14    217.0\n15     89.0\n16    193.0\n17    417.0\n18     58.0\n19    149.0\n20    144.0\n21    166.0\n22    334.0\nX     147.0\nY     316.0\nName: A, dtype: float64\n```\n\nI suppose for `sort=False` you then can put the NA groups at the front or back (e.g the '1' group), the remainder will then be in the order of appearance (e.g. the `uniquie`). \n\nI think would just do this in groupby (or _maybe_ add a kw arg to `.unique` to return all of the categories, even unsued ones; maybe we should do that by default)? not really sure why we are excluding unused ones.\n\ncc @jorisvandenbossche \ncc @janschulz \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219237996",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219237996",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219237996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTIzNzk5Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-14T19:14:09Z",
    "updated_at": "2016-05-14T19:14:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @sinhrks \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219274256",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219274256",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219274256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTI3NDI1Ng==",
    "user": {
      "login": "mpschr",
      "id": 1090105,
      "node_id": "MDQ6VXNlcjEwOTAxMDU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1090105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpschr",
      "html_url": "https://github.com/mpschr",
      "followers_url": "https://api.github.com/users/mpschr/followers",
      "following_url": "https://api.github.com/users/mpschr/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpschr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpschr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpschr/subscriptions",
      "organizations_url": "https://api.github.com/users/mpschr/orgs",
      "repos_url": "https://api.github.com/users/mpschr/repos",
      "events_url": "https://api.github.com/users/mpschr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpschr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-15T09:04:00Z",
    "updated_at": "2016-05-15T09:04:27Z",
    "author_association": "NONE",
    "body": "Hi @jreback - Thanks for receiving the bug report. I have just a little doubt as a layman here: is it convention to return a 'group' (in the groupby) for all the categories even tough there is no data for them available in the supplied data?\n\nImagine I make a query for just chromosomes `4` and `5` for whatever (biological investigative) reason - I would not expect results back for the other chromosomes I think (as follows):\n\n``` python\nquery_chroms = ['4', '5']\ndf[df.chromosomes.isin(query_chroms)].groupby('chromosomes').A.sum()\n\nchromosomes\n4     195.0\n5     394.0\nName: A, dtype: float64\n\n\n# as opposed to :\n\nchromosomes\n1       NaN\n2       NaN\n3       NaN\n4     195.0\n5     394.0\n6       NaN\n7       NaN\n8       NaN\n9       NaN\n10      NaN\n11      NaN\n12      NaN\n13      NaN\n14      NaN\n15      NaN\n16      NaN\n17      NaN\n18      NaN\n19      NaN\n20      NaN\n21      NaN\n22      NaN\nX       NaN\nY       NaN\nName: A, dtype: float64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219287376",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219287376",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219287376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTI4NzM3Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-15T13:58:40Z",
    "updated_at": "2016-05-15T13:58:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mpschr yes, this is the purpose of `Categoricals`. to return full categories. You made an explict choice to use them and so it must be explict to drop them; that is the point here.\n\nIf you think about it would be buggy to remove them! IOW, how would the code know its 'ok' to drop them?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219295053",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219295053",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219295053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTI5NTA1Mw==",
    "user": {
      "login": "mpschr",
      "id": 1090105,
      "node_id": "MDQ6VXNlcjEwOTAxMDU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1090105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpschr",
      "html_url": "https://github.com/mpschr",
      "followers_url": "https://api.github.com/users/mpschr/followers",
      "following_url": "https://api.github.com/users/mpschr/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpschr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpschr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpschr/subscriptions",
      "organizations_url": "https://api.github.com/users/mpschr/orgs",
      "repos_url": "https://api.github.com/users/mpschr/repos",
      "events_url": "https://api.github.com/users/mpschr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpschr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-15T16:17:10Z",
    "updated_at": "2016-05-15T16:19:13Z",
    "author_association": "NONE",
    "body": "Hi @jreback I am not sure if we are talking about the same thing. I elaborte: I was referring to the data available in the `DataFrame`. Of course the categories which have been established as categories in `df.chromosomes.cat.categories` should never be dropped - even tough they are not represented in the DataFrame. Exactly as shown here:\n\n``` python\n\nquery_chroms = ['4', '5']\ndf[df.chromosomes.isin(query_chroms)].chromosomes\n71    4\n72    4\n73    4\n74    5\n75    5\n76    5\n77    5\n78    5\n79    5\n80    5\n81    5\nName: chromosomes, dtype: category\nCategories (24, object): [1 < 2 < 3 < 4 ... 21 < 22 < X < Y]\n```\n\n**But**, analogously to this I would expect the following output after doing groupby:\n\n``` python\n\ndf[df.chromosomes.isin(query_chroms)].groupby('chromosomes').A.sum().reset_index().chromosomes\n\n#expected output:\nchromosomes\n1      4\n2      5\nName: chromosomes, dtype: category\nCategories (24, object): [1 < 2 < 3 < 4 ... 21 < 22 < X < Y]\n\n#but actual output is.\n\n0      1\n1      2\n2      3\n3      4\n4      5\n5      6\n6      7\n7      8\n8      9\n9     10\n10    11\n11    12\n12    13\n13    14\n14    15\n15    16\n16    17\n17    18\n18    19\n19    20\n20    21\n21    22\n22     X\n23     Y\nName: chromosomes, dtype: category\nCategories (24, object): [1 < 2 < 3 < 4 ... 21 < 22 < X < Y]\n```\n\nThe actual output (2nd option) we get here is misleading since all chromosomes except 4 and 5 are not in the supplied data, they are just 'acceptable' options. Is it possible that this two different viewpoints may contribute to the bug reported here?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219471584",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219471584",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219471584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTQ3MTU4NA==",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-16T16:24:45Z",
    "updated_at": "2016-05-16T16:24:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mpschr:\nThere is a different \"view\" for categoricals and groupby: if I have a lickert scale and want to get number of times each value was ticked, I want \"unused\" groups to show up as `0`. That was at least the idea behind having all groups show up in groupby and such things.\n\n> I think would just do this in groupby (or maybe add a kw arg to .unique to return all of the categories, even unsued ones; maybe we should do that by default)? Not really sure why we are excluding unused ones.\n\nI think there was a specific reason why unique is now not returning the whole categories (AFAIK remember the first implementation simply returned the categories). I think because someone argued that the implicit API contract for `unique` ist that it returns only used values (and ordered in in appearance as that was what seaborn/plots expected).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219637482",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219637482",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219637482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTYzNzQ4Mg==",
    "user": {
      "login": "mpschr",
      "id": 1090105,
      "node_id": "MDQ6VXNlcjEwOTAxMDU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1090105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpschr",
      "html_url": "https://github.com/mpschr",
      "followers_url": "https://api.github.com/users/mpschr/followers",
      "following_url": "https://api.github.com/users/mpschr/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpschr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpschr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpschr/subscriptions",
      "organizations_url": "https://api.github.com/users/mpschr/orgs",
      "repos_url": "https://api.github.com/users/mpschr/repos",
      "events_url": "https://api.github.com/users/mpschr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpschr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-17T07:13:27Z",
    "updated_at": "2016-05-17T14:10:40Z",
    "author_association": "NONE",
    "body": "Ok, so this is the current behaviour:\n\n``` python\n# 1.\n\nquery_chroms = ['4', '5']\ndf[df.chromosomes.isin(query_chroms)].chromosomes.unique()\n#output\n[4, 5]\nCategories (2, object): [4 < 5]\n\n```\n\nagain - here what a layman like me would expect is the following.\n\n``` python\n# 2.\n\nquery_chroms = ['4', '5']\ndf[df.chromosomes.isin(query_chroms)].chromosomes.unique()\n#output\n[4, 5]\nCategories (24, object): [1 < 2 < 3 < 4 ... 21 < 22 < X < Y]\n\n```\n\nNow I understood the bug :) The `seaborn` library should be able to work with the `unique` _used_ values as in example 2, right?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219726310",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219726310",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219726310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTcyNjMxMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-17T14:00:20Z",
    "updated_at": "2016-05-17T14:00:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mpschr not sure what you mean. This is as expected. The point is that the category dtype IS propogated to ALL operations. There is extensive documentation on this. What exactly is not clear? (the bug in this issue is independent / not related to this).\n\n```\nIn [8]: df[df.chromosomes.isin(query_chroms)].chromosomes\nOut[8]: \n61    4\n62    4\n63    4\n64    4\n65    4\n66    4\n67    4\n68    4\n69    5\n70    5\n71    5\n72    5\nName: chromosomes, dtype: category\nCategories (24, object): [1 < 2 < 3 < 4 ... 21 < 22 < X < Y]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219729508",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219729508",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219729508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTcyOTUwOA==",
    "user": {
      "login": "mpschr",
      "id": 1090105,
      "node_id": "MDQ6VXNlcjEwOTAxMDU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1090105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpschr",
      "html_url": "https://github.com/mpschr",
      "followers_url": "https://api.github.com/users/mpschr/followers",
      "following_url": "https://api.github.com/users/mpschr/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpschr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpschr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpschr/subscriptions",
      "organizations_url": "https://api.github.com/users/mpschr/orgs",
      "repos_url": "https://api.github.com/users/mpschr/repos",
      "events_url": "https://api.github.com/users/mpschr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpschr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-17T14:10:57Z",
    "updated_at": "2016-05-17T14:10:57Z",
    "author_association": "NONE",
    "body": "Yep @jreback - I think I went a bit off-topic with the groupby behaviour (including unused categories in the output of group aggregations).\n\nIn any case I totally agree with you on the matter with the `unique` behavior, as posted in my last comment. The unused categories should not be discarded from the `cat.categories` when gettting `df.chromosomes.unique()`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219746993",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-219746993",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 219746993,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTc0Njk5Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-17T15:04:41Z",
    "updated_at": "2016-05-17T15:04:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@janschulz \n\n> I think would just do this in groupby (or maybe add a kw arg to .unique to return all of the categories, even unsued ones; maybe we should do that by default)? Not really sure why we are excluding unused ones.\n> \n> > I think there was a specific reason why unique is now not returning the whole categories (AFAIK remember the first implementation simply returned the categories). I think because someone argued that the implicit API contract for unique ist that it returns only used values (and ordered in in appearance as that was what seaborn/plots expected).\n\nyeah I don't really recall all of the discussion about `.unique` (though there were many!).\n\nYeah I can see how we just return the observed values\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/276669741",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-276669741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 276669741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjY2OTc0MQ==",
    "user": {
      "login": "mpschr",
      "id": 1090105,
      "node_id": "MDQ6VXNlcjEwOTAxMDU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1090105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpschr",
      "html_url": "https://github.com/mpschr",
      "followers_url": "https://api.github.com/users/mpschr/followers",
      "following_url": "https://api.github.com/users/mpschr/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpschr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpschr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpschr/subscriptions",
      "organizations_url": "https://api.github.com/users/mpschr/orgs",
      "repos_url": "https://api.github.com/users/mpschr/repos",
      "events_url": "https://api.github.com/users/mpschr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpschr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T14:24:54Z",
    "updated_at": "2017-02-01T14:24:54Z",
    "author_association": "NONE",
    "body": "Has this not been fixed yet (just curiosity)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/276670602",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13179#issuecomment-276670602",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13179",
    "id": 276670602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjY3MDYwMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T14:28:22Z",
    "updated_at": "2017-02-01T14:28:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mpschr issues get closed when they are fixed. you are welcome to submit a PR to fix this. Community PR's push things along."
  }
]
