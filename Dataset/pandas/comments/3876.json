[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19379825",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19379825",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19379825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mzc5ODI1",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T08:58:43Z",
    "updated_at": "2013-06-13T08:58:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does this fix this example? Do you mind adding as a test case:\n\n```\nIn [5]: pd.read_json('[{\"a\": 1, \"b\": 2}, {\"b\":2, \"a\" :1}]')\nOut[5]:\n   0  1\na  1  2\nb  2  1\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19390383",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19390383",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19390383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkwMzgz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T13:09:17Z",
    "updated_at": "2013-06-13T13:35:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wesm \ncc @hayd \ncc @Komnomnomnom \n\nso they way I view the `numpy` flag is it assumes an ordering or is this only in combindation with `labelled=True`\n\n```\n(Pdb) read_json('[{\"a\": 1, \"b\": 2}, {\"b\":2, \"a\" :1}]',numpy=False)\n   a  b\n0  1  2\n1  1  2\n```\n\npasses `numpy=True` also passes `labelled=True`\n\n```\n(Pdb) read_json('[{\"a\": 1, \"b\": 2}, {\"b\":2, \"a\" :1}]',numpy=True)\n   0  1\na  1  2\nb  2  1\n```\n\nHere's the direct returns\n\n```\n(Pdb) pd.json.loads('[{\"a\": 1, \"b\": 2}, {\"b\":2, \"a\" :1}]',numpy=False)\n[{u'a': 1, u'b': 2}, {u'a': 1, u'b': 2}]\n(Pdb) pd.json.loads('[{\"a\": 1, \"b\": 2}, {\"b\":2, \"a\" :1}]',numpy=True,labelled=True)\n(array([[1, 2],\n       [2, 1]]), None, array([u'a', u'b'], \n      dtype='<U1'))\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19397376",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19397376",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19397376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mzk3Mzc2",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T14:59:25Z",
    "updated_at": "2013-06-13T14:59:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback with `numpy=True` the parser tries to decode directly to numpy arrays and needs the orient parameter to be correct, otherwise it will probably fail, or in this case give you transposed output. \n\n``` python\nIn [4]: pd.read_json('[{\"a\": 1, \"b\": 2}, {\"b\":2, \"a\" :1}]',numpy=True, orient='records')\nOut[4]: \n   a  b\n0  1  2\n1  2  1\n```\n\nThe labelled option is only used in conjunction with the numpy option and denotes that a pandas object is encoded to JSON objects e.g. encoded with orients like index, columns or records. When decoding labelled input it only constructs the index and column arrays once, in this case from the first JSON object, and assumes the rest of the entries will appear in the same order. This was done for convenience / performance and should work fine if an object is encoded / decoded using pandas methods, as order should be conserved. It obviously falls apart when consuming JSON from other sources though (the JSON spec makes no guarantee about order AFAIK). \n\nSo the numpy-enhanced decoder will need to be altered to support unordered input, or do you think it is enough to document that it expects ordered input and encourage users to use `numpy=False` if this is not the case? I'm happy to make the changes if support for unordered input is desired in the numpy version, but it'll be a few days.\n\nBTW on a semi-related note I've just noticed that the doc string info for `DataFrame` encoding got lost along the way somewhere. `read_json`'s info on `orient` only applies to `Series`. For `DataFrame` there's a bit more to it:\n\n``` python\n'''\norient : {'split', 'records', 'index', 'columns', 'values'},\n             default 'columns'\n        The format of the JSON string\n        split : dict like\n            {index -> [index], columns -> [columns], data -> [values]}\n        records : list like [{column -> value}, ... , {column -> value}]\n        index : dict like {index -> {column -> value}}\n        columns : dict like {column -> {index -> value}}\n        values : just the values array\n'''\n```\n\n(taken from [here](https://github.com/pydata/pandasjson/blob/master/pandasjson.py#L91))\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19398420",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19398420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19398420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mzk4NDIw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T15:14:51Z",
    "updated_at": "2013-06-13T15:14:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Komnomnomnom \n\n2nd issue first, the doc string appears for me in ipython (pd.read_json?)\nwhere are you looking?\n\n`pd.read_json` is now a top-level method, rather than on a specific return object (this makes it consistent)\nwith other io routines, so the doc-string is not there on an object (nor can you call the method on\n`DataFrame.read_json`\n\n1st issue:\n\nI undestand why you did make the numpy option as you did. It think it is fine, but assumes an ordering in the input stream (which I agree is maybe not so prevalent).\n\n`numpy=True` is the default option now, maybe I should flip them, and so if you are sure you input is ordered then you can pass `numpy=True`\n\nI am not sure how json in the real-world is usually presented, anyone? @hayd \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19399403",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19399403",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19399403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mzk5NDAz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T15:29:39Z",
    "updated_at": "2013-06-13T15:29:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Komnomnomnom \nI changed the default to not do numpy parsing first, works fine\n\nis it (performance wise) expensive to verify that the ordering is consistent when running with `numpy=True`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19400241",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19400241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19400241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDAwMjQx",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T15:41:57Z",
    "updated_at": "2013-06-13T15:41:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I expect that there is a lot of _funky_ json out there (and it's unordered in the spec), so in my opinion unordered should be assumed (default)...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19400453",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19400453",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19400453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDAwNDUz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T15:44:57Z",
    "updated_at": "2013-06-13T15:44:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep....latest commit now makes that the default (and I don't think its that much slower in any event)\n\nhappens to be slightly faster here\n\n```\nIn [1]: %time with open('citylots.json', 'r') as f: pd.read_json(f.read())\nCPU times: user 5.88 s, sys: 0.38 s, total: 6.26 s\nWall time: 6.28 s\n\nIn [2]: %time with open('citylots.json', 'r') as f: pd.read_json(f.read(),numpy=True)\nCPU times: user 6.33 s, sys: 0.18 s, total: 6.51 s\nWall time: 6.53 s\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19401399",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19401399",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19401399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDAxMzk5",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T15:58:25Z",
    "updated_at": "2013-06-13T15:58:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback the docstring appears but the information for the orient parameter only applies to `Series`. orient has some different values and the JSON format is slightly different for `DataFrame`. \n\nHere's the docstring I see\n\n```\nConvert JSON string to pandas object\n\nParameters\n----------\nfilepath_or_buffer : a VALID JSON string or file handle / StringIO. The string could be\n    a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host\n    is expected. For instance, a local file could be\n    file ://localhost/path/to/table.json\norient : {'split', 'records', 'index'}, default 'index'\n    The format of the JSON string\n    split : dict like\n        {index -> [index], name -> name, data -> [values]}\n    records : list like [value, ... , value]\n    index : dict like {index -> value}\ntyp : type of object to recover (series or frame), default 'frame'\ndtype : dtype of the resulting object\nnumpy: direct decoding to numpy arrays. default True but falls back\n    to standard decoding if a problem occurs.\nparse_dates : a list of columns to parse for dates; If True, then try to parse datelike columns\n    default is False\nkeep_default_dates : boolean, default True. If parsing dates,\n    then parse the default datelike columns\n\nReturns\n-------\nresult : Series or DataFrame\n```\n\nI guess the information presented for orient needs to be split into DataFrame and Series details, the rest of the parameters are the same for both I think.\n\nIf `numpy=True` is not the default then I don't think it should fall back to the standard decoder, if it fails then the caller should handle it, as they've specifically requested direct-to-numpy behaviour and should know if it failed. What do you think?\n\nRegarding supporting unordered input and the performance impact, I guess once the index / columns (labels) are parsed from the first JSON object into numpy arrays it would then need to perform a lookup on those arrays to get the correct position when parsing subsequent JSON objects. Another parameter to turn this behaviour on/off probably?\n\nThe numpy version is only valuable if you're decoding numeric dtypes (i.e. no strings apart from the columns and index labels). If there are any strings in the values it will fall back to the default decoder anyway. I don't know what json you tested with but I'm guessing that's probably why it ends up being slower for you (it tries numpy first and then falls back to the standard decoder).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19402094",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19402094",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19402094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDAyMDk0",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T16:09:00Z",
    "updated_at": "2013-06-13T16:09:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "That big city json I found is a terrible example (sorry) - it's really nested.\n\n+1 on not falling back from numpy=True.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19403331",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19403331",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19403331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDAzMzMx",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T16:27:32Z",
    "updated_at": "2013-06-13T16:27:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also always passing in `dtype=None` to the decoder when using `numpy=True` may cause some issues. If no dtype is provided the decoder performs a pretty basic attempt to sniff the dtype for the numpy arrays it is about to fill and may get it wrong i.e. int instead of say a desired float dtype.\n\nSeeing as the dtype param is now used for coercing values after decoding perhaps the numpy param could be altered to accept a dtype as well as boolean, and this would be passed to the decoder for its own use? Or am I just making things too confusing?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19407469",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19407469",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19407469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDA3NDY5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T17:14:33Z",
    "updated_at": "2013-06-13T17:14:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, default is changed now to `numpy=False`, and no fallback parsing when True.\nThe only case it came up an error was all (or partial) strings in the Frame\n\n@Komnomnomnom fixed up the docstrings & docs to reflect Series/DataFrame differences with orientation\n\nas far as passing `dtype=None` I found no issues with this; The only future request and not sure how useful, would be to have you turn off ALL dtype inference (and just return as object); this is the theory behind passing `dtype=False` but you still parse floats/ints. I don't think this is that important as the inference is good on your end and I have options for most of the potentially problemetic inference once you are done parsing anyhow..\n\njust a thought\n\n```\nIn [1]: pd.read_json(DataFrame('foo',index=range(3),columns=list('AB')).to_json())\nOut[1]: \n     A    B\n0  foo  foo\n1  foo  foo\n2  foo  foo\n\nIn [2]: pd.read_json(DataFrame('foo',index=range(3),columns=list('AB')).to_json(),numpy=True)\nValueError: Cannot decode multidimensional arrays with variable length elements to numpy\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19417461",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19417461",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19417461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDE3NDYx",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T19:12:50Z",
    "updated_at": "2013-06-13T19:12:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's great thanks @jreback :-)\n\nAs for the dtype inference you could be right, I initially wrote it with just basic types in mind and deliberately fell back for anything else (hence the ValueError). I can't remember exactly but I think there were some complications with building numpy arrays in C and variable length elements (strings, objects etc).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/19417554",
    "html_url": "https://github.com/pandas-dev/pandas/pull/3876#issuecomment-19417554",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3876",
    "id": 19417554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDE3NTU0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T19:14:14Z",
    "updated_at": "2013-06-13T19:14:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok....let's everyone play around some more with this...but +1 to @Komnomnomnom for making it easy!\n"
  }
]
