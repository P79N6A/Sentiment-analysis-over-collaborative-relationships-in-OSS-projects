[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3739650",
    "html_url": "https://github.com/pandas-dev/pandas/issues/722#issuecomment-3739650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/722",
    "id": 3739650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk2NTA=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-31T14:16:18Z",
    "updated_at": "2012-01-31T14:16:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you paste some values of your series? The axis argument in the mean etc. functions are only there for api compatibility and should not really be necessary for normal operation, b/c series are supposedly 1D objects.  Thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3739955",
    "html_url": "https://github.com/pandas-dev/pandas/issues/722#issuecomment-3739955",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/722",
    "id": 3739955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk5NTU=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-31T14:31:25Z",
    "updated_at": "2012-01-31T14:31:25Z",
    "author_association": "MEMBER",
    "body": "Not sure how this is happening but glanced at `nanops.py` in git master and it doesn't look like this can happen there. Can you build from GitHub (or use the 0.7.0rc1 installer from PyPI) and if there is an error post a full stack trace plus the data itself?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3743284",
    "html_url": "https://github.com/pandas-dev/pandas/issues/722#issuecomment-3743284",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/722",
    "id": 3743284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDMyODQ=",
    "user": {
      "login": "philbigdog",
      "id": 1379464,
      "node_id": "MDQ6VXNlcjEzNzk0NjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1379464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philbigdog",
      "html_url": "https://github.com/philbigdog",
      "followers_url": "https://api.github.com/users/philbigdog/followers",
      "following_url": "https://api.github.com/users/philbigdog/following{/other_user}",
      "gists_url": "https://api.github.com/users/philbigdog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philbigdog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philbigdog/subscriptions",
      "organizations_url": "https://api.github.com/users/philbigdog/orgs",
      "repos_url": "https://api.github.com/users/philbigdog/repos",
      "events_url": "https://api.github.com/users/philbigdog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philbigdog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-31T17:17:01Z",
    "updated_at": "2012-01-31T17:17:01Z",
    "author_association": "NONE",
    "body": "Hi, thanks for the replies.\nI ran some simple tests in ipython based on my logfile, to simulate the same structures in the main application (in short it uses DataFrames and Series created from dicts).\nI'll try the 0.7.0rc1 build in my next test, thx for the advice Wes.\n\nC:\\BOOST_~1>ipython\nEnthought Python Distribution -- www.enthought.com\n\nPython 2.7.1 |EPD 7.2-1 (32-bit)| (r271:86832, Dec  2 2010, 10:35:02) [MSC v.1500 32 bit (Intel)]\n\nIn [1]: from pandas import Series\nIn [4]: from datetime import date\nIn [6]: dict = {date(2012,01,31):[-27.0,-26.0,-34.0,-21.0,-43.0,-34.0]}\nIn [7]: s = Series(dict)\nIn [8]: s\nOut[8]: 2012-01-31    [-27.0, -26.0, -34.0, -21.0, -43.0, -34.0]\n\n## In [9]: s.mean()\n\nTypeError                                 Traceback (most recent call last)\nC:\\BOOST_~1<ipython-input-9-115fb75d3a77> in <module>()\n----> 1 s.mean()\n\nC:\\Python27\\lib\\site-packages\\pandas\\core\\series.py in mean(self, axis, dtype, out, skipna, level)\n    648         if level is not None:\n    649             return self._agg_by_level('mean', level=level, skipna=skipna)\n--> 650         return nanops.nanmean(self.values, skipna=skipna)\n    651     _add_stat_doc(mean, 'mean', 'mean', extras=_doc_ndarray_interface)\n    652\n\nC:\\Python27\\lib\\site-packages\\pandas\\core\\nanops.pyc in nanmean(values, axis, skipna, copy)\n     28 def nanmean(values, axis=None, skipna=True, copy=True):\n     29     if values.dtype == np.object_:\n---> 30         the_mean = values.sum(axis) / float(values.shape[axis])\n     31     else:\n     32         mask = isnull(values)\n\nTypeError: tuple indices must be integers, not NoneType\nIn [10]: dictB = {date(2012,1,31):[44,55,77,33,11,99]}\nIn [11]: t = Series(dictB)\nIn [12]: t\nOut[12]: 2012-01-31    [44, 55, 77, 33, 11, 99]\n\n## In [13]: t.mean()\n\nTypeError                                 Traceback (most recent call last)\nC:\\BOOST_~1<ipython-input-13-b87aa292e7a7> in <module>()\n----> 1 t.mean()\n\nC:\\Python27\\lib\\site-packages\\pandas\\core\\series.py in mean(self, axis, dtype, out, skipna, level)\n    648         if level is not None:\n    649             return self._agg_by_level('mean', level=level, skipna=skipna)\n--> 650         return nanops.nanmean(self.values, skipna=skipna)\n    651     _add_stat_doc(mean, 'mean', 'mean', extras=_doc_ndarray_interface)\n    652\n\nC:\\Python27\\lib\\site-packages\\pandas\\core\\nanops.pyc in nanmean(values, axis, skipna, copy)\n     28 def nanmean(values, axis=None, skipna=True, copy=True):\n     29     if values.dtype == np.object_:\n---> 30         the_mean = values.sum(axis) / float(values.shape[axis])\n     31     else:\n     32         mask = isnull(values)\n\nTypeError: tuple indices must be integers, not NoneType\n\nIn [17]: t.values.dtype\nOut[17]: dtype('object')\nIn [18]: import numpy as np\nIn [21]: print t.values.dtype == np.object_\nTrue\n\nIt seems to be in nanops.nanmean where the actual core error happens, and it's due to the values.dtype == np.object_ being True in my case:\n\ndef nanmean(values, axis=None, skipna=True, copy=True):\n    if values.dtype == np.object_:\n        the_mean = values.sum(axis) / float(values.shape[axis])   <-- Exception thrown from here\n    else:\n        mask = isnull(values)\n....\n\nI'm \"working round\" this by passing axis=0 in.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3743392",
    "html_url": "https://github.com/pandas-dev/pandas/issues/722#issuecomment-3743392",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/722",
    "id": 3743392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDMzOTI=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-31T17:23:17Z",
    "updated_at": "2012-01-31T17:23:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there a particular reason for using Series? I would recommend using a DataFrame for this data, ie:\n\nIn [1]: from pandas import DataFrame\nIn [4]: from datetime import date\nIn [6]: dict = {date(2012,01,31):[-27.0,-26.0,-34.0,-21.0,-43.0,-34.0]}\nIn [7]: df = DataFrame(dict)\n\nIn [5]: df\nOut[5]: \n   2012-01-31\n0 -27  \n1 -26  \n2 -34  \n3 -21  \n4 -43  \n5 -34        \n\nIn [6]: df.mean()\nOut[6]: 2012-01-31   -30.83\n\nSeries is otherwise holding multidimensional data, which it's not really built for.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3747686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/722#issuecomment-3747686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/722",
    "id": 3747686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDc2ODY=",
    "user": {
      "login": "philbigdog",
      "id": 1379464,
      "node_id": "MDQ6VXNlcjEzNzk0NjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1379464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philbigdog",
      "html_url": "https://github.com/philbigdog",
      "followers_url": "https://api.github.com/users/philbigdog/followers",
      "following_url": "https://api.github.com/users/philbigdog/following{/other_user}",
      "gists_url": "https://api.github.com/users/philbigdog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philbigdog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philbigdog/subscriptions",
      "organizations_url": "https://api.github.com/users/philbigdog/orgs",
      "repos_url": "https://api.github.com/users/philbigdog/repos",
      "events_url": "https://api.github.com/users/philbigdog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philbigdog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-31T20:49:47Z",
    "updated_at": "2012-01-31T20:49:47Z",
    "author_association": "NONE",
    "body": "I am using DataFrame too, but you are totally correct - I think this will be the root cause of the issue, so apologies for raising it as a bug. I originally suspected a data issue, but it's a data-shape issue - my bad :(\nI was re-reading the docs earlier and noted Wes's comment \"Here is a basic tenet to keep in mind: data alignment is intrinsic. Link between labels and data will not be broken unless done so explicitly by you.\" which got me thinking.\n"
  }
]
