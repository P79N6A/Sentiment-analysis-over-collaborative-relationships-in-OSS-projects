[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/471240557",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25611#issuecomment-471240557",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25611",
    "id": 471240557,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTI0MDU1Nw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-10T02:26:09Z",
    "updated_at": "2019-03-10T02:26:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not sure we want to do a lot to support these multiple units, but at minimum should raise an error message - thanks for the report!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/471329897",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25611#issuecomment-471329897",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25611",
    "id": 471329897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTMyOTg5Nw==",
    "user": {
      "login": "cbarrick",
      "id": 271982,
      "node_id": "MDQ6VXNlcjI3MTk4Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/271982?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cbarrick",
      "html_url": "https://github.com/cbarrick",
      "followers_url": "https://api.github.com/users/cbarrick/followers",
      "following_url": "https://api.github.com/users/cbarrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/cbarrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cbarrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cbarrick/subscriptions",
      "organizations_url": "https://api.github.com/users/cbarrick/orgs",
      "repos_url": "https://api.github.com/users/cbarrick/repos",
      "events_url": "https://api.github.com/users/cbarrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cbarrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-10T18:14:57Z",
    "updated_at": "2019-03-10T18:14:57Z",
    "author_association": "NONE",
    "body": "FWIW, I'll describe my use case that led to the bug.\r\n\r\nI deal with weather forecasts that are released every six hours. Originally, our code base used `np.datetime64` for timestamps, and the easiest way to truncate to the six hour mark was to use 6h units. When we switched to `pd.Timestamp` incrementally, we passed numpy datetimes to the constructor, and then discovered the bug.\r\n\r\nThe two features provided by the numpy behavior are truncation and type safety. For both cases, the Pandas way is to just call `Timestamp.floor`. So the exception message should probably mention `Timestamp.floor` as a workaround.\r\n\r\nAlternatively, I think we could support the exotic units without too much trouble. I'm not familiar with Pandas internals, but presumably we could use numpy to perform a conversion to the nearest supported unit, e.g. `6h` to `h`, then proceed as usual. There might be some overflow concerns, but that's pretty rare with 64 bit timestamps.*\r\n\r\n*`datetime64[ns]` has a range of Â±300 years, so the conversion of `1600-01-01` from `6ns` to `ns` would overflow. But you're probably not using nanosecond precision to reason about dates that far in the past."
  }
]
