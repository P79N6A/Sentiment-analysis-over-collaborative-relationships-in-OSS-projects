[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456125571",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-456125571",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 456125571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjEyNTU3MQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T16:11:50Z",
    "updated_at": "2019-01-21T16:11:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this would be a reasonable enhancement - probably via some kind of parameter `to_excel(..., format='cells|table')` ?\r\n\r\nI'd start around here for the existing Excel logic.  You can ping on here with questions or also feel free to put up a WIP PR.\r\nhttps://github.com/pandas-dev/pandas/blob/6d918f07240275272999784e775b3952aeb2ecfb/pandas/io/formats/excel.py#L631\r\n\r\nThere are probably some annoying corner cases with `MultiIndex` that don't fit into the Table format - can probably raise on those.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456199092",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-456199092",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 456199092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjE5OTA5Mg==",
    "user": {
      "login": "tdamsma",
      "id": 7870803,
      "node_id": "MDQ6VXNlcjc4NzA4MDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7870803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tdamsma",
      "html_url": "https://github.com/tdamsma",
      "followers_url": "https://api.github.com/users/tdamsma/followers",
      "following_url": "https://api.github.com/users/tdamsma/following{/other_user}",
      "gists_url": "https://api.github.com/users/tdamsma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tdamsma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tdamsma/subscriptions",
      "organizations_url": "https://api.github.com/users/tdamsma/orgs",
      "repos_url": "https://api.github.com/users/tdamsma/repos",
      "events_url": "https://api.github.com/users/tdamsma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tdamsma/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T21:07:30Z",
    "updated_at": "2019-01-21T21:07:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am trying to bolt on this functionality as per @chris-b1 suggestion with an extra keyword to the already very heave `to_excel(...` function. Problem is that I can't just apply some extra formatting somewhere deep down in the writer function, as the table constructor needs to know if the header should be included, and if so what the column names are etc. So there is a bit of a mismatch with the current implementation. Also, a lot of the functionality to merge cells (and perhaps even to apply custom formatting on a per cell basis) would be a bit superfluous. ow about a separate method `to_excel_table(...` which could have a separate set of options from the `to_excel` function?\r\n\r\nFor an idea of the options we could support, here is a snippet for OpenPyXL (full example [here](https://openpyxl.readthedocs.io/en/stable/worksheet_tables.html):\r\n``` python\r\n# add column headings. NB. these must be strings\r\nws.append([\"Fruit\", \"2011\", \"2012\", \"2013\", \"2014\"])\r\nfor row in data:\r\n    ws.append(row)\r\n\r\ntab = Table(displayName=\"Table1\", ref=\"A1:E5\")\r\n\r\n# Add a default style with striped rows and banded columns\r\nstyle = TableStyleInfo(name=\"TableStyleMedium9\", showFirstColumn=False,\r\n                       showLastColumn=False, showRowStripes=True, showColumnStripes=True)\r\n```\r\n\r\nAnd from XlsxWriter\r\n```python\r\nworksheet.add_table('B3:F7', {'data': data,\r\n                              'style': 'Table Style Light 11'})\r\n```\r\n\r\nXlsxWriter supports the following keywords:\r\n```\r\nautofilter\r\nheader_row\r\nbanded_columns\r\nbanded_rows\r\nfirst_column\r\nlast_column\r\nstyle\r\ntotal_row\r\ncolumns\r\nname\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456201443",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-456201443",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 456201443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjIwMTQ0Mw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T21:18:45Z",
    "updated_at": "2019-01-21T21:18:45Z",
    "author_association": "MEMBER",
    "body": "Without having looked to deeply it *feels* like toggling this via a keyword argument would still be the better way to go, as a separate function would I think end up duplicating a lot of functionality. With that said, if you see a better way of going about it always open to ideas - probably just best to push a PR and have it reviewed in that case"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456204544",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-456204544",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 456204544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjIwNDU0NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T21:34:17Z",
    "updated_at": "2019-01-21T21:34:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "going to be -1 on a to_excel_table\r\n\r\nthis certainly should be done via a keyword\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456296918",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-456296918",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 456296918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjI5NjkxOA==",
    "user": {
      "login": "tdamsma",
      "id": 7870803,
      "node_id": "MDQ6VXNlcjc4NzA4MDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7870803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tdamsma",
      "html_url": "https://github.com/tdamsma",
      "followers_url": "https://api.github.com/users/tdamsma/followers",
      "following_url": "https://api.github.com/users/tdamsma/following{/other_user}",
      "gists_url": "https://api.github.com/users/tdamsma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tdamsma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tdamsma/subscriptions",
      "organizations_url": "https://api.github.com/users/tdamsma/orgs",
      "repos_url": "https://api.github.com/users/tdamsma/repos",
      "events_url": "https://api.github.com/users/tdamsma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tdamsma/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T07:26:31Z",
    "updated_at": "2019-01-22T07:26:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Clear, I'll give it a go and see where it leads"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/457139489",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-457139489",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 457139489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzEzOTQ4OQ==",
    "user": {
      "login": "tdamsma",
      "id": 7870803,
      "node_id": "MDQ6VXNlcjc4NzA4MDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7870803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tdamsma",
      "html_url": "https://github.com/tdamsma",
      "followers_url": "https://api.github.com/users/tdamsma/followers",
      "following_url": "https://api.github.com/users/tdamsma/following{/other_user}",
      "gists_url": "https://api.github.com/users/tdamsma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tdamsma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tdamsma/subscriptions",
      "organizations_url": "https://api.github.com/users/tdamsma/orgs",
      "repos_url": "https://api.github.com/users/tdamsma/repos",
      "events_url": "https://api.github.com/users/tdamsma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tdamsma/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-24T10:04:13Z",
    "updated_at": "2019-01-24T10:08:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chris-b1, I put up the WIP PR. \r\n \r\nFor discussion, which part of the current `to_excel` api should be supported? This is my suggestion\r\n\r\n - **`excel_writer`** ✔️\r\n - **`sheet_name`** ✔️\r\n - **`na_rep`** ✔️\r\n - **`float_format`** ✔️\r\n - **`columns`** ✔️\r\n - **`header`** ✔️\r\n - **`index`** ✔️(Every column needs a name though, if the header is included. I currently implemented defaults similar to what Excel does: Column0, Column1)\r\n - **`index_label`** ✔️\r\n - **`startrow`** ✔️ (Though it I think it is bad practice to put more than one table on a sheet, staring at cell `A1`, and would not mind discouraging any other use)\r\n - **`startcol`** ✔️\r\n - **`engine`** Only `OpenPyXL` and `XlsxWriter`\r\n - **`merge_cells`** Can not be supported\r\n - **`encoding`** ✔️️\r\n - **`inf_rep`** ✔️\r\n - **`verbose`** ✔️\r\n - **`freeze_panes`** Am not sure if the really makes sense, as the header rows is automatically semi frozen (the column names A, B etc are replaced with the header names) when a table is used and the header is scrolled out of the window.\r\n\r\n Proposed: \r\n - **`as_table`** I like this better than a `format` keyword\r\n - **`table_name`** Think this would be desirable to add\r\n\r\nAnd then there are many other other options that could be supported. think it would be better to leave that out though:\r\n\r\n - **`autofilter`**\r\n - **`banded_columns`**\r\n - **`banded_rows`**\r\n - **`first_column`**\r\n - **`last_column`**\r\n - **`style`**\r\n - **`total_row`**"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458885960",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-458885960",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 458885960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODg4NTk2MA==",
    "user": {
      "login": "tdamsma",
      "id": 7870803,
      "node_id": "MDQ6VXNlcjc4NzA4MDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7870803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tdamsma",
      "html_url": "https://github.com/tdamsma",
      "followers_url": "https://api.github.com/users/tdamsma/followers",
      "following_url": "https://api.github.com/users/tdamsma/following{/other_user}",
      "gists_url": "https://api.github.com/users/tdamsma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tdamsma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tdamsma/subscriptions",
      "organizations_url": "https://api.github.com/users/tdamsma/orgs",
      "repos_url": "https://api.github.com/users/tdamsma/repos",
      "events_url": "https://api.github.com/users/tdamsma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tdamsma/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T10:06:35Z",
    "updated_at": "2019-01-30T10:06:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@WillAyd, @jreback, @chris-b1 To effectively test the proposed `as_table` functionality, there needs to be a function the reads an excel table back into a dataframe, see also discussion of #24899. I came up with the following, which can read all tables in a workbook (regardless of which workbook they are in) into separate dataframes. \r\n\r\n```python\r\nfrom openpyxl import load_workbook\r\nfrom pandas.core.dtypes.common import is_list_like\r\nfrom pandas.core.frame import DataFrame\r\ndef read_excel_tables(io, table_name=None, index_col='auto'):\r\n    \"\"\"Read an Excel table into a pandas dataframe.\r\n    \r\n    Only supports xlsx files.\r\n    \r\n    Parameters\r\n    ----------\r\n    io : str, file descriptor or pathlib.Path\r\n    table_name : str or None, default None\r\n        Strings are used for table names. Specify None to get all \r\n        tables in a dict of dataframes. \r\n    index_col: int, list of int, None or 'auto', Default 'auto'\r\n        Column (0-indexed) to use as the row labels of the DataFrame.\r\n        Pass None if there is no such column.  If a list is passed,\r\n        those columns will be combined into a ``MultiIndex``.\r\n        'auto' will determine if there is an index column from the table\r\n        `First Column` option in Excel\r\n    \"\"\"\r\n    def get_tables(io):\r\n        # unfortunately tables are only parsed in the slower write mode\r\n        wbk = load_workbook(io, data_only=True, read_only=False)\r\n        tables = {}\r\n        for wks in wbk:\r\n            for t in wks._tables:\r\n                tables[t.name] = dict(table=t, wks=wks)\r\n        return tables\r\n\r\n    def read_table(table, wks, index_col):\r\n        columns = [col.name for col in table.tableColumns]\r\n        data_rows = wks[table.ref][\r\n            (table.headerRowCount or 0):\r\n            -table.totalsRowCount if table.totalsRowCount is not None else None]\r\n        data = [[cell.value for cell in row] for row in data_rows]\r\n        frame = DataFrame(data, columns=columns, index=None)\r\n        if index_col:\r\n            if index_col == 'auto':\r\n                if table.tableStyleInfo.showFirstColumn:\r\n                    frame.set_index(columns[0])\r\n            elif is_list_like(index_col):\r\n                frame = frame.set_index([columns[i] for i in index_col])\r\n            else:\r\n                frame = frame.set_index(columns[index_col])\r\n        return frame\r\n\r\n    tables = get_tables(io)\r\n    if table_name is not None:\r\n        return read_table(**tables[table_name], index_col=index_col)\r\n    else:\r\n        return {k: read_table(**v, index_col=index_col) for k, v in tables.items()}\r\n```\r\nI think it would make perfect sense to also include this in pandas, however not really sure where to place that code. There is currently only an `xlrd` implementation for and excel reader, but `xlrd` does not support reading tables. \r\n\r\nSo then I have the following questions:\r\n\r\n- Would it make sense to implement a read table functionality first before a write table option so it is easier to test?\r\n- Should that be a separate PR?\r\n- Would an OpenPyXL reader need to support the full (and extensive) read_excel api?\r\n- Should reading an excel table be a keyword to read_excel? As an Excel table referenced by name already implies a sheet name, if there is a header, column names, index etc. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459213914",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-459213914",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 459213914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTIxMzkxNA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T04:47:34Z",
    "updated_at": "2019-01-31T04:47:34Z",
    "author_association": "MEMBER",
    "body": "> * Would it make sense to implement a read table functionality first before a write table option so it is easier to test?\r\n\r\nMakes sense to me!\r\n\r\n\r\n\r\n> * Should that be a separate PR?\r\n\r\nYep\r\n\r\n\r\n\r\n> * Would an OpenPyXL reader need to support the full (and extensive) read_excel api?\r\n\r\nI would say yes; I don't think it makes sense to implement an engine for a small subset of functionality as it just makes our API more confusing. Note that there has been a decent amount of refactoring going on to better support community engagement on this. There's also an open issue #11499 for this.\r\n\r\nI would think if anything this is the most logical starting point to just get the reader up and working. From there you could add table support (I think better as a keyword argument in `read_excel` instead of a separate function) and from there could start working on writing to get the entire roundtripping. Again just my $.02 and for sure easier said than done, but I would welcome any PRs towards that effort\r\n\r\n\r\n\r\n> * Should reading an excel table be a keyword to read_excel? As an Excel table referenced by name already implies a sheet name, if there is a header, column names, index etc.\r\n\r\nYea I think a keyword argument makes the most sense as it keeps the API simplest and you could leverage the existing functionality of other applicable parameters"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459503943",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-459503943",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 459503943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTUwMzk0Mw==",
    "user": {
      "login": "tdamsma",
      "id": 7870803,
      "node_id": "MDQ6VXNlcjc4NzA4MDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7870803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tdamsma",
      "html_url": "https://github.com/tdamsma",
      "followers_url": "https://api.github.com/users/tdamsma/followers",
      "following_url": "https://api.github.com/users/tdamsma/following{/other_user}",
      "gists_url": "https://api.github.com/users/tdamsma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tdamsma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tdamsma/subscriptions",
      "organizations_url": "https://api.github.com/users/tdamsma/orgs",
      "repos_url": "https://api.github.com/users/tdamsma/repos",
      "events_url": "https://api.github.com/users/tdamsma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tdamsma/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T20:58:38Z",
    "updated_at": "2019-01-31T20:58:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Didn't know that supporting more readers was an ongoing development. Are you still working on that? Also, just out of curiosity, what is the rationale for supporting multiple excel libraries? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459505903",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-459505903",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 459505903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTUwNTkwMw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T21:04:53Z",
    "updated_at": "2019-01-31T21:04:53Z",
    "author_association": "MEMBER",
    "body": "I haven't actually put any code into it, just be reorganizing things in hopes of better community engagement.\r\n\r\nAs far as supporting multiple libraries goes the libraries support different file types. Openpyxl I believe is only .xlsx format, xlrd can handle .xls in addition to .xlsx. Off the top of my head I don't think either support .xlsb and not sure about .xlsm, so having multiple engines gives flexibility to seamlessly deal with different file types amongst potential other optimizations available to the end user"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459627506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24862#issuecomment-459627506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24862",
    "id": 459627506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTYyNzUwNg==",
    "user": {
      "login": "tdamsma",
      "id": 7870803,
      "node_id": "MDQ6VXNlcjc4NzA4MDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7870803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tdamsma",
      "html_url": "https://github.com/tdamsma",
      "followers_url": "https://api.github.com/users/tdamsma/followers",
      "following_url": "https://api.github.com/users/tdamsma/following{/other_user}",
      "gists_url": "https://api.github.com/users/tdamsma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tdamsma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tdamsma/subscriptions",
      "organizations_url": "https://api.github.com/users/tdamsma/orgs",
      "repos_url": "https://api.github.com/users/tdamsma/repos",
      "events_url": "https://api.github.com/users/tdamsma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tdamsma/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T07:03:36Z",
    "updated_at": "2019-02-01T07:03:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll give it a go then to make an OpenPyXL reader. I see there are pretty extensive tests for `read_excel` and I can just add an extra engine param, so hopefully that should be pretty straightforward. "
  }
]
