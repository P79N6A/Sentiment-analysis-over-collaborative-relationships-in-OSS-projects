[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53222510",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53222510",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53222510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjIyNTEw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-25T02:52:19Z",
    "updated_at": "2014-08-25T02:52:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "having Nan's in an index is very odd\nwhy would you do this? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53223337",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53223337",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53223337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjIzMzM3",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-25T03:14:40Z",
    "updated_at": "2014-08-25T11:22:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I do not think it is odd. Because a lot of times you do not really know that your data have null values, and you may do `set_index` on a column with null values, but then the results that you get is odd:\n\n```\n>>> df\n   joe  jim  jolie\n0    2    1      2\n1  NaN    3      5\n2    1    7     11\n3    5    9     23\n>>> df.set_index('joe').reindex(df['joe'].iloc[:-1])\n     jim  jolie\njoe            \n 2     1      2\nNaN  NaN    NaN\n 1     7     11\n```\n\nalso, regardless of `nan` in the index, `kh_float64_hash_equal` of the `pandas.hashmap` is wrong, because in python:\n\n```\n>>> {nan:5}[nan]\n5\n>>> [2, nan, 1, 5].index(nan)  # even though nan != nan\n1\n```\n\nbut not in `pandas.hashtable.Float64HashTable`:\n\n```\n>>> df.index\nFloat64Index([2.0, nan, 1.0, 5.0], dtype='float64')\n>>> m = df.index._engine.mapping\n>>> type(m)\n<class 'pandas.hashtable.Float64HashTable'>\n>>> m.lookup(np.array([2.0, np.nan, 5.0]))\narray([ 0, -1,  3])\n```\n\nwith this patch:\n\n```\n>>> m.lookup(np.array([2.0, np.nan, 5.0]))\narray([0, 1, 3])\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53258116",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53258116",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53258116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjU4MTE2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-25T12:35:10Z",
    "updated_at": "2014-08-25T12:35:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "don't merge in master branches to this, rebase and force push instead, see here: https://github.com/pydata/pandas/wiki/Using-Git\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53258324",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53258324",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53258324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjU4MzI0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-25T12:37:17Z",
    "updated_at": "2014-08-25T12:37:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "- this needs tests for other index types, e.g. `Index(....dtype=object)`, and `DatetimeIndex`\n- needs test for the `set_index` above.\n\nThat said, really have to think about this. The problem with multi-nan in an index is not new, and causes trememdous indexing headaches. it prob should raise if their is more than one nan. Having a column is one thing, but indexing is impossible (and in fact it raises if their are 2 or more nans IIRC now).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53259234",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53259234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53259234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjU5MjM0",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-25T12:47:38Z",
    "updated_at": "2014-08-25T12:48:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is not about multi-nan because this branch of code only happens if the index is unique. If there are multi-nan or multi-anything the code does not hit this branch.\n\nConsider this more of a fix to `Float64HashTable` than indexing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53265094",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53265094",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53265094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjY1MDk0",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-25T13:45:31Z",
    "updated_at": "2014-08-25T13:45:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Below shows that objects work fine, even with exact same values:\n\n```\n>>> df.index\nFloat64Index([2.0, nan, 1.0, 5.0], dtype='float64')\n>>> df.reindex([2, np.nan, 1])\n     joe  jim\n 2     1    2\nNaN  NaN  NaN\n 1     7   11\n>>> df.index = df.index.astype('object')\n>>> df.index\nIndex([2.0, nan, 1.0, 5.0], dtype='object')\n>>> df.reindex([2, np.nan, 1])\n     joe  jim\n 2     1    2\nNaN    3    5\n 1     7   11\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53924914",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53924914",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53924914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTI0OTE0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-29T20:15:31Z",
    "updated_at": "2014-08-29T20:15:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud ok?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53969754",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53969754",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53969754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTY5NzU0",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-30T20:33:41Z",
    "updated_at": "2014-08-30T20:39:06Z",
    "author_association": "MEMBER",
    "body": "i guess so.\n\n@behzadnouri your redefinition of the `float64` hash equal function goes against the accepted definition of `nan`, and it's not clear to me what the use case is. After you call `set_index` and get an index with `nan`s in it, what do you do with the resulting `DataFrame`/`Series`? What operations are made significantly easier or more convenient by allowing this?\n\nSomething like `df.loc[np.nan:10]` or even just `df.loc[np.nan]` defies my own intuition about `nan` because being able to index with something means being able to say that something can be equated to other things. `nan` is by definition not even equal to itself so I'm not sure what is to be gained here.\n\n> also, regardless of nan in the index, kh_float64_hash_equal of the pandas.hashmap is wrong, because in python:\n\nNo, `khash` preserves C semantics regarding `nan` whereas CPython doesn't in many cases, particularly when the computation involves checking whether `nan` is in a sequence. In CPython, rich comparison checks _pointers_ and _then_ calls objects' `__eq__` methods. Let's look at the main loop in the C implementation of `index`:\n\n``` c\n    for (i = start; i < stop && i < Py_SIZE(self); i++) {\n        int cmp = PyObject_RichCompareBool(self->ob_item[i], v, Py_EQ);\n        if (cmp > 0)\n            return PyLong_FromSsize_t(i);\n        else if (cmp < 0)\n            return NULL;\n    }\n```\n\nThis line\n\n``` c\nPyObject_RichCompareBool(self->ob_item[i], v, Py_EQ);\n```\n\nshort-circuits when two pointers are equal (and returns `1`), which means that it assumes `id(x) == id(y)` implies `x == y`. This is a completely reasonable assumption, _except_ in the case of `nan`.\n\nIt also appears that you made the assumption that `nan` is a singleton. `nan` is _not_ a singleton, so you can easily construct cases where you might think you'd get something back but you don't:\n\n```\nIn [10]: import numpy as np\n\nIn [11]: npnan = np.nan\n\nIn [12]: pynan = float('nan')\n\nIn [13]: np.isnan(npnan)\nOut[13]: True\n\nIn [14]: np.isnan(pynan)\nOut[14]: True\n\nIn [15]: [pynan].index(npnan)\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-15-e93f5bc41667> in <module>()\n----> 1 [pynan].index(npnan)\n\nValueError: nan is not in list\n```\n\nAll that said, if you feel really strongly about this and @jreback is okay with it, then merge away!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53972879",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53972879",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53972879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTcyODc5",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-30T22:51:29Z",
    "updated_at": "2014-08-30T23:28:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "The whole point is that the code should preserve the data as much as possible, and let the _user_ of the library _see and deal_ with his nan values, because a lot of times you do not know your data have null values, and that is a valuable red-flag which you wouldn't see if the code silently drops it.\n\nCurrently if I have a data-frame like this:\n\n```\n>>> df\n   jim  joe  jolie\n0    1    2      3\n1  NaN    5      6\n2    7    8      9\n```\n\na simple operation like below causes loss of data:\n\n```\n>>> df.set_index('jim').reindex(df.loc[::-1, 'jim']).dropna()\n     joe  jolie\njim            \n7      8      9\n1      2      3\n```\n\nwhereas, _semantically_ same operation gives different result:\n\n```\n>>> df.set_index('jim').iloc[::-1].dropna()\n     joe  jolie\njim            \n 7     8      9\nNaN    5      6\n 1     2      3\n```\n\nIn pandas it is very convenient and easy to deal with nan/null values; you just make a call to `fillna` or `dropna` as appropriate and that's it.\n\nBut on the other hand, it does treat nan/null values in a way that you have to go scavenger hunt to find out why you lost one row of data as in above example.\n\n[This](https://github.com/pydata/pandas/issues/3729) is another example. It is at odds with how database systems do `group by` operation; for example see [here](http://technet.microsoft.com/en-us/library/ms187007%28v=sql.90%29.aspx); quote from the page:\n\n> If the grouping column contains a null value, that row becomes a group in the results. If the grouping column contains more than one null value, the null values are put into a single group. This behavior is defined in the SQL-2003 standard.\n\nThe point of grouping null values (even though `SELECT NULL = NULL` returns NULL in data-base systems) is that the system _carries_ null values through operations as far as possible, so the user can see at the end that his data have null values. The rationale being that the user knows his NULL values (and what to do with them) way better than what the data-base can guess. For example see  _\"The NULL Spouse Example\"_ on page 6 of [this](http://momjian.us/main/writings/pgsql/nulls.pdf) talk by Bruce Momjian.\n\n[This](https://github.com/pydata/pandas/issues/7466) is another example of how treating one value differently from the rest of the litter, can break the code.\n\nIMAO it is better to deviate from IEEE definition of `nan` values in favor of what would make more sense from a data analysis point of view.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53973133",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53973133",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53973133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTczMTMz",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-30T23:05:38Z",
    "updated_at": "2014-08-30T23:07:01Z",
    "author_association": "MEMBER",
    "body": "@behzadnouri I'm on board with all of your points and I understand the issue.\n\nWhat I don't understand (and maybe I should've said this from the start) is why you are using `set_index` on a column that you _know_ may have `nan`s in it? No matter what, indices with `nan` in them become markedly less useful.\n\nMore specifically why do you need to be able to have an `Index` with `nan`? Are you doing operations that require you to slice with `nan` values or index into the `DataFrame`/`Series` with `nan`s?\n\nAgain, what operations are you doing with/on the `Index` that you cannot do conveniently in a `Series`?\n\nIf you think a column may have `nan`s in it, then don't use `set_index`. Even if you could, what are you going to do with that after you do call `set_index`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53973473",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53973473",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53973473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTczNDcz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-30T23:22:54Z",
    "updated_at": "2014-08-30T23:22:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "interjecting my 2c\n\ncurrently nan groups are dropped FYI (this is a separate issue) - I think mainly because it can lead to having a nan indexer \n\nwhich is generally to be avoided BECAUSE of a multitude of issues when trying to index (as cpcloud points out) - wesm originally punted I this - in recent years we have allowed this more and more\n\nso actually ok with this pr - just let's make sure the semantics are similar to what we do for nan testing (eg cpcloud points)\n\nthat said - I wouldn't take sql S gospel nor really as a recommendation\n\nthey don't have any notion of indexing at all! \n\nit's just return the result of a query (which is not the same!)\n\nand oftentimes DB are for different purposes that data analysis and therefor do things differently\n\nand generally sql is neither as flexible nor idiomatic as pandas and is generally NOT a good model\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53973490",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-53973490",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 53973490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTczNDkw",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-30T23:23:38Z",
    "updated_at": "2014-08-30T23:24:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "again, it is about _preserving_ the data. \n\nHere, is an example which I am setting index on a column which has nan values:\n\n```\n>>> left\n   jim  jolie\n0    1      3\n1  NaN      6\n2    7      9\n>>> right\n   jim  joe\n0    1    2\n1  NaN    5\n2    7    8\n>>> left.join(right.set_index('jim'), on='jim')\n   jim  jolie  joe\n0    1      3    2\n1  NaN      6    5\n2    7      9    8\n```\n\nThese are toy examples; Real world case would be a 500+ LOC script, which you either have to check for `df.isnull().any()` after each line of code, or hope that if something goes wrong you will see it in the output of script. If the code silently drops your data you would not see it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/76699206",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-76699206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 76699206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Njk5MjA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-02T11:50:47Z",
    "updated_at": "2015-03-02T11:50:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri can you rebase this. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/77375700",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-77375700",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 77375700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Mzc1NzAw",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T14:46:55Z",
    "updated_at": "2015-03-05T14:46:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback rebased\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/77477411",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8108#issuecomment-77477411",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8108",
    "id": 77477411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDc3NDEx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T23:43:47Z",
    "updated_at": "2015-03-05T23:43:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri thanks again!\n"
  }
]
