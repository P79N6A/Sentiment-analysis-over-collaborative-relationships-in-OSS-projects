[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50386328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-50386328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 50386328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzg2MzI4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-28T19:27:00Z",
    "updated_at": "2014-07-28T19:28:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "always `pd.show_versions()`\n\nyou can use:\n\n`x[(x.index>10.0)&(x.index<30.0)]`\n\nits not clear what:\n\n`x.ix[30.0:10.0,:]` actually would mean for a reversed index as neither point is in the index. I supposed it _could_ mean the above, but would have to think about that.\n\nFor an integer index, its clear, because the end-points are included.\n\n@cpcloud \n@jorisvandenbossche \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50386858",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-50386858",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 50386858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzg2ODU4",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-28T19:31:08Z",
    "updated_at": "2014-07-28T19:31:45Z",
    "author_association": "NONE",
    "body": "Sorry, here's `show_verions()`:\n\nIn [4]: pd.show_versions()\n\n## INSTALLED VERSIONS\n\ncommit: None\npython: 2.7.6.final.0\npython-bits: 64\nOS: Linux\nOS-release: 2.6.32-62-generic\nmachine: x86_64\nprocessor: \nbyteorder: little\nLC_ALL: None\nLANG: en_US.utf8\n\npandas: 0.14.1\nnose: 1.3.0\nCython: None\nnumpy: 1.8.0\nscipy: 0.14.0\nstatsmodels: 0.5.0\nIPython: 3.0.0-dev\nsphinx: None\npatsy: 0.2.1\nscikits.timeseries: None\ndateutil: 2.2\npytz: 2014.4\nbottleneck: None\ntables: None\nnumexpr: None\nmatplotlib: 1.3.1\nopenpyxl: 2.0.3\nxlrd: None\nxlwt: None\nxlsxwriter: None\nlxml: None\nbs4: None\nhtml5lib: None\nhttplib2: None\napiclient: None\nrpy2: None\nsqlalchemy: None\npymysql: None\n\nThanks for the solution.  I'll use it for sure, but the ix behavior should work right?  This is such a common index type in spectral data, I'd hate to require a seperate slice call for this use case.  Although, if it's not likely to be changed in the future, I could probably just add my own slice functions that bury this under the hood unbeknownst to users.  What do you recommend?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50387218",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-50387218",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 50387218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzg3MjE4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-28T19:33:44Z",
    "updated_at": "2014-07-28T19:33:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls review docs here as well: http://pandas.pydata.org/pandas-docs/stable/indexing.html#float64index\n\nI think this was not implemented because its not 'cheap'. In the sense that it _would_ work if you _knew_ that the index was monotonic, but reversed (iow would need to have a `is_monotonic_increasing` and `is_monotonic_decreasing` and then could just reverse the searching operators.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50388066",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-50388066",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 50388066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzg4MDY2",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-28T19:40:04Z",
    "updated_at": "2014-07-28T19:40:04Z",
    "author_association": "NONE",
    "body": "Well, that makes sense, thanks.  I'll either make my own slice wrapper, or\nraise a warning to users if they try to slice reversed index data.\n\nOn Mon, Jul 28, 2014 at 3:33 PM, jreback notifications@github.com wrote:\n\n> pls review docs here as well:\n> http://pandas.pydata.org/pandas-docs/stable/indexing.html#float64index\n> \n> I think this was not implemented because its not 'cheap'. In the sense\n> that it _would_ work if you _knew_ that the index was monotonic, but\n> reversed (iow would need to have a is_monotonic_increasing and\n> is_monotonic_decreasing and then could just reverse the searching\n> operators.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/7860#issuecomment-50387218.\n\n## \n\nAdam Hughes\nPhysics Ph.D Candidate\nGeorge Washington University\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50388217",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-50388217",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 50388217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzg4MjE3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-28T19:41:18Z",
    "updated_at": "2014-07-28T19:41:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "we'll put it on the enhancement list. if you are interested in implemented, step up!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50388689",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-50388689",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 50388689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzg4Njg5",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-28T19:45:00Z",
    "updated_at": "2014-07-28T19:45:00Z",
    "author_association": "NONE",
    "body": "Alright, thanks.  I would take a crack, but really feel like I don't know the pandas code base well enough to guarantee my solution will do more good than harm.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61037323",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61037323",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61037323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDM3MzIz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T02:29:48Z",
    "updated_at": "2014-10-30T02:29:48Z",
    "author_association": "MEMBER",
    "body": "I'm considering taking a crack at this, but there's one edge case I would like to clarify first. In particular: how do we want to handle slices with mis-matched ordering, e.g., `x.loc[10:30]` for an descending index or `x.loc[30:10]` for an ascending index.\n\nKeeping track of whether an index is descending or ascending is one of those details that's nice to keep track of for the user, so it would be nice if these \"just work\" by switching `start`/`stop` in these cases. It seems like this would be handy for cases where the index is generally monotonic but can go either direction, e.g., as is the case for a number of physical variables.\n\nCan anyone think of unfortunate consequences to this sort of interchanging?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61037590",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61037590",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61037590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDM3NTkw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T02:33:38Z",
    "updated_at": "2014-10-30T02:33:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer you can add to the `is_monotonic_float64` et. all in `generated.pyx` and just return say -1 if is negative monotonic, then it would 'keep track' internally (just as is_monotonic does now, but for increasing).\n\nThen I think you could easily just swap the start stop in those caes.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61038058",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61038058",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61038058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDM4MDU4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T02:39:59Z",
    "updated_at": "2014-10-30T02:39:59Z",
    "author_association": "MEMBER",
    "body": "@jreback Excellent, I'll take a look. I'd like this to work for `Int64Index`, too, for the sake of consistency, although the typical case is floating point data.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61038214",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61038214",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61038214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDM4MjE0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T02:41:49Z",
    "updated_at": "2014-10-30T02:41:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can do for all types - just change the template\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61038399",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61038399",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61038399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDM4Mzk5",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T02:44:13Z",
    "updated_at": "2014-10-30T02:44:51Z",
    "author_association": "NONE",
    "body": "I just wanted to point out that I did use @jreback suggestion for the boolean experssion and just put that into my **getitem**() indexer calls somewhere, and haven't encountered any problems since.  This is probably a hacky solution, but for my use case, works fine.\n\nCan I ask how monotonicity is determined?  Are all values inspected, or just the start and final?   And does `is_monotonic_float64` already exist, or is this what is being proposed to be put in?  It would help me if I had access to this attribute as well for when we do plotting.  In fact, that might be an issue to consider.  Matplotlib will try to plot from low to high values I believe, and I had to actually reverse the xlimits on calls to df.plot().  Unless my memory is mixed up...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61038981",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61038981",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61038981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDM4OTgx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T02:52:23Z",
    "updated_at": "2014-10-30T02:52:44Z",
    "author_association": "MEMBER",
    "body": "Here is where `is_monotonic` is defined: https://github.com/pydata/pandas/blob/c7bfb4e16411516ca9108af95013bc3400ba38ad/pandas/src/generate_code.py#L542\n\nThis should be an easy fix to extend to identify descending indexes. It does indeed check all values (when necessary).\n\nThe advantage to using slice syntax is it uses numpy.ndarray views instead of making copies, so it's much faster. Also, various scientific file formats (e.g., netCDF, HDF5, OpenDAP) support reading slices directly but are much slower or have more limited support for array indexing. The later will be handy for [xray](https://github.com/xray/xray), and it will get that for free when I add this to pandas.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61072355",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61072355",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61072355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDcyMzU1",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T10:36:14Z",
    "updated_at": "2014-10-30T10:44:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> how do we want to handle slices with mis-matched ordering, e.g., x.loc[10:30] for an descending index or x.loc[30:10] for an ascending index.\n\nI'd expect the first example to work basically as\n\n``` python\nx.iloc[x.index.searchsorted(10): x.index.searchsorted(30, side='right') + 1]\n```\n\nwith an obvious optimization potential of doing `x.index.get_loc(N)` if `N in x.index`. I'm not a fan of a slice operation counting down with a positive step value.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61139391",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61139391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61139391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMTM5Mzkx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T17:59:46Z",
    "updated_at": "2014-10-30T17:59:46Z",
    "author_association": "MEMBER",
    "body": "> I'm not a fan of a slice operation counting down with a positive step value.\n\nThe logic would go like this: if the integer indexers `start > stop` and `slice` is not negative (i.e.., implying that the indexed object would have size 0), then swap the the label indexers `start` and `stop`.\n\n(This would probably end up in `Index.slice_indexer`, since it needs to know the `step`.)\n\nI doubt there many cases where users are relying on slicing returning a size 0 object due to enforcement of this ordering, but I could certainly be wrong.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61140648",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61140648",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61140648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMTQwNjQ4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T18:06:00Z",
    "updated_at": "2014-10-30T18:06:00Z",
    "author_association": "MEMBER",
    "body": "Hmm... this could get pretty complex/unpredictable depending on whether `step` is positive or negative. Maybe better to avoid this for now.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61145252",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61145252",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61145252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMTQ1MjUy",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T18:30:30Z",
    "updated_at": "2014-10-30T18:32:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I doubt there many cases where users are relying on slicing returning a size 0 object due to enforcement of this ordering, but I could certainly be wrong.\n\nIt may be me, but I see slicing as selecting values by position between **lbound** and **ubound**, with pandas being so kind to enable me writing bounds as labels rather than actual positions.\n\nIf OTOH you need all values between **lbound** and **ubound** _value-wise_ you should either write the condition `(x >= lbound) & (x <= ubound)` or convince the team to add (or do it youself) a `Index.between(lower, upper)` method to solve the unwieldiness of double comparison (I always wondered how come there's a `indexer_between_time` for time-of-day comparisons, but no such thing for the rest of value types). As a bonus this method would work regardless of monotonicity.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61146686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7860#issuecomment-61146686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7860",
    "id": 61146686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMTQ2Njg2",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-30T18:38:05Z",
    "updated_at": "2014-10-30T18:38:05Z",
    "author_association": "MEMBER",
    "body": "@immerrr  OK, I think I am convinced. +1 for the idea of `Index.between`.\n"
  }
]
