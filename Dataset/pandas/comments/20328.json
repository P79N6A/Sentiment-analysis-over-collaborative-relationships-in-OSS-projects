[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372928174",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-372928174",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 372928174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjkyODE3NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T07:26:35Z",
    "updated_at": "2018-03-14T07:27:01Z",
    "author_association": "MEMBER",
    "body": "Not 100% certain but I believe you can define an optional argument for your sentinel in the `__cinit__`\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/3783ccc694ef93c0cf159ca1ad8e69a67d828bf0/pandas/_libs/hashtable_class_helper.pxi.in#L311\r\n\r\nThen adjust the existing comparison to do something like `if check_null and (val == self.sentinel or {{null_condition}}):`\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/3783ccc694ef93c0cf159ca1ad8e69a67d828bf0/pandas/_libs/hashtable_class_helper.pxi.in#L428"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372971677",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-372971677",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 372971677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mjk3MTY3Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T10:20:38Z",
    "updated_at": "2018-03-14T10:20:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah *maybe* we could just make a parameter for this, rather than ``check_null``, and default it in the template (so allow it to be overriden)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375684467",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-375684467",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 375684467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY4NDQ2Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T14:33:40Z",
    "updated_at": "2018-03-23T14:33:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just doing `if val == self.na_value` doesn't quite work, since `na_value` is a (potentially?) a Python object, and this is all in a `no_gil` block."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375696907",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-375696907",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 375696907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY5NjkwNw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T15:10:24Z",
    "updated_at": "2018-03-23T15:10:24Z",
    "author_association": "MEMBER",
    "body": "I don't think an object is possible to hit that branch because it's not explicitly listed as one of the dtypes - do you have an example of where that is happening?\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/3783ccc694ef93c0cf159ca1ad8e69a67d828bf0/pandas/_libs/hashtable_class_helper.pxi.in#L254"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375699563",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-375699563",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 375699563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY5OTU2Mw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T15:18:02Z",
    "updated_at": "2018-03-23T15:18:02Z",
    "author_association": "MEMBER",
    "body": "If you need to add support for objects in your template you could replace the `nogil` block with `if True:` - I've done this a few times in `groupby_helper.pxi.in`:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/3783ccc694ef93c0cf159ca1ad8e69a67d828bf0/pandas/_libs/groupby_helper.pxi.in#L329"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375709963",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-375709963",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 375709963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTcwOTk2Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T15:48:11Z",
    "updated_at": "2018-03-23T15:48:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't think an object is possible to hit that branch because it's not explicitly listed as one of the dtypes\r\n\r\nIt'd be a parameter passed by the user when the hashtable is created.\r\n\r\nI'm probably just not familiar enough with cython to describe what's going on. I want something roughly like this\r\n\r\n```diff\r\ndiff --git a/pandas/_libs/hashtable_class_helper.pxi.in b/pandas/_libs/hashtable_class_helper.pxi.in\r\nindex bca4e388f..58df8f8b7 100644\r\n--- a/pandas/_libs/hashtable_class_helper.pxi.in\r\n+++ b/pandas/_libs/hashtable_class_helper.pxi.in\r\n@@ -308,8 +308,9 @@ def get_dispatch(dtypes):\r\n \r\n cdef class {{name}}HashTable(HashTable):\r\n \r\n-    def __cinit__(self, size_hint=1):\r\n+    def __cinit__(self, size_hint=1, {{dtype}}_t na_value=None):\r\n         self.table = kh_init_{{dtype}}()\r\n+        self.na_value = na_value\r\n         if size_hint is not None:\r\n             kh_resize_{{dtype}}(self.table, size_hint)\r\n \r\n@@ -414,18 +415,25 @@ cdef class {{name}}HashTable(HashTable):\r\n             int64_t[:] labels\r\n             Py_ssize_t idx, count = count_prior\r\n             int ret = 0\r\n-            {{dtype}}_t val\r\n+            {{dtype}}_t val, na_value\r\n             khiter_t k\r\n             {{name}}VectorData *ud\r\n+            bint use_na_value\r\n \r\n         labels = np.empty(n, dtype=np.int64)\r\n         ud = uniques.data\r\n+        na_value = self.na_value\r\n+        use_na_value = self.na_value != None\r\n \r\n         with nogil:\r\n             for i in range(n):\r\n                 val = values[i]\r\n \r\n-                if check_null and {{null_condition}}:\r\n+                if use_na_value and val == na_value:\r\n+                    labels[i] = na_sentinel\r\n+                    continue\r\n+\r\n+                elif check_null and {{null_condition}}:\r\n                     labels[i] = na_sentinel\r\n                     continue\r\n \r\ndiff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py\r\nindex de2e63826..825d17b2c 100644\r\n--- a/pandas/core/algorithms.py\r\n+++ b/pandas/core/algorithms.py\r\n@@ -435,7 +435,7 @@ def isin(comps, values):\r\n     return f(comps, values)\r\n \r\n \r\n-def _factorize_array(values, check_nulls, na_sentinel=-1, size_hint=None):\r\n+def _factorize_array(values, check_nulls, na_sentinel=-1, size_hint=None, na_value=None):\r\n     \"\"\"Factorize an array-like to labels and uniques.\r\n \r\n     This doesn't do any coercion of types or unboxing before factorization.\r\n@@ -455,7 +455,7 @@ def _factorize_array(values, check_nulls, na_sentinel=-1, size_hint=None):\r\n     \"\"\"\r\n     (hash_klass, vec_klass), values = _get_data_algo(values, _hashtables)\r\n \r\n-    table = hash_klass(size_hint or len(values))\r\n+    table = hash_klass(size_hint or len(values), na_value=na_value)\r\n     uniques = vec_klass()\r\n     labels = table.get_labels(values, uniques, 0, na_sentinel, check_nulls)\r\n \r\n@@ -465,7 +465,7 @@ def _factorize_array(values, check_nulls, na_sentinel=-1, size_hint=None):\r\n \r\n \r\n @deprecate_kwarg(old_arg_name='order', new_arg_name=None)\r\n-def factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None):\r\n+def factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None, na_value=None):\r\n     \"\"\"\r\n     Encode input values as an enumerated type or categorical variable\r\n \r\n@@ -511,7 +511,7 @@ def factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None):\r\n         check_nulls = not is_integer_dtype(original)\r\n         labels, uniques = _factorize_array(values, check_nulls,\r\n                                            na_sentinel=na_sentinel,\r\n-                                           size_hint=size_hint)\r\n+                                           size_hint=size_hint, na_value=na_value)\r\n \r\n     if sort and len(uniques) > 0:\r\n         from pandas.core.sorting import safe_sort\r\n```\r\n\r\nThis compiles, but doesn't run as `float64_t na_value=None` isn't valid, since `None` isn't a float. Is there a way around that with Cython? Otherwise, we'll need type-specific NA values (`NaN`, iNaT, something). But then we won't have a way to disable that.\r\n\r\nUnless... at the python level, the default is None, we check if the user specifies it, and pass through an additional flag telling the hashtable, `use_na_value`. That should work"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375714816",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-375714816",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 375714816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTcxNDgxNg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T16:03:21Z",
    "updated_at": "2018-03-23T16:04:04Z",
    "author_association": "MEMBER",
    "body": "Just loosely I think if you changed the templating around a bit to only list the `nan_value` in the dtypes list instead of the full equality comparison (check the groupby_helper for ref) you could change your constructor signature to be:\r\n\r\n```\r\ndef __cinit__(self, size_hint=1, {{dtype}}_t na_value={{nan_val}}):\r\n    ...\r\n    self.na_value = na_value\r\n```\r\n\r\nI think you could then just change your conditional to look something like this:\r\n\r\n```\r\nif val == val and val != na_value:\r\n```\r\n\r\nBypassing the need for trying to track the state of the comparison you need to perform in `use_na_value`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375716443",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-375716443",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 375716443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTcxNjQ0Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T16:08:29Z",
    "updated_at": "2018-03-23T16:08:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll take a look, thanks.\r\n\r\nJust looking at it though (haven't tested) would that work for the current Int64 of iNaT (min int)? With that we'd get `iNaT == iNaT and iNaT != iNaT`, which will always be False..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375722554",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20328#issuecomment-375722554",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20328",
    "id": 375722554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTcyMjU1NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T16:27:10Z",
    "updated_at": "2018-03-23T16:27:10Z",
    "author_association": "MEMBER",
    "body": "Sorry that condition was to check for non-null, so you'd want the inverse of that to find null. There may also be a more compact way to go about it"
  }
]
