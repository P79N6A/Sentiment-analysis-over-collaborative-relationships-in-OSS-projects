[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/335975052",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-335975052",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 335975052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTk3NTA1Mg==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-11T23:15:22Z",
    "updated_at": "2017-10-11T23:15:45Z",
    "author_association": "MEMBER",
    "body": "The fact that ``summary = summary.assign(**myData)`` does not insert any data in a ``DataFrame`` with empty index is not a bug. It couldn't be otherwise. Assigning a scalar to a column means \"set that column to that number for all rows\" - if there are no rows, there is nothing to do.\r\n\r\nThis said, as a consequence of \"fixing\" #16823 (I [respectfully disagree](https://github.com/pandas-dev/pandas/issues/16823#issuecomment-315670738) on the fact that it was a bug in the first place), your code will now raise an error in the git version of pandas (but why not forbid ``pd.DataFrame({'a' : 3}, index=[])`` too then for coherence?)\r\n\r\nNotice your code calls twice ``summary.assign(**myData)``, you probably meant the second to be ``summary.assign(**myOtherData)``. Anyway, the current version of pandas does _not_ produce a malformed csv when saving a ``DataFrame`` with empty index:\r\n```\r\npd.DataFrame({'B' : 7, 'C' : -9}, index=[]).to_csv(\"summary.txt\", sep=\" \", header=True, index_label='rep')\r\n```\r\n\r\nresults in\r\n\r\n```\r\nrep B C\r\n```\r\nwhich is correct.\r\n\r\nSo I think this can be closed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336113458",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-336113458",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 336113458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjExMzQ1OA==",
    "user": {
      "login": "rs481",
      "id": 9167034,
      "node_id": "MDQ6VXNlcjkxNjcwMzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9167034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rs481",
      "html_url": "https://github.com/rs481",
      "followers_url": "https://api.github.com/users/rs481/followers",
      "following_url": "https://api.github.com/users/rs481/following{/other_user}",
      "gists_url": "https://api.github.com/users/rs481/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rs481/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rs481/subscriptions",
      "organizations_url": "https://api.github.com/users/rs481/orgs",
      "repos_url": "https://api.github.com/users/rs481/repos",
      "events_url": "https://api.github.com/users/rs481/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rs481/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T12:18:13Z",
    "updated_at": "2017-10-12T12:18:13Z",
    "author_association": "NONE",
    "body": "Ok, it seems the code I sent (even with your typo correction) failed to reproduce the issue (despite being my actual code with renamed variables) as I didn't have the right data types.\r\n\r\n```\r\nimport pandas as pd\r\n\r\nsummary= pd.DataFrame()\r\n\r\nprint(\"OUT 1\")\r\nprint(summary)\r\n\r\nmyData = dict()\r\n\r\nmyData['B'] = 7\r\nmyData['C'] = -9\r\n\r\nsummary = summary.assign(**myData)\r\n\r\nprint(\"OUT 2\")\r\nprint(summary)\r\n\r\nmyOtherData = dict()\r\n\r\nmyOtherData['D'] = [3]\r\nmyOtherData['E'] = [4]\r\n\r\nsummary = summary.assign(**myOtherData)\r\n\r\nprint(\"OUT 3\")\r\nprint(summary)\r\n\r\nsummary.to_csv(\"summary.txt\", sep=\" \", header=True, index_label='rep')\r\n```\r\n\r\nThe issue was that 'D' and 'E' were actually vectors of length 1, not scalars. This means that the assign \"just works\".\r\n\r\nThe output of the above is:\r\n\r\n> OUT 1\r\n> Empty DataFrame\r\n> Columns: []\r\n> Index: []\r\n> OUT 2\r\n> Empty DataFrame\r\n> Columns: [B, C]\r\n> Index: []\r\n> OUT 3\r\n>     B   C  D  E\r\n> 0 NaN NaN  3  4\r\n\r\nand the output of `cat summary.txt` is\r\n\r\n```\r\nrep B C D E\r\n0   3 4\r\n```\r\n\r\nWhere here  it has put spaces such that the 3 and 4 are perfectly aligned beneath B and C not D and E, which is what threw me (and the script that was reading the file) off.\r\n\r\nIf we change the output to `summary.to_csv(\"summary.txt\", sep=\",\", header=True, index_label='rep')` (now with a separator of comma (\",\") not space)\r\n\r\n```\r\nrep,B,C,D,E\r\n0,,,3,4\r\n```\r\n\r\nWhich makes it obvious that the NaNs were coming out as empty strings.\r\n\r\nSo the behaviour of the second assign, with the length one vectors was actually exactly as expected and as desired.\r\n\r\nSo I think in effect the thing I actually want is that pandas would treat scalars as vectors of length 1 (doing whatever index stuff was necessary for the user), which would mean that the behaviour of this and #16823 would end up with a data frame with 1 row once the scalar data had been added.\r\n\r\nI feel that treating a scalar the same as a length-1 vector is unambiguous and desirable behaviour, but obviously I'm not a dev on this project and I haven't reviewed the previous 17846 issues to find a reason why this is not the case."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336184300",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-336184300",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 336184300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjE4NDMwMA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T16:03:16Z",
    "updated_at": "2017-10-12T16:03:16Z",
    "author_association": "MEMBER",
    "body": "> I feel that treating a scalar the same as a length-1 vector is unambiguous and desirable behaviour\r\n\r\nI'm afraid we all feel differently :-) But incidentally, a ``Series`` behaves in a very similar way (that is, if you forget that it contains scalars rather than vectors) to a ``DataFrame`` which automatically treats scalars as length-1 vectors!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336186236",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-336186236",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 336186236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjE4NjIzNg==",
    "user": {
      "login": "rs481",
      "id": 9167034,
      "node_id": "MDQ6VXNlcjkxNjcwMzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9167034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rs481",
      "html_url": "https://github.com/rs481",
      "followers_url": "https://api.github.com/users/rs481/followers",
      "following_url": "https://api.github.com/users/rs481/following{/other_user}",
      "gists_url": "https://api.github.com/users/rs481/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rs481/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rs481/subscriptions",
      "organizations_url": "https://api.github.com/users/rs481/orgs",
      "repos_url": "https://api.github.com/users/rs481/repos",
      "events_url": "https://api.github.com/users/rs481/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rs481/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T16:10:02Z",
    "updated_at": "2017-10-12T16:10:02Z",
    "author_association": "NONE",
    "body": "Ok, well thank you for taking a look at the issue. I suppose I will just have to be very careful and explicit in the future.\r\n\r\nAs a matter of interest, is there an explanation written anywhere on why there is a decision (perhaps as a consequence of some overarching principle) to make scalars behave very differently to length-1 vectors?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336189683",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-336189683",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 336189683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjE4OTY4Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T16:22:13Z",
    "updated_at": "2017-10-12T16:22:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing as this is a usage error"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336191711",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-336191711",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 336191711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjE5MTcxMQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T16:29:37Z",
    "updated_at": "2017-10-12T16:29:37Z",
    "author_association": "MEMBER",
    "body": "> As a matter of interest, is there an explanation written anywhere on why there is a decision (perhaps as a consequence of some overarching principle) to make scalars behave very differently to length-1 vectors?\r\n\r\nIf you mean \"in general\"... then there is simply no reason why they should be equal, in Maths as in programming... can't think of a specific reference, but anyway this is something pandas inherits from numpy."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336205913",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-336205913",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 336205913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjIwNTkxMw==",
    "user": {
      "login": "rs481",
      "id": 9167034,
      "node_id": "MDQ6VXNlcjkxNjcwMzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9167034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rs481",
      "html_url": "https://github.com/rs481",
      "followers_url": "https://api.github.com/users/rs481/followers",
      "following_url": "https://api.github.com/users/rs481/following{/other_user}",
      "gists_url": "https://api.github.com/users/rs481/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rs481/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rs481/subscriptions",
      "organizations_url": "https://api.github.com/users/rs481/orgs",
      "repos_url": "https://api.github.com/users/rs481/repos",
      "events_url": "https://api.github.com/users/rs481/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rs481/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T17:18:33Z",
    "updated_at": "2017-10-12T17:18:33Z",
    "author_association": "NONE",
    "body": "Yes, ok they are different types and so we can expect nothing, but I disagree mathematically as a scalar, a 1x1 matrix and a Rank-1 (0?) Tensor are all equivalent.\r\n\r\nIf the answer is that numpy does this and consistency with numpy is a critical concern then that is the end of it.\r\n\r\nMy feeling on this is that turning a dict with scalar elements into a pandas dataframe with one row has a single, unambiguous meaning, and that this is a useful feature. This is also the way it works in R:\r\n\r\n```\r\n> d = list(\"a\" = 7, \"b\" = -9)\r\n> as.data.frame(d)\r\n  a  b\r\n1 7 -9\r\n```\r\n\r\nand I would be baffled if the above R code was equivalent to:\r\n\r\n```\r\n> data.frame(a = numeric(0), b = numeric(0))\r\n[1] a b\r\n<0 rows> (or 0-length row.names)\r\n```\r\n\r\nReally, I'm not arguing that it should be defined for scalars as a direct consequence of being defined for vectors, but that there is a good, and useful, definition of many operations for scalar values."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336252876",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-336252876",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 336252876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjI1Mjg3Ng==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T20:14:40Z",
    "updated_at": "2017-10-12T20:14:40Z",
    "author_association": "MEMBER",
    "body": "> I disagree mathematically as a scalar, a 1x1 matrix and a Rank-1 (0?) Tensor are all equivalent\r\n\r\nUhm... the underlying set is the same, the set of operations you define on it differ. But yeah, right, not a particularly enlightening comparison.\r\n\r\nAnyway, coherence with ``numpy`` certainly matters, but then there's also coherence with the fact that ``df[col] = 1`` never changes the index, coupled with the fact that what you would like ``pd.DataFrame({'a' : 0, 'b' : 1})`` to do can be easily done - this time, really unambiguously - with ``pd.DataFrame({'a' : [0], 'b' : [1]})``."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336438432",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17847#issuecomment-336438432",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17847",
    "id": 336438432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQzODQzMg==",
    "user": {
      "login": "rs481",
      "id": 9167034,
      "node_id": "MDQ6VXNlcjkxNjcwMzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9167034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rs481",
      "html_url": "https://github.com/rs481",
      "followers_url": "https://api.github.com/users/rs481/followers",
      "following_url": "https://api.github.com/users/rs481/following{/other_user}",
      "gists_url": "https://api.github.com/users/rs481/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rs481/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rs481/subscriptions",
      "organizations_url": "https://api.github.com/users/rs481/orgs",
      "repos_url": "https://api.github.com/users/rs481/repos",
      "events_url": "https://api.github.com/users/rs481/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rs481/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T12:26:36Z",
    "updated_at": "2017-10-13T12:26:36Z",
    "author_association": "NONE",
    "body": "I have similar disagreements with the behaviour of `df[col] = 1` (which is of course equivalent to `df[col] = 0`), but I'll agree it is too late to change this behaviour now as I'm sure code relies on this.\r\n\r\nThe workaround you suggest of checking and converting all elements in the dictionary to lists probably requires as much code as constructing a new DataFrame from the dict and using pd.concat()"
  }
]
