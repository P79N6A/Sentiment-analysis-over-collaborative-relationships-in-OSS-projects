[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/277547661",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-277547661",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 277547661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzU0NzY2MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-05T20:43:23Z",
    "updated_at": "2017-02-05T20:43:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer so ``interval_range`` is sort of trivial for the basic case, but I think you want something like\r\n\r\n```\r\npd.interval_range(start, stop, step=1)\r\n\r\nIn [1]: pd.IntervalIndex.from_breaks(np.arange(0, 10, 2))\r\nOut[1]: \r\nIntervalIndex(left=[0, 2, 4, 6],\r\n              right=[2, 4, 6, 8],\r\n              closed='right',\r\n              dtype='interval[int64]')\r\n```\r\n\r\nwhat other signature is useful here?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/277682784",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-277682784",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 277682784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzY4Mjc4NA==",
    "user": {
      "login": "codecov-io",
      "id": 8655789,
      "node_id": "MDQ6VXNlcjg2NTU3ODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8655789?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov-io",
      "html_url": "https://github.com/codecov-io",
      "followers_url": "https://api.github.com/users/codecov-io/followers",
      "following_url": "https://api.github.com/users/codecov-io/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov-io/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov-io/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov-io/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov-io/orgs",
      "repos_url": "https://api.github.com/users/codecov-io/repos",
      "events_url": "https://api.github.com/users/codecov-io/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov-io/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-06T13:37:28Z",
    "updated_at": "2017-04-13T22:12:46Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=h1) Report\n> :exclamation: No coverage uploaded for pull request base (`master@7ee73ff`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n> The diff coverage is `91.47%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/15309/graphs/tree.svg?width=650&height=150&src=pr&token=eZ4WkYLtcO)](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##             master   #15309   +/-   ##\n=========================================\n  Coverage          ?      91%           \n=========================================\n  Files             ?      145           \n  Lines             ?    50236           \n  Branches          ?        0           \n=========================================\n  Hits              ?    45718           \n  Misses            ?     4518           \n  Partials          ?        0\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `88.8% <91.47%> (?)` | |\n| #single | `40.38% <25.71%> (?)` | |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/types/api.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL3R5cGVzL2FwaS5weQ==) | `100% <ø> (ø)` | |\n| [pandas/tseries/period.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL3RzZXJpZXMvcGVyaW9kLnB5) | `92.74% <100%> (ø)` | |\n| [pandas/types/inference.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL3R5cGVzL2luZmVyZW5jZS5weQ==) | `98.33% <100%> (ø)` | |\n| [pandas/types/generic.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL3R5cGVzL2dlbmVyaWMucHk=) | `100% <100%> (ø)` | |\n| [pandas/indexes/api.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL2luZGV4ZXMvYXBpLnB5) | `98.68% <100%> (ø)` | |\n| [pandas/indexes/multi.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL2luZGV4ZXMvbXVsdGkucHk=) | `96.7% <100%> (ø)` | |\n| [pandas/indexes/category.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL2luZGV4ZXMvY2F0ZWdvcnkucHk=) | `98.43% <100%> (ø)` | |\n| [pandas/core/algorithms.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYWxnb3JpdGhtcy5weQ==) | `94.57% <100%> (ø)` | |\n| [pandas/core/api.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXBpLnB5) | `100% <100%> (ø)` | |\n| [pandas/core/indexing.py](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhpbmcucHk=) | `94.01% <100%> (ø)` | |\n| ... and [10 more](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=footer). Last update [7ee73ff...11ab1e1](https://codecov.io/gh/pandas-dev/pandas/pull/15309?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/277746360",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-277746360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 277746360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Nzc0NjM2MA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-06T17:07:40Z",
    "updated_at": "2017-02-06T17:07:40Z",
    "author_association": "MEMBER",
    "body": "> so interval_range is sort of trivial for the basic case, but I think you want something like\r\n\r\nYes, that's one use case, though it's not necessarily worth doing it that's all it does.\r\n\r\nI was thinking of `interval_range` also for datetimes (with `start`/`periods` arguments), as part of envisioning Interval as a eventual replacement for Period. But that is a long way off (if ever) and I don't think it will be terribly useful in the meanwhile, unless we get Interval working for resample operations."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278474586",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-278474586",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 278474586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ3NDU4Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T21:56:47Z",
    "updated_at": "2017-02-08T21:56:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer \r\n\r\n```\r\nIn [1]: df = DataFrame({'A': range(10)})\r\n   ...: s = pd.cut(df.A, 5)\r\n   ...: df['B'] = s\r\n   ...: df = df.set_index('B')\r\n   ...: \r\n\r\nIn [2]: df\r\nOut[2]: \r\n               A\r\nB               \r\n(-0.009, 1.8]  0\r\n(-0.009, 1.8]  1\r\n(1.8, 3.6]     2\r\n(1.8, 3.6]     3\r\n(3.6, 5.4]     4\r\n(3.6, 5.4]     5\r\n(5.4, 7.2]     6\r\n(5.4, 7.2]     7\r\n(7.2, 9.0]     8\r\n(7.2, 9.0]     9\r\n\r\nIn [3]: df.index\r\nOut[3]: \r\nIntervalIndex(left=[-0.009, -0.009, 1.8, 1.8, 3.6, 3.6, 5.4, 5.4, 7.2, 7.2],\r\n              right=[1.8, 1.8, 3.6, 3.6, 5.4, 5.4, 7.2, 7.2, 9.0, 9.0],\r\n              closed='right',\r\n              name='B',\r\n              dtype='interval[float64]')\r\n```\r\n\r\n```\r\nIn [4]: df.loc[4]\r\nOut[4]: \r\n            A\r\nB            \r\n(3.6, 5.4]  4\r\n(3.6, 5.4]  5\r\n\r\nIn [5]: df.index.get_loc(4)\r\nOut[5]: array([4, 5])\r\n```\r\n\r\n```\r\nIn [6]: df.index.get_indexer([4])\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-6-f6dde575d826> in <module>()\r\n----> 1 df.index.get_indexer([4])\r\nIn [6]: df.index.get_indexer([4])\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-6-f6dde575d826> in <module>()\r\n----> 1 df.index.get_indexer([4])\r\n\r\n/Users/jreback/pandas/pandas/indexes/interval.py in get_indexer(self, target, method, limit, tolerance)\r\n    521                     'for IntervalIndex indexers')\r\n    522             else:\r\n--> 523                 return self._engine.get_indexer(target.values)\r\n    524 \r\n    525     def sort_values(self, return_indexer=False, ascending=True):\r\n\r\n/Users/jreback/pandas/pandas/src/intervaltree.pxi in pandas._interval.IntervalTree.get_indexer (pandas/src/interval.c:11925)()\r\n    141                 result.append(-1)\r\n    142             elif result.data.n > old_len + 1:\r\n--> 143                 raise KeyError(\r\n    144                     'indexer does not intersect a unique set of intervals')\r\n    145             old_len = result.data.n\r\n\r\nKeyError: 'indexer does not intersect a unique set of intervals'\r\n\r\nIn [7]: df.index.is_unique\r\nOut[7]: False\r\n```\r\nIs [6] just not well-represented in the intervaltrees?\r\n\r\nI actually think this is a pretty common case. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278486915",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-278486915",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 278486915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ4NjkxNQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T22:44:29Z",
    "updated_at": "2017-02-08T22:44:29Z",
    "author_association": "MEMBER",
    "body": "> In [3]: df.index\r\nOut[3]: \r\nIntervalIndex(left=[-0.009, -0.009, 1.8, 1.8, 3.6, 3.6, 5.4, 5.4, 7.2, 7.2],\r\n              right=[1.8, 1.8, 3.6, 3.6, 5.4, 5.4, 7.2, 7.2, 9.0, 9.0],\r\n              closed='right',\r\n              name='B',\r\n              dtype='interval[float64]')\r\n\r\nShouldn't this be a CategoricalIndex with IntervalIndex categories?\r\n\r\n> Is [6] just not well-represented in the intervaltrees?\r\n\r\nI think it's just as well represented for interval trees as it is for hash tables. But my understanding is that `get_indexer` is always supposed to return an array of the same length as the requested labels, so it doesn't work if you don't have unique values. I think this is the analogous case for `Int64Index`:\r\n```\r\n>>> idx = pd.Index([1, 2, 2, 2, 3])\r\n>>> idx.get_indexer([1])  # note that I'm not even indexing the duplicated value (2)\r\nInvalidIndexError: Reindexing only valid with uniquely valued Index objects\r\n```\r\n\r\nSo actually, for consistency we should probably raise in `get_indexer` whenever the index has non-unique or even overlapping values.\r\n\r\nFor this sort of behavior, I think you want `get_indexer_non_unique` -- and I actually wrote an IntervalTree method for that, though it may not be hooked up into IntervalIndex."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278488767",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-278488767",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 278488767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ4ODc2Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T22:52:05Z",
    "updated_at": "2017-02-08T22:52:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Shouldn't this be a CategoricalIndex with IntervalIndex categories?\r\n\r\ninteresting you should say that, I fiddled with this a bit\r\n\r\n```\r\nIn [1]: df = DataFrame({'A': range(10)})\r\n   ...: s = pd.cut(df.A, 5)\r\n   ...: \r\n\r\nIn [2]: s\r\nOut[2]: \r\n0    (-0.009, 1.8]\r\n1    (-0.009, 1.8]\r\n2       (1.8, 3.6]\r\n3       (1.8, 3.6]\r\n4       (3.6, 5.4]\r\n5       (3.6, 5.4]\r\n6       (5.4, 7.2]\r\n7       (5.4, 7.2]\r\n8       (7.2, 9.0]\r\n9       (7.2, 9.0]\r\nName: A, dtype: category\r\nCategories (5, interval[float64]): [(-0.009, 1.8] < (1.8, 3.6] < (3.6, 5.4] < (5.4, 7.2] < (7.2, 9.0]]\r\n\r\nIn [4]: s.cat.categories\r\nOut[4]: \r\nIntervalIndex(left=[-0.009, 1.8, 3.6, 5.4, 7.2],\r\n              right=[1.8, 3.6, 5.4, 7.2, 9.0],\r\n              closed='right',\r\n              dtype='interval[float64]')\r\n```\r\n\r\nso ``.cut`` return a ``Categorical`` (Series/Index depending on what's passed in). This is the *same* as we do now, but the Index is made up of the Interval-like strings.\r\n\r\nSo this actually makes a lot of sense. BUT, if you assign it to a DataFrame what should this do. I *can* leave it as a categorical, but then you get weird inconsistences, see here: https://github.com/pandas-dev/pandas/pull/15309/commits/bfd99d399a3f4d1fc25e731d3341687b17de91e9, so instead I coerce this to a ndarray of intervals. Thus the index because an ``IntervalIndex`` automatically. Which is way more useful that a ``Categorical of IntervalIndex``. I think this is ok."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278489137",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-278489137",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 278489137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ4OTEzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T22:53:32Z",
    "updated_at": "2017-02-08T22:53:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So this actually makes a lot of sense. BUT, if you assign it to a DataFrame what should this do. I can leave it as a categorical, but then you get weird inconsistences, see here: bfd99d3, so instead I coerce this to a ndarray of intervals. Thus the index because an IntervalIndex automatically. Which is way more useful that a Categorical of IntervalIndex. I think this is ok.\r\n\r\nahh, yes I can easily try different paths for unique and non-unique, ok.\r\n\r\nDo you have an implementation for non-unique? (e.g. given indexers return the included intervals for that indexer). "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278489272",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-278489272",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 278489272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ4OTI3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T22:54:07Z",
    "updated_at": "2017-02-08T22:54:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer ahh I see you DO have a ``get_indexer_non_unique``, ahh let me try that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278492431",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-278492431",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 278492431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ5MjQzMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T23:07:38Z",
    "updated_at": "2017-02-08T23:07:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\nIn [1]:         df = DataFrame({'A': range(10)})\r\n   ...:         s = pd.cut(df.A, 5)\r\n   ...:         df['B'] = s\r\n   ...:         df = df.set_index('B')\r\n   ...: \r\n\r\nIn [2]: df\r\nOut[2]: \r\n               A\r\nB               \r\n(-0.009, 1.8]  0\r\n(-0.009, 1.8]  1\r\n(1.8, 3.6]     2\r\n(1.8, 3.6]     3\r\n(3.6, 5.4]     4\r\n(3.6, 5.4]     5\r\n(5.4, 7.2]     6\r\n(5.4, 7.2]     7\r\n(7.2, 9.0]     8\r\n(7.2, 9.0]     9\r\n```\r\n\r\nthis all looks ok\r\n```\r\nIn [3]: df.loc[[4]]\r\nOut[3]: \r\n            A\r\nB            \r\n(3.6, 5.4]  4\r\n(3.6, 5.4]  5\r\n\r\nIn [4]: df.loc[[4, 5]]\r\nOut[4]: \r\n            A\r\nB            \r\n(3.6, 5.4]  4\r\n(3.6, 5.4]  5\r\n(3.6, 5.4]  4\r\n(3.6, 5.4]  5\r\n\r\nIn [5]: df.loc[[10]]\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-5-315006c1f115> in <module>()\r\n----> 1 df.loc[[10]]\r\n\r\n/Users/jreback/pandas/pandas/core/indexing.py in __getitem__(self, key)\r\n   1338         else:\r\n   1339             key = com._apply_if_callable(key, self.obj)\r\n-> 1340             return self._getitem_axis(key, axis=0)\r\n   1341 \r\n   1342     def _is_scalar_access(self, key):\r\n\r\n/Users/jreback/pandas/pandas/core/indexing.py in _getitem_axis(self, key, axis)\r\n   1538                     raise ValueError('Cannot index with multidimensional key')\r\n   1539 \r\n-> 1540                 return self._getitem_iterable(key, axis=axis)\r\n   1541 \r\n   1542             # nested tuple slicing\r\n\r\ndev/pandas/pull/15309/commits/464cff2d04be86753ce72cd0f3d96eb2fad7c227\r\n\r\n   1541 \r\n   1542             # nested tuple slicing\r\n\r\n/Users/jreback/pandas/pandas/core/indexing.py in _getitem_iterable(self, key, axis)\r\n   1048     def _getitem_iterable(self, key, axis=0):\r\n   1049         if self._should_validate_iterable(axis):\r\n-> 1050             self._has_valid_type(key, axis)\r\n   1051 \r\n   1052         labels = self.obj._get_axis(axis)\r\n\r\n/Users/jreback/pandas/pandas/core/indexing.py in _has_valid_type(self, key, axis)\r\n   1428 \r\n   1429                 raise KeyError(\"None of [%s] are in the [%s]\" %\r\n-> 1430                                (key, self.obj._get_axis_name(axis)))\r\n   1431 \r\n   1432             return True\r\n\r\nKeyError: 'None of [[10]] are in the [index]'\r\n```\r\n\r\nThis is suspect, this should be returning -1 for the indexers (rather than raising). So going to fix.\r\n```\r\nIn [6]: df.loc[[10, 4]]\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-6-50e470a1fe86> in <module>()\r\n----> 1 df.loc[[10, 4]]\r\n\r\n/Users/jreback/pandas/pandas/core/indexing.py in __getitem__(self, key)\r\n   1338         else:\r\n   1339             key = com._apply_if_callable(key, self.obj)\r\n-> 1340             return self._getitem_axis(key, axis=0)\r\n   1341 \r\n   1342     def _is_scalar_access(self, key):\r\n\r\n/Users/jreback/pandas/pandas/core/indexing.py in _getitem_axis(self, key, axis)\r\n   1538                     raise ValueError('Cannot index with multidimensional key')\r\n   1539 \r\n-> 1540                 return self._getitem_iterable(key, axis=axis)\r\n   1541 \r\n   1542             # nested tuple slicing\r\n\r\n/Users/jreback/pandas/pandas/core/indexing.py in _getitem_iterable(self, key, axis)\r\n   1068             # have the index handle the indexer and possibly return\r\n   1069             # an indexer or raising\r\n-> 1070             indexer = labels._convert_list_indexer(keyarr, kind=self.name)\r\n   1071             if indexer is not None:\r\n   1072                 return self.obj.take(indexer, axis=axis)\r\n\r\n/Users/jreback/pandas/pandas/indexes/interval.py in _convert_list_indexer(self, keyarr, kind)\r\n    415         # TODO: handle keyarr if it includes intervals\r\n    416         if (locs == -1).any():\r\n--> 417             raise KeyError(\"a list-indexer must only include \"\r\n    418                            \"existing intervals\")\r\n    419 \r\n\r\nKeyError: 'a list-indexer must only include existing intervals'\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278817241",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-278817241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 278817241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODgxNzI0MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T00:04:29Z",
    "updated_at": "2017-02-10T00:04:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer \r\n\r\nthis is from the original issue\r\n\r\n> IntervalIndex should play nicely when used as the levels for Categorical variable (#7217), but it is not the same as a CategoricalIndex (#7629). For example, a IntervalIndex should not allow for redundant values. To represent redundant or non-continuous intervals, you would need to make in a Categorical or CategoricalIndex which uses a IntervalIndex for the levels. Calling df.reset_index() on an DataFrame with an IntervalIndex would create a new Categorical column.\r\n\r\nwhy should an ``IntervalIndex`` NOT allow redundant values? (and instead be a ``CategoricalIndex`` with level of an ``IntervalIndex``). Is there a reason for this constraint? (just want to understand your rationale here).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278818078",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-278818078",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 278818078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODgxODA3OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T00:09:27Z",
    "updated_at": "2017-02-10T00:09:27Z",
    "author_association": "MEMBER",
    "body": "> why should an IntervalIndex NOT allow redundant values? (and instead be a CategoricalIndex with level of an IntervalIndex). Is there a reason for this constraint? (just want to understand your rationale here).\r\n\r\nYeah, I don't remember why now but this does seem strange.\r\n\r\nThe only reason why this makes any sense to me is that there are optimizations one can do for look-ups if the IntervalIndex consists of non-overlapping, continuous intervals (you can use binary search instead of the interval tree)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/279951336",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-279951336",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 279951336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTk1MTMzNg==",
    "user": {
      "login": "qAp",
      "id": 2902346,
      "node_id": "MDQ6VXNlcjI5MDIzNDY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2902346?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qAp",
      "html_url": "https://github.com/qAp",
      "followers_url": "https://api.github.com/users/qAp/followers",
      "following_url": "https://api.github.com/users/qAp/following{/other_user}",
      "gists_url": "https://api.github.com/users/qAp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qAp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qAp/subscriptions",
      "organizations_url": "https://api.github.com/users/qAp/orgs",
      "repos_url": "https://api.github.com/users/qAp/repos",
      "events_url": "https://api.github.com/users/qAp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qAp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-15T08:49:16Z",
    "updated_at": "2017-02-15T08:49:16Z",
    "author_association": "NONE",
    "body": "If you don't me asking... if I wanted to use the new `pd.cut` in this PR right now, what would I need to do?  I have:\r\n```\r\ngit remote add jreback https://github.com/jreback/pandas.git\r\ngit fetch jreback\r\ngit checkout remotes/jreback/intervalindex\r\ngit checkout -b intervalindex\r\n```\r\nThe code now has the changes made in this PR,  but `import pandas` raises an Error except for if I switched back to the `master` branch.  Do I need to somehow reinstall pandas off the `intervalindex` branch?  "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/279952552",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-279952552",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 279952552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTk1MjU1Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-15T08:54:49Z",
    "updated_at": "2017-02-15T08:54:49Z",
    "author_association": "MEMBER",
    "body": "@qAp This PR has changes in the c code, so you need to rebuild pandas. So after the commands you used above to checkout the correct branch, you need to do `python setup.py build_ext -i`. \r\nSee the contributing docs for more information: http://pandas.pydata.org/pandas-docs/stable/contributing.html"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/280051835",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-280051835",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 280051835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDA1MTgzNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-15T16:01:03Z",
    "updated_at": "2017-02-15T16:01:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@qAp happy to have you test this out.....pls report any issues here."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283678149",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283678149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283678149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzY3ODE0OQ==",
    "user": {
      "login": "zfrenchee",
      "id": 2761597,
      "node_id": "MDQ6VXNlcjI3NjE1OTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2761597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zfrenchee",
      "html_url": "https://github.com/zfrenchee",
      "followers_url": "https://api.github.com/users/zfrenchee/followers",
      "following_url": "https://api.github.com/users/zfrenchee/following{/other_user}",
      "gists_url": "https://api.github.com/users/zfrenchee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zfrenchee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zfrenchee/subscriptions",
      "organizations_url": "https://api.github.com/users/zfrenchee/orgs",
      "repos_url": "https://api.github.com/users/zfrenchee/repos",
      "events_url": "https://api.github.com/users/zfrenchee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zfrenchee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T15:05:42Z",
    "updated_at": "2017-03-02T15:05:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Any news on this? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283678819",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283678819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283678819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzY3ODgxOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T15:08:03Z",
    "updated_at": "2017-03-02T15:08:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@zfrenchee I have to make a few more internal changes to make some things consistent.\r\n\r\ncan I ask your usecases? / examples (e.g. so can have additional tests mainly.....)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283689764",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283689764",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283689764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzY4OTc2NA==",
    "user": {
      "login": "zfrenchee",
      "id": 2761597,
      "node_id": "MDQ6VXNlcjI3NjE1OTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2761597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zfrenchee",
      "html_url": "https://github.com/zfrenchee",
      "followers_url": "https://api.github.com/users/zfrenchee/followers",
      "following_url": "https://api.github.com/users/zfrenchee/following{/other_user}",
      "gists_url": "https://api.github.com/users/zfrenchee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zfrenchee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zfrenchee/subscriptions",
      "organizations_url": "https://api.github.com/users/zfrenchee/orgs",
      "repos_url": "https://api.github.com/users/zfrenchee/repos",
      "events_url": "https://api.github.com/users/zfrenchee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zfrenchee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T15:45:01Z",
    "updated_at": "2017-03-02T15:45:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback We have two sets of genomic regions e.g. `regions 1: (base 10-15, base 22-26, etc...)` and `regions 2: (base 17-19, base 25-31)` and we'll want to report back any overlaps between the two regions. e.g. `overlaps: [(22-26, 25-31), (...),...]`. Each set of regions might be ~10k-100k large and we want to get this list of overlaps as speedily as possible. Right now I'm using https://github.com/chaimleib/intervaltree which was extremely convenient but doesn't optimize for speed. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283702432",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283702432",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283702432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzcwMjQzMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T16:26:34Z",
    "updated_at": "2017-03-02T16:26:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@zfrenchee cursory look at that seems to be a compat API (though we might have some missing things, and indexing is using standard pandas idioms). Can you show a sample of what you are doing (in a dataframe itself would be ideal).\r\n\r\ncc @shoyer ?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283750203",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283750203",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283750203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mzc1MDIwMw==",
    "user": {
      "login": "zfrenchee",
      "id": 2761597,
      "node_id": "MDQ6VXNlcjI3NjE1OTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2761597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zfrenchee",
      "html_url": "https://github.com/zfrenchee",
      "followers_url": "https://api.github.com/users/zfrenchee/followers",
      "following_url": "https://api.github.com/users/zfrenchee/following{/other_user}",
      "gists_url": "https://api.github.com/users/zfrenchee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zfrenchee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zfrenchee/subscriptions",
      "organizations_url": "https://api.github.com/users/zfrenchee/orgs",
      "repos_url": "https://api.github.com/users/zfrenchee/repos",
      "events_url": "https://api.github.com/users/zfrenchee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zfrenchee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T19:15:23Z",
    "updated_at": "2017-03-02T19:15:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I'm not sure I understand. I think the issue is that I don't know what a compat API is. \r\n\r\nI have two dataframes, each with \"starts\" and \"ends\" columns. I want to compute an overlap between these two dataframes which represent sets of intervals. In my case, each dataframe never overlaps itself, but we expect a fair bit of overlap between them.  "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283754312",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283754312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283754312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mzc1NDMxMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T19:29:34Z",
    "updated_at": "2017-03-02T19:29:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@zfrenchee what I mean is show a small sample for each frame and the operation you wish to do (and the results). It can be some pseudo code (or actual code if you have). I want to see the kind of operations. Ideally you can show a small (copy-pastable example), and certainly make up number / fields as appropriate."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283782283",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283782283",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283782283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mzc4MjI4Mw==",
    "user": {
      "login": "zfrenchee",
      "id": 2761597,
      "node_id": "MDQ6VXNlcjI3NjE1OTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2761597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zfrenchee",
      "html_url": "https://github.com/zfrenchee",
      "followers_url": "https://api.github.com/users/zfrenchee/followers",
      "following_url": "https://api.github.com/users/zfrenchee/following{/other_user}",
      "gists_url": "https://api.github.com/users/zfrenchee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zfrenchee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zfrenchee/subscriptions",
      "organizations_url": "https://api.github.com/users/zfrenchee/orgs",
      "repos_url": "https://api.github.com/users/zfrenchee/repos",
      "events_url": "https://api.github.com/users/zfrenchee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zfrenchee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T21:13:14Z",
    "updated_at": "2017-03-02T21:13:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback sure\r\n\r\n```\r\nA = pd.DataFrame([(1, 3), (5, 7)], columns=[\"start\",\"stop\"])\r\nB = pd.DataFrame([(2, 4), (6, 8)], columns=[\"start\",\"stop\"])\r\nC = A.intersect(B)\r\nC \r\n# => pd.dataframe([(1, 3, 2, 4), (5, 7, 6, 8)], columns=[\"A_start\",\"A_stop\",\"B_start\",\"B_stop\"])\r\n```\r\n\r\nOr something thereabouts. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283786433",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283786433",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283786433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mzc4NjQzMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T21:24:03Z",
    "updated_at": "2017-03-02T21:24:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@zfrenchee ok, going to start back with this tomorrow, so will have a look\r\n\r\nhow big is each frame that you are looking at?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283800201",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-283800201",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 283800201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzgwMDIwMQ==",
    "user": {
      "login": "zfrenchee",
      "id": 2761597,
      "node_id": "MDQ6VXNlcjI3NjE1OTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2761597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zfrenchee",
      "html_url": "https://github.com/zfrenchee",
      "followers_url": "https://api.github.com/users/zfrenchee/followers",
      "following_url": "https://api.github.com/users/zfrenchee/following{/other_user}",
      "gists_url": "https://api.github.com/users/zfrenchee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zfrenchee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zfrenchee/subscriptions",
      "organizations_url": "https://api.github.com/users/zfrenchee/orgs",
      "repos_url": "https://api.github.com/users/zfrenchee/repos",
      "events_url": "https://api.github.com/users/zfrenchee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zfrenchee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T22:16:24Z",
    "updated_at": "2017-03-02T22:16:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "About 10k-100k rows, in the average case I think. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284081223",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-284081223",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 284081223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDA4MTIyMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-03T21:57:08Z",
    "updated_at": "2017-03-03T21:57:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok so here's a way of doing what I *think* you want.\r\n\r\ncreating a frame, we have the evens and odds which are both intervals. setting the index to evens\r\n```\r\nIn [16]: df = pd.DataFrame({'evens': pd.IntervalIndex.from_breaks(np.arange(0, N, 2)), 'odds': pd.IntervalIndex.from_breaks(np.arange(1, N+1, 2)), 'n':np.arange(N//2-1)}).set_index('evens')\r\n\r\nIn [17]: df\r\nOut[17]: \r\n                    n            odds\r\nevens                                \r\n(0, 2]              0          (1, 3]\r\n(2, 4]              1          (3, 5]\r\n(4, 6]              2          (5, 7]\r\n(6, 8]              3          (7, 9]\r\n(8, 10]             4         (9, 11]\r\n...               ...             ...\r\n(99988, 99990]  49994  (99989, 99991]\r\n(99990, 99992]  49995  (99991, 99993]\r\n(99992, 99994]  49996  (99993, 99995]\r\n(99994, 99996]  49997  (99995, 99997]\r\n(99996, 99998]  49998  (99997, 99999]\r\n\r\n[49999 rows x 2 columns]\r\n```\r\n\r\nWe have an intervalindex\r\n```\r\nIn [18]: df.index\r\nOut[18]: \r\nIntervalIndex(left=[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, ...],\r\n              right=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, ...],\r\n              closed='right',\r\n              name='evens',\r\n              dtype='interval[int64]')\r\n```\r\n\r\nHere we are using a super-hacked up version of ``.get_indexer`` that handles this overlap case. Its quite inefficient ATM (because I am doing some internal python looping for a part), though the lookups are using the intervalclass cython that @shoyer wrote, but easy to fix.\r\n\r\nThe idea here is we are finding the overlaps. (the dupes are wrong, as my lookups are weird here).\r\n```\r\nIn [21]: df.loc[df.index.find_intersections(pd.IntervalIndex(df['odds']))]\r\nOut[21]: \r\n                    n            odds\r\nevens                                \r\n(0, 2]              0          (1, 3]\r\n(0, 2]              0          (1, 3]\r\n(2, 4]              1          (3, 5]\r\n(2, 4]              1          (3, 5]\r\n(4, 6]              2          (5, 7]\r\n...               ...             ...\r\n(49992, 49994]  24996  (49993, 49995]\r\n(49994, 49996]  24997  (49995, 49997]\r\n(49994, 49996]  24997  (49995, 49997]\r\n(49996, 49998]  24998  (49997, 49999]\r\n(49996, 49998]  24998  (49997, 49999]\r\n\r\n[49998 rows x 2 columns]\r\n```\r\n\r\n```\r\nIn [22]: %timeit df.loc[df.index.find_intersections(pd.IntervalIndex(df['odds']))]\r\n1 loop, best of 3: 648 ms per loop\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284082008",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-284082008",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 284082008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDA4MjAwOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-03T22:00:36Z",
    "updated_at": "2017-03-03T22:00:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer \r\n\r\n```\r\n    def find_intersections(self, other):\r\n        \"\"\"\r\n        super-hacky intersection\r\n\r\n        other: IntervalIndex\r\n        \"\"\"\r\n        tuples = list(zip(self._engine.get_indexer(other.left.values),\r\n                          self._engine.get_indexer(other.right.values)))\r\n\r\n        # to filter the missing ones\r\n        tuples = [ tup for tup in tuples if tup[0] != -1 and tup[1] != -1]\r\n        return type(self).from_tuples(tuples, closed=self.closed,\r\n                                      name=self.name)\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284768263",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-284768263",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 284768263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDc2ODI2Mw==",
    "user": {
      "login": "zfrenchee",
      "id": 2761597,
      "node_id": "MDQ6VXNlcjI3NjE1OTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2761597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zfrenchee",
      "html_url": "https://github.com/zfrenchee",
      "followers_url": "https://api.github.com/users/zfrenchee/followers",
      "following_url": "https://api.github.com/users/zfrenchee/following{/other_user}",
      "gists_url": "https://api.github.com/users/zfrenchee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zfrenchee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zfrenchee/subscriptions",
      "organizations_url": "https://api.github.com/users/zfrenchee/orgs",
      "repos_url": "https://api.github.com/users/zfrenchee/repos",
      "events_url": "https://api.github.com/users/zfrenchee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zfrenchee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T16:12:02Z",
    "updated_at": "2017-03-07T16:12:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback one note is that in my case, I want to allow many-to-many overlaps, so if intervals `a_1` and `a_2` from `A` both overlap with `b_1` and `b_2` from `B`, then as an output I'd like\r\n```\r\na_1 b_1\r\na_1 b_2\r\na_2 b_1\r\na_2 b_2\r\n```\r\n\r\nI've been assuming we need to merge this PR in order to have access to `IntervalIndex`. Is that assumption valid? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286463362",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-286463362",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 286463362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjQ2MzM2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T15:45:22Z",
    "updated_at": "2017-03-14T15:45:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "if anyone who is interested would have a look!\r\n\r\nI revised this to remove the API change that I had before. now ``pd.cut``, still returns a ``CategoricalIndex`` (as it does in master). The difference is that the categories are now an ``IntervalIndex`` rather than an ``Index`` (of string intervals). The before was that I was actually returning an ``IntervalIndex``.\r\n\r\nI also updated the top section.\r\n\r\nThe reasons for this change are that the conversion between an array of ``Intervals`` and the ``IntervalIndex`` itself is not super cheap (as we don't actually have an ``IntervalBlock`` type).\r\n\r\nIndexing is quite logical as you can directly index just as you would with any other type. The semantics here are that a ``Categorical`` index can now defer to its categories to index (which actually is generally useful).\r\n\r\nIOW it makes sense to be able to index via ``.loc`` w/o actually having to specify something *in* the categories directly, rather the lookup is defered to the index.\r\n\r\nThis allows one to select things via an integer/float where it is *included* in the an interval itself, rather than having to a-priori specify the intervals (which you can do as well).\r\n\r\nSo ``CategoricalIndex`` is really just an efficient holder of the ``Interval`` objects.\r\n\r\nFrom a user point of view these interactions are pretty seemless and you won't really directly have an ``IntervalIndex`` unless you are actually setting it directly from an Interval column. This is almost identical to how we work with a *regular* index today, so I don't see any issues with this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286547445",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-286547445",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 286547445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjU0NzQ0NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T20:21:46Z",
    "updated_at": "2017-03-14T20:21:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/pandas-dev/pandas/pull/15309/commits/40198b971747c19a5cdd86908f0b37150602b629\r\n\r\n```\r\nIn [2]: i = pd.IntervalIndex([0, 1], [1, 2])\r\n\r\nIn [3]: i\r\nOut[3]: \r\nIntervalIndex(left=[0, 1],\r\n              right=[1, 2],\r\n              closed='right',\r\n              dtype='interval[int64]')\r\n\r\nIn [4]: 0 in i\r\nOut[4]: False\r\n\r\nIn [5]: 3 in i\r\nOut[5]: False\r\n\r\nIn [6]: pd.Interval(0, 1) in i\r\nOut[6]: True\r\n\r\nIn [7]: pd.Interval(0, 4) in i\r\nOut[7]: True\r\n\r\nIn [8]: pd.Interval(0, .5) in i\r\nOut[8]: True\r\n\r\nIn [9]: pd.Interval(-1, .5) in i\r\nOut[9]: True\r\n\r\nIn [10]: pd.Interval(-5, -2) in i\r\nOut[10]: False\r\n\r\nIn [11]: i._is_contained_in(4)\r\nOut[11]: False\r\n\r\nIn [12]: i._is_contained_in(0.5)\r\nOut[12]: True\r\n\r\nIn [14]: i._is_contained_in(0)\r\nOut[14]: False\r\n\r\nIn [15]: i._is_contained_in(0.1)\r\nOut[15]: True\r\n\r\nIn [16]: i._is_contained_in(1)\r\nOut[16]: True\r\n\r\n```\r\n\r\nI am not completely happy with this as we have the problem of what does an interval that only partially overlaps return?\r\n\r\nIt 'works' well enough now though (e.g. indexing is now internally using ``_is_contained_in``) which is what you need for key validation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286574578",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-286574578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 286574578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjU3NDU3OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T22:00:12Z",
    "updated_at": "2017-03-14T22:00:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud if you can give this a once-over and show some usecases would be great."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286598827",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15309#issuecomment-286598827",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15309",
    "id": 286598827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjU5ODgyNw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T23:55:06Z",
    "updated_at": "2017-03-14T23:55:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback May largely be out of scope for this PR, but playing around this as an unveven `Period` alternative.  Setup\r\n\r\n```\r\nleft = pd.DataFrame({'start': pd.to_datetime(['2014-01-01', '2014-01-04']), \r\n                     'end': pd.to_datetime(['2014-01-04', '2014-01-09']), \r\n                     'key': [1, 2]})\r\n\r\nleft.index = pd.IntervalIndex(left['start'], left['end'], closed='left')\r\n\r\nright = pd.DataFrame({'date': pd.date_range('2014-01-01', periods=6), \r\n                      'value': range(6)}).set_index('date')\r\n\r\nleft\r\nOut[29]: \r\n                                                  end  key      start\r\n[2014-01-01 00:00:00, 2014-01-04 00:00:00) 2014-01-04    1 2014-01-01\r\n[2014-01-04 00:00:00, 2014-01-09 00:00:00) 2014-01-09    2 2014-01-04\r\n\r\nright\r\nOut[30]: \r\n            value\r\ndate             \r\n2014-01-01      0\r\n2014-01-02      1\r\n2014-01-03      2\r\n2014-01-04      3\r\n2014-01-05      4\r\n2014-01-06      5\r\n```\r\n\r\nI didn't expect this to work, but also maybe should raise than return this?\r\n```\r\nIn [31]: left.join(right)\r\nOut[31]: \r\n                                                  end  key      start  value\r\n[2014-01-01 00:00:00, 2014-01-04 00:00:00) 2014-01-04    1 2014-01-01    NaN\r\n[2014-01-04 00:00:00, 2014-01-09 00:00:00) 2014-01-09    2 2014-01-04    NaN\r\n```\r\n\r\nIf I did want to join, is something like this as good as I can do?\r\n```\r\nIn [41]: pd.concat([left.loc[right.index, :].reset_index(), right.reset_index()], axis=1)\r\nOut[41]: \r\n                                        index        end  key      start  \\\r\n0  [2014-01-01 00:00:00, 2014-01-04 00:00:00) 2014-01-04    1 2014-01-01   \r\n1  [2014-01-01 00:00:00, 2014-01-04 00:00:00) 2014-01-04    1 2014-01-01   \r\n2  [2014-01-01 00:00:00, 2014-01-04 00:00:00) 2014-01-04    1 2014-01-01   \r\n3  [2014-01-04 00:00:00, 2014-01-09 00:00:00) 2014-01-09    2 2014-01-04   \r\n4  [2014-01-04 00:00:00, 2014-01-09 00:00:00) 2014-01-09    2 2014-01-04   \r\n5  [2014-01-04 00:00:00, 2014-01-09 00:00:00) 2014-01-09    2 2014-01-04   \r\n\r\n        date  value  \r\n0 2014-01-01      0  \r\n1 2014-01-02      1  \r\n2 2014-01-03      2  \r\n3 2014-01-04      3  \r\n4 2014-01-05      4  \r\n5 2014-01-06      5  \r\n```\r\n\r\n\r\n"
  }
]
