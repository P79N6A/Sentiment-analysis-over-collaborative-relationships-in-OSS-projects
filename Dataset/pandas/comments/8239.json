[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55473610",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-55473610",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 55473610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDczNjEw",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-12T23:43:16Z",
    "updated_at": "2014-09-12T23:43:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> make inplace=False default (changes Series.sort)\n\n-1. Although I'm not fan of this behaviour, IMO we're stuck with it*, this would break lots of code and there's no way to make a clean depreciation/migration path.\n\n+1 to cleaning up sort API, the other changes seem reasonable.\n\n*Perhaps we should name _everything_ order  ?? :S\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55480302",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-55480302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 55480302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDgwMzAy",
    "user": {
      "login": "patricktokeeffe",
      "id": 1348834,
      "node_id": "MDQ6VXNlcjEzNDg4MzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1348834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patricktokeeffe",
      "html_url": "https://github.com/patricktokeeffe",
      "followers_url": "https://api.github.com/users/patricktokeeffe/followers",
      "following_url": "https://api.github.com/users/patricktokeeffe/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricktokeeffe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricktokeeffe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricktokeeffe/subscriptions",
      "organizations_url": "https://api.github.com/users/patricktokeeffe/orgs",
      "repos_url": "https://api.github.com/users/patricktokeeffe/repos",
      "events_url": "https://api.github.com/users/patricktokeeffe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricktokeeffe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T03:22:05Z",
    "updated_at": "2014-09-13T03:22:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Regarding `inplace=False` as new default: could a scary warning be added to 0.15 without changing the current behavior and then in 0.16 or 0.17 make the switch?\n\nI tried to come up with a way to detect when users might expect the original behavior... couldn't find anything clean. The best one was probably:\n\n``` python\ndef sort( ..., inplace=None):\n    ...\n    inplace = True if inplace is None else False \n    ...\n```\n\nUnfortunately it's still a pretty bad idea. Backward-compatible, sure, but it's really just kicking the can down the road.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55481835",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-55481835",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 55481835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDgxODM1",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T04:49:26Z",
    "updated_at": "2014-09-13T04:49:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just don't see the value proposition in this particular breakage, it will affect a _lot_ of users, and you're not even \"fixing\" anything (i.e. fixing their buggy code) - you'd just be changing syntax. To quote [@y-p](https://github.com/pydata/pandas/issues/5190#issuecomment-31625750):\n\n> if a 1000 people need to modify working code to accomodate this change, is it still worth doing?\n\nI'd say I was on the liberal side of API breakages, but I don't see how this one can fly! :rage1:\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55482853",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-55482853",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 55482853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDgyODUz",
    "user": {
      "login": "patricktokeeffe",
      "id": 1348834,
      "node_id": "MDQ6VXNlcjEzNDg4MzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1348834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patricktokeeffe",
      "html_url": "https://github.com/patricktokeeffe",
      "followers_url": "https://api.github.com/users/patricktokeeffe/followers",
      "following_url": "https://api.github.com/users/patricktokeeffe/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricktokeeffe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricktokeeffe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricktokeeffe/subscriptions",
      "organizations_url": "https://api.github.com/users/patricktokeeffe/orgs",
      "repos_url": "https://api.github.com/users/patricktokeeffe/repos",
      "events_url": "https://api.github.com/users/patricktokeeffe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricktokeeffe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T05:49:07Z",
    "updated_at": "2014-09-13T05:49:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "The more unified the sort API becomes, the more glaring the inplace inconsistency will be. That said, I think the argument _is_ stronger to have consistent behavior vs. consistent signatures. Such a change should wait for a major version bump. (wait, who said 1.0?)\n\nSo keeping inplace=false for Series.sort means:\n- `DataFrame.sort` and `Series.sort` have (slightly) different signatures -- no biggie: docstrings\n- `Series.sort` would not become equivalent to `Series.order` -- but we still deprecate order? (I lean yes but maybe it's quite popular)\n- should new `inplace` keyword to `Series.sort_index` be False (to match df sorts) or True (to match s.sort)? I think False is correct so s.sort is the isolated case\n- if it can be agreed to change s.sort inplace in 1.0, should a warning be given?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55483063",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-55483063",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 55483063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDgzMDYz",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T06:02:04Z",
    "updated_at": "2014-09-13T06:05:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> if it can be agreed to change s.sort inplace in 1.0\n\nbig if! Definitely such a change should be discussed in the ML, but I think it's a tough sell.\n\n_I **agree** the inconsistency sucks, but practicality beats purity.... and this will (fairly) annoy a lot of people. I think if you're changing the API there needs to be some carrot cake rather than just stick (with this change I just see stick)._\n\nI was being serious about using/preferring `.order`, that route has the benefit of not being an API change _and_ not differing in behaviour from **both** numpy and python itself (lists). Better long-term?\n\nEdit: To me \"sort\" sounds inplace, whereas \"order\" is temporary arrangement.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55483523",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-55483523",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 55483523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDgzNTIz",
    "user": {
      "login": "patricktokeeffe",
      "id": 1348834,
      "node_id": "MDQ6VXNlcjEzNDg4MzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1348834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patricktokeeffe",
      "html_url": "https://github.com/patricktokeeffe",
      "followers_url": "https://api.github.com/users/patricktokeeffe/followers",
      "following_url": "https://api.github.com/users/patricktokeeffe/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricktokeeffe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricktokeeffe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricktokeeffe/subscriptions",
      "organizations_url": "https://api.github.com/users/patricktokeeffe/orgs",
      "repos_url": "https://api.github.com/users/patricktokeeffe/repos",
      "events_url": "https://api.github.com/users/patricktokeeffe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricktokeeffe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T06:35:11Z",
    "updated_at": "2014-09-13T06:35:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, that edit-note makes sense to me. I'll have a look at `order` and come back with some revisions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/90097659",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-90097659",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 90097659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDk3NjU5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-06T15:13:08Z",
    "updated_at": "2015-04-06T15:13:08Z",
    "author_association": "MEMBER",
    "body": "@patricktokeeffe see also #9816\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101654106",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-101654106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 101654106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTY1NDEwNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-13T12:56:17Z",
    "updated_at": "2015-05-13T12:56:17Z",
    "author_association": "MEMBER",
    "body": "> don't allow tuples to access levels of multi-index (`columns` arg of `DataFrame.sort` allows tuples); use new `level` argument instead\n\nI don't think this is equivalent. `columns` with a tuple is to be able to specify to sort on a specific column when having mult-indexed columns, while `level` is to specify a certain level of the multi-index index to sort by (when axis=0). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127081264",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8239#issuecomment-127081264",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8239",
    "id": 127081264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA4MTI2NA==",
    "user": {
      "login": "patricktokeeffe",
      "id": 1348834,
      "node_id": "MDQ6VXNlcjEzNDg4MzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1348834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patricktokeeffe",
      "html_url": "https://github.com/patricktokeeffe",
      "followers_url": "https://api.github.com/users/patricktokeeffe/followers",
      "following_url": "https://api.github.com/users/patricktokeeffe/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricktokeeffe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricktokeeffe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricktokeeffe/subscriptions",
      "organizations_url": "https://api.github.com/users/patricktokeeffe/orgs",
      "repos_url": "https://api.github.com/users/patricktokeeffe/repos",
      "events_url": "https://api.github.com/users/patricktokeeffe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricktokeeffe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T23:01:29Z",
    "updated_at": "2015-08-02T23:01:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "There really isn't a good compromise here; at least, I didn't find one. But #9816 has a good solution, see #10726.\n"
  }
]
