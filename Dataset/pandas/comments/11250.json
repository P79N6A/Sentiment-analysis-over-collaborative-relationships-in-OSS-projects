[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/145749571",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-145749571",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 145749571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NTc0OTU3MQ==",
    "user": {
      "login": "121onto",
      "id": 13111271,
      "node_id": "MDQ6VXNlcjEzMTExMjcx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13111271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/121onto",
      "html_url": "https://github.com/121onto",
      "followers_url": "https://api.github.com/users/121onto/followers",
      "following_url": "https://api.github.com/users/121onto/following{/other_user}",
      "gists_url": "https://api.github.com/users/121onto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/121onto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/121onto/subscriptions",
      "organizations_url": "https://api.github.com/users/121onto/orgs",
      "repos_url": "https://api.github.com/users/121onto/repos",
      "events_url": "https://api.github.com/users/121onto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/121onto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-06T06:01:55Z",
    "updated_at": "2015-10-06T15:20:00Z",
    "author_association": "NONE",
    "body": "This one is more memory efficient:\n\n``` python\ndef duplicate_columns(frame):\n    groups = frame.columns.to_series().groupby(frame.dtypes).groups\n    dups = []\n\n    for t, v in groups.items():\n\n        cs = frame[v].columns\n        vs = frame[v]\n        lcs = len(cs)\n\n        for i in range(lcs):\n            iv = vs.iloc[:,i].tolist()\n            for j in range(i+1, lcs):\n                jv = vs.iloc[:,j].tolist()\n                if iv == jv:\n                    dups.append(cs[i])\n                    break\n\n    return dups\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/145820108",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-145820108",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 145820108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NTgyMDEwOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-06T10:50:14Z",
    "updated_at": "2015-10-06T10:50:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@121onto what is the purpose of this issue? \n\nyou should need to benchmark this, with potentially mixed data, pass tests, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/145949912",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-145949912",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 145949912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NTk0OTkxMg==",
    "user": {
      "login": "121onto",
      "id": 13111271,
      "node_id": "MDQ6VXNlcjEzMTExMjcx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13111271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/121onto",
      "html_url": "https://github.com/121onto",
      "followers_url": "https://api.github.com/users/121onto/followers",
      "following_url": "https://api.github.com/users/121onto/following{/other_user}",
      "gists_url": "https://api.github.com/users/121onto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/121onto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/121onto/subscriptions",
      "organizations_url": "https://api.github.com/users/121onto/orgs",
      "repos_url": "https://api.github.com/users/121onto/repos",
      "events_url": "https://api.github.com/users/121onto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/121onto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-06T18:10:26Z",
    "updated_at": "2015-10-06T18:19:57Z",
    "author_association": "NONE",
    "body": "Thanks @jreback.  Here is modified code with a test:\n\n``` python\nfrom __future__ import print_function\nfrom pandas import DataFrame\nfrom pandas.core.common import array_equivalent\nfrom pandas.util.testing import assert_equal\nimport numpy as np\n\n\ndef duplicate_columns(frame):\n    groups = frame.columns.to_series().groupby(frame.dtypes).groups\n    dups = []\n\n    for t, v in groups.items():\n\n        cs = frame[v].columns\n        vs = frame[v]\n        lcs = len(cs)\n\n        for i in range(lcs):\n            ia = vs.iloc[:,i].values\n            for j in range(i+1, lcs):\n                ja = vs.iloc[:,j].values\n                if array_equivalent(ia, ja):\n                    dups.append(cs[i])\n                    break\n\n    return dups\n\n\ndef test_duplicate_columns():\n\n        data = {\n            'objects1' : ['A', 'B', 'C', 'C', 'B', 'A'],\n            'objects2' : ['A', 'B', 'C', 'B', 'B', 'A'],\n            'objects_dup' : ['A', 'B', 'C', 'C', 'B', 'A'],\n            'bools1' : [True, False, True, True, False, False],\n            'bools2' : [True, False, True, True, True, False],\n            'bools_dup' : [True, False, True, True, False, False],\n            'floats1' : [1., 2., 3., 3., 2., 1.],\n            'floats2' : [1., 3., 3., 5., 2., 1.],\n            'floats_dup' : [1., 2., 3., 3., 2., 1.],\n            'floats_withnan1' : [1., 2., 3., 3., np.nan, 1.],\n            'floats_withnan2' : [1., np.nan, 3., 3., np.nan, 1.],\n            'floats_withnan3' : [1., 2., 3., 3., 3., 1.],\n            'floats_withnan_dup' : [1., 2., 3., 3., np.nan, 1.],\n            'integers1' : [1, 2, 3, 3, 2, 1],\n            'integers2' : [1, 2, 2, 2, 2, 1],\n            'integers_dup' : [1, 2, 3, 3, 2, 1],\n        }\n\n        frame = DataFrame(data)\n        frame = frame.sort(axis=1)\n\n        dups = duplicate_columns(frame)\n        expected = [\n            'objects1',\n            'bools1',\n            'floats1',\n            'floats_withnan1',\n            'integers1',\n        ]\n\n        assert_equal(sorted(dups), sorted(expected))\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/145954875",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-145954875",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 145954875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NTk1NDg3NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-06T18:25:10Z",
    "updated_at": "2015-10-06T18:25:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "so what are the timings / memory figures?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/146007527",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-146007527",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 146007527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NjAwNzUyNw==",
    "user": {
      "login": "121onto",
      "id": 13111271,
      "node_id": "MDQ6VXNlcjEzMTExMjcx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13111271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/121onto",
      "html_url": "https://github.com/121onto",
      "followers_url": "https://api.github.com/users/121onto/followers",
      "following_url": "https://api.github.com/users/121onto/following{/other_user}",
      "gists_url": "https://api.github.com/users/121onto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/121onto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/121onto/subscriptions",
      "organizations_url": "https://api.github.com/users/121onto/orgs",
      "repos_url": "https://api.github.com/users/121onto/repos",
      "events_url": "https://api.github.com/users/121onto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/121onto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-06T21:29:31Z",
    "updated_at": "2015-10-06T21:56:08Z",
    "author_association": "NONE",
    "body": "A timing comparison with .T\n\n``` python\ndef transpose_duplicate_columns(frame):\n    groups = frame.columns.to_series().groupby(frame.dtypes).groups\n    dups = []\n\n    for t, v in groups.items():\n        tframe = frame[v].T\n        dups.extend(list(tframe.loc[tframe.duplicated(),:].index))\n\n    return dups\n\ndef profile_duplicate_columns(func, size=1):\n        data = {\n            'objects1' : ['A', 'B', 'C', 'C', 'B', 'A'],\n            'objects2' : ['A', 'B', 'C', 'B', 'B', 'A'],\n            'objects_dup' : ['A', 'B', 'C', 'C', 'B', 'A'],\n            'bools1' : [True, False, True, True, False, False],\n            'bools2' : [True, False, True, True, True, False],\n            'bools_dup' : [True, False, True, True, False, False],\n            'floats1' : [1., 2., 3., 3., 2., 1.],\n            'floats2' : [1., 3., 3., 5., 2., 1.],\n            'floats_dup' : [1., 2., 3., 3., 2., 1.],\n            'floats_withnan1' : [1., 2., 3., 3., np.nan, 1.],\n            'floats_withnan2' : [1., np.nan, 3., 3., np.nan, 1.],\n            'floats_withnan3' : [1., 2., 3., 3., 3., 1.],\n            'floats_withnan_dup' : [1., 2., 3., 3., np.nan, 1.],\n            'integers1' : [1, 2, 3, 3, 2, 1],\n            'integers2' : [1, 2, 2, 2, 2, 1],\n            'integers_dup' : [1, 2, 3, 3, 2, 1],\n        }\n\n        frame = DataFrame(data)\n        frame = frame.sort(axis=1)\n\n        for i in range(size):\n                frame = pd.concat([frame,frame]).reset_index(drop=True)\n\n        return func(frame)\n```\n\nUsing timeit:\n\n``` python\nIn [71]: %timeit profile_duplicate_columns(transpose_duplicate_columns, size=3)\n10 loops, best of 3: 46.1 ms per loop\n\nIn [72]: %timeit profile_duplicate_columns(transpose_duplicate_columns, size=4)\n10 loops, best of 3: 80.2 ms per loop\n\nIn [73]: %timeit profile_duplicate_columns(transpose_duplicate_columns, size=5)\n10 loops, best of 3: 149 ms per loop\n\nIn [74]: %timeit profile_duplicate_columns(transpose_duplicate_columns, size=6)\n1 loops, best of 3: 336 ms per loop\n\nIn [75]: %timeit profile_duplicate_columns(transpose_duplicate_columns, size=7)\n1 loops, best of 3: 1.19 s per loop\n\nIn [76]: %timeit profile_duplicate_columns(transpose_duplicate_columns, size=8)\n1 loops, best of 3: 6.35 s per loop\n\nIn [81]: %timeit profile_duplicate_columns(duplicate_columns, size=3)\n10 loops, best of 3: 21.3 ms per loop\n\nIn [82]: %timeit profile_duplicate_columns(duplicate_columns, size=4)\n10 loops, best of 3: 23.8 ms per loop\n\nIn [83]: %timeit profile_duplicate_columns(duplicate_columns, size=5)\n10 loops, best of 3: 26.5 ms per loop\n\nIn [84]: %timeit profile_duplicate_columns(duplicate_columns, size=6)\n10 loops, best of 3: 28.8 ms per loop\n\nIn [85]: %timeit profile_duplicate_columns(duplicate_columns, size=7)\n10 loops, best of 3: 31.5 ms per loop\n\nIn [86]: %timeit profile_duplicate_columns(duplicate_columns, size=8)\n10 loops, best of 3: 34.1 ms per loop\n\nIn [87]: %timeit profile_duplicate_columns(duplicate_columns, size=20)\n1 loops, best of 3: 4.75 s per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/146007675",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-146007675",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 146007675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NjAwNzY3NQ==",
    "user": {
      "login": "121onto",
      "id": 13111271,
      "node_id": "MDQ6VXNlcjEzMTExMjcx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13111271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/121onto",
      "html_url": "https://github.com/121onto",
      "followers_url": "https://api.github.com/users/121onto/followers",
      "following_url": "https://api.github.com/users/121onto/following{/other_user}",
      "gists_url": "https://api.github.com/users/121onto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/121onto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/121onto/subscriptions",
      "organizations_url": "https://api.github.com/users/121onto/orgs",
      "repos_url": "https://api.github.com/users/121onto/repos",
      "events_url": "https://api.github.com/users/121onto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/121onto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-06T21:30:12Z",
    "updated_at": "2015-10-06T21:30:12Z",
    "author_association": "NONE",
    "body": "Not sure how to profile memory usage but would be open to suggestions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/146015705",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-146015705",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 146015705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NjAxNTcwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-06T22:03:37Z",
    "updated_at": "2015-10-06T22:03:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "still not clear what you are actually proposing \n\nwhat you are timing and what drop--duplicates do are not the same thing\n\npls give a simple example\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/146030510",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-146030510",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 146030510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NjAzMDUxMA==",
    "user": {
      "login": "121onto",
      "id": 13111271,
      "node_id": "MDQ6VXNlcjEzMTExMjcx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13111271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/121onto",
      "html_url": "https://github.com/121onto",
      "followers_url": "https://api.github.com/users/121onto/followers",
      "following_url": "https://api.github.com/users/121onto/following{/other_user}",
      "gists_url": "https://api.github.com/users/121onto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/121onto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/121onto/subscriptions",
      "organizations_url": "https://api.github.com/users/121onto/orgs",
      "repos_url": "https://api.github.com/users/121onto/repos",
      "events_url": "https://api.github.com/users/121onto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/121onto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-06T23:13:13Z",
    "updated_at": "2015-10-06T23:16:45Z",
    "author_association": "NONE",
    "body": "Ah, perhaps my naming convention is not the best.  Maybe I should call it redundant_columns?\n\nThe functions are the same except each implements a distinct convention for picking out redundant columns: given a data frame with two identical columns 'first' and 'second', duplicate_columns will return 'first' while transpose_duplicate_columns will return 'second'.\n\nduplicate_columns solves a practical problem.  Suppose my client hands me a data set that was created by joining several tables.  They may be sloppy about joining, in which case the data will contain redundant columns with potentially different labels.  duplicate_columns solves this problem by creating a list of duplicative columns. \n\nFor example:\n\n``` python\ndef build_frame():\n        data = {\n            'objects1' : ['A', 'B', 'C', 'C', 'B', 'A'],\n            'objects2' : ['A', 'B', 'C', 'B', 'B', 'A'],\n            'objects_dup1' : ['A', 'B', 'C', 'C', 'B', 'A'],\n            'objects_dup2' : ['A', 'B', 'C', 'C', 'B', 'A']\n        }\n\n        frame = DataFrame(data)\n        return frame.sort(axis=1)\n\nframe = build_frame()\n```\n\nframe has several redundant columns pairs ('objects1', 'objects_dup1', 'objects_dup2' are the same).  duplicate_columns finds these pairs, returning a list of redundant columns, treating the last instance as non-redundant.  transpose_duplicate_columns does the same thing, except it treats the first instance as non-redundant\n\n``` python\nIn [10]: frame = build_frame()\n\nIn [11]: frame\nOut[12]:\n  objects1 objects2 objects_dup1 objects_dup2\n0        A        A            A            A\n1        B        B            B            B\n2        C        C            C            C\n3        C        B            C            C\n4        B        B            B            B\n5        A        A            A            A\n\nIn [13]: duplicate_columns(frame)\nOut[13]: ['objects1', 'objects_dup1']\n\nIn [14]: transpose_duplicate_columns(frame)\nOut[14]: ['objects_dup1', 'objects_dup2']\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/146184182",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-146184182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 146184182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NjE4NDE4Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-07T12:38:53Z",
    "updated_at": "2015-10-07T12:39:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@121onto \n\nso you are taking advantage of segregated dtypes, and using `array_equiavalent` which is a quick way of determining equality, whereas `.T.duplicated()` needs to factorize things first.\n\nOk, so this would be ok as `axis=1` parameter for `.duplicated()` (and equivalently for `.drop_duplicates()`). Not that care must be taken with processing of the `keep` parameter. Further this should return a boolean Series (like the current `.duplicates`). Also, you don't need to groupby by dtypes, simply using array_equivalent will work.\n\nFurther would need an some asv perf tests for this.\n\npls submit a pull-request\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/199754465",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-199754465",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 199754465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTc1NDQ2NQ==",
    "user": {
      "login": "bolau",
      "id": 488733,
      "node_id": "MDQ6VXNlcjQ4ODczMw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/488733?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bolau",
      "html_url": "https://github.com/bolau",
      "followers_url": "https://api.github.com/users/bolau/followers",
      "following_url": "https://api.github.com/users/bolau/following{/other_user}",
      "gists_url": "https://api.github.com/users/bolau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bolau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bolau/subscriptions",
      "organizations_url": "https://api.github.com/users/bolau/orgs",
      "repos_url": "https://api.github.com/users/bolau/repos",
      "events_url": "https://api.github.com/users/bolau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bolau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T10:58:41Z",
    "updated_at": "2016-03-22T10:58:41Z",
    "author_association": "NONE",
    "body": "Do you think it makes sense to compute and compare column sums before doing array_equivalent for data frames with many numeric columns?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358242460",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-358242460",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 358242460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODI0MjQ2MA==",
    "user": {
      "login": "ddofer",
      "id": 5120387,
      "node_id": "MDQ6VXNlcjUxMjAzODc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5120387?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ddofer",
      "html_url": "https://github.com/ddofer",
      "followers_url": "https://api.github.com/users/ddofer/followers",
      "following_url": "https://api.github.com/users/ddofer/following{/other_user}",
      "gists_url": "https://api.github.com/users/ddofer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ddofer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ddofer/subscriptions",
      "organizations_url": "https://api.github.com/users/ddofer/orgs",
      "repos_url": "https://api.github.com/users/ddofer/repos",
      "events_url": "https://api.github.com/users/ddofer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ddofer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T09:12:10Z",
    "updated_at": "2018-01-17T09:12:10Z",
    "author_association": "NONE",
    "body": "May I ask if there's any chance of this being implemented? (This thread is actually on of the top results for googling this issue/ removing columns by duplicated values). Thanks!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358270729",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-358270729",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 358270729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODI3MDcyOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T11:01:56Z",
    "updated_at": "2018-01-17T11:01:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ddofer this would take a community pull request. It would be very difficult as you can start with the code above. The tricky part would be a) writing the benchmarks (done somwhat above), b) assuring it only minimilly affects the common case (no dups)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378390156",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-378390156",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 378390156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODM5MDE1Ng==",
    "user": {
      "login": "TKlerx",
      "id": 1579185,
      "node_id": "MDQ6VXNlcjE1NzkxODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1579185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TKlerx",
      "html_url": "https://github.com/TKlerx",
      "followers_url": "https://api.github.com/users/TKlerx/followers",
      "following_url": "https://api.github.com/users/TKlerx/following{/other_user}",
      "gists_url": "https://api.github.com/users/TKlerx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TKlerx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TKlerx/subscriptions",
      "organizations_url": "https://api.github.com/users/TKlerx/orgs",
      "repos_url": "https://api.github.com/users/TKlerx/repos",
      "events_url": "https://api.github.com/users/TKlerx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TKlerx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T20:36:28Z",
    "updated_at": "2018-04-03T20:36:28Z",
    "author_association": "NONE",
    "body": "Hi all,\r\n\r\nany chance to resurrect this issue? What do you mean by b)?\r\nAs array_equivalent is marked as deprecated, will there be any implementation of duplicate columns? For me, this is a very common use case."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378393702",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11250#issuecomment-378393702",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11250",
    "id": 378393702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODM5MzcwMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T20:46:40Z",
    "updated_at": "2018-04-03T20:46:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is an open issue - would consider a pull request to implement "
  }
]
