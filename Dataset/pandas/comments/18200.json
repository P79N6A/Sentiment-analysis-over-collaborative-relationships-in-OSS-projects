[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343269830",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343269830",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343269830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI2OTgzMA==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T19:45:21Z",
    "updated_at": "2017-11-09T19:45:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/pandas-dev/pandas/pull/17630"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343269861",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343269861",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343269861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI2OTg2MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T19:45:28Z",
    "updated_at": "2017-11-09T19:45:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls read the whatâ€™s new http://pandas.pydata.org/pandas-docs/stable/whatsnew.html#sum-prod-of-all-nan-series-dataframes-is-now-consistently-nan\r\n\r\npandas has always had this behavior"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343270164",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343270164",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343270164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI3MDE2NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T19:46:33Z",
    "updated_at": "2017-11-09T19:46:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "note that your invariant holds with sum of empty = NaN\r\notherwise you lose information\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343275613",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343275613",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343275613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI3NTYxMw==",
    "user": {
      "login": "sam-s",
      "id": 1596894,
      "node_id": "MDQ6VXNlcjE1OTY4OTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1596894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sam-s",
      "html_url": "https://github.com/sam-s",
      "followers_url": "https://api.github.com/users/sam-s/followers",
      "following_url": "https://api.github.com/users/sam-s/following{/other_user}",
      "gists_url": "https://api.github.com/users/sam-s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sam-s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sam-s/subscriptions",
      "organizations_url": "https://api.github.com/users/sam-s/orgs",
      "repos_url": "https://api.github.com/users/sam-s/repos",
      "events_url": "https://api.github.com/users/sam-s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sam-s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T20:06:04Z",
    "updated_at": "2017-11-09T20:06:04Z",
    "author_association": "NONE",
    "body": "The invariant no longer holds:\r\n```\r\n>>> pd.concat([pd.Series([1]),pd.Series()]).equals(pd.Series([1]))\r\nTrue\r\n```\r\nthus should be\r\n```\r\npd.concat([pd.Series([1]),pd.Series()]).sum() == pd.Series([1]).sum() + pd.Series().sum()\r\n```\r\nwhich was `True` in `0.20.3` and now `False`\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343279363",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343279363",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343279363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI3OTM2Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T20:20:40Z",
    "updated_at": "2017-11-09T20:20:40Z",
    "author_association": "MEMBER",
    "body": "> pandas has always had this behavior\r\n\r\n@jreback this is not true, pandas always had the 0 behaviour for *empty* series (we broke this behaviour on purpose, for sure, but it was a breaking change)\r\n\r\n> pd.concat([pd.Series([1]),pd.Series()]).sum() == pd.Series([1]).sum() + pd.Series().sum()\r\n> \r\n> which was True in 0.20.3 and now False\r\n\r\nThis only evaluates to False because the `+` between scalars (`0 + np.nan`) is not skipping NaNs as the sum of pandas series does (if you have a series with [0, np.nan] and would sum this, you would get 0). \r\nSo I am not sure your comparison really holds.\r\n\r\n@sam-s we had long discussions about it, and both 0 and NaN behaviours have pros and cons, but in the end we needed to make a decision, which became NaN. You can read this discussion in https://github.com/pandas-dev/pandas/issues/9422"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343280706",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343280706",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343280706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI4MDcwNg==",
    "user": {
      "login": "sam-s",
      "id": 1596894,
      "node_id": "MDQ6VXNlcjE1OTY4OTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1596894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sam-s",
      "html_url": "https://github.com/sam-s",
      "followers_url": "https://api.github.com/users/sam-s/followers",
      "following_url": "https://api.github.com/users/sam-s/following{/other_user}",
      "gists_url": "https://api.github.com/users/sam-s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sam-s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sam-s/subscriptions",
      "organizations_url": "https://api.github.com/users/sam-s/orgs",
      "repos_url": "https://api.github.com/users/sam-s/repos",
      "events_url": "https://api.github.com/users/sam-s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sam-s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T20:25:51Z",
    "updated_at": "2017-11-09T20:25:51Z",
    "author_association": "NONE",
    "body": "Okay, I am sure it's too late for me to weep and scream.\r\nHowever, how do I check that there are no `NaN`s in a `DataFrame`?\r\nI used `df.isnull().sum().sum() == 0` before.\r\nWhat do I do now?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343281968",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343281968",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343281968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI4MTk2OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T20:31:03Z",
    "updated_at": "2017-11-09T20:31:03Z",
    "author_association": "MEMBER",
    "body": ">  I used df.isnull().sum().sum() == 0 before.\r\n\r\nDoesn't that still work?\r\n\r\n```\r\nIn [30]: pd.Series([1, 2, 3]).isnull().sum()\r\nOut[30]: 0\r\n\r\nIn [31]: pd.Series([1, 2, np.nan]).isnull().sum()\r\nOut[31]: 1\r\n```\r\n\r\nOr can you give a concrete example?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343282555",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343282555",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343282555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI4MjU1NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T20:33:17Z",
    "updated_at": "2017-11-09T20:33:17Z",
    "author_association": "MEMBER",
    "body": "> Okay, I am sure it's too late for me to weep and scream.\r\n\r\nProbably yes, but you can still raise your voice in https://github.com/pandas-dev/pandas/issues/9422. However I think it is mainly interesting to hear how it affects code (what do you need to do to work around the change) and how this can be easified."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343745846",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343745846",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343745846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc0NTg0Ng==",
    "user": {
      "login": "sam-s",
      "id": 1596894,
      "node_id": "MDQ6VXNlcjE1OTY4OTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1596894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sam-s",
      "html_url": "https://github.com/sam-s",
      "followers_url": "https://api.github.com/users/sam-s/followers",
      "following_url": "https://api.github.com/users/sam-s/following{/other_user}",
      "gists_url": "https://api.github.com/users/sam-s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sam-s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sam-s/subscriptions",
      "organizations_url": "https://api.github.com/users/sam-s/orgs",
      "repos_url": "https://api.github.com/users/sam-s/repos",
      "events_url": "https://api.github.com/users/sam-s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sam-s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-12T15:42:16Z",
    "updated_at": "2017-11-12T15:56:51Z",
    "author_association": "NONE",
    "body": "# `+` vs `sum`\r\n\r\n@jorisvandenbossche : you appear to be saying that `+` for scalars is somehow a different beast than `sum` for collections (lists/sets/series &c). This is so, well, _unexpected_, that I neglected to address it until you wrote in #9422 \"_... two different kinds of sums ..._\". I cannot comment there anymore, so I will reply here.\r\nAgain, I understand that math is not your only rationale, but I beg you to remember that the bulk of your customers are applied mathematicians and what I am about to say is the way we think about these issues, and this is why we will be screaming bloody murder on `sum([])==null` till the end of the world and back.\r\n\r\nWhen we have an associative binary operation `f`, such as `+`, we can define it on lists with at least two elements like this:\r\n```\r\nf(a,b,c,d,...z) := f(...(f(f(f(a,b),c),d),...),z)\r\n```\r\nor, in a more familiar infix notation\r\n```\r\na+b+c+d+...+z := (((((a+b)+c)+d)+...)+z)\r\n```\r\nWhen the operation has a [_unit_](https://en.wikipedia.org/wiki/Identity_element) `u` (e.g., `0` for `+` or `1` for `*`): `f(u,x)=f(x,u)=x` for any `x`, we can extend the list operation to _any_ list because\r\n```\r\nf(a,b,c,...z) = f(...(f(f(f(u,a),b),c),...),z)\r\n```\r\nand now `f(a)=f(u,a)=a` and `f()=u`.\r\n(((Note, parenthetically, that, strictly speaking, while `+` is a _binary_ operation, but you are not arguing that a sum of a list of _one_ element is undefined. Why? How is it different from a sum of a list of no argument from this POV?!)))\r\n\r\nThis definition is **natural** for any associative binary operation `OP` with a neutral element `UNIT`, and it works like this (this is a _mathematical_ definition identical to the above):\r\n```\r\nclass Collection:\r\n  def apply(self, OP):\r\n    result = UNIT\r\n    for x in self:\r\n      result = OP(result,x)\r\n    return result\r\n```\r\nClearly `[x].apply(+)==x` and `[].apply(+)==0` .\r\n\r\nThis is fully applicable to all such associative binary operations with a neutral element, e.g.,:\r\n\r\n* `+` and `0`\r\n* `*` and `1`\r\n* `max` and `-inf`\r\n* `min` and `inf`\r\n* `and`/`all` and `True`\r\n* `or`/`any` and `False`\r\n\r\n**The bottom line**: `OP([])=null` is wrong because it breaks associativity and your customers expect associativity the same way you expect your `C` compiler to be able to compile `a+=0` so that `a` does not change."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343746571",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343746571",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343746571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc0NjU3MQ==",
    "user": {
      "login": "sam-s",
      "id": 1596894,
      "node_id": "MDQ6VXNlcjE1OTY4OTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1596894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sam-s",
      "html_url": "https://github.com/sam-s",
      "followers_url": "https://api.github.com/users/sam-s/followers",
      "following_url": "https://api.github.com/users/sam-s/following{/other_user}",
      "gists_url": "https://api.github.com/users/sam-s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sam-s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sam-s/subscriptions",
      "organizations_url": "https://api.github.com/users/sam-s/orgs",
      "repos_url": "https://api.github.com/users/sam-s/repos",
      "events_url": "https://api.github.com/users/sam-s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sam-s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-12T15:53:27Z",
    "updated_at": "2017-11-12T15:53:27Z",
    "author_association": "NONE",
    "body": "# Any vs All\r\n\r\nThe NaN/null behavior should be defined for collections which have _some_ bad (NaN/null) data.\r\nWhether it has some valid data or not is irrelevant.\r\nE.g., in the presence of `null`, the above _definition_ becomes\r\n```\r\nclass Collection:\r\n  def apply(self, OP):\r\n    result = UNIT\r\n    for x in self:\r\n      if x.isnull() and propagate_null:\r\n        return null\r\n      else:\r\n        result = OP(result,x)\r\n    return result\r\n```\r\nClearly `apply` will return `null` if there _IS_ a `null`, not if there are _NO_ non-`null`s.\r\n\r\n@shoyer writes in #9422 : _This is reasonable from a mathematical perspective, but again is not the choice made by databases. In databases (and pandas) nulls can be introduced into empty results quite easily from joins, and in general there is no careful distinction._\r\n\r\nThe _choice made by databases_ is a _mistake_ made by the designers of SQL, as explained by @kenahoo. There is _no_ reason for pandas to repeat the mistake.\r\n\r\nPlease do not perpetuate a mistake made by others.\r\nYou are _not_ beholden to them."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343747671",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18200#issuecomment-343747671",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18200",
    "id": 343747671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc0NzY3MQ==",
    "user": {
      "login": "sam-s",
      "id": 1596894,
      "node_id": "MDQ6VXNlcjE1OTY4OTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1596894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sam-s",
      "html_url": "https://github.com/sam-s",
      "followers_url": "https://api.github.com/users/sam-s/followers",
      "following_url": "https://api.github.com/users/sam-s/following{/other_user}",
      "gists_url": "https://api.github.com/users/sam-s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sam-s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sam-s/subscriptions",
      "organizations_url": "https://api.github.com/users/sam-s/orgs",
      "repos_url": "https://api.github.com/users/sam-s/repos",
      "events_url": "https://api.github.com/users/sam-s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sam-s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-12T16:09:21Z",
    "updated_at": "2017-11-12T16:09:21Z",
    "author_association": "NONE",
    "body": "Finally, note that the above argument is applicable only to associative operations.\r\n`std` and `mean` are _not_ such operations.\r\nYou can make an argument for both \r\n* `mean([]) = std([]) = std([x]) = NaN`\r\n\r\nand\r\n* `mean([])`, `std([])`, `std([x])` --> exception\r\n\r\nBoth are legitimate design choices and, while, personally, I prefer the second one, I defer to you.\r\n\r\nHowever, `sum([])=nan` is _not_ a legitimate design decision because it breaks the _contract_ of addition (yes, associativity is a part of the contract)."
  }
]
