[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/275391125",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15229#issuecomment-275391125",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15229",
    "id": 275391125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTM5MTEyNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-26T13:44:51Z",
    "updated_at": "2017-01-26T13:44:51Z",
    "author_association": "MEMBER",
    "body": "@haleemur Thanks for the issue!\r\n\r\n> Using plain-text sql with sqlalchemy engines don't work\r\n>     - if the % character is present in the query\r\n>     - with the argument params.\r\n\r\nThis does work, but the syntax you can use (https://www.python.org/dev/peps/pep-0249/#paramstyle) depends on the driver you are using. For example, psycopg2 uses the `%(name)s` style (http://initd.org/psycopg/docs/usage.html#passing-parameters-to-sql-queries). And for this reason `%` also have to be escaped as `%%`. \r\n\r\nBut I agree this can be confusing when just using the pandas interface and the user does not really care about the driver he/she is using. \r\nSo if wrapping the query with `text` would enable a more consistent usage pattern for the different drivers, that would certainly be welcome.\r\n\r\nI was only wondering: if your query is wrapped in `text`, do the other paramstyle methods still work? (eg can I still use `%(c1)s`, or do I need to use `:c1`) Otherwise we would have a backwards incompatibility problem.\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/275428224",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15229#issuecomment-275428224",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15229",
    "id": 275428224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTQyODIyNA==",
    "user": {
      "login": "haleemur",
      "id": 6108231,
      "node_id": "MDQ6VXNlcjYxMDgyMzE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6108231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haleemur",
      "html_url": "https://github.com/haleemur",
      "followers_url": "https://api.github.com/users/haleemur/followers",
      "following_url": "https://api.github.com/users/haleemur/following{/other_user}",
      "gists_url": "https://api.github.com/users/haleemur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haleemur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haleemur/subscriptions",
      "organizations_url": "https://api.github.com/users/haleemur/orgs",
      "repos_url": "https://api.github.com/users/haleemur/repos",
      "events_url": "https://api.github.com/users/haleemur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haleemur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-26T16:04:58Z",
    "updated_at": "2017-01-26T18:03:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm, this does break if the user is using %-style formatting and the sqlalchemy engine.\r\n\r\n```python\r\nimport pandas as pd\r\nfrom sqlalchemy import create_engine, text\r\nengine = create_engine('postgresql+psycopg2://hal@localhost/hal')\r\nstatement = \"SELECT COUNT(*) FROM test_orders WHERE customer_type LIKE %(c1)s\"\r\ndf = pd.read_sql_query(statement, engine, params={'c1': 'urban%'})\r\ndf.head()\r\n# works fine, output is: \r\n#    count\r\n# 0      2\r\n\r\ndf = pd.read_sql_query(text(statement), engine, params={'c1': 'urban%'})\r\n# does not work, because text() escapes the ``%`` in the statement. This is the exception:\r\n# ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near \"%\"\r\n# LINE 1: ...ECT COUNT(*) FROM test_orders WHERE customer_type LIKE %(c)s\r\n#                                                                   ^\r\n#  [SQL: 'SELECT COUNT(*) FROM test_orders WHERE customer_type LIKE %%(c)s']\r\n```\r\n\r\nI find it non-intuitive, because the user connects to a database through sqlalchemy engine, but has to specify parameters differently according to the underlying driver. Also, currently, the user is responsible for for escaping characters in the query string, when sqlalchemy provides a db-agnostic way to escape queries via the `text()` function, e.g. my original example with \r\n\r\n    statement = \"SELECT COUNT(*) FROM test_orders WHERE customer_type LIKE 'urban%'\"\r\n\r\nFor that to work, the user would have to write:\r\n\r\n    statement = \"SELECT COUNT(*) FROM test_orders WHERE customer_type LIKE 'urban%%'\"\r\n\r\nI think a more logical behavior would be\r\n\r\n* if user is using sqlalchemy.engine to connect: user should use `:param` style binding in the sql text.\r\n* if user is using database connection directly: user should use binding style set by the connection in the sql text.\r\n\r\nHowever, this breaks compatibility, and I would prefer to maintain compatibility as much as possible.\r\n\r\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/275880462",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15229#issuecomment-275880462",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15229",
    "id": 275880462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTg4MDQ2Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-28T22:51:04Z",
    "updated_at": "2017-01-28T22:51:04Z",
    "author_association": "MEMBER",
    "body": "I agree that the behaviour you propose would probably have been a better default if we did that from the beginning. However, we can't just change that now as this would break almost all code that uses `params` currently without wrapping in `text()`. \r\nAnd I don't directly see a way to circumvent this ... \r\n\r\nDocumentation about this is welcome, but of course not really a satisfying solution. It also seems we already have a little bit of documentation mentioning this: http://pandas.pydata.org/pandas-docs/stable/io.html#advanced-sqlalchemy-queries"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/277011893",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15229#issuecomment-277011893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15229",
    "id": 277011893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzAxMTg5Mw==",
    "user": {
      "login": "haleemur",
      "id": 6108231,
      "node_id": "MDQ6VXNlcjYxMDgyMzE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6108231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haleemur",
      "html_url": "https://github.com/haleemur",
      "followers_url": "https://api.github.com/users/haleemur/followers",
      "following_url": "https://api.github.com/users/haleemur/following{/other_user}",
      "gists_url": "https://api.github.com/users/haleemur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haleemur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haleemur/subscriptions",
      "organizations_url": "https://api.github.com/users/haleemur/orgs",
      "repos_url": "https://api.github.com/users/haleemur/repos",
      "events_url": "https://api.github.com/users/haleemur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haleemur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T16:45:28Z",
    "updated_at": "2017-02-02T17:46:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with your assessment. \r\n\r\n1. I think the current documentation level is good, but perhaps we can link to the advanced-sqlalchemy-querys section from the documentation pages for `read_sql` & `read_sql_query`.\r\n\r\n2. One way to enhance the user experience would be to issue a better error message when pure-text statements (optionally with params) are used with `sqlalchemy.engine`\r\n\r\n3. Another enhancement could be to also warn the user to wrap the statement with `sqlalchemy.text` and use `:param` style binding whenever a pure-text query is used with an `sqlalchemy.engine` to encourage usage more consistent with what `sqlalchemy.engine` expects.\r\n\r\nIf you agree, I can submit the PR for above."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/277046882",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15229#issuecomment-277046882",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15229",
    "id": 277046882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzA0Njg4Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T18:51:31Z",
    "updated_at": "2017-02-02T18:51:31Z",
    "author_association": "MEMBER",
    "body": "So the idea would be, in case an error is raised by sqlalchemy, to detect that the reason is because of not using the correct bindparams syntax, and then modify the error message to put more explanation?\r\n\r\nSo eg like `pd.read_sql(\"SELECT * FROM table where col=:param\", engine, params={'param': 1}`, that you detect that the query is not wrapped in `text()` but the `:param` style is used, and then improve the error message? \r\nDo I understand that correctly?\r\n\r\nRegarding point 3, I think in general warning, even if what you do is correctly, would be a bit too intrusive.\r\n\r\nBetter linking in the docs is certainly always welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/277164780",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15229#issuecomment-277164780",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15229",
    "id": 277164780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzE2NDc4MA==",
    "user": {
      "login": "haleemur",
      "id": 6108231,
      "node_id": "MDQ6VXNlcjYxMDgyMzE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6108231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haleemur",
      "html_url": "https://github.com/haleemur",
      "followers_url": "https://api.github.com/users/haleemur/followers",
      "following_url": "https://api.github.com/users/haleemur/following{/other_user}",
      "gists_url": "https://api.github.com/users/haleemur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haleemur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haleemur/subscriptions",
      "organizations_url": "https://api.github.com/users/haleemur/orgs",
      "repos_url": "https://api.github.com/users/haleemur/repos",
      "events_url": "https://api.github.com/users/haleemur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haleemur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-03T04:55:43Z",
    "updated_at": "2017-02-03T04:55:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, upon reflecting since I wrote that, I've come around to your position regarding point 3.\r\n\r\nFor point 2, yes. I'd like to handle the following error cases & improve the error message.\r\n\r\ncase 1:\r\n \r\n```python\r\npd.read_sql(\"SELECT * FROM table where col LIKE 'hal%'\", engine)\r\n```\r\n\r\ncase 2:\r\n\r\n```python\r\npd.read_sql(\"SELECT * FROM table where col=:param\", engine, params={'param': 1})\r\n``` \r\n\r\nAs soon as I get the time I write up this PR + tests, unless someone else wants to write this."
  }
]
