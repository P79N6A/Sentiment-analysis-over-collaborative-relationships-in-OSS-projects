[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/361480470",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-361480470",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 361480470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQ4MDQ3MA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T05:21:15Z",
    "updated_at": "2018-01-30T05:21:15Z",
    "author_association": "MEMBER",
    "body": "```python\r\nIn [2]: pd.Index([1, 1.], dtype=object).is_unique\r\nOut[2]: False\r\n```\r\n\r\n... which is correct (``1 == 1.``), and means that the error message about unicity is correct. So the wrong thing is that the other call is automatically casting to int."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418536143",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418536143",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418536143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODUzNjE0Mw==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T22:18:28Z",
    "updated_at": "2018-09-04T22:18:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> and means that the error message about unicity is correct\r\n\r\nso does this mean that the second example is actually giving the expected output?\r\n\r\nand that to initialize the MultiIndex you should add `verify_integrity=False`:\r\n\r\n```python\r\npd.MultiIndex(levels=[pd.Index([1, 1.], dtype=object), range(3)],\r\n              labels=[[0,1], [1,1]], verify_integrity=False)\r\n```\r\n\r\nwhich gives a MultiIndex containing both 1 and 1.0 in its first level.\r\n\r\n`MultiIndex(levels=[[1, 1.0], [0, 1, 2]],\r\n           labels=[[0, 1], [1, 1]])`\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418696302",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418696302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418696302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODY5NjMwMg==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T11:26:15Z",
    "updated_at": "2018-09-05T11:26:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "if we, for the moment, ignore the float from the problem description and 'manually' create a MultiIndex using `pd.Index([1, 1], dtype=object` for the first level:\r\n\r\n```python\r\n>>> pd.MultiIndex(levels=[pd.Index([1, 1], dtype=object), range(3)],\r\n...               labels=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]])\r\n```\r\n\r\nwe get:\r\n\r\n```python-traceback\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 2, in <module>\r\n  File \"...\\pandas\\core\\indexes\\multi.py\", line 242, in __new__\r\n    result._verify_integrity()\r\n  File \"...\\pandas\\core\\indexes\\multi.py\", line 285, in _verify_integrity\r\n    level=i))\r\nValueError: Level values must be unique: [1, 1] on level 0\r\n```\r\n\r\nwhich makes sense so we add `verify_integrity=False` to get the expected output :\r\n\r\n``` python\r\n>>> pd.MultiIndex(levels=[pd.Index([1, 1], dtype=object), range(3)],\r\n...               labels=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]], verify_integrity=False)\r\nMultiIndex(levels=[[1, 1], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n```\r\nif we now try to re-create this using `MultiIndex.from_product()`, we get:\r\n \r\n```python\r\n\r\n>>> pd.MultiIndex.from_product([pd.Index([1, 1], dtype=object), range(3)])\r\nMultiIndex(levels=[[1], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n```\r\nwhich is not the same as the output from either of the two previous cases!\r\n\r\nsince the `from_product()` method does not have a `verify_integrity` parameter, the expected output would be the `ValueError: Level values must be unique: [1, 1] on level 0` since this is the default for `pd.MultiIndex`\r\n\r\nso going back to the original issue, it appears it is not related to the input containing a float and that the expected output from the first example in the issue description should actually be:\r\n\r\n```python-traceback\r\nValueError: Level values must be unique: [1, 1.] on level 0\r\n```\r\ni think this then raises the question: Should `MultiIndex.from_product()` have a `verify_integrity` parameter?\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418707884",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418707884",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418707884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODcwNzg4NA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T12:12:47Z",
    "updated_at": "2018-09-05T12:12:47Z",
    "author_association": "MEMBER",
    "body": "> since the from_product() method does not have a verify_integrity parameter, the expected output would be the ValueError: Level values must be unique: [1, 1] on level 0 since this is the default for pd.MultiIndex\r\n\r\nI disagree: the ``from_product`` docs (and intuition) just refer to the \"cartesian product of iterables\", not in any way to the underlying levels.\r\n\r\nVice-versa, when you do ``pd.MultiIndex(levels=...)`` you are clearly passing levels, so it is OK check unicity and raise.\r\n\r\nBut indeed the problem is more subtle than I thought: ideally, we would want ``pd.Index([1, 1.], dtype=object).is_unique`` to return ``False``, but it's maybe to late to change. So assuming that does return ``True``, and that ``MultiIndex`` levels must be unique, we _can't_ have both an int and its float representation in a same ``MultiIndex`` level.\r\n\r\nThe only doubt then is whether we should favour the ``float``, rather than ``int``, representation, given that for instance``pd.Index([1, 1.])`` gives a ``Float64Index``."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418714923",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418714923",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418714923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODcxNDkyMw==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T12:38:25Z",
    "updated_at": "2018-09-05T12:38:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> ... and that MultiIndex levels must be unique, we _can't_ have both an int and its float representation in a same MultiIndex level.\r\n\r\n...when using `from_product()`\r\n\r\n> The only doubt then is whether we should favour the float, rather than int, representation, given that for instancepd.Index([1, 1.]) gives a Float64Index.\r\n\r\nswapping the order of the float and int gives a float for the first level:\r\n \r\n```python\r\n>>> pd.MultiIndex.from_product([pd.Index([1, 1.], dtype=object), range(3)])\r\nMultiIndex(levels=[[1], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n>>> pd.MultiIndex.from_product([pd.Index([1., 1], dtype=object), range(3)])\r\nMultiIndex(levels=[[1.0], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n```\r\n\r\nso it appears not to be a casting issue as the issue title suggests?\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418734390",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418734390",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418734390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODczNDM5MA==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T13:40:09Z",
    "updated_at": "2018-09-05T13:40:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> ... and that MultiIndex levels must be unique ...\r\n\r\nIndeed, according to the documentation for both `pandas.MultiIndex` and `pandas.MultiIndex.from_product`\r\n\r\nand yet in the non-float example, i passed a non-unique iterable as the first iterable and got a result instead of a value error:\r\n\r\n```python\r\n>>> pd.Index([1, 1], dtype=object).is_unique\r\nFalse\r\n>>> pd.MultiIndex.from_product([pd.Index([1, 1], dtype=object), range(3)])\r\nMultiIndex(levels=[[1], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418840962",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418840962",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418840962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODg0MDk2Mg==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T18:51:40Z",
    "updated_at": "2018-09-05T18:51:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it is also worth noting that:\r\n\r\n```python\r\n>>>\r\n>>> import pandas as pd\r\n>>>\r\n>>> pd.MultiIndex.from_product([[1, 1], range(3)])\r\nMultiIndex(levels=[[1], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n>>> pd.MultiIndex.from_product([[1, True], range(3)])\r\nMultiIndex(levels=[[1], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n>>> pd.MultiIndex.from_product([[1.0, True], range(3)])\r\nMultiIndex(levels=[[1.0], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n>>> pd.MultiIndex.from_product([[True, 1], range(3)])\r\nMultiIndex(levels=[[True], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n```\r\n\r\nare probably not giving the expected output either."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418859067",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418859067",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418859067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODg1OTA2Nw==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T19:50:03Z",
    "updated_at": "2018-09-05T19:50:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "which could result in:\r\n\r\n``` python\r\n>>>\r\n>>> a = 19998989890\r\n>>> b = 19998989889 +1\r\n>>> a is b\r\nFalse\r\n>>> a == b\r\nTrue\r\n>>> pd.MultiIndex.from_product([[a,b], range(3)])\r\nMultiIndex(levels=[[19998989890], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418884936",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418884936",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418884936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODg4NDkzNg==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T21:18:50Z",
    "updated_at": "2018-09-05T21:18:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/pandas-dev/pandas/blob/e2e1a1051576a48f210ce17272fc24b90ebcf24a/pandas/core/indexes/multi.py#L1357-L1367\r\n\r\n```python\r\n>>>\r\n>>> from pandas.core.arrays.categorical import _factorize_from_iterables\r\n>>>\r\n>>> labels, levels =_factorize_from_iterables([[1, True], range(3)])\r\n>>> labels\r\n[array([0, 0], dtype=int8), array([0, 1, 2], dtype=int8)]\r\n>>> levels\r\n[Int64Index([1], dtype='int64'), Int64Index([0, 1, 2], dtype='int64')]\r\n>>>\r\n>>> from pandas.core.reshape.util import cartesian_product\r\n>>>\r\n>>> labels = cartesian_product(labels)\r\n>>> labels\r\n[array([0, 0, 0, 0, 0, 0], dtype=int8), array([0, 1, 2, 0, 1, 2], dtype=int8)]\r\n>>>\r\n>>> pd.MultiIndex(levels, labels)\r\nMultiIndex(levels=[[1], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n>>>\r\n```\r\n\r\nit appears that `from_product()` would need to use a different implementation of `_factorize_from_iterables`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418911797",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-418911797",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 418911797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODkxMTc5Nw==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T23:17:56Z",
    "updated_at": "2018-09-05T23:42:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "```python\r\n>>> import pandas as pd\r\n>>> from pandas.core.arrays.categorical import _factorize_from_iterables\r\n```\r\nuse 3 in the first iterable so that the objects do not compare equal \r\n```python\r\n>>> labels, levels =_factorize_from_iterables([[3, True], range(3)])\r\n>>> labels\r\n[array([1, 0], dtype=int8), array([0, 1, 2], dtype=int8)]\r\n>>> levels\r\n[Index([True, 3], dtype='object'), Int64Index([0, 1, 2], dtype='int64')]\r\n```\r\nchange the 3 back to a 1 so that the first iterable has different objects which compare equal\r\n```python\r\n>>> levels = [pd.Index([1, True], dtype='object'), pd.Int64Index([0, 1, 2], dtype='int64')]\r\n>>> levels\r\n[Index([1, True], dtype='object'), Int64Index([0, 1, 2], dtype='int64')]\r\n>>> from pandas.core.reshape.util import cartesian_product\r\n>>> labels = cartesian_product(labels)\r\n>>> labels\r\n[array([1, 1, 1, 0, 0, 0], dtype=int8), array([0, 1, 2, 0, 1, 2], dtype=int8)]\r\n>>> pd.MultiIndex(levels, labels, verify_integrity=False)\r\nMultiIndex(levels=[[1, True], [0, 1, 2]],\r\n           labels=[[1, 1, 1, 0, 0, 0], [0, 1, 2, 0, 1, 2]])\r\n```\r\nwhich is the expected output?\r\n\r\nchanging `_factorize_from_iterables` alone would give a value error unless MultiIndex is called with `verify_integrity=False`\r\n\r\n```python\r\n>>> pd.MultiIndex(levels, labels)\r\n```\r\n```python-traceback\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\simon\\OneDrive\\code\\pandas-simonjayhawkins\\pandas\\core\\indexes\\multi.py\", line 242, in __new__\r\n    result._verify_integrity()\r\n  File \"C:\\Users\\simon\\OneDrive\\code\\pandas-simonjayhawkins\\pandas\\core\\indexes\\multi.py\", line 285, in _verify_integrity\r\n    level=i))\r\nValueError: Level values must be unique: [1, True] on level 0\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419044932",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-419044932",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 419044932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTA0NDkzMg==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-06T10:28:52Z",
    "updated_at": "2018-09-06T10:28:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "> MultiIndex.from_product() casts float to int when corresponding int is also present\r\n\r\nit depends on the ordering:\r\n\r\n```python\r\n>>>\r\n>>> import pandas as pd\r\n>>> from pandas.core.arrays.categorical import _factorize_from_iterables\r\n>>> labels, levels =_factorize_from_iterables([pd.Index([1, 1., 2., 2], dtype=object), range(3)])\r\n>>> levels\r\n[Index([1, 2.0], dtype='object'), Int64Index([0, 1, 2], dtype='int64')]\r\n```\r\nand the index type is unchanged:\r\n\r\n```python\r\n>>> labels, levels =_factorize_from_iterables([pd.Index([1, 1.], dtype=object), range(3)])\r\n>>> levels\r\n[Index([1], dtype='object'), Int64Index([0, 1, 2], dtype='int64')]\r\n>>> labels, levels =_factorize_from_iterables([pd.Index([1., 1], dtype=object), range(3)])\r\n>>> levels\r\n[Index([1.0], dtype='object'), Int64Index([0, 1, 2], dtype='int64')]\r\n>>>\r\n>>>\r\n```\r\n\r\nif a list is passed as the first iterable instead of an index object, then the int is cast to a float, not the float cast to an int:\r\n\r\n```python\r\n>>>\r\n>>> labels, levels =_factorize_from_iterables([[1., 1], range(3)])\r\n>>> levels\r\n[Float64Index([1.0], dtype='float64'), Int64Index([0, 1, 2], dtype='int64')]\r\n>>> labels, levels =_factorize_from_iterables([[1, 1.], range(3)])\r\n>>> levels\r\n[Float64Index([1.0], dtype='float64'), Int64Index([0, 1, 2], dtype='int64')]\r\n>>>\r\n>>>\r\n>>> pd.MultiIndex.from_product([[1, 1., 2., 2], range(3)])\r\nMultiIndex(levels=[[1.0, 2.0], [0, 1, 2]],\r\n           labels=[[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]])\r\n>>>\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419050683",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19432#issuecomment-419050683",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19432",
    "id": 419050683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTA1MDY4Mw==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-06T10:50:16Z",
    "updated_at": "2018-09-06T10:50:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> if a list is passed as the first iterable instead of an index object, then the int is cast to a float, not the float cast to an int:\r\n\r\nunless the list also contains booleans and then it depends on the ordering again:\r\n\r\n```python\r\n>>>\r\n>>>\r\n>>> pd.MultiIndex.from_product([pd.Index([1, 1., 2., 2, True, False], dtype=object), range(3)])\r\nMultiIndex(levels=[[False, 1, 2.0], [0, 1, 2]],\r\n           labels=[[1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]])\r\n>>> pd.MultiIndex.from_product([[1, 1., 2., 2, True, False], range(3)])\r\nMultiIndex(levels=[[False, 1, 2.0], [0, 1, 2]],\r\n           labels=[[1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]])\r\n>>>\r\n```\r\n"
  }
]
