[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/480203055",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21801#issuecomment-480203055",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21801",
    "id": 480203055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDIwMzA1NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T09:03:08Z",
    "updated_at": "2019-04-05T09:03:08Z",
    "author_association": "MEMBER",
    "body": "Some examples on this\r\n\r\nNumpy sorts NaNs last:\r\n\r\n```\r\nIn [5]: a = np.array([2, 1, np.nan, 2])\r\n\r\nIn [6]: a.argsort()\r\nOut[6]: array([1, 0, 3, 2])\r\n\r\nIn [7]: a[a.argsort()] \r\nOut[7]: array([ 1.,  2.,  2., nan])\r\n```\r\n\r\nCategorical already existed for a long time, and has this \"NaN first\" behaviour \r\n\r\n```\r\nIn [8]: a = pd.Categorical(['b', 'a', np.nan, 'b'])   \r\n\r\nIn [9]: a.argsort()       \r\nOut[9]: array([2, 1, 0, 3])\r\n\r\nIn [10]: a[a.argsort()]      \r\nOut[10]: \r\n[NaN, a, b, b]\r\nCategories (2, object): [a, b]\r\n```\r\n\r\nInconsistent here is that Categorical also has a `sort_values` method (which other EAs don't have) which puts NaNs last by default:\r\n\r\n```\r\nIn [11]: a.sort_values()     \r\nOut[11]: \r\n[a, b, b, NaN]\r\nCategories (2, object): [a, b]\r\n```\r\n\r\nThe new IntegerArray (and also the datetimelike arrays) copied this behaviour from Categorical:\r\n\r\n```\r\nIn [12]: a = pd.array([2, 1, np.nan, 2], dtype='Int64')\r\n\r\nIn [13]: a.argsort()  \r\nOut[13]: array([2, 1, 0, 3])\r\n\r\nIn [14]: a[a.argsort()]       \r\nOut[14]: \r\n<IntegerArray>\r\n[NaN, 1, 2, 2]\r\nLength: 4, dtype: Int64\r\n```\r\n\r\nOn the other hand, IntervalArray currently errors on it:\r\n\r\n```\r\nIn [20]: a= pd.arrays.IntervalArray.from_tuples([(1, 2), (0, 1), np.nan, (1, 2)]) \r\n\r\nIn [21]: a.argsort()  \r\n...\r\nTypeError: unorderable types: Interval() > float()\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/480207702",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21801#issuecomment-480207702",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21801",
    "id": 480207702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDIwNzcwMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T09:19:25Z",
    "updated_at": "2019-04-05T09:19:25Z",
    "author_association": "MEMBER",
    "body": "I would say ideally, we would follow the \"NaN last\" behaviour (consistent with numpy's argsort + consistent with the default of `sort_values` in pandas). \r\n\r\nThe main question would be how to get there: can we just change this? (that would be a hard breaking change, but maybe we can do it for the recent EAs?) How could we deprecate it? When deprecating, we want a way for users to already get the future behaviour (but adding a keyword only for the deprecation (which later needs to be deprecated itself) is also ugly ..). \r\n\r\nOne option could be to add a `na_position` keyword (-> None by default (current default), will change to 'last' in the future).\r\nOne disadvantage is that this makes the EA interface (what EA authors need to implement) more complex, as the `argsort` method needs to handle this additional case. And another disadvantage, is that this makes the `_values_for_argsort` option of the interface quite impossible to do (as the values might need to be different depending on whether the NAs sort first or last)\r\n\r\ncc @jreback @TomAugspurger \r\n"
  }
]
