[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/328149393",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17476#issuecomment-328149393",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17476",
    "id": 328149393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODE0OTM5Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-08T16:20:41Z",
    "updated_at": "2017-09-08T16:21:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@NadiaRom Can you provide a full example? It's hard to say for sure, but I suspect that `df` came from an operation that may be a view or copy. For example:\r\n\r\n\r\n```python\r\nIn [8]: df = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4], \"C\": [4, 5]})\r\n\r\nIn [9]: df1 = df[['A', 'B']]\r\n\r\nIn [10]: df1.loc[0, 'A'] = 5\r\n/Users/taugspurger/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/indexing.py:180: SettingWithCopyWarning:\r\nA value is trying to be set on a copy of a slice from a DataFrame\r\n\r\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\r\n  self._setitem_with_indexer(indexer, value)\r\n/Users/taugspurger/Envs/pandas-dev/bin/ipython:1: SettingWithCopyWarning:\r\nA value is trying to be set on a copy of a slice from a DataFrame\r\n\r\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\r\n  #!/Users/taugspurger/Envs/pandas-dev/bin/python3.6\r\n```\r\n\r\nSo we're updating `df1` correctly. The ambiguity is whether or not `df` will be updated as well. I think a similar thing is happening to you, but without a reproducible example it's hard to say for sure."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/328152838",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17476#issuecomment-328152838",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17476",
    "id": 328152838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODE1MjgzOA==",
    "user": {
      "login": "NadiaRom",
      "id": 17527845,
      "node_id": "MDQ6VXNlcjE3NTI3ODQ1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17527845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NadiaRom",
      "html_url": "https://github.com/NadiaRom",
      "followers_url": "https://api.github.com/users/NadiaRom/followers",
      "following_url": "https://api.github.com/users/NadiaRom/following{/other_user}",
      "gists_url": "https://api.github.com/users/NadiaRom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NadiaRom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NadiaRom/subscriptions",
      "organizations_url": "https://api.github.com/users/NadiaRom/orgs",
      "repos_url": "https://api.github.com/users/NadiaRom/repos",
      "events_url": "https://api.github.com/users/NadiaRom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NadiaRom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-08T16:34:47Z",
    "updated_at": "2017-09-08T16:36:45Z",
    "author_association": "NONE",
    "body": "@TomAugspurger Here is the code, in general, I never assign values to pandas without .loc\r\n\r\n```python\r\ndf = pd.read_csv('df_unicities.tsv', sep='\\t')\r\ndf.replace({'|': '--'}, inplace=True)\r\n\r\ndf_c = df.loc[df.encountry == country, : ]\r\n\r\ndf_c['sort'] = (df_c.encities_ua == 'all').astype(int) # new column\r\ndf_c['sort'] += (df_c.encities_foreign == 'all').astype(int)\r\ndf_c.sort_values(by='sort', inplace=True)\r\n\r\n# ---end of chunk, everything is fine ---\r\n\r\nif df_c.encities_foreign.str.contains('all').sum() < len(df_c):\r\n    df_c.loc[df_c.encities_foreign.str.contains('all'), 'encities_foreign'] = 'other'\r\n    df_c.loc[df_c.cities_foreign.str.contains('всі'), 'cities_foreign'] = 'інші'\r\nelse:\r\n    df_c.loc[df_c.encities_foreign.str.contains('all'), 'encities_foreign'] = country\r\n    df_c.loc[df_c.cities_foreign.str.contains('всі'), 'cities_foreign'] = df_c.country.iloc[0]\r\n    \r\nif df_c.encities_ua.str.contains('all').sum() < len(df_c):\r\n    df_c.loc[df_c.encities_ua.str.contains('all'), 'encities_ua'] = 'other'\r\n    df_c.loc[df_c.cities_ua.str.contains('всі'), 'cities_ua'] = 'інші'\r\nelse:\r\n    df_c.loc[df_c.encities_ua.str.contains('all'), 'encities_ua'] = 'Ukraine'\r\n    df_c.loc[df_c.cities_ua.str.contains('всі'), 'cities_ua'] = 'Україна'\r\n\t\r\n# Warning after it\r\n```\r\n\r\nThank you for rapid answer!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/328207514",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17476#issuecomment-328207514",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17476",
    "id": 328207514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODIwNzUxNA==",
    "user": {
      "login": "CRiddler",
      "id": 31414128,
      "node_id": "MDQ6VXNlcjMxNDE0MTI4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/31414128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CRiddler",
      "html_url": "https://github.com/CRiddler",
      "followers_url": "https://api.github.com/users/CRiddler/followers",
      "following_url": "https://api.github.com/users/CRiddler/following{/other_user}",
      "gists_url": "https://api.github.com/users/CRiddler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CRiddler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CRiddler/subscriptions",
      "organizations_url": "https://api.github.com/users/CRiddler/orgs",
      "repos_url": "https://api.github.com/users/CRiddler/repos",
      "events_url": "https://api.github.com/users/CRiddler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CRiddler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-08T20:35:36Z",
    "updated_at": "2017-09-08T20:35:36Z",
    "author_association": "NONE",
    "body": "The issue here is that you're slicing you dataframe first with `.loc` in line 4. The attempting to assign values to that slice.\r\n\r\n    df_c = df.loc[df.encountry == country, :]\r\n\r\nPandas isn't 100% sure if you want to assign values to just your `df_c` slice, or have it propagate all the way back up to the original `df`. To avoid this when you first assign `df_c` make sure you tell pandas that it is its own data frame (and not a slice) by using\r\n\r\n    df_c = df.loc[df.encountry == country, :].copy()\r\n\r\nDoing this will fix your error. I'll tack on a brief example to help explain the above since I've noticed a lot of users get confused by pandas in this aspect.\r\n\r\n## Example with made up data\r\n\t>>> import pandas as pd\r\n\t>>> df = pd.DataFrame({'A':[1,2,3,4,5], 'B':list('QQQCC')})\r\n\t>>> df\r\n\t   A  B\r\n\t0  1  Q\r\n\t1  2  Q\r\n\t2  3  Q\r\n\t3  4  C\r\n\t4  5  C\r\n\t>>> df.loc[df['B'] == 'Q', 'new_col'] = 'hello'\r\n\t>>> df\r\n\t   A  B new_col\r\n\t0  1  Q   hello\r\n\t1  2  Q   hello\r\n\t2  3  Q   hello\r\n\t3  4  C     NaN\r\n\t4  5  C     NaN\r\n\r\nSo the above works as we expect! Now lets try an example that mirrors what you attempted to do with your data.\r\n\r\n\t>>> df = pd.DataFrame({'A':[1,2,3,4,5], 'B':list('QQQCC')})\r\n\t>>> df_q = df.loc[df['B'] == 'Q']\r\n\t>>> df_q\r\n\t   A  B\r\n\t0  1  Q\r\n\t1  2  Q\r\n\t2  3  Q\r\n\t>>> df_q.loc[df['A'] < 3, 'new_col'] = 'hello'\r\n\t/Users/riddellcd/anaconda/lib/python3.6/site-packages/pandas/core/indexing.py:337: SettingWithCopyWarning: \r\n\tA value is trying to be set on a copy of a slice from a DataFrame.\r\n\tTry using .loc[row_indexer,col_indexer] = value instead\r\n\r\n\tSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\r\n\t  self.obj[key] = _infer_fill_value(value)\r\n  \r\n\t>>> df_q\r\n\t   A  B new_col\r\n\t0  1  Q   hello\r\n\t1  2  Q   hello\r\n\t2  3  Q     NaN\r\n\r\nLooks like we hit the same error! But it changed `df_q` as we expected! This is because `df_q` is a slice of `df` so, even though we're using .loc[] `df_q` pandas is warning us that it won't propagate the changes up to `df`. To avoid this, we need to be more explicit and say that `df_q` is its own dataframe, separate from `df` by explicitly declaring it so.\r\n\r\nLets start back from `df_q` but use `.copy()` this time.\r\n\r\n\t>>> df_q = df.loc[df['B'] == 'Q'].copy()\r\n\t>>> df_q\r\n\t   A  B\r\n\t0  1  Q\r\n\t1  2  Q\r\n\t2  3  Q\r\n\r\n\tLets try to reassign our value now!\r\n\t>>> df_q.loc[df['A'] < 3, 'new_col'] = 'hello'\r\n\t>>> df_q\r\n\t   A  B new_col\r\n\t0  1  Q   hello\r\n\t1  2  Q   hello\r\n\t2  3  Q     NaN\r\n\r\nThis works without an error because we've told pandas that `df_q` is separate from `df`\r\n\r\nIf you in fact do want these changes to `df_c` to propagate up to `df` thats another point entirely and will answer if you want."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/328241808",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17476#issuecomment-328241808",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17476",
    "id": 328241808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODI0MTgwOA==",
    "user": {
      "login": "NadiaRom",
      "id": 17527845,
      "node_id": "MDQ6VXNlcjE3NTI3ODQ1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17527845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NadiaRom",
      "html_url": "https://github.com/NadiaRom",
      "followers_url": "https://api.github.com/users/NadiaRom/followers",
      "following_url": "https://api.github.com/users/NadiaRom/following{/other_user}",
      "gists_url": "https://api.github.com/users/NadiaRom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NadiaRom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NadiaRom/subscriptions",
      "organizations_url": "https://api.github.com/users/NadiaRom/orgs",
      "repos_url": "https://api.github.com/users/NadiaRom/repos",
      "events_url": "https://api.github.com/users/NadiaRom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NadiaRom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-09T00:25:40Z",
    "updated_at": "2017-09-09T00:25:55Z",
    "author_association": "NONE",
    "body": "@CRiddler  Great, **thank you**!\r\nAs you mentioned, chained `.loc` has never returned unexpected results. As I understand, `.copy()` ensures Pandas that we treat selected `df_sliced_once` as separate object and do not intend to change initial full `df`. Please correct if I mixed up smth."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/328285554",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17476#issuecomment-328285554",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17476",
    "id": 328285554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODI4NTU1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-09T15:51:04Z",
    "updated_at": "2017-09-09T15:51:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "documentation is here http://pandas.pydata.org/pandas-docs/stable/indexing.html#returning-a-view-versus-a-copy and @CRiddler has a nice expl. you should in general NOT use ``inplace`` at all."
  }
]
