[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21928542",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-21928542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 21928542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTI4NTQy",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-01T10:51:56Z",
    "updated_at": "2013-08-01T10:51:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, as you say, at the moment this works by passing in:\n\n```\ndf1.isin(df2.to_dict(outtype='list'))\n```\n\nIs this an efficient operation? Should we just call that if passed a DataFrame?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21928722",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-21928722",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 21928722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTI4NzIy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-01T10:56:03Z",
    "updated_at": "2013-08-01T10:56:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI I believe this will fail with non-unique columns (as to_dict will fail); look at itertuples on a way to deal with this\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22491262",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-22491262",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 22491262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDkxMjYy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T13:01:27Z",
    "updated_at": "2013-08-12T13:01:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Should `isin` accept something like a set operator mode? \n\nmaybe `mode=diff` for set differences, or `mode=and` for inclusion? \n\nhttp://stackoverflow.com/questions/18180763/set-difference-for-pandas/18187648#18187648\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/23052472",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-23052472",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 23052472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDUyNDcy",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-21T21:38:23Z",
    "updated_at": "2013-08-21T21:38:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "see #4617 from same OP.\n\nI'm not sure I'm 100% with how this was going to work, because the column approach no longer makes sense once we're talking about DataFrames, or at least is more ambiguous (aside from repeated columns):\n\n```\nIn [2]: df1 = pd.DataFrame([[1, 2], [2, 3]])\n\nIn [3]: df2 = pd.DataFrame([[1, 3]])\n\nIn [4]: df2.isin(df1.to_dict(outtype='list'))\nOut[4]: \n      0     1\n0  True  True\n```\n\nwhich probably isn't what the user was expecting.\n\nWhich may be something like (possibly user doesn't care about the index):\n\n```\nIn [11]: pd.Series(map(set(df1.itertuples()).__contains__, df2.itertuples()), df2.index)\nOut[11]: \n0    False\ndtype: bool\n```\n\nAhem... Not sure what would be an efficient way to do that?\n\n@jreback imo set intersection stuff can relatively easily be done after the fact, e.g. (all/any and boolean indexing, really don't think we need to add loads of kwargs.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25355547",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-25355547",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 25355547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzU1NTQ3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-30T12:20:18Z",
    "updated_at": "2013-09-30T12:20:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd @TomAugspurger for 0.13?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25375697",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-25375697",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 25375697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mzc1Njk3",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-30T15:56:02Z",
    "updated_at": "2013-09-30T15:56:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Definitely.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26131234",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-26131234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 26131234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTMxMjM0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-11T11:47:31Z",
    "updated_at": "2013-10-11T11:47:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd @TomAugspurger what is left on this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26181025",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-26181025",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 26181025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTgxMDI1",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-11T23:00:32Z",
    "updated_at": "2013-10-11T23:00:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "To actually write this up... I think it's kind of important for 0.13 as otherwise isin is a little confusing (and will break code if we change the API later)....\n\nThinking about it again, do we actually want to eq **(ag. there a problem with dupes here...)**:\n\n```\nIn [32]: df1 = pd.DataFrame([[1, 2], [2, 3]], columns=['a', 'b'])\n\nIn [33]: df2 = pd.DataFrame([[1, 3]], columns=['a', 'b'])\n\nIn [34]: df2.isin(df1.to_dict(outtype='list'))\nOut[34]: \n      a     b\n0  True  True\n\nIn [35]: df2.eq(df1.reindex_like(df2))  # is this isin for DataFrames?\nOut[35]: \n      a      b\n0  True  False\n```\n\n_Worst case we should NotImplement it with a mention of eq..._\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26205269",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-26205269",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 26205269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA1MjY5",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-12T20:25:03Z",
    "updated_at": "2013-10-12T20:38:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd Are you working on this one?  I can give it a shot tonight / tomorrow if you're wanting to focus on the SQLAlchemy stuff.\n\n---\n\nLet's collect some thoughts on what should happen when another DataFrame is passed as values.\n1. Identical indicies, no dupes\n\n``` python\nIn [20]: df1\nOut[20]: \n   A   B\n0  1   2\n1  2 NaN\n2  3   4\n3  4   4\n\nIn [21]: df2\nOut[21]: \n    A   B\n0   0   2\n1   2 NaN\n2  12   4\n3   4   5\n\n# Expected: df1.isin(df2.to_dict(outtype='list')) does not work\n# df1.eq(df2.reindex_like(df1)) does work\nOut[23]: \n       A      B\n0  False   True\n1   True  False\n2  False   True\n3   True   False\n```\n1. Dissimilar indices, still no dupes. Should be intersection of indices, check isin on those (optional parameter to ignore index?).\n\n``` python\n# df1 same as before\nIn [35]: df2 = pd.DataFrame({'A': [0, 2, 12, 4], 'C': [2, np.nan, 4, 5]}, index=[0, 1, 3, 4])\n\nIn [36]: df2\nOut[36]: \n    A   C\n0   0   2\n1   2 NaN\n3  12   4\n4   4   5\n\n# Intersection of columns is A, intersection of indices is [0, 1, 3]\n# df1.isin(df2.to_dict(outtype='list')) does *NOT* work since it matches (A, 3), it ignores the index.\n# Andy's df1.eq(df2.reindex_like(df1)) does work here.\nIn [39]: df1.isin(df2.to_dict(outtype='list'))\nOut[39]: \n       A      B\n0  False  False\n1   True  False\n2  False  False\n3  False  False\n```\n1. Duplicate columns on `values` (the argument). The two options are to `raise` or return `True` wherever there's a match.\n\n``` python\nIn [74]: df1\nOut[74]: \n   A   B\n0  1   2\n1  2 NaN\n2  3   4\n3  4   4\n\nIn [75]: df2\nOut[75]: \n    A   A\n0   0   1\n1   2   4\n3   2 NaN\n4   4   5\n\n# Expected if we return True wherever there's a True\n\n       A      B\n0   True  False   # from the second A column\n1   True  False   # from the first A column\n2  False  False\n3  False  False\n```\n\n~~The `df1.eq(df2.reindex_like(df1))` does not work here, this hits the maximum recursion depth.~~\nI had my `df`s backwards; that's actually a `ValueError: cannot reindex from a duplicate axis`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26205827",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-26205827",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 26205827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA1ODI3",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-12T20:54:14Z",
    "updated_at": "2013-10-12T20:54:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh we definitely need to get this in for .13.  I think DataFrames and Series should behave similarly with respect to labels.  Currently, if `values` is a Series, the index is ignored:\n\n``` python\nIn [150]: df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [2, np.nan, 4, 4]}, index=['a','b','c','d'])\n\nIn [151]: s = pd.Series([1, 3, 11, 12], index=['a','b','c','d'])\n\nIn [152]: df.isin(s)\nOut[152]: \n       A      B\na   True  False\nb  False  False\nc   True  False\nd  False  False\n```\n\nSo (A, c) matches on the 3 from the Series, despite the index of that 3 being `b`, not `c`.\n\nWhat's everyone's thoughts on respecting index/column labels?  I'd say that (A, c) should be False here since the labels don't match.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26206252",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-26206252",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 26206252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA2MjUy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-12T21:18:45Z",
    "updated_at": "2013-10-12T21:18:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger there was a bug in comparing duplicate frames (so your above comparison will work as you had it, or raise if you don't reindex_like), but won't infinity recurse (which generally is a bad thing :)\n\nwill merge in a few\n\n```\nIn [1]: df1 = DataFrame([[1,2],[2,np.nan],[3,4],[4,4]],columns=['A','B'])\n\nIn [2]: df2 = DataFrame([[0,1],[2,4],[2,np.nan],[4,5]],columns=['A','A'])\n\nIn [3]: df1\nOut[3]: \n   A   B\n0  1   2\n1  2 NaN\n2  3   4\n3  4   4\n\nIn [4]: df2\nOut[4]: \n   A   A\n0  0   1\n1  2   4\n2  2 NaN\n3  4   5\n\nIn [5]: df1.reindex_like(df2) == df2\nOut[5]: \n       A      A\n0  False   True\n1   True  False\n2  False  False\n3   True  False\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26206286",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-26206286",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 26206286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA2Mjg2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-12T21:20:51Z",
    "updated_at": "2013-10-12T21:20:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger if you need to test if the the columns are duplicated, use `df.columns.is_unique`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26206426",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-26206426",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 26206426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjA2NDI2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-12T21:29:05Z",
    "updated_at": "2013-10-12T21:29:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger that bug fix merged in....\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26290464",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4421#issuecomment-26290464",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4421",
    "id": 26290464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjkwNDY0",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-14T21:29:56Z",
    "updated_at": "2013-10-14T21:29:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "One unfortunate part of this the NaN handling... In your first example:\n\n```\nIn [15]: df1\nOut[15]: \n   A   B\n0  1   2\n1  2 NaN\n2  3   4\n3  4   4\n\nIn [16]: df2\nOut[16]: \n    A   B\n0   0   2\n1   2 NaN\n2  12   4\n3   4   5\n\nIn [17]: df1.eq(df2.reindex_like(df1))\nOut[17]: \n       A      B\n0  False   True\n1   True  False\n2  False   True\n3   True  False\n```\n\nBut actually that's ok (or perhaps a separate issue) since this is the behavior of Series isin...\n"
  }
]
