[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378730859",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378730859",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378730859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODczMDg1OQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T20:16:09Z",
    "updated_at": "2018-04-04T20:16:09Z",
    "author_association": "MEMBER",
    "body": "Hmm well the problem is stemming from the code in `_try_convert_data`:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/6d610a4d9393c0d0335267dc3252ccabb9e51e43/pandas/io/json/json.py#L659\r\n\r\nIt looks like that method is converting the parsed object to a float and then to an int, which is causing the loss of precision on your large numbers\r\n\r\n```python\r\nIn [10]: int(float(\"9999999999999999\"))\r\nOut[10]: 10000000000000000\r\n```\r\n\r\nWant to try a fix in a PR?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378765190",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378765190",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378765190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc2NTE5MA==",
    "user": {
      "login": "Udayraj123",
      "id": 16881051,
      "node_id": "MDQ6VXNlcjE2ODgxMDUx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16881051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Udayraj123",
      "html_url": "https://github.com/Udayraj123",
      "followers_url": "https://api.github.com/users/Udayraj123/followers",
      "following_url": "https://api.github.com/users/Udayraj123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Udayraj123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Udayraj123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Udayraj123/subscriptions",
      "organizations_url": "https://api.github.com/users/Udayraj123/orgs",
      "repos_url": "https://api.github.com/users/Udayraj123/repos",
      "events_url": "https://api.github.com/users/Udayraj123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Udayraj123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T22:29:05Z",
    "updated_at": "2018-04-04T22:29:05Z",
    "author_association": "NONE",
    "body": "Sure! Though I'm new to source code of pandas, but I can try :) "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378787785",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378787785",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378787785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc4Nzc4NQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T00:40:44Z",
    "updated_at": "2018-04-05T00:40:44Z",
    "author_association": "MEMBER",
    "body": "Feel free to ask any questions here, or if you submit a PR make sure to reference this issue. There's plenty of helpful people here to get you through the process"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378789459",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378789459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378789459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc4OTQ1OQ==",
    "user": {
      "login": "Udayraj123",
      "id": 16881051,
      "node_id": "MDQ6VXNlcjE2ODgxMDUx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16881051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Udayraj123",
      "html_url": "https://github.com/Udayraj123",
      "followers_url": "https://api.github.com/users/Udayraj123/followers",
      "following_url": "https://api.github.com/users/Udayraj123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Udayraj123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Udayraj123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Udayraj123/subscriptions",
      "organizations_url": "https://api.github.com/users/Udayraj123/orgs",
      "repos_url": "https://api.github.com/users/Udayraj123/repos",
      "events_url": "https://api.github.com/users/Udayraj123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Udayraj123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T00:53:09Z",
    "updated_at": "2018-04-05T00:54:48Z",
    "author_association": "NONE",
    "body": "Actually I have a few questions, \r\n1. The `assert_frame_equal` is also seemingly failing to detect difference between 9999999999999999 and 10000000000000000. Currently I've made a test file (temporarily) at `pandas/tests/io/json/my_test.py` which contains the following code:\r\n```\r\nimport pytest\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom pandas import (Series, DataFrame, DatetimeIndex, Timestamp, read_json, compat)\r\nfrom pandas.util import testing as tm\r\n\r\n@pytest.fixture\r\ndef input_json():\r\n    json_content=\"\"\"\r\n    { \r\n        \"0\" : {\"tid\":\"9999999999999999\"},\r\n        \"1\" : {\"tid\":\"10000000000000001\"}\r\n    }\r\n    \"\"\"\r\n    return json_content\r\n\r\n@pytest.fixture\r\ndef expected_df():\r\n    return DataFrame([9999999999999999,10000000000000001],columns=['tid'])\r\n\r\n\r\n@pytest.mark.parametrize('dtype', ['int64','int'])\r\ndef test_large_ints_from_json_strings(dtype):\r\n    # GH 20608\r\n    data = read_json(input_json(),orient='index')\r\n    # data = read_json(input_json(),orient='index',dtype={'tid':dtype})\r\n    new_data = expected_df()\r\n    print('')\r\n    print(new_data)\r\n    print(data)\r\n    tm.assert_frame_equal(new_data,data)\r\n\r\n```\r\n\r\nI am testing with the following command.\r\n`pytest my_test.py -v -s --full-trace`\r\nAnd getting PASSED output, is this expected? If yes, how can I verify that correct dataframe is generated after a fix?\r\n\r\n2. After finalizing, I'm thinking of placing this into `test/io/json/test_pandas.py`, the function name would be `test_large_ints_from_json_strings`. Does this seem fine?\r\n\r\nI've gone through the following links till now. \r\nhttps://pandas.pydata.org/pandas-docs/stable/contributing.html\r\nhttps://github.com/pandas-dev/pandas/wiki/Testing"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378792014",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378792014",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378792014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc5MjAxNA==",
    "user": {
      "login": "Udayraj123",
      "id": 16881051,
      "node_id": "MDQ6VXNlcjE2ODgxMDUx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16881051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Udayraj123",
      "html_url": "https://github.com/Udayraj123",
      "followers_url": "https://api.github.com/users/Udayraj123/followers",
      "following_url": "https://api.github.com/users/Udayraj123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Udayraj123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Udayraj123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Udayraj123/subscriptions",
      "organizations_url": "https://api.github.com/users/Udayraj123/orgs",
      "repos_url": "https://api.github.com/users/Udayraj123/repos",
      "events_url": "https://api.github.com/users/Udayraj123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Udayraj123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T01:11:54Z",
    "updated_at": "2018-04-05T01:11:54Z",
    "author_association": "NONE",
    "body": "Also (in reference to above), the test is changing the 9999999999999999 from int to float at line 693.\r\nhttps://github.com/pandas-dev/pandas/blob/6d610a4d9393c0d0335267dc3252ccabb9e51e43/pandas/io/json/json.py#L693\r\nAnd then converts it back to int at this line\r\nhttps://github.com/pandas-dev/pandas/blob/6d610a4d9393c0d0335267dc3252ccabb9e51e43/pandas/io/json/json.py#L714\r\nwhich changes it's value to 10000000000000000. Just below it is a test for data equivalence, but it is also passing without an issue..\r\n\r\nIf we are passing `dtype={'tid':int}`, it will directly return as int without converting to float. But I'm assuming we can't do the same in the above case(as it may affect pandas default type conversions)?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378793241",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378793241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378793241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc5MzI0MQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T01:21:16Z",
    "updated_at": "2018-04-05T01:21:16Z",
    "author_association": "MEMBER",
    "body": "1. Just in general for your test you don't need a fixture unless you plan on reusing that elsewhere. For now just put all of your items in the method definition. And for what it's worth shouldn't your test be failing? Isn't that the bug you are trying to fix?\r\n\r\n2. Yes I think that location is fine\r\n\r\n3. That equivalence test is performed against a data variable that was already cast to float, so isn't the precision issue already?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378795542",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378795542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378795542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc5NTU0Mg==",
    "user": {
      "login": "Udayraj123",
      "id": 16881051,
      "node_id": "MDQ6VXNlcjE2ODgxMDUx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16881051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Udayraj123",
      "html_url": "https://github.com/Udayraj123",
      "followers_url": "https://api.github.com/users/Udayraj123/followers",
      "following_url": "https://api.github.com/users/Udayraj123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Udayraj123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Udayraj123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Udayraj123/subscriptions",
      "organizations_url": "https://api.github.com/users/Udayraj123/orgs",
      "repos_url": "https://api.github.com/users/Udayraj123/repos",
      "events_url": "https://api.github.com/users/Udayraj123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Udayraj123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T01:37:17Z",
    "updated_at": "2018-04-05T01:43:51Z",
    "author_association": "NONE",
    "body": "1. Okay, was just trying that out :smile: and Yes it should be failing, the two dataframes are different (one with 999.. and other with 100..), but the `assert_frame_equal` function is not detecting that. Can you please show me a sample way of testing those two dataframes being different?\r\n\r\n2. Cool!\r\n\r\n3. Yes, precision issue is there, Maybe we can cast it back to `int` and then compare, is that right?\r\n\r\nAdding to point 1: Comparing with the `(new_data == data).all()` method is giving correct result (`False`), while `assert_frame_equal` is still passing the test. I don't understand why?\r\n```\r\ndef test_large_ints_from_json_strings(dtype):\r\n    json_content=\"\"\"\r\n    { \r\n        \"0\" : {\"tid\":\"9999999999999999\"},\r\n        \"1\" : {\"tid\":\"10000000000000001\"}\r\n    }\r\n    \"\"\"\r\n    data = read_json(json_content,orient='index')\r\n    new_data = DataFrame([9999999999999999,10000000000000001],columns=['tid'])\r\n    # new_data = new_data.astype('int64') \r\n    print((new_data == data).all()) #False\r\n    tm.assert_frame_equal(new_data,data) #PASSED?\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378798087",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378798087",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378798087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc5ODA4Nw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T01:55:41Z",
    "updated_at": "2018-04-05T01:55:41Z",
    "author_association": "MEMBER",
    "body": "Sorry I misread your original point but the below definitely fails for me:\r\n\r\n```python\r\nIn [3]: json_content=\"\"\"{ \r\n   ...:     \"0\" : {\"tid\":\"9999999999999999\"},\r\n   ...:     \"1\" : {\"tid\":\"10000000000000001\"}\r\n   ...: }\"\"\"\r\nIn [4]: exp = pd.DataFrame([9999999999999999,10000000000000001],columns=['tid'])\r\nIn [6]: tm.assert_frame_equal(pd.read_json(json_content), exp)\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n```\r\n\r\nPerhaps try using the complete example from your original post.\r\n\r\nAs to your solution, once the precision is lost casting back to int will not work. You'll have to think through another way - maybe we should be attempting to int first instead of float? Not saying that's the answer but think through that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378849882",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378849882",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378849882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODg0OTg4Mg==",
    "user": {
      "login": "Udayraj123",
      "id": 16881051,
      "node_id": "MDQ6VXNlcjE2ODgxMDUx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16881051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Udayraj123",
      "html_url": "https://github.com/Udayraj123",
      "followers_url": "https://api.github.com/users/Udayraj123/followers",
      "following_url": "https://api.github.com/users/Udayraj123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Udayraj123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Udayraj123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Udayraj123/subscriptions",
      "organizations_url": "https://api.github.com/users/Udayraj123/orgs",
      "repos_url": "https://api.github.com/users/Udayraj123/repos",
      "events_url": "https://api.github.com/users/Udayraj123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Udayraj123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T07:50:32Z",
    "updated_at": "2018-04-05T07:51:01Z",
    "author_association": "NONE",
    "body": "In your example the `orient='index'` is missing which transposes the dataframe (making tid a column). So the assert is failing because the transpose isn't taken. \r\n\r\nInstead of json_string, I've thought of this more intuitive way using `to_json()` (which is still passing when it shouldn't)-\r\n```\r\n@pytest.mark.parametrize('dtype', ['int'])\r\ndef test_large_ints_from_json_strings(dtype):\r\n    # GH 20608\r\n    df1 = DataFrame([9999999999999999,10000000000000001],columns=['tid'])\r\n    df_temp = df1.copy().astype(str)\r\n    df2 = read_json(df_temp.to_json())\r\n    print((df1 == df2).all()) #False\r\n    tm.assert_frame_equal(df1,df2) #PASSED?\r\n```\r\n\r\nHmm I did think about the order of casting types, seems there has to be an additional case. I'll send a patch when I find a solution. But I would appreciate if someone else was working on this too "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378851737",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378851737",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378851737,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODg1MTczNw==",
    "user": {
      "login": "Udayraj123",
      "id": 16881051,
      "node_id": "MDQ6VXNlcjE2ODgxMDUx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16881051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Udayraj123",
      "html_url": "https://github.com/Udayraj123",
      "followers_url": "https://api.github.com/users/Udayraj123/followers",
      "following_url": "https://api.github.com/users/Udayraj123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Udayraj123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Udayraj123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Udayraj123/subscriptions",
      "organizations_url": "https://api.github.com/users/Udayraj123/orgs",
      "repos_url": "https://api.github.com/users/Udayraj123/repos",
      "events_url": "https://api.github.com/users/Udayraj123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Udayraj123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T07:58:11Z",
    "updated_at": "2018-04-05T07:58:11Z",
    "author_association": "NONE",
    "body": "I've updated a working test in the main issue at the top"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378917544",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-378917544",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 378917544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODkxNzU0NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T12:22:55Z",
    "updated_at": "2018-04-05T12:22:55Z",
    "author_association": "MEMBER",
    "body": "I haven't looked into your latest issue but you are making this more complicated than it needs to be. Just have one frame constructed via read_json and the other constructed manually. Don't do any type conversions, printing, or copying. You also don't need to parametrize it"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/379969871",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-379969871",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 379969871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTk2OTg3MQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T04:26:13Z",
    "updated_at": "2018-04-10T04:26:13Z",
    "author_association": "MEMBER",
    "body": "@Udayraj123 : Do you have a patch for your original bug?  I would submit that as a PR.  We can move the discussion about the actual changes / test there."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/381318762",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20608#issuecomment-381318762",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20608",
    "id": 381318762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTMxODc2Mg==",
    "user": {
      "login": "Udayraj123",
      "id": 16881051,
      "node_id": "MDQ6VXNlcjE2ODgxMDUx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16881051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Udayraj123",
      "html_url": "https://github.com/Udayraj123",
      "followers_url": "https://api.github.com/users/Udayraj123/followers",
      "following_url": "https://api.github.com/users/Udayraj123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Udayraj123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Udayraj123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Udayraj123/subscriptions",
      "organizations_url": "https://api.github.com/users/Udayraj123/orgs",
      "repos_url": "https://api.github.com/users/Udayraj123/repos",
      "events_url": "https://api.github.com/users/Udayraj123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Udayraj123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-14T10:12:59Z",
    "updated_at": "2018-04-14T10:12:59Z",
    "author_association": "NONE",
    "body": "@gfyoung : No I don't have a patch yet. "
  }
]
