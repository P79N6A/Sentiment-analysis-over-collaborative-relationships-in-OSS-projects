[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55531617",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55531617",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55531617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTMxNjE3",
    "user": {
      "login": "stahlous",
      "id": 7545449,
      "node_id": "MDQ6VXNlcjc1NDU0NDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7545449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stahlous",
      "html_url": "https://github.com/stahlous",
      "followers_url": "https://api.github.com/users/stahlous/followers",
      "following_url": "https://api.github.com/users/stahlous/following{/other_user}",
      "gists_url": "https://api.github.com/users/stahlous/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stahlous/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stahlous/subscriptions",
      "organizations_url": "https://api.github.com/users/stahlous/orgs",
      "repos_url": "https://api.github.com/users/stahlous/repos",
      "events_url": "https://api.github.com/users/stahlous/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stahlous/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T16:55:04Z",
    "updated_at": "2014-09-14T16:55:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p I believe you added the additional `NaN` values feature to `_rolling_moment()`. Would you mind taking a look at this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55532134",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55532134",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55532134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTMyMTM0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T17:10:59Z",
    "updated_at": "2014-09-14T17:10:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@stahlous always `pd.show_versions()`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55532696",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55532696",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55532696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTMyNjk2",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T17:30:59Z",
    "updated_at": "2014-09-14T17:30:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Will try to take a look later today or tomorrow.\n\n> On Sep 14, 2014, at 12:55 PM, stahlous notifications@github.com wrote:\n> \n> @seth-p I believe you added the additional NaN values feature to _rolling_moment(). Would you mind taking a look at this?\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55534073",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55534073",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55534073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTM0MDcz",
    "user": {
      "login": "stahlous",
      "id": 7545449,
      "node_id": "MDQ6VXNlcjc1NDU0NDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7545449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stahlous",
      "html_url": "https://github.com/stahlous",
      "followers_url": "https://api.github.com/users/stahlous/followers",
      "following_url": "https://api.github.com/users/stahlous/following{/other_user}",
      "gists_url": "https://api.github.com/users/stahlous/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stahlous/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stahlous/subscriptions",
      "organizations_url": "https://api.github.com/users/stahlous/orgs",
      "repos_url": "https://api.github.com/users/stahlous/repos",
      "events_url": "https://api.github.com/users/stahlous/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stahlous/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T18:15:37Z",
    "updated_at": "2014-09-14T18:15:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ack. I think I might be misleading you by convoluting 0.14.1 with the dev version. However, the problem does stand for `rolling_apply()` when the aggregating function will (likely) be naive about the presence of trailing `NaN` values. \n\nMy apologies. I first noticed this with `rolling_apply()` and then I started working with the latest stable and thought I had discovered that the problem was more general.\n\nI'll re-state the issue this evening when I am able to get in front of my dev box again.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55536068",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55536068",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55536068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTM2MDY4",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T19:17:18Z",
    "updated_at": "2014-09-14T19:17:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this has been addressed in master (for 0.15.0) in https://github.com/pydata/pandas/pull/7934. Let me know if you still see a problem in master.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55536156",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55536156",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55536156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTM2MTU2",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T19:19:40Z",
    "updated_at": "2014-09-14T19:19:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I will try to check tonight/tomorrow if still need to fix rolling_apply.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55543427",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55543427",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55543427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTQzNDI3",
    "user": {
      "login": "stahlous",
      "id": 7545449,
      "node_id": "MDQ6VXNlcjc1NDU0NDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7545449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stahlous",
      "html_url": "https://github.com/stahlous",
      "followers_url": "https://api.github.com/users/stahlous/followers",
      "following_url": "https://api.github.com/users/stahlous/following{/other_user}",
      "gists_url": "https://api.github.com/users/stahlous/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stahlous/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stahlous/subscriptions",
      "organizations_url": "https://api.github.com/users/stahlous/orgs",
      "repos_url": "https://api.github.com/users/stahlous/repos",
      "events_url": "https://api.github.com/users/stahlous/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stahlous/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T23:41:01Z",
    "updated_at": "2014-09-14T23:42:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for the confusion. I did confirm that `rolling_mean()` does work as expected in the dev version. I should've stuck to what I knew rather than digging further and confusing things. That said, `rolling_apply()` does suffer from the problem I described:\n\n```\ns = pd.Series(np.random.randn(12))\nwin = 7\nminp = 5\nprint(pd.rolling_apply(s, win, np.mean, min_periods=minp, center=False))\nprint(pd.rolling_apply(s, win, np.mean, min_periods=minp, center=True))\n```\n\nOutputs:\n\n```\n0          NaN\n1          NaN\n2          NaN\n3          NaN\n4     0.321198\n5     0.593657\n6     0.566094\n7     0.481168\n8     0.404456\n9     0.212539\n10    0.229766\n11    0.086256\ndtype: float64\n\n0          NaN\n1     0.321198\n2     0.593657\n3     0.566094\n4     0.481168\n5     0.404456\n6     0.212539\n7     0.229766\n8     0.086256\n9          NaN\n10         NaN\n11         NaN\ndtype: float64\n```\n\n---\n\n```\npd.show_versions()\n```\n\nOutputs:\n\n```\nINSTALLED VERSIONS\n------------------\ncommit: None\npython: 3.4.1.final.0\npython-bits: 64\nOS: Linux\nOS-release: 3.13.0-29-generic\nmachine: x86_64\nprocessor: x86_64\nbyteorder: little\nLC_ALL: None\nLANG: en_US.UTF-8\n\npandas: 0.14.1-430-g35a9527\nnose: None\nCython: 0.21\nnumpy: 1.9.0\nscipy: 0.14.0\nstatsmodels: None\nIPython: 2.2.0\nsphinx: None\npatsy: None\nscikits.timeseries: None\ndateutil: 2.1\npytz: 2014.7\nbottleneck: None\ntables: None\nnumexpr: None\nmatplotlib: 1.4.0\nopenpyxl: None\nxlrd: None\nxlwt: None\nxlsxwriter: None\nlxml: None\nbs4: None\nhtml5lib: None\nhttplib2: None\napiclient: None\nrpy2: None\nsqlalchemy: None\npymysql: None\npsycopg2: None\n```\n\nI was able to hack together a patch for this in `roll_generic()`, but it requires passing in `offset` from `_rolling_moment()`, which would break its API for all the other functions using it.\n\n```\nn = len(input)\nfor i in range(int_min(win, n)):\n    if counts[i] >= minp:\n        output[i] = func(input[int_max(i - win + 1, 0) : i + 1], *args,\n                         **kwargs)\n    else:\n        output[i] = NaN\n\nfor i in range(win, n - offset):\n    buf = buf + 1\n    bufarr.data = <char*> buf\n    if counts[i] >= minp:\n        output[i] = func(bufarr, *args, **kwargs)\n    else:\n        output[i] = NaN\n\nif offset > 0:\n    for j, i in enumerate(range(n - offset, n)):\n        if counts[i] >= minp:\n            output[i] = func(input[int_max(i - win + 1, 0) : i - j], \n                               *args, **kwargs)\n        else:\n            output[i] = NaN\n```\n\nThe easier fix would be to have `rolling_apply()` perform its own call to the cython function rather than using `_rolling_moment()` as an intermediary, but that's not very DRY. The alternatives that I can think of would involve changing the `_rolling_moment()` API, which might be more trouble than it's worth.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55543988",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55543988",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55543988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTQzOTg4",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T00:02:40Z",
    "updated_at": "2014-09-15T00:02:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I will take a look and fix.\n\n> On Sep 14, 2014, at 7:41 PM, stahlous notifications@github.com wrote:\n> \n> Sorry for the confusion. I did confirm that rolling_mean() does work as expected in the dev version. I should've stuck to what I knew rather than digging further and confusing things. That said, rolling_apply() does suffer from the problem I described:\n> \n> s = pd.Series(np.random.randn(12))\n> win = 7\n> minp = 5\n> print(pd.rolling_apply(s, win, np.mean, min_periods=minp, center=False))\n> print(pd.rolling_apply(s, win, np.mean, min_periods=minp, center=True))\n> \n> 0          NaN\n> 1          NaN\n> 2          NaN\n> 3          NaN\n> 4     0.321198\n> 5     0.593657\n> 6     0.566094\n> 7     0.481168\n> 8     0.404456\n> 9     0.212539\n> 10    0.229766\n> 11    0.086256\n> dtype: float64\n> \n> 0          NaN\n> 1     0.321198\n> 2     0.593657\n> 3     0.566094\n> 4     0.481168\n> 5     0.404456\n> 6     0.212539\n> 7     0.229766\n> 8     0.086256\n> 9          NaN\n> 10         NaN\n> 11         NaN\n> dtype: float64\n> pd.show_versions()\n> \n> ## INSTALLED VERSIONS\n> \n> commit: None\n> python: 3.4.1.final.0\n> python-bits: 64\n> OS: Linux\n> OS-release: 3.13.0-29-generic\n> machine: x86_64\n> processor: x86_64\n> byteorder: little\n> LC_ALL: None\n> LANG: en_US.UTF-8\n> \n> pandas: 0.14.1-430-g35a9527\n> nose: None\n> Cython: 0.21\n> numpy: 1.9.0\n> scipy: 0.14.0\n> statsmodels: None\n> IPython: 2.2.0\n> sphinx: None\n> patsy: None\n> scikits.timeseries: None\n> dateutil: 2.1\n> pytz: 2014.7\n> bottleneck: None\n> tables: None\n> numexpr: None\n> matplotlib: 1.4.0\n> openpyxl: None\n> xlrd: None\n> xlwt: None\n> xlsxwriter: None\n> lxml: None\n> bs4: None\n> html5lib: None\n> httplib2: None\n> apiclient: None\n> rpy2: None\n> sqlalchemy: None\n> pymysql: None\n> psycopg2: None\n> I was able to hack together a patch for this in roll_generic(), but it requires passing in offset from _rolling_moment(), which would break its API for all the other functions using it.\n> \n> n = len(input)\n> for i in range(int_min(win, n)):\n>     if counts[i] >= minp:\n>         output[i] = func(input[int_max(i - win + 1, 0) : i + 1], _args,\n>                          *_kwargs)\n>     else:\n>         output[i] = NaN\n> \n> for i in range(win, n - offset):\n>     buf = buf + 1\n>     bufarr.data = <char*> buf\n>     if counts[i] >= minp:\n>         output[i] = func(bufarr, _args, *_kwargs)\n>     else:\n>         output[i] = NaN\n> \n> if offset > 0:\n>     for j, i in enumerate(range(n - offset, n)):\n>         if counts[i] >= minp:\n>             output[i] = func(input[int_max(i - win + 1, 0) : i - j], \n>                                _args, *_kwargs)\n>         else:\n>             output[i] = NaN\n> The easier fix would be to have rolling_apply() perform its own call to the cython function rather than using _rolling_moment() as an intermediary, but that's not very DRY. The alternatives that I can think of would involve changing the _rolling_moment() API, which might be more trouble than it's worth.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55552626",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55552626",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55552626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTUyNjI2",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T04:45:33Z",
    "updated_at": "2014-09-15T04:45:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I see what the problem is. When `center=True`, all the `rolling_*()` functions pad the end with `NaN` values, so that a window of length `window` centered on the last entry will be \"full\". The problem is that `np.mean` will return `NaN` if it encounters any `NaN` values in the input. You won't have this problem if you use `np.nanmean` instead. (None of the `rolling_*()` functions besides `rolling_apply` have a problem, because they don't rely on the numpy functions that return `NaN` whenever they encounter a `NaN`.)\n\nThe current behavior is asymmetric in the sense that no `NaN` values are pre-pended at the beginning of the series, and so `rolling_apply(..., np.mean, center=True)` does calculate values at the start before there is a full window; and so it should have similar behavior at the end. So I guess my implementation of #7934 to fix #7925 wasn't ideal.\n\nWill try to come up with a different implementation that doesn't have this issue.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55609353",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55609353",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55609353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjA5MzUz",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T15:42:25Z",
    "updated_at": "2014-09-15T15:52:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I actually have a bit of a philosophical question about this. For simplicity, let's concentrate on the start rather than the edge of the array. Consider:\n\n```\npd.rolling_apply(pd.Series([5., 6., 7., 8., 9.]), 3,\n                 lambda v: np.nansum([(i+1)*x for i, x in enumerate(v)]),\n                 min_periods=1, center=True)\n```\n\nIt's not obvious to me what we would want the first entry of the result to be. I can see two perfectly plausible possibilities:\n(a) `np.nansum([1*5., 2*6.] = 17.`. -- this is the current behavior\n(b) `np.nansum([1*NaN, 2*5., 3*6.] = 28.`.\n\nCurrently (in master) the start of the array is treated as (a), but end of the array is treated as (b) (with `NaN` padding the end rather than the beginning of the sub-array, of course). Presumably they should be consistent, but to be honest it's not obvious to me which is \"right\".\n\nNote that it only makes a difference (a) for functions that don't ignore `NaN` (like your example, `np.mean`), and (b) for functions that are sensitive to the absolute position of the arguments, like my example here (or, for example, if one tried to implement a rolling EWMA).\n\nI guess I'm slightly inclined to keep behavior (a) (and make it the behavior at the end as well) for backwards-compatibility reasons, but I'm not sure it's obvious...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55609712",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55609712",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55609712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjA5NzEy",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T15:44:40Z",
    "updated_at": "2014-09-15T15:44:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "CCing @nbdanielson, since he raised https://github.com/pydata/pandas/issues/7925.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55619694",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55619694",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55619694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjE5Njk0",
    "user": {
      "login": "stahlous",
      "id": 7545449,
      "node_id": "MDQ6VXNlcjc1NDU0NDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7545449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stahlous",
      "html_url": "https://github.com/stahlous",
      "followers_url": "https://api.github.com/users/stahlous/followers",
      "following_url": "https://api.github.com/users/stahlous/following{/other_user}",
      "gists_url": "https://api.github.com/users/stahlous/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stahlous/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stahlous/subscriptions",
      "organizations_url": "https://api.github.com/users/stahlous/orgs",
      "repos_url": "https://api.github.com/users/stahlous/repos",
      "events_url": "https://api.github.com/users/stahlous/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stahlous/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T16:47:06Z",
    "updated_at": "2014-09-15T16:47:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think option (a) is the more robust choice, but adding `NaN`s is the more efficient choice - for most use cases. I think the answer is to treat `rolling_apply()` as a special case and create a solution that doesn't involve padding with `NaN`s. Otherwise all the rolling moment functions would have to be edited to handle the end of the series differently.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55620271",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55620271",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55620271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjIwMjcx",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T16:50:47Z",
    "updated_at": "2014-09-15T16:50:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, implementation-wise I am working on a slightly different implementation for `rolling_apply()`. But just want to make sure no one objects too vehemently to behavior (a).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55693812",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8269#issuecomment-55693812",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8269",
    "id": 55693812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjkzODEy",
    "user": {
      "login": "nbdanielson",
      "id": 8344546,
      "node_id": "MDQ6VXNlcjgzNDQ1NDY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8344546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nbdanielson",
      "html_url": "https://github.com/nbdanielson",
      "followers_url": "https://api.github.com/users/nbdanielson/followers",
      "following_url": "https://api.github.com/users/nbdanielson/following{/other_user}",
      "gists_url": "https://api.github.com/users/nbdanielson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nbdanielson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nbdanielson/subscriptions",
      "organizations_url": "https://api.github.com/users/nbdanielson/orgs",
      "repos_url": "https://api.github.com/users/nbdanielson/repos",
      "events_url": "https://api.github.com/users/nbdanielson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nbdanielson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T04:33:58Z",
    "updated_at": "2014-09-16T04:33:58Z",
    "author_association": "NONE",
    "body": "I do see the dilemma here.  My first thought is that (b) may be a more intuitive behavior, but I can't actually think of a filter where I would prefer this.  So yes, I suppose (a) is a decent solution.  This would be worth mentioning in the API as well\n"
  }
]
