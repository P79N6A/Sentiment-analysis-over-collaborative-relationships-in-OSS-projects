[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68019115",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9140#issuecomment-68019115",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9140",
    "id": 68019115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDE5MTE1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T02:07:51Z",
    "updated_at": "2014-12-24T02:07:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "so I changed this is #8710. Guess the semantics of the scalar and not list-like are slightly different w.r.t. to an object-like.\n\nNot really sure what guarantees exists for this (e.g. it doesn't necessarily have to be stringifiable, but _should_ be hashable (which this example object is not), though maybe even that is too strict.\n\nAny thoughts on guarantees on indexables?\ncc @dalejung\n@shoyer \ncc @immerrr\n\n(to be clear we accept things like: scalars, numpy arrays (or the correct ndim), lists, indexes, slices, boolean arrays, int indexers, and prob a few others I am forgetting).\n\nfixed here:\nhttps://github.com/pydata/pandas/pull/9143\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68031045",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9140#issuecomment-68031045",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9140",
    "id": 68031045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDMxMDQ1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T06:44:39Z",
    "updated_at": "2014-12-24T06:44:39Z",
    "author_association": "MEMBER",
    "body": "Actually, this object _is_ hashable (Python defaults to implementing `__hash__` based on identity for objects that don't implement `__eq__`):\n\n```\nIn [4]: hash(TestObject())\nOut[4]: 274153109\n```\n\nI don't know if we can make general guarantees on how we handle non-standard indexers, but generally we should be able to handle hashable items that are not sequences unambiguously. If something is both hashable and a sequence (e.g., tuple-like or an immutable ndarray), well, then all bets are off.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68031938",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9140#issuecomment-68031938",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9140",
    "id": 68031938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDMxOTM4",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T07:05:26Z",
    "updated_at": "2014-12-24T07:05:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Scalar lookup key (i.e. single label) restrictions are imposed by lookup implementation, in a world of static typing one would define an interface for all scalar lookup keys to implement. AFAIR, IndexEngine uses hashtable, so it requires labels to be hashable and equality-comparable, but it can also fall back to searchsorted, so it should also require them to be orderable. If those are missed, things will blow up. \n\nThere's also a subtle restriction that I often miss coming from C/C++: lookup keys should also be immutable (in C there's a const specifier to ensure that). It will not blow up (raise exceptions), but changing an element after it has been put into a hash table may break that table's integrity and cause all kinds of undefined behaviours.\n\nObviously, integer and boolean values fit this definition of scalar lookup keys (you can have a hash table of ints or bools, bool lookup is weird, but possible), so there's no need to state their support explicitly.\n\nAfter scalar lookup key is defined, slices, lists, arrays, etc of those are simply a containers of such keys (let's think of slice as a tuple with special meaning for now) and should not add any other restrictions. \n\nUser-defined types make it a bit complicated creating the ambiguity of whether a type is a container or a scalar key, it would be nice to probably register abstract classes so that users can resolve the ambiguity, or do some auto-detection and add a wrapper type so that users can override it. In any case, pandas has lived without this for ages interpreting all unknown types as sequences, so maybe it's not a big deal.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68032415",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9140#issuecomment-68032415",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9140",
    "id": 68032415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDMyNDE1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T07:15:39Z",
    "updated_at": "2014-12-24T07:15:39Z",
    "author_association": "MEMBER",
    "body": "One minor elaboration on @immerrr's excellent comment: according to best practices, mutable objects should not be hashable in Python, so hashable should imply immutable. That said, this being Python, nothing guarantees this, but if users are using pathological classes like this it's their own fault if anything breaks.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68032879",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9140#issuecomment-68032879",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9140",
    "id": 68032879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDMyODc5",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T07:25:22Z",
    "updated_at": "2014-12-24T07:25:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer, I can't believe I have missed that immutability of hash value during the lifetime of an object is a prerequisite for that object to be \"hashable\" according to https://docs.python.org/2/glossary.html :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68035906",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9140#issuecomment-68035906",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9140",
    "id": 68035906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDM1OTA2",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T08:22:53Z",
    "updated_at": "2014-12-24T08:22:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "The issue with default user-defined hashes is that they are based off of `id` and won't survive pickling. It's easy for them not to match from a random reload. I suppose we could require that user objects define `__hash__` and assume those hashes are stable. \n\nI'm ambivalent about the ambigious case. As long as it's consistently defaulted one way and we provide an override. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68059805",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9140#issuecomment-68059805",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9140",
    "id": 68059805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDU5ODA1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T15:50:07Z",
    "updated_at": "2014-12-24T15:50:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks for the comments. If anyone would like to make a little writeup for the internals doc would be great!\n"
  }
]
