[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312868229",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-312868229",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 312868229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjg2ODIyOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-04T12:42:13Z",
    "updated_at": "2017-07-04T12:42:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @AwasthiMaddy"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315670738",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-315670738",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 315670738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTY3MDczOA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T05:28:05Z",
    "updated_at": "2017-07-17T05:28:05Z",
    "author_association": "MEMBER",
    "body": "I'm not convinced this is a bug... as @jreback says, ``[3]`` is valid code, and the boundary with \"losing information\" is not so obvious. What about\r\n\r\n``` python\r\nIn [2]: s = pd.Series(range(4))\r\n\r\nIn [3]: s.loc[5:] = 1\r\n```\r\n? I'm pretty sure we want to allow it. On the other hand, in ``[5]`` you are initializing, so it makes sense to require more explicit \"instructions\" (as in ``pd.DataFrame({'foo' : 1}, index=[])``, which works fine).\r\n\r\nI see instead the incoherence with ``[17]``, but I think it can be justified (because a ``DataFrame`` has a better defined meaning than one with no columns; and because setting an entire column to a scalar is a more usual operation than setting an entire row to a scalar) - and anyway, I would ideally prefer to fix ``[17]`` (which should expand the index) than to forbid ``[3]``."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336191866",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336191866",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336191866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjE5MTg2Ng==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T16:30:11Z",
    "updated_at": "2017-10-12T16:31:47Z",
    "author_association": "MEMBER",
    "body": "@jreback I invite you to reconsider this.\r\n\r\n\"Fixing\" this has really brought no advantage. I wonder whether any real example of \"lost information\" can be provided, and on the other hand there is an evident loss of generality. It's the equivalent of stating that the expression ``a=b**0`` should produce an error because it always assigns 1 and hence you are \"loosing information\".\r\nThe \"fix\" has brought us a slightly more complicated code path, a slightly less predictable behavior (as in \"I need more words to explain how the thing works\"), an incoherence with examples like ``pd.Series(range(4)).loc[5:] = veryimportantnumber``, which doesn't raise, but also like ``pd.DataFrame(index=[2]).loc[2] = veryimportantnumber``, which doesn't raise either, and a violation of the principle of least surprise.\r\n\r\nPerhaps most importantly, this can break perfectly valid code written in the past, as in:\r\n\r\n```\r\ndf = pd.DataFrame()\r\nfor var in ['a', 'b']: # The list can come from some generating function\r\n    df[var] = -1 # For the moment, just create the column\r\n\r\n# Add rows and additional columns from existing frame\r\ndf = df.join(pd.DataFrame([[1,2], [3,4]], columns=['c', 'd']), how='outer').fillna(-1))\r\n\r\n# Replace \"-1\" with real data...\r\n```\r\n\r\nI probably never wrote such code, but there is no reason to punish any user who did. A warning would be acceptable, but then the examples above should raise a warning too for coherence. Anyway, we have had a full ``FutureWarning``/``DeprecationWarning`` cycle for changes more obvious than this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336669701",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336669701",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336669701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjY2OTcwMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-14T21:47:12Z",
    "updated_at": "2017-10-14T21:47:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@toobaz I disagree. This is a clear error, expecting a column to spring into existance and none does.  A deprecation cycle is for something that is not necessarily a problem but an api change. this is an error."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336691529",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336691529",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336691529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjY5MTUyOQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-15T07:11:45Z",
    "updated_at": "2017-10-15T07:11:45Z",
    "author_association": "MEMBER",
    "body": "> @toobaz I disagree. This is a clear error, expecting a column to spring into existance and none does.\r\n\r\nIt does instead! It is just empty because the index is empty, but the ``columns`` attribute does change, and this is precisely what should happen when assigning a scalar to a non-existing column: a column is added, and all existing rows are affected (=none, in this case).\r\n\r\nAgain, what is the \"error\" in the snippet I posted [above](https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336191866)?! Also consider the example in which pandas is used to automatically process every day some ``DataFrame`` of daily data, add a constant \"date\" column and append to a table in HDF5: this should not fail unexpectedly just because on some day there are 0 rows.\r\n\r\nThis really reminds me of other cases in which it was decided to do things which were more complicated and less general but apparently more \"friendly\", [just](https://github.com/pandas-dev/pandas/issues/9595) to [regret it](https://github.com/pandas-dev/pandas/pull/17295) later (I'm clearly referring to the project in general, not to anybody's decisions in particular)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336692307",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336692307",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336692307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjY5MjMwNw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-15T07:31:46Z",
    "updated_at": "2017-10-15T07:31:46Z",
    "author_association": "MEMBER",
    "body": "... and anyway, if we really made a rule that any expression of the form\r\n\r\n```\r\ndf.*[*] = 3\r\n```\r\nwith ``3`` not actually stored somewhere is a \"loss of data\" and should raise, then there would be _many_ places we should \"fix\" (including the ones I already posted)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336825391",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336825391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336825391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjgyNTM5MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T09:04:09Z",
    "updated_at": "2017-10-16T09:04:09Z",
    "author_association": "MEMBER",
    "body": "I agree with @toobaz general feeling of \"why was this actually needed\" without seeing a real benefit. \r\n\r\nWe can certainly discuss the validity of the original code example that was changed to raise an error (should one be allowed to assign into an empty series/frame?), but about the current merged PR, IMO it:\r\n\r\n* it introduces inconsistencies: why raise for `df = pd.DataFrame(); df['a'] = 1`, but not for `pd.DataFrame(); df.loc[: 'a'] = 1` or for `s = pd.Series(); s[:] = 1`, which both also 'loose' information.\r\n\r\n* it makes that code does a bit less generalize, and you need to start explicitly checking for emptiness (as @toobaz above gave an example with processing daily data). Assume the following code example:\r\n\r\n    ```\r\n    df = pd.DataFrame({'a': np.random.randn(4)})\r\n    # make two subset dataframes and add indicator column\r\n    high = df[df['a'] > 3]\r\n    low = df[df['a'] <= 3]\r\n    high['b'] = 'high'\r\n    low['b'] = 'low'\r\n    ```\r\n\r\n  Maybe not the best 'pandonic' code, but is this is something we should disallow? Or require people to start checking for emptiness before doing such things?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336867308",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336867308",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336867308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjg2NzMwOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T12:09:13Z",
    "updated_at": "2017-10-16T12:09:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> it introduces inconsistencies: why raise for df = pd.DataFrame(); df['a'] = 1, but not for pd.DataFrame(); df.loc[: 'a'] = 1 or for s = pd.Series(); s[:] = 1, which both also 'loose' information.\r\n\r\nthese should raise as well.\r\n\r\nI am not against your example, but its non-idiomatic. I don't see why it should work (aside from the fact that you are also setting on a copy)\r\n\r\nFundamentally I agree we should align behavior. \r\n\r\nSo I would be willing to reverse this if we then allow scalars in the constructor w/o an Index. But I am afraid that will lead to many errors and is a worse case.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336878719",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336878719",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336878719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjg3ODcxOQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T12:58:22Z",
    "updated_at": "2017-10-16T12:59:02Z",
    "author_association": "MEMBER",
    "body": "> So I would be willing to reverse this if we then allow scalars in the constructor w/o an Index.\r\n\r\nI think that it would be better than nothing (also because, all else equal, for backward compatibility we prefer to allow than to disallow something new).\r\n\r\nBut frankly speaking, to me things seem relatively simple:\r\n- at initialization, a ``DataFrame`` _needs_ to have an index. You can avoid providing one expliclty only if it can be automatically built for the values you pass (i.e. 1-dimensional objects of the same length, or a single 2-dimensional block of data). Scalars clearly do not satisfy this requirement, so the constructor will raise if passed only scalars (but ``pd.DataFrame({'A'  : range(3), 'B' : 23})`` works, which is cool).\r\n- at assignment, there is already an index, and in particular, when assigning a(n entire) column you know you'll _never_ alter the index. More specifically, when you assign a scalar to a column, you know it will alter all _existing_ rows, which means \"none\" if the index is empty.\r\n\r\nIn both cases, scalars/empty indexes represent no exception to the general behavior.\r\n\r\nIf we take your path, we have to also fix ``df = pd.DataFrame([[0], [2], [4]]); df.loc[(df[0] % 2).astype(bool), 0] = 3`` and countless (literally) other cases in which the number on the right is not stored anywhere. If we take my path, we might have to just fix (allow) ``pd.DataFrame().loc[1] = 1`` (for consistency - certainly not because it is a relevant issue)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336880327",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336880327",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336880327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjg4MDMyNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T13:04:53Z",
    "updated_at": "2017-10-16T13:04:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "can u create an issue (and repeat your last there)\r\nto avoid this getting lost "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/336916597",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16823#issuecomment-336916597",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16823",
    "id": 336916597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjkxNjU5Nw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T15:07:12Z",
    "updated_at": "2017-10-16T15:07:12Z",
    "author_association": "MEMBER",
    "body": "> can u create an issue (and repeat your last there)\r\n\r\nSee #17894 (and #17895 )"
  }
]
