[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408192913",
    "html_url": "https://github.com/pandas-dev/pandas/pull/22063#issuecomment-408192913",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22063",
    "id": 408192913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODE5MjkxMw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T18:32:37Z",
    "updated_at": "2018-07-26T18:32:37Z",
    "author_association": "MEMBER",
    "body": "> `Series` can share the same call path with `DataFrame` in `Block`\r\n\r\nWe actually want to go in the other direction.  We want to make `DataFrame` dispatch to the `Series` (or `DatetimeIndex`/`TimedeltaIndex`) implementations.  Is there a viable way to do that here?  Maybe dispatch to `self._holder`?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408326436",
    "html_url": "https://github.com/pandas-dev/pandas/pull/22063#issuecomment-408326436",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22063",
    "id": 408326436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODMyNjQzNg==",
    "user": {
      "login": "holymonson",
      "id": 902012,
      "node_id": "MDQ6VXNlcjkwMjAxMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/902012?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holymonson",
      "html_url": "https://github.com/holymonson",
      "followers_url": "https://api.github.com/users/holymonson/followers",
      "following_url": "https://api.github.com/users/holymonson/following{/other_user}",
      "gists_url": "https://api.github.com/users/holymonson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holymonson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holymonson/subscriptions",
      "organizations_url": "https://api.github.com/users/holymonson/orgs",
      "repos_url": "https://api.github.com/users/holymonson/repos",
      "events_url": "https://api.github.com/users/holymonson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holymonson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T06:38:49Z",
    "updated_at": "2018-07-27T06:38:49Z",
    "author_association": "CONTRIBUTOR",
    "body": ">what problem are you trying to solve here?\r\n\r\n@jreback #22005 will no longer exist. But the main purpose is simplify the code, and make `DataFrame` and `Series` operations share same call path in `Block`.\r\n\r\n> We actually want to go in the other direction. We want to make DataFrame dispatch to the Series (or DatetimeIndex/TimedeltaIndex) implements. Is there a viable way to do that here? Maybe dispatch to self._holder?\r\n\r\n@jbrockmendel \r\nAs pointed out in Benefits (4),  `Series (or DatetimeIndex/TimedeltaIndex)` can only handle 1d-array. If have to make DataFrame dispatch into  1d-array, there is 2 possible implementations:\r\n1. Reduce 2d-ndarray into 1d-ndarray, eval with `numpy.ufunc`, then raise back. This will need to due with shape changing and possible data copying. And it will break ops between `1d-ndarray` and `2d-ndarray` (need a different call path).\r\n2. Make it into `ndarray[DatetimeIndex]`(`1d-ndarray` of `DatetimeIndex`). But it will be treat as `dtype='O'` in `numpy`, the call path will be\r\n    1. make `2d-ndarray[dtype='m8'`] into `1d-ndarray[DatetimeIndex]`\r\n    2. `ufunc` with `1d-ndarray[dtype='O']`\r\n    3. `eval` with `DatetimeIndex`\r\n    4.  `ufunc` with `1d-ndarray[dtype='m8']`\r\n\r\n    This PR will simply be \r\n    1. `ufunc` with `2d-ndarray[dtype='m8']`\r\n\r\nAs `numpy` already handle data operating well, why do we need an extra implement with less efficiency? In fact, dispatching to `DatetimeIndex` is ending up with `ufunc with 1d-ndarray` too, what `DatetimeIndex` do can be done (already implemented, seems only exception is tz-detection) in `Block` and `ufunc`.\r\n\r\nCould someone show me the benefits of the `Index`-dispatch implement?\r\n\r\n---\r\nI have write a 2nd commit,which implements:\r\n1. `.tz` info save as `DatetimeTZBlock.tz`, no longer need a `DatetimeIndex`. Multi-columns can share a same `DatetimeTZBlock` if they have same `tz`. (NotImplemented)\r\n2. `_try_coerce_args` is implemented in `DatetimeLikeBlockMixin`, those override in subclass are removed. So as `_try_coerce_result`. (Benefited from `numpy` handing data)\r\n3. `values_mask` and `other_mask` are also removed. (`numpy` can handle `NaT`)\r\n\r\nTests haven't pass all, those failed mainly is `DataFrame` columns converting to `Series`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408326542",
    "html_url": "https://github.com/pandas-dev/pandas/pull/22063#issuecomment-408326542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22063",
    "id": 408326542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODMyNjU0Mg==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T06:39:21Z",
    "updated_at": "2018-08-12T08:41:34Z",
    "author_association": "NONE",
    "body": "Hello @holymonson! Thanks for updating the PR.\n\n\n\n\n\n\n\n\n\nCheers ! There are no PEP8 issues in this Pull Request. :beers: \n\n##### Comment last updated on August 12, 2018 at 08:41 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408458792",
    "html_url": "https://github.com/pandas-dev/pandas/pull/22063#issuecomment-408458792",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22063",
    "id": 408458792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODQ1ODc5Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T15:45:00Z",
    "updated_at": "2018-07-27T15:45:00Z",
    "author_association": "MEMBER",
    "body": "> can only handle 1d-array\r\n\r\nCan you expand on why this is a compelling reason?  Maybe there is some characteristic np.ufunc that I'm not considering?\r\n\r\n> so `DataFrame` can't use the same wrapper\r\n\r\nThe idea is that `DataFrame` dispatches column-wise, like it already does in `DataFrame._combine_frame` and `DataFrame._compare_frame`\r\n\r\n> Could someone show me the benefits of the Index-dispatch implement?\r\n\r\nSee #18824.  As you've noticed, there are many operations (particularly arithmetic and comparisons) where `DataFrame` behavior is incorrect, particularly for datetime64 and datetime64tz dtypes.  Until a few months ago, the same was true for Series.  We fixed the Series problems by having it dispatch to the Index subclasses, since the DatetimeIndex and TimedeltaIndex implementations are much more careful.  Now we're down to two implementations instead of three; we still should get it down to one.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435549810",
    "html_url": "https://github.com/pandas-dev/pandas/pull/22063#issuecomment-435549810",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22063",
    "id": 435549810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTU0OTgxMA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-03T01:19:16Z",
    "updated_at": "2018-11-03T01:19:16Z",
    "author_association": "MEMBER",
    "body": "@holymonson can you rebase?  Arithmetic ops have seen a lot of cleanup in the last couple months."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441511155",
    "html_url": "https://github.com/pandas-dev/pandas/pull/22063#issuecomment-441511155",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22063",
    "id": 441511155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTUxMTE1NQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-26T03:48:35Z",
    "updated_at": "2018-11-26T03:48:35Z",
    "author_association": "MEMBER",
    "body": "Closing as stale. Ping if you'd like to pick this back up"
  }
]
