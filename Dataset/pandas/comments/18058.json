[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/342375567",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18058#issuecomment-342375567",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18058",
    "id": 342375567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM3NTU2Nw==",
    "user": {
      "login": "tmnhat2001",
      "id": 15841903,
      "node_id": "MDQ6VXNlcjE1ODQxOTAz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15841903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmnhat2001",
      "html_url": "https://github.com/tmnhat2001",
      "followers_url": "https://api.github.com/users/tmnhat2001/followers",
      "following_url": "https://api.github.com/users/tmnhat2001/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmnhat2001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmnhat2001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmnhat2001/subscriptions",
      "organizations_url": "https://api.github.com/users/tmnhat2001/orgs",
      "repos_url": "https://api.github.com/users/tmnhat2001/repos",
      "events_url": "https://api.github.com/users/tmnhat2001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmnhat2001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T04:55:39Z",
    "updated_at": "2017-11-07T04:55:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here are the changes made following the steps outlined above. In datetimes.py:\r\n```\r\n@property\r\ndef date(self):\r\n    \"\"\"\r\n    Returns numpy array of python datetime.date objects (namely, the date\r\n    part of Timestamps without timezone information).\r\n    \"\"\"\r\n    return self._maybe_mask_results(libalgos.arrmap_object(\r\n        self.asobject.values, lambda x: x.date()))\r\n\r\n@property\r\ndef date_new(self):\r\n    return self.normalize().to_pydate()\r\n\r\ndef to_pydate(self):\r\n    return libts.ints_to_pydatetime(self.asi8, kind=\"date\")\r\n```\r\n\r\nIn tslib.pyx, I added a method to create the date objects, a check for the function to use and consider tz\r\nonly if ``kind`` is not ``date``:\r\n```\r\ncdef inline object create_date_from_ts(\r\n\t\tint64_t value, pandas_datetimestruct dts,\r\n        object tz, object freq):\r\n    \"\"\" convenience routine to construct a datetime.date from its parts \"\"\"\r\n    return date(dts.year, dts.month, dts.day)\r\n\r\ndef ints_to_pydatetime(ndarray[int64_t] arr, tz=None, freq=None, box=False, kind=\"datetime\"):\r\n    # convert an i8 repr to an ndarray of datetimes or Timestamp (if box ==\r\n    # True)\r\n\r\n    cdef:\r\n        Py_ssize_t i, n = len(arr)\r\n        ndarray[int64_t] trans, deltas\r\n        pandas_datetimestruct dts\r\n        object dt\r\n        int64_t value\r\n        ndarray[object] result = np.empty(n, dtype=object)\r\n        object (*func_create)(int64_t, pandas_datetimestruct, object, object)\r\n\t\t\r\n    if kind == \"date\":\r\n        func_create = create_date_from_ts\r\n    else:\r\n        if box and is_string_object(freq):\r\n            from pandas.tseries.frequencies import to_offset\r\n            freq = to_offset(freq)\r\n\r\n        if box:\r\n            func_create = create_timestamp_from_ts\r\n        else:\r\n            func_create = create_datetime_from_ts\r\n\r\n    if tz is not None and kind != \"date\":\r\n        if is_utc(tz):\r\n            for i in range(n):\r\n                value = arr[i]\r\n                if value == NPY_NAT:\r\n                    result[i] = NaT\r\n                else:\r\n                    dt64_to_dtstruct(value, &dts)\r\n                    result[i] = func_create(value, dts, tz, freq)\r\n        elif is_tzlocal(tz) or is_fixed_offset(tz):\r\n            for i in range(n):\r\n                value = arr[i]\r\n                if value == NPY_NAT:\r\n                    result[i] = NaT\r\n                else:\r\n                    dt64_to_dtstruct(value, &dts)\r\n                    dt = create_datetime_from_ts(value, dts, tz, freq)\r\n                    dt = dt + tz.utcoffset(dt)\r\n                    if box:\r\n                        dt = Timestamp(dt)\r\n                    result[i] = dt\r\n        else:\r\n            trans, deltas, typ = get_dst_info(tz)\r\n\r\n            for i in range(n):\r\n\r\n                value = arr[i]\r\n                if value == NPY_NAT:\r\n                    result[i] = NaT\r\n                else:\r\n\r\n                    # Adjust datetime64 timestamp, recompute datetimestruct\r\n                    pos = trans.searchsorted(value, side='right') - 1\r\n                    if treat_tz_as_pytz(tz):\r\n                        # find right representation of dst etc in pytz timezone\r\n                        new_tz = tz._tzinfos[tz._transition_info[pos]]\r\n                    else:\r\n                        # no zone-name change for dateutil tzs - dst etc\r\n                        # represented in single object.\r\n                        new_tz = tz\r\n\r\n                    dt64_to_dtstruct(value + deltas[pos], &dts)\r\n                    result[i] = func_create(value, dts, new_tz, freq)\r\n    else:\r\n        for i in range(n):\r\n\r\n            value = arr[i]\r\n            if value == NPY_NAT:\r\n                result[i] = NaT\r\n            else:\r\n                dt64_to_dtstruct(value, &dts)\r\n                result[i] = func_create(value, dts, None, freq)\r\n\r\n    return result\r\n```\r\n\r\nA quick comparison using timeit:\r\n```\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: rng = pd.date_range('2000-04-03', periods=200000, freq='2H')\r\n\r\nIn [3]: %timeit rng.date\r\n555 ms ± 14.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n\r\nIn [4]: %timeit rng.date_new\r\n90.4 ms ± 5.79 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\r\n\r\nIn [5]: %timeit rng.normalize().to_pydatetime()\r\n121 ms ± 3.08 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\r\n\r\nIn [6]: rng.date\r\nOut[6]:\r\narray([datetime.date(2000, 4, 3), datetime.date(2000, 4, 3),\r\n       datetime.date(2000, 4, 3), ..., datetime.date(2045, 11, 19),\r\n       datetime.date(2045, 11, 19), datetime.date(2045, 11, 19)], dtype=object)\r\n\r\nIn [7]: rng.date_new\r\nOut[7]:\r\narray([datetime.date(2000, 4, 3), datetime.date(2000, 4, 3),\r\n       datetime.date(2000, 4, 3), ..., datetime.date(2045, 11, 19),\r\n       datetime.date(2045, 11, 19), datetime.date(2045, 11, 19)], dtype=object)\r\n\r\nIn [8]: rng.normalize().to_pydatetime()\r\nOut[8]:\r\narray([datetime.datetime(2000, 4, 3, 0, 0),\r\n       datetime.datetime(2000, 4, 3, 0, 0),\r\n       datetime.datetime(2000, 4, 3, 0, 0), ...,\r\n       datetime.datetime(2045, 11, 19, 0, 0),\r\n       datetime.datetime(2045, 11, 19, 0, 0),\r\n       datetime.datetime(2045, 11, 19, 0, 0)], dtype=object)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/342577979",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18058#issuecomment-342577979",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18058",
    "id": 342577979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjU3Nzk3OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T18:32:29Z",
    "updated_at": "2017-11-07T18:32:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "if you would put this in a PR we can have a look"
  }
]
