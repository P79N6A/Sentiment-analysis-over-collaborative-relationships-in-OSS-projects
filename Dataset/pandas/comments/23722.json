[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439172817",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439172817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439172817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTE3MjgxNw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T20:06:24Z",
    "updated_at": "2018-11-15T20:06:24Z",
    "author_association": "MEMBER",
    "body": "I'm pretty sure this ends up going through the datetime_to_datetime64 branch of to_datetime.  The fix is going to involve merging that into array_to_datetime and handling the tzinfo checks more carefully (like you already did for the string cases).\r\n\r\nDid the issue with hashability of dateutil timezones ever get resolved?  I think we're going to need to use actual `set`s of tzinfo objects if extending that to the datetime cases.\r\n\r\nBTW note that passing the list in the reversed order raises correctly."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439178872",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439178872",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439178872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTE3ODg3Mg==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T20:27:36Z",
    "updated_at": "2018-11-15T20:27:36Z",
    "author_association": "MEMBER",
    "body": "It appears there's some caution making dateutil timezones hashable: https://github.com/dateutil/dateutil/issues/792#issuecomment-409701152\r\n\r\nAgreed this probably involves just merging datetime_to_datetime64 into array_to_datetime."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439197541",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439197541",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439197541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTE5NzU0MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T21:32:01Z",
    "updated_at": "2018-11-15T21:32:01Z",
    "author_association": "MEMBER",
    "body": "If hashing is still a problem then sets are out; could we map tzinfo objects to unique strings and use a dict?  Actually we might even use the same dict that tslibs.timezones uses"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439202286",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439202286",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439202286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTIwMjI4Ng==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T21:48:12Z",
    "updated_at": "2018-11-15T21:48:12Z",
    "author_association": "MEMBER",
    "body": "That could work. We could have a function that does the reverse of `get_timezone` that returns a string from a timezone object and just continue using sets. Would be manageable now with just pytz and dateutil timezones but haven't though too hard about the feasibility. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439212313",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439212313",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439212313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTIxMjMxMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T22:23:56Z",
    "updated_at": "2018-11-15T22:23:56Z",
    "author_association": "MEMBER",
    "body": "Agreed that the boxing into an index is wrong, but the fact that it is actually parsed into datetime64, is that necessarily wrong? Or if we don't want to parse such a mixture of tz-aware/tz-naive, shouldn't the default be to raise an error?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439227185",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439227185",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439227185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTIyNzE4NQ==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T23:26:21Z",
    "updated_at": "2018-11-15T23:26:21Z",
    "author_association": "MEMBER",
    "body": "I guess in essence this appears as if `to_datetime` is then just wrapping this passed argument in either `array(..., dtype=object)` or `Index(..., dtype=object)`, but is the intention of `to_datetime` to always coerce to `datetime64` or raise (at least that was never clear to me)?\r\n\r\nMy impression was to always try preserve mixed types of arguments into a \"lowest common datetime format\"; therefore allowing cases like above to come in as an object array of `datetime.datetime`s"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439233426",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439233426",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439233426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTIzMzQyNg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T23:56:06Z",
    "updated_at": "2018-11-15T23:56:06Z",
    "author_association": "MEMBER",
    "body": "The raise/not behavior should be determined by the `errors` kwarg I'd assume.  It would not be surprising if the behavior is not internally consistent"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439328231",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439328231",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439328231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTMyODIzMQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T09:07:28Z",
    "updated_at": "2018-11-16T09:07:28Z",
    "author_association": "MEMBER",
    "body": "The expected behaviour is indeed not very well defined (at least not in the docstring). But there is the `errors` keyword, that is 'raise' by default and not 'ignore'.\r\n\r\nEg with out of range timestamps, by default it raises, but with 'ignore' it gives you back datetime.datetime objects:\r\n\r\n```\r\nIn [10]: pd.to_datetime([datetime.datetime(1000, 1, 1)])\r\n...\r\nOutOfBoundsDatetime: Out of bounds nanosecond timestamp: 1000-01-01 00:00:00\r\n\r\nIn [11]: pd.to_datetime([datetime.datetime(1000, 1, 1)], errors='ignore') \r\nOut[11]: Index([1000-01-01 00:00:00], dtype='object')\r\n\r\nIn [14]: pd.to_datetime([datetime.datetime(1000, 1, 1)], errors='ignore', box=False)\r\nOut[14]: array([datetime.datetime(1000, 1, 1, 0, 0)], dtype=object)\r\n```\r\n\r\nAnd as @jbrockmendel noted above, if you switch the order to put a tz-aware first, it also raises:\r\n\r\n```\r\nIn [18]: pd.to_datetime([datetime.datetime(2018, 1, 1, tzinfo=pytz.UTC), datetime.datetime(2018, 1, 1)], box=False)\r\n...\r\nValueError: Tz-aware datetime.datetime cannot be converted to datetime64 unless utc=True\r\n```\r\n\r\nAlthough here the `errors='ignore'` option does not work (it still raises the same error).\r\n\r\nSo there are clearly some inconsistencies that would be nice to solve.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439328776",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439328776",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439328776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTMyODc3Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T09:09:36Z",
    "updated_at": "2018-11-16T09:10:11Z",
    "author_association": "MEMBER",
    "body": "And some more inconsistencies:\r\n\r\nThe equivalent with strings (one tz aware, one not), \"works\" as well (so this is similar as the case with datetime.datetime):\r\n```\r\nIn [26]: pd.to_datetime([\"2018-01-01 00:00:00+00:00\", \"2018-01-02 00:00:00\"])\r\nOut[26]: DatetimeIndex(['2018-01-01 00:00:00+00:00', '2018-01-02 00:00:00+00:00'], dtype='datetime64[ns, UTC]', freq=None)\r\n```\r\n\r\nBut now switching them in order returns datetime.datetime objects:\r\n```\r\nIn [27]: pd.to_datetime([\"2018-01-01 00:00:00\", \"2018-01-02 00:00:00+00:00\"])\r\nOut[27]: Index([2018-01-01 00:00:00, 2018-01-02 00:00:00+00:00], dtype='object')\r\n\r\nIn [28]: _.values\r\nOut[28]: \r\narray([datetime.datetime(2018, 1, 1, 0, 0),\r\n       datetime.datetime(2018, 1, 2, 0, 0, tzinfo=tzutc())], dtype=object)\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439447029",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439447029",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439447029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ0NzAyOQ==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T16:24:35Z",
    "updated_at": "2018-11-16T16:24:35Z",
    "author_association": "MEMBER",
    "body": "Well my impression is that `errors` is specifically for invalid parsing of dates and _not_ that the input can be nicely converted to `datetime64`.\r\n\r\n>errors : {‘ignore’, ‘raise’, ‘coerce’}, default ‘raise’\r\n\r\n>If ‘raise’, then invalid parsing will raise an exception\r\n>If ‘coerce’, then invalid parsing will be set as NaT\r\n>If ‘ignore’, then invalid parsing will return the input\r\n\r\nSo I think in the case of the original example input `[datetime.datetime(2018, 1, 1), datetime.datetime(2018, 1, 1, tzinfo=pytz.UTC)]` (similar to your last string example) these inputs can be \"parsed\" but shouldn't necessarily raise just because the inputs can't be nicely coerced to  `datetime64`, so returning an `array`/`Index` of `datetime.datetime` objects is okay.\r\n\r\nBut I agree your last 2 examples should be made consistent regardless of order of arguments."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439479610",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439479610",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439479610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ3OTYxMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T18:13:45Z",
    "updated_at": "2018-11-16T18:13:45Z",
    "author_association": "MEMBER",
    "body": "> these inputs can be \"parsed\" but shouldn't necessarily raise just because the inputs can't be nicely coerced to datetime64, so returning an array/Index of datetime.datetime objects is okay.\r\n\r\nThere's certainly some logic in there, but then from a user's standpoint: what's the point of returning those object dtype values (same as input)? I cannot do anything with it, I exactly passed them to `to_datetime` to make it proper datetime64 data. \r\n\r\nOr differently put: if not with `to_datetime`, how can I convert those values (for this example of mixed datetime.datetime values) to datetime64[ns] ?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439479975",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439479975",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439479975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ3OTk3NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T18:15:07Z",
    "updated_at": "2018-11-16T18:15:07Z",
    "author_association": "MEMBER",
    "body": "> Or differently put: if not with to_datetime, how can I convert those values (for this example of mixed datetime.datetime values) to datetime64[ns] ?\r\n\r\nTo answer myself: by passing `utc=True` it should still work I suppose. \r\nBut then, I personally find a default behaviour of raising an informative error message saying that you have mixed tz-aware/tz-naive data and that you can use `utc=True` more useful I think than silently returning the input objects."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439490306",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439490306",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439490306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ5MDMwNg==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T18:51:17Z",
    "updated_at": "2018-11-16T18:51:17Z",
    "author_association": "MEMBER",
    "body": "> I cannot do anything with it, I exactly passed them to to_datetime to make it proper datetime64 data\r\n\r\nSo if this is the minimum assumption (which we should document) for `to_datetime` then yes, we shouldn't ever return `datetime.datetime` objects unless `errors='ignore'`. I can get on board with this behavior.\r\n\r\nI have a slight suspicion some internals _may_ depend on retaining mixed timezone or mixed tz-aware/tz-naive values (e.g. I just changed this for parsing utc offsets: https://pandas-docs.github.io/pandas-docs-travis/whatsnew/v0.24.0.html#parsing-datetime-strings-with-timezone-offsets)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439491937",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439491937",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439491937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ5MTkzNw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T18:56:31Z",
    "updated_at": "2018-11-16T18:56:31Z",
    "author_association": "MEMBER",
    "body": "There are a number of overlapping issues involved here.  The OutOfBoundsDatetime behavior is a particularly difficult one.  To the extent possible, I think we should consider that separately for the time being.\r\n\r\nboxing is currently done at several places inside `to_datetime`.  As a first/early step, can we trim that down to being down in just one place?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439497661",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439497661",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439497661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ5NzY2MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T19:17:09Z",
    "updated_at": "2018-11-16T19:17:38Z",
    "author_association": "MEMBER",
    "body": "> boxing is currently done at several places inside to_datetime. As a first/early step, can we trim that down to being down in just one place?\r\n\r\n+1\r\n\r\nThe boxing can indeed be discussed separately, but I think the original issue was not only about boxing, but also the question about should it return datetime64 data or object data (or raise).\r\n\r\nIn any case, if you have a mixture of tz-aware and tz-naive values, the behaviour should not depend on the order and which of the two happened to be the first value .."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439498597",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-439498597",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 439498597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ5ODU5Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T19:20:31Z",
    "updated_at": "2018-11-16T19:20:31Z",
    "author_association": "MEMBER",
    "body": "> So if this is the minimum assumption (which we should document) for to_datetime then yes, we shouldn't ever return datetime.datetime objects unless errors='ignore'. I can get on board with this behavior.\r\n\r\nI am not sure it will be best in all cases or what we would break when trying to do this, but I think it is at least a \"clear\" explanation: the function returns datetime64[ns] data (boxed or not), or raises that it cannot do that (by default, the keywords can then still influence it)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443021981",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23722#issuecomment-443021981",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23722",
    "id": 443021981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzAyMTk4MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T22:44:22Z",
    "updated_at": "2018-11-29T22:44:22Z",
    "author_association": "MEMBER",
    "body": "I just made a GH Project for to_datetime to collect all of these issues/discussions"
  }
]
