[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385651590",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20900#issuecomment-385651590",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20900",
    "id": 385651590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTY1MTU5MA==",
    "user": {
      "login": "normanius",
      "id": 11406002,
      "node_id": "MDQ6VXNlcjExNDA2MDAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11406002?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/normanius",
      "html_url": "https://github.com/normanius",
      "followers_url": "https://api.github.com/users/normanius/followers",
      "following_url": "https://api.github.com/users/normanius/following{/other_user}",
      "gists_url": "https://api.github.com/users/normanius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/normanius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/normanius/subscriptions",
      "organizations_url": "https://api.github.com/users/normanius/orgs",
      "repos_url": "https://api.github.com/users/normanius/repos",
      "events_url": "https://api.github.com/users/normanius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/normanius/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T11:33:40Z",
    "updated_at": "2018-05-01T11:35:48Z",
    "author_association": "NONE",
    "body": "I am currently using this workaround that works for my type of indices (ints and strings). I also posted [the problem on Stackoverflow](https://stackoverflow.com/questions/50098443).\r\n\r\n```\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndef stringifiedSortIndex(table):\r\n    # 1) Stringify the index.\r\n    _stringifyIdx = _StringifyIdx()\r\n    table.index = table.index.map(_stringifyIdx)\r\n    # 2) Sort the index.\r\n    table = table.sort_index()\r\n    # 3) Destringify the sorted table.\r\n    _stringifyIdx.revert = True\r\n    table.index = table.index.map(_stringifyIdx)\r\n    # Return table and IndexSlice together.\r\n    return table\r\n\r\nclass _StringifyIdx(object):\r\n    def __init__(self):\r\n        self._destringifyMap = dict()\r\n        self.revert = False\r\n    def __call__(self, idx):\r\n        if not self.revert:\r\n            return self._stringifyIdx(idx)\r\n        else:\r\n            return self._destringifyIdx(idx)\r\n\r\n    # Stringify whatever needs to be converted.\r\n    # In this example: only ints are stringified.\r\n    @staticmethod\r\n    def _stringify(x):\r\n        if isinstance(x,int):\r\n            x = '%03d' % x\r\n            destringify = int\r\n        else:\r\n            destringify = lambda x: x\r\n        return x, destringify\r\n\r\n    def _stringifyIdx(self, idx):\r\n        if isinstance(idx, tuple):\r\n            idx = list(idx)\r\n            destr = [None]*len(idx)\r\n            for i,x in enumerate(idx):\r\n                idx[i], destr[i] = self._stringify(x)\r\n            idx = tuple(idx)\r\n            destr = tuple(destr)\r\n        else:\r\n            idx, destr = self._stringify(idx)\r\n        if self._destringifyMap is not None:\r\n            self._destringifyMap[idx] = destr\r\n        return idx\r\n\r\n    def _destringifyIdx(self, idx):\r\n        if idx not in self._destringifyMap:\r\n            raise ValueError((\"Index to destringify has not been stringified \"\r\n                              \"this class instance. Index must not change \"\r\n                              \"between stringification and destringification.\"))\r\n        destr = self._destringifyMap[idx]\r\n        if isinstance(idx, tuple):\r\n            assert(len(destr)==len(idx))\r\n            idx = tuple(d(i) for d,i in zip(destr, idx))\r\n        else:\r\n            idx = destr(idx)\r\n        return idx\r\n\r\n\r\n# Build the table.\r\nindex = [(10,3),(10,1),(2,2),('foo',4),('bar',5)]\r\nindex = pd.MultiIndex.from_tuples(index)\r\ndata = np.random.randn(len(index),2)\r\ntable = pd.DataFrame(data=data, index=index)\r\nidx = pd.IndexSlice\r\n\r\ntable = stringifiedSortIndex(table)\r\nprint(table)\r\n\r\n# Now, the table rows can be accessed as usual.\r\ntable.loc[idx[10],:]\r\ntable.loc[idx[:10],:]\r\ntable.loc[idx[:'bar',:],:]\r\ntable.loc[idx[:,:2],:]\r\n\r\n# This works also for simply indexed table.\r\ntable = pd.DataFrame(data=data, index=[4,1,'foo',3,'bar'])\r\ntable = stringifiedSortIndex(table)\r\ntable[:'bar']\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385652038",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20900#issuecomment-385652038",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20900",
    "id": 385652038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTY1MjAzOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T11:36:32Z",
    "updated_at": "2018-05-01T11:36:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, the example in your original post doesn't run because `index` isn't defined.\r\n\r\nI think we deliberately choose to follow how the language does things here. NumPy does the same (\"sorts\" on Py2, raises on Py3)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385655015",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20900#issuecomment-385655015",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20900",
    "id": 385655015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTY1NTAxNQ==",
    "user": {
      "login": "normanius",
      "id": 11406002,
      "node_id": "MDQ6VXNlcjExNDA2MDAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11406002?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/normanius",
      "html_url": "https://github.com/normanius",
      "followers_url": "https://api.github.com/users/normanius/followers",
      "following_url": "https://api.github.com/users/normanius/following{/other_user}",
      "gists_url": "https://api.github.com/users/normanius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/normanius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/normanius/subscriptions",
      "organizations_url": "https://api.github.com/users/normanius/orgs",
      "repos_url": "https://api.github.com/users/normanius/repos",
      "events_url": "https://api.github.com/users/normanius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/normanius/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T11:56:10Z",
    "updated_at": "2018-05-01T11:56:24Z",
    "author_association": "NONE",
    "body": "> FYI, the example in your original post doesn't run because index isn't defined.\r\n\r\nFixed!\r\n\r\n> I think we deliberately choose to follow how the language does things here. NumPy does the same (\"sorts\" on Py2, raises on Py3).\r\n\r\nI agree that the [new ordering policy in python3](https://docs.python.org/3.0/whatsnew/3.0.html#ordering-comparisons) is a global change that not necessarily needs to be compensated for in all cases. However, as the index is represented internally by a `Categorical` object (and not just plain lists) and the fact that indices need to be lex-sorted for certain operations on the table (for example the notationally efficient slicing operators), I expect pandas to provide means to sort the indices such that these elementary operations do work. \r\n\r\nThe alternative would be to prevent mixed-type indices all the way. Or to provide a cook-book recipe on how to deal with mixed-type indices. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385655503",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20900#issuecomment-385655503",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20900",
    "id": 385655503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTY1NTUwMw==",
    "user": {
      "login": "normanius",
      "id": 11406002,
      "node_id": "MDQ6VXNlcjExNDA2MDAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11406002?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/normanius",
      "html_url": "https://github.com/normanius",
      "followers_url": "https://api.github.com/users/normanius/followers",
      "following_url": "https://api.github.com/users/normanius/following{/other_user}",
      "gists_url": "https://api.github.com/users/normanius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/normanius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/normanius/subscriptions",
      "organizations_url": "https://api.github.com/users/normanius/orgs",
      "repos_url": "https://api.github.com/users/normanius/repos",
      "events_url": "https://api.github.com/users/normanius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/normanius/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T11:59:52Z",
    "updated_at": "2018-05-01T11:59:52Z",
    "author_association": "NONE",
    "body": "Here is an example with mixed-type indices that requires a table to be lex-sorted and currently fails on pandas3.\r\n\r\n```\r\nimport pandas as pd\r\nimport numpy as np\r\nindex = [(10,3),(10,1),(2,2),('foo',4),('bar',5)]\r\nindex = pd.MultiIndex.from_tuples(index)\r\ndata = np.random.randn(len(index),2)\r\ntable = pd.DataFrame(data=data, index=index)\r\n\r\nidx=pd.IndexSlice\r\ntable.loc[idx[:10,:],:]\r\n# The last line will raise an UnsortedIndexError because \r\n# 'foo' and 'bar' appear in the wrong order.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/385657268",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20900#issuecomment-385657268",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20900",
    "id": 385657268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTY1NzI2OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T12:11:58Z",
    "updated_at": "2018-05-01T12:11:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is using pandas in a very non-idiomatic way as mixed types are not easily represented, except by object type. that said, the sorting mechanisms internally for object types could use ``safe_sort`` (see ``pandas.core.sorting``) which handles correctly these mixed types cases"
  }
]
