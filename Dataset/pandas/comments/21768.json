[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403123816",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21768#issuecomment-403123816",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21768",
    "id": 403123816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzEyMzgxNg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T19:17:55Z",
    "updated_at": "2018-07-06T19:17:55Z",
    "author_association": "MEMBER",
    "body": "How weird!  Investigation and PR are certainly welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403235473",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21768#issuecomment-403235473",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21768",
    "id": 403235473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzIzNTQ3Mw==",
    "user": {
      "login": "asishm",
      "id": 1978117,
      "node_id": "MDQ6VXNlcjE5NzgxMTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1978117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asishm",
      "html_url": "https://github.com/asishm",
      "followers_url": "https://api.github.com/users/asishm/followers",
      "following_url": "https://api.github.com/users/asishm/following{/other_user}",
      "gists_url": "https://api.github.com/users/asishm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asishm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asishm/subscriptions",
      "organizations_url": "https://api.github.com/users/asishm/orgs",
      "repos_url": "https://api.github.com/users/asishm/repos",
      "events_url": "https://api.github.com/users/asishm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asishm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-07T18:42:00Z",
    "updated_at": "2018-07-07T18:42:00Z",
    "author_association": "NONE",
    "body": "I'd argue this is behavior as expected.\r\n\r\nConsider it was a comma separated file instead, the provided csv example would look like\r\n```\r\n2270433,3,21322.889,11924.667,5228.753,1.0,-1,\r\n2270432,3,21322.297,11924.667,5228.605,1.0,2270433,\r\n```\r\nwhich would indicate that this csv file has 8 columns. (the last column being nulls). Since 7 columns are passed in the `names` parameter, it is forced to try and set the first column as the index and column `G` is a column of `np.nan`s. But since the dtype was specified to be `int32`, it raises the error which would be as per expectations as there's no way to convert a `nan` to an int."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403243567",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21768#issuecomment-403243567",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21768",
    "id": 403243567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzI0MzU2Nw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-07T21:20:05Z",
    "updated_at": "2018-07-07T21:20:13Z",
    "author_association": "MEMBER",
    "body": "@asishm : Ah, that's a very good point.  Nevertheless, it's not immediately obvious that that was the case IMO.  Might you be able to pinpoint where we perform that kind of logic?  I can see two ways to fix this:\r\n\r\n* Add this to the documentation that this how `names` behaves\r\n* Change the handling of what we do when `len(names)` is not equal to the length the parsed columns in the table (especially when `index_col=None` by default in this case)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403255295",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21768#issuecomment-403255295",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21768",
    "id": 403255295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzI1NTI5NQ==",
    "user": {
      "login": "asishm",
      "id": 1978117,
      "node_id": "MDQ6VXNlcjE5NzgxMTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1978117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asishm",
      "html_url": "https://github.com/asishm",
      "followers_url": "https://api.github.com/users/asishm/followers",
      "following_url": "https://api.github.com/users/asishm/following{/other_user}",
      "gists_url": "https://api.github.com/users/asishm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asishm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asishm/subscriptions",
      "organizations_url": "https://api.github.com/users/asishm/orgs",
      "repos_url": "https://api.github.com/users/asishm/repos",
      "events_url": "https://api.github.com/users/asishm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asishm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-08T01:43:49Z",
    "updated_at": "2018-07-08T01:43:49Z",
    "author_association": "NONE",
    "body": "@gfyoung I believe the documentation for `index_col` does specify this specific case:\r\n\r\n> index_col : int or sequence or False, default None\r\n    Column to use as the row labels of the DataFrame. If a sequence is given, a\r\n    MultiIndex is used. **If you have a malformed file with delimiters at the end\r\n    of each line, you might consider index_col=False to force pandas to _not_\r\n    use the first column as the index (row names)**\r\n\r\nI would agree that for the case `index_col=None` and where `names` is specified, it should be noted in the documentation that if `len(names) < len(actual_columns)`, then the first `x` (difference) would be treated as the index. I can't point exactly where this happens due to my unfamiliarity with pandas internals, but see below for examples:\r\n\r\n```py\r\nIn [113]: s\r\nOut[113]: '2270433 3 21322.889 11924.667 5228.753 1.0 -1 \\n2270432 3 21322.297 11924.667 5228.605 1.0 2270433 '\r\n\r\nIn [114]: pd.read_csv(io.StringIO(s), header=None, sep=' ', names=list('abcd'))\r\nOut[114]:\r\n                                      a    b        c   d\r\n2270433 3 21322.889 11924.667  5228.753  1.0       -1 NaN\r\n2270432 3 21322.297 11924.667  5228.605  1.0  2270433 NaN\r\n\r\nIn [115]: pd.read_csv(io.StringIO(s), header=None, sep=' ', names=list('abcdef'))\r\nOut[115]:\r\n                   a          b         c    d        e   f\r\n2270433 3  21322.889  11924.667  5228.753  1.0       -1 NaN\r\n2270432 3  21322.297  11924.667  5228.605  1.0  2270433 NaN\r\n\r\nIn [116]: pd.read_csv(io.StringIO(s), header=None, sep=' ', names=list('abcdefg'))\r\nOut[116]:\r\n         a          b          c         d    e        f   g\r\n2270433  3  21322.889  11924.667  5228.753  1.0       -1 NaN\r\n2270432  3  21322.297  11924.667  5228.605  1.0  2270433 NaN\r\n\r\nIn [117]: pd.read_csv(io.StringIO(s), header=None, sep=' ', names=list('abcdefgh'))\r\nOut[117]:\r\n         a  b          c          d         e    f        g   h\r\n0  2270433  3  21322.889  11924.667  5228.753  1.0       -1 NaN\r\n1  2270432  3  21322.297  11924.667  5228.605  1.0  2270433 NaN\r\n\r\nIn [118]: pd.read_csv(io.StringIO(s), header=None, sep=' ', names=list('abcdefg'), index_col=False)\r\nOut[118]:\r\n         a  b          c          d         e    f        g\r\n0  2270433  3  21322.889  11924.667  5228.753  1.0       -1\r\n1  2270432  3  21322.297  11924.667  5228.605  1.0  2270433\r\n\r\nIn [119]: pd.read_csv(io.StringIO(s), header=None, sep=' ', names=list('abcdef'), index_col=False) # error - List index out of range\r\n\r\nIn [121]: pd.read_csv(io.StringIO(s), header=None, sep=' ', names=list('abcdef'), index_col=False, engine='python')\r\nOut[121]:\r\n         a  b          c          d         e    f\r\n0  2270433  3  21322.889  11924.667  5228.753  1.0\r\n1  2270432  3  21322.297  11924.667  5228.605  1.0\r\n```\r\n\r\nSomething that is curious here is the difference between the python and C engine parsers when `index_col=False` as demonstrated in the last 2 examples. C parser raises the list index out of range, but python parser just discards the extra columns at the end."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403255694",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21768#issuecomment-403255694",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21768",
    "id": 403255694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzI1NTY5NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-08T01:53:56Z",
    "updated_at": "2018-07-08T01:53:56Z",
    "author_association": "MEMBER",
    "body": "@asishm : Thanks for pointing out.  I think the docs could be clarified further to make this more explicit.  That discrepancy that you found is a bug in the Python engine IMO.  Malformed CSV shouldn't just drop columns silently like that."
  }
]
