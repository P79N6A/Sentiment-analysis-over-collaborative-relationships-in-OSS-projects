[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/99857658",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10073#issuecomment-99857658",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10073",
    "id": 99857658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5ODU3NjU4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-07T13:05:45Z",
    "updated_at": "2015-05-07T13:05:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "can you run the perf suite and see where this help? https://github.com/pydata/pandas/wiki/Performance-Testing\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/99925207",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10073#issuecomment-99925207",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10073",
    "id": 99925207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5OTI1MjA3",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-07T16:13:39Z",
    "updated_at": "2015-05-07T16:18:40Z",
    "author_association": "NONE",
    "body": "@jreback I apologise in advance for this disproportionally long post.\n\nI tried running vbench but have two problems: 1. I am on windows and cannot use the script, but even after invoking vbench with what I think is the windows equivalent, I am 2. not using git but `hg-git'.\n\nI tried to use git for windows to re-download my fork from github and run vbench on it, but `vbench` produces the error message:\n\n```\n  File \"C:\\Anaconda\\envs\\pandas_dev\\lib\\subprocess.py\", line 573, in check_output\n    raise CalledProcessError(retcode, cmd, output=output)\nsubprocess.CalledProcessError: Command 'git rev-parse --short -verify master^{commit}' returned non-zero exit status 128\n```\n\nI am not sure which part of my setup is causing it. I know it is somewhat unlikely, but do you know of another pandas developer using Windows who could help me out?\n\n---\n\n**Reason for the PR: allow users to create custom high-performance dataframe constructors:**\n\nI do not expect any significant speed improvements from this PR in the usual pandas usage (if any at all). Usually Index generation far outweighs `BlockPlacement` generation. One usually does not happen without the other as far as I know. This PR only comes into play in the following situation:\n1. `RangeIndex` (#9977) is activated as default index and\n2. the user runs a **truely funky**, custom, high-performance dataframe constructor to be able to use the pandas dataframe as a numpy structured array replacement data container.\n\nWith both of these in place, dataframe instantiation time becomes then comparable to `numpy` (x28 speedup for small dataframes and x376 for large dataframes).\n\n**More importantly however, filling the thus allocated dataframe from a columnar database is x3 faster than filling an equivalent numpy structured array!** Similarly, column-wise data analysis is faster with pandas dataframes than with numpy structured arrays.\n\nI know that for your use case, the instantiation speed of a dataframe is irrelevant, but it would be nice to give people the option to roll their own highly-optimized (and probably fragile ;-) ) dataframe constructors. This PR allows that.\n\nIf you are concerned about performance regressions, I can restructure the PR such that `copy()` behaves identical to now (with slice inference) and only enable the optimization with an additional `fastpath` argument for `copy()`. That should eliminate the need to run vbench.\n\n---\n\n**Funky dataframe constructor using `BlockPlacement.copy()`:**\n\n```\nfrom pandas.core.internals import BlockManager\nfrom pandas.core.frame import DataFrame\nfrom pandas.core.generic import NDFrame\nfrom pandas.core.common import CategoricalDtype\nfrom pandas.core.categorical import Categorical\nfrom pandas.lib import BlockPlacement\ntry:\n    from pandas.core.index import Index, RangeIndex\nexcept ImportError:\n    try:\n        from pandas.core.index import Int64Index\n        def RangeIndex(start, stop, step, **kwargs):\n            return Int64Index(np.arange(start, stop, step), **kwargs)\n    except ImportError:\n        pass\n\n\ndef allocate_like(df, size, keep_categories=False):\n    \"\"\"High-performance pandas dataframe constructor for dataframes consisting \n    only of numpy dtype columns. It creates a dataframe with the same columns as\n    the provided template dataframe `df` and with `size` number of rows.\n\n    ATTENTION: This constructor works ONLY for dataframes that contain ONLY columns \n               with NUMPY DTYPES. Date, Categorical, etc. columns are not supported!\n    \"\"\"\n\n    # define axes\n    # (ideally uses pandas/pandas#9977 for MUCH better performance with \n    #  large dataframes)\n    axes = [df.columns, RangeIndex(0, size, 1, fastpath=True)]\n\n    # allocate and create blocks\n    blocks = []\n    for block in df._data.blocks:\n        new_shape = (block.values.shape[0], size)\n        values = np.empty(shape=new_shape, dtype=block.dtype)\n\n        # The following section is equivalent to:\n        # block.make_block_same_class(values=values,\n        #                             placement=block.mgr_locs.as_array)\n        new_block = object.__new__(block.__class__)\n        new_block.values = values\n        new_block.ndim = values.ndim\n        # uses pandas/pandas#10073\n        new_block._mgr_locs = block.mgr_locs.copy()\n\n        blocks.append(new_block)\n\n    # create block manager\n    # The following section is equivalent to:\n    # mgr = BlockManager(blocks, axes, do_integrity_check=False, fastpath=True)\n    mgr = object.__new__(BlockManager)\n    mgr.axes = axes\n    mgr.blocks = tuple(blocks)\n    mgr._blknos = df._data._blknos.copy()\n    mgr._blklocs = df._data._blklocs.copy()\n\n    # create dataframe\n    # The following section is equivalent to:\n    # return DataFrame(mgr)\n    result = object.__new__(DataFrame)\n    #NDFrame.__init__(result, mgr, fastpath=True)\n    object.__setattr__(result, 'is_copy', None)\n    object.__setattr__(result, '_data', mgr)\n    object.__setattr__(result, '_item_cache', {})\n    return result\n```\n\n---\n\n**Timing results comparing pandas dataframe to numpy structured array:**\n\n```\nIn [2]: import numpy as np\n\nIn [3]: import pandas as pd\n\n\n# create template structures\nIn [4]: np_templ = np.empty(0, dtype='i4,i4,f4,f4,f4')\n\nIn [5]: pd_templ = pd.DataFrame(np_templ)\n\n\n# small structure timings: x28 speedup\n#\nIn [6]: %timeit np.empty(0, dtype=np_templ.dtype)\n100000 loops, best of 3: 2.14 µs per loop\n\nIn [7]: %timeit np.empty(0, dtype='i4,i4,f4,f4,f4')\n10000 loops, best of 3: 58 µs per loop\n\nIn [8]: %timeit pd.DataFrame(np.empty(0, dtype=np_templ.dtype))\n1000 loops, best of 3: 786 µs per loop\n\nIn [8]: %timeit allocate_like(pd_templ, size=0)\n10000 loops, best of 3: 28.3 µs per loop\n\n\n# large structure timings: x376 speedup\n#\nIn [9]: %timeit np.empty(int(1e6), dtype=np_templ.dtype)\n10000 loops, best of 3: 100 µs per loop\n\nIn [10]: %timeit np.empty(int(1e6), dtype='i4,i4,f4,f4,f4')\n10000 loops, best of 3: 159 µs per loop\n\nIn [11]: %timeit pd.DataFrame(np.empty(int(1e6), dtype=np_templ.dtype))\n10 loops, best of 3: 56.4 ms per loop\n\nIn [12]: %timeit allocate_like(pd_templ, size=int(1e6))\n10000 loops, best of 3: 150 µs per loop\n\n\n# Simulate filling large mixed-dtype structures from a columnar database\n#\n\nIn [13]: some_data = np.random.rand(1,int(1e6))\n\nIn [14]: arr = np.empty(int(1e6), dtype=np_templ.dtype)\n\nIn [15]: %%timeit\n   ....: for name in arr.dtype.names:\n   ....:     arr[name] = some_data\n   ....:\n10 loops, best of 3: 61.1 ms per loop\n\nIn [16]: df = pd.DataFrame(np.empty(int(1e6), dtype=np_templ.dtype))\n\nIn [17]: %%timeit\n   ....: mgr = df._data\n   ....: for name in arr.dtype.names:\n   ....:     loc = mgr.items.get_loc(name)\n   ....:     blkno = mgr._blknos[loc]\n   ....:     blkloc = mgr._blklocs[loc]\n   ....:     mgr.blocks[blkno].values[blkloc, :] = some_data\n   ....:\n10 loops, best of 3: 20.7 ms per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/99927139",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10073#issuecomment-99927139",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10073",
    "id": 99927139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5OTI3MTM5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-07T16:23:23Z",
    "updated_at": "2015-05-07T16:23:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ARF1 I think you are missing the point about incremental development. `RangeIndex` is gr8, but it is not relevant to this particular discussion as its not in the master branch. You are proposing a change, which on the surface looks ok. If it has a perf speedup (or at least doesn't hurt anything) then that is important to know. \n\nI certainly care about `DataFrame` construction performance. If you can improve it w/o breaking other things then gr8. My points from other threads are that it is relatively unimportant compared to most operations, doesn't mean it doesn't matter though. Even an incremental improvement at the end of the day is good.\n\nYou may or may not have improvements with various PR's, but they each need to be proved incrementally. If that is not the case then you can simply bundle them and request that all the changes go in at once.\n\nHowever, the main reason for incremental changes is that it is far easier to review and think about the changes; if you are proposing a massive change then it will take quite some time to review (even after it passes all of the tests).\n\nThat is while incremental changes are much better in a mature project like pandas.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/99927690",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10073#issuecomment-99927690",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10073",
    "id": 99927690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5OTI3Njkw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-07T16:25:36Z",
    "updated_at": "2015-05-07T16:25:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ARF1 you mention 'am I concerned about performance regressions' certainly. But you haven't proven the case either  way. The only way is to test. \n\nmaybe @jorisvandenbossche can help you out on windows with vbench. It should work if you have all of the deps installed. I do recall a fair amount of users running vbench correctly on windows.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100044060",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10073#issuecomment-100044060",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10073",
    "id": 100044060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDA0NDA2MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-07T23:09:53Z",
    "updated_at": "2015-05-07T23:09:53Z",
    "author_association": "MEMBER",
    "body": "sorry, can't really help. I am both using windows and linux, and always did my vbenches on linux. I am not sure if it is supposed to work there.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127951136",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10073#issuecomment-127951136",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10073",
    "id": 127951136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzk1MTEzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T10:32:51Z",
    "updated_at": "2015-08-05T10:32:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "not clear if this actually helps/hurts perf at all.\n"
  }
]
