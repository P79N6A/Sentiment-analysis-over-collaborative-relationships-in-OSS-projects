[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20634267",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20634267",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20634267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM0MjY3",
    "user": {
      "login": "garaud",
      "id": 98194,
      "node_id": "MDQ6VXNlcjk4MTk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/98194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/garaud",
      "html_url": "https://github.com/garaud",
      "followers_url": "https://api.github.com/users/garaud/followers",
      "following_url": "https://api.github.com/users/garaud/following{/other_user}",
      "gists_url": "https://api.github.com/users/garaud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/garaud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garaud/subscriptions",
      "organizations_url": "https://api.github.com/users/garaud/orgs",
      "repos_url": "https://api.github.com/users/garaud/repos",
      "events_url": "https://api.github.com/users/garaud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/garaud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T20:39:17Z",
    "updated_at": "2013-07-08T20:39:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it can be good if the \"way to go\" was defined before doing remaining tasks. I think SQLAlchemy is a good way:\n- less code\n- better maintainable\n- less specific to a given SQL engine\n\nI don't know well SQLAlchemy. I can't tell if all wanted features can be implemented with it, or if it can cause some tricky problems.\n\nDamien G.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20635747",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20635747",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20635747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM1NzQ3",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T21:02:13Z",
    "updated_at": "2013-07-08T21:02:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@garaud I agree, I suspect it'll create fewer tricky problems than maintaining every flavour. :)\n\nI think I've pulled in all the open issues re sql (as they'll have to be addressed in either case).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20637337",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20637337",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20637337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM3MzM3",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T21:26:44Z",
    "updated_at": "2013-07-08T21:28:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "And while we're addressing the big picture, `write_frame` ignores the index. `HDFStore`, by contrast, saves it. It's easy enough to promote the index to a column if you want to write it to a SQL table, but would it better to write the index column by default? I have no good ideas for how to implement this cleanly; I'm raising the issue in case someone else can think of a way.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20638403",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20638403",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20638403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM4NDAz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T21:44:08Z",
    "updated_at": "2013-07-08T21:46:28Z",
    "author_association": "CONTRIBUTOR",
    "body": " you should write the index for sure (and provide `index_col=`) on reading\n\nI guess this is a bit tricky because you don't have control of the table format (in `HDFStore` its opaque to the user)\n\nmaybe provide an option on writing, maybe : `index_col='in_table' or False` for dont' write it ?\n\nor have the user provide a column name (whichif its already being written won't then do anything)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20638506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20638506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20638506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM4NTA2",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T21:45:52Z",
    "updated_at": "2013-07-08T21:45:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess the question is what to call it, then, if \"index\" is taken.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20638538",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20638538",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20638538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM4NTM4",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T21:46:25Z",
    "updated_at": "2013-07-08T21:46:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "...and whether to attempt to use it as the PRIMARY KEY\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20639682",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20639682",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20639682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM5Njgy",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T22:05:07Z",
    "updated_at": "2013-07-08T22:05:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "index.name or index.names (do we have MultiIndex support ?) otherwise 'index' (or if Multi: [index_0, index_1, ...]) ?\n\nCan check if already a column name and raise, I guess that is also under the multiple columns with the same name.. raise (or mangle_dup_columns first)... :s\n\nNot sure can PK as index may not be unique... does pk matter?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20639976",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20639976",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20639976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM5OTc2",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T22:09:16Z",
    "updated_at": "2013-07-08T22:09:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@danielballan what am I supposed to be adding to get mysql tests to pass? Does travis run them?\n\n> SKIP: Cannot connect to database. Create a group of connection parameters under the heading [pandas] in your system's mysql default file, typically located at ~/.my.cnf or /etc/.my.cnf.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20641223",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20641223",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20641223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjQxMjIz",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T22:32:16Z",
    "updated_at": "2013-07-08T23:51:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Travis does not run them. (I wrote those tests before I had any experience with Travis, but I will start a branch to install MySQL on the full_deps build.)\n\nAdd a block to your MySQL configuration file that provides valid connection parameters for pandas to use.\n\n```\n[pandas]\nhost = localhost\nuser = ...\npassword = ...\ndatabase = any_database_that_exists\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20740374",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20740374",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20740374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQwMzc0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:04:48Z",
    "updated_at": "2013-07-10T13:04:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think #4110 should be in here/closed is it a dup?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20740783",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20740783",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20740783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQwNzgz",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:12:12Z",
    "updated_at": "2013-07-10T13:12:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, not a dup, and still open I believe. @hayd can add it to the checklist.\n\nHalf the issues on the list could be closed in an afternoon's work, but maybe we should first decide whether we are moving to SQLAlchemy. @mangecoeur?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20741090",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20741090",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20741090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQxMDkw",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:17:24Z",
    "updated_at": "2013-07-10T13:17:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I rebased @mangecoeur's [branch](https://github.com/mangecoeur/pandas/tree/sqlalchemy-integration) cleanly (no conflicts!) to master a few days ago, but couldn't get the tests working on my system - haven't got time to play for a couple of days.\n\nDo you mind having a go @danielballan ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20741665",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20741665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20741665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQxNjY1",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:26:07Z",
    "updated_at": "2013-07-10T13:26:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure... To avoid git surgery down the road, I'll ask a dumb question now. I should add your fork of pandas as a remote and work on a local copy of [this branch](https://github.com/hayd/pandas/tree/sql_alchemy), correct?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20741739",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20741739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20741739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQxNzM5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:27:22Z",
    "updated_at": "2013-07-10T13:27:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "fyi...need to add SQLAlchemy as a build dep (in the requirements file) for full deps, @cpcloud ? (its alread in ci/print_versions.py thought)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20741856",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20741856",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20741856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQxODU2",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:29:39Z",
    "updated_at": "2013-07-10T13:29:50Z",
    "author_association": "MEMBER",
    "body": "fyi u can add to the requirements file \"at will\" (meaning, of course, when it makes sense) and things will be pulled from pypi unless i put up a wheel. wheels should be used only if the package is slow to install.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20742022",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20742022",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20742022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQyMDIy",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:32:32Z",
    "updated_at": "2013-07-10T13:32:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@danielballan sadly because of workload i haven't had time to look into this much - i know pretty much what needs doing but i just don't have time to actually implement+test it. At the simplest level reading a frame using SQLAlchmey as a db abstraction looks like this:\nhttps://gist.github.com/mangecoeur/5383970\n\n(That's code i actually needed in production, so it works and is neater than what's in my branch)\n\nThe code for writing is in my branch, the principle is simple: map each Pandas Dtype to an SQLAlchemy supported type (most python builtins included), create a Table, write the values.\n\nTesting is the kicker, i have very little experience with TDD but i do know that running tests that require DBs is generally a pain. On the other hand, SQLAlchemy's cross DB support is very good, so if it works with one DB it should work for them all, with SQLite as a kind of lowest common denominator.\n\nFinally, I would recommend making SQLAlchemy a soft dependency (like a lot of the other IO) with a fallback to SQLite-support only since that's built into python - there's no point preventing people accessing SQLite just because they don't have SQLAlchemy installed. It's a simple try/except import, set an \"sqlalchemy mode\" flag, choose either genric or SQLite functions accordingly.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20742667",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20742667",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20742667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQyNjY3",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:43:18Z",
    "updated_at": "2013-07-10T13:43:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@danielballan I didn't get the travis build working anyway so feel free throw away my commit (I'd have to rebase after we pull in your mysql travis testing anyway).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20743264",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20743264",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20743264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQzMjY0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T13:52:39Z",
    "updated_at": "2013-07-10T13:52:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that `read_frame/write_frame` should become internal only methods (and instead use the external facing `read_sql/to_sql` for consistency with the rest of the i/o (currently `read_sql` is just aliased to `read_frame`. I know that you will almost certainly just read/write frames, but leaves open then the possibility of dealing with `Panel/Series` (Series is sort of trivial), and e.g. in `HDFStore`, `Panel` is essentially converted to a mi-frame (though storing meta-data is different in SQL so not sure that is an option here).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20743847",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20743847",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20743847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQzODQ3",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T14:01:02Z",
    "updated_at": "2013-07-10T14:01:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Perhaps get SQLAlchemy working (passing the same tests as MySQL) first and then worry about precisely how to call from read_sql and to_sql... Saying that other operations use an `engine` argument (maybe this makes sense here).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20744348",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20744348",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20744348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ0MzQ4",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T14:08:34Z",
    "updated_at": "2013-07-10T14:08:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback or maybe it should be more explicit: read_sqlite and  read_sqlalchemy \n Sqlalchemy supports raw SQL as well as its own \"expression syntax\" (which abstracts from the different SQL flavours used by different DBs) - so it would be nice in the future if read_sqlalchemy could also accept a query object as well as an SQL string. \nAt the moment if you use SQLAlchemy to read a DB using a raw SQL query even though it connects to all DBs transparently it's up to the user to make sure their SQL is formatted for the DB they're using - there's nothing you can really do about that for reading but it would be nice to make it possible to use sqlalchemy's abstractions (though this doesn't need to be done just yet)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20744366",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20744366",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20744366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ0MzY2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T14:08:49Z",
    "updated_at": "2013-07-10T14:08:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "added extra cool `SQL` label for these (CSV/HDF5) also exist as well\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20744850",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20744850",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20744850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ0ODUw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T14:15:58Z",
    "updated_at": "2013-07-10T14:15:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur I disagree, I believe `write_frame` as `flavor=` arg....so should `read_sql`\nthen this becomes straightforward, e.g. try this using say `flavor=sqlite`, or use the default (`SQLAlchemy` if installed, otherwise `sqlite`?)\n\nyou _could_ also provide a module level `set_default_flavor` maybe\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20745007",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20745007",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20745007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ1MDA3",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T14:17:51Z",
    "updated_at": "2013-07-10T14:17:51Z",
    "author_association": "MEMBER",
    "body": "that could go in `config`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20745576",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20745576",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20745576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ1NTc2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T14:25:48Z",
    "updated_at": "2013-07-10T14:25:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "ahh...yes makes more sense, and _fallback_ really doesn't make sense, and people rarely use more than one SQL backend\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20745708",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20745708",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20745708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ1NzA4",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T14:27:47Z",
    "updated_at": "2013-07-10T14:27:47Z",
    "author_association": "MEMBER",
    "body": "probably some of the other module level variables floating around could go in `config` as well\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20748419",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20748419",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20748419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ4NDE5",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T15:04:02Z",
    "updated_at": "2013-07-10T15:04:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback thought about it some more and actually I agree with you now. \n\nThe SQL string given to `read_sql` has to be adapted by the user to fit the DB they know they are using, there's no point having different functions for different DBs. The function should accept both DBAPI connections and SQLAlchemy engines. There's no need to specify the flavor for read since pandas just needs to run the provided query through the given DB connection or engine, it doesn't need to modify it - therefore read will work so long as you provide a valid SQL for your DB and either a DBAPI compliant connection or an SQLAlchemy engine for that DB.\n\nI think however we need to distinguish between 2 distinct user stories (use cases):\n1. \"I want to read an arbitrary dataset from a database using an arbitrarily complex SQL query\" plus \"I want to store dataframe values in an SQL table\"\n\nThis case is served by `read_sql` and `to_sql`, which just needs to be able to save values, a user will write an appropriate SQL query to turn them back into a Dataframe if needed. There is no need for a \"flavor\" for `to_sql` because we can infer the correct column type mapping and let SQLAlchemy generate the correct SQL syntax based on the supplied engine. However we would like to have SQLite available as an option even if SQLAlchemy is not installed (this is what i meant by fallback, not that it would try to write to one database and fall back to writing to sqlite).\n1. \"I want to store the Dataframes I'm working in an SQL DB and retrieve them transparently later.\"\n\nThis is different from 1. because we have to assume a save format convention, or save additional metadata. You don't want to have to specify an SQL string when loading because the save/load layer should deal with it for you. This is akin to an ORM mapping, while 1. is dealing with raw SQL.\n\nI believe the `read_sql`and `to_sql` feature under discussion should only attempt to address use case 1. Use case 2. is a different feature and might deserve its own `read_` and `to_` functions.\n\nI think it's important to keep this difference in mind in order to have a clear understanding of what the IO functions should and should not attempt to do, and what problems they're actually trying to address.\n\nIt should also make the api simpler since, as I said above, there's no need for the user to specify SQL flavours as it can all be done automatically, and we don't need any additional machinery for defining save conventions because we assume they do not apply for this specific feature.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20749206",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20749206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20749206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ5MjA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T15:14:21Z",
    "updated_at": "2013-07-10T15:14:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur \n\nbut if sqlalchemy is the flavor, then you _dont't_ need to specify DB specific sql (which is a good thing), but you DO need to know the backend (I agree conn already has some of this info, so maybe the `flavor` can be inferred)\n\njust trying to keep api as simple as possible (but not too simple!)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20751934",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20751934",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20751934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzUxOTM0",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T15:50:45Z",
    "updated_at": "2013-07-10T15:56:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I think you slightly misunderstood how sqlalchemy works. It provides you with a variety of abstractions in order to _generate_ DB specific SQL (e.g. you create a Table object, SQLAlchemy figures out the correct CREATE TABLE syntax for the DB you're using). It also deals with things like transactions and connection pools for you. However if you tell the engine to execute a plain SQL string, it will _not_ attempt to \"translate\" that string - how could it seeing as there is in practice no \"strictly correct\" SQL syntax and feature set for it to translate from in the first place. \nWhat you can do is use their expression api to write queries in python which _will_ be translated to the correct SQL flavour.\n\nSo if you are supply raw sql, you do need to know the DB you are using and to write SQL specific for that DB. SQLAlchemy also knows the db you're using, since you have to specify it when you create the engine with the connection URI, and it deals with all the communication business for you. The main strength of using SQLAlchemy in this case is not for reading using a provided SQL string (where it just provides a light abstraction from DBAPI) but for writing to the DB, because we can programatically generate an SQLAlchemy Table and let it generate the correct SQL based on the db you provided it through `engine`. All the information needed for this to happen is contained in the engine, so no `flavour` is required.\n\nThe only condition is see is if you have `flavour`= {'sqlite', 'sqlalchemy'}, rather than having two functions `to_sqlite`and `to_sqlalchemy` (or some other name). \nHowever:\n1. its easy to detect if sqlalchemy support is present through a try import... If it's not present you can't even try to use it because you can't supply an sqlalchemy `engine`. Setting the flag just raises an error, which you could have done simply during the try import...\n2. If you set sqlite the function would accept a DBAPI connection and work with Sqlite featureset only, while setting sqlalchemy would accept an sqlalchemy engine. So the flavour is already implied by the arguments.\n3. That said, I personally don't like the idea of a single `to_sql` function that could have very different output depending on whether it was using sqlalchemy (with advanced type mapping) vs basic built in mapping. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20752538",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20752538",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20752538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzUyNTM4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T15:58:32Z",
    "updated_at": "2013-07-10T15:58:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur \n\na user just wants to `to_sql`, (in reality I don't even want to specify the connection!), \n\nthat's why flavor is useful (obviously would also have to pass host/user/pw) and with `sqlite3` maybe as the default this would just work\n\nwhat you are talking is more advanced for sure, but a user shouldn't have to think too hard about this\n\nso I am actually in favor of not _requiring_ `conn` (of course if its there, then use it), and alternately specify `user/host/pw` etc....\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20752983",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4163#issuecomment-20752983",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4163",
    "id": 20752983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzUyOTgz",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T16:04:39Z",
    "updated_at": "2013-07-10T16:04:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur What is \"engine\" in this context?\n\nI think it probably makes sense to copy the sqlalchemy syntax/arguments for passing in a raw_query.\n\nI also think we should keep around at least the sqlite flavour (as for one thing we can use this to test against some of the SQLAlchemy functionality), and this should be an argument in to_sql/read_sql (probably the default) if engine/flavor is reserved (has some other meaning in sqlachemy) should think of some other argument name.\n\nAgree with @jreback  that as much as possible should just work<sup>TM</sup>, perhaps default connection could also go in config...\n"
  }
]
