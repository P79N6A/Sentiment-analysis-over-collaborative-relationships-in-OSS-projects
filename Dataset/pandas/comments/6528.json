[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36520734",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-36520734",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 36520734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTIwNzM0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-03T15:30:08Z",
    "updated_at": "2014-03-03T15:30:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "this could be a bug, but you boolean comparison of `True == np.nan` is very odd in the first place\nshould the result be `np.nan` because its missing, `False` because `True` is equivalent of `np.nan`?\n\nSee the long and compliacted tests here:\nhttps://github.com/pydata/pandas/blob/master/pandas/tests/test_series.py#L3142\n\nif you see a bug, pls submit a PR\n\nwill mark it as a bug, but come back to us with your thoughts\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36521623",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-36521623",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 36521623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTIxNjIz",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-03T15:38:13Z",
    "updated_at": "2014-03-03T15:40:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback there are 3 issues above:\n1. `a | b` is not equal to `b | a`; \n2. `b.astype( bool )` converts `NaN` values to `True`; this is worst of 3 possible values, namely `NaN`, `False`, `True`; and also not consistent with [3] below\n3. `b == True` is not consistent with [2] in above;\n\nthis is really bad; because outcome of `|` should not depend on order; especially when `NaN` values are implicitly generated:\n\n```\n>>> ts = pd.Series( [True, False] )\n>>> ts | ts.shift( 1 )\n0    True\n1    True\ndtype: bool\n>>> ts.shift( 1 ) | ts\n0    False\n1     True\ndtype: bool\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36522024",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-36522024",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 36522024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTIyMDI0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-03T15:41:52Z",
    "updated_at": "2014-03-03T15:41:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri ok.....pls make a PR to fix! Keep in mind their may be some reasons buried for this; e.g. put in tests for the 'correct' behavior and see what breaks.\n\n1) symmetry, I don't think it tested\n2) This is filling behavior, I am not really sure what to do here; the `astype` actually should fail IMHO. it is really unclear what to do with `np.nan`, you normally `b.fillna(False).astype(bool)`.\n3) test as well\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36523438",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-36523438",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 36523438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTIzNDM4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-03T15:53:38Z",
    "updated_at": "2014-03-03T15:53:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd pls chime in here when you can....IIRC you and I discussed these types of things at length\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36538536",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-36538536",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 36538536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTM4NTM2",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-03T18:04:03Z",
    "updated_at": "2014-03-03T18:04:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "some discussion was here: #4953.\n\nA lot of this is as we're fighting \"strange\" truthiness for numpy's and python's (!) nan, so things like astype we can't/shouldn't fix... kinda a \"gotcha\".\n\nIMO asymmetry is a bug but **only** because we're forcing a boolean return value (the reason this happens is cos in numpy and in general `a|b` is not symmetric). Now I think about it, I do remember this coming up...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57090113",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-57090113",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 57090113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MDkwMTEz",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-28T16:08:12Z",
    "updated_at": "2014-09-28T16:08:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "My 2c: I would separate this out to two issues:\n\nIssue 1: Any boolean operations should behave the same as if `.astype(bool)` were first invoked on the structure(s). So, for example, `a | b` should return the same as `a.astype(bool) | b.astype(bool)`, and `b == True` should return the same as `b.astype(bool) == True`. If this is the case, this should address the commutativity problem (as I'm assuming the boolean operations on boolean structures are commutative).\n\nIssue 2: Should `.astype(bool)` convert a `NaN` to `True` or `False`? Currently it converts it to `True`, which is consistent with the fact that `bool(NaN)` is `True`, as defined by numpy. Personally, I would have defined `bool(NaN)` as `False`, and this may be a situation where we want the Pandas behavior (of `.astype(bool)`) to differ from numpy's. But this should be considered an API change, not a bug fix. I also just raised this issue on https://groups.google.com/forum/#!topic/pydata/U7gQyI_gLMc.\n\nAt any rate, I view these as two separate (but obviously related) issues, which I think are being slightly conflated in this issue (and #8151). I would suggest first addressing Issue 1, which seems to me clearly to be a bug -- keeping the existing behavior of treating `NaN` as `True` (so in the first example above, `a | b`, `b | a`, and `b == True` would all return `Series([True])`); and then separately, after further discussion and reflection, consider changing the behavior of `.astype(bool)` (and related boolean operations) to convert `NaN` to `False`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57095772",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-57095772",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 57095772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MDk1Nzcy",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-28T18:54:53Z",
    "updated_at": "2014-09-28T18:54:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p \n\n> Any boolean operations should behave the same as if `.astype(bool)` were first invoked on the structure(s)\n\nas long as the logical operations are bound to return `dtype='bool'`. that is exactly what i am testing [here](https://github.com/pydata/pandas/pull/8151/files#diff-933180870dd152b775952fc54a99dba7R2386)\n\n> and `b == True` should return the same as `b.astype(bool) == True`\n\nthat would not be achievable. for example, `2 != True` and `2 != False`, so you cannot type cast a series unless it is only zeros and ones.\n\n> this may be a situation where we want the Pandas behavior (of `.astype(bool)`) to differ from numpy's\n\nstrongly discourage that, because:\n\n-1- it is not only numpy, but as you also mentioned, and much more importantly that is how _python_ works:\n\n```\n>>> np.where([np.nan], True, False)\narray([ True], dtype=bool)\n>>> True if np.nan else False\nTrue\n```\n\nso, it can easily break things as simple as `ts.map(bool) == ts.astype(bool)`.\n\n-2- the gain of breaking that consistency, if any, is less than minimal. because, if a user wants to deviate from python's convention that is more than easy: `ts.fillna(False)`, or `ts.fillna(0)`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/57101690",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-57101690",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 57101690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTAxNjkw",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-28T21:54:12Z",
    "updated_at": "2014-09-28T21:54:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "D'oh! @behzadnouri, of course you're right about `==` and `!=`. I guess I should have said that any logical operations that expect booleans should produce the same results as for `.astype(bool)`.\n\nRe: `.astype(bool)` converting `NaN` to `True`, fair enough. And you're right, of course, that what I'm suggesting is simply the same as `.fillna(False).astype(bool)`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349551942",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6528#issuecomment-349551942",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6528",
    "id": 349551942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTU1MTk0Mg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T06:53:55Z",
    "updated_at": "2017-12-06T06:53:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tried to find the most current open issue on this - the others are closed or merged, but this is open even though being milestoned since 0.14?\r\n\r\nI asked a question about this on stackexchange, and someone took the time to identify the apparent source of the issue (as well as a work-around): https://stackoverflow.com/a/47664356/2965879\r\n\r\nThe main issue seems that in pandas.core.ops.wrapper (https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops.py#L928), after aligning the series, only `other` is filled (transforming NaN to False), but `self` isn't, which introduces this symmetry break."
  }
]
