[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/142882214",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-142882214",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 142882214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjg4MjIxNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T10:16:11Z",
    "updated_at": "2015-09-24T10:16:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "This would involve attaching additional meta-data to the `Index` object, specifically a matching list / dict of value -> description. But this would then raise quite a few issues. Maybe you can provide some pseudo examples of what you think about the following.\n- what would the `Index` constructor look-like. What would be a  natural way to specify these? e.g.\n  `i = Index([1,2,3],desc=[....])`?\n- When/how/what would you repr these? E.g. you are showing basically `df.info()`. We already have a pretty complicated repr, e.g. (and this is not even a mult-index)\n\n```\nIn [3]: df = DataFrame([[1,2]],index=Index([1],name='foo'),columns=Index(['A','B'],name='bar'))\n\nIn [4]: df\nOut[4]: \nbar  A  B\nfoo      \n1    1  2\n```\n- aside from 'desc' or 'labels' of the data, how is this useful? These are certainly not applicable to say 'quantities/units' (which is much more of a dtype specification.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143060715",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-143060715",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 143060715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MzA2MDcxNQ==",
    "user": {
      "login": "cdagnino",
      "id": 3705969,
      "node_id": "MDQ6VXNlcjM3MDU5Njk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3705969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdagnino",
      "html_url": "https://github.com/cdagnino",
      "followers_url": "https://api.github.com/users/cdagnino/followers",
      "following_url": "https://api.github.com/users/cdagnino/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdagnino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdagnino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdagnino/subscriptions",
      "organizations_url": "https://api.github.com/users/cdagnino/orgs",
      "repos_url": "https://api.github.com/users/cdagnino/repos",
      "events_url": "https://api.github.com/users/cdagnino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdagnino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T21:54:56Z",
    "updated_at": "2015-09-24T21:56:10Z",
    "author_association": "NONE",
    "body": "I see something similar was raised in [#39](https://github.com/pydata/pandas/issues/39), which was closed in favor of the general issue of allowing metadata for a DataFrame in [#2485](https://github.com/pydata/pandas/issues/2485).\n\nLet me first be more explicit about the use case and then try to answer some of your questions.\n\nI'll take columns from different sources or create new ones. Exactly what they mean or how they were created doesn't fit into the name. In Stata I'd add a longer description to document this and a quick `describe` is good for refreshing memory. In `pandas` I'm thinking something like:\n\n``` python\ndf = pd.DataFrame({'x': [3, 1], 'y' : [8, 2], 'z' : [1.1, 2.0]})\ndf.set_variable_labels({'x': 'This is variable x', 'y': 'This is another variable'}) # No need to specify all columns\ndf.info()   # Gives the table without labels (the same info given in current pandas)\ndf.info(labels=True)   # Gives a table with the labels\ndf.variable_labels  # Gives the column dictionary\n```\n\nLike I said before, I could carry around this metadata in a separate dictionary, but I think it would be nice to have in the `DataFrame`, especially if it can persist after doing some changes.\n- I don't think it's worth it to get it into the `repr`, but rather it could go as an option in the `df.info()`\n- It looks to me that adding this to the (column) `Index` object would be a lot of work. I was hoping there could be a way of assigning it with `@property` and then just appending it to the original `df.info()`. After modifying the `DataFrame`, the `variable_labels` dictionary could have some keys (columns) that don't exist anymore, but I don't think that would be a problem.\n\nI'm guessing the big issue here is persistence, but at this time I don't have enough knowledge of `Pandas` internals to say anything more helpful.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/150961250",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-150961250",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 150961250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDk2MTI1MA==",
    "user": {
      "login": "mbirdi",
      "id": 7291409,
      "node_id": "MDQ6VXNlcjcyOTE0MDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7291409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbirdi",
      "html_url": "https://github.com/mbirdi",
      "followers_url": "https://api.github.com/users/mbirdi/followers",
      "following_url": "https://api.github.com/users/mbirdi/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbirdi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbirdi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbirdi/subscriptions",
      "organizations_url": "https://api.github.com/users/mbirdi/orgs",
      "repos_url": "https://api.github.com/users/mbirdi/repos",
      "events_url": "https://api.github.com/users/mbirdi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbirdi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-25T19:31:15Z",
    "updated_at": "2015-10-25T19:31:15Z",
    "author_association": "NONE",
    "body": "Having column names have an additional property of having a label name seems like an interesting feature from Stata.   But as a pandas user I don't think I would use it.  I like to keep my column names simple.  The column names in a DataFrame are also Series objects, and having just one name for them works well for me, and how I use pandas.\n\nFor example, I would take the variable names in the first example: make, price, and mpg, and would change them to make_model, price_dollars, mileage_mpg.  \n\nI do lose track of my column names from time to time.  But when that happens I just create a col_names variable with the DataFrame.columns method.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/296534038",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-296534038",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 296534038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjUzNDAzOA==",
    "user": {
      "login": "msampathkumar",
      "id": 6114993,
      "node_id": "MDQ6VXNlcjYxMTQ5OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6114993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msampathkumar",
      "html_url": "https://github.com/msampathkumar",
      "followers_url": "https://api.github.com/users/msampathkumar/followers",
      "following_url": "https://api.github.com/users/msampathkumar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msampathkumar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msampathkumar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msampathkumar/subscriptions",
      "organizations_url": "https://api.github.com/users/msampathkumar/orgs",
      "repos_url": "https://api.github.com/users/msampathkumar/repos",
      "events_url": "https://api.github.com/users/msampathkumar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msampathkumar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-24T06:15:17Z",
    "updated_at": "2017-04-24T06:15:17Z",
    "author_association": "NONE",
    "body": "Hei, I like this idea :)\r\n\r\nSo I created a small code snippet. I'm new to open source, so please share some suggestions.\r\n\r\n```\r\nfrom pandas import DataFrame\r\n\r\nclass myDataFrame(DataFrame):\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.columns_labels = {}\r\n\r\n    def columns_description(self):\r\n        print('\\t'.join(['Column', 'Type', 'Description']))\r\n        for each in zip(df.dtypes.index, df.dtypes):\r\n            each = list(map(str, each)) + [self.columns_labels.get(each[0], '')]\r\n            print('\\t'.join(each))\r\n            \r\n    def update_columns_description(self, input_dict):\r\n        for key in input_dict:\r\n            if key in df.columns:\r\n                self.columns_labels[key] = input_dict[key]\r\n\r\ndf = myDataFrame({'x': [3, 1], 'y' : [8, 2], 'z' : [1.1, 2.0]})\r\ndf.columns_description()\r\ndf.update_columns_description({'x': \"I'm not so sure\", 'y':'Hi there!', 'z': 'want to grab some coffe with me :)'})\r\ndf.columns_description()\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357466071",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-357466071",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 357466071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQ2NjA3MQ==",
    "user": {
      "login": "donnaaboise",
      "id": 1406529,
      "node_id": "MDQ6VXNlcjE0MDY1Mjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1406529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donnaaboise",
      "html_url": "https://github.com/donnaaboise",
      "followers_url": "https://api.github.com/users/donnaaboise/followers",
      "following_url": "https://api.github.com/users/donnaaboise/following{/other_user}",
      "gists_url": "https://api.github.com/users/donnaaboise/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donnaaboise/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donnaaboise/subscriptions",
      "organizations_url": "https://api.github.com/users/donnaaboise/orgs",
      "repos_url": "https://api.github.com/users/donnaaboise/repos",
      "events_url": "https://api.github.com/users/donnaaboise/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donnaaboise/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T20:46:51Z",
    "updated_at": "2018-01-13T20:46:51Z",
    "author_association": "NONE",
    "body": "(I came across this issue from a comment on my Stack Exchange post on [this](https://stackoverflow.com/questions/48243818/display-column-name-different-from-dictionary-key-name-in-pandas) issue.)\r\n\r\nI am new to Pandas, and am using it for the first time in a Juypter Notebook.    I love the way Pandas displays table data, and developers have clearly into making the display nice (different formatting styles, shaded table rows, etc).   So it seemed obvious to me that there must be a way to have column labels (for display only) that are different from the dictionary keys.    I was surprised to find that this feature didn't exist.    \r\n\r\nHere is why I think it would be a really nice feature. \r\n\r\n* The ability to manipulate data using short (single variable?) dictionary keys makes mathematical expressions much cleaner.   I would much rather use `df[\"e\"]` in a mathematical expression than \r\n`df[\"Efficiency (%)\"]`. \r\n\r\n* On the other hand, \"e\" makes for a bad column header for tables used for presentation purposes, or even just to remember what each column is. \r\n\r\nThis issue seems especially important in Jupyter Notebooks, which are designed for presentation purposes as well as actual computing.   \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357469622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-357469622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 357469622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQ2OTYyMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T21:45:40Z",
    "updated_at": "2018-01-13T21:45:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@donnaaboise as you can see from the comments above, I don't think we would object to having this, but practically its quite a lot of work and lots of unanswered questions. \r\n\r\n* how would the 'labels' be specified (maybe thru an alternative index)\r\n* these would naturally have to propagate, this would lead to quite a lot of complexity, just having ``name`` propagate properly is hard\r\n* how would conflicts between the index and the 'label' be handled? what if they had the some overlapping values? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357471927",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-357471927",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 357471927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQ3MTkyNw==",
    "user": {
      "login": "donnaaboise",
      "id": 1406529,
      "node_id": "MDQ6VXNlcjE0MDY1Mjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1406529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donnaaboise",
      "html_url": "https://github.com/donnaaboise",
      "followers_url": "https://api.github.com/users/donnaaboise/followers",
      "following_url": "https://api.github.com/users/donnaaboise/following{/other_user}",
      "gists_url": "https://api.github.com/users/donnaaboise/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donnaaboise/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donnaaboise/subscriptions",
      "organizations_url": "https://api.github.com/users/donnaaboise/orgs",
      "repos_url": "https://api.github.com/users/donnaaboise/repos",
      "events_url": "https://api.github.com/users/donnaaboise/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donnaaboise/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T22:23:30Z",
    "updated_at": "2018-01-13T22:23:30Z",
    "author_association": "NONE",
    "body": "Perhaps this additional meta data doesn't need to be stored at all, but only recognized in a formatter.  For example, it is nice that columns can be formatted independently, i.e. \r\n\r\n    df.style.format({'e' : '{:8.2f}%', 't' : '{:12.3f}'})\r\n\r\nCould this style also accept header labels?    Something like : \r\n\r\n    df.style.format(formatstr={'e' : '{:8.2f}%', 't' : '{:12.3f}'}, labels={'e' : 'Efficiency (%)', 't' : 'Time'})\r\n\r\nIf one simply types \r\n\r\n    df\r\n\r\nat a command prompt, the variable names are printed instead (no labels).   Only when a style is specified are labels used instead (if desired).  \r\n\r\n "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357472625",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-357472625",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 357472625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQ3MjYyNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T22:34:24Z",
    "updated_at": "2018-01-13T22:34:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can already just rename things (and then chain with ``.style``)\r\n\r\n```\r\nIn [5]: df\r\nOut[5]: \r\n   A  B\r\n0  1  4\r\n1  2  5\r\n2  3  6\r\n\r\nIn [6]: df.rename(columns={'A':'A long version', 'B': 'B long version'})\r\nOut[6]: \r\n   A long version  B long version\r\n0               1               4\r\n1               2               5\r\n2               3               6\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357474943",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11179#issuecomment-357474943",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11179",
    "id": 357474943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQ3NDk0Mw==",
    "user": {
      "login": "donnaaboise",
      "id": 1406529,
      "node_id": "MDQ6VXNlcjE0MDY1Mjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1406529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donnaaboise",
      "html_url": "https://github.com/donnaaboise",
      "followers_url": "https://api.github.com/users/donnaaboise/followers",
      "following_url": "https://api.github.com/users/donnaaboise/following{/other_user}",
      "gists_url": "https://api.github.com/users/donnaaboise/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donnaaboise/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donnaaboise/subscriptions",
      "organizations_url": "https://api.github.com/users/donnaaboise/orgs",
      "repos_url": "https://api.github.com/users/donnaaboise/repos",
      "events_url": "https://api.github.com/users/donnaaboise/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donnaaboise/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T23:12:18Z",
    "updated_at": "2018-01-13T23:12:18Z",
    "author_association": "NONE",
    "body": "yes  - this seems like a very good approximation.    The only minor drawback I can see is that the format dictionary passed to chained `style.format` now has to use the long names to format columns.  But these can be accessed through a renaming dictionary.   Something like : \r\n\r\n    di = {'e' : 'Efficiency', 't' : 'Time'}\r\n    fstr = {di[\"e\"] : '{:8.2f}%', di[\"t\"] : '{:12.3f}'}\r\n    df.rename(columns=di).style.format(fstr) \r\n"
  }
]
