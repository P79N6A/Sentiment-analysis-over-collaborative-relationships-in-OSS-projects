[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/268498340",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14940#issuecomment-268498340",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14940",
    "id": 268498340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODQ5ODM0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-21T11:17:30Z",
    "updated_at": "2016-12-21T11:18:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep, this looks buggy. need to mask the NaT's before and replace after, use ``self.hasnan`` (this is all on ``DatetimeIndex``), though ``TimedeltaIndex`` and ``PeriodIndex`` need checking as well.\r\n\r\nFurther looks like ``Timestamp`` doesn't implement these (should return a NaT), so need to modify ``NaTType``.\r\n\r\n```\r\nIn [6]: d['dtime'][1].round('s')\r\nAttributeError: 'NaTType' object has no attribute 'round'\r\n\r\nIn [7]: d['dtime'][1].round('5s')\r\nAttributeError: 'NaTType' object has no attribute 'round'\r\n```\r\n\r\nprob also buggy for ``.floor`` and ``.ceil``\r\n\r\nPR's welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272437167",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14940#issuecomment-272437167",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14940",
    "id": 272437167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQzNzE2Nw==",
    "user": {
      "login": "discort",
      "id": 4944021,
      "node_id": "MDQ6VXNlcjQ5NDQwMjE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4944021?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/discort",
      "html_url": "https://github.com/discort",
      "followers_url": "https://api.github.com/users/discort/followers",
      "following_url": "https://api.github.com/users/discort/following{/other_user}",
      "gists_url": "https://api.github.com/users/discort/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/discort/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/discort/subscriptions",
      "organizations_url": "https://api.github.com/users/discort/orgs",
      "repos_url": "https://api.github.com/users/discort/repos",
      "events_url": "https://api.github.com/users/discort/events{/privacy}",
      "received_events_url": "https://api.github.com/users/discort/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T12:56:42Z",
    "updated_at": "2017-01-13T13:36:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was passing the example code though debugger and investigated the next. The `_round` method\r\n\r\n```\r\n    def _round(self, freq, rounder):\r\n\r\n        from pandas.tseries.frequencies import to_offset\r\n        unit = to_offset(freq).nanos\r\n\r\n        # round the local times\r\n        values = _ensure_datetimelike_to_i8(self)\r\n\r\n        result = (unit * rounder(values / float(unit))).astype('i8')\r\n        attribs = self._get_attributes_dict()\r\n        if 'freq' in attribs:\r\n            attribs['freq'] = None\r\n        if 'tz' in attribs:\r\n            attribs['tz'] = None\r\n        return self._ensure_localized(\r\n            self._shallow_copy(result, **attribs))\r\n\r\n    @Appender(_round_doc % \"round\")\r\n    def round(self, freq, *args, **kwargs):\r\n        return self._round(freq, np.round)\r\n ```\r\n\r\nLets consider the first example `d['dtime'].dt.round('s')`\r\n\r\n```\r\n>>> self\r\nDatetimeIndex(['2010-01-01 23:14:12.000599', 'NaT'], dtype='datetime64[ns]', name='dtime', freq=None)\r\n```\r\n \r\n `unit` variable equals `1000000000` and `result=array([ 1262387652000000000, -9223372036854775808])`. We are interested in the second item 'NaT'.\r\n At the second, `d['dtime'].dt.round('5s')` unit variable equals `5000000000` and `result=array([ 1262387650000000000, -9223372035000000512])`.\r\n We can see that in both examples values which before this were `Nat` are different.\r\n\r\n Deeper investigation gave next results\r\n 1) 1st example\r\n ```\r\n >>> values[1] / unit\r\n-9223372036.8547764\r\n>>> rounder(values[1] / unit)\r\n-9223372037.0\r\n```\r\n2) 2nd example\r\n```\r\n>>> values[1] / unit\r\n-1844674407.3709552\r\n>>> rounder(values[1] / unit)\r\n-1844674407.0\r\n```\r\n\r\nIn the second case, the value isn't rounding which is correct cause we use math round. But I think we definitely use much smarter round, because we are using the large numbers and could neglect by math round.\r\nI tried to round using `np.floor` and got the needed result `array([ 1262387645000000000, -9223372036854775808])`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/272451546",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14940#issuecomment-272451546",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14940",
    "id": 272451546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQ1MTU0Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T14:12:09Z",
    "updated_at": "2017-01-13T14:12:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@discort you don't need to worry about the calculation on the NaT at all. simply use ``self._maybe_mask_results(result)`` which will make the location of where the NaT were back into NaT's"
  }
]
