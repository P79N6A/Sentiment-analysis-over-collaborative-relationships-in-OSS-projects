[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/325111933",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17344#issuecomment-325111933",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17344",
    "id": 325111933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTExMTkzMw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-26T10:21:53Z",
    "updated_at": "2017-08-26T10:21:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Presumably this is because your Index is un-sortable, so the hash union defines the resulting order. \r\n Not sure there's anything that can be done?\r\n\r\n```python\r\nIn [16]: idx = dfs_sq[0].index.union(dfs_sq[1].index)\r\n\r\nIn [17]: idx\r\nOut[17]: Index([0, 'sess', 1], dtype='object')\r\n\r\nIn [18]: idx.sort_values()\r\nTypeError: '>' not supported between instances of 'int' and 'str'\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/325112449",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17344#issuecomment-325112449",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17344",
    "id": 325112449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTExMjQ0OQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-26T10:27:43Z",
    "updated_at": "2017-08-26T10:27:51Z",
    "author_association": "MEMBER",
    "body": "> Not sure there's anything that can be done?\r\n\r\nOK, I'm replying without having looked at the code, but: if two indexes are unsortable, then I expect the resulting union to respect their original order (with e.g. priority given to the first index if orders don't coincide). Actually, I would have expected this to happen even when the two indexes, and the union too, are sortable..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/325115144",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17344#issuecomment-325115144",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17344",
    "id": 325115144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTExNTE0NA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-26T11:00:51Z",
    "updated_at": "2017-08-26T11:00:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm also talking without having looked at much code ... but I believe we're currently doing a hash-based unique on the entire set of values, that's what tosses out the order.  I suppose we could do something more iterative like you're suggesting that would preserve it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/325563674",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17344#issuecomment-325563674",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17344",
    "id": 325563674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTU2MzY3NA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-29T06:02:06Z",
    "updated_at": "2017-08-29T06:02:06Z",
    "author_association": "MEMBER",
    "body": "> I suppose we could do something more iterative like you're suggesting that would preserve it.\r\n\r\nFor completeness: ``pd.concat`` does not rely on ``Index.union``, but rather on ``fast_unique_multiple_list`` in ``lib.pyx``. Anyway, both this method and ``Index.union`` correctly preserve the original order when they cannot sort."
  }
]
