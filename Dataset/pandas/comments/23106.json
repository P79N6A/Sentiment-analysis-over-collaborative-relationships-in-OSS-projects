[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429307426",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23106#issuecomment-429307426",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23106",
    "id": 429307426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTMwNzQyNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-12T12:22:43Z",
    "updated_at": "2018-10-12T12:22:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "this add the patch, but some tests are failing\r\n```\r\n(pandas) bash-3.2$ git diff\r\ndiff --git a/pandas/core/arrays/integer.py b/pandas/core/arrays/integer.py\r\nindex 9917045f2..12b396ffd 100644\r\n--- a/pandas/core/arrays/integer.py\r\n+++ b/pandas/core/arrays/integer.py\r\n@@ -267,7 +267,13 @@ class IntegerArray(ExtensionArray, ExtensionOpsMixin):\r\n         if is_integer(item):\r\n             if self._mask[item]:\r\n                 return self.dtype.na_value\r\n-            return self._data[item]\r\n+            result = self._data[item]\r\n+\r\n+            if is_scalar(result):\r\n+                # cast to python ints\r\n+                result = int(result)\r\n+            return result\r\n+\r\n         return type(self)(self._data[item], self._mask[item])\r\n \r\n     def _coerce_to_ndarray(self):\r\ndiff --git a/pandas/tests/extension/test_integer.py b/pandas/tests/extension/test_integer.py\r\nindex 89c36bbe7..4bab4bd3f 100644\r\n--- a/pandas/tests/extension/test_integer.py\r\n+++ b/pandas/tests/extension/test_integer.py\r\n@@ -177,7 +177,14 @@ class TestReshaping(base.BaseReshapingTests):\r\n \r\n \r\n class TestGetitem(base.BaseGetitemTests):\r\n-    pass\r\n+\r\n+    def test_getitem_scalar(self, data):\r\n+        # we guarantee that we produce python ints\r\n+        result = data[0]\r\n+        assert isinstance(result, int)\r\n+\r\n+        result = pd.Series(data)[0]\r\n+        assert isinstance(result, int)\r\n \r\n \r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429763828",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23106#issuecomment-429763828",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23106",
    "id": 429763828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTc2MzgyOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T09:00:39Z",
    "updated_at": "2018-10-15T09:00:39Z",
    "author_association": "MEMBER",
    "body": "@jreback that changes the output of accessing a single item to python int instead of numpy int. I was actually thinking we should ensure the reductions return a numpy scalar instead of python int to be consistent with accessing items. \r\nBut of course, the other way around as in your patch is also a possibility. Although then the `IntegerDtype.type` would not be correct any more.\r\n\r\nAnd you would still have the inconsistency about return type of `int` vs `np.float64` depending on the reduction type."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430638148",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23106#issuecomment-430638148",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23106",
    "id": 430638148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDYzODE0OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T13:55:24Z",
    "updated_at": "2018-10-17T13:55:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm facing a similar issue with `SparseArray.fill_value`. With something like\r\n\r\n```python\r\n>>> arr = SparseArray([0, 1], fill_value=0)\r\n>>> isinstance(arr[0], arr.dtype.type)\r\n```\r\n\r\nis false, since it's a python int, and the scalar `.dtype.type` is `np.int64` (so that `arr[1]` is correctly an np.int64).\r\n\r\nHaving these scalar types be numpy integers is more consistent with the way things are currently, but do we want to be bound to that going forward?\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430677786",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23106#issuecomment-430677786",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23106",
    "id": 430677786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY3Nzc4Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:35:12Z",
    "updated_at": "2018-10-17T15:35:12Z",
    "author_association": "MEMBER",
    "body": "So that indeed gives this inconsistency:\r\n\r\n```\r\nIn [2]: arr = pd.SparseArray([0, 1], fill_value=0)\r\n\r\nIn [4]: type(arr[0])\r\nOut[4]: int\r\n\r\nIn [5]: type(arr[1])\r\nOut[5]: numpy.int64\r\n```\r\n\r\nwhich is bad, I would say. \r\nWe could enforce that the fill_value should be of the scalar type of the array? (or convert in the above case: convert the `0` to `np.int64(0)`) Or would this have many consequences in other places where the `fill_value` is used?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/430682282",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23106#issuecomment-430682282",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23106",
    "id": 430682282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY4MjI4Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T15:46:58Z",
    "updated_at": "2018-10-17T15:46:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We could enforce that the fill_value should be of the scalar type of the array? \r\n\r\nI have a WIP doing that (well, making sure that the dtype matches), and this came up.\r\n\r\nThere's some issues with string dtypes, but overall I think it'll be fine to require that the scalar matches."
  }
]
