[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/286193066",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15669#issuecomment-286193066",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15669",
    "id": 286193066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjE5MzA2Ng==",
    "user": {
      "login": "BrenBarn",
      "id": 1439047,
      "node_id": "MDQ6VXNlcjE0MzkwNDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrenBarn",
      "html_url": "https://github.com/BrenBarn",
      "followers_url": "https://api.github.com/users/BrenBarn/followers",
      "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions",
      "organizations_url": "https://api.github.com/users/BrenBarn/orgs",
      "repos_url": "https://api.github.com/users/BrenBarn/repos",
      "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrenBarn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-13T18:05:57Z",
    "updated_at": "2017-03-13T18:05:57Z",
    "author_association": "NONE",
    "body": "The most pressing issue for me is that, as far as I can tell, there is no way at all to write a \"NaN\" string value to a CSV as such.  Obtaining such a value always requires fiddling with the NA settings when *readng* the file; there's nothing you can do when *writing* it to avoid the issue.  I don't think this is a good situation.\r\n\r\nThis is maybe related to a more general problem that the default settings of `read_csv` and `to_csv` are not aligned, so that doing a default `to_csv()` followed by a default `read_csv()` of the file you just wrote doesn't give you the same data.  (In particular, it will add extra columns for the index, because `to_csv` writes it but `read_csv` doesn't read it as an index.)\r\n\r\nOne possibility might be to have a CSV \"dialect\" called \"pandas\" or something.  This would just fix the various CSV options (including things like `index` that are not really part of CSV per se) in such a way that `to_csv` and `read_csv` become a lossless round-trippable pair if you use this dialect."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/347781969",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15669#issuecomment-347781969",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15669",
    "id": 347781969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Nzc4MTk2OQ==",
    "user": {
      "login": "HHest",
      "id": 3169669,
      "node_id": "MDQ6VXNlcjMxNjk2Njk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3169669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HHest",
      "html_url": "https://github.com/HHest",
      "followers_url": "https://api.github.com/users/HHest/followers",
      "following_url": "https://api.github.com/users/HHest/following{/other_user}",
      "gists_url": "https://api.github.com/users/HHest/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HHest/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HHest/subscriptions",
      "organizations_url": "https://api.github.com/users/HHest/orgs",
      "repos_url": "https://api.github.com/users/HHest/repos",
      "events_url": "https://api.github.com/users/HHest/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HHest/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T08:02:44Z",
    "updated_at": "2017-11-29T08:59:23Z",
    "author_association": "NONE",
    "body": "Example:\r\n```\r\npd.read_csv(StringIO('a,b\\nNA,NA\\n0123,0123'), dtype={'a': str})\r\nOut[1]: \r\n      a      b\r\n0   NaN    NaN\r\n1  0123  123.0\r\n```\r\n\r\nWould love to see column 'a' showing \"NA, 0123\" as strings.\r\n\r\nThis is a very typical problem for us, because we have so many \"exchange code\" = \"NA\". Currently we need to use keep_default_na=False, and roll our own na_values, which is cumbersome and error prone. \r\n\r\nFor my situation, I find it counterproductive that a column specified as string still is vetted for NaN. On the other hand, I can imagine some users wanting this vetting for \"NaN\" to happen even for strings because they want to encode \"N/A\" responses. Perhaps the NaN vetting process could be controlled per column? Perhaps by allowing na_filter to take a dictionary of {col_name: boolean}."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/347822563",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15669#issuecomment-347822563",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15669",
    "id": 347822563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzgyMjU2Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T10:46:28Z",
    "updated_at": "2017-11-29T10:46:28Z",
    "author_association": "MEMBER",
    "body": "> Would love to see column 'a' showing \"NA, 0123\" as strings.\r\n\r\nYes, but I don't think that is something we can change. The idea I proposed above is only to change `\"NA\"` (so quoted) to be preserved as string.\r\n\r\nAlthough the problem with that idea is that currently I don't think there is a way to write data like that with `to_csv`\r\n\r\n> Perhaps the NaN vetting process could be controlled per column? Perhaps by allowing na_filter to take a dictionary of {col_name: boolean}.\r\n\r\nThat sounds like a good idea from a user point of view (don't know how difficult it would be implementation wise).\r\n\r\ncc @gfyoung \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/347869765",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15669#issuecomment-347869765",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15669",
    "id": 347869765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Nzg2OTc2NQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T14:05:19Z",
    "updated_at": "2017-11-29T14:05:58Z",
    "author_association": "MEMBER",
    "body": "`na_values` can already accept a dictionary per the 0.21.0 docs.  I suppose we could extend that to also encapsulate `na_filter`."
  }
]
