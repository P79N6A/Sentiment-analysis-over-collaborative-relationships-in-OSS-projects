[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/178594783",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12203#issuecomment-178594783",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12203",
    "id": 178594783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3ODU5NDc4Mw==",
    "user": {
      "login": "dacoex",
      "id": 8660305,
      "node_id": "MDQ6VXNlcjg2NjAzMDU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8660305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dacoex",
      "html_url": "https://github.com/dacoex",
      "followers_url": "https://api.github.com/users/dacoex/followers",
      "following_url": "https://api.github.com/users/dacoex/following{/other_user}",
      "gists_url": "https://api.github.com/users/dacoex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dacoex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dacoex/subscriptions",
      "organizations_url": "https://api.github.com/users/dacoex/orgs",
      "repos_url": "https://api.github.com/users/dacoex/repos",
      "events_url": "https://api.github.com/users/dacoex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dacoex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-02T14:19:26Z",
    "updated_at": "2016-02-02T14:21:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's a longer but self-contained example based on [pandas read_csv and filter columns with usecols](http://stackoverflow.com/questions/15017072/pandas-read-csv-and-filter-columns-with-usecols)\n\n```\n\nimport pandas as pd\n#from cSt import StringIO\n#from cStringIO import StringIO\n\nimport io\n\n# works\ncsv = r\"\"\"dummy,date,loc,x\nbar,20090101,a,1\nbar,20090102,a,3\nbar,20090103,a,5\nbar,20090101,b,1\nbar,20090102,b,3\nbar,20090103,b,5\"\"\"\n\ndf = pd.read_csv(io.StringIO(csv),\n        header=0,\n        sep=\",\",\n        index_col=[\"date\", \"loc\"], \n        usecols=[\"date\", \"loc\", \"x\"],\n        parse_dates=[\"date\"])\ndf2 = pd.read_csv(io.StringIO(csv),\n        header=None,\n        sep=\",\",\n        usecols=[0, 2, 3])\n#        parse_dates=0)\n\n# throws value error\n# ValueError: Expected 4 fields in line 5, saw 6\n\ncsv = r\"\"\"dummy,date,loc,x\nbar,20090101,a,1\nbar,20090102,a,3\nbar,20090103,a,5\nbar,20090101,b,1,2,2\nbar,20090102,b,3\nbar,20090103,b,5\"\"\"\n\ndf2 = pd.read_csv(io.StringIO(csv),\n        header=None,\n        sep=\",\",\n        usecols=[0, 2, 3],\n         engine='python')\n#        parse_dates=0)\n\n# works\n\ncsv = r\"\"\"dummy,date,loc,x\nbar,20090101,a,1\nbar,20090102,a,3\nbar,20090103,a,5\nbar,20090101,b,1,2,2\nbar,20090102,b,3\nbar,20090103,b,5\"\"\"\n\nmycols = ['col_1', 'col_2', 'col_3', 'col_4', 'col_5', 'col_6']\ndf3 = pd.read_csv(io.StringIO(csv),\n        header=None,\n        sep=\",\",\n        names=mycols,\n         engine='python')\n#        parse_dates=0)\n\n\n# works but inefficient\n\ncsv = r\"\"\"dummy,date,loc,x\nbar,20090101,a,1\nbar,20090102,a,3\nbar,20090103,a,5\nbar,20090101,b,1,2,2\nbar,20090102,b,3\nbar,20090103,b,5\"\"\"\n\nmycols = list(map(str, range(6)))\ndf4 = pd.read_csv(io.StringIO(csv),\n        header=None,\n        sep=\",\",\n        names=mycols,\n         engine='python')\n#        parse_dates=0)\n\ndf4_cut = df4.iloc[:,:4]\n\n# improved parametrised solution:\n\ncsv = r\"\"\"dummy,date,loc,x\nbar,20090101,a,1\nbar,20090102,a,3\nbar,20090103,a,5\nbar,20090101,b,1,2,2\nbar,20090102,b,3\nbar,20090103,b,5\"\"\"\n\ncol_expected = 4\ncol_saw = 6\nmycols = list(map(str, range(col_saw)))\ndf5 = pd.read_csv(io.StringIO(csv),\n        header=None,\n        sep=\",\",\n        names=mycols,\n         engine='python')\n#        parse_dates=0)\n\ndf5_cut = df5.iloc[:,:col_expected]\n```\n\nSo why does the version where the columns are selected based on `names` work and the version where use cols are given does not work?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/178693478",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12203#issuecomment-178693478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12203",
    "id": 178693478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3ODY5MzQ3OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-02T17:10:27Z",
    "updated_at": "2016-02-02T17:10:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "looks like a dupe of this: https://github.com/pydata/pandas/issues/9755\n\npls confirm\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/179259577",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12203#issuecomment-179259577",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12203",
    "id": 179259577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTI1OTU3Nw==",
    "user": {
      "login": "dacoex",
      "id": 8660305,
      "node_id": "MDQ6VXNlcjg2NjAzMDU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8660305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dacoex",
      "html_url": "https://github.com/dacoex",
      "followers_url": "https://api.github.com/users/dacoex/followers",
      "following_url": "https://api.github.com/users/dacoex/following{/other_user}",
      "gists_url": "https://api.github.com/users/dacoex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dacoex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dacoex/subscriptions",
      "organizations_url": "https://api.github.com/users/dacoex/orgs",
      "repos_url": "https://api.github.com/users/dacoex/repos",
      "events_url": "https://api.github.com/users/dacoex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dacoex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-03T14:16:05Z",
    "updated_at": "2016-02-03T14:16:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "I connot confirm. \n\nThe reason: in all examples of #9755 `names` **and** `usecols` were given.\n\nIn my case, it's data without any column names.\n\nSo I would like to be able to specify the columns to be used without using names.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/179261081",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12203#issuecomment-179261081",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12203",
    "id": 179261081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTI2MTA4MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-03T14:19:17Z",
    "updated_at": "2016-02-03T14:19:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, i'll mark it. though I suspect its a very similar soln. pull-requests welcome.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/179692624",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12203#issuecomment-179692624",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12203",
    "id": 179692624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTY5MjYyNA==",
    "user": {
      "login": "dacoex",
      "id": 8660305,
      "node_id": "MDQ6VXNlcjg2NjAzMDU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8660305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dacoex",
      "html_url": "https://github.com/dacoex",
      "followers_url": "https://api.github.com/users/dacoex/followers",
      "following_url": "https://api.github.com/users/dacoex/following{/other_user}",
      "gists_url": "https://api.github.com/users/dacoex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dacoex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dacoex/subscriptions",
      "organizations_url": "https://api.github.com/users/dacoex/orgs",
      "repos_url": "https://api.github.com/users/dacoex/repos",
      "events_url": "https://api.github.com/users/dacoex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dacoex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T07:37:21Z",
    "updated_at": "2016-02-04T07:37:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I noted that `nrows` is even more sensitive\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/179810762",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12203#issuecomment-179810762",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12203",
    "id": 179810762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTgxMDc2Mg==",
    "user": {
      "login": "dacoex",
      "id": 8660305,
      "node_id": "MDQ6VXNlcjg2NjAzMDU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8660305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dacoex",
      "html_url": "https://github.com/dacoex",
      "followers_url": "https://api.github.com/users/dacoex/followers",
      "following_url": "https://api.github.com/users/dacoex/following{/other_user}",
      "gists_url": "https://api.github.com/users/dacoex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dacoex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dacoex/subscriptions",
      "organizations_url": "https://api.github.com/users/dacoex/orgs",
      "repos_url": "https://api.github.com/users/dacoex/repos",
      "events_url": "https://api.github.com/users/dacoex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dacoex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T12:40:08Z",
    "updated_at": "2016-02-04T12:40:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "The whole problem is that `usecols` is used to derive a subset of the cleanly parsed csv file.\n\nE.g. when reading\n\n```\n\n1,2,3\n1,2,3\n1,2,3\n1,2,3\n1,2,3\n```\n\nusecols[0,1] would aloow to get a df with the col 1 and col 2.\n\nWhat I seek, any others on SO, is to limit the number of columns that are parsed initially.\n\ne.g.\n\n```\n1,2,3\n1,2,3\n1,2,3,4,5,6,7,8,9,0\n1,2,3\n1,2,3,4,5,6,7,8,9,0,,4,5,6,7,8,9,0\n```\n\nIn this case, usecols does not apply and work.\nThe different length of the 2 bad rows confuse teh reader completely.\n\nBut real world data, often from dataloggers, produces such artefacts on random basis... \n"
  }
]
