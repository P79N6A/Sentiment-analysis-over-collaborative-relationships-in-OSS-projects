[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128987351",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10769#issuecomment-128987351",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10769",
    "id": 128987351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODk4NzM1MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-08T14:35:28Z",
    "updated_at": "2015-08-08T14:35:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls show construction of the frame with code \nand pd.show_versions()\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128989118",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10769#issuecomment-128989118",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10769",
    "id": 128989118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODk4OTExOA==",
    "user": {
      "login": "drglitch",
      "id": 910285,
      "node_id": "MDQ6VXNlcjkxMDI4NQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/910285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drglitch",
      "html_url": "https://github.com/drglitch",
      "followers_url": "https://api.github.com/users/drglitch/followers",
      "following_url": "https://api.github.com/users/drglitch/following{/other_user}",
      "gists_url": "https://api.github.com/users/drglitch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drglitch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drglitch/subscriptions",
      "organizations_url": "https://api.github.com/users/drglitch/orgs",
      "repos_url": "https://api.github.com/users/drglitch/repos",
      "events_url": "https://api.github.com/users/drglitch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drglitch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-08T15:10:01Z",
    "updated_at": "2015-08-08T15:10:01Z",
    "author_association": "NONE",
    "body": "@jreback here you go - please let me know what else may be helpful.\n\n```\n>>> import pandas as pd\n>>> import numpy as np\n\n>>> pd.show_versions() # snipped\npython: 3.4.0.final.0\npython-bits: 64\nOS: Linux\nOS-release: 3.13.0-36-generic\nmachine: x86_64\nprocessor: x86_64\nbyteorder: little\n\npandas: 0.15.2\nnose: 1.3.0\nCython: 0.21.2\nnumpy: 1.9.1\nscipy: 0.14.1\ndateutil: 2.2\npytz: 2013.9\ntables: 3.1.1\n\n>>> dates = [np.datetime64(x) for x in pd.date_range('1/1/2001', periods=500000, freq='S')]\n>>> cats = list('ABCDEFGHIJ'*50000)\n>>> nums = list(range(1,500000))\n\n>>> df = pd.DataFrame([cats, dates, nums]).T\n>>> df.columns = ['colA','colB','colC']\n>>> df = df.convert_objects(convert_numeric=True)\n>>> df.dtypes\ncolA            object\ncolB    datetime64[ns]\ncolC           float64\ndtype: object\n\n>>> gr = df.groupby(('colA', 'colB',))\n>>> ag = gr.aggregate({'colC':'sum'})\n\n>>> ag.index\nMultiIndex(levels=[['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], [2001-01-01 00:00:00, 2001-01-01 00:00:01, ...]],\n           labels=[[ ...]], \n           names=['colA', 'colB']) # snipped for clarity\n>>> ag.index.levels[1]\n<class 'pandas.tseries.index.DatetimeIndex'>\n[2001-01-01 00:00:00, ..., 2001-01-06 18:53:19]\nLength: 500000, Freq: None, Timezone: None\n\n>>> path = ('A', pd.Timestamp('2001-01-01 00:00:10'),)\n>>> ag.iloc[1]\ncolC    11\nName: (A, 2001-01-01 00:00:10), dtype: float64\n\n>>> ag.loc[path] # iterates over each row, calls on cProfile > 500k\ncolC    11\nName: (A, 2001-01-01 00:00:10), dtype: float64\n\n>>> ag.loc[path] # will be fast - just 180 calls\ncolC    11\nName: (A, 2001-01-01 00:00:10), dtype: float64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128993805",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10769#issuecomment-128993805",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10769",
    "id": 128993805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODk5MzgwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-08T16:11:19Z",
    "updated_at": "2015-08-08T16:11:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "You are doing some really non-performant construction. The way you showed things are all `object` dtype. You want to avoid object whenever possible. Certainly for datetimes. \n\n```\nIn [69]: np.random.seed(1234)\n\nIn [70]: pd.set_option('max_rows',12)\n\nIn [71]: dates = pd.date_range('1/1/2001', periods=500000, freq='S')\n\nIn [72]: cats = list('ABCDEFGHIJ'*50000)\n\nIn [73]: df = pd.DataFrame({ 'A' : cats, 'B' : dates, 'C' : np.arange(500000) })\n\nIn [74]: df['C'] = df['C'].shift(-1)\n\nIn [75]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 500000 entries, 0 to 499999\nData columns (total 3 columns):\nA    500000 non-null object\nB    500000 non-null datetime64[ns]\nC    499999 non-null float64\ndtypes: datetime64[ns](1), float64(1), object(1)\nmemory usage: 15.3+ MB\n\n# if you have lots of duplicates then this will make some types of selections much faster (and reduces used memory)\nIn [77]: df['A'] = df['A'].astype('category')\n\nIn [78]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 500000 entries, 0 to 499999\nData columns (total 3 columns):\nA    500000 non-null category\nB    500000 non-null datetime64[ns]\nC    499999 non-null float64\ndtypes: category(1), datetime64[ns](1), float64(1)\nmemory usage: 11.9 MB\n\nIn [84]: agged = df.groupby(['A','B']).aggregate({'C' : 'sum' })\n\nIn [85]: agged.info()\n<class 'pandas.core.frame.DataFrame'>\nMultiIndex: 500000 entries, (A, 2001-01-01 00:00:00) to (J, 2001-01-06 18:53:19)\nData columns (total 1 columns):\nC    499999 non-null float64\ndtypes: float64(1)\nmemory usage: 10.0+ MB\n```\n\nTo do this type of indexing it constructs a hash table. So it needs to do some work on the first indexing. \nA multi-index by-definition is an `object` dtype itself, so this type of individual indexing is not efficient.\nIf you need to do this repeatedly and the initial indexing is a problem, then you are going about things the wrong way.\n\n```\nIn [86]: path = ('A', pd.Timestamp('2001-01-01 00:00:10'),)\n\nIn [87]: %timeit -n 1 -r 1 agged.loc[path]\n1 loops, best of 1: 1.85 s per loop\n\nIn [88]: %timeit -n 1 -r 1 agged.loc[path]\n1 loops, best of 1: 423 us per loop\n```\n\nThis is almost always better to slice out things first.\n\n```\nIn [92]: idx = pd.IndexSlice\nn [94]: agged.loc[idx[['A']],:]\nOut[94]: \n                            C\nA B                          \nA 2001-01-01 00:00:00       1\n  2001-01-01 00:00:10      11\n  2001-01-01 00:00:20      21\n  2001-01-01 00:00:30      31\n  2001-01-01 00:00:40      41\n  2001-01-01 00:00:50      51\n...                       ...\n  2001-01-06 18:52:20  499941\n  2001-01-06 18:52:30  499951\n  2001-01-06 18:52:40  499961\n  2001-01-06 18:52:50  499971\n  2001-01-06 18:53:00  499981\n  2001-01-06 18:53:10  499991\n\n[50000 rows x 1 columns]\n```\n\n```\nIn [95]: agged = df.groupby(['A','B']).aggregate({'C' : 'sum' })\n\nIn [96]: %timeit -n 1 -r 1 agged.loc[idx[['A']],:]\n1 loops, best of 1: 40.9 ms per loop\n```\n\nThen subslice on this, which has a quite efficient index scheme.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128996115",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10769#issuecomment-128996115",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10769",
    "id": 128996115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODk5NjExNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-08T16:25:19Z",
    "updated_at": "2015-08-08T16:25:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "In theory this could be changed NOT to do this. However, this would require special cython support for MultiIndexing (IOW maintaining separate hashtables) in a `IndexEngine` structure. So possible, but quite a bit of work. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/129007248",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10769#issuecomment-129007248",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10769",
    "id": 129007248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTAwNzI0OA==",
    "user": {
      "login": "drglitch",
      "id": 910285,
      "node_id": "MDQ6VXNlcjkxMDI4NQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/910285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drglitch",
      "html_url": "https://github.com/drglitch",
      "followers_url": "https://api.github.com/users/drglitch/followers",
      "following_url": "https://api.github.com/users/drglitch/following{/other_user}",
      "gists_url": "https://api.github.com/users/drglitch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drglitch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drglitch/subscriptions",
      "organizations_url": "https://api.github.com/users/drglitch/orgs",
      "repos_url": "https://api.github.com/users/drglitch/repos",
      "events_url": "https://api.github.com/users/drglitch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drglitch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-08T16:40:36Z",
    "updated_at": "2015-08-08T16:41:04Z",
    "author_association": "NONE",
    "body": "@jreback thanks for the detailed explanation - in my example the df construction was just for the sake of the example - i obviously don't do it that way in prod :) \n\nHaving read quite a bit of docs, i figured that using multiindex for this would be the recommended/best way to go about it (and also because thats what pivot_table seems to do).\n\nSlicing didn't seem like the right fit because my access pattern is accessing individual rows (all paths end up unique after the groupby) multiple times over, meaning a new indexslice would have to be created with size of 1 each and every time.\n\nAm i correct in understanding that the DateTimeIndex is constructed on top of the datetime64 objects, but the actual (multiindex) lookup is what causes it to coerce entire index into Timestamps?\n\nI'll see what kind of performance i get with subslicing (as opposed to chaining, which i already tried and found a bit slowish). Thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/129011877",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10769#issuecomment-129011877",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10769",
    "id": 129011877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTAxMTg3Nw==",
    "user": {
      "login": "drglitch",
      "id": 910285,
      "node_id": "MDQ6VXNlcjkxMDI4NQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/910285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drglitch",
      "html_url": "https://github.com/drglitch",
      "followers_url": "https://api.github.com/users/drglitch/followers",
      "following_url": "https://api.github.com/users/drglitch/following{/other_user}",
      "gists_url": "https://api.github.com/users/drglitch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drglitch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drglitch/subscriptions",
      "organizations_url": "https://api.github.com/users/drglitch/orgs",
      "repos_url": "https://api.github.com/users/drglitch/repos",
      "events_url": "https://api.github.com/users/drglitch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drglitch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-08T16:51:00Z",
    "updated_at": "2015-08-08T16:51:00Z",
    "author_association": "NONE",
    "body": "To clarify one more thing: this doesn't happen when multiindex is not involved. Is that due to the fact that it doesn't have to build a full hash of all tuples in the groupby/multiindex?\n\ne.g.:\n\n```\ngra = df.groupby('colB')\naga = gra.aggregate({'colC':'sum'})\naga.loc[(path[1],)] # << no boxing happening and fast even on first pass\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/129407764",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10769#issuecomment-129407764",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10769",
    "id": 129407764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTQwNzc2NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T11:01:04Z",
    "updated_at": "2015-08-10T11:01:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep, `Int64/Float/Object` have dedicate hashing types. MultiIndex is a list of tuples.\n"
  }
]
