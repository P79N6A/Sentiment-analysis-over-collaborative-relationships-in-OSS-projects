[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357514746",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-357514746",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 357514746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzUxNDc0Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-14T14:16:04Z",
    "updated_at": "2018-01-14T14:16:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @jorisvandenbossche @TomAugspurger @wesm \r\ncc @hexgnu \r\ncc @Licht-T \r\ncc @kernc "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/360193325",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-360193325",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 360193325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDE5MzMyNQ==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T16:35:20Z",
    "updated_at": "2018-01-24T16:35:20Z",
    "author_association": "MEMBER",
    "body": "In case my use case it's useful in the discussion. I mostly (probably only) use `SparseDataFrame` because of `pandas.get_dummies()`. And after that, I'm mainly interested in having a `scipy.sparse` structure (for example to use it in scikit-learn). I'd bet this is the case for many pandas users.\r\n\r\nPersonally I'm +1 on getting rid of it. Then, it could be useful to have a `get_dummies` sparse version that returns a `scipy.sparse`. Not sure if in `pandas` or as a separate project."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/361170108",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-361170108",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 361170108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTE3MDEwOA==",
    "user": {
      "login": "hexgnu",
      "id": 138510,
      "node_id": "MDQ6VXNlcjEzODUxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/138510?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexgnu",
      "html_url": "https://github.com/hexgnu",
      "followers_url": "https://api.github.com/users/hexgnu/followers",
      "following_url": "https://api.github.com/users/hexgnu/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexgnu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexgnu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexgnu/subscriptions",
      "organizations_url": "https://api.github.com/users/hexgnu/orgs",
      "repos_url": "https://api.github.com/users/hexgnu/repos",
      "events_url": "https://api.github.com/users/hexgnu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexgnu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-29T08:17:02Z",
    "updated_at": "2018-01-29T08:17:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think a lot of the issue with SparseDataFrame is honestly a lack of test coverage as well as a lot of bleedover into DataFrame. For instance a lot of code assumes that something is dense and that it has length > 0. This isn't the real case, and I feel that with a flag day or two of squashing sparse bugs and writing more tests it wouldn't be so awful.\r\n\r\nBut that being said I also don't want to spend a bunch of time fixing something nobody really uses.\r\n\r\nAlso this is not obvious to me on first look:\r\n\r\n* DataFrame can have both Series and SparseSeries in it\r\n* SparseDataFrame can only really have SparseSeries inside of it\r\n\r\nPersonally I would think that SparseDataFrame is the only time you can have SparseSeries and DataFrame is always dense."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362519212",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-362519212",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 362519212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjUxOTIxMg==",
    "user": {
      "login": "hexgnu",
      "id": 138510,
      "node_id": "MDQ6VXNlcjEzODUxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/138510?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexgnu",
      "html_url": "https://github.com/hexgnu",
      "followers_url": "https://api.github.com/users/hexgnu/followers",
      "following_url": "https://api.github.com/users/hexgnu/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexgnu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexgnu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexgnu/subscriptions",
      "organizations_url": "https://api.github.com/users/hexgnu/orgs",
      "repos_url": "https://api.github.com/users/hexgnu/repos",
      "events_url": "https://api.github.com/users/hexgnu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexgnu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T08:29:35Z",
    "updated_at": "2018-02-02T08:30:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also I wanted to point out that Sparse bugs aren't the biggest label category in this repo\r\n\r\nIt looks to me like reshaping, indexing, and dtypes are the big hotspots. Getting rid of sparse I don't think would bring those bug counts down.\r\n\r\n![download 1](https://user-images.githubusercontent.com/138510/35723718-f06744c6-082d-11e8-9211-27c987d68f0e.png)\r\n\r\nAlso I think with some TLC SparseDataFrames can be a really nice little abstraction for saving on memory consumption in certain cases."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362556442",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-362556442",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 362556442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjU1NjQ0Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T11:01:58Z",
    "updated_at": "2018-02-02T11:01:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hexgnu its not about the issues, rather about having *another* structure to use, which leads to confusion and code complexity. Yes a pure sparse frame does lead to efficiencies, but you (w/o a lot of acrobatics) lose the heterogenity which makes a DataFrame itself so useful. I think a SparseDataFrame *should* exist as a separate project :> (and the primitives, IOW SparseArray/Series can still live in pandas proper)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362581399",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-362581399",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 362581399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjU4MTM5OQ==",
    "user": {
      "login": "kernc",
      "id": 684364,
      "node_id": "MDQ6VXNlcjY4NDM2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/684364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kernc",
      "html_url": "https://github.com/kernc",
      "followers_url": "https://api.github.com/users/kernc/followers",
      "following_url": "https://api.github.com/users/kernc/following{/other_user}",
      "gists_url": "https://api.github.com/users/kernc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kernc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kernc/subscriptions",
      "organizations_url": "https://api.github.com/users/kernc/orgs",
      "repos_url": "https://api.github.com/users/kernc/repos",
      "events_url": "https://api.github.com/users/kernc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kernc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T13:07:18Z",
    "updated_at": "2018-02-02T13:07:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "As long as high-level NDFrame APIs defer actions to block primitives as far as possible, having a regular DataFrame wrapping them should work fine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374199755",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-374199755",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 374199755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDE5OTc1NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T12:47:32Z",
    "updated_at": "2018-03-19T12:47:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "What are the arguments for keeping SparseDataFrame around? I'm not familiar enough to say for sure whether this is possible, but ideally we would\r\n\r\n- Clearly document that DataFrame can hold sparse data\r\n- Move all current sparse-specific methods to a `.sparse` accessor (`density`, `to_coo`). Some of these methods would error if the DataFrame isn't entirely sparse.\r\n- Figure out how to handle `default_fill_value`\r\n- Deprceate SparseDataFrame in favor of a DataFrame holding sparse arrays\r\n\r\nWhat can a `SparseDataFrame` do that a `DataFrame[SparseArray]` can't?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375459841",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-375459841",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 375459841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTQ1OTg0MQ==",
    "user": {
      "login": "xpe",
      "id": 4576329,
      "node_id": "MDQ6VXNlcjQ1NzYzMjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4576329?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xpe",
      "html_url": "https://github.com/xpe",
      "followers_url": "https://api.github.com/users/xpe/followers",
      "following_url": "https://api.github.com/users/xpe/following{/other_user}",
      "gists_url": "https://api.github.com/users/xpe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xpe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xpe/subscriptions",
      "organizations_url": "https://api.github.com/users/xpe/orgs",
      "repos_url": "https://api.github.com/users/xpe/repos",
      "events_url": "https://api.github.com/users/xpe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xpe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T21:14:58Z",
    "updated_at": "2018-03-22T21:17:57Z",
    "author_association": "NONE",
    "body": "I hope we'd all agree that support for sparsity is very useful. I don't know the internals of Pandas, so I won't weigh in on the particular question of \"What can a `SparseDataFrame` do that a `DataFrame[SparseArray]` cannot?\"\r\n\r\nAs a user, I'll share my use case and an appreciation for clear documentation.\r\n\r\nMy use case involves [`load_svmlight_file` from scikit-learn](http://scikit-learn.org/stable/datasets/index.html#datasets-in-svmlight-libsvm-format):\r\n\r\n```\r\nfrom sklearn.datasets import load_svmlight_file\r\nfeatures, labels = load_svmlight_file(data_filename)  # sparse data\r\nfeature_labels = ['a', 'b', 'c']  # etc\r\ndf = pd.SparseDataFrame(data=features, columns=feature_labels)\r\ndf.plot(y='c')  # fails\r\ndf.to_dense().plot(y='c')  # succeeds\r\n```\r\n\r\nI'd be open to using other ways to load the sparse LibSVM data, but I don't currently know them. Any recommendations?\r\n\r\nHaving `.plot()` work in this case with `SparseDataFrame` would be nice. :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375596173",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-375596173",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 375596173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTU5NjE3Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T09:41:43Z",
    "updated_at": "2018-03-23T09:41:43Z",
    "author_association": "MEMBER",
    "body": "I am also not familiar enough with the sparse dataframe to answer the question \"\"What can a SparseDataFrame do that a DataFrame[SparseArray] cannot?\". \r\nBut, when we would take this route and do:\r\n\r\n> Deprceate SparseDataFrame in favor of a DataFrame holding sparse arrays\r\n\r\nMy main worry is: how much will this complicate our current DataFrame implementation? Will this mean adding special-casing for sparse dataframes in multiple places? ... If that is the case, I am not sure I am in favor of this. \r\nEg in `pandas/core/sparse/frame.py`, there is still a *lot* of custom code overriding parent frame methods (next to the sparse-specific methods like `to_coo` or `to_dense`). I don't know what all this code does, but it might serve a purpose.\r\n\r\nOf course it might be that with the new ExtensionArray interface we could make this much cleaner, and wouldn't need such amount of special casing. But I can't assess if that will be the case or not.\r\n\r\n> Figure out how to handle default_fill_value\r\n\r\nThis is a bit similar to the the extra metadata attributes I also have in geopandas. It would be good if we can figure out something. \r\nI suppose having it as an attribute on a \"sparse dtype\" object might be one possible way.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375611317",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-375611317",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 375611317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYxMTMxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T10:32:37Z",
    "updated_at": "2018-03-23T10:32:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "The main difference is this. A SDF of a single dtype can be very efficiently represented because it has a default_fill_value for the entire frame. Think of csr_matrix here. A DataFrame *can* already hold SparseSeries. So in theory you can simply replace every case of a SDF with a DataFrame. If you have lots of columns (like a lot), then this would be pretty inefficient.\r\n\r\nMy argument for removing this is simple. This causes an enormous amount of complexity in the codebase, and we have many non-implemented features (mainly indexing). So its pretty half-baked. Simply deprecated / removing in pandas would allow an external library to implement this properly (to allow for the efficiency argument above), while not sacrificing the occasionaly use of a SparseSeries (or even a small number of SparseSeries), e.g. what get_dummies returns (or could return); this is in fact the main case.\r\n\r\nWe would also leave this, but move the implementation out of main pandas (to an external library) this is separately maintained.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375619028",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-375619028",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 375619028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYxOTAyOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T10:41:12Z",
    "updated_at": "2018-03-23T10:41:12Z",
    "author_association": "MEMBER",
    "body": "> The main difference is this. A SDF of a single dtype can be very efficiently represented because it has a default_fill_value for the entire frame. Think of csr_matrix here. A DataFrame can already hold SparseSeries. So in theory you can simply replace every case of a SDF with a DataFrame. If you have lots of columns (like a lot), then this would be pretty inefficient.\r\n\r\nAs said above, not familiar with sparse code, but it *seems* the above is not true and that even a SparseDataFrame with a single dtype already stores the data column-by-column?\r\n\r\n```\r\nIn [61]: pd.SparseDataFrame([[0,1],[1,0]])._data\r\nOut[61]: \r\nBlockManager\r\nItems: RangeIndex(start=0, stop=2, step=1)\r\nAxis 1: RangeIndex(start=0, stop=2, step=1)\r\nSparseBlock: slice(0, 1, 1), 1 x 2, dtype: int64\r\nSparseBlock: slice(1, 2, 1), 1 x 2, dtype: int64\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375619752",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-375619752",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 375619752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYxOTc1Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T10:44:12Z",
    "updated_at": "2018-03-23T10:44:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "construct by using .to_sparse() from a DF\r\n\r\nthe method above is not consolidated by default"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375620421",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-375620421",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 375620421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYyMDQyMQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T10:47:03Z",
    "updated_at": "2018-03-23T10:48:41Z",
    "author_association": "MEMBER",
    "body": "There is no difference:\r\n\r\n```\r\nIn [63]: pd.DataFrame([[0,1],[1,0]]).to_sparse()._data\r\nOut[63]: \r\nBlockManager\r\nItems: RangeIndex(start=0, stop=2, step=1)\r\nAxis 1: RangeIndex(start=0, stop=2, step=1)\r\nSparseBlock: slice(0, 1, 1), 1 x 2, dtype: int64\r\nSparseBlock: slice(1, 2, 1), 1 x 2, dtype: int64\r\n```\r\n\r\nAnd SparseArray is also limited to 1D I think (it gives an error if you try to pass the above 2D array to SparseArray)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375624568",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-375624568",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 375624568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYyNDU2OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T11:04:50Z",
    "updated_at": "2018-03-23T11:04:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> And SparseArray is also limited to 1D I think\r\n\r\nAhh, that answers it then. I was thinking SparseArray was 2D. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429621839",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-429621839",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 429621839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTYyMTgzOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T12:19:16Z",
    "updated_at": "2018-10-14T12:19:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Opened https://github.com/pandas-dev/pandas/issues/23148 for creating a `sparse` accessor.\r\n\r\nHave we identified anything SparseDataFrame can do that a regular DataFrame can't?\r\n\r\n@xpe I assume that scikit-learn `load_svmlight` returns a `spicy.sparse` matrix? In my ideal world you would be able to load that with `pd.DataFrame.sparse.from_coo`.\r\n\r\nAnything else?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429809736",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-429809736",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 429809736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTgwOTczNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T11:13:48Z",
    "updated_at": "2018-10-15T11:13:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've updated the title to consider deprecating both SparseDataFrame and SparseSeries now that https://github.com/pandas-dev/pandas/pull/22325 is in master (FYI, it'd be helpful to have people testing that on real workloads)\r\n\r\nFWIW, when I was doing that refactor, I discovered several subtle difference between methods implemented on both Series and SparseSeries. The Series implementation was updated but the SparseSeries one lagged behind."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/451452284",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-451452284",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 451452284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTQ1MjI4NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-04T14:06:01Z",
    "updated_at": "2019-01-04T14:06:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "if we can't do this for 0.24, 0.25 is ok too."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/453260411",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-453260411",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 453260411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzI2MDQxMQ==",
    "user": {
      "login": "frndlytm",
      "id": 22228622,
      "node_id": "MDQ6VXNlcjIyMjI4NjIy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/22228622?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frndlytm",
      "html_url": "https://github.com/frndlytm",
      "followers_url": "https://api.github.com/users/frndlytm/followers",
      "following_url": "https://api.github.com/users/frndlytm/following{/other_user}",
      "gists_url": "https://api.github.com/users/frndlytm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frndlytm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frndlytm/subscriptions",
      "organizations_url": "https://api.github.com/users/frndlytm/orgs",
      "repos_url": "https://api.github.com/users/frndlytm/repos",
      "events_url": "https://api.github.com/users/frndlytm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frndlytm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T21:27:59Z",
    "updated_at": "2019-01-10T21:27:59Z",
    "author_association": "NONE",
    "body": "Multi-Indexing SparseDataFrames is a nice feature you don't get from scipy.sparse arrays."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/453261994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19239#issuecomment-453261994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19239",
    "id": 453261994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzI2MTk5NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T21:33:02Z",
    "updated_at": "2019-01-10T21:33:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frndlytm you'll still be able to do that with a DataFrame with sparse values\r\n\r\n```python\r\nIn [11]: df = pd.DataFrame({\"A\": [1, 0], \"B\": [0, 1]}, dtype=\"Sparse[int]\", index=pd.MultiIndex.from_tuples([('A', 'a'), ('A', 'b')]))\r\n\r\nIn [12]: df.dtypes\r\nOut[12]:\r\nA    Sparse[int64, 0]\r\nB    Sparse[int64, 0]\r\ndtype: object\r\n\r\nIn [13]: df\r\nOut[13]:\r\n     A  B\r\nA a  1  0\r\n  b  0  1\r\n\r\n```\r\n\r\nor do I misunderstand?"
  }
]
