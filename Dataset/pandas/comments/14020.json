[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240572637",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14020#issuecomment-240572637",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14020",
    "id": 240572637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDU3MjYzNw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-17T22:47:43Z",
    "updated_at": "2016-08-17T22:47:43Z",
    "author_association": "MEMBER",
    "body": "cc @parthea \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240786380",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14020#issuecomment-240786380",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14020",
    "id": 240786380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDc4NjM4MA==",
    "user": {
      "login": "aschmolck",
      "id": 124129,
      "node_id": "MDQ6VXNlcjEyNDEyOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/124129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aschmolck",
      "html_url": "https://github.com/aschmolck",
      "followers_url": "https://api.github.com/users/aschmolck/followers",
      "following_url": "https://api.github.com/users/aschmolck/following{/other_user}",
      "gists_url": "https://api.github.com/users/aschmolck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aschmolck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aschmolck/subscriptions",
      "organizations_url": "https://api.github.com/users/aschmolck/orgs",
      "repos_url": "https://api.github.com/users/aschmolck/repos",
      "events_url": "https://api.github.com/users/aschmolck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aschmolck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-18T16:54:22Z",
    "updated_at": "2016-08-18T16:57:49Z",
    "author_association": "NONE",
    "body": "I've written some code that implements the last strategy I mentioned (check the result json for null values, if there are any nulls in an INTEGER column make it of type object, else int64). I have also updated the tests, but don't know how to run them (credentials). This works well for my purposes, but it's still not consistent with read_sql which can produce either object (all null ints) int64 (all ints) or float (some ints and some nulls).\n\nMaybe a more general solution would be to give functions like read_sql, run_query etc. a keyword argument that specifies what to do on encountering NULLs in integer columns:\n\n```\nnull_int={'float', 'error', 'object', some_integer_value}\n```\n\nHere 'float' means downcast, error means throw an exception, object means use dtype object and some_integer_value allows the user to specify e.g. `sys.maxsize` for NULL values.\n\nWhilst pandas's ability to work with slightly messy data is a godsend for exploratory work, one thing I really miss is are more safety knobs for production to ensure that this flexibility doesn't result in silent and sometimes difficult to spot data corruption.\n\nSo in an ideal world it would even be possible to specify this as an option `(mode.null_int = ...` or similar) affecting all operations that can silently cast integers, but for starters just changing the bigquery logic to behave like the sql one and leave non-null integer columns as dtype(int) would be a very welcome improvement.\n\nI'd be happy to work one one or several PRs assuming there is interest.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/245637031",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14020#issuecomment-245637031",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14020",
    "id": 245637031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTYzNzAzMQ==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-08T15:31:20Z",
    "updated_at": "2016-09-08T15:31:20Z",
    "author_association": "MEMBER",
    "body": "This is a long standing issue that we intend to remedy at the DataFrame / Series level with the pandas-2.0 effort. Having high fidelity data interchange (i.e. not losing metadata, or even data in edge cases) with databases is extremely important. \n\nWith the current internals, it's very hard to work around these issues in a way that does not cause problems elsewhere. See:\n\nhttps://pydata.github.io/pandas-design/internal-architecture.html#physical-storage-decoupling\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/245772275",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14020#issuecomment-245772275",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14020",
    "id": 245772275,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTc3MjI3NQ==",
    "user": {
      "login": "aschmolck",
      "id": 124129,
      "node_id": "MDQ6VXNlcjEyNDEyOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/124129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aschmolck",
      "html_url": "https://github.com/aschmolck",
      "followers_url": "https://api.github.com/users/aschmolck/followers",
      "following_url": "https://api.github.com/users/aschmolck/following{/other_user}",
      "gists_url": "https://api.github.com/users/aschmolck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aschmolck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aschmolck/subscriptions",
      "organizations_url": "https://api.github.com/users/aschmolck/orgs",
      "repos_url": "https://api.github.com/users/aschmolck/repos",
      "events_url": "https://api.github.com/users/aschmolck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aschmolck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-08T23:20:55Z",
    "updated_at": "2016-09-08T23:20:55Z",
    "author_association": "NONE",
    "body": "That's excellent news! I agree that the outlined approach (nullity bitmaps, abstracting logical type from representation) is the right solution, and anything else will somewhat palliative in nature. \n\nNonetheless, I still think it's worth making some improvements to the 0.x series of pandas, both to bridge the wait (I assume pandas 2 isn't exactly around the corner) and also to smooth the transition.\n\nFor example, allowing to specify the dtype for individual result column in sql/bigquery queries would definitely help and remain useful in pandas 2.0 (for one thing types can't always be correctly inferred).\n"
  }
]
