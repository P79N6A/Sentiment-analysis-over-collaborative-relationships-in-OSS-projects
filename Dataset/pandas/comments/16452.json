[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303392667",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-303392667",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 303392667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzM5MjY2Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T13:10:42Z",
    "updated_at": "2017-05-23T13:10:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm I don't think we should change the default. If we just used `%g` we'd be potentially silently truncating the data."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303399913",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-303399913",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 303399913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzM5OTkxMw==",
    "user": {
      "login": "Peque",
      "id": 526577,
      "node_id": "MDQ6VXNlcjUyNjU3Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Peque",
      "html_url": "https://github.com/Peque",
      "followers_url": "https://api.github.com/users/Peque/followers",
      "following_url": "https://api.github.com/users/Peque/following{/other_user}",
      "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Peque/subscriptions",
      "organizations_url": "https://api.github.com/users/Peque/orgs",
      "repos_url": "https://api.github.com/users/Peque/repos",
      "events_url": "https://api.github.com/users/Peque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Peque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T13:36:28Z",
    "updated_at": "2017-05-23T13:36:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agreed. Maybe using `'%g'` but automatically adjusting to the float precision as well? (depending on the float type)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303403994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-303403994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 303403994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzQwMzk5NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T13:50:15Z",
    "updated_at": "2017-05-23T13:50:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just to make sure I fully understand, can you provide an example? Or let me know if this is what you were worried about. Given a file `foo.csv`.\r\n\r\n```\r\nA\r\n0.1\r\n0.2\r\n0.3\r\n```\r\n\r\nthen\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\nIn [2]: pd.read_csv(\"foo.csv\").to_csv(\"foo2.csv\", index=False)\r\n\r\nIn [3]: !cat foo2.csv\r\nA\r\n0.1\r\n0.2\r\n0.3\r\n```\r\n\r\nThat one doesn't have any rounding issues (but maybe with different numbers it would?)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303423910",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-303423910",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 303423910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzQyMzkxMA==",
    "user": {
      "login": "Peque",
      "id": 526577,
      "node_id": "MDQ6VXNlcjUyNjU3Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Peque",
      "html_url": "https://github.com/Peque",
      "followers_url": "https://api.github.com/users/Peque/followers",
      "following_url": "https://api.github.com/users/Peque/following{/other_user}",
      "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Peque/subscriptions",
      "organizations_url": "https://api.github.com/users/Peque/orgs",
      "repos_url": "https://api.github.com/users/Peque/repos",
      "events_url": "https://api.github.com/users/Peque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Peque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T14:53:43Z",
    "updated_at": "2017-06-06T08:34:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "~~~You are right, sorry. The DataFrame I had was actually being modified. :sweat:~~~"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/306419418",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-306419418",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 306419418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQxOTQxOA==",
    "user": {
      "login": "Peque",
      "id": 526577,
      "node_id": "MDQ6VXNlcjUyNjU3Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Peque",
      "html_url": "https://github.com/Peque",
      "followers_url": "https://api.github.com/users/Peque/followers",
      "following_url": "https://api.github.com/users/Peque/following{/other_user}",
      "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Peque/subscriptions",
      "organizations_url": "https://api.github.com/users/Peque/orgs",
      "repos_url": "https://api.github.com/users/Peque/repos",
      "events_url": "https://api.github.com/users/Peque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Peque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T08:34:38Z",
    "updated_at": "2017-06-06T08:34:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger Let me reopen this issue. I have now found an example that reproduces this without modifying the contents of the original DataFrame:\r\n\r\n```python\r\nfrom io import StringIO\r\nfrom pathlib import Path\r\nfrom tempfile import NamedTemporaryFile\r\n\r\nimport pandas\r\n\r\n\r\ninput_csv = StringIO('''\r\n01/01/17 23:00,1.05148,1.05153,1.05148,1.05153,4\r\n01/01/17 23:01,1.05153,1.05153,1.05153,1.05153,4\r\n01/01/17 23:02,1.05170,1.05175,1.05170,1.05175,4\r\n01/01/17 23:03,1.05174,1.05175,1.05174,1.05175,4\r\n01/01/17 23:08,1.05170,1.05170,1.05170,1.05170,4\r\n01/01/17 23:11,1.05173,1.05174,1.05173,1.05174,4\r\n01/01/17 23:13,1.05173,1.05173,1.05173,1.05173,4\r\n01/01/17 23:14,1.05174,1.05174,1.05174,1.05174,4\r\n01/01/17 23:16,1.05204,1.05238,1.05204,1.05238,4\r\n''')\r\n\r\ndf = pandas.read_csv(input_csv, header=None)\r\n\r\nwith NamedTemporaryFile() as tmpfile:\r\n    df.to_csv(tmpfile.name, index=False, header=None)\r\n    print(Path(tmpfile.name).read_text())\r\n```\r\n\r\nThat would give you this output:\r\n\r\n```\r\n01/01/17 23:00,1.05148,1.0515299999999999,1.05148,1.0515299999999999,4\r\n01/01/17 23:01,1.0515299999999999,1.0515299999999999,1.0515299999999999,1.0515299999999999,4\r\n01/01/17 23:02,1.0517,1.05175,1.0517,1.05175,4\r\n01/01/17 23:03,1.05174,1.05175,1.05174,1.05175,4\r\n01/01/17 23:08,1.0517,1.0517,1.0517,1.0517,4\r\n01/01/17 23:11,1.0517299999999998,1.05174,1.0517299999999998,1.05174,4\r\n01/01/17 23:13,1.0517299999999998,1.0517299999999998,1.0517299999999998,1.0517299999999998,4\r\n01/01/17 23:14,1.05174,1.05174,1.05174,1.05174,4\r\n01/01/17 23:16,1.0520399999999999,1.0523799999999999,1.0520399999999999,1.0523799999999999,4\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/306468843",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-306468843",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 306468843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQ2ODg0Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T12:19:17Z",
    "updated_at": "2017-06-06T12:19:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Peque I think everything is operating as intended, but let me see if I understand your concern.\r\n\r\n1. DataFrame.__repr__ prints out a dataframe with some precision (`pd.options.display.precision`, 6 by default).\r\n\r\n```\r\nIn [21]: df\r\nOut[21]:\r\n                0        1        2        3        4  5\r\n0  01/01/17 23:00  1.05148  1.05153  1.05148  1.05153  4\r\n1  01/01/17 23:01  1.05153  1.05153  1.05153  1.05153  4\r\n2  01/01/17 23:02  1.05170  1.05175  1.05170  1.05175  4\r\n3  01/01/17 23:03  1.05174  1.05175  1.05174  1.05175  4\r\n4  01/01/17 23:08  1.05170  1.05170  1.05170  1.05170  4\r\n5  01/01/17 23:11  1.05173  1.05174  1.05173  1.05174  4\r\n6  01/01/17 23:13  1.05173  1.05173  1.05173  1.05173  4\r\n7  01/01/17 23:14  1.05174  1.05174  1.05174  1.05174  4\r\n8  01/01/17 23:16  1.05204  1.05238  1.05204  1.05238  4\r\n```\r\n\r\n2. Because of the floating-point representation, the *actual* value stored in the dataframe slightly different\r\n\r\n```python\r\nIn [22]: df.iloc[0, 2]\r\nOut[22]: 1.0515299999999999\r\n```\r\n\r\n3. You think that the value written to `to_csv` should be the rounded to the same as the `pd.options.display.precision`? (I may be wrong about this)\r\n\r\nIf I understand you correctly, then I think I disagree. The purpose of the string repr `print(df)` is primarily for human consumption, where super-high precision isn't desirable (by default). The purpose of most `to_*` methods, including `to_csv` is for a faithful representation of the data. We'd get a bunch of complaints from users if we started rounding their data before writing it to disk."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/306478871",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-306478871",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 306478871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQ3ODg3MQ==",
    "user": {
      "login": "Peque",
      "id": 526577,
      "node_id": "MDQ6VXNlcjUyNjU3Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Peque",
      "html_url": "https://github.com/Peque",
      "followers_url": "https://api.github.com/users/Peque/followers",
      "following_url": "https://api.github.com/users/Peque/following{/other_user}",
      "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Peque/subscriptions",
      "organizations_url": "https://api.github.com/users/Peque/orgs",
      "repos_url": "https://api.github.com/users/Peque/repos",
      "events_url": "https://api.github.com/users/Peque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Peque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T13:01:32Z",
    "updated_at": "2017-06-06T14:49:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger Not exactly what I mean. :innocent: \r\n\r\nI am not saying that numbers should be rounded to `pd.options.display.precision`, but maybe rounded to something near the numerical precision of the float type.\r\n\r\nWhen we load `1.05153` from the CSV, it is represented in-memory as `1.0515299999999999`, because I understand there is no other way to represent it in base 2. That is something to be expected when working with floats.\r\n\r\nNow, when writing `1.0515299999999999` to a CSV I think it should be written as `1.05153` as it is a sane rounding for a float64 value. So, not rounding at precision 6, but rather at the highest possible precision, depending on the float size.\r\n\r\nI understand that changing the defaults is a hard decision, but wanted to suggest it anyway. :blush:\r\n\r\nI also understand that `print(df)` is for human consumption, but I would argue that CSV is as well. Usually text-based representations are always meant for human consumption/readability."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/306929302",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-306929302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 306929302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjkyOTMwMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-07T21:23:31Z",
    "updated_at": "2017-06-07T21:23:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Now, when writing 1.0515299999999999 to a CSV I think it should be written as 1.05153 as it is a sane rounding for a float64 value.\r\n\r\nSo for\r\n\r\n```python\r\nIn [32]: print(pd.Series([1.05153, 1.0515299999999999]).to_csv(index=False))\r\n1.05153\r\n1.0515299999999999\r\n```\r\n\r\nIt would be 1.05153 for both lines, correct?\r\n\r\n> I understand that changing the defaults is a hard decision, but wanted to suggest it anyway. 😊\r\n\r\nI appreciate that. We're always willing to consider making API breaking changes, the benefit just has to outweigh the cost. In this case, I don't think they do. I just worry about users who need that precision. This would be a very difficult bug to track down, whereas passing `float_format='%g'` isn't *too* onerous."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/306941853",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-306941853",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 306941853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjk0MTg1Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-07T22:20:35Z",
    "updated_at": "2017-06-07T22:20:35Z",
    "author_association": "MEMBER",
    "body": "> Now, when writing 1.0515299999999999 to a CSV I think it should be written as 1.05153 as it is a sane rounding for a float64 value. So, not rounding at precision 6, but rather at the highest possible precision, depending on the float size.\r\n\r\nI don't think that is correct. Floats of that size can have a higher precision than 5 decimals (just not any value):\r\n\r\n```\r\nIn [25]: pd.Series([1.0515299999999998]).iloc[0]\r\nOut[25]: 1.0515299999999999\r\n\r\nIn [26]: pd.Series([1.0515299999999991]).iloc[0]\r\nOut[26]: 1.0515299999999992\r\n\r\nIn [27]: pd.Series([1.051529999999981]).iloc[0]\r\nOut[27]: 1.051529999999981\r\n```\r\n\r\nSo the three different values would be exactly the same if you would round them before writing to csv.\r\n\r\nI agree the exploding decimal numbers when writing pandas objects to csv can be quite annoying (certainly because it differs from number to number, so messing up any alignment you would have in the csv file). But, that's just a consequence of how floats work, and if you don't like it we options to change that (`float_format`)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/307026008",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-307026008",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 307026008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzAyNjAwOA==",
    "user": {
      "login": "Peque",
      "id": 526577,
      "node_id": "MDQ6VXNlcjUyNjU3Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Peque",
      "html_url": "https://github.com/Peque",
      "followers_url": "https://api.github.com/users/Peque/followers",
      "following_url": "https://api.github.com/users/Peque/following{/other_user}",
      "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Peque/subscriptions",
      "organizations_url": "https://api.github.com/users/Peque/orgs",
      "repos_url": "https://api.github.com/users/Peque/repos",
      "events_url": "https://api.github.com/users/Peque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Peque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T07:45:00Z",
    "updated_at": "2017-06-08T07:45:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I understand why that could affect someone (if they are really interested in that very last digit, which is not precise anyway, as `1.0515299999999999` is `0.0000000000000001` away from the \"real\" value).\r\n\r\n@jorisvandenbossche I'm not saying all those should give the same result. Maybe only the first would be represented as `1.05153`, the second as `...99` and the third (it might be missing one `9`) as `98`. So loosing only the very last digit, which is not 100% accurate anyway.\r\n\r\nMy suggestion is to do something like this only when outputting to a CSV, as that might be more like a \"human\", readable format in which the 16th digit might not be so important. Then, if someone really wants to have that digit too, use `float_format`. :stuck_out_tongue_winking_eye: \r\n\r\nBTW, it seems R does not have this issue (so maybe what I am suggesting is not that crazy :joy:):\r\n\r\n```R\r\ndf = read.table('input.csv', header=FALSE, sep=\",\")\r\nwrite.csv(df, 'output.csv')\r\nprint(\"------------\")\r\nprint(df)\r\nprint(typeof(df$V2))\r\nprint(\"------------\")\r\n```\r\n\r\n    $ Rscript read_write.R\r\n\r\nThe dataframe is loaded just fine, and columns are interpreted as \"double\" (float64). But when written back to the file, they keep the original \"looking\". I don't know how they implement it, though, but maybe they just do some rounding by default? In [their documentation](https://stat.ethz.ch/R-manual/R-devel/library/utils/html/write.table.html) they say that \"*Real and complex numbers are written to the maximal possible precision*\", though.\r\n\r\nPS: Don't want to be annoying, feel free to close this if you think you are just loosing your time and this will not be changed anyway (I wont get offended), and wont kill myself for having to use `float_format` every time either. :wink:"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/307026812",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-307026812",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 307026812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzAyNjgxMg==",
    "user": {
      "login": "Peque",
      "id": 526577,
      "node_id": "MDQ6VXNlcjUyNjU3Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Peque",
      "html_url": "https://github.com/Peque",
      "followers_url": "https://api.github.com/users/Peque/followers",
      "following_url": "https://api.github.com/users/Peque/following{/other_user}",
      "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Peque/subscriptions",
      "organizations_url": "https://api.github.com/users/Peque/orgs",
      "repos_url": "https://api.github.com/users/Peque/repos",
      "events_url": "https://api.github.com/users/Peque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Peque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T07:48:41Z",
    "updated_at": "2017-06-08T07:49:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems MATLAB (Octave actually) also don't have this issue by default, just like R. You can try:\r\n\r\n```matlab\r\ndf = csvread('input.csv')\r\ncsvwrite('output_matlab.csv', df)\r\n```\r\n\r\nAnd see how the output keeps the original \"looking\" as well."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/307059902",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-307059902",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 307059902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzA1OTkwMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T10:08:27Z",
    "updated_at": "2017-06-08T10:08:27Z",
    "author_association": "MEMBER",
    "body": "Digged a little bit into it, and I think this is due to some default settings in R:\r\n\r\nWhen printing:\r\n```\r\n> df = read.table('/home/joris/scipy/__test_float_precision.csv', header=FALSE, sep=\",\")\r\n> df\r\n              V1      V2      V3      V4      V5 V6\r\n1 01/01/17 23:00 1.05148 1.05153 1.05148 1.05153  4\r\n2 01/01/17 23:01 1.05153 1.05153 1.05153 1.05153  4\r\n3 01/01/17 23:02 1.05170 1.05175 1.05170 1.05175  4\r\n4 01/01/17 23:03 1.05174 1.05175 1.05174 1.05175  4\r\n5 01/01/17 23:08 1.05170 1.05170 1.05170 1.05170  4\r\n6 01/01/17 23:11 1.05173 1.05174 1.05173 1.05174  4\r\n7 01/01/17 23:13 1.05173 1.05173 1.05173 1.05173  4\r\n8 01/01/17 23:14 1.05174 1.05174 1.05174 1.05174  4\r\n9 01/01/17 23:16 1.05204 1.05238 1.05204 1.05238  4\r\n> options(digits = 17)\r\n> df\r\n              V1                 V2                 V3                 V4                 V5 V6\r\n1 01/01/17 23:00 1.0514800000000000 1.0515300000000001 1.0514800000000000 1.0515300000000001  4\r\n2 01/01/17 23:01 1.0515300000000001 1.0515300000000001 1.0515300000000001 1.0515300000000001  4\r\n3 01/01/17 23:02 1.0517000000000001 1.0517500000000000 1.0517000000000001 1.0517500000000000  4\r\n4 01/01/17 23:03 1.0517399999999999 1.0517500000000000 1.0517399999999999 1.0517500000000000  4\r\n5 01/01/17 23:08 1.0517000000000001 1.0517000000000001 1.0517000000000001 1.0517000000000001  4\r\n6 01/01/17 23:11 1.0517300000000001 1.0517399999999999 1.0517300000000001 1.0517399999999999  4\r\n7 01/01/17 23:13 1.0517300000000001 1.0517300000000001 1.0517300000000001 1.0517300000000001  4\r\n8 01/01/17 23:14 1.0517399999999999 1.0517399999999999 1.0517399999999999 1.0517399999999999  4\r\n9 01/01/17 23:16 1.0520400000000001 1.0523800000000001 1.0520400000000001 1.0523800000000001  4\r\n```\r\n\r\nSo for printing R does the same if you change the digits options.\r\n\r\nFor writing to csv, it does not seem to follow the digits option, from the `write.csv` docs:\r\n\r\n> In almost all cases the conversion of numeric quantities is governed by the option \"scipen\" (see options), but with the internal equivalent of digits = 15. For finer control, use format to make a character matrix/data frame, and call write.table on that.\r\n\r\nSo with digits=15, this is just not precise enough to see the floating point artefacts (as in the example above, I needed digits=17 to show it). For that reason, the result of `write.csv` looks better for your case.\r\n\r\nPandas uses the full precision when writing csv. So the question is more if we want a way to control this with an option (`read_csv` has a `float_precision` keyword), and if so, whether the default should be lower than the current full precision.\r\n\r\nI agree the default of R to use a precision just below the full one makes sense, as this fixes the most common cases of lower precision values."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/307065088",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-307065088",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 307065088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzA2NTA4OA==",
    "user": {
      "login": "Peque",
      "id": 526577,
      "node_id": "MDQ6VXNlcjUyNjU3Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Peque",
      "html_url": "https://github.com/Peque",
      "followers_url": "https://api.github.com/users/Peque/followers",
      "following_url": "https://api.github.com/users/Peque/following{/other_user}",
      "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Peque/subscriptions",
      "organizations_url": "https://api.github.com/users/Peque/orgs",
      "repos_url": "https://api.github.com/users/Peque/repos",
      "events_url": "https://api.github.com/users/Peque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Peque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T10:32:01Z",
    "updated_at": "2017-06-08T10:32:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche Exactly. What I am proposing is simply to change the default `float_precision` to something that could be more reasonable/intuitive for average/most-common use cases.\r\n\r\nTo backup my argument I mention how R and MATLAB (or Octave) do that.\r\n\r\nAlso, maybe it is a way to make things easier/nicer for newcomers (who might not even know what a float looks like in memory and might think there is a problem with Pandas). For those wanting to have extreme precision written to their CSVs, they probably already know about float representations and about the `float_format` option, so they can adjust it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/393235022",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-393235022",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 393235022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzIzNTAyMg==",
    "user": {
      "login": "IngvarLa",
      "id": 38863814,
      "node_id": "MDQ6VXNlcjM4ODYzODE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/38863814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IngvarLa",
      "html_url": "https://github.com/IngvarLa",
      "followers_url": "https://api.github.com/users/IngvarLa/followers",
      "following_url": "https://api.github.com/users/IngvarLa/following{/other_user}",
      "gists_url": "https://api.github.com/users/IngvarLa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IngvarLa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IngvarLa/subscriptions",
      "organizations_url": "https://api.github.com/users/IngvarLa/orgs",
      "repos_url": "https://api.github.com/users/IngvarLa/repos",
      "events_url": "https://api.github.com/users/IngvarLa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IngvarLa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-30T16:53:55Z",
    "updated_at": "2018-05-30T16:53:55Z",
    "author_association": "NONE",
    "body": "Not sure if this thread is active, anyway here are my thoughts.\r\nI am not a regular pandas user, but inherited some code that uses dataframes and uses the to_csv() method.  With an update of our Linux OS, we also update our python modules, and I saw this change:\r\nin pandas 0.19.2 floating point numbers were written as str(num), which has 12 digits precision, in pandas 0.22.0 they are written as repr(num) which has 17 digits precision.  There is a fair bit of noise in the last digit, enough that when using different hardware the last digit can vary.  The str(num) is intended for human consumption, while repr(num) is the official representation, so reasonable that repr(num) is default. Still, it would be nice if there was an option to write out the numbers with str(num) again.  Makes it easier to compare output without having to use tolerances."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/393494925",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16452#issuecomment-393494925",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16452",
    "id": 393494925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzQ5NDkyNQ==",
    "user": {
      "login": "IngvarLa",
      "id": 38863814,
      "node_id": "MDQ6VXNlcjM4ODYzODE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/38863814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IngvarLa",
      "html_url": "https://github.com/IngvarLa",
      "followers_url": "https://api.github.com/users/IngvarLa/followers",
      "following_url": "https://api.github.com/users/IngvarLa/following{/other_user}",
      "gists_url": "https://api.github.com/users/IngvarLa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IngvarLa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IngvarLa/subscriptions",
      "organizations_url": "https://api.github.com/users/IngvarLa/orgs",
      "repos_url": "https://api.github.com/users/IngvarLa/repos",
      "events_url": "https://api.github.com/users/IngvarLa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IngvarLa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T11:02:02Z",
    "updated_at": "2018-05-31T11:02:02Z",
    "author_association": "NONE",
    "body": "I guess what I am really asking for is to float_format=\"\" to follow the python formatting convention:\r\nhttps://docs.python.org/3/library/string.html#format-specification-mini-language, that \"\" corresponds to str().  When I tried, I get \"TypeError: not all arguments converted during string formatting\""
  }
]
