[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/250449885",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-250449885",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 250449885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDQ0OTg4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-29T12:17:24Z",
    "updated_at": "2016-09-29T12:17:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Seems to be the same as https://github.com/pydata/pandas/issues/14314 (though your example is better, thanks; I'll copy it over there).\n\nThe `coerce_float` option is for things like Decimal to float conversion, not null to NaN.\n\nDoes your actual use-case use `select * from test`? if so you can do `pd.read_sql_table('test', engine, chunksize=chunksize)`, which will get the type information from the database. `read_sql_query` \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/250451055",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-250451055",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 250451055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDQ1MTA1NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-29T12:23:27Z",
    "updated_at": "2016-09-29T12:23:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Let's actually reopen this, is it worth adding a `coerce_null` parameter to `read_sql_query` to handle cases like this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/250453474",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-250453474",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 250453474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDQ1MzQ3NA==",
    "user": {
      "login": "Gerenuk",
      "id": 3168512,
      "node_id": "MDQ6VXNlcjMxNjg1MTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3168512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gerenuk",
      "html_url": "https://github.com/Gerenuk",
      "followers_url": "https://api.github.com/users/Gerenuk/followers",
      "following_url": "https://api.github.com/users/Gerenuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gerenuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gerenuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gerenuk/subscriptions",
      "organizations_url": "https://api.github.com/users/Gerenuk/orgs",
      "repos_url": "https://api.github.com/users/Gerenuk/repos",
      "events_url": "https://api.github.com/users/Gerenuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gerenuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-29T12:35:52Z",
    "updated_at": "2016-09-29T12:35:52Z",
    "author_association": "NONE",
    "body": "My actual example was slightly more complex. I used an SQL query and had a way to do chunk-wise reading, which made this issue more likely.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/250592278",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-250592278",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 250592278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDU5MjI3OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-29T21:09:57Z",
    "updated_at": "2016-09-29T21:09:57Z",
    "author_association": "MEMBER",
    "body": "I am not sure it is worth adding such a parameter. The issue is also that it should not necessarily result in a float column, as in SQL the NULLs can be in any type of column. \n\nTo solve the dtype issues with multiple chunks, we could also think about a `dtype` kwarg where you could specify types for certain columns explicitly (similar as the `dtype` argument in eg `read_csv`). Although this of course is manual work specifying the exact column. \n\nThe problem with queries is that we do not have any information about the database table layout, we just get back result sets. But maybe we could also have a new kwarg to specify the table name where to get the type information. Or a helper function to get this information and to automatically construct a dict that could be passed to a possible `dtype` argument. Just brainstorming here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/250595334",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-250595334",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 250595334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDU5NTMzNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-29T21:22:22Z",
    "updated_at": "2016-09-29T21:22:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agreed about the `coerce_null` parameter not making sense.\n\nA helper method for getting dtypes from the table might be useful. I've written similar methods in the past that get the column info from a sqlalchemy MetaData object and transform them to a dictionary of `{column_name: pandas type}`. That could be passed to a `dtype` keyword for `read_sql_query`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412357518",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-412357518",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 412357518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjM1NzUxOA==",
    "user": {
      "login": "threemonks",
      "id": 5317790,
      "node_id": "MDQ6VXNlcjUzMTc3OTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5317790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threemonks",
      "html_url": "https://github.com/threemonks",
      "followers_url": "https://api.github.com/users/threemonks/followers",
      "following_url": "https://api.github.com/users/threemonks/following{/other_user}",
      "gists_url": "https://api.github.com/users/threemonks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threemonks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threemonks/subscriptions",
      "organizations_url": "https://api.github.com/users/threemonks/orgs",
      "repos_url": "https://api.github.com/users/threemonks/repos",
      "events_url": "https://api.github.com/users/threemonks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threemonks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-12T17:14:58Z",
    "updated_at": "2018-08-12T17:14:58Z",
    "author_association": "NONE",
    "body": "Is there any work around for this while the issue is being addressed? I tried the following, but neither works:\r\n\r\n`df.replace(None, np.nan, inplace=True)\r\ndf.fillna(value=np.nan, inplace=True)`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412366890",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-412366890",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 412366890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjM2Njg5MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-12T19:42:51Z",
    "updated_at": "2018-08-12T19:43:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does `to_numeric` work? (with `errors='coerce'`)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/416812379",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-416812379",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 416812379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjgxMjM3OQ==",
    "user": {
      "login": "puttkraidej",
      "id": 35617372,
      "node_id": "MDQ6VXNlcjM1NjE3Mzcy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35617372?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/puttkraidej",
      "html_url": "https://github.com/puttkraidej",
      "followers_url": "https://api.github.com/users/puttkraidej/followers",
      "following_url": "https://api.github.com/users/puttkraidej/following{/other_user}",
      "gists_url": "https://api.github.com/users/puttkraidej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/puttkraidej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/puttkraidej/subscriptions",
      "organizations_url": "https://api.github.com/users/puttkraidej/orgs",
      "repos_url": "https://api.github.com/users/puttkraidej/repos",
      "events_url": "https://api.github.com/users/puttkraidej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/puttkraidej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-29T03:30:21Z",
    "updated_at": "2018-08-29T03:30:21Z",
    "author_association": "NONE",
    "body": "same issue here, pandas forced decimal to float dtype when using read_sql_query() :("
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439247192",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-439247192",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 439247192,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTI0NzE5Mg==",
    "user": {
      "login": "annette987",
      "id": 29032713,
      "node_id": "MDQ6VXNlcjI5MDMyNzEz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/29032713?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/annette987",
      "html_url": "https://github.com/annette987",
      "followers_url": "https://api.github.com/users/annette987/followers",
      "following_url": "https://api.github.com/users/annette987/following{/other_user}",
      "gists_url": "https://api.github.com/users/annette987/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/annette987/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/annette987/subscriptions",
      "organizations_url": "https://api.github.com/users/annette987/orgs",
      "repos_url": "https://api.github.com/users/annette987/repos",
      "events_url": "https://api.github.com/users/annette987/events{/privacy}",
      "received_events_url": "https://api.github.com/users/annette987/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T01:11:23Z",
    "updated_at": "2018-11-16T01:11:23Z",
    "author_association": "NONE",
    "body": "Was this ever resolved? I am having the same issue. See also: https://stackoverflow.com/questions/53315035/pandas-read-sql-query-returning-none-for-all-values-in-some-columns\r\n\r\nI am using pandas read_sql_query to read data from a MySQL database table into a pandas dataframe. Some columns in this table have all NULL values. For those columns the pandas dataframe contains None in every row. For all other columns the dataframe contains NaN where there was a NULL value. Can anyone explain why None is returned for the all NULL columns? And how do I make sure I have all NaNs, hopefully without doing manual conversions? I should add that two of the columns causing this problem are float and the third is of type double,\r\n\r\nHere is an example. The columns pef and fer contain all NULLS in the database.\r\n\r\n```\r\nfrom sqlalchemy import create_engine\r\nimport pandas as pd\r\nimport math\r\n\r\nquerystr = \"SELECT * FROM dbname.mytable\"\r\nengine = create_engine('mysql+pymysql://username:password@localhost/' + \"dbname\")\r\ndf = pd.read_sql_query(querystr, engine)\r\ndf.head()\r\n\r\n    sys     dias    pef     fer\r\n0   NaN     NaN     None    None\r\n1   159.0   92.666  None    None\r\n2   NaN     NaN     None    None\r\n3   NaN     NaN     None    None\r\n4   102.0   63.333  None    None\r\n```\r\n\r\nIn the MySQL database these columns are defined as:\r\n\r\n```\r\nColumns: \r\n    sys float \r\n    dias float \r\n    pef float \r\n    fer float\r\n```\r\n\r\nI would expect the columns pef and fer to contain NaN in each row, not None.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439423108",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-439423108",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 439423108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQyMzEwOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T15:11:16Z",
    "updated_at": "2018-11-16T15:11:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Still open.\r\n\r\nIs your actual query `SELECT * FROM ...`?  If so, you could use `pd.read_sql_table`.\r\n\r\nPandas can't use the dtypes from the table for arbitrary sql expressions passed to `read_sql_query`, since the expression can change the column names / types. But pandas does use the types for `read_sql_table`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439745622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14319#issuecomment-439745622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14319",
    "id": 439745622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTc0NTYyMg==",
    "user": {
      "login": "annette987",
      "id": 29032713,
      "node_id": "MDQ6VXNlcjI5MDMyNzEz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/29032713?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/annette987",
      "html_url": "https://github.com/annette987",
      "followers_url": "https://api.github.com/users/annette987/followers",
      "following_url": "https://api.github.com/users/annette987/following{/other_user}",
      "gists_url": "https://api.github.com/users/annette987/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/annette987/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/annette987/subscriptions",
      "organizations_url": "https://api.github.com/users/annette987/orgs",
      "repos_url": "https://api.github.com/users/annette987/repos",
      "events_url": "https://api.github.com/users/annette987/events{/privacy}",
      "received_events_url": "https://api.github.com/users/annette987/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T01:26:34Z",
    "updated_at": "2018-11-19T01:26:34Z",
    "author_association": "NONE",
    "body": "My actual query is more complicated than that and involves multiple tables. So I can't just use pd.read_sql_table. \r\nWhat I am doing at the moment is just converting None to NaN in the dataframe:\r\n`df.replace([None], np.nan, inplace=True)`"
  }
]
