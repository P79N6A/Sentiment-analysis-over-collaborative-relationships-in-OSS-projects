[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413192575",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22367#issuecomment-413192575",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22367",
    "id": 413192575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzE5MjU3NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T13:10:19Z",
    "updated_at": "2018-08-15T13:10:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's actually already fixed on #22325, aside from bool."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/413200358",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22367#issuecomment-413200358",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22367",
    "id": 413200358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzIwMDM1OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T13:39:35Z",
    "updated_at": "2018-08-15T13:39:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Essentially came down to `BoolBlock.should_store`. For \"container\" EA types like SparseDtype, `.type` will be the type of the underlying value (bool in this case). This made `BoolBlock` think it could hold `SparseArray[bool]`, which it should actually return a new `ExtensionBlock`.\r\n\r\nSo a new general rule, non-ExtensionBlock blocks shouldn't think they can store ExtensionArrays.\r\n\r\n```diff\r\ndiff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py\r\nindex f320258e3..4f58a576f 100644\r\n--- a/pandas/core/internals/blocks.py\r\n+++ b/pandas/core/internals/blocks.py\r\n@@ -2298,7 +2298,8 @@ class TimeDeltaBlock(DatetimeLikeBlockMixin, IntBlock):\r\n         return result\r\n \r\n     def should_store(self, value):\r\n-        return issubclass(value.dtype.type, np.timedelta64)\r\n+        return (issubclass(value.dtype.type, np.timedelta64) and\r\n+                not is_extension_array_dtype(value))\r\n \r\n     def to_native_types(self, slicer=None, na_rep=None, quoting=None,\r\n                         **kwargs):\r\n@@ -2337,7 +2338,8 @@ class BoolBlock(NumericBlock):\r\n         return isinstance(element, (bool, np.bool_))\r\n \r\n     def should_store(self, value):\r\n-        return issubclass(value.dtype.type, np.bool_)\r\n+        return (issubclass(value.dtype.type, np.bool_) and not\r\n+                is_extension_array_dtype(value))\r\n \r\n     def replace(self, to_replace, value, inplace=False, filter=None,\r\n                 regex=False, convert=True, mgr=None):\r\n@@ -2879,7 +2881,8 @@ class DatetimeBlock(DatetimeLikeBlockMixin, Block):\r\n \r\n     def should_store(self, value):\r\n         return (issubclass(value.dtype.type, np.datetime64) and\r\n-                not is_datetimetz(value))\r\n+                not is_datetimetz(value) and\r\n+                not is_extension_array_dtype(value))\r\n \r\n     def set(self, locs, values, check=False):\r\n         \"\"\"\r\n```"
  }
]
