[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377607565",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20513#issuecomment-377607565",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20513",
    "id": 377607565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzYwNzU2NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T19:51:20Z",
    "updated_at": "2018-03-30T19:51:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "we recently did something like this for tolerance. can you show a full-on example here (small, but complete), meaning you show what you are currently doing and a possible syntax of what could be."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377710409",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20513#issuecomment-377710409",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20513",
    "id": 377710409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzcxMDQwOQ==",
    "user": {
      "login": "epa095",
      "id": 1576438,
      "node_id": "MDQ6VXNlcjE1NzY0Mzg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1576438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epa095",
      "html_url": "https://github.com/epa095",
      "followers_url": "https://api.github.com/users/epa095/followers",
      "following_url": "https://api.github.com/users/epa095/following{/other_user}",
      "gists_url": "https://api.github.com/users/epa095/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epa095/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epa095/subscriptions",
      "organizations_url": "https://api.github.com/users/epa095/orgs",
      "repos_url": "https://api.github.com/users/epa095/repos",
      "events_url": "https://api.github.com/users/epa095/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epa095/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-31T17:42:02Z",
    "updated_at": "2018-03-31T17:42:02Z",
    "author_association": "NONE",
    "body": "Here is a example implementation showing the behaviour I want. I imagine implementing it as part of reindex would be significantly more efficient. \r\n```python\r\ndef example_reindex(df, idx, method):\r\n    \"\"\" Reindexes the given dataframe with index = idx, and per column methods as given in the map 'method', which\r\n    must be a map from column names in df to either a tuple (\"fill_value\", value_to_fill) which will fill the column\r\n    with value_to_fill, or to one of the methods accepted by pandas.Series.reindex:\r\n    {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}.\"\r\n    \"\"\"\r\n    if isinstance(method, str) or method is None:\r\n        return df.reindex(idx, method=method)\r\n    if not isinstance(method, dict):\r\n        raise ValueError(\"Method must be dict, string, or None\")\r\n\r\n    #  Reindex each column by themselves and remember the result in reindexed_columns\r\n    reindexed_columns = dict()\r\n    for column_name in method:\r\n        column_method = method[column_name]\r\n        if isinstance(column_method, tuple):\r\n            (_, fill_value) = column_method\r\n            reindexed_columns[column_name] = df[column_name].reindex(idx, fill_value=fill_value)\r\n        else:\r\n            reindexed_columns[column_name] = df[column_name].reindex(idx, method=column_method)\r\n\r\n    df = df.reindex(idx)\r\n    #  Add the reindexed columns back in\r\n    for column_name in reindexed_columns:\r\n        df[column_name] = reindexed_columns[column_name]\r\n    return df\r\n```\r\nIf we have the following dataframe (note that 1994-11-05 is missing)\r\n\r\n| numdates            |   rate |   is_main |\r\n|:--------------------|-------:|----------:|\r\n| 1994-11-03 00:00:00 |      3 |       nan |\r\n| 1994-11-04 00:00:00 |      4 |         1 |\r\n| 1994-11-06 00:00:00 |      6 |         0 |\r\n\r\nwe can run it as follows\r\n```python\r\nidx = pd.date_range(input_df.index.min(), input_df.index.max())\r\nexample_reindex(input_df, idx, method={'rate': ('fill_value', 0),\r\n                                       'is_main': 'ffill'})\r\n```\r\nand the result is \r\n\r\n| numdates            |   rate |   is_main |\r\n|:--------------------|-------:|----------:|\r\n| 1994-11-03 00:00:00 |      3 |       nan |\r\n| 1994-11-04 00:00:00 |      4 |         1 |\r\n| 1994-11-05 00:00:00 |      0 |         1 |\r\n| 1994-11-06 00:00:00 |      6 |         0 |\r\n\r\nNote:\r\n- rate is set to fill_value 0, while is_main is forward filled. \r\n- The nan in is_main is still there, and \r\n- 'rate' is still int, not casted to float\r\n\r\nIf you used reindex and then fillna the two latter points would be violated. \r\n\r\nThis is useful in all cases where you have dataframes with missing dates, and you want different interpolation methods for different columns, which can happen if the different columns represent different types of data. "
  }
]
