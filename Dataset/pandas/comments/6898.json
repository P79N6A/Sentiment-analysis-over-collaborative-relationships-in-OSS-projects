[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40706004",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6898#issuecomment-40706004",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6898",
    "id": 40706004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzA2MDA0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T11:51:46Z",
    "updated_at": "2014-04-17T11:51:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "can u show a sample use case and implementation (even if slow)?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41021232",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6898#issuecomment-41021232",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6898",
    "id": 41021232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDIxMjMy",
    "user": {
      "login": "toddrjen",
      "id": 2272878,
      "node_id": "MDQ6VXNlcjIyNzI4Nzg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2272878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toddrjen",
      "html_url": "https://github.com/toddrjen",
      "followers_url": "https://api.github.com/users/toddrjen/followers",
      "following_url": "https://api.github.com/users/toddrjen/following{/other_user}",
      "gists_url": "https://api.github.com/users/toddrjen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toddrjen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toddrjen/subscriptions",
      "organizations_url": "https://api.github.com/users/toddrjen/orgs",
      "repos_url": "https://api.github.com/users/toddrjen/repos",
      "events_url": "https://api.github.com/users/toddrjen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toddrjen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-22T09:42:55Z",
    "updated_at": "2014-04-22T09:42:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, say someone has 15 experiments (multindex 1), each with 20 experimental conditions (multindex 2), and they record 100 trials for each condition (columns).  The person wants to publish this data, so they need to get the mean and error range for the data.  So they need to collapse along condition, getting both the mean and standard error.  With this approach, the user could use experiment as index and condition as column.\n\nHere is a simple example (using a lambda for the implementation):\n\n``` python\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom uncertainties import ufloat\n\nind = pd.MultiIndex.from_product([np.arange(15), np.arange(20)])\ndf = pd.DataFrame(np.random.randn(15*20,100), index=ind, columns=np.arange(100))\nres = df.apply(lambda x: ufloat(np.mean(x), stats.sem(x)), axis=1).unstack()\n```\n\nThis becomes much more important for more complicated analyses.  Doing manipulations of data with many-level multi-indexes becomes much, much harder if you also have to manage a second error table, column, or index.  I can give an example for that as well, but it will be longer.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41049257",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6898#issuecomment-41049257",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6898",
    "id": 41049257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDQ5MjU3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-22T14:51:52Z",
    "updated_at": "2014-04-22T14:51:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Using `uncertainties` makes all of your data `object` dtype, negating pretty much all of pandas efficiencies. Instead something like this would work (for the multi-level slicing this requires master/0.14), coming soon:\n\n```\nIn [20]: ind = pd.MultiIndex.from_product([np.arange(5), np.arange(2)])\n\nIn [21]: cols = pd.MultiIndex.from_product([np.arange(5), ['value','error']])\n\nIn [22]: df = pd.DataFrame(np.random.randn(5*2,10), index=ind, columns=cols).sortlevel().sortlevel(axis=1)\n\nIn [25]: df\nOut[25]: \n            0                   1                   2                   3                   4          \n        error     value     error     value     error     value     error     value     error     value\n0 0  1.684247 -0.768990  1.745643 -0.460112  0.547230  1.204622 -0.645565  0.767882  1.038075 -0.004924\n  1 -1.038735  1.268667  0.288511 -0.056458  0.052893 -0.181397 -0.416198 -0.117648  1.092671 -0.085161\n1 0 -1.027876 -0.504794  1.145330  0.149904 -1.735783 -1.292422  0.111824  1.213310 -0.165664 -1.644664\n  1  0.356636  1.076804 -2.442231 -0.694032 -0.531767 -0.177785  0.911135 -0.477786  0.677379  1.758926\n2 0  1.720729  0.170775  0.348073 -1.441842  1.377164 -1.434962 -1.332751 -0.681837 -0.169488 -0.847964\n  1 -1.260312 -0.000384  0.333589  0.338253 -0.871582 -0.813060 -0.056995 -0.653637 -0.937449  1.143176\n3 0 -1.457335 -1.102507  0.691152 -2.469394  0.615936  1.310255  1.306816 -0.035045  0.435257  1.455832\n  1  1.855440  0.923589 -1.061110  0.995526  0.126394 -0.579312 -1.445212 -1.391565  1.575050  0.071588\n4 0 -0.155716  0.917270 -0.257610 -1.180983  1.356626 -0.077675  0.973249 -0.418510 -0.607244 -0.927557\n  1 -1.305623  0.737657 -0.891516  0.893158  1.387652 -1.825456  1.406268 -0.827154  0.147286 -1.361848\n\n[10 rows x 10 columns]\n\nIn [23]: df.loc[:,(slice(None),'error')]\nOut[23]: \n            0         1         2         3         4\n        error     error     error     error     error\n0 0  1.684247  1.745643  0.547230 -0.645565  1.038075\n  1 -1.038735  0.288511  0.052893 -0.416198  1.092671\n1 0 -1.027876  1.145330 -1.735783  0.111824 -0.165664\n  1  0.356636 -2.442231 -0.531767  0.911135  0.677379\n2 0  1.720729  0.348073  1.377164 -1.332751 -0.169488\n  1 -1.260312  0.333589 -0.871582 -0.056995 -0.937449\n3 0 -1.457335  0.691152  0.615936  1.306816  0.435257\n  1  1.855440 -1.061110  0.126394 -1.445212  1.575050\n4 0 -0.155716 -0.257610  1.356626  0.973249 -0.607244\n  1 -1.305623 -0.891516  1.387652  1.406268  0.147286\n\n[10 rows x 5 columns]\n\nIn [24]: df.loc[:,0]\nOut[24]: \n        error     value\n0 0  1.684247 -0.768990\n  1 -1.038735  1.268667\n1 0 -1.027876 -0.504794\n  1  0.356636  1.076804\n2 0  1.720729  0.170775\n  1 -1.260312 -0.000384\n3 0 -1.457335 -1.102507\n  1  1.855440  0.923589\n4 0 -0.155716  0.917270\n  1 -1.305623  0.737657\n\n[10 rows x 2 columns]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41138310",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6898#issuecomment-41138310",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6898",
    "id": 41138310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTM4MzEw",
    "user": {
      "login": "toddrjen",
      "id": 2272878,
      "node_id": "MDQ6VXNlcjIyNzI4Nzg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2272878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toddrjen",
      "html_url": "https://github.com/toddrjen",
      "followers_url": "https://api.github.com/users/toddrjen/followers",
      "following_url": "https://api.github.com/users/toddrjen/following{/other_user}",
      "gists_url": "https://api.github.com/users/toddrjen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toddrjen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toddrjen/subscriptions",
      "organizations_url": "https://api.github.com/users/toddrjen/orgs",
      "repos_url": "https://api.github.com/users/toddrjen/repos",
      "events_url": "https://api.github.com/users/toddrjen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toddrjen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-23T08:51:35Z",
    "updated_at": "2014-04-23T08:51:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, that is the problem with the current situation.  The idea of this issue is to improve the current situation by creating values with uncertainties in a more integrated, reliable, and useful way.  \n\nYour proposal works fine for simple situations at the end of the analysis.  But if you want to do manipulations, it becomes much more difficult.  If you want to do manipulations with a many-level multiindex, it becomes extremely difficult.   Under this proposal, these manipulations would be no more difficult than they are for single values.\n\nIf you want to do mathematics, such as adding or multiplying two dataframes, your proposal is also far more difficult.  Mathematical operations on means and mathematical operations on standard errors are different.  There are mathematical rules for handling this, called error propogation, that are handled automatically by the uncertainties package, but under your proposal would need to be looked up and coded explicitly.  Also, using uncertainties just involves doing operations on the dataframe, while under your proposal you would need to split out the mean and error columns, do different mathematical operations on each, then recombine them.  You can do this in pandas, but it is much more difficult than just df1*df2.\n\nSince working with errors is almost universal in science, I think having strong, built-in support for it in pandas is important.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41155994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6898#issuecomment-41155994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6898",
    "id": 41155994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTU1OTk0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-23T12:45:32Z",
    "updated_at": "2014-04-23T12:45:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@toddrjen its a nice idea\n\nnot sure how efficient  the `uncertainties` package handles these types of things. these are going to be represented as `object` dtype by pandas/numpy, so not sure efficient this would be. you might want to ask the author / investigate this.\n\nIf this could be integrated as a pseuo-dtype into numpy (or perhaps cythonize some hotspots) that might help.\n\nSo would need some performance tests to determine feasibility.\n"
  }
]
