[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/199968932",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-199968932",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 199968932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTk2ODkzMg==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T19:10:50Z",
    "updated_at": "2016-03-22T19:25:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Perhaps what the original implementation was after is `pd.Series(np.arange(s.count()), index=s.index[np.argsort(s.values)[:s.count()]]).reindex(s.index, fill_value=-1)`:\n\n```\nIn [60]: s\nOut[60]:\na    200.0\nb    100.0\nc    400.0\nd    500.0\ne      NaN\nf    300.0\ndtype: float64\n\nIn [61]: pd.Series(np.arange(s.count()),\n                   index=s.index[np.argsort(s.values)[:s.count()]]).\\\n             reindex(s.index, fill_value=-1)\nOut[61]:\na    1\nb    0\nc    3\nd    4\ne   -1\nf    2\ndtype: int32\n```\n\nIf one does go with this implementation (where the values represent the ordering), perhaps one should rename the method something other than `argsort` to avoid confusion with `np.argsort` (where the values represent indices).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/199989150",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-199989150",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 199989150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTk4OTE1MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T19:54:04Z",
    "updated_at": "2016-03-22T19:54:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p this is exactly the same as `np.argsort`. Its not implemented at all like you show. Its just a simple mask filled with `.argsort`.  And it behaves quite close to `np.argsort`. This is not really used much in pandas as the Index generally serves this purpose.\n\n`s[s.argsort()]` is of course non-sensical. The -1 are the nan placements.\n\nNot really sure what the issue is about here. If/when we have integer NA then these -1's could be NaN. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200005080",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-200005080",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 200005080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDAwNTA4MA==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T20:24:21Z",
    "updated_at": "2016-03-22T20:24:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "`s.argsort()` is not exactly the same as `np.argsort()` in the presence of `NaN`s, as shown by the difference between `[76]` and `[77]`:\n\n```\nIn [75]: s.values\nOut[75]: array([ 200.,  100.,  400.,  500.,   nan,  300.])\n\nIn [76]: np.argsort(s.values)\nOut[76]: array([1, 0, 5, 2, 3, 4], dtype=int64)\n\nIn [77]: s.argsort().values\nOut[77]: array([ 1,  0,  4,  2, -1,  3], dtype=int64)\n```\n\nThe output of `[76]` makes sense:\n\n```\nIn [80]: s[np.argsort(s.values)]\nOut[80]:\nb    100.0\na    200.0\nf    300.0\nc    400.0\nd    500.0\ne      NaN\ndtype: float64\n```\n\nThe output of `[77]` does not make sense, and is not useful.\n\nPut another way, can you explain what the output of `[77]` means?\nCan you give me an example of how one would use this (a) at all; (b) in a way that uses the fact that `s.argsort()` si a `Series` as opposed to simply a NumPy `array`?\n\nThe documentation just says \"Overrides ndarray.argsort. Argsorts the value, omitting NA/null values, and places the result in the same locations as the non-NA values\". My point is that (a) omitting NA/null values the way that it does before calling `np.argsort`, and (b) placing the result back in the same locations as the non-NA values leads to nonsensical results. Technically it does exactly what the documentation says, but -- going out on a limb here -- that can't possibly be what anyone really wants. The result simply makes no sense.\n\nAt the risk of repeating myself a bit, the values produced by `np.argsort` are (integer) _indices_ into the values array, ordered by the values of the array. Placing those integer indices back into the Series with the original index simply makes no sense -- even in the absence of `NaN`s. Consider:\n\n```\nIn [86]: s1\nOut[86]:\na    200.0\nb    100.0\nc    400.0\nd    500.0\ne    900.0\nf    300.0\ndtype: float64\n\nIn [87]: s1.argsort()\nOut[87]:\na    1\nb    0\nc    5\nd    2\ne    3\nf    4\ndtype: int64\n```\n\nIn what way should `f` be associated with `4`?\n\nThe presence of `NaN`s simply messes things up further.\n\nI think the only two plausible implementations of `argsort`:\n(1) like `np.argsort`, return a NumPy `array` with integer indices sorted by the values at their locations; or\n(2) return a `Series` with the same index as the orgiinal series, and with values indicating the ordering of the values.\nHere are examples of both (in the absence of `NaN`s, for simplicity):\n\n```\nIn [86]: s1\nOut[91]:\na    200.0\nb    100.0\nc    400.0\nd    500.0\ne    900.0\nf    300.0\ndtype: float64\n\nIn [88]: np.argsort(s1.values)\nOut[88]: array([1, 0, 5, 2, 3, 4], dtype=int64)\n\nIn [89]: pd.Series(np.arange(s1.count()), index=s1.index[np.argsort(s1.values)[:s1.count()]]).reindex(s1.index, fill_value=-1)\nOut[89]:\na    1\nb    0\nc    3\nd    4\ne    5\nf    2\ndtype: int32\n```\n\nHere `f` is associated with `2` in the sense that the value at `f`, `300`, is the third (i.e. `2` when counting from `0`) smallest value in the `Series`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200009994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-200009994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 200009994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDAwOTk5NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T20:35:36Z",
    "updated_at": "2016-03-22T20:35:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "and I'll ask you back, what is the purpose of doing `.argsort()` in the first place? you can simply `.sort_values()`. In numpy it makes sense, but in pandas I don't even see a use for it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200010295",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-200010295",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 200010295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDAxMDI5NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T20:36:42Z",
    "updated_at": "2016-03-22T20:37:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "To be honest its almost an internal routine.\n\n```\nIn [11]: s[s.argsort()!=-1]\nOut[11]: \na    200.0\nb    100.0\nc    400.0\nd    500.0\nf    300.0\ndtype: float64\n```\n\n```\nIn [12]: s.loc[s.argsort().index]\nOut[12]: \na    200.0\nb    100.0\nc    400.0\nd    500.0\ne      NaN\nf    300.0\ndtype: float64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200027296",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-200027296",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 200027296,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDAyNzI5Ng==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T21:06:49Z",
    "updated_at": "2016-03-22T21:10:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Of course you don't use the Pandas `s.argsort()` -- it doesn't make sense!!! :-)\n\nSeriously:\n1. `s[s.argsort()!=-1]` is simply the same as `s.dropna()`, no? So that doesn't really merit a separate function. (Just to be clear, this doesn't sort anything.) You could do `s.dropna()[s.argsort()[s.argsort()!=-1]]`, but that is (i) really a mouthful to get around faulty `NaN` handling; and (ii) just uses the values and not the `Series` structure of `s.argsort()`.\n2. `np.argsort(s.values)` is useful. Suppose `s1` and `s2` are two `Series` with the same index, and you want the values in `s2` corresponding to the 100 smallest values in `s1`: `s2[np.argsort(s1.values)[:100]]`. Seems legit to me.\n3. My proposed alternative to `Series.argsort()`, `new_argsort()` below, is similarly (alternatively?) useful if you want to know the order of a given element. i.e. suppose `s` is a series of stock market caps, with `s.index` being tickers, then `(-s).new_argsort()['MSFT']` being `8` tells you that `'MSFT'` is the 9th largest stock (a value of `-1` would indicate an original value of `NaN`). This too seems legit to me. (If I had to guess, I would guess that whoever implemented `Series.argsort()` thought that this is what they were implementing.)\n\n```\n    def new_argsort(self):\n        return pd.Series(np.arange(self.count()),\n                         index=self.index[np.argsort(self.values)[:self.count()]]).\\\n                   reindex(self.index, fill_value=-1)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200030003",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-200030003",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 200030003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDAzMDAwMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T21:10:47Z",
    "updated_at": "2016-03-22T21:10:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p 2 you should simply use `nlargest/nsmallest`. these are orders of magnitute faster.\n\nwhy go to all this trouble, and if you really really thing you actually need `.argsort` (which you don't), then just do\n\n`s.loc[s.argsort().index]` makes WAY more sense in pandas. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200035101",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-200035101",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 200035101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDAzNTEwMQ==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T21:20:16Z",
    "updated_at": "2016-03-22T21:20:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I didn't realize `nlargest/nsmallest` existed. I may well use them. I stumbled on `argsort` first, and wasted quite a bit of time before I realized it didn't do anything right.\n\nSince `s.argsort().index` is always identically equal to `s.index`, I'm not sure what your example is meant to show.\n\nBut to be clear, the existing `s.argsort()` isn't simply useless in the sense that it's redundant; it's useless in the sense that it can't possibly be the right answer to any legitimate question, and any use of it will almost certainly lead to incorrect results.\n\nTo prevent someone else going though the headache I just did in misusing it, I strongly suggest that it (i) simply be deleted; (ii) be redefined to return `np.argsort(self.values)` (a NumPy `array`, not a `Series`); or (iii) be redefined as in my `new_argsort()` above.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200036439",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-200036439",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 200036439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDAzNjQzOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T21:25:34Z",
    "updated_at": "2016-03-22T21:25:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p I tell you what, why don't you add an example (or 2) to `.argsort`. to clarify. It DOES exactly follow the doc-string. My point is that its not really useful in pandas context.\n\nMy example is showing idempotency of the tranform (as you showed `s[np.argsort(s.values)]`. That's exactly the point though, when you have a linked index & values you rarely (if ever) need to actually explicity use indexers directly, instead you use the index.\n\nI'll move this to 0.19.0 (though would take a doc-PR in the meantime). and we can rediscuss then as any changes would not be done until then (as these are all API changes).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200170042",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-200170042",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 200170042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDE3MDA0Mg==",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-23T04:33:43Z",
    "updated_at": "2016-03-23T04:33:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll think about what I think should be done for 0.19.0, and perhaps take a stab at it.\n\nI can't think of a doc-PR for the existing `Series.argsort()` other than a bold flashing red warning: \"Don't use this function! It doesn't do anything you could possibly want. Use the NumPy `Series.values.argsort()` instead.\"\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/480198570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12694#issuecomment-480198570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12694",
    "id": 480198570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDE5ODU3MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T08:48:37Z",
    "updated_at": "2019-04-05T08:48:37Z",
    "author_association": "MEMBER",
    "body": "Going through some argsort/sorting issues, and I also stumbled on this. I agree with @seth-p that the current implementation of `Series.argsort` is very strange and basically useless.\r\n(and yes, even if Series.argsort behaved normally, you should almost never have to use it as you can use `sort_values`, `nsmallest`, etc directly. But the method does exist, so then at least it should make sense)\r\n\r\nIt is also true that it behaves as documented: *\"Argsorts the value, omitting NA/null values, and places the result in the same locations as the non-NA values\"*. \r\nBut, this is very different to how `np.argsort` handles NA-values, so this is a) unexpected and b) I also don't see the usefulness of this strange NA handling\r\n\r\nSmall example:\r\n\r\n```\r\nIn [8]: s = pd.Series([2, 1, np.nan, 1]) \r\n\r\nIn [9]: s  \r\nOut[9]: \r\n0    2.0\r\n1    1.0\r\n2    NaN\r\n3    1.0\r\ndtype: float64\r\n\r\nIn [10]: s.argsort()   \r\nOut[10]: \r\n0    1\r\n1    2\r\n2   -1\r\n3    0\r\ndtype: int64\r\n```\r\n\r\nSo because the result of `argsort` is determined on the values of `s` without the missing value, there is no correct link between the values in the `argsort` result and the original series. Eg the 1, 2, 0 in the above result don't match with positions in the original Series, but they match positions in `s.dropna()`.\r\n\r\nI think ideally we should fix this. But, the question is how to do this?\r\nWe could deprecate that behaviour (specifically when there are NaNs), but how would we let users handle that deprecation? Because we can warn this will change in the future, but if they already want to opt in for the future behaviour, we would need to add a specific keyword for triggering this. \r\n"
  }
]
