[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396386174",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21429#issuecomment-396386174",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21429",
    "id": 396386174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjM4NjE3NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-11T21:02:15Z",
    "updated_at": "2018-06-11T21:02:15Z",
    "author_association": "MEMBER",
    "body": "> FYI, this link from the issue template is giving a 404\r\n\r\n@jreback @jorisvandenbossche : I thought we were still pushing builds of the docs on Travis?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396388425",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21429#issuecomment-396388425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21429",
    "id": 396388425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjM4ODQyNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-11T21:10:27Z",
    "updated_at": "2018-06-11T21:10:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I thought we were still pushing builds of the docs on Travis?\r\n\r\nFailing with https://travis-ci.org/pandas-dev/pandas/jobs/390828331#L2234 till https://github.com/pandas-dev/pandas/pull/21397 is merged.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396388931",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21429#issuecomment-396388931",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21429",
    "id": 396388931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjM4ODkzMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-11T21:12:24Z",
    "updated_at": "2018-06-11T21:12:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "w.r.t. the original issue, `2010-01-07` is not filled since it's beyond the last original valid. `bfill` *back*fills valid value, and there isn't a valid value past 2010-01-07, so there's nothing to backfill. @bzier is there anything in the docstring that could better explain that? `bfill` and `ffill` are concepts most pandas users will see first via fillna: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.fillna.html"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396416476",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21429#issuecomment-396416476",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21429",
    "id": 396416476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjQxNjQ3Ng==",
    "user": {
      "login": "bzier",
      "id": 714528,
      "node_id": "MDQ6VXNlcjcxNDUyOA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/714528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bzier",
      "html_url": "https://github.com/bzier",
      "followers_url": "https://api.github.com/users/bzier/followers",
      "following_url": "https://api.github.com/users/bzier/following{/other_user}",
      "gists_url": "https://api.github.com/users/bzier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bzier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bzier/subscriptions",
      "organizations_url": "https://api.github.com/users/bzier/orgs",
      "repos_url": "https://api.github.com/users/bzier/repos",
      "events_url": "https://api.github.com/users/bzier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bzier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-11T23:18:17Z",
    "updated_at": "2018-06-11T23:18:17Z",
    "author_association": "NONE",
    "body": "@TomAugspurger Thanks for the clarification, that makes sense.\r\n\r\nI am brand new to pandas, so hadn't been exposed to `bfill` or `ffill` yet. I wound up on the reindex docs from the very bottom of this pandas intro [notebook](https://colab.research.google.com/notebooks/mlcc/intro_to_pandas.ipynb) from the Google Machine Learning Crash Course. The rest of that intro made sense, but they piqued my interest with the point about string indexes, so I followed the link straight to that reindexing page.\r\n\r\n---\r\n\r\nThe reindexing docs all made sense and the examples made things clear, up to that point. I think a couple things threw me off. The first section introduces it as \r\n>we can fill in the missing values \r\n\r\nand\r\n>to fill the NaN values\r\n\r\nThis doesn't indicate that any NaN values wouldn't be filled. The note underneath then goes on to explain why the one original value was not filled (2010-01-03), but says nothing about the last value at the end. It says\r\n> This is because filling while reindexing does not look at dataframe values, but only compares the original and desired indexes\r\n\r\nwhich almost implies that (or at least I read it as) the original values will be left alone and *all* the new indexes will be filled.\r\n\r\nI think simply adding those two sentences from your response would make it clear. For those who are familiar with the fill concepts, it will seem obvious, but I think it would provide clarity for those who aren't.\r\n>`2010-01-07` is not filled since it's beyond the last original valid. `bfill` backfills valid value, and there isn't a valid value past `2010-01-07`, so there's nothing to backfill. \r\n\r\nAlternatively, perhaps just referencing the fill strategies in the earlier statement would be sufficient. Along those lines, one more clarification... the docs say\r\n>If desired, we can fill in the missing values using one of several options.\r\n\r\nDoes that mean then that if we were to specify `ffill` as the method rather than `bfill`, the results would have left the first three values as NaN and populated the `2010-01-07` result with the previous valid value of 88?\r\n\r\n---\r\n\r\nThanks again for the help."
  }
]
