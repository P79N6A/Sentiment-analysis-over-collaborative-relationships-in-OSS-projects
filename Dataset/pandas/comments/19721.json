[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366167022",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366167022",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366167022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjE2NzAyMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T07:57:25Z",
    "updated_at": "2018-02-16T07:57:25Z",
    "author_association": "MEMBER",
    "body": "Shouldn't it rather give the same as:\r\n\r\n```\r\nIn [17]: pd.factorize(['a', 'a', 'c'])\r\nOut[17]: (array([0, 0, 1]), array(['a', 'c'], dtype=object))\r\n```\r\n\r\n(the fact that it returns [0, 1] as the unique labels clearly is a bug I think, it seems to be factorizing the codes)\r\n\r\nWhen factorizing a Categorical, I would expect to get back (codes, categories), not (codes, categorical)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366211831",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366211831",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366211831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIxMTgzMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T11:29:39Z",
    "updated_at": "2018-02-16T11:29:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah returning the factorized codes is certainly a bug.\n\nI ask because we need to think about how to handle other 3rd party extension array types, and we’re currently inconsistent internally.\n\n________________________________\nFrom: Joris Van den Bossche <notifications@github.com>\nSent: Friday, February 16, 2018 1:57:30 AM\nTo: pandas-dev/pandas\nCc: Tom Augspurger; Author\nSubject: Re: [pandas-dev/pandas] API: Should factorize(categorical) return a Categorical for uniques? (#19721)\n\n\nShouldn't it rather give the same as:\n\nIn [17]: pd.factorize(['a', 'a', 'c'])\nOut[17]: (array([0, 0, 1]), array(['a', 'c'], dtype=object))\n\n\n(the fact that it returns [0, 1] as the unique labels clearly is a bug I think, it seems to be factorizing the codes)\n\nWhen factorizing a Categorical, I would expect to get back (codes, categories), not (codes, categorical)\n\n—\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366167022>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABQHIrPbUAM5lHs1b0b0kGieUhZegY8Eks5tVTTpgaJpZM4SHhOm>.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366221023",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366221023",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366221023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIyMTAyMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T12:17:57Z",
    "updated_at": "2018-02-16T12:17:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some other weirdness\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: pd.factorize(pd.Categorical(['a', 'a', 'b']))\r\nOut[2]: (array([0, 0, 1]), array([0, 1]))\r\n\r\nIn [3]: pd.factorize(pd.Index(pd.Categorical(['a', 'a', 'b'])))\r\nOut[3]:\r\n(array([0, 0, 1]),\r\n CategoricalIndex([nan, nan], categories=['a', 'b'], ordered=False, dtype='category'))\r\n\r\nIn [4]: pd.factorize(pd.Series(pd.Categorical(['a', 'a', 'b'])))\r\nOut[4]: (array([0, 0, 1]), Int64Index([0, 1], dtype='int64'))\r\n```\r\n\r\nOut[3] should be `CategoricalIndex(['a', 'b'])` or `Categorical(['a', 'b'])`, or `ndarray(['a', 'b'])`,\r\n\r\nOut[4] should be similar."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366225220",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366225220",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366225220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIyNTIyMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T12:40:15Z",
    "updated_at": "2018-02-16T12:40:15Z",
    "author_association": "MEMBER",
    "body": "In *general*, I think the type of the uniques should be the same array-like as the input (or in case of Series/Index, the array-like that is backing the Series). \r\nSo eg for DatetimeIndex with tz or Series of such values, this should in the future give a DatetimeTZArray (and that it now gives a DatetimeIndex is then logical I think). For numerical Series/Index/array, it is a normal numpy array. \r\nSo in the future for a certain extension type (Index with such values, Series with such values of Array class itself), would return an extension array of its type?\r\n\r\nBut, I would personally deviate from this rule for Categoricals, and in those cases return the array-like of which the categories are made up, instead of a Categorical itself."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366228765",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366228765",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366228765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIyODc2NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T12:58:37Z",
    "updated_at": "2018-02-16T12:58:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "the return values now are all as expected\r\nby definition factorizing gives u a categorical return data ie codes and uniques (categories); further the categories are all array like "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366229272",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366229272",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366229272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIyOTI3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T13:01:09Z",
    "updated_at": "2018-02-16T13:01:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm actually these do look a bit odd\r\nfactorizing should be in the categories not the codes\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366229313",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366229313",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366229313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIyOTMxMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T13:01:22Z",
    "updated_at": "2018-02-16T13:01:22Z",
    "author_association": "MEMBER",
    "body": "> the return values now are all as expected\r\nby definition factorizing gives u a categorical return data ie codes and uniques (categories); further the categories are all array like\r\n\r\nJeff, did you look at the examples Tom showed? It is clearly *not* returning the \" uniques (categories)\" in case of categorical input. \r\n\r\nAnd the general question is not only about the current behaviour, but what to do for the *new* extension arrays"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366229574",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366229574",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366229574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIyOTU3NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T13:02:43Z",
    "updated_at": "2018-02-16T13:02:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cross posted :)\r\n\r\nLet's limit it to just fixing\r\n\r\n```python\r\nIn [2]: pd.factorize(pd.Series(pd.Categorical(['a', 'a'])))\r\nOut[2]: (array([0, 0]), Int64Index([0], dtype='int64'))\r\n```\r\n\r\nto return the unique categories.\r\n\r\n```python\r\nOut[2]: (array([0, 0]), array(['a']))\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366231729",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366231729",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366231729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIzMTcyOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T13:13:44Z",
    "updated_at": "2018-02-16T13:13:44Z",
    "author_association": "MEMBER",
    "body": "Yes, agreed the above should be fixed. \r\n\r\nBut, I think we still need to discuss what it should do for ExtensionArrays. \r\nCurrently the docstring says that ndarray is returned for arrays, and Index for Index/Series, which is also what it does:\r\n\r\n```\r\nIn [74]: for vals in [np.array([0, 1, 2]), np.array(['a', 'b', 'c']), pd.DatetimeIndex([1, 2, 3], tz='UTC'), pd.Categorical(['a', 'b', 'a'])]:\r\n    ...:     for cont in [lambda x: x, pd.Series, pd.Index]:\r\n    ...:         obj = cont(vals)\r\n    ...:         codes, uniques = pd.factorize(obj)\r\n    ...:         print(vals.dtype, type(obj).__name__, '  ->  ', type(uniques).__name__)\r\n    ...:         \r\n    ...:         \r\nint64 ndarray   ->   ndarray\r\nint64 Series   ->   Int64Index\r\nint64 Int64Index   ->   Int64Index\r\n<U1 ndarray   ->   ndarray\r\n<U1 Series   ->   Index\r\n<U1 Index   ->   Index\r\ndatetime64[ns, UTC] DatetimeIndex   ->   DatetimeIndex  # this deviation is normal since I used index as input (since there is no array-like yet)\r\ndatetime64[ns, UTC] Series   ->   DatetimeIndex\r\ndatetime64[ns, UTC] DatetimeIndex   ->   DatetimeIndex\r\ncategory Categorical   ->   ndarray\r\ncategory Series   ->   Int64Index\r\ncategory CategoricalIndex   ->   CategoricalIndex\r\n```\r\n\r\nBut, for a new ExtensionArray, I don't think we want to return an Index? As for now I think we will not yet support an extension array to be stored in an Index? Shouldn't it rather be a instance of the ExtensionArray itself (holding the unique values)?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366232271",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366232271",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366232271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIzMjI3MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T13:16:24Z",
    "updated_at": "2018-02-16T13:16:24Z",
    "author_association": "MEMBER",
    "body": "> But, for a new ExtensionArray, I don't think we want to return an Index? As for now I think we will not yet support an extension array to be stored in an Index? Shouldn't it rather be a instance of the ExtensionArray itself (holding the unique values)?\r\n\r\nAlthough, of course, in the idea that those unique values will typically be not that many in number (or at least much shorter than the input array), it is maybe not a problem to have a materialized ExtensionArray stored in Index. \r\n(on the other hand, I think array-likes would be a more logical return value here, and I think we only return Index because of the absence of arrays likes for all types up to now)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366233478",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-366233478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 366233478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjIzMzQ3OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T13:22:09Z",
    "updated_at": "2018-02-16T13:22:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> As for now I think we will not yet support an extension array to be stored in an Index?\r\n\r\nCorrect, though there was interest in that on Twitter.\r\n\r\n> Shouldn't it rather be a instance of the ExtensionArray itself (holding the unique values)?\r\n\r\nI see use-cases for either ndarray[object] or ExtensionArray, since they support different operations. Does this warrant a new keyword to `factorize`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369010038",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-369010038",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 369010038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAxMDAzOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T20:10:33Z",
    "updated_at": "2018-02-27T20:10:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm revisiting this now. I think that the rule should be that `uniques` has the same type as the input (except `Series` -> `Index`)\r\n\r\n- factorize(ndarray)[1] -> ndarray\r\n- factorize(ExtensionArray)[1] -> ExtensionArray\r\n- factorize(Serise/Indxe)[1] -> Index\r\n\r\nIn particular, we'd change `pd.factorize(Categorical)` to return a `Categorical` for uniques.\r\n\r\nConsider the case of unobserved categories. I'd like to treat these two arrays differently\r\n\r\n```python\r\nIn [6]: c1 = pd.Categorical(['a', 'a', 'b'], categories=['a', 'b'])\r\n\r\nIn [7]: c2 = pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])\r\n```\r\n\r\nIf we return an `ndarray` for uniques, these will be the same:\r\n\r\n```\r\nIn [8]: pd.factorize(c1)[1]\r\nOut[8]: array(['a', 'b'], dtype=object)\r\n\r\nIn [9]: pd.factorize(c2)[1]\r\nOut[9]: array(['a', 'b'], dtype=object)\r\n```\r\n\r\nBut if we return a `Categorical`, we can preserve the unobsesrved categories in `uniques.dtype`. That also would avoid the somewhat strange situation when moving to a `CategoricalIndex`\r\n\r\n```python\r\nIn [10]: pd.factorize(pd.CategoricalIndex(c1))[1]\r\nOut[10]: CategoricalIndex(['a', 'b'], categories=['a', 'b'], ordered=False, dtype='category')\r\n\r\nIn [11]: pd.factorize(pd.CategoricalIndex(c2))[1]\r\nOut[11]: CategoricalIndex(['a', 'b'], categories=['a', 'b', 'c'], ordered=False, dtype='category')\r\n```\r\n\r\nIt seems strange to be that the result dtype would change based on the container (to be clear, I'm OK with the output *container* changing from Categorical -> CategoricalIndex. But I'd like `pd.factorize(cat)[1].dtype` to match `pd.factorize(cat_index)[1].dtype)`.)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369017054",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-369017054",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 369017054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAxNzA1NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T20:34:52Z",
    "updated_at": "2018-02-27T20:34:52Z",
    "author_association": "MEMBER",
    "body": "I still think that `factorize(Series[ExtensionArray])[1] -> ExtensionArray` might make more sense than returning an Index.\r\n\r\n> It seems strange to be that the result dtype would change based on the container (to be clear, I'm OK with the output container changing from Categorical -> CategoricalIndex. But I'd like pd.factorize(cat)[1].dtype to match pd.factorize(cat_index)[1].dtype).)\r\n\r\nAgreed that the dtype should be the same. \r\nBut here, I also find it strange why `factorize(categorical)` would return a Categorical, while `factorize(Series[categorical])` would return CategoricalIndex. I mean, I don't see any justification or logic for this difference? (apart from historical reasons, which might be enough to keep it like that and do the same for ExtensionArrays ..)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369018663",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19721#issuecomment-369018663",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19721",
    "id": 369018663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAxODY2Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T20:41:05Z",
    "updated_at": "2018-02-27T20:42:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> apart from historical reasons\r\n\r\n100% agreed. If I were starting from scratch I would say `factorize(series)[1] -> array` (ndarray or ExtensionArray). I'm just not sure that changing it is worthwhile. And why stop there? Shouldn't `factorize(index)` return an array? Index and Series are both just containers, so why box one and not the other?\r\n\r\nI'll think about if there's a deprecation path, and if we even want to go down this path."
  }
]
