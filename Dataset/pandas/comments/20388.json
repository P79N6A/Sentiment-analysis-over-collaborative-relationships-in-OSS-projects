[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373863372",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20388#issuecomment-373863372",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20388",
    "id": 373863372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg2MzM3Mg==",
    "user": {
      "login": "karthik1024",
      "id": 4536706,
      "node_id": "MDQ6VXNlcjQ1MzY3MDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4536706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karthik1024",
      "html_url": "https://github.com/karthik1024",
      "followers_url": "https://api.github.com/users/karthik1024/followers",
      "following_url": "https://api.github.com/users/karthik1024/following{/other_user}",
      "gists_url": "https://api.github.com/users/karthik1024/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karthik1024/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karthik1024/subscriptions",
      "organizations_url": "https://api.github.com/users/karthik1024/orgs",
      "repos_url": "https://api.github.com/users/karthik1024/repos",
      "events_url": "https://api.github.com/users/karthik1024/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karthik1024/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T22:36:47Z",
    "updated_at": "2018-03-16T22:36:47Z",
    "author_association": "NONE",
    "body": "A possible workaround is to add a new column which seems to preserve dtype correctly, drop the old column and rename the new column to the old column.\r\n\r\n```python\r\nimport pandas as pd\r\nimport random\r\nimport numpy as np\r\n\r\ncol_data = [str(random.random() * 1e-12) for _ in range(5)]\r\nprint(col_data)\r\n\r\ndf = pd.DataFrame(col_data, columns=['A'])\r\n\r\nprint(df)\r\nprint(df.dtypes)\r\n\r\n# Correct conversion when adding a new column\r\ndf.loc[df.index, 'A1'] = [float(x) for x in col_data]\r\ndf.drop('A', axis='columns', inplace=True)\r\ndf.rename(columns={'A1':'A'}, inplace=True)\r\nprint(df)\r\nprint(df.dtypes)\r\n```\r\n```\r\n['6.90316129434e-13', '5.33955011526e-13', '9.86609415846e-13', '5.03052826465e-13', '5.54298929589e-13']\r\n                   A\r\n0  6.90316129434e-13\r\n1  5.33955011526e-13\r\n2  9.86609415846e-13\r\n3  5.03052826465e-13\r\n4  5.54298929589e-13\r\nA    object\r\ndtype: object\r\n              A\r\n0  6.903161e-13\r\n1  5.339550e-13\r\n2  9.866094e-13\r\n3  5.030528e-13\r\n4  5.542989e-13\r\nA    float64\r\ndtype: object\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374548784",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20388#issuecomment-374548784",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20388",
    "id": 374548784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDU0ODc4NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T10:32:24Z",
    "updated_at": "2018-03-20T10:32:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "So the problem is here. If you make this change, your  case will pass, and 2 existing tests will fail. I don't recall exactly why we have this round in there. We are testing whether we can cast a float to an integer. \r\n\r\nnumpy does this, which means its hard to determine whether we can actually cast correctly\r\n```\r\nIn [2]: np.array([10.0, 1.1]).astype(int)\r\nOut[2]: array([10,  1])\r\n```\r\n\r\nyou can try changing to this, though IIRC this didn't catch certain cases\r\n```\r\nIn [6]: np.array([10.0, 1.1]).astype(int, casting='safe')\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-6-772bdfcd437b> in <module>()\r\n----> 1 np.array([10.0, 1.1]).astype(int, casting='safe')\r\n\r\nTypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\r\n```\r\n\r\n```\r\n(pandas) bash-3.2$ git diff\r\ndiff --git a/pandas/core/dtypes/cast.py b/pandas/core/dtypes/cast.py\r\nindex d19f19b72..e5e659281 100644\r\n--- a/pandas/core/dtypes/cast.py\r\n+++ b/pandas/core/dtypes/cast.py\r\n@@ -74,7 +74,6 @@ def maybe_downcast_to_dtype(result, dtype):\r\n     \"\"\" try to cast to the specified dtype (e.g. convert back to bool/int\r\n     or could be an astype of float64->float32\r\n     \"\"\"\r\n-\r\n     if is_scalar(result):\r\n         return result\r\n \r\n@@ -99,7 +98,7 @@ def maybe_downcast_to_dtype(result, dtype):\r\n                 if issubclass(result.dtype.type, np.number):\r\n \r\n                     def trans(x):  # noqa\r\n-                        return x.round()\r\n+                        return x\r\n             else:\r\n                 dtype = 'object'\r\n \r\n```\r\n\r\nso investigate / PR welcome!"
  }
]
