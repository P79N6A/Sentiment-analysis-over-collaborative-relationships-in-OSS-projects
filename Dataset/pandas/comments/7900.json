[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50994202",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-50994202",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 50994202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTk0MjAy",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-03T16:00:25Z",
    "updated_at": "2014-08-03T16:00:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "A couple questions:\n1. Do you agree that the second moment function should all return NaN for a single value?\n2. Is there an existing function in Pandas that rounds tiny numbers near 0 to 0? The `ewmcorr` instability problem is due to the fact that `ewmvar` of a constant series isn't always identically zero, but rather is sometimes a tiny positive or negative number.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50994410",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-50994410",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 50994410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTk0NDEw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-03T16:07:53Z",
    "updated_at": "2014-08-03T16:07:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "see the rollimg_var stuff which 'fixes' the numerical issues part by using the Welford algorithms\n\n1) yes\n2) can u post an example \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50994898",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-50994898",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 50994898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTk0ODk4",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-03T16:25:26Z",
    "updated_at": "2014-08-03T16:25:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Re: 1). Should the answer depend on whether `bias` is True or False (for the `ewm*` functions), or whether `ddof` is 0 or 1 (for others)? Perhaps one would want the result to be either `NaN` or `0` depending on the value of `bias`/`ddof`. I'm really not sure, so want to make sure others are before delving into the code...\n\nRe: 2), I added an example to the end of the initial comment. (Sorry, I guess I should have added it as a separate comment.)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50995277",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-50995277",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 50995277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTk1Mjc3",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-03T16:38:24Z",
    "updated_at": "2014-08-03T16:38:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Re: rounding near 0, `algos.roll_var()` deals with tiny negative errors very simply:\n\n```\n                if val < 0:\n                    val = 0\n```\n\nIt doesn't deal with tiny positive errors.\n(The \"smartness\" of the algorithm has to do with the rolling aspect of the problem. I don't think it has any particular smartness for dealing with constant series (other than the test for negative errors mentioned above).)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50995660",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-50995660",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 50995660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTk1NjYw",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-03T16:52:11Z",
    "updated_at": "2014-08-03T16:52:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's an example showing that `rolling_var` also has numerical problems.\n\n```\nIn [30]: rolling_var(Series([1., 5., 5., 5.]), window=3)\nOut[30]:\n0             NaN\n1             NaN\n2    5.333333e+00\n3    8.881784e-16\ndtype: float64\n```\n\nThe final value should be identically 0.0.\n\nThis instability plays out in inconsistent results for the correlation of a constant series with itself:\n\n```\nIn [33]: rolling_corr(Series([0., 5., 5., 5.]), window=3)\nOut[33]:\n0   NaN\n1   NaN\n2     1\n3   NaN\ndtype: float64\n\nIn [34]: rolling_corr(Series([1., 5., 5., 5.]), window=3)\nOut[34]:\n0   NaN\n1   NaN\n2     1\n3     0\ndtype: float64\n```\n\nIn both cases the final value should be the correlation of [5., 5., 5.] with itself, yet one produces `NaN` and the other `0`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50997520",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-50997520",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 50997520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTk3NTIw",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-03T17:53:00Z",
    "updated_at": "2014-08-03T17:53:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "CC'ing @snth, @jaimefrio, and @kdiether, who appear to have worked on this/related code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51020045",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-51020045",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 51020045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDIwMDQ1",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T05:56:01Z",
    "updated_at": "2014-08-04T05:56:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "The check for `val < 0` in the `rolling_var` function is there because it was in the previous algorithm, and I preferred to play it safe, because a negative value would be a catastrophic failure if computing `rolling_std`, although it should be mostly unnecessary with the new algorithm.\n\nI don't think that rounding down to 0 very small values of `rolling_var` is a good idea. I have quickly hacked the implementation to keep track of consecutive identical values, see #7916. Have only tested it with your small example above, and have made no assessment of the performance impact. But I feel that if the changes are to be made in `rolling_var`, something like this should be the way to go. Rounding down to zero within `rolling_corr` wouldn't feel that bad, but maybe that is just me.\n\nThe other thing I can commit to doing is implementing a variant of Welford's method for `rolling_cov`, see e.g. [stable one-pass algorithm here](http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Covariance) so that when the rolling covariance of a series with itself is computed, the operations lead to the exact same value as computing the rolling variance of the series. This will not solve the problem of `0 / 0` being `NaN`, but at least the correlation of a series with itself will either be `1` or `NaN`, but not `0`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51074650",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-51074650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 51074650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDc0NjUw",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T15:23:09Z",
    "updated_at": "2014-08-04T15:23:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sounds good. I think that if you add an explicit check for constant series, then there's no need to round small results to 0.\n\nYeah, I have no strong opinion about whether the correlation of a constant series with itself should be `1` or `NaN` -- at least it shouldn't be `0` or `-1`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51082384",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-51082384",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 51082384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDgyMzg0",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T16:22:47Z",
    "updated_at": "2014-08-16T15:11:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Regarding the general inconsistencies between `NaN` and `0` for the second moments of a single value, on further reflection I think it makes sense that the result be `NaN` for unbiased statistics (`bias=False` or `ddof>=1`) but `0` for biased statistics (`bias=True` or `ddof=0`).\n\nI will go through the list of functions above and see how the behavior accords with this principle.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/52857744",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-52857744",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 52857744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODU3NzQ0",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-20T23:05:34Z",
    "updated_at": "2014-08-20T23:05:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "After further review (and once https://github.com/pydata/pandas/issues/7912 is addressed), I think that all biased (`bias=True` or `ddof=0`) second moments return `0` for single value, while unbiased (`bias=False` or `ddof=1`) return `NaN`, except for the following, which need to be fixed:\n- `rolling_var`, and `rolling_std` return `0.0`; and\n- `expanding_std` and `expanding_var` produce `Value Error: min_periods (2) must be <= window (1)`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/52858743",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-52858743",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 52858743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODU4NzQz",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-20T23:17:13Z",
    "updated_at": "2014-08-20T23:17:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jaimefrio, I'm going to include in https://github.com/pydata/pandas/pull/7926 a simple fix for the `rolling/expanding_var/std` problems mentioned in the immediately prior comment. This is so that I can do consistency checks across the various ewm/expanding/rolling functions. (I hope to have it checked in by tomorrow.) Feel free to do something fancier w/ `algos.roll_var()`...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/52874266",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-52874266",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 52874266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODc0MjY2",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-21T03:24:12Z",
    "updated_at": "2014-08-21T03:24:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "The `rolling_var`/`std` fix is simply to modify that `if` statement that has a `# pathological case` comment? We probably just need to to replace it by an `if nobs <= ddof: val = NaN`, as the 0 value for single observation biased variance will come up naturally, especially with the recent changes I have in the pipeline.\n\nHow will users actually get to specify this parameter? Right now it is hardcoded to unbiased estimation, `ddof = 1`.\n\nI have the fix for `rolling_var` almost done, but I still need to write some test for it. I also have a branch where I am implementing a stable algorithm for skewness and kurtosis, including a similar check for \"all non-NaNs in window are identical.\"\n\nI have lost track of all the changes you are trying to pull together, but just so you know, I silently approve of your efforts from the distance... ;)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/52878395",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-52878395",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 52878395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODc4Mzk1",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-21T04:50:33Z",
    "updated_at": "2014-08-21T04:50:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, sorry, I've been encountering lots of little inconsistencies and edge cases that I've been trying to clean up. Some of the stuff I did is already in master (#7603, #7738, #7766, #7896, #7898 (which is obsolete in view of #7977), and #7934); #8059 is ready to be merged; and #7926 should be ready soon -- it has a lot of new consistency checks for the `ewm*`, `expanding_*` and `rolling_*` functions, which have helped me identify many of these issues (e.g. #8084 and #8086, which I don't have any immediate plans to work on). Things should be a bit cleaner / more stable once I finish #7926.\n\nAs for `ddof`, some of the `rolling_` functions support it, e.g. `rolling_var`, though it's not documented. I think it would be best to make it explicit and documented in all the relevant `rolling_` and `expanding_` functions. I actually make use of it in my new tests in #7926. I'll let you know when that's ready...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/52881848",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-52881848",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 52881848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODgxODQ4",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-21T06:06:25Z",
    "updated_at": "2014-08-21T06:19:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I think I'm pretty much done w/ https://github.com/pydata/pandas/pull/7926, though I still need to rebase it after #8059 is merged into master.\n\nNote the `test_rolling_consistency()` and `test_expanding_consistency()` functions. They each do two things for various arguments (`window`, `min_periods`, `center`):\n- call `self._test_moments_consistency()`, to test mathematical consistency between the various moments; and\n- compare various `rolling/expanding_xyz()` functions with `rolling/expanding_apply()` applied to `Series/DataFrame.xyz()`.\n\nYou'll see that several tests are commented out with comments of the form `# restore once ...`. These indicate tests that are currently failing (at least in some cases), but should pass once `...` is done/fixed. \n\n@jaimefrio, note in particular that I commented out the test for the correlation of a series with itself being identically `1.` because `rolling_cov(x,x)` is not identically equal to `rolling_var(x)`, resulting in correlations that are not identically `1.`. As you observed, replacing `algos.roll_var()` with an `algos.roll_cov()`, and implementing `rolling_var()` in terms of it (the way `ewmcov()` and `ewmvar()` are now defined) should fix the problem.\n\n@jaimefrio, note also that the tests call `_test_moments_consistency()` with both unbiased (the default) and biased (with `ddof=0`) versions of `expanding/rolling_std/var()`, though unfortunately currently there's no way to call a biased version of `expanding/rolling_cov()`. (One could use the identity cov(x,y)=0.5*(var(x+y)-var(x)-var(y)) with biased versions of var(), but that doesn't help in testing consistency...) Ideally the putative `algos.roll_cov()` would take a `ddof` parameter, so that one could calculate unbiased and biased versions of all the second moments.\n\nThese tests are rather slow, and can probably be trimmed a bit (i.e. fewer distinct `window` and `min_periods` values), but I've found them _extremely_ useful in identifying bugs and inconsistencies.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/53798780",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7900#issuecomment-53798780",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7900",
    "id": 53798780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzk4Nzgw",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-28T21:03:34Z",
    "updated_at": "2014-08-28T21:03:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, #8059 has been merged into master, and I've updated #7926, which I think is now ready to be merged. @jaimefrio, you may find #7926's  `test_rolling_consistency()` function helpful in testing.\n"
  }
]
