[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62177809",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8747#issuecomment-62177809",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8747",
    "id": 62177809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTc3ODA5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T17:15:32Z",
    "updated_at": "2014-11-07T17:15:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "can you provide a short but specific example of what exactly is needed/wanted here (make runnable as much as possible and indicate where syntax is needed)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62260995",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8747#issuecomment-62260995",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8747",
    "id": 62260995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjYwOTk1",
    "user": {
      "login": "teese",
      "id": 8667542,
      "node_id": "MDQ6VXNlcjg2Njc1NDI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8667542?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/teese",
      "html_url": "https://github.com/teese",
      "followers_url": "https://api.github.com/users/teese/followers",
      "following_url": "https://api.github.com/users/teese/following{/other_user}",
      "gists_url": "https://api.github.com/users/teese/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/teese/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/teese/subscriptions",
      "organizations_url": "https://api.github.com/users/teese/orgs",
      "repos_url": "https://api.github.com/users/teese/repos",
      "events_url": "https://api.github.com/users/teese/events{/privacy}",
      "received_events_url": "https://api.github.com/users/teese/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T15:10:42Z",
    "updated_at": "2014-11-08T15:10:42Z",
    "author_association": "NONE",
    "body": "I've added the code to the question as requested. Sorry it's not short, but contains some real data to help explain why it is necessary to obtain the regex start and end. The code should work in both python 2.7 and 3.4, and the latest pandas release (0.15.0).  In my case, I will apply the above workaround to ~5000 dataframes, each containing ~5000 rows, with significantly longer sequences (~500 characters in each string). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62261545",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8747#issuecomment-62261545",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8747",
    "id": 62261545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjYxNTQ1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T15:26:03Z",
    "updated_at": "2014-11-08T15:26:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "so it actually sounds like you want a function _like_ extract but returns the matched indices.\n\neg. `df['query'].indices(regex_desired_region_from_query, outtype='list|frame')` \n\nsubtle issue is whether the match can return just `(start,end)` or a list of matches (not sure what that would look like)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62276657",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8747#issuecomment-62276657",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8747",
    "id": 62276657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjc2NjU3",
    "user": {
      "login": "teese",
      "id": 8667542,
      "node_id": "MDQ6VXNlcjg2Njc1NDI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8667542?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/teese",
      "html_url": "https://github.com/teese",
      "followers_url": "https://api.github.com/users/teese/followers",
      "following_url": "https://api.github.com/users/teese/following{/other_user}",
      "gists_url": "https://api.github.com/users/teese/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/teese/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/teese/subscriptions",
      "organizations_url": "https://api.github.com/users/teese/orgs",
      "repos_url": "https://api.github.com/users/teese/repos",
      "events_url": "https://api.github.com/users/teese/events{/privacy}",
      "received_events_url": "https://api.github.com/users/teese/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T20:06:50Z",
    "updated_at": "2014-11-08T20:06:50Z",
    "author_association": "NONE",
    "body": "Create `.indices` as another function?\nIt's an interesting idea, but I'd have to admit I'm already confused with the `.match`, `.extract`, `.contains` functions that already exist. \n\nBeginners learn to apply regex to single strings using the following syntax\n(from https://docs.python.org/3.4/library/re.html):\n\n```\ntext = \"He was carefully disguised but captured quickly by police.\"\nfor m in re.finditer(r\"\\w+ly\", text):\n    print '%02d-%02d: %s' % (m.start(), m.end(), m.group(0))\n07-16: carefully\n40-47: quickly\n```\n\nAs a beginner, I am happiest when the syntax in pandas matches the original syntax as closely as possible. The  `.extract` function works great, but after looking at the discussion in #5075, I would probably have voted to keep the name `.match`, replace the legacy code with the new extract function, and change the output (group, bool, index, or a combination) based on various arguments.\n\nCurrently when someone wants to get three things: the groups, the start index and end index. The only way this can be done without repeating the regex search is to get the indices first and then apply some lambda functions to slice out the group. This is a very different process to what people are accustomed to from using the original re module. \n\nSo in summary, in order of my preferences:\n1) incorporate extract and proposed get-indices into `str.match` (to me the simplest for new users, but involves reopening an old discussion and worrying about backwards compatibility)\n2) incorporate get-indices function into `str.match`, but leave the current default output as 'bool' (as planned)\n3) create a new `str.indices` function\n\nWhat're your thoughts concerning the first two options?\n\nRegarding your second comment as to whether the match can return just (start,end) or a list of matches, I still have to sit down and think about that one :)\n"
  }
]
