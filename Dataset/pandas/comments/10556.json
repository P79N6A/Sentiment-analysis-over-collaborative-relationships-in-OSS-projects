[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/121118165",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-121118165",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 121118165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTExODE2NQ==",
    "user": {
      "login": "jonathanrocher",
      "id": 593945,
      "node_id": "MDQ6VXNlcjU5Mzk0NQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/593945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanrocher",
      "html_url": "https://github.com/jonathanrocher",
      "followers_url": "https://api.github.com/users/jonathanrocher/followers",
      "following_url": "https://api.github.com/users/jonathanrocher/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanrocher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanrocher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanrocher/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanrocher/orgs",
      "repos_url": "https://api.github.com/users/jonathanrocher/repos",
      "events_url": "https://api.github.com/users/jonathanrocher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanrocher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-14T03:04:32Z",
    "updated_at": "2015-07-14T03:04:47Z",
    "author_association": "NONE",
    "body": "Yes, I am definitely a big +1 on both of these ideas. I need to understand the current state better, before experimenting with such a tool. Just to clarify what @shoyer means by the `blocks` API, we discussed exposing these view and consolidation methods via a `blocks` attribute: `df.blocks.view()`, `df.blocks.consolidate()`, or something like that.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/121229023",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-121229023",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 121229023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTIyOTAyMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-14T12:43:54Z",
    "updated_at": "2015-07-14T12:45:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "well\n\n`df.as_blocks(copy=False)` (`copy` flag added in master recently) gives you a view right now\n\nand as discussed, I would like to see _why_ this should actually be exposed to the user. What is the purpose? A good use case would go a long way. Showing an implementation is only guaranteed to cause issues down the road when one wants to change it (and cannot because its exposed)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/121382787",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-121382787",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 121382787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTM4Mjc4Nw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-14T20:55:09Z",
    "updated_at": "2015-07-14T20:55:09Z",
    "author_association": "MEMBER",
    "body": "I don't think we should expose the full blocks API. Rather, we should expose a limited set of functionality suitable for basic understand and manipulation of blocks (mostly `.consolidate_blocks()`), so we can have the option of disabling automatic consolidation. If we ever change the underlying implementation, we can just make this method a no-op.\n\nFor viewing block information, we might expose a tuple, similarly to the `.chunks` attribute on dask arrays.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/121585950",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-121585950",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 121585950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTU4NTk1MA==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-15T11:23:35Z",
    "updated_at": "2015-07-15T11:24:05Z",
    "author_association": "MEMBER",
    "body": "I assume exposing some API is for let power users experiment, rather than daily usage? I think adding more detail to `internals.rst` is very nice (#4082), but not sure what level of \"public\" is actually required (guarantee backward compat or adding to API.rst, etc)\n\n+1 for optionally disabling auto consolidation, it should allow pandas handle larger size of data.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/121588631",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-121588631",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 121588631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTU4ODYzMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-15T11:43:39Z",
    "updated_at": "2015-07-15T11:43:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I still have not seen any reason to actually expose anything about the internals as an API. \n\nIt seems that one _might_ want to control _how_ the internal engine works, e.g. simply have an option on construction that allows potentially different internal representation.\n\nNo consolidation is a nice idea on the surface and their may be a reason to allow this and/or switch as a default. HOWEVER, I would like to see someone do a performance study to see if it actually makes a difference in a non-trivial case.\n\nTurning off auto-consolidation is actually trivial, so if someone would like to step up, all ears.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/122084732",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-122084732",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 122084732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjA4NDczMg==",
    "user": {
      "login": "quicknir",
      "id": 10457096,
      "node_id": "MDQ6VXNlcjEwNDU3MDk2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10457096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quicknir",
      "html_url": "https://github.com/quicknir",
      "followers_url": "https://api.github.com/users/quicknir/followers",
      "following_url": "https://api.github.com/users/quicknir/following{/other_user}",
      "gists_url": "https://api.github.com/users/quicknir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quicknir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quicknir/subscriptions",
      "organizations_url": "https://api.github.com/users/quicknir/orgs",
      "repos_url": "https://api.github.com/users/quicknir/repos",
      "events_url": "https://api.github.com/users/quicknir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quicknir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-16T20:39:55Z",
    "updated_at": "2015-07-16T20:39:55Z",
    "author_association": "NONE",
    "body": "@shoyer Thanks for tagging me on this. I am a strong +1 on this. As an example of a use case, ARF1 showed in #9216 how one could use the block manager interface to create an empty DataFrame nearly 100 times faster than the naive approach. It would be nice if one could do this without accessing _implementation methods that are subject to change without warning.\n\nWhen developing a C/C++ library that interfaces with pandas, memory layout is critical. Increasing public interface that allows better guarantees and more explicit behavior of memory layout is very helpful. I can give other examples in pandas where similar issues arise.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143594292",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-143594292",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 143594292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MzU5NDI5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-27T20:49:30Z",
    "updated_at": "2015-09-27T21:09:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/jreback/pandas/commit/44c280bbebe7f4e7f1c041ee40708a51fa8d03a6\n\nis a branch that allows a parameter `policy` to control how consolidation works.\n\nIts not completely automatic at this point (e.g. you have to pass `policy='split|column'` to get this behavior (which could be an option, `support.consolidation`). Further for a dict we can simply default to `column` I think.\n\nnote that:\n- `column` -> don't consolidate, IOW, this is a 'column' repr internally. This won't 'split' a passed in ndarray though (e.g. its still a single block to begin with). This could eventually be the default.\n- `split` -> force split a passed ndarray. This can be costly, but with the upside that you get proper memory layout. This has to be a user decision as its not always necessary / wanted.\n- [ ] needs some more tests and such\n- [ ] needs some perf testing\n- [ ] need to have various ops (e.g. concat), deal with the policy properly (may be non-trivial)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143595151",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-143595151",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 143595151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MzU5NTE1MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-27T21:07:27Z",
    "updated_at": "2015-09-27T21:07:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here are some perf considerations\n\n```\nIn [3]: np.random.seed(1234)\n\n# blocks\nIn [4]: df_blocks = DataFrame(np.random.randn(100000,1000))\n\n# create a single ndarray, then split it\nIn [5]: df_split = DataFrame(np.random.randn(100000,1000),policy='split')\n\n# create a dict of ndarrays, no need to split\nIn [10]: df_dsplit = DataFrame(dict([ (i,np.random.randn(100000)) for i in range(1000) ]),policy='split')\n```\n\nCreations\n\n```\n# block\nIn [7]: %timeit DataFrame(np.random.randn(100000,1000))\n1 loops, best of 3: 3.79 s per loop\n\n# ndarray-split\nIn [6]: %timeit DataFrame(np.random.randn(100000,1000),policy='split')\n1 loops, best of 3: 5.93 s per loop\n\n# dict-split\nIn [14]: %timeit DataFrame(dict([ (i,np.random.randn(100000)) for i in range(1000) ]),policy='split')\n1 loops, best of 3: 3.93 s per loop\n```\n\nrow-wise ops\n\n```\n# blocked\nIn [8]: %timeit df_blocks.sum()\n1 loops, best of 3: 1.55 s per loop\n\n# ndarray-split\nIn [9]: %timeit df_split.sum()\n1 loops, best of 3: 607 ms per loop\n\n# dict-split\nIn [15]: %timeit df_dsplit.sum()\n1 loops, best of 3: 617 ms per loop\n```\n\nSo you _may_ be suprised by the speed of the splits. This is because these are already c-contiguous, while the block memory is NOT. Its in c-order, but not for a row-wise op.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/143884757",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-143884757",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 143884757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mzg4NDc1Nw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-28T21:54:44Z",
    "updated_at": "2017-12-14T21:04:36Z",
    "author_association": "MEMBER",
    "body": "For the creation benchmarks, it would be helpful to put generating the\r\nrandom values _outside_ the loop. This does look very encouraging, though."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/298144526",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-298144526",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 298144526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODE0NDUyNg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-29T03:40:31Z",
    "updated_at": "2017-04-29T03:40:31Z",
    "author_association": "MEMBER",
    "body": "Would this make the \"dict of Series\" description of a DataFrame more reliable?  The sometimes-vexing behavior I'm thinking of is\r\n\r\n```\r\n>>> arr = np.random.randn(1000, 5)\r\n>>> df = pd.DataFrame(arr, columns=list('ABCDE'))\r\n>>> A = df['A']\r\n>>> G = 2*A\r\n>>> G.name = 'G'\r\n>>> df['G'] = G\r\n>>> df['G'] is G\r\nFalse\r\n>>> df['A'] is A\r\nFalse\r\n```\r\n\r\nHaving `id(df['A'])` be consistent would make keeping track of `_metadata` simpler in some cases.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/298323134",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-298323134",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 298323134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODMyMzEzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-01T11:51:53Z",
    "updated_at": "2017-05-01T11:51:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "this issue is not going to happen for pandas 1.x. In pandas 2.x this will be moot as no more blocks."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357892738",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10556#issuecomment-357892738",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10556",
    "id": 357892738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzg5MjczOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T08:53:04Z",
    "updated_at": "2018-01-16T09:01:46Z",
    "author_association": "MEMBER",
    "body": "I rebased the commit of @jreback to play a bit with it to do some more timings. Using the same example as above, but now excluding the array creation and on more operations:\r\n\r\n```\r\nIn [2]: np.random.seed(1234)\r\n   ...: array = np.random.randn(100000,1000)\r\n   ...: array_dict = dict([ (i,np.random.randn(100000)) for i in range(1000) ])\r\n\r\nIn [3]: # blocks\r\n   ...: df_blocks = DataFrame(array)\r\n   ...: \r\n   ...: # create a single ndarray, then split it\r\n   ...: df_split = DataFrame(array, policy='split')\r\n   ...: \r\n   ...: # create a dict of ndarrays, no need to split\r\n   ...: df_dsplit = DataFrame(array_dict, policy='split')\r\n```\r\n\r\nCreation: splitting array much slower, but when you already have dict of arrays it is logically faster to not consolidate them:\r\n```\r\nIn [4]: %timeit DataFrame(array)\r\n102 µs ± 932 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\r\n\r\nIn [5]: %timeit DataFrame(array, policy='split')\r\n3.01 s ± 93.3 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n\r\nIn [6]: %timeit DataFrame(array_dict, policy='split')\r\n29.5 ms ± 1.32 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\r\n\r\nIn [7]: %timeit DataFrame(array_dict, policy='block')\r\n627 ms ± 4.49 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n```\r\n\r\nOperations column-wise:\r\n```\r\nIn [8]: # blocked\r\n   ...: %timeit df_blocks.sum()\r\n994 ms ± 19.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n\r\nIn [9]: # splitted\r\n    ...: %timeit df_split.sum()\r\n1.99 s ± 84.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n```\r\n\r\nOperation row-wise:\r\n```\r\nIn [11]: # blocked\r\n    ...: %timeit df_blocks.sum(axis=1)\r\n889 ms ± 29.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n\r\nIn [12]: # splitted\r\n    ...: %timeit df_split.sum(axis=1)\r\n1.85 s ± 27.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n```\r\n\r\nSlicing (much slower!):\r\n```\r\nIn [21]: %timeit df_blocks.iloc[0:1000]\r\n106 µs ± 600 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\r\n\r\nIn [22]: %timeit df_split.iloc[0:1000]\r\n    ...: \r\n16.9 ms ± 66.1 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\nSo in general, as expected, it gives a slowdown on the above operations (of course it is the specific case of a *lot* of all-float columns (only iterating over the rows with eg `itertuples` was faster with the splitted version ...). But especially the slicing operation is much much slower. \r\n\r\nSo in any case, *if* we would like to further explore this, I think it will certainly mean having to refactor the BlockManager to make operations that have to loop over the columns faster.\r\n\r\n\r\n\r\n"
  }
]
