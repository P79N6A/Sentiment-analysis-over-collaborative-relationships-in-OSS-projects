[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21079858",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21079858",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21079858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDc5ODU4",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T22:45:15Z",
    "updated_at": "2013-07-16T22:45:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for this PR - looks interesting!  There are a few things you can do to make it easier for the pandas core team to incorporate this into pandas.  I'm definitely interested in making it easier to subclass Series and Frame (as are others), so if you have any questions please ask - I'm happy to help out. :)\n\nCan you run `test_perf.sh` on this? `_constructor` is a property, so it would be useful to know if this adds any performance penalties. If your master is tracking pydata/pandas, this should work for you.\n\n``` bash\n./test_perf.sh -b master -t `git rev-parse HEAD`\n```\n\nEven though this looks trivial, it's going to need to have some test cases too. The test cases you've shown above are a good start, but you'd want to have tests that cover all the operations that _ought_ to maintain the class given your changes. We have a wiki page on testing that hopefully will help you write some tests - https://github.com/pydata/pandas/wiki/Testing . Series tests should go into tests/test_series and Frame tests should go into tests/test_frame.py. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21080147",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21080147",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21080147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgwMTQ3",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T22:51:06Z",
    "updated_at": "2013-07-16T22:51:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "More general notes for @cfarmer and others: I believe this will be inconsistent across the entire suite of pandas operations (and that could be okay for now). E.g., this wouldn't work if you used groupby, merge or PyTables, right? Would be good to test that out and see if there's an  easy way to make this work (e.g., groupby and others could try to take the constructor from the object that's being grouped).\n\nAlso, how should pandas handle things like stacking and unstacking? (I don't know what the current behavior is in regards to subclasses of series and frame like the `sparse` variants).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21080582",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21080582",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21080582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgwNTgy",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:00:15Z",
    "updated_at": "2013-07-16T23:00:15Z",
    "author_association": "MEMBER",
    "body": "I think pytables has its classes hard coded. i use a subclass of frame regularly and i have to convert before saving to hdf5. might be nice to have a way to register valid classes to pytables when they are subclassed, might be harder than it sound tho\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21080629",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21080629",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21080629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgwNjI5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:01:16Z",
    "updated_at": "2013-07-16T23:01:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cfarmer this really doesn't do anything for you\n\nafter all you can get exactly the same functionaility by doing monkeypatching see here: http://pandas.pydata.org/pandas-docs/dev/faq.html#adding-features-to-your-pandas-installation\n\n```\ndef say_hello(self):\n   print \"hello!\"\n\nSeries.say_hello = say_hello\n```\n\nand @jtratner has valid points, this is a quite complicated issue, some of which is solved by eg. #3482\n\nmost of the time inheritance is not what you want in any event, much better to use some sort of composition\nsee _very_ long discussion on this and other issues: #2485, #2695\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21080707",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21080707",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21080707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgwNzA3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:03:08Z",
    "updated_at": "2013-07-16T23:03:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud you are one of those huh :)\n\nmaybe give a short description of why/what you are doing?\n\n(and registering serializers is pretty easy if all you are after is have a different constructor called), or something more complicated you can just create a `Table` sub-class and handle it directly (you can also patch the mappers at run-time)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081041",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081041",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxMDQx",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:11:06Z",
    "updated_at": "2013-07-16T23:11:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I appreciate what you're saying here, but there are others who want to be able to subclass and have the class be maintained through operations. If we explicitly note that it only works for some functions (i.e., only basic arithmetic and slicing) _and_ it doesn't have a performance hit, is it problematic to start employing the NDFrame idiom of relying on `self._constructor` to build the object? If nothing else, might help us see which functions could be abstracted, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081371",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081371",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081371,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxMzcx",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:18:05Z",
    "updated_at": "2013-07-16T23:18:52Z",
    "author_association": "MEMBER",
    "body": "I wrote a little package called [span](http://www.github.com/cpcloud/span) (be nice (or don't, whatever), I haven't done much with it since I started writing my thesis!) to deal with a proprietary neurophys format and a few other things that were very specific to the field.\n\ni found monkey-patching to be impractical for experimenting, as i wanted to add very domain specific methods to `DataFrame`, but I still needed the frame to have all the arith and cmp ops and I didn't want to write yet another decorator to wrap the ops around, a `values` element (for example) using composition. Maybe there's a way to \"forward\" methods that i don't know about. Still, I use the index and columns in a very specific way. \n\nActually `DataFrame` was too general because I wanted to enforce a specific type of `index` (`DatetimeIndex`) to compute the sampling rate of a data set as a property (again, maybe it could have been done without inheritance)\n\nI also wanted to be able to know when I was using a `SpikeDataFrame` vs a `DataFrame` when I was doing stuff in the shell without having to type `hasattr(df, 'a_method_i_monkey_patched')`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081372",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081372",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxMzcy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:18:07Z",
    "updated_at": "2013-07-16T23:18:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtratner conceptually what this PR does is not a problem and it does make it easier to subclass\n\nthe issue is since subclasses aren't supported per se it's really at your own risk\n\nmy point is really more of a design point - a pandas object is really good at a small set of operations - that is the point of oo design\nmake a clear cut object\n\n99% of the time I dissuade people from using sub classing because they get into trouble\n\ncomposition is almost always better (with the main exception being 'changing' the way certain operations work)\n\nsub classing is generally less transparent and more error prone\n\nI think making it a bit harder to subclass actually is a _feature_! (flames appear here :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081458",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081458",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxNDU4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:19:56Z",
    "updated_at": "2013-07-16T23:19:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "one of the first issues you are going to see is what @cpcloud raised, 'why can't I store my shiny sub-classed DataFrame in an HDFStore` or how do I serialize it? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081611",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081611",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxNjEx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:24:02Z",
    "updated_at": "2013-07-16T23:24:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud \n\nI like this!\n\n```\n@property\ndef super(self):\n        return super(SpikeDataFrame, self)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081759",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081759",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxNzU5",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:28:00Z",
    "updated_at": "2013-07-16T23:28:00Z",
    "author_association": "MEMBER",
    "body": "@jreback thanks. i actually stopped using it because i saw it recently and i was like \"wtf is that?\" but it does make it easier to call super methods...\n\nit would be great if you could do\n\n``` python\n@property\ndef super(self):\n    return super(self.__class__, self)\n```\n\nbut i htink there's a reason that won't work, but i can't remember why\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081774",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081774",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxNzc0",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:28:13Z",
    "updated_at": "2013-07-16T23:28:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I understand your point, but given that we already have an `_constructor` on `NDFrame`, doesn't it make sense to actually use it?\n\nAlso, your example only works in Python3. In Python 2 you'll end up with an unbound instance method.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081838",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081838",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxODM4",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:29:41Z",
    "updated_at": "2013-07-16T23:29:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud If you do `super` like that, you never end up going up the mro, since it looks for `super` with getattribute on the current class, which defaults to the super for the class (i.e., if you wanted to use super on the `__init__` method and be able to go up multiple levels).  You'd need to do something like `__super(self)` and explicitly state the current class.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081906",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081906",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxOTA2",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:31:15Z",
    "updated_at": "2013-07-16T23:31:50Z",
    "author_association": "MEMBER",
    "body": "ah i c. `super` is starting to not look like a word anymore...good to know\n\nwhat does python3 do? you can do `super()` iirc\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21081979",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21081979",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21081979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDgxOTc5",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T23:32:56Z",
    "updated_at": "2013-07-16T23:32:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cpcloud yep, you can just do `super(self)`...much better.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21092466",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21092466",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21092466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDkyNDY2",
    "user": {
      "login": "carsonfarmer",
      "id": 1220613,
      "node_id": "MDQ6VXNlcjEyMjA2MTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1220613?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carsonfarmer",
      "html_url": "https://github.com/carsonfarmer",
      "followers_url": "https://api.github.com/users/carsonfarmer/followers",
      "following_url": "https://api.github.com/users/carsonfarmer/following{/other_user}",
      "gists_url": "https://api.github.com/users/carsonfarmer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carsonfarmer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carsonfarmer/subscriptions",
      "organizations_url": "https://api.github.com/users/carsonfarmer/orgs",
      "repos_url": "https://api.github.com/users/carsonfarmer/repos",
      "events_url": "https://api.github.com/users/carsonfarmer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carsonfarmer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-17T05:03:59Z",
    "updated_at": "2013-07-17T05:03:59Z",
    "author_association": "NONE",
    "body": "@jtratner The PR doesn't work for groupby etc yet, but this is actually (relatively) easy to implement. I have it working on my local copy. So will add to PR when ready. As for things like merge etc... I'm not 100% clear how these cases should be handled, so my preference would be to add them as needed (i.e., not in this initial PR).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21092618",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21092618",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21092618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDkyNjE4",
    "user": {
      "login": "carsonfarmer",
      "id": 1220613,
      "node_id": "MDQ6VXNlcjEyMjA2MTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1220613?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carsonfarmer",
      "html_url": "https://github.com/carsonfarmer",
      "followers_url": "https://api.github.com/users/carsonfarmer/followers",
      "following_url": "https://api.github.com/users/carsonfarmer/following{/other_user}",
      "gists_url": "https://api.github.com/users/carsonfarmer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carsonfarmer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carsonfarmer/subscriptions",
      "organizations_url": "https://api.github.com/users/carsonfarmer/orgs",
      "repos_url": "https://api.github.com/users/carsonfarmer/repos",
      "events_url": "https://api.github.com/users/carsonfarmer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carsonfarmer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-17T05:11:51Z",
    "updated_at": "2013-07-17T05:11:51Z",
    "author_association": "NONE",
    "body": "@jreback I totally agree with you: subclassing is often not necessary, and I've recently found several nice ways to avoid it given the current difficulty in subclassing pandas objects. Having said that, subclassing in Pandas does seem to come up often, and I think if people (including me!) are smart about it, it could prove useful... now to create some tests!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21155287",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21155287",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21155287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTU1Mjg3",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-18T00:26:52Z",
    "updated_at": "2013-07-18T00:26:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "SO related question http://stackoverflow.com/questions/17711934/pythonic-way-of-extending-base-class\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21165021",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21165021",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21165021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTY1MDIx",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-18T06:29:07Z",
    "updated_at": "2013-07-18T06:29:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am also somewhat in this boat, for my use-case I'd like to subclass so I can add new property descriptors, but you have to do that at the class level and I only want these properties on certain instances. Easy to avoid by just not using properties but it's a drawback nonetheless...\n\nFWIW I hacked my subclass into the HDF5 store using something like:\n\n``` python\nimport pandas as pd\nfrom pandas.io import pytables \n\nclass MyPanel(pd.Panel):\n    pass\n\nclass MyPanelStorer(pytables.PanelStorer):\n    pandas_kind = 'mywide'\n    obj_type = MyPanel\npytables._TYPE_MAP[MyPanel] = 'mywide'\npytables._STORER_MAP['mywide'] = 'MyPanelStorer'\npytables.MyPanelStorer = MyPanelStorer \n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21366810",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4271#issuecomment-21366810",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4271",
    "id": 21366810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMzY2ODEw",
    "user": {
      "login": "carsonfarmer",
      "id": 1220613,
      "node_id": "MDQ6VXNlcjEyMjA2MTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1220613?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carsonfarmer",
      "html_url": "https://github.com/carsonfarmer",
      "followers_url": "https://api.github.com/users/carsonfarmer/followers",
      "following_url": "https://api.github.com/users/carsonfarmer/following{/other_user}",
      "gists_url": "https://api.github.com/users/carsonfarmer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carsonfarmer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carsonfarmer/subscriptions",
      "organizations_url": "https://api.github.com/users/carsonfarmer/orgs",
      "repos_url": "https://api.github.com/users/carsonfarmer/repos",
      "events_url": "https://api.github.com/users/carsonfarmer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carsonfarmer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-22T18:53:02Z",
    "updated_at": "2013-07-22T18:53:02Z",
    "author_association": "NONE",
    "body": "As @jreback mentioned previously, most of the issues that this PR addresses are also addressed by #3482. I think the PR here could probably be dropped in favour of the changes in #3482.\n"
  }
]
