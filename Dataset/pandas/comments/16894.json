[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315282082",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315282082",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315282082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI4MjA4Mg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T06:30:51Z",
    "updated_at": "2017-07-14T06:30:51Z",
    "author_association": "MEMBER",
    "body": "You can actually replicate this using `dict` !\r\n\r\n~~~python\r\n>>> import numpy as np\r\n>>> s = {np.nan : 2}\r\n>>> np.nan in s\r\nTrue\r\n>>>\r\n>>> s = {np.float64(np.nan) : 2}\r\n>>> np.nan in s\r\nFalse\r\n~~~\r\n\r\nHonestly, I blame `numpy` for this :smile:, as this is annoying to patch.  On the one hand, ensuring `Index` makes sense, but then you can't check `np.nan` anymore.\r\n\r\nThe obvious *candidate* workaround is to write `columns=[np.float64(np.nan), 2]`.  Perhaps what we could do is call `ensure_index` (or some form of it) on the columns to perform the same casting?  Not really sure at this point, but let us know if the workaround works for you at least."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315372948",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315372948",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315372948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTM3Mjk0OA==",
    "user": {
      "login": "kernc",
      "id": 684364,
      "node_id": "MDQ6VXNlcjY4NDM2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/684364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kernc",
      "html_url": "https://github.com/kernc",
      "followers_url": "https://api.github.com/users/kernc/followers",
      "following_url": "https://api.github.com/users/kernc/following{/other_user}",
      "gists_url": "https://api.github.com/users/kernc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kernc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kernc/subscriptions",
      "organizations_url": "https://api.github.com/users/kernc/orgs",
      "repos_url": "https://api.github.com/users/kernc/repos",
      "events_url": "https://api.github.com/users/kernc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kernc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T14:25:20Z",
    "updated_at": "2017-07-14T15:10:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "`np.float64(np.nan)` wouldn't work, because it's an _instance_ of NaN, and nans don't equate to one another. `dict` probably uses (or falls back to) operator-is equality, which a **singleton** like `np.nan` (`pd.NaT`, ...) responds positive to. Compare:\r\n```py\r\n>>> np.nan in {np.nan}\r\nTrue\r\n\r\n>>> np.float64(np.nan) in {np.float64(np.nan)}\r\nFalse\r\n\r\n>>> float('nan') in {float('nan')}\r\nFalse\r\n\r\n>>> np.nan is np.nan\r\nTrue\r\n\r\n>>> np.float64(np.nan) is np.float64(np.nan)\r\nFalse\r\n```\r\n\r\nThis bug came up in https://github.com/pandas-dev/pandas/pull/16883#discussion_r126827887. But there are legitimate cases for a (catch-all) nan in index (e.g. https://github.com/pandas-dev/pandas/issues/3729)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315383316",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315383316",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315383316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTM4MzMxNg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T15:05:18Z",
    "updated_at": "2017-07-14T15:05:26Z",
    "author_association": "MEMBER",
    "body": "@kernc : Hmmm...I suspect we have the support for this indexing somewhere in the code-base, as this code works below:\r\n\r\n~~~python\r\n>>> df = DataFrame({np.float64(np.nan): [1, 2]})\r\n>>> df[np.nan]\r\n2\r\n>>> type(df.columns[0])\r\n<class 'numpy.float64'>\r\n~~~\r\n\r\nI can't search the code-base from my phone, but I suspect if you walk through the `__getitem__` logic for `DataFrame`, you can find the place where we reconcile the `np.nan`-handling, which we can then apply to initialization in your example."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315384829",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315384829",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315384829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTM4NDgyOQ==",
    "user": {
      "login": "kernc",
      "id": 684364,
      "node_id": "MDQ6VXNlcjY4NDM2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/684364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kernc",
      "html_url": "https://github.com/kernc",
      "followers_url": "https://api.github.com/users/kernc/followers",
      "following_url": "https://api.github.com/users/kernc/following{/other_user}",
      "gists_url": "https://api.github.com/users/kernc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kernc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kernc/subscriptions",
      "organizations_url": "https://api.github.com/users/kernc/orgs",
      "repos_url": "https://api.github.com/users/kernc/repos",
      "events_url": "https://api.github.com/users/kernc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kernc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T15:11:21Z",
    "updated_at": "2017-07-14T15:11:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, `Index` and subclasses [support nan](https://github.com/pandas-dev/pandas/blob/9c44f9b2cad863bde17c7dd061d5b5b5ccbada21/pandas/core/indexes/base.py#L1828). Initialization from dict doesn't."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315386253",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315386253",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315386253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTM4NjI1Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T15:16:39Z",
    "updated_at": "2017-07-14T15:16:39Z",
    "author_association": "MEMBER",
    "body": "Correct, but I'm saying that the logic for `__getitem__` (not the link that you are pointing to, which is for something else) should be located, as that would tell you how the bug can be patched I imagine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315388894",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315388894",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315388894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTM4ODg5NA==",
    "user": {
      "login": "kernc",
      "id": 684364,
      "node_id": "MDQ6VXNlcjY4NDM2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/684364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kernc",
      "html_url": "https://github.com/kernc",
      "followers_url": "https://api.github.com/users/kernc/followers",
      "following_url": "https://api.github.com/users/kernc/following{/other_user}",
      "gists_url": "https://api.github.com/users/kernc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kernc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kernc/subscriptions",
      "organizations_url": "https://api.github.com/users/kernc/orgs",
      "repos_url": "https://api.github.com/users/kernc/repos",
      "events_url": "https://api.github.com/users/kernc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kernc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T15:26:47Z",
    "updated_at": "2017-07-14T15:27:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not unexpectedly, Indexes use [`isnull()`](https://github.com/pandas-dev/pandas/blob/9c44f9b2cad863bde17c7dd061d5b5b5ccbada21/pandas/core/indexes/base.py#L1810-L1823) or [`isnan()`](https://github.com/pandas-dev/pandas/blob/9c44f9b2cad863bde17c7dd061d5b5b5ccbada21/pandas/core/indexes/base.py#L1810-L1823) checks internally when constructing their indexers."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315391551",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315391551",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315391551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTM5MTU1MQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T15:37:18Z",
    "updated_at": "2017-07-14T15:37:18Z",
    "author_association": "MEMBER",
    "body": "Okay, might it be possible to use similar logic when constructing from `dict` ?  I'm trying to see (without being able to see the code-base ATM) whether whatever logic being used to handle `np.nan` properly for indexing can be used internally when constructing a `DataFrame` from `dict`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315404093",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315404093",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315404093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQwNDA5Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T16:28:14Z",
    "updated_at": "2017-07-14T16:28:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "in ``DataFrame._init_dict`` this passes thru ``Index``, e.g. \r\n\r\n```\r\nIn [1]: Index([float('nan')])\r\nOut[1]: Float64Index([nan], dtype='float64')\r\n\r\nIn [2]: Index([np.nan])\r\nOut[2]: Float64Index([nan], dtype='float64')\r\n```\r\n\r\nso must be missing this step somewhere.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315405551",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315405551",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315405551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQwNTU1MQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T16:34:47Z",
    "updated_at": "2017-07-14T16:34:47Z",
    "author_association": "MEMBER",
    "body": "> so must be missing this step somewhere.\r\n\r\n@jreback : confused by what you were just demonstrating."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315410548",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315410548",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315410548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQxMDU0OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T16:56:17Z",
    "updated_at": "2017-07-14T16:56:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @jreback : confused by what you were just demonstrating.\r\n\r\nThis problem is already solved for several cases (but not the one that illustrated above) and SDF. So the existing solutions should just propagate.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315411725",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315411725",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16894",
    "id": 315411725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQxMTcyNQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T17:01:07Z",
    "updated_at": "2017-07-14T17:01:07Z",
    "author_association": "MEMBER",
    "body": "Ah, gotcha, you were referring to what I was saying <a href=\"https://github.com/pandas-dev/pandas/issues/16894#issuecomment-315386253\">above</a>"
  }
]
