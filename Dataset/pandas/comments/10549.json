[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/120723039",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10549#issuecomment-120723039",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10549",
    "id": 120723039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDcyMzAzOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T14:15:29Z",
    "updated_at": "2015-07-12T14:16:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "xref to https://github.com/pydata/pandas/issues/6699\n\nI am not sure how you can know when to raise an error. This comes back to the is this a reindex or a lookup issue. \n\nIMHO this would be unexpected to the user if they had a long list of values that they are looking up, to have a `KeyError` raise, which is what you are suggesting. Further this would then be inconsistent with the current semantics of reindex/loc being on the same footing.\n\nAs discussed we are currently in a consistent state (meaning for getting & setting). So this comes down to are `.loc` and `.reindex` the same (for getting) or is `.loc` strict in ALL inputs (and thus would differ from `.reindex` by doing have a different getting policy).\n\nFurther though I think this could be communicated to the users, how disruptive would this be.\n\nWe certainly don't want. `there they go again changing things, so things become even more unpredictable`. All that said, if its the right change, then it should be done.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/120723665",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10549#issuecomment-120723665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10549",
    "id": 120723665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDcyMzY2NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T14:17:17Z",
    "updated_at": "2015-07-12T14:17:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche @shoyer @cpcloud @wesm @TomAugspurger @sinhrks \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/120768515",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10549#issuecomment-120768515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10549",
    "id": 120768515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc2ODUxNQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T22:19:31Z",
    "updated_at": "2015-07-12T22:19:31Z",
    "author_association": "MEMBER",
    "body": "This came out of our discussions at the SciPy sprints.\n\nIMO this is different than reindexing and filling with NaN. For reindexing, we don't fail silently -- we insert NaN. If we can't do that, it is better to raise.\n\nI do agree that this is part of a larger discussion about how to handle indexing fallbacks. I think removing indexing fallbacks should be a top priority for pandas 1.0. Currently the indexing code is nigh unmaintainable.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/281548359",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10549#issuecomment-281548359",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10549",
    "id": 281548359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTU0ODM1OQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-22T02:23:20Z",
    "updated_at": "2017-02-22T02:23:20Z",
    "author_association": "MEMBER",
    "body": "I don't think this is a bug. The behaviour is undocumented, true, but it is coherent with the behaviour on lists of labels, which instead is [clearly documented](http://pandas.pydata.org/pandas-docs/stable/indexing.html#selection-by-label) (\"raise only if no label is found\").\r\n\r\nMoreover, there is not specific \"_shape of the dataframe that is returned_\" that you would expect _without knowing what you're indexing on_. You seem to be implying that, for instance,\r\n\r\n``` python\r\npd.Series(range(5), index=pd.MultiIndex.from_arrays([[1,1,2,2,2], ['a', 'b', 'a', 'b', 'c']])).loc[[1, 2], ['c']]\r\n```\r\nshould be returning \r\n``` python\r\n1  c    NaN\r\n2  c    4\r\ndtype: int64\r\n```\r\nrather than the current\r\n``` python\r\n2  c    4\r\ndtype: int64\r\n```\r\n(all labels are present in the index, but not all _their combinations_), but this would be really unexpected - why should I get a ``NaN`` if I try to access a label which is there?!\r\n\r\nThe desired behaviour can easily be obtained with ``.reindex`` by passing the desired index."
  }
]
