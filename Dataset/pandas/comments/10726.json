[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127045246",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127045246",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127045246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA0NTI0Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T17:06:27Z",
    "updated_at": "2015-08-02T17:06:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "xref #10721 \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127070677",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127070677",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127070677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA3MDY3Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T20:59:14Z",
    "updated_at": "2015-08-02T20:59:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @brandon-rhodes\ncc @patricktokeeffe\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127077811",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127077811",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127077811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA3NzgxMQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T22:37:59Z",
    "updated_at": "2015-08-02T22:37:59Z",
    "author_association": "MEMBER",
    "body": "I wonder if we want to take this as a opportunity to clean up this discrepancy for default sort behavior:\n- a series is sorted by its values\n- a dataframe is sorted by its index\n\nIt might make more sense for `.sorted()` to always sort by values, and require another function or argument to sort the index.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127079918",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127079918",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127079918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA3OTkxOA==",
    "user": {
      "login": "patricktokeeffe",
      "id": 1348834,
      "node_id": "MDQ6VXNlcjEzNDg4MzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1348834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patricktokeeffe",
      "html_url": "https://github.com/patricktokeeffe",
      "followers_url": "https://api.github.com/users/patricktokeeffe/followers",
      "following_url": "https://api.github.com/users/patricktokeeffe/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricktokeeffe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricktokeeffe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricktokeeffe/subscriptions",
      "organizations_url": "https://api.github.com/users/patricktokeeffe/orgs",
      "repos_url": "https://api.github.com/users/patricktokeeffe/repos",
      "events_url": "https://api.github.com/users/patricktokeeffe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricktokeeffe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T22:53:35Z",
    "updated_at": "2015-08-02T22:53:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It might make more sense for .sorted() to always sort by values, and require another function or argument to sort the index.\n\nHow would that work for dataframes? What does 'values' mean in that context? I think it makes more sense to target their commonality: index.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127081040",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127081040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127081040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA4MTA0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T23:00:56Z",
    "updated_at": "2015-08-02T23:03:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think what @shoyer mean is the default could be:\n\nThis is False in master\n\n```\ns.sorted() == s.sort_index()\n```\n\nproposed:\nwould need to something like: `s.sorted('values')` (could also take the name of the Series)\n\n```\ns.sorted('values') == s.sorted('A') == s.order() # s.order() is the current sort the values\n```\n\nThis is True in master\n\n```\ndf.sorted() == df.sort_index()\ndf.sorted('A') == df.sort('A') # this is currently how it works, e.g. column sorting\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127081395",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127081395",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127081395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA4MTM5NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T23:02:16Z",
    "updated_at": "2015-08-02T23:02:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd @sinhrks @TomAugspurger @jorisvandenbossche \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127082183",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127082183",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127082183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA4MjE4Mw==",
    "user": {
      "login": "patricktokeeffe",
      "id": 1348834,
      "node_id": "MDQ6VXNlcjEzNDg4MzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1348834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patricktokeeffe",
      "html_url": "https://github.com/patricktokeeffe",
      "followers_url": "https://api.github.com/users/patricktokeeffe/followers",
      "following_url": "https://api.github.com/users/patricktokeeffe/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricktokeeffe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricktokeeffe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricktokeeffe/subscriptions",
      "organizations_url": "https://api.github.com/users/patricktokeeffe/orgs",
      "repos_url": "https://api.github.com/users/patricktokeeffe/repos",
      "events_url": "https://api.github.com/users/patricktokeeffe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricktokeeffe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T23:09:21Z",
    "updated_at": "2015-08-02T23:09:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I see. Yes, I had misunderstood @shoyer, if that's what was meant. Thanks \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127083481",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127083481",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127083481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA4MzQ4MQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T23:27:02Z",
    "updated_at": "2015-08-02T23:27:33Z",
    "author_association": "MEMBER",
    "body": "> How would that work for dataframes? What does 'values' mean in that context? I think it makes more sense to target their commonality: index.\n\nI was thinking that the default for `df.sorted()` might be to sort the values lexicographically in column order, e.g., the current result obtained from `df.sort(list(df.columns))`. But we could also take the approach of sorting the index by default instead in both cases.\n\nAlternatively, instead of adding `sorted`, we might encourage the more explicit `.sort_values()` and `.sort_index()`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127085425",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127085425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127085425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA4NTQyNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-02T23:54:30Z",
    "updated_at": "2015-08-02T23:54:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeh I think `.sort_index` should stick around, and I like `.sort_values`.\n\n```\n==============================     ===============================\nPrevious                           Replacement\n==============================     ===============================\n``Series.order()``                 ``Series.sort_values()``\n``Series.sort()``                  ``Series.sort_values(inplace=True)``\n``DataFrame.sort(columns=...)``    ``DataFrame.sort_values(by=...)``\n==============================     ===============================\n```\n\nFurthermore, the following operations are implemented using `.sorted()`; the original methods remain for convenience.\n\n```\n==============================     ===============================\nPrevious                           Equivalent\n==============================     ===============================\n``Series.sort_index()``            ``Series.sort_index()``\n``Series.sortlevel(level=...)``    ``Series.sort_index(level=...``)\n``DataFrame.sort_index()``         ``DataFrame.sort_index(level=True)``\n``DataFrame.sortlevel(level=...)`` ``DataFrame.sort_index(level=...)``\n==============================     ===============================\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127094532",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127094532",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127094532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA5NDUzMg==",
    "user": {
      "login": "patricktokeeffe",
      "id": 1348834,
      "node_id": "MDQ6VXNlcjEzNDg4MzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1348834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patricktokeeffe",
      "html_url": "https://github.com/patricktokeeffe",
      "followers_url": "https://api.github.com/users/patricktokeeffe/followers",
      "following_url": "https://api.github.com/users/patricktokeeffe/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricktokeeffe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricktokeeffe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricktokeeffe/subscriptions",
      "organizations_url": "https://api.github.com/users/patricktokeeffe/orgs",
      "repos_url": "https://api.github.com/users/patricktokeeffe/repos",
      "events_url": "https://api.github.com/users/patricktokeeffe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricktokeeffe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-03T01:22:22Z",
    "updated_at": "2015-08-03T01:22:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I was thinking that the default for df.sorted() might be to sort the values lexicographically in column order, e.g., the current result obtained from df.sort(list(df.columns)). \n\nI think this trades one discrepancy (values vs. index) for another (default sort on axis=0 vs axis=1). Currently df.sort() is by index, which always made more sense to me. (Disclaimer: I work with timeseries.) What happens if/when `panel` gets `sorted`? For default behaviors, acting on index seems more appropriate.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127144205",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127144205",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127144205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzE0NDIwNQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-03T07:00:58Z",
    "updated_at": "2015-08-03T07:00:58Z",
    "author_association": "MEMBER",
    "body": "> I think this trades one discrepancy (values vs. index) for another (default sort on axis=0 vs axis=1).\n\nActually, `df.sort` already defaults to `axis=0`. I agree that this is confusing, though -- it's not obviously clear whether `axis=0` or even `axis='rows'` means that the result will be sorted _by_ rows or sorted _along_ rows.\n\n> Currently df.sort() is by index, which always made more sense to me. (Disclaimer: I work with timeseries.)\n\nI agree that sorting by the index usually makes sense -- if you have defined a meaningful index. This is often not the case with pandas, and for such users the default behavior of `df.sort()` will be confusing.\n\nI think there is a lot to be said for requiring and/or encouraging users to be more explicit by having separate `sort_index` and `sort_values` methods.\n\nThe main downside is that it forces users to considering whether something is in the index or the values, which is another confusing distinction we are trying to slowly get away with. So, there could still be a case for having a generic `.sort`/`.sorted` method on DataFrames that _requires_ the `by` argument and parses the listed names as either columns or index levels.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127440289",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127440289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127440289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzQ0MDI4OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T00:23:14Z",
    "updated_at": "2015-08-04T21:29:15Z",
    "author_association": "MEMBER",
    "body": "@jreback Thanks for working on this!\n\nI made an overview of the issue (gathered from the different issues, for who wants to catch up): https://github.com/jorisvandenbossche/pandas/blob/sorting-api/doc/proposals/sorting-API.md\n\nI can make a PR from that if that is easier to comment, but copying the discussion points I see here:\n\nDiscussion points:\n1. Default sorting by labels or values?\n   - Proposed PR: keep inconsistency of Series by values and DataFrame by labels.\n   - Alternative: As sorting by the values (certainly for a Series) is very convenient, unify the `sorted` method to sort by values/columns for both Series/DataFrame. To have a convenient method to sort by the index, keep the specific `sort_index` method.\n     \n     a) Should `sorted` still be able to sort on the index? If not (as `sort_index` does this), we can leave `level` and `sort_remaining` keywords out of the signature.\n     \n     b) Should `DataFrame.sorted` require at least one column to be specified, or should it default to sort the values lexicographically in column order (equivalent to `df.sorted(by=list(df.columns))`)?\n     \n     c) If we go with this clear separation of sorting by index/values in two separate functions, do we use `sorted`, or something more specific as `sort_values()` alongside `sort_index`\n2. The keyword to select the columns to sort?\n   - Current PR: chooses `by` over `columns`\n3. Should `Series.sort`, `Series.order` and `DataFrame.sort` be deprecated?\n   - Current PR does deprecate these.\n   - As these are widespread functions, a real deprecation/removal can have a large impact, and maybe a clear 'documented' deprecations is enough?\n4. And for the integration of `sortlevel` into `sort_index`: \n   - Not controversial: add `level` and `sort_remaining` to `sort_index()`\n5. Should `sort_index` still be able to sort by the columns?\n   - It is very strange to use `sort_index` to sort by the columns (but even the implementation of `DataFrame.sort` uses `DataFrame.sort_index`).\n   - We could deprecate this ability (the deprecating/discouraging the `by` keyword)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127441284",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127441284",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127441284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzQ0MTI4NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T00:32:33Z",
    "updated_at": "2015-08-04T00:32:33Z",
    "author_association": "MEMBER",
    "body": "And my 2 cents at the moment:\n\n1) I would like to see the default of sorting by index/values cleaned-up and consistent between dataframe and series. And I like the proposal of keeping a separate function (as we already have this: `sort_index`) for this, and having `sorted` default to the values. \nBTW, I also find `df.sorted(level=True)` very unintuitive as the recommended way to sort by the index, so this also argues for a clear separate `sort_index` IMO\n\n1a) I think the new `sorted` should not be able to sort the index. As this is not needed (you use `sort_index` for that), and simplifies the API (less keyword arguments). A possible argument to keep this is to do combined sorting on index an columns, but this is currently also not possible.\n\nRelated to this, I also don't think `sort_index` should be able to sort on the columns (I know this is already there, but we could deprecate this, or at least change the documentation (it is now even an example in the docstring of sort_index))\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127765539",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127765539",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127765539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzc2NTUzOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T21:21:20Z",
    "updated_at": "2015-08-04T21:36:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, the `level=True` stuff was just to get all in one method! Its bad I agree :)\n\nok so here are my thoughts\n1. so a) agree\n\n`.sorted(..)` is for values\n`.sort_index(..)` is for the index\n- so we enforce the `by` argument to `.sorted` (on `DataFrame`)\n- remove the index sorting capability, IOW, `levels/sort_remaining` & add to `sort_index`.\n- leave `.sortlevel` as an alias for now (maybe soft-deprecate)\n\nb) I don't think sorting by all columns is intuitive at all, user should simply have to specify, -1 here.\n\nc) sorted is good. SQL-like and matches the name in python, also clear sep from `sort_index`.\n\n2) `by` just for consistency, but I guess it really doesn't matter as the signature is specific to `DataFrame`, could go either way here\n\n3) I think we _MUST_ deprecate `Series.sort`. Ok with soft-deprecating `Series.order` (e.g. via doc-string). though I think it IS cleaner to deprecate it now.\n`DataFrame.sort` sort is like `Series.order`, we are not really changing it, (except removing the sort index capability, but that would be in `.sorted`, I don't think we can touch it here). So soft-deprecation also ok.\n\n4) yes, add `.levels/sort_remaining` to `.sort_index`\n\n5) I am torn here. and I see why this is allowed in `.sort_index`. You want to be able to sort by a column, but you don't care if its set as the index. But that is inconsistent with the model of having a method do a single well-defined thing. E.g. `.sorted` sorts values, `.sort_index` sorts the index.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127773412",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127773412",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127773412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzc3MzQxMg==",
    "user": {
      "login": "patricktokeeffe",
      "id": 1348834,
      "node_id": "MDQ6VXNlcjEzNDg4MzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1348834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patricktokeeffe",
      "html_url": "https://github.com/patricktokeeffe",
      "followers_url": "https://api.github.com/users/patricktokeeffe/followers",
      "following_url": "https://api.github.com/users/patricktokeeffe/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricktokeeffe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricktokeeffe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricktokeeffe/subscriptions",
      "organizations_url": "https://api.github.com/users/patricktokeeffe/orgs",
      "repos_url": "https://api.github.com/users/patricktokeeffe/repos",
      "events_url": "https://api.github.com/users/patricktokeeffe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricktokeeffe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T21:54:52Z",
    "updated_at": "2015-08-04T21:54:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW, I agree with these recent comments. Had to take several steps back and consider how other generalized functions are handled before deciding the index isn't the best target after all. \n\nSorting dataframes by all their columns doesn't feel right, though - the user should have to decide.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127774704",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127774704",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127774704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzc3NDcwNA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T22:00:27Z",
    "updated_at": "2015-08-04T22:00:27Z",
    "author_association": "MEMBER",
    "body": "I'm perfectly fine with requiring an explicit `by` argument when sorting dataframes by values with `sorted`. That will also ensure an easier transition from `DataFrame.sort`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127782680",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127782680",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127782680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzc4MjY4MA==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T22:44:23Z",
    "updated_at": "2015-08-04T22:44:23Z",
    "author_association": "MEMBER",
    "body": "I agree current proposals, great work:)\n\n5) As functionality,  `sort_index` should cover sorting by columns. I don't feel the name is inappropriate because there are some methods named `index..` covers all axis, like `reindex` and `idxmin`. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/127995954",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-127995954",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 127995954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzk5NTk1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T13:24:13Z",
    "updated_at": "2015-08-05T13:24:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "So It think that I understand now why @wesm has a `.sortlevel` rather than just have this allowed in `.sort_index`. \n\nImagine\n\n```\nIn [13]: df = DataFrame(np.arange(12,0,-1).reshape(3,-1),index=pd.MultiIndex.from_tuples([(0,0),(0,1),(1,0)]))\n\nIn [14]: df\nOut[14]: \n      0   1   2  3\n0 0  12  11  10  9\n  1   8   7   6  5\n1 0   4   3   2  1\n\nIn [15]: df.sortlevel(0)\nOut[15]: \n      0   1   2  3\n0 0  12  11  10  9\n  1   8   7   6  5\n1 0   4   3   2  1\n```\n\nin the new `.sort_index`, then this is ambiguous\n`df.sort_index(by=0)` ,IS that the 0'th column or the 0th level of the index?\n\nso we would now have to do\n`df.sort_index(by=None,level=0)` to be unambiguous (this adds the `.level` kw)\n\nIf we were NOT to allow pass thru columns, then the signature would be almost exactly like `.sortlevel`\ne.g.\n`df.sort_index(level=...)`\n\ncurrently this will fail (in master) as you cannot sort a non-MultiIndex by level (though that is easily fixed).\n\nso, I think to avoid ambiguity then we must either pick:\n- 5a) leave `.sort_index` alone, and consequently `.sortlevel`\n- 5b) add `level` kw to `.sort_index` IN ADDITION to the current `by` kw, these are discreet sorters in that `by` would be for the columns and `level` for the levels of the index, so avoids any ambiguity. The user is then in charge of saying, hey sort by these columns or these levels (in theory we could actually do a multi-sort).\n- 5c) deprecate `by` and add `level`, avoids ambiguity but disallows the columns sorting pass thru\n- 5d) for labels, you can actually figure out whether its a level or a column (if their are duplicates then you multi-sort or raise), so we _could_ use the `by` keyword only, BUT, the issue is that you can sort on a level number! So we could not allow level numbers in ambiguous cases. more complicated but maybe more natural.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128050248",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128050248",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128050248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA1MDI0OA==",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:00:31Z",
    "updated_at": "2015-08-05T16:00:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1 for 5b. `df.sort_index(level=...)` is very readable/clear.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128053397",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128053397",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128053397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA1MzM5Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:10:42Z",
    "updated_at": "2015-08-05T16:10:42Z",
    "author_association": "MEMBER",
    "body": "I don't really see a reason to not integrate `sortlevel` in `sort_index`. I would use the `level` keyword in any case for this (and not `by`, as `level` is more consistent with other functions).\n\nSo I would go for 5c, although 5b is also OK. \nI am in favor of deprecating the `by` keyword (but soft-deprecation is enough I think -> not encouraging it in the docs), as this would make the API just cleaner: `sorted` for the values, `sort_index` for the labels. \nI don't see a reason that `sort_index` should also be able to sort on the columns (apart from historical ones of course: it already can) \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128055296",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128055296",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128055296,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA1NTI5Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:15:21Z",
    "updated_at": "2015-08-05T16:44:18Z",
    "author_association": "MEMBER",
    "body": "~~Further, another design question: what should `level` by default do when having a multi-index?~~\n- ~~6 a) Only sorting the first level (so default of `level=0`) -> this is the current behaviour of `sortlevel`~~\n- ~~6 b) Sorting the different levels in order (so default of `level=None`, the equivalent of `level=[0,1, ..n]` when having `n` levels)~~\n\n~~I would be in favor of 6b, so in contrast to `sorted` (for which we want to require providing a column to sort on with `by`), I would go with sorting all levels for the index. I find this the most logical default behaviour.~~\n\nEDIT: Ignore this, see https://github.com/pydata/pandas/pull/10726#issuecomment-128065395\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128060769",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128060769",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128060769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA2MDc2OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:30:59Z",
    "updated_at": "2015-08-05T16:42:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche maybe I wasn't clear\n\nif u do 5c (remove by) then you CANNOT do sort by column in sort_index\n5b adds`level` so that you then have unambiguous level OR column sorting (via `by`)\n\nfurther `level` cannot default to anything but None (as `b`y also has to be None as a default)\n\nhowever if both `by` and `level` are `None` then 6 comes into play \n(note that the default for `.sort` in master is to do 6b - fully sort a multi index, so this differs from master of `.sortlevel`)\n\nanybody confused yet????\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128065395",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128065395",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128065395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA2NTM5NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:39:33Z",
    "updated_at": "2015-08-05T16:39:33Z",
    "author_association": "MEMBER",
    "body": "@jreback no, I understood it correctly, probably I wasn't clear :-) \nAs I don't think `sort_index` should be able to sort by columns, I am in favor of (soft)deprecating `by`, so this is option `5c`\n\nYes, you are right about the default of `level`. I forgot the current behaviour of `sort_index` by looking at `sortlevel` .. So anyways, for back compat, `sort_index` will by default sort all levels (further, this is _actually_ also the behaviour of `sortlevel` as this sorts level 0, but also sorts the remaining, as `sort_remaining=True` by default). So ignore that question!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128065603",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128065603",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128065603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA2NTYwMw==",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:40:02Z",
    "updated_at": "2015-08-05T16:40:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> if u do 5c (remove by) then you CANNOT do sort by column in sort_index\n\nIsn't sorting by column(s) is sorting by values?? If so, it seems wrong that you could do that with `sort_index`. Therefor I was confused... I prefer 5c. :p\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128066486",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128066486",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128066486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA2NjQ4Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:43:05Z",
    "updated_at": "2015-08-05T16:43:54Z",
    "author_association": "MEMBER",
    "body": "To clarify: in the _current_ situation (no possibility to mix sorting of columns/index levels), I prefer 5c\n\nIf we want to add this enhancement to simultaneously specify to sort on index levels and columns (the 5d option of above), then the question is: where do we add this functionality and how? In `sorted`, `sort_index` or both? I would then lean towards saying: only add it in `sorted`, where the `by` keyword can also denote a index level name.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128066497",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128066497",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128066497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA2NjQ5Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:43:08Z",
    "updated_at": "2015-08-05T16:43:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd yes, there was some interest (see 5), in preserving the behavior of `.sort_index` to sort the columns when `by` is passed (event though this IS confusing)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128068445",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128068445",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128068445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA2ODQ0NQ==",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:51:31Z",
    "updated_at": "2015-08-05T16:51:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback deprecate it with :fire:!!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128068759",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128068759",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128068759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA2ODc1OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:52:55Z",
    "updated_at": "2015-08-05T16:55:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "so it IS possible, to add mixed index-column sorting in `.sorted`, e.g by specificying columns and/or named levels (but that's the rub, you lose the ability to specify by position at all). But I think that's an ok compromise. \n\n`.sort_index` because like `.sortlevel` (with a few extra args), and is unambiguous if you specify ints or names of the levels. So 5c looks good to me. \n\nThen in `2` (for `.sorted`) if we change to `by` from `columns` (no deprecation needed as this is a new method), you can do this mixed index-column sorting.\n\nso something like\n\n```\ndf = DataFrame(...., columns=list('ABCD'))\n\ndf.sorted(by=['A','B'])\ndf.set_index('A').sorted(by=['A','B'])\n```\n\nyield the same,  (and is a pretty reasonable compromise).\n\none small point though.\n\n```\ndf = Dataframe(...., columns=[0,1,2])\n\n# this is slightly ambiguous\n# do I mean the *index* level 0? or column 0?\ndf.sorted(by=[0,1])\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128068874",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128068874",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128068874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA2ODg3NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T16:53:27Z",
    "updated_at": "2015-08-05T16:53:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd is that a _soft_ deprecation? or a `blow-them-away` type?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/128072488",
    "html_url": "https://github.com/pandas-dev/pandas/pull/10726#issuecomment-128072488",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10726",
    "id": 128072488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODA3MjQ4OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T17:07:51Z",
    "updated_at": "2015-08-05T17:07:51Z",
    "author_association": "MEMBER",
    "body": "@jreback For your dataframe without index or level names:\n\n```\nIn [14]: df\nOut[14]: \n      0   1   2  3\n0 0  12  11  10  9\n  1   8   7   6  5\n1 0   4   3   2  1\n```\n\nI would support ordered by column values by supplying an axis. e.g., `df.sort_index(axis=1)`. In fact this already works:\n\n```\ndf.iloc[:, ::-1].sort_index(axis=1)\n#       0   1   2  3\n# 0 0  12  11  10  9\n#   1   8   7   6  5\n# 1 0   4   3   2  1\n```\n\nSo I don't think we need any action there on 5 at all?\n"
  }
]
