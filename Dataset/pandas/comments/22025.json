[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407096558",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22025#issuecomment-407096558",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22025",
    "id": 407096558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzA5NjU1OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T15:22:44Z",
    "updated_at": "2018-07-23T15:22:44Z",
    "author_association": "MEMBER",
    "body": "Big +1 in general!\r\n\r\n> What I propose is to make from_records only work when data is an iterable of array-like (list, tuple, np.array...) or an iterable of dict. And deprecate the other cases (dict and DataFrame).\r\n\r\nThe dict case is also kind of \"wrong\", as when seeing a dict as a \"dict of records\", I would expect a transposed result:\r\n\r\n```\r\nIn [3]: pd.DataFrame.from_records({'a': [1, 2, 3], 'b': [3, 4, 5]})\r\nOut[3]: \r\n   a  b\r\n0  1  3\r\n1  2  4\r\n2  3  5\r\n```\r\n\r\nSo +1 on deprecating that.  \r\nOnly about deprecating the structured/record array I am less sure. Of course this perfectly works as well with the normal `DataFrame` constructor, but currently that is the main \"documented\" use case of `from_records` (at least according to the docstring), so I would expect more people to use this. (and it also gives some consistency with `to_records`)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407104840",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22025#issuecomment-407104840",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22025",
    "id": 407104840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzEwNDg0MA==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T15:46:40Z",
    "updated_at": "2018-07-23T15:46:40Z",
    "author_association": "MEMBER",
    "body": "Good points. But I think I wasn't clear with `numpy.array` or a record array. I'd keep them, as iterating over them returns array-like values. And I think that's the case `from_records` should address.\r\n\r\nSo, to clarify what I meant, I'd support:\r\n- Iterable of tuple, list or dict\r\n- 2D numpy array, and record arrays\r\n- Anything else that when iterating over it returns a list-like or a dict\r\n\r\nAnd I wouldn't support other cases, including:\r\n- DataFrame: what is it expected to do anyway? return the same, a copy, or be able to rename columns?\r\n- dict: Agree with Joris points, and we already have `DataFrame.from_dict` that covers the use case of a dict of rows (with `orient='index'`)\r\n\r\nSo, I think we 100% agree."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407111610",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22025#issuecomment-407111610",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22025",
    "id": 407111610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzExMTYxMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T16:05:31Z",
    "updated_at": "2018-07-23T16:05:31Z",
    "author_association": "MEMBER",
    "body": "Yep, and 2D numpy array and and record arrays are also consistent with the 'iterable of array-like', as iterating through them gives you row by row (as opposed to DataFrame or dict)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407228261",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22025#issuecomment-407228261",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22025",
    "id": 407228261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzIyODI2MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T23:04:59Z",
    "updated_at": "2018-07-23T23:04:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "this seems ok - though would have to deprecate accepting a dict here\r\n\r\nI am also not sure you ‘can allocate the Dataframe memory’ as you don’t know the length of the data apriori if it’s a generator\r\n\r\nyou are right that it is possible to not instantiating to python lists though (for iterables with a known length)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432173241",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22025#issuecomment-432173241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22025",
    "id": 432173241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjE3MzI0MQ==",
    "user": {
      "login": "llawall",
      "id": 263523,
      "node_id": "MDQ6VXNlcjI2MzUyMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llawall",
      "html_url": "https://github.com/llawall",
      "followers_url": "https://api.github.com/users/llawall/followers",
      "following_url": "https://api.github.com/users/llawall/following{/other_user}",
      "gists_url": "https://api.github.com/users/llawall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llawall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llawall/subscriptions",
      "organizations_url": "https://api.github.com/users/llawall/orgs",
      "repos_url": "https://api.github.com/users/llawall/repos",
      "events_url": "https://api.github.com/users/llawall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llawall/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-23T09:34:59Z",
    "updated_at": "2018-10-23T09:34:59Z",
    "author_association": "NONE",
    "body": "The case of accepting dict in from_records is also currently broken in my opinion. I filed #22708 (PR: #22687) to suggest making the ordering of columns consistent with the constructor taking a similar dict argument. \r\n\r\nIf from_records continues to accept dict then I think it should at least be made consistent though on the whole I am +1 with the sentiment for a cleaner API by removing dict support in from_records. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433407283",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22025#issuecomment-433407283",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22025",
    "id": 433407283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQwNzI4Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T13:28:00Z",
    "updated_at": "2018-10-26T13:28:00Z",
    "author_association": "MEMBER",
    "body": "@llawall given the discussion here, I would maybe rather do a PR to deprecate passing a dict in `from_records`, than the PR you have now changing its behaviour."
  }
]
