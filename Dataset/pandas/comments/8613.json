[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60229640",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-60229640",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 60229640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjI5NjQw",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T12:12:36Z",
    "updated_at": "2014-10-23T12:12:36Z",
    "author_association": "MEMBER",
    "body": "Ah, seems there was a (closed) issue related to this: #5223\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60231061",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-60231061",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 60231061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjMxMDYx",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T12:26:37Z",
    "updated_at": "2014-10-23T12:26:57Z",
    "author_association": "MEMBER",
    "body": "Also, and this was the actual use case, how would be the following be best done?\n\n```\nIn [32]: df = pd.DataFrame(np.random.randn(60,3), index=pd.date_range('2012-01-01', periods=60), columns=['a', 'b', 'c'])\nIn [33]: df.iloc[25:35,1] = np.nan\n\nIn [34]: df = df.dropna()\n```\n\nSo you have a dataframe, and for some reason there are some NaNs, and these data have to be removed. With the resulting dataframe, I now want to select all data up to the end of January for columns a and d. So my code did:\n\n```\nIn [36]: df.ix[:'2012-01-31', ['a', 'b']]\nOut[36]:\n                   a         b\n2012-01-01  2.988938 -0.818541\n2012-01-02  0.068606  0.203595\n2012-01-03  0.748376  0.397277\n2012-01-04  1.577034 -1.061293\n...\n2012-01-22  0.079241  0.330411\n2012-01-23 -0.799368 -1.815083\n2012-01-24 -0.177154  0.329965\n2012-01-25  0.391620  1.613779\n```\n\nas I don't know beforehand which indexes will be missing. I wanted to update this to use `loc`, which didn't work. But it seems strange that you have to use `ix` for a case like this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60232239",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-60232239",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 60232239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjMyMjM5",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T12:38:43Z",
    "updated_at": "2014-10-23T12:38:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "IMO this should work with loc given the corresponding axis is monotonic.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60232802",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-60232802",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 60232802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjMyODAy",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T12:44:10Z",
    "updated_at": "2014-10-23T12:44:10Z",
    "author_association": "MEMBER",
    "body": "@immerrr Well, that is indeed the 'logic' for `ix`: this slicing with non-included labels only works for monotic indices (and this was explicitly introduced, see https://github.com/pydata/pandas/commit/c3708f2aacec816b3e6b8e59de075c08fd3f13f6). \nI don't really see a reason why this would be different for `loc`, and I am wondering if this was an oversight or on-purpose when `.loc` was introduced (and it could easily be an oversight, as this behaviour of `ix` is also not really documented, apart from the whatsnew of 0.7, and a single title (without further text) in the gotcha section: http://pandas.pydata.org/pandas-docs/stable/gotchas.html#non-monotonic-indexes-require-exact-matches)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60234444",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-60234444",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 60234444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjM0NDQ0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T12:59:03Z",
    "updated_at": "2014-10-23T12:59:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this is a bug. `.ix` does much less validation, so prob just slipping thru (I also didn't touch it much), was trying to preserve its exact functionaility.\n\nThat said, we should document the missing values handling (for scalar/slice) a bit more\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60234666",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-60234666",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 60234666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjM0NjY2",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T13:00:52Z",
    "updated_at": "2014-10-23T13:00:52Z",
    "author_association": "MEMBER",
    "body": "@jreback What do you mean with a 'bug'? That loc should also have the same behaviour as `ix` in this case? (so not 'intended' as you said in #5223)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60247384",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-60247384",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 60247384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjQ3Mzg0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T14:30:25Z",
    "updated_at": "2014-10-23T14:30:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I shouldn't say bug, rather unintended non-compliance with `.ix` behavior (that we didn't mean to change)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61916330",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61916330",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61916330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTE2MzMw",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T02:02:02Z",
    "updated_at": "2014-11-06T02:02:02Z",
    "author_association": "MEMBER",
    "body": "In #8740, I noted that this is already inconsistent between float and int indexes (float indexes don't check bounds).\n\nIn addition to consistency considerations, there may also be an efficiency argument. For float and interval indexes, you can't check whether a number is within the index bounds without doing binary search. This essentially doubles the amount of work necessary for doing slice lookups.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61929756",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61929756",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61929756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTI5NzU2",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T05:36:06Z",
    "updated_at": "2014-11-06T05:36:06Z",
    "author_association": "MEMBER",
    "body": "@jreback It sounds like you are concerned about how weird it would be to get back an empty Series if one or both of the indexers are out of bounds. But in fact, this is exactly what Python (and numpy) already does when indexing a list/ndarray with out of bound integers:\n\n```\n>>> range(5)[10:]\n[]\n```\n\nBased on the precedence from Python, I would only raise an exception if one of the slice bounds has the wrong type to lookup its order in the index -- but I suspect this case is already handled in `slice_locs`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61937861",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61937861",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61937861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTM3ODYx",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T07:41:09Z",
    "updated_at": "2014-11-06T07:41:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Speaking of unintended non-compliance, it seems that #7525 \"fixed\" this issue for `ix`.\n\n> I would only raise an exception if one of the slice bounds has the wrong type to lookup its order in the index\n\nIf the index is non-monotonic, out-of-bound label lookup should raise.\n\nAlso, existing, but non-unique bound that doesn't occupy contiguous slots of storage should raise as a slice bound (think `s.loc['foo':]` with `s.index = ['foo', 'bar', 'foo']`).\n\nThere's also a rather shady case of looking up dates with string literals, e.g. you are allowed to do `s.loc['2014-01-01']` and it works as expected most of the time. But at least at some point in the past what pandas did under the hood was something like `s.loc[datetime(2014, 1, 1): datetime(2014, 1, 1, 23, 59, 59, 999999)]`. And if it is still the case, it is not obvious if doing `s.loc['2014-01-01':]` should work in case of non-monotonic index when such string-based lookup refers to a single element.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61939660",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61939660",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61939660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTM5NjYw",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T08:04:21Z",
    "updated_at": "2014-11-06T08:04:21Z",
    "author_association": "MEMBER",
    "body": "@immerrr Agreed about all those cases. But again, I'm pretty sure all of those are already handled in slice_locs. The out of bounds slices bounds check is extra, and it's done in _LocIndexer (sp?). So it's also poor separation of concerns.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61941971",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61941971",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61941971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTQxOTcx",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T08:31:12Z",
    "updated_at": "2014-11-06T08:31:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yup, I don't like this either.\n\nAs a matter of fact I was thinking about redesigning `slice_locs` recently: most of the work is done in internal `_get_slice` function anyway, so I think it'll be better to change that function to a self-sufficient `get_bound(label, upper_or_lower)` method to incorporate all label-related logic and just spit out a location. Other methods could just take that and apply +1/-1 offsets as necessary for python-based slicing to work with different step directions. Negative steps, for example aren't handled in the existing code (#8716).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61963273",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61963273",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61963273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTYzMjcz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T10:59:55Z",
    "updated_at": "2014-11-06T10:59:55Z",
    "author_association": "MEMBER",
    "body": "Another thing: \"out-of-bound\" is at the moment not allowed, but hte index does _not_ have to be in the index:\n\n```\nIn [14]: s = pd.Series(['a','b','c','d'], [1,2,3,4])\n\nIn [17]: s.loc[1.5:3.5]\nOut[17]:\n2    b\n3    c\ndtype: object\n\nIn [18]: s.loc[1.5:5.5]\n...\nKeyError: 'stop bound [5.5] is not in the [index]'\n```\n\nSo the error message is also confusing, as the reason is not really that the key is not found in the index, but that it lies outside the range of the index. Also a bit confusing and inconsistent I think.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61964662",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61964662",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61964662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTY0NjYy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T11:13:27Z",
    "updated_at": "2014-11-06T11:15:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "you guys seem to be missing the point. Various index types DO handle this properly. Datetimelike handle out-of-bounds label (string) based slicing to enable partial indexing (e.g. using '2014-01'). While when specifying a Timestamp they must be exactly in the index.\n\nFloats are exactly the same (the above example has an Int64Index, so float slicing does not apply).\n\nInt64Index by definition NEVER has label sematics.\n\nAnd an object index, CANNOT ever have out-of-bounds slicing, it is never a monotonic index type, e.g.\nits either in the index or not (though my example directly contracts my statement).\n\n```\nIn [3]: s = Series([1,2,3,4],Index(['aa','ab','ac','ae'])) \n\nIn [4]: s['aa':'ae']\nOut[4]: \naa    1\nab    2\nac    3\nae    4\ndtype: int64\n\nIn [5]: s['aa':]\nOut[5]: \naa    1\nab    2\nac    3\nae    4\ndtype: int64\n\n# you guys are asking whether this should work, so it basically ignores this out-of-bounds label\n# and then treats it as ':'\nIn [6]: s['aa':'ad']\nOut[6]: \naa    1\nab    2\nac    3\ndtype: int64\n```\n\nSo what is the example that you are concerned about here? \n\n@jorisvandenbossche \nI think we shouldn't allow your above example (e.g. slicing with floats on an int index) AT ALL. (it seems partially broken I agree)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61965054",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61965054",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61965054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTY1MDU0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T11:17:28Z",
    "updated_at": "2014-11-06T11:49:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer \n\n```\nrange(5)[10:]\n```\n\nis purely positional based, so I WOULD expect this work (and `iloc` DOES have these semantics).\n\nBut label based is a completely different animal. Aside from partial string indexing, I think you either have to have the label in the index (to now when to stop), or the current behavior of allowing a non-existant index to be replaced by the end-points (I personally find this confusing but it does make sense).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61969241",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61969241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61969241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTY5MjQx",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T12:00:13Z",
    "updated_at": "2014-11-06T12:00:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Int64Index by definition NEVER has label sematics.\n\nI don't get why's that. I mean, I don't see user-level semantical difference between `Index([100, 200, 300])` and `Index(['100', '200', '300'])`, both are triples of labels, one of those _happen to be_ integers, one of those _happen to be_ strings, both _happen to be_ monotonically increasing.\n\n> And an object index, CANNOT ever have out-of-bounds slicing, it is never a monotonic index type\n\nThat might depend on how do you read slicing operation. I read `s.loc['aa':]` as _return all elements starting from the position of label `'aa'`_.  If the sought element is not in the index, then yes, strictly speaking, _position of label `'aa'`_ is undefined, but if the index is monotonic you can have the next best thing: the _position of label `'aa'` if it were in the index_.\n\nI kind of like the idea of separating _strict_ and _lax_ lookups and making the user decide which one do they want, but I'd wildly guess that most of the time, especially interactively, they would go for _lax_ lookups and thus it should be as convenient to use as it is now.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61969408",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61969408",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61969408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTY5NDA4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T12:01:55Z",
    "updated_at": "2014-11-06T12:07:32Z",
    "author_association": "MEMBER",
    "body": "> Int64Index by definition NEVER has label sematics.\n\n@jreback didn't you mean 'always' instead of 'never'? (at least for `.ix` and `.loc`). Or otherwise I don't understand this.\n\n> And an object index, CANNOT ever have out-of-bounds slicing, it is never a monotonic index type\n\nBut isn't it a general known feature that you can do this with a string index (the example you gave), although it only works with `[]` and `.ix[]` and not with `.loc[]`:\n\n```\nIn [27]: s = pd.Series([1,2,3,4], index=list('abde'))\n\nIn [32]: s['a':'c']\nOut[32]:\na    1\nb    2\ndtype: int64\n\nIn [33]: s.ix['a':'c']\nOut[33]:\na    1\nb    2\ndtype: int64\n\nIn [34]: s.loc['a':'c']\n...\nKeyError: 'stop bound [c] is not in the [index]'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61971806",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61971806",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61971806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTcxODA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T12:27:21Z",
    "updated_at": "2014-11-06T12:27:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@immerrr I disagree, I think object indices (when they contain strings) are by definition non-monotonic (I can see an ordering of course, and maybe that IS the difference here).\n\n@jorisvandenbossche \nyeh, I think the `.ix` behavior with an `Int64Index` is always label based , but the `[]` is ALWAYS positional based. Very confusing, but not sure we can change this (w/o a major user issue).\n\nas far as your second issue. I think that was your original example, `.ix` is inconsistent with this type of slicing (and with `[]`). So need to decide how to handle this for non-monotonic object type indexes (non-withstanding @immerrr point where you _may_ allow an object based index to be `monotonic` if the elements have a natural ordering, but IMHO this is dangerous).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61978481",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61978481",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61978481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTc4NDgx",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T13:30:53Z",
    "updated_at": "2014-11-06T13:51:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think object indices (when they contain strings) are by definition non-monotonic (I can see an ordering of course, and maybe that IS the difference here).\n\n@jreback, our notions themselves may be different, because I'm often confused about what you say on that topic.\n\nI usually think of **ordering** as a binary relation defined over a set of objects that possesses several properties (asymmetrical, transitive and ~~one more I keep forgetting~~ irreflexivity [*](http://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings)) with less-than being the default ordering relation.\n\nNow, less-than operation is not necessarily defined for two arbitrary Python objects, so in general, I agree, object index, unlike integer one, does not necessarily have an ordering. And it is under this assumption that NaT and NaN values _technically_ break any ordering. But if it contains only strings and less-than operation between any two strings is defined, then it has an ordering, by definition of ordering, regardless of the actual order of elements in that index.\n\nAs for monotonicity, Index represents a certain location-to-label mapping which can be monotonically increasing (nondecreasing for non-unique) if for any two locations `i` and `j`, `i < j` implies `idx[i] < idx[j]` (~~`i <= j`~~ `i < j` implies `idx[i] <= idx[j]` for non-unique).\n\nUsing these definitions I can't see how an object index can NEVER be monotonic if less-than (less-or-equal for non-unique) operation is defined for both locs — which are int — and for labels — which are str — and the monotonicity condition holds.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61985125",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61985125",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61985125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTg1MTI1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T14:21:45Z",
    "updated_at": "2014-11-06T14:21:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@immerrr \n\nwhat I mean is a `object` index SHOULD NEVER be classified as monotonic. Even if it has a 'string' ordering. I would call that a `StringIndex` in that case (but of course we don't have that ATM).\n\nThe problem is that we may be giving an ordering to something that actually is not implied at all.\n\ne.g.\n\n'aa','ab','ac','az'\n\nI think we are making an assumption that this is monotonic increasing in the strictest sense. That said maybe a user would expect this, but is IMHO not obvious at all, and thus we shouldn't do it.\n\nBy definition labels are NOT ordered. (Categories of course can be so this will solve the entire problem once we have `CategoricalIndex`).\n\nnot sure if that is more clear or not :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61985758",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61985758",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61985758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTg1NzU4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T14:26:23Z",
    "updated_at": "2014-11-06T14:30:45Z",
    "author_association": "MEMBER",
    "body": "> By definition labels are NOT ordered\n\nWhat is then the point/logic of `Index.is_monotonic` ? That _is_ based on the labels, no? So that implies we see a notion of order in the labels? \n(edit: or were only talking about string labels? I was reading labels in general. But still, `Index.is_monotonic` gives True for a `['a', 'b', 'c']` index)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61990490",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-61990490",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 61990490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTkwNDkw",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T14:58:07Z",
    "updated_at": "2014-11-06T14:58:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The problem is that we may be giving an ordering to something that actually is not implied at all.\n\nSo you're saying that unordered categorical values don't have ordering relation at all.  I agree with that.\n\n> what I mean is a object index SHOULD NEVER be classified as monotonic\n\nIf index labels have an ordering and they are arranged in ascending order, they are monotonic, by definition. What you meant was probably that object labels should never have an implicit ordering. \n\nThat is reasonable for categorical data, but I don't think that arbitrary objects taken straight from python runtime should be interpreted as categorical values by default. In other words, given `objs = Index(['a', 'b'])`, it's hardly intuitive to me that:\n\n``` python\nTrue == (objs[0] < objs[1])\n# and in the same time\nFalse == objs.is_monotonic_increasing\n```\n\nBut again, I agree that `CategoricalIndex` should resolve this, because it seems perfectly fine to me to have category ordering (or the lack thereof) stated explicitly, e.g.\n\n``` python\nFalse == CategoricalIndex(objs, ordered=False).is_monotonic_increasing\n# and even\nTrue == CategoricalIndex(objs, categories=objs[::-1]).is_monotonic_decreasing\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62025768",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-62025768",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 62025768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDI1NzY4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T18:22:38Z",
    "updated_at": "2014-11-06T18:22:38Z",
    "author_association": "MEMBER",
    "body": "@jreback \n\n> But label based is a completely different animal. Aside from partial string indexing, I think you either have to have the label in the index (to now when to stop), or the current behavior of allowing a non-existant index to be replaced by the end-points (I personally find this confusing but it does make sense).\n\nActually, for monotonic indexes, I think we should map the labels to integer locations, and then indexing should be exactly the same as standard numpy/python indexing. So the non-existent label is inserted in the location that maintains the order. This is consistent and simpler than the current rules. I don't think we should have different rules for int/float indexes -- that is very surprising to me.\n\nSide note: is there a good reason why we have not deprecated `.ix` yet? I notice that the docs mention that they work for mixed integer/label based access but that's such a niche situation that I think it would be better to remove it entirely (it can be done other ways).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62247715",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-62247715",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 62247715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjQ3NzE1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T06:24:26Z",
    "updated_at": "2014-11-08T08:11:57Z",
    "author_association": "MEMBER",
    "body": "I just took a look into implementing this change (commented out some lines of code, really) and ran into an unfortunate limitation: comparing an integer to a string does not raise an exception in Python 2.\n\nGiven that we want to raise `KeyError` rather than return size zero arrays when using integers for label based indexing if the labels are strings (if the index is monotonic), I don't think we can implement this for object indexes (unless we do type inference or make a real `StringIndex`).\n\nHowever, every other type of index _does_ have well defined types, so in principle we can replace the `__contains__` checks with type checks for the slice bounds. If we go down that route, I would prefer to move the logic to `slice_locs` from `_LocIndexer`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62250758",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-62250758",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 62250758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjUwNzU4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T08:52:51Z",
    "updated_at": "2014-11-08T08:52:51Z",
    "author_association": "MEMBER",
    "body": "Another note about `_LocIndexer` for anyone who's feeling up for a refactor: we should try to eliminate the `_has_valid_type` method entirely, or at least everywhere it does `in` or `isin` lookups. It's easier to ask for forgiveness than permission! Right now `.loc` looks up every element in the index twice: once to make sure it's safe, once to get the actual value.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62255573",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-62255573",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 62255573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjU1NTcz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T12:09:47Z",
    "updated_at": "2014-11-08T12:09:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer can u show me the example that you say needs fixing\nI haven't seen the usecase yet\n\nu can try to change indexing but their are lots of special cases - their is a reason for has_valid_type - but appreciate someone wading in\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62257104",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-62257104",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 62257104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjU3MTA0",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T13:06:59Z",
    "updated_at": "2014-11-08T13:06:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "There should be a method that casts the special case to a generic one or raises an error if it cannot, which is EAFP is about.  Speaking of wading in, I think I'm on a way to something interesting in #8753, but I'm already concerned about merging it in a non-disruptive manner.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62257237",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-62257237",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 62257237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjU3MjM3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-08T13:12:09Z",
    "updated_at": "2014-11-08T13:12:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@immerrr @shoyer oh don't get me wrong, I am +++1 for you guys wading in. My experience in the past has shown that:\n- these changes often involve fixing a bug which might be a special case and that\n- you then don't really want to do the API change which really _should_ be done\n- then this actually creates more special cases\n- but cleaning up the special cases is a negative feedback cycle (e.g. repeat this list)\n\nso, your approaches are actually good to divide-and-conquer by starting with cleaning up slicing\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62285772",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-62285772",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 62285772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjg1Nzcy",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T00:55:32Z",
    "updated_at": "2014-11-09T00:55:32Z",
    "author_association": "MEMBER",
    "body": "@jreback OK, here's an example: `s = pd.Series(range(5))`. I expect that `s.loc[-1:3]` and `s.loc[:3]` should be equivalent. Or consider @jorisvandenbossche's example from the first post.\n\nHaving this sort of logic on the index instead of the indexer also means that libraries like my project xray can make use of these sort of checks (we reuse pandas indexes but not indexers).\n\nHonestly, I'm not entirely certain it's worth the trouble of wading in to this. I do understand that (almost) every awkward special case is there to fix a real bug. That scares me! :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62301149",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8613#issuecomment-62301149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8613",
    "id": 62301149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzAxMTQ5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T12:09:16Z",
    "updated_at": "2014-11-09T12:09:16Z",
    "author_association": "MEMBER",
    "body": "Disclaimer: i am not (yet) familiar with the indexing internals, so maybe my following comment will be stupid :-)\n\nBut, the things we are talking about for `.loc`, aren't they all already implemented in the code? Namely for `.ix`? \nAs my original example above worked for `.ix`, not for `.loc`. The example @shoyer gives now in the previous comment, also works for `.ix`: `s.ix[-1:3]` gives the expected result that he wants for `s.loc[-1:3]`.\n"
  }
]
