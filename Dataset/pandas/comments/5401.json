[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/27539571",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-27539571",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 27539571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTM5NTcx",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T00:10:43Z",
    "updated_at": "2013-11-01T00:10:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why did you close this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/27546227",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-27546227",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 27546227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTQ2MjI3",
    "user": {
      "login": "RomanPekar",
      "id": 1523574,
      "node_id": "MDQ6VXNlcjE1MjM1NzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1523574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RomanPekar",
      "html_url": "https://github.com/RomanPekar",
      "followers_url": "https://api.github.com/users/RomanPekar/followers",
      "following_url": "https://api.github.com/users/RomanPekar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RomanPekar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RomanPekar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RomanPekar/subscriptions",
      "organizations_url": "https://api.github.com/users/RomanPekar/orgs",
      "repos_url": "https://api.github.com/users/RomanPekar/repos",
      "events_url": "https://api.github.com/users/RomanPekar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RomanPekar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T03:47:02Z",
    "updated_at": "2013-11-01T03:47:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oops my bad it's totally by accident, hit the button somehow :(\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/27561511",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-27561511",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 27561511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTYxNTEx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T12:10:11Z",
    "updated_at": "2013-11-01T12:10:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "related #3835 , there is a method: `from pandas.tools.util import cartesian_product`\n\nhow is this different from an outer join? (which does this and just drops the na groups)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/27578652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-27578652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 27578652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTc4NjUy",
    "user": {
      "login": "RomanPekar",
      "id": 1523574,
      "node_id": "MDQ6VXNlcjE1MjM1NzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1523574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RomanPekar",
      "html_url": "https://github.com/RomanPekar",
      "followers_url": "https://api.github.com/users/RomanPekar/followers",
      "following_url": "https://api.github.com/users/RomanPekar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RomanPekar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RomanPekar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RomanPekar/subscriptions",
      "organizations_url": "https://api.github.com/users/RomanPekar/orgs",
      "repos_url": "https://api.github.com/users/RomanPekar/repos",
      "events_url": "https://api.github.com/users/RomanPekar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RomanPekar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T16:28:56Z",
    "updated_at": "2013-11-01T16:28:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback could you provide an example how to do outer join if there's no column on which to join? May be it's possible to do with apply somehow?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/27580017",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-27580017",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 27580017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTgwMDE3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T16:46:06Z",
    "updated_at": "2013-11-01T16:46:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "A bit hacky\n\n```\nIn [28]: import pandas.tools.util as tools\n\nIn [29]: DataFrame(index=MultiIndex.from_arrays(\n                  tools.cartesian_product([dfA['A'].tolist(),dfB['B'].tolist()]),\n                    names=['A','B'])).reset_index()\nOut[29]: \n   A  B\n0  a  0\n1  a  1\n2  a  2\n3  b  0\n4  b  1\n5  b  2\n6  c  0\n7  c  1\n8  c  2\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/27581601",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-27581601",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 27581601,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTgxNjAx",
    "user": {
      "login": "RomanPekar",
      "id": 1523574,
      "node_id": "MDQ6VXNlcjE1MjM1NzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1523574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RomanPekar",
      "html_url": "https://github.com/RomanPekar",
      "followers_url": "https://api.github.com/users/RomanPekar/followers",
      "following_url": "https://api.github.com/users/RomanPekar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RomanPekar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RomanPekar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RomanPekar/subscriptions",
      "organizations_url": "https://api.github.com/users/RomanPekar/orgs",
      "repos_url": "https://api.github.com/users/RomanPekar/repos",
      "events_url": "https://api.github.com/users/RomanPekar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RomanPekar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T17:05:55Z",
    "updated_at": "2013-11-01T17:05:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback yes, good one! But what if there're more than one column in either dataframe, or in both?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/27582108",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-27582108",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 27582108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTgyMTA4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T17:12:44Z",
    "updated_at": "2013-11-01T17:12:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "not sure....can you create input and output frames?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/27585559",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-27585559",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 27585559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTg1NTU5",
    "user": {
      "login": "RomanPekar",
      "id": 1523574,
      "node_id": "MDQ6VXNlcjE1MjM1NzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1523574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RomanPekar",
      "html_url": "https://github.com/RomanPekar",
      "followers_url": "https://api.github.com/users/RomanPekar/followers",
      "following_url": "https://api.github.com/users/RomanPekar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RomanPekar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RomanPekar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RomanPekar/subscriptions",
      "organizations_url": "https://api.github.com/users/RomanPekar/orgs",
      "repos_url": "https://api.github.com/users/RomanPekar/repos",
      "events_url": "https://api.github.com/users/RomanPekar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RomanPekar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T17:53:57Z",
    "updated_at": "2013-11-01T17:55:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\n>>> dfA = pd.DataFrame({'A':list('ab'), 'B':range(2,0,-1)})\n>>> dfB = pd.DataFrame({'C':range(2), 'D':range(4, 6)})\n>>> dfA\n   A  B\n0  a  2\n1  b  1\n>>> dfB\n   C  D\n0  0  4\n1  1  5\n>>> dfA['key'] = 1\n>>> dfB['key'] = 1\n>>> df = pd.merge(dfA, dfB, on='key')\n>>> del df['key']\n>>> df\n   A  B  C  D\n0  a  2  0  4\n1  a  2  1  5\n2  b  1  0  4\n3  b  1  1  5\n```\n\nhere's [sql fiddle example](http://sqlfiddle.com/#!3/d41d8/24241) of cross join\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/28131322",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-28131322",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 28131322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTMxMzIy",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-09T16:54:51Z",
    "updated_at": "2013-11-09T16:54:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW, this is something I've often wanted too, and I think is fundamental enough an operation to deserve a better way.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/28528126",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-28528126",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 28528126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTI4MTI2",
    "user": {
      "login": "CarstVaartjes",
      "id": 2722815,
      "node_id": "MDQ6VXNlcjI3MjI4MTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2722815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CarstVaartjes",
      "html_url": "https://github.com/CarstVaartjes",
      "followers_url": "https://api.github.com/users/CarstVaartjes/followers",
      "following_url": "https://api.github.com/users/CarstVaartjes/following{/other_user}",
      "gists_url": "https://api.github.com/users/CarstVaartjes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CarstVaartjes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CarstVaartjes/subscriptions",
      "organizations_url": "https://api.github.com/users/CarstVaartjes/orgs",
      "repos_url": "https://api.github.com/users/CarstVaartjes/repos",
      "events_url": "https://api.github.com/users/CarstVaartjes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CarstVaartjes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-14T22:11:54Z",
    "updated_at": "2013-11-14T22:11:54Z",
    "author_association": "NONE",
    "body": "I use the same method as @RomanPekar regularly too (cartesian products are handy for basket analysis as they create a normalized version of a scarce matrix). Main thing I guess is that you could improve performance inside Pandas if you know you don't have to look at an index to reference back and forth but instead can multiply the dataframe for any possible combination?  in regular python I would expect something like this:\n\n```\nlist_1 = [['a', 1], ['b', 2], ['c', 3]]\nlist_2 = [['x', 11], ['y', 12], ['z', 13]]\n\nlist_result = []\nfor sub_list_1 in list_1:\n    for sub_list_2 in list_2:\n        list_result.append(sub_list_1 + sub_list_2)\n```\n\nWhen it comes notation I myself would like a \"how='cartesian'\" where you do not specify left_on and right_on...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/46432631",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-46432631",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 46432631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDMyNjMx",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-18T13:08:11Z",
    "updated_at": "2014-06-18T13:08:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there any reason not to implement this?  The only thing I'm not sure of is what we expect from `how='cross'` when there _are_ common columns; do we want (1) a complete merge, (2) _x and _y suffixes, or (3) to raise an exception?  I.e. which of\n\n```\n>>> df0 = pd.DataFrame({\"A\": [1,2], \"B\": [3,4]})\n>>> df1 = pd.DataFrame({\"C\": [5,6], \"B\": [3,8]})\n>>> df0[\"key\"] = 1; df1[\"key\"] = 2; m = df0.merge(df1, how='outer'); del m[\"key\"]; print(m)\n    A  B   C\n0   1  3 NaN\n1   2  4 NaN\n2 NaN  3   5\n3 NaN  8   6\n>>> df0[\"key\"] = 1; df1[\"key\"] = 2; m = df0.merge(df1, on=\"key\", how='outer'); del m[\"key\"]; print(m)\n    A  B_x  B_y   C\n0   1    3  NaN NaN\n1   2    4  NaN NaN\n2 NaN  NaN    3   5\n3 NaN  NaN    8   6\n```\n\ndo we want?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72488761",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-72488761",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 72488761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNDg4NzYx",
    "user": {
      "login": "larsmans",
      "id": 335383,
      "node_id": "MDQ6VXNlcjMzNTM4Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/335383?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/larsmans",
      "html_url": "https://github.com/larsmans",
      "followers_url": "https://api.github.com/users/larsmans/followers",
      "following_url": "https://api.github.com/users/larsmans/following{/other_user}",
      "gists_url": "https://api.github.com/users/larsmans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/larsmans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/larsmans/subscriptions",
      "organizations_url": "https://api.github.com/users/larsmans/orgs",
      "repos_url": "https://api.github.com/users/larsmans/repos",
      "events_url": "https://api.github.com/users/larsmans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/larsmans/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-02T16:37:45Z",
    "updated_at": "2015-02-02T16:37:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1, I just hit this issue too while trying to represent factors of Bayesian networks as dataframes. When factors have no common variables, their products is a Cartesian product, i.e., cross join. My workaround was to add a dummy column and join on that, then remove it afterwards. I see [other people](http://nbviewer.ipython.org/github/amplab/datascience-sp14/blob/master/lab4/solutions.ipynb#fuzzy-joins) do that as well.\n\nIn this application it doesn't matter what happens when there are common columns since I need to treat one of them specially anyway, but I guess adding suffixes would be a sane default; that would be like joining `on` an empty list of columns.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92883917",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-92883917",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 92883917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyODgzOTE3",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-14T14:41:39Z",
    "updated_at": "2015-04-14T14:41:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Because concat doesn't give you the Cartesian product:\n\n```\n>>> dfA = pd.DataFrame({'A':list('ab'), 'B':range(2,0,-1)})\n>>> dfB = pd.DataFrame({'C':range(2), 'D':range(4, 6)})\n>>> pd.concat([dfA, dfB])\n     A   B   C   D\n0    a   2 NaN NaN\n1    b   1 NaN NaN\n0  NaN NaN   0   4\n1  NaN NaN   1   5\n>>> dfA[\"key\"] = 1; dfB[\"key\"] = 1;\n>>> m = dfA.merge(dfB,how='outer'); del m[\"key\"];\n>>> m\n   A  B  C  D\n0  a  2  0  4\n1  a  2  1  5\n2  b  1  0  4\n3  b  1  1  5\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92887558",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-92887558",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 92887558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyODg3NTU4",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-14T14:47:20Z",
    "updated_at": "2015-04-14T14:47:30Z",
    "author_association": "MEMBER",
    "body": "It's worth noting that attempting a `CROSS JOIN` with an `ON` predicate raises a syntax error in postgres. Pandas should disallow the `on` argument.\n\n```\npcloud=# select * from orders;\n number | order_date | cust_id | salesperson_id | amount\n--------+------------+---------+----------------+--------\n     10 | 1996-08-02 |       4 |              2 |    540\n     20 | 1999-01-30 |       4 |              8 |   1800\n     30 | 1995-07-14 |       9 |              1 |    460\n     40 | 1998-01-29 |       7 |              2 |   2400\n     50 | 1998-02-03 |       6 |              7 |    600\n     60 | 1998-03-02 |       6 |              7 |    720\n     70 | 1998-05-06 |       9 |              7 |    150\n     80 | 1999-07-23 |       4 |             12 |    200\n     90 | 2000-07-23 |       9 |             12 |   2300\n(9 rows)\n\npcloud=# select * from customer;\n id |   name   |   city   | industry_type\n----+----------+----------+---------------\n  4 | Samsonic | pleasant | J\n  6 | Panasung | oaktown  | J\n  7 | Samony   | jackson  | B\n  9 | Orange   | Jackson  | B\n(4 rows)\n\npcloud=# select * from orders cross join customer on orders.cust_id = customer.id;\nERROR:  syntax error at or near \"on\"\nLINE 1: select * from orders cross join customer on orders.cust_id =...\n                                                 ^\npcloud=# select * from orders left join customer on orders.cust_id = customer.id;\n number | order_date | cust_id | salesperson_id | amount | id |   name   |   city   | industry_type\n--------+------------+---------+----------------+--------+----+----------+----------+---------------\n     10 | 1996-08-02 |       4 |              2 |    540 |  4 | Samsonic | pleasant | J\n     20 | 1999-01-30 |       4 |              8 |   1800 |  4 | Samsonic | pleasant | J\n     30 | 1995-07-14 |       9 |              1 |    460 |  9 | Orange   | Jackson  | B\n     40 | 1998-01-29 |       7 |              2 |   2400 |  7 | Samony   | jackson  | B\n     50 | 1998-02-03 |       6 |              7 |    600 |  6 | Panasung | oaktown  | J\n     60 | 1998-03-02 |       6 |              7 |    720 |  6 | Panasung | oaktown  | J\n     70 | 1998-05-06 |       9 |              7 |    150 |  9 | Orange   | Jackson  | B\n     80 | 1999-07-23 |       4 |             12 |    200 |  4 | Samsonic | pleasant | J\n     90 | 2000-07-23 |       9 |             12 |   2300 |  9 | Orange   | Jackson  | B\n(9 rows)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92889968",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-92889968",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 92889968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyODg5OTY4",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-14T14:53:45Z",
    "updated_at": "2015-04-14T14:53:45Z",
    "author_association": "MEMBER",
    "body": "We need to differentiate same name columns because the cartesian product can potentially generate different values\n\n``` sql\npcloud=# select * from orders, customer2;\n\n number | order_date | cust_id | salesperson_id | amount | cust_id |   name   |   city   | industry_type\n--------+------------+---------+----------------+--------+---------+----------+----------+---------------\n     10 | 1996-08-02 |       4 |              2 |    540 |       4 | Samsonic | pleasant | J\n     10 | 1996-08-02 |       4 |              2 |    540 |       6 | Panasung | oaktown  | J\n     10 | 1996-08-02 |       4 |              2 |    540 |       7 | Samony   | jackson  | B\n     10 | 1996-08-02 |       4 |              2 |    540 |       9 | Orange   | Jackson  | B\n     20 | 1999-01-30 |       4 |              8 |   1800 |       4 | Samsonic | pleasant | J\n     20 | 1999-01-30 |       4 |              8 |   1800 |       6 | Panasung | oaktown  | J\n     20 | 1999-01-30 |       4 |              8 |   1800 |       7 | Samony   | jackson  | B\n     20 | 1999-01-30 |       4 |              8 |   1800 |       9 | Orange   | Jackson  | B\n     30 | 1995-07-14 |       9 |              1 |    460 |       4 | Samsonic | pleasant | J\n     30 | 1995-07-14 |       9 |              1 |    460 |       6 | Panasung | oaktown  | J\n     30 | 1995-07-14 |       9 |              1 |    460 |       7 | Samony   | jackson  | B\n     30 | 1995-07-14 |       9 |              1 |    460 |       9 | Orange   | Jackson  | B\n     40 | 1998-01-29 |       7 |              2 |   2400 |       4 | Samsonic | pleasant | J\n     40 | 1998-01-29 |       7 |              2 |   2400 |       6 | Panasung | oaktown  | J\n     40 | 1998-01-29 |       7 |              2 |   2400 |       7 | Samony   | jackson  | B\n     40 | 1998-01-29 |       7 |              2 |   2400 |       9 | Orange   | Jackson  | B\n     50 | 1998-02-03 |       6 |              7 |    600 |       4 | Samsonic | pleasant | J\n     50 | 1998-02-03 |       6 |              7 |    600 |       6 | Panasung | oaktown  | J\n     50 | 1998-02-03 |       6 |              7 |    600 |       7 | Samony   | jackson  | B\n     50 | 1998-02-03 |       6 |              7 |    600 |       9 | Orange   | Jackson  | B\n     60 | 1998-03-02 |       6 |              7 |    720 |       4 | Samsonic | pleasant | J\n     60 | 1998-03-02 |       6 |              7 |    720 |       6 | Panasung | oaktown  | J\n     60 | 1998-03-02 |       6 |              7 |    720 |       7 | Samony   | jackson  | B\n     60 | 1998-03-02 |       6 |              7 |    720 |       9 | Orange   | Jackson  | B\n     70 | 1998-05-06 |       9 |              7 |    150 |       4 | Samsonic | pleasant | J\n     70 | 1998-05-06 |       9 |              7 |    150 |       6 | Panasung | oaktown  | J\n     70 | 1998-05-06 |       9 |              7 |    150 |       7 | Samony   | jackson  | B\n     70 | 1998-05-06 |       9 |              7 |    150 |       9 | Orange   | Jackson  | B\n     80 | 1999-07-23 |       4 |             12 |    200 |       4 | Samsonic | pleasant | J\n     80 | 1999-07-23 |       4 |             12 |    200 |       6 | Panasung | oaktown  | J\n     80 | 1999-07-23 |       4 |             12 |    200 |       7 | Samony   | jackson  | B\n     80 | 1999-07-23 |       4 |             12 |    200 |       9 | Orange   | Jackson  | B\n     90 | 2000-07-23 |       9 |             12 |   2300 |       4 | Samsonic | pleasant | J\n     90 | 2000-07-23 |       9 |             12 |   2300 |       6 | Panasung | oaktown  | J\n     90 | 2000-07-23 |       9 |             12 |   2300 |       7 | Samony   | jackson  | B\n     90 | 2000-07-23 |       9 |             12 |   2300 |       9 | Orange   | Jackson  | B\n(36 rows)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92903669",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-92903669",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 92903669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyOTAzNjY5",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-14T15:20:00Z",
    "updated_at": "2015-04-14T15:20:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, @cpcloud, so if I understand the semantic we need to match so as not to violate least surprise for our database-minded friends, shared column names should behave as if they had an implicit suffix to distinguish them?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92906199",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-92906199",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 92906199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyOTA2MTk5",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-14T15:22:51Z",
    "updated_at": "2015-04-14T15:22:51Z",
    "author_association": "MEMBER",
    "body": "@dsm054 Yep.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/93891578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-93891578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 93891578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkzODkxNTc4",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-17T04:35:15Z",
    "updated_at": "2015-04-17T04:35:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've got this working for `merge`, so that `df0.merge(df1, how='cross')` works exactly as it would if you introduced the temp column, but I'm not entirely sure what to do with `join`.  Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220696664",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-220696664",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 220696664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDY5NjY2NA==",
    "user": {
      "login": "bmoscon",
      "id": 1280059,
      "node_id": "MDQ6VXNlcjEyODAwNTk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1280059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bmoscon",
      "html_url": "https://github.com/bmoscon",
      "followers_url": "https://api.github.com/users/bmoscon/followers",
      "following_url": "https://api.github.com/users/bmoscon/following{/other_user}",
      "gists_url": "https://api.github.com/users/bmoscon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bmoscon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bmoscon/subscriptions",
      "organizations_url": "https://api.github.com/users/bmoscon/orgs",
      "repos_url": "https://api.github.com/users/bmoscon/repos",
      "events_url": "https://api.github.com/users/bmoscon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bmoscon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-20T19:24:46Z",
    "updated_at": "2016-05-20T19:24:46Z",
    "author_association": "NONE",
    "body": "Any update on this? Would love to see this feature/enhancement in an upcoming release\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239238116",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-239238116",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 239238116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTIzODExNg==",
    "user": {
      "login": "pkch",
      "id": 1593648,
      "node_id": "MDQ6VXNlcjE1OTM2NDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1593648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pkch",
      "html_url": "https://github.com/pkch",
      "followers_url": "https://api.github.com/users/pkch/followers",
      "following_url": "https://api.github.com/users/pkch/following{/other_user}",
      "gists_url": "https://api.github.com/users/pkch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pkch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pkch/subscriptions",
      "organizations_url": "https://api.github.com/users/pkch/orgs",
      "repos_url": "https://api.github.com/users/pkch/repos",
      "events_url": "https://api.github.com/users/pkch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pkch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-11T17:52:23Z",
    "updated_at": "2016-08-11T17:52:23Z",
    "author_association": "NONE",
    "body": "For API purposes, would it be useful to just allow an arbitrary join condition? That way, cross-join is just the special case of no condition (`None`, which is interpreted as `lambda x, y: True`). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239784002",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-239784002",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 239784002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc4NDAwMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T11:45:22Z",
    "updated_at": "2016-08-15T11:45:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pkch `on='cross'` is a nice API here (it _could_ be implemented as a general conditional, but is more performant as a special case). Separately the `on=` could be a condition (eg. a callable)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305257653",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-305257653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 305257653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTI1NzY1Mw==",
    "user": {
      "login": "ngould",
      "id": 3130631,
      "node_id": "MDQ6VXNlcjMxMzA2MzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3130631?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ngould",
      "html_url": "https://github.com/ngould",
      "followers_url": "https://api.github.com/users/ngould/followers",
      "following_url": "https://api.github.com/users/ngould/following{/other_user}",
      "gists_url": "https://api.github.com/users/ngould/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ngould/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ngould/subscriptions",
      "organizations_url": "https://api.github.com/users/ngould/orgs",
      "repos_url": "https://api.github.com/users/ngould/repos",
      "events_url": "https://api.github.com/users/ngould/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ngould/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T17:23:23Z",
    "updated_at": "2017-05-31T17:23:23Z",
    "author_association": "NONE",
    "body": "I just came across this thread after looking to an answer to the same question. I think the following API would be great, noting that when the `how` argument is set to `cross`, the `on` argument must be `None`.\r\n\r\nFor `pd.merge`:\r\n``result = pd.merge(df1, df2, how='cross')``\r\n\r\nFor `pd.DataFrame.merge`:\r\n``result = df1.merge(df2, how='cross')``\r\n\r\nFor `pd.DataFrame.join`:\r\n``result = df1.join(df2, how='cross')``\r\n\r\nMy experience is the same as noted above, in that the best way to accomplish this in pandas currently is:\r\n\r\n```\r\ndf1['key'] = 1\r\ndf2['key'] = 1\r\nresult = pd.merge(df1, df2, on='key')\r\n```\r\n\r\nThat works, but in my opinion isn't readable enough to use in polite company. Thoughts on how to move forward?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305262966",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-305262966",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 305262966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTI2Mjk2Ng==",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T17:41:29Z",
    "updated_at": "2017-05-31T17:41:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was just thinking about this the other day when I was looking at old branches.  It seems reasonable to try to get this into 0.21."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/306002963",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-306002963",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 306002963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjAwMjk2Mw==",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-03T21:37:37Z",
    "updated_at": "2017-06-03T21:40:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to get some input on the possible behaviour of a cross join.  I have a candidate implementation but while testing different cases I came across some decisions I want people to have a chance to think about.  Partly this is because after lots of time spent on SO, I think we chose the wrong default for `as_index` in `groupby`, but it's too late to change now-- I'd prefer not for that to happen again, so if someone else can spot a problem, that'd be great.\r\n\r\nOverview\r\n-------------\r\n\r\nBased on the earlier discussion, I'm proposing a new option `how='cross'`, which would give the Cartesian product of the two dataframes.  In terms of row values, this would be equivalent to adding a dummy column to each frame, performing an inner merge on that column, and then deleting it from the result, which is the standard workaround at the moment.\r\n\r\nAs an example:\r\n\r\n```\r\nIn [17]: df0 = pd.DataFrame({\"A\": [1,2]})\r\n\r\nIn [18]: df1 = pd.DataFrame({\"B\": [3,4,5]})\r\n\r\nIn [19]: df0.merge(df1, how='cross')\r\nOut[19]: \r\n   A  B\r\n0  1  3\r\n1  1  4\r\n2  1  5\r\n3  2  3\r\n4  2  4\r\n5  2  5\r\n\r\nIn [20]: df0.assign(m=1).merge(df1.assign(m=1), on='m', how='inner').drop('m', axis=1)\r\nOut[20]: \r\n   A  B\r\n0  1  3\r\n1  1  4\r\n2  1  5\r\n3  2  3\r\n4  2  4\r\n5  2  5\r\n```\r\n\r\nParameters\r\n----------------\r\n\r\n`pd.merge` has lots of options, though, and we need to decide how they're being handled. Here are my thoughts so far.\r\n\r\n - `on`, `left_on`, `right_on`: if they're specified, raise a ValueError.  `how='cross'` implicitly specifies its own join target for each frame, and so it doesn't make sense to allow these.\r\n - `sort`: keep but ignore.  The join keys are effectively all equal, so sorting has no effect, and leaving it in is harmless.\r\n - `suffixes`: keep.  In the case of matching column names in each frame, it'll behave just like the reference merge, and we get\r\n\r\n```\r\nIn [25]: df0.merge(df1, how='cross')\r\nOut[25]: \r\n   A  C_x  B  C_y\r\n0  1   10  3   30\r\n1  1   10  4   40\r\n2  1   10  5   50\r\n3  2   20  3   30\r\n4  2   20  4   40\r\n5  2   20  5   50\r\n\r\nIn [26]: df0.assign(m=1).merge(df1.assign(m=1), on='m', how='inner').drop('m', axis=1)\r\nOut[26]: \r\n   A  C_x  B  C_y\r\n0  1   10  3   30\r\n1  1   10  4   40\r\n2  1   10  5   50\r\n3  2   20  3   30\r\n4  2   20  4   40\r\n5  2   20  5   50\r\n```\r\n\r\n - `copy`: keep, although whether or not it does anything will depend on the current merge implementation (and the promise \"not unnecessarily\" is pretty weak anyhow.)\r\n - `indicator`: keep.  The output won't be very interesting, as it will always be \"both\", but it's harmless.\r\n- `validate`: behave exactly as if we're doing an inner merge on a dummy column (so that two one-row frames pass a `'one_to_one'` check but longer frames would raise a MergeError.)\r\n\r\nIndex\r\n--------\r\n For me, the interesting question is what to do with `left_index` and `right_index`.  I can think of at least three defensible options:\r\n\r\n1) Raise if either `left_index` or `right_index` is not False. The docstring says \"Use the index from the left DataFrame as the join key(s)\" as the meaning of `left_index`, but `how='cross'` already specified a custom join key, and so it doesn't make sense.\r\n \r\nAdvantage: very easy to explain and understand.  Also doesn't prevent us from changing our minds later, as it's much easier to give code which used to fail a new meaning than to change the meaning of code which used to give a result.  If you want the index information to be preserved, you'd still have the option of calling `.reset_index()` on the arguments.\r\n\r\nDisadvantage: pandas code is already too cluttered with `.reset_index()` calls, IMHO.\r\n\r\n2) Behave exactly as merging on a dummy column would.  In other words:\r\n\r\n<pre>\r\nIn [72]: df0 = pd.DataFrame({\"A\": [1,2]}, index=[10,20])\r\n\r\nIn [73]: df1 = pd.DataFrame({\"B\": [3,4,5]}, index=[20,30,40])\r\n\r\nIn [74]: df0.assign(m=1).merge(df1.assign(m=1), on='m', how='inner').drop('m', axis=1)\r\nOut[74]: \r\n   A  B\r\n0  1  3\r\n1  1  4\r\n2  1  5\r\n3  2  3\r\n4  2  4\r\n5  2  5\r\n\r\nIn [75]: df0.assign(m=1).merge(df1.assign(m=1), on='m', how='inner', left_index=True).drop('m', axis=1)\r\nOut[75]: \r\n    A  B\r\n20  1  3\r\n30  1  4\r\n40  1  5\r\n20  2  3\r\n30  2  4\r\n40  2  5\r\n\r\nIn [76]: df0.assign(m=1).merge(df1.assign(m=1), on='m', how='inner', right_index=True).drop('m', axis=1)\r\nOut[76]: \r\n    A  B\r\n10  1  3\r\n10  1  4\r\n10  1  5\r\n20  2  3\r\n20  2  4\r\n20  2  5\r\n\r\nIn [77]: df0.assign(m=1).merge(df1.assign(m=1), on='m', how='inner', left_index=True, right_index=True).drop('m', axis=1)\r\nOut[77]: \r\n    A  B\r\n20  2  3\r\n</pre>\r\n\r\nThat is, in the case of `left_index=right_index=False`, give the natural index.  (Which is an Int64Index, not a Range, but that's minor).  In the case of `left_index=True`, repeat the *right* index values.  In the case of `right_index=True`, repeat the *left* index values.  In the case of both, keep the shared indices.\r\n\r\nAdvantage: the behaviour, while not obvious, can be explained by reference to the workaround everyone uses to get the cross join now.\r\n\r\nDisadvantage: it's really not obvious at first glance that this is the behaviour you get if you specify `on` as well as `left/right` index, and setting them both breaks the expectation that you'd have len(df0) * len(df1) rows in the output of a cross join.\r\n\r\n3a) Do the same as in #2, but instead of keeping only the common indices when `left_index` and `right_index` are True, set the index to the multiindex product of the two indices:\r\n```\r\nIn [109]: m0 = pd.MultiIndex.from_product([df0.index, df1.index])\r\n\r\nIn [110]: df0.assign(m=1).merge(df1.assign(m=1), on='m', how='inner', right_index=True).drop('m', axis=1).set_index(m0)\r\nOut[110]: \r\n       A  B\r\n10 20  1  3\r\n   30  1  4\r\n   40  1  5\r\n20 20  2  3\r\n   30  2  4\r\n   40  2  5\r\n```\r\n\r\nAdvantage: now the cross join produces the expected number of rows, and there's a way to preserve the index information if you want it, while the default (with `left_index=right_index=False` would continue to ignore it.)\r\n\r\nDisadvantage: now it really feels like we're reinterpreting `left_index` and `right_index` in the `how='cross'` case.\r\n\r\n3b) Do the same as in (3a), but change the interpretation of the index flags in the case of `how='cross'` to mean _keep_ that index information.  In other words, `left_index=True` would give you an index in the result which consists of df0's index elements repeated appropriately, `right_index=True` would give you df1's index elements repeated appropriately, and both true would give you the multiindex.\r\n\r\nAdvantage: all of those of 3a, with a much easier way to explain what gets used in the resulting index.\r\n\r\nDisadvantage: inverts the behaviour from anyone used to the `merge` behaviour in this (admittedly obscure) case.\r\n\r\nConclusion\r\n---------------\r\n\r\nThe fact we have indices to worry about complicates things a bit.  Option #1 (raise) is certainly the simplest.  I think option #2, although I like the consistency with the workaround, is ruled out by the fact it doesn't always return the expected number of elements.\r\n\r\nI don't think I've ever used `on` with `left_index=True` or `right_index=True`.  To be honest, it feels a little weird that it works in the first place.. but for me since I never use it, any incompatibility with current behaviour isn't a problem.  If I were the only user of pandas I'd go for 3b and get on with my day, but I want to preserve least surprise for anyone who might be using it.\r\n\r\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/306006165",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-306006165",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 306006165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjAwNjE2NQ==",
    "user": {
      "login": "ngould",
      "id": 3130631,
      "node_id": "MDQ6VXNlcjMxMzA2MzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3130631?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ngould",
      "html_url": "https://github.com/ngould",
      "followers_url": "https://api.github.com/users/ngould/followers",
      "following_url": "https://api.github.com/users/ngould/following{/other_user}",
      "gists_url": "https://api.github.com/users/ngould/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ngould/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ngould/subscriptions",
      "organizations_url": "https://api.github.com/users/ngould/orgs",
      "repos_url": "https://api.github.com/users/ngould/repos",
      "events_url": "https://api.github.com/users/ngould/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ngould/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-03T22:51:33Z",
    "updated_at": "2017-06-03T22:51:33Z",
    "author_association": "NONE",
    "body": "Wow, great writeup @dsm054. I agree with ruling out option 2, since it could yield the wrong row count. And 3b stands out to me as the least surprising behavior. Namely, \r\n\r\n- I get the correct number of rows.\r\n- I get an ordered integer index when I use the default values of `left_on` and `right_on`. (Same behavior as other types of merge.)\r\n- I have the ability to specify which original indices I want to keep, if any.\r\n\r\nYou mentioned that 3b inverts the usual interpretation of `left_on` and `right_on`. Can you explain why you think so? My understanding is that merge gives an integer index by default, and only preserve index info from the original dataframes if `left_on` and `right_on` is specified. So 3b seems in line with that behavior, unless I'm misunderstanding something.\r\n\r\nAs for option 1, can you elaborate on your comment about `reset_index()`, and how it could be used to restore the indices from the dataframes being merged? I don't see how that is possible, but again that might be my misunderstanding.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310551235",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-310551235",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 310551235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDU1MTIzNQ==",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-23T02:10:03Z",
    "updated_at": "2017-06-23T02:13:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "On 1, I meant that you can reset_index *before* you call merge:\r\n\r\n```\r\nIn [12]: pd.merge(df0, df1, how='cross')\r\nOut[12]: \r\n   A  B\r\n0  1  3\r\n1  1  4\r\n2  1  5\r\n3  2  3\r\n4  2  4\r\n5  2  5\r\n\r\nIn [13]: pd.merge(df0.reset_index(), df1.reset_index(), how='cross')\r\nOut[13]: \r\n   index_x  A  index_y  B\r\n0       10  1       20  3\r\n1       10  1       30  4\r\n2       10  1       40  5\r\n3       20  2       20  3\r\n4       20  2       30  4\r\n5       20  2       40  5\r\n```\r\n\r\nOn 3b's \"inversion\", what I mean is that if you think of the cross join as an inner merge on a dummy column, then when you do `left_index=True`, you get the *right* index elements in the result, and vice versa:\r\n\r\n```\r\nIn [21]: df0\r\nOut[21]: \r\n    A\r\n10  1\r\n20  2\r\n\r\nIn [22]: df1\r\nOut[22]: \r\n    B\r\n20  3\r\n30  4\r\n40  5\r\n\r\nIn [23]: pd.merge(df0.assign(m=1), df1.assign(m=1), how='inner', on='m', left_index=True)\r\nOut[23]: \r\n    A  m  B\r\n20  1  1  3\r\n30  1  1  4\r\n40  1  1  5\r\n20  2  1  3\r\n30  2  1  4\r\n40  2  1  5\r\n\r\nIn [24]: pd.merge(df0.assign(m=1), df1.assign(m=1), how='inner', on='m', right_index=True)\r\nOut[24]: \r\n    A  m  B\r\n10  1  1  3\r\n10  1  1  4\r\n10  1  1  5\r\n20  2  1  3\r\n20  2  1  4\r\n20  2  1  5\r\n```\r\n\r\nwhich is the opposite relation of X_index=True to the resulting index from the one you might expect.\r\n\r\n*BUT* given #16228, which would forbid the use of left_index/right_index being set when left_on or right_on is set, maybe this isn't a problem, because either we follow option #1 and bypass the whole issue, or there's not going to be any other behaviour to interfere with anymore because you won't be setting left_on and left_index together."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/310723156",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-310723156",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 310723156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDcyMzE1Ng==",
    "user": {
      "login": "ngould",
      "id": 3130631,
      "node_id": "MDQ6VXNlcjMxMzA2MzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3130631?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ngould",
      "html_url": "https://github.com/ngould",
      "followers_url": "https://api.github.com/users/ngould/followers",
      "following_url": "https://api.github.com/users/ngould/following{/other_user}",
      "gists_url": "https://api.github.com/users/ngould/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ngould/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ngould/subscriptions",
      "organizations_url": "https://api.github.com/users/ngould/orgs",
      "repos_url": "https://api.github.com/users/ngould/repos",
      "events_url": "https://api.github.com/users/ngould/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ngould/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-23T17:15:37Z",
    "updated_at": "2017-06-23T17:15:37Z",
    "author_association": "NONE",
    "body": "Thanks, got it! Seems like for consistency, #16228 should also aim to forbid `on` with any `*_index` args. Right now it only mentions `right_on` with `right_index` in particular. Would you agree, @dsm054?\r\n\r\nIf we're going down the path of disallowing those combinations of args, obviously option 1 is the way to go.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/311632107",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-311632107",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 311632107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTYzMjEwNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-28T11:25:04Z",
    "updated_at": "2017-06-28T11:25:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes #16228 would disallow combo operations here (and it should account for any of index setting w/ on setting)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/311632339",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-311632339",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 311632339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTYzMjMzOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-28T11:26:15Z",
    "updated_at": "2017-06-28T11:26:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ngould \r\n\r\n> Thanks, got it! Seems like for consistency, #16228 should also aim to forbid on with any *_index args. Right now it only mentions right_on with right_index in particular. Would you agree, @dsm054?\r\n\r\nthe purpose is ``left_on`` with ``left_index`` and ``right_on`` with ``right_index``"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/364468211",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5401#issuecomment-364468211",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5401",
    "id": 364468211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDQ2ODIxMQ==",
    "user": {
      "login": "ftune",
      "id": 26687078,
      "node_id": "MDQ6VXNlcjI2Njg3MDc4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/26687078?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ftune",
      "html_url": "https://github.com/ftune",
      "followers_url": "https://api.github.com/users/ftune/followers",
      "following_url": "https://api.github.com/users/ftune/following{/other_user}",
      "gists_url": "https://api.github.com/users/ftune/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ftune/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ftune/subscriptions",
      "organizations_url": "https://api.github.com/users/ftune/orgs",
      "repos_url": "https://api.github.com/users/ftune/repos",
      "events_url": "https://api.github.com/users/ftune/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ftune/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-09T15:37:30Z",
    "updated_at": "2018-02-09T15:38:59Z",
    "author_association": "NONE",
    "body": "I come up with an idea to do it:\r\n```\r\ndef crossjoindf(df1,df2):\r\n    keycolist=str(set(df1.columns.values+df2.columns.values))\r\n    df1[keycolist]=0\r\n    df2[keycolist]=0\r\n    return pd.merge(dfr,dfr,on=keycolist).drop([keycolist],axis=1)\r\n```\r\nIt might be too easy to build a particular function `merge(df1,df2,how='cross') for it.\r\nIs it the reason why there is no such function in pandas document? \r\n(T_^)\r\n#19614"
  }
]
