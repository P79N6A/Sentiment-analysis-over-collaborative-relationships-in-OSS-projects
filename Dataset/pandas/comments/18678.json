[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350035269",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350035269",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350035269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDAzNTI2OQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-07T17:18:55Z",
    "updated_at": "2017-12-07T17:18:55Z",
    "author_association": "MEMBER",
    "body": "I've been following this conversation a bit and remain confused on one point.  Options 1 and 2 both appear to rely on the premise that `Series([nan, nan]).sum()` _should_ equal `Series([]).sum()`. \r\nWithout having an intuition for why this is a desirable behavior, the merits of those two options hard to evaluate.   Is it just consistency with [other software]?  LMK if this question belongs elsewhere."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350036532",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350036532",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350036532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDAzNjUzMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-07T17:23:26Z",
    "updated_at": "2017-12-07T17:23:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's fine. I think the shortest answer is that it's nice to have `s.sum(skipna=True)` equal `s.dropna().sum(skipna=True/False)`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350064530",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350064530",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350064530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDA2NDUzMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-07T19:09:00Z",
    "updated_at": "2017-12-07T19:09:00Z",
    "author_association": "MEMBER",
    "body": "I would keep the more general discussion on the mailing list, and here more the details of the changes we then want to make"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350132655",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350132655",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350132655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDEzMjY1NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T00:04:11Z",
    "updated_at": "2017-12-08T00:04:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is not happening for 0.21.1"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350222029",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350222029",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350222029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDIyMjAyOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T09:54:09Z",
    "updated_at": "2017-12-08T09:54:09Z",
    "author_association": "MEMBER",
    "body": "> this is not happening for 0.21.1\r\n\r\nI think the question is rather: do we want to release this quickly, or only in a few months? (and then once answered, we can still discuss whether we call that 0.21.1, 0.21.2 or 0.22.0). But let's keep that discussion in https://github.com/pandas-dev/pandas/issues/18244#issuecomment-350000655\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350912563",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350912563",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350912563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkxMjU2Mw==",
    "user": {
      "login": "ryanbressler",
      "id": 79286,
      "node_id": "MDQ6VXNlcjc5Mjg2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/79286?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanbressler",
      "html_url": "https://github.com/ryanbressler",
      "followers_url": "https://api.github.com/users/ryanbressler/followers",
      "following_url": "https://api.github.com/users/ryanbressler/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanbressler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanbressler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanbressler/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanbressler/orgs",
      "repos_url": "https://api.github.com/users/ryanbressler/repos",
      "events_url": "https://api.github.com/users/ryanbressler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanbressler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T01:14:09Z",
    "updated_at": "2017-12-12T01:14:09Z",
    "author_association": "NONE",
    "body": "Just to add a data point I tried to update to .21 and a large number of our unit tests failed so I came looking to see if this had been reported as a bug yet. A lot of our code assumes pd.Series([]).sum() == 0 for simple things like dollar weighted sums.\r\n\r\nWe won't be upgrading until this is fixed and the fact a breaking change like this was made has lead us to seriously consider prohibiting pandas use within critical sections of our code base."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350923239",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350923239",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350923239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkyMzIzOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T02:16:54Z",
    "updated_at": "2017-12-12T02:16:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ryanbressler that discussion is happening on the mailing list: https://mail.python.org/pipermail/pandas-dev/2017-November/000657.html\r\n\r\nWe're using the issue to design the fix."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350925700",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350925700",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350925700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkyNTcwMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T02:32:24Z",
    "updated_at": "2017-12-12T02:33:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've started a branch for this at https://github.com/pandas-dev/pandas/compare/master...TomAugspurger:na-sum. I'll have a PR tomorrow, but briefly my approach was to add a parameter to `sum` and `prod`: `empty_is_na`. Here's the docstring for sum:\r\n\r\n```\r\nSignature: df.sum(axis=None, skipna=True, level=None, numeric_only=None, empty_is_na=False, **kwargs)\r\nDocstring:\r\nReturn the sum of the values for the requested axis\r\n\r\nParameters\r\n----------\r\naxis : {index (0), columns (1)}\r\nskipna : boolean, default True\r\n    Exclude NA/null values before computing the result.\r\nlevel : int or level name, default None\r\n    If the axis is a MultiIndex (hierarchical), count along a\r\n    particular level, collapsing into a Series\r\nnumeric_only : boolean, default None\r\n    Include only float, int, boolean columns. If None, will attempt to use\r\n    everything, then use only numeric data. Not implemented for\r\n    Series.\r\nempty_is_na : bool, default False\r\n    The result of operating on an empty array should be NA. The default\r\n    behavior is for the sum of an empty array to be 0, and the product\r\n    of an empty array to be 1.\r\n\r\nReturns\r\n-------\r\nsum : Series or DataFrame (if level specified)\r\nFile:      ~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/generic.py\r\nType:      method\r\n``` \r\n\r\n```python\r\nIn [3]: pd.Series().sum()\r\nOut[3]: 0.0\r\n\r\nIn [4]: pd.Series().sum(empty_is_na=True)\r\nOut[4]: nan\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/350968135",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-350968135",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 350968135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDk2ODEzNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T07:31:25Z",
    "updated_at": "2017-12-12T07:31:25Z",
    "author_association": "MEMBER",
    "body": "@ryanbressler would you like to voice this experience on the mailing list?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351142958",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351142958",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351142958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTE0Mjk1OA==",
    "user": {
      "login": "ryanbressler",
      "id": 79286,
      "node_id": "MDQ6VXNlcjc5Mjg2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/79286?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanbressler",
      "html_url": "https://github.com/ryanbressler",
      "followers_url": "https://api.github.com/users/ryanbressler/followers",
      "following_url": "https://api.github.com/users/ryanbressler/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanbressler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanbressler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanbressler/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanbressler/orgs",
      "repos_url": "https://api.github.com/users/ryanbressler/repos",
      "events_url": "https://api.github.com/users/ryanbressler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanbressler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T18:28:21Z",
    "updated_at": "2017-12-12T18:28:21Z",
    "author_association": "NONE",
    "body": "@TomAugspurger and @jorisvandenbossche it looks like I need to subscribe to that list to post? I'll do that after some meetings I have this morning. Feel free to delete my comments If they aren't  appropriate on this thread but I must say expecting users to join the dev discussion list to report issues feels a bit unfriendly.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351146517",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351146517",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351146517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTE0NjUxNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T18:38:21Z",
    "updated_at": "2017-12-12T18:45:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I must say expecting users to join the dev discussion list to report issues feels a bit unfriendly.\r\n\r\nNot to report issues, that's just already been done -- this issue :)\r\n\r\nWe're trying to keep the discussion from fragmenting. Mailing List for\r\ndiscussion what behavior we want, this issue for designing that behavior.\r\nAnd usually most discussion happens on GitHub. This happens to be on the\r\nmailing list since it's of broad interest, and not everybody\r\ncan keep up with the traffic on the GitHub repository.\r\n\r\n\r\nOn Tue, Dec 12, 2017 at 12:28 PM, Ryan Bressler <notifications@github.com>\r\nwrote:\r\n\r\n> @TomAugspurger <https://github.com/tomaugspurger> and @jorisvandenbossche\r\n> <https://github.com/jorisvandenbossche> it looks like I need to subscribe\r\n> to that list to post? I'll do that after some meetings I have this morning.\r\n> Feel free to delete my comments If they aren't appropriate on this thread\r\n> but I must say expecting users to join the dev discussion list to report\r\n> issues feels a bit unfriendly.\r\n>\r\n> —\r\n> You are receiving this because you were mentioned.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351142958>,\r\n> or mute the thread\r\n> <https://github.com/notifications/unsubscribe-auth/ABQHIoYBQ1mE554c8WRq6GjpNRJcicUqks5s_sXJgaJpZM4Q5w6R>\r\n> .\r\n>\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351151516",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351151516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351151516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTE1MTUxNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T18:51:25Z",
    "updated_at": "2017-12-12T18:51:25Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger regarding your proposal above, that would only deal with the empty case? So that would not yet provide an option for returning NaN on an all NaN series?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351184000",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351184000",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351184000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTE4NDAwMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T20:28:05Z",
    "updated_at": "2017-12-12T20:28:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yep, so far just handling the empty case. My preference is for additional keywords to `prod` and `sum`, rather than a new method.\r\n\r\nFor the all-NA case,\r\n\r\n```python\r\nSignature: df.sum(axis=None, skipna=True, level=None, numeric_only=None, empty_is_na=False, all_na_is_na=False, **kwargs)\r\nDocstring:\r\nReturn the sum of the values for the requested axis\r\n\r\nParameters\r\n----------\r\naxis : {index (0), columns (1)}\r\nskipna : boolean, default True\r\n    Exclude NA/null values before computing the result.\r\nlevel : int or level name, default None\r\n    If the axis is a MultiIndex (hierarchical), count along a\r\n    particular level, collapsing into a Series\r\nnumeric_only : boolean, default None\r\n    Include only float, int, boolean columns. If None, will attempt to use\r\n    everything, then use only numeric data. Not implemented for\r\n    Series.\r\nempty_is_na : bool, default False\r\n    The result of operating on an empty array should be NA. The default\r\n    behavior is for the sum of an empty array to be 0, and the product\r\n    of an empty array to be 1.\r\nall_na_is_na : bool, default False\r\n    The result of operating on an all-NA array should be NA. The default\r\n    behavior is for the sum of an all-NA array to be 0, and the product\r\n    of an all-NA array to be 1.\r\n\r\nReturns\r\n-------\r\nsum : Series or DataFrame (if level specified)\r\nFile:      ~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/generic.py\r\nType:      method\r\n```\r\n\r\nAre there any problematic interactions between these new keywords and `skipna`? Does the `empty_is_na` apply to it being empty before or after skipping the NA values? I'd propose that it applies to the before-skipping version, so that `empty_is_na` only has an effect when the original series is length-0.\r\n\r\nSo for an all-NA series, `s = pd.Series([np.nan])`\r\n\r\n1. `s.sum(skipna=True, empty_is_na=False, all_na_is_na=False)` -> 0\r\n2. `s.sum(skipna=True, empty_is_na=True, all_na_is_na=True)` -> NaN\r\n3. `s.sum(skipna=True, empty_is_na=True, all_na_is_na=False)` -> 0\r\n4. `s.sum(skipna=True, empty_is_na=False, all_na_is_na=True)` -> NaN\r\n\r\nNow `skipna=False`. How should we handle `all_na_is_na`?\r\n\r\n1. `s.sum(skipna=False, empty_is_na=False, all_na_is_na=False)` -> 0 (this differs from `np.sum`)\r\n2. `s.sum(skipna=False empty_is_na=True, all_na_is_na=True)` -> NaN\r\n3. `s.sum(skipna=False, empty_is_na=True, all_na_is_na=False)` -> 0 (this differs from `np.sum`)\r\n4. `s.sum(skipna=False, empty_is_na=False, all_na_is_na=True)` -> NaN\r\n\r\n1 and 3 concern me a bit. I'll think about it a bit more.\r\n\r\nFor an empty series, the only thing that matters is `empty_is_na`. With `empty_is_na=False`, the return value is 0. With `empty_is_na=True`, the return value is NA, regardless of `skipna` and `all_na_is_na`.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351233211",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351233211",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351233211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTIzMzIxMQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T23:47:14Z",
    "updated_at": "2017-12-12T23:47:14Z",
    "author_association": "MEMBER",
    "body": "> My preference is for additional keywords to prod and sum, rather than a new method.\r\n\r\nI am personally also in favor of additional keyword(s) instead of a new method. I don't really like the `empty_is_na` and `all_na_is_na` names, and that fact that it are two additional keywords, but I assume they are at least explicit and allow for controlling both cases separately (which might be difficult with a single keyword like `min_count` ?)\r\n\r\n> s.sum(skipna=False, empty_is_na=False, all_na_is_na=False) -> 0 (this differs from np.sum)\r\n\r\nThis one concerns me as well. I think the `all_na_is_na` only makes sense if you are skipping NAs. I can't really imagine were you would want `Series([1, NA]).sum()` to return NA but `Series([NA, NA]).sum()` to return 0. \r\nIf `skipna=False`, any occurence of a NA should turn the result into NA. Also the deviation from numpy would be unfortunate (as now `skipna=False` basically gives you numpy's sum).\r\n\r\n \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351276977",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351276977",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351276977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTI3Njk3Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T04:12:14Z",
    "updated_at": "2017-12-13T05:49:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> allow for controlling both cases separately (which might be difficult with a single keyword like min_count ?)\r\n\r\nI think I talked myself out of the *need* for two keywords. My `empty_is_na` keyword should only have an effect if `len(s)` is 0, which means there isn't even any NaNs.\r\n\r\nI'm not fond of `empty_is_na` / `all_na_is_na` either, but I find them easier to explain that `min_count`. Though making `Series([np.nan], skipna=False)` return `NaN` (which we want) will complicate the explanation of `all_na_is_na`, so perhaps they're not easier to explain after all."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351291797",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351291797",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351291797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTI5MTc5Nw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T06:00:07Z",
    "updated_at": "2017-12-13T06:00:07Z",
    "author_association": "MEMBER",
    "body": "Indeed, do we really need two new keywords?\r\n\r\nI think `empty_is_na` should suffice, to satisfy both:\r\n1. `pd.Series([np.nan]).sum(skipna=True, empty_is_na=True)` -> NaN\r\n2. `pd.Series([]).sum(skipna=True, empty_is_na=True)` -> NaN\r\n\r\nFor `skipna=False`, which we only need for completeness:\r\n3. `pd.Series([np.nan]).sum(skipna=False, empty_is_na=True)` -> NaN\r\n4. `pd.Series([]).sum(skipna=False, empty_is_na=True)` -> NaN\r\n\r\n(`empty_is_na=False` would always have an empty or all-NaN sum be 0.)\r\n\r\nThe potentially compelling argument in favor of two different keyword arguments is that that gives you a way to use the legacy sum from pandas <0.21 (without bottleneck). It would be an easy switch to use when migrating code, but even then I suspect there are only a very small number of applications that need to different behavior between an empty and all-NaN sum. If need be, I would prefer `empty_is_na='legacy'` to adding a separate `all_na_is_na` argument."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351399322",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351399322",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351399322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM5OTMyMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T14:01:24Z",
    "updated_at": "2017-12-13T14:01:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would just add\r\n\r\n``fill_value=0`` (if we really want option 1), or ``fill_value=None`` for option 2\r\n\r\nthen this would all work and be quite simple."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351424547",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351424547",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351424547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQyNDU0Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T15:26:50Z",
    "updated_at": "2017-12-13T15:46:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> `(empty_is_na=False would always have an empty or all-NaN sum be 0.)`\r\n\r\nThis seems strange, right?  And that differs from pandas 0.20.3 with or without bottleneck, which always returned 0 for `pd.Series([]).sum(skipna=False)`\r\n\r\nEDIT: sorry I misread. Ignore this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351425514",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351425514",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351425514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQyNTUxNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T15:29:47Z",
    "updated_at": "2017-12-13T15:29:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback would your `fill_value` only apply when `skipna=True`? Otherwise, we'd break `pd.Series([np.nan]).sum(skipna=False) -> NaN`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351426546",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351426546",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351426546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQyNjU0Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T15:32:53Z",
    "updated_at": "2017-12-13T15:33:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "For reference, here's the 0.20.3 behavior on two series `pd.Series([])` and `pd.Series([np.nan])`\r\n\r\n<table border=\"1\" class=\"dataframe\">\r\n  <thead>\r\n    <tr style=\"text-align: right;\">\r\n      <th></th>\r\n      <th>use_bn</th>\r\n      <th>skipna</th>\r\n      <th>length</th>\r\n      <th>result</th>\r\n    </tr>\r\n    <tr>\r\n      <th>case</th>\r\n      <th></th>\r\n      <th></th>\r\n      <th></th>\r\n      <th></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th>0</th>\r\n      <td>True</td>\r\n      <td>True</td>\r\n      <td>0</td>\r\n      <td>0.0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>1</th>\r\n      <td>True</td>\r\n      <td>True</td>\r\n      <td>1</td>\r\n      <td>0.0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>2</th>\r\n      <td>True</td>\r\n      <td>False</td>\r\n      <td>0</td>\r\n      <td>0.0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>3</th>\r\n      <td>True</td>\r\n      <td>False</td>\r\n      <td>1</td>\r\n      <td>NaN</td>\r\n    </tr>\r\n    <tr>\r\n      <th>4</th>\r\n      <td>False</td>\r\n      <td>True</td>\r\n      <td>0</td>\r\n      <td>0.0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>5</th>\r\n      <td>False</td>\r\n      <td>True</td>\r\n      <td>1</td>\r\n      <td>NaN</td>\r\n    </tr>\r\n    <tr>\r\n      <th>6</th>\r\n      <td>False</td>\r\n      <td>False</td>\r\n      <td>0</td>\r\n      <td>0.0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>7</th>\r\n      <td>False</td>\r\n      <td>False</td>\r\n      <td>1</td>\r\n      <td>NaN</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<details>\r\n\r\n```python\r\nimport pandas as pd\r\n\r\nimport itertools\r\n\r\nuse_bn = [True, False]\r\n\r\nskipna = [True, False]\r\n\r\nseries = [pd.Series(), pd.Series([np.nan])]\r\n\r\nvalues = []\r\n\r\nfor bn, skip, s in itertools.product(use_bn, skipna, series):\r\n    with pd.option_context(\"compute.use_bottleneck\", bn):\r\n        result = s.sum(skipna=skip)\r\n        values.append((bn, skip, len(s), result))\r\n\r\nr = pd.DataFrame(values, columns=['use_bn', 'skipna', 'length', 'result'])\r\nr.index.name = 'case'\r\n\r\n```\r\n\r\n</details>"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351437890",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351437890",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351437890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQzNzg5MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T16:08:09Z",
    "updated_at": "2017-12-13T16:47:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could people give thoughts on this table for the desired behavior?\r\n\r\n| case | skipna | length | empty_is_na | result |\r\n| -----| ------ | ------ | ----------- | ------ |\r\n| A    | True   | empty  | False       | 0      |\r\n| B    | True   | empty  | True        | NaN    |\r\n| C    | True   | all-na | False       | 0      |\r\n| D    | True   | all-na | True        | NaN?      |\r\n| E    | False  | empty  | False       | 0?      |\r\n| F    | False  | empty  | True        | NaN    |\r\n| G    | False  | all-na | False       | NaN    |\r\n| H    | False  | all-na | True        | NaN    |\r\n\r\nI think if we're OK with `D` being `NaN`, then we only need the one keyword (whatever it's called). The semantics for `empty_is_na=True` with `skipna=True` is then \"Is the array empty after removing NaNs? If so, they result is NaN\". If we want `D` to be 0, then we'll need another keyword, or a `'legacy'` option.\r\n\r\nWith case D=`NaN`, I don't think we achieve our goal of supporting users who want \"NaN if everything is NA\" though."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351447074",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351447074",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351447074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ0NzA3NA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T16:37:15Z",
    "updated_at": "2017-12-13T16:37:15Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger  I agree with the rule \"Is the array empty after removing NaNs? If so, they result is NaN\"\r\n\r\nTo me, this implies D=`NaN`, exactly as you reasoned.\r\n\r\nThe other missing entry in your table is Case E=`0`. This is the same as the sum of an empty array in NumPy (`np.sum([])`).\r\n\r\n> With case D=NaN, I don't think we achieve our goal of supporting users who want \"NaN if everything is NA\" though.\r\n\r\nI'm confused. Isn't that exactly what D=`NaN` ensures? `empty_is_na` achieves the SQL-like behavior that (some) users pine for.\r\n\r\n`empty_is_na='legacy'` would be for users who can't make up their mind between whether they're a DBA or a mathematician, and want a rule that makes sense \"most\" of the time. (Of course, that's the worst sort of consistency for APIs, because it suggests a behavior that doesn't hold in all edge cases.)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351450864",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351450864",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351450864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ1MDg2NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T16:49:00Z",
    "updated_at": "2017-12-13T16:49:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I'm confused. Isn't that exactly what D=NaN ensures? empty_is_na achieves the SQL-like behavior that (some) users pine for.\r\n\r\nSorry, I think I was staring at that table for too long and started going crazy :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351464346",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351464346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351464346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ2NDM0Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T17:33:06Z",
    "updated_at": "2017-12-13T17:33:06Z",
    "author_association": "MEMBER",
    "body": "> I'm not fond of empty_is_na / all_na_is_na either, but I find them easier to explain that min_count\r\n\r\n+1\r\n\r\n@jreback In the end, a `empty_is_na=True/False` or `fill_value=np.nan/0` would be equivalent in behaviour I think, so it is a question of which name we like most. \r\nBut I think in this case \"empty_is_na is easier to explain\" also is valid for `fill_value` IMO. Because `fill_value` would actually be the value to return in case of empty data (after skipping the NAs or not). So it would rather be something like \"empty_result_value\".\r\n\r\n> @TomAugspurger I agree with the rule \"Is the array empty after removing NaNs? If so, they result is NaN\"\r\n>\r\n> To me, this implies D=NaN, exactly as you reasoned.\r\n\r\nI agree too.\r\n\r\n> empty_is_na='legacy' would be for users who can't make up their mind between whether they're a DBA or a mathematician\r\n\r\nSo that would provide the option of all-NA giving NA (so to be signaled you have a full NA column), but keep the empty sum 0. \r\nDo we think this is a valid option to want? Because if so, we shouldn't call it \"legacy\" but something like \"mixed\" (although that certainly doesn't 'tell' you what it does neither).\r\n\r\n---\r\n\r\nSomething else, regarding \"extra keyword vs new method\". The advantage of a separate method is that for people who consistently want to use the non-default option, it could be much easier / less verbose to have an alternative method instead to have to add `emtpy_is_na=True` all over their code base (of course they can make such an alternative function themselves, but then it is not a method on the dataframe). \r\n(one problem with this, however, is that a possible name like `.total()` would be very confusing if we choose for option 1 as the default, as then `total()` would be option 2, which makes it the other way around as in SQL)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351465807",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351465807",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351465807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ2NTgwNw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T17:38:13Z",
    "updated_at": "2017-12-13T17:38:13Z",
    "author_association": "MEMBER",
    "body": "> So that would provide the option of all-NA giving NA (so to be signaled you have a full NA column), but keep the empty sum 0.\r\nDo we think this is a valid option to want? \r\n\r\nIn all the user feedback on this issue, I do not recall any requests for this mixed behavior. So I think we can safely leave it out."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351465967",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351465967",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351465967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ2NTk2Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T17:38:45Z",
    "updated_at": "2017-12-13T17:38:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The advantage of a separate method is that for people who consistently want to use the non-default option, it could be much easier / less verbose to have an alternative method instead to have to add emtpy_is_na=True all over their code base\r\n\r\nYes, I was thinking that this morning as well..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351527278",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351527278",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351527278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTUyNzI3OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T21:15:52Z",
    "updated_at": "2017-12-13T21:15:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Turning to `groupby` with categoricals, if we implement option 1, we'll want to have categoricals with no observations return 0 for sum.\r\n\r\n```python\r\nIn [32]: df = pd.DataFrame({\"A\": pd.Categorical(['a', 'b', 'a'],\r\n    ...:                                         categories=['a', 'b', 'c']),\r\n    ...:                    'B': [1, 2, 1]})\r\n    ...: result = df.groupby(\"A\").B.sum()\r\n    ...:\r\n\r\nIn [33]: result\r\nOut[33]:\r\nA\r\na    2\r\nb    2\r\nc    0\r\nName: B, dtype: int64\r\n```\r\n\r\nCurrently, aggregations like `np.nansum` don't behave as I would expect:\r\n\r\n```python\r\nIn [3]: pd.__version__\r\nOut[3]: '0.20.3'\r\n\r\nIn [8]: df.groupby(\"A\").B.agg(lambda x: np.nansum(x))\r\nOut[8]:\r\nA\r\na    2.0\r\nb    2.0\r\nc    NaN\r\nName: B, dtype: float64\r\n```\r\n\r\nPerhaps custom aggregation functions aren't called on an empty array to see what the return type is?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351549816",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-351549816",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 351549816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTU0OTgxNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T22:46:20Z",
    "updated_at": "2017-12-13T22:46:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another (large) place this affects is upsampling:\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: pd.__version__\r\nOut[2]: '0.20.3'\r\n\r\nIn [3]: pd.Series(range(4), index=pd.date_range(start='2017', periods=4, freq='1H')).resample('30T').sum()\r\nOut[3]:\r\n2017-01-01 00:00:00    0.0\r\n2017-01-01 00:30:00    NaN\r\n2017-01-01 01:00:00    1.0\r\n2017-01-01 01:30:00    NaN\r\n2017-01-01 02:00:00    2.0\r\n2017-01-01 02:30:00    NaN\r\n2017-01-01 03:00:00    3.0\r\nFreq: 30T, dtype: float64\r\n```\r\n\r\nOn my branch:\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: pd.__version__\r\nOut[2]: '0.22.0.dev0+364.g70e9bf903.dirty'\r\n\r\nIn [3]: pd.Series(range(4), index=pd.date_range(start='2017', periods=4, freq='1H')).resample('30T').sum()\r\nOut[3]:\r\n2017-01-01 00:00:00    0\r\n2017-01-01 00:30:00    0\r\n2017-01-01 01:00:00    1\r\n2017-01-01 01:30:00    0\r\n2017-01-01 02:00:00    2\r\n2017-01-01 02:30:00    0\r\n2017-01-01 03:00:00    3\r\nFreq: 30T, dtype: int64\r\n```\r\n\r\nwhich is I suspect what we want, but another thing I'll make sure to document."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352833465",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-352833465",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 352833465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjgzMzQ2NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T17:44:28Z",
    "updated_at": "2017-12-19T17:44:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> which is I suspect what we want\r\n\r\nThoughts on this? Do we want `.resample(higher_freq).sum()` to introduce 0s or NaNs?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352834432",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18678#issuecomment-352834432",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18678",
    "id": 352834432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjgzNDQzMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T17:47:52Z",
    "updated_at": "2017-12-19T17:47:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "i am -1 i’m changing anything groupby / resample\r\n\r\nsum of NaN is NaN; anything else is completely confusing \r\n"
  }
]
