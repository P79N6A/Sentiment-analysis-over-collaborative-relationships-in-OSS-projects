[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/296869030",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16122#issuecomment-296869030",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16122",
    "id": 296869030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njg2OTAzMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-25T01:52:25Z",
    "updated_at": "2017-04-25T01:52:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "The implementation of `to_dict` is just\r\n\r\n```python\r\n    def to_dict(self):\r\n        \"\"\"\r\n        Convert Series to {label -> value} dict\r\n\r\n        Returns\r\n        -------\r\n        value_dict : dict\r\n        \"\"\"\r\n        return dict(compat.iteritems(self))\r\n```\r\n\r\nSo, if you wanted to take an argument (`type`, `kind`?) with a default of `dict` I think that'd be fine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/297071542",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16122#issuecomment-297071542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16122",
    "id": 297071542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA3MTU0Mg==",
    "user": {
      "login": "jolespin",
      "id": 9061708,
      "node_id": "MDQ6VXNlcjkwNjE3MDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9061708?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jolespin",
      "html_url": "https://github.com/jolespin",
      "followers_url": "https://api.github.com/users/jolespin/followers",
      "following_url": "https://api.github.com/users/jolespin/following{/other_user}",
      "gists_url": "https://api.github.com/users/jolespin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jolespin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jolespin/subscriptions",
      "organizations_url": "https://api.github.com/users/jolespin/orgs",
      "repos_url": "https://api.github.com/users/jolespin/repos",
      "events_url": "https://api.github.com/users/jolespin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jolespin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-25T15:39:09Z",
    "updated_at": "2017-04-25T15:39:09Z",
    "author_association": "NONE",
    "body": "Thanks!  This will come in handy b/c a lot of my scripts I convert between dicts and series.  I'm not sure what keyword to use but I think `type` and `kind` sound great.  Others I thought of are `class`, `container`, `object`, etc. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/297076208",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16122#issuecomment-297076208",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16122",
    "id": 297076208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA3NjIwOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-25T15:53:35Z",
    "updated_at": "2017-04-25T15:53:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "`class` wouldn't work since that's a keyword. If you have a chance, you could skim through parts of the standard library that have something similar. Not much comes to my mind other than `argparse`, which IIRC uses a `type` keyword argument."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/297079249",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16122#issuecomment-297079249",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16122",
    "id": 297079249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA3OTI0OQ==",
    "user": {
      "login": "jolespin",
      "id": 9061708,
      "node_id": "MDQ6VXNlcjkwNjE3MDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9061708?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jolespin",
      "html_url": "https://github.com/jolespin",
      "followers_url": "https://api.github.com/users/jolespin/followers",
      "following_url": "https://api.github.com/users/jolespin/following{/other_user}",
      "gists_url": "https://api.github.com/users/jolespin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jolespin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jolespin/subscriptions",
      "organizations_url": "https://api.github.com/users/jolespin/orgs",
      "repos_url": "https://api.github.com/users/jolespin/repos",
      "events_url": "https://api.github.com/users/jolespin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jolespin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-25T16:03:16Z",
    "updated_at": "2017-04-25T16:03:16Z",
    "author_association": "NONE",
    "body": "Oh yea that's true, `type` does get temporarily repurposed in `argparse`.  The only other thing that comes to mind is in `matplotlib` with `format` like `fig.savefig(path, format=\"pdf\")`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/298209082",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16122#issuecomment-298209082",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16122",
    "id": 298209082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODIwOTA4Mg==",
    "user": {
      "login": "dwkenefick",
      "id": 11995393,
      "node_id": "MDQ6VXNlcjExOTk1Mzkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11995393?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwkenefick",
      "html_url": "https://github.com/dwkenefick",
      "followers_url": "https://api.github.com/users/dwkenefick/followers",
      "following_url": "https://api.github.com/users/dwkenefick/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwkenefick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwkenefick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwkenefick/subscriptions",
      "organizations_url": "https://api.github.com/users/dwkenefick/orgs",
      "repos_url": "https://api.github.com/users/dwkenefick/repos",
      "events_url": "https://api.github.com/users/dwkenefick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwkenefick/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-30T03:41:39Z",
    "updated_at": "2017-04-30T03:41:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can take a crack at this one if we do want to implement it.  Quick questions:\r\n\r\n1. Should we only allow certain types, e.g. `OrderedDict` and a few other easy ones from [`collections`](https://docs.python.org/3/library/collections.html#collections.ChainMap), like `deque`?  Some of the others might be a little odd, like `defaultdict`.\r\n2. Do we want to implement this for `pd.DataFrame` too?  \r\n\r\nI'll use `type` as the keyword - I couldn't find any strong precedent in the standard library.  `kind` is used elsewhere in pandas, for example `DataFrame.plot`, but that feels different.\r\n\r\n@jolespin - You probably already know this but here is an easy way to do what you want:\r\n```python\r\nimport pandas as pd\r\nfrom collections import OrderedDict\r\n\r\nseries = pd.Series({'a': 1, 'b': 2})\r\nOrderedDict(series)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/298421341",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16122#issuecomment-298421341",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16122",
    "id": 298421341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODQyMTM0MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-01T20:17:49Z",
    "updated_at": "2017-05-01T20:17:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "`into` might be a decent name.\r\n\r\nIf we wanted to do checking, then we could check `issubclass(into, collections.Mapping)`, which is the ABC for dict-like objects.\r\n\r\nIt would be nice to do this for DataFrame as well.\r\n"
  }
]
