[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427328408",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22994#issuecomment-427328408",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22994",
    "id": 427328408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzMyODQwOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T11:08:13Z",
    "updated_at": "2018-10-05T11:08:13Z",
    "author_association": "MEMBER",
    "body": "Do we need more fine grained control? \r\n\r\nBecause I could assume that in some cases an ExtensionArray (eg with a parametrized dtype) would like to have a smarter way to concat arrays with different dtype than just converting to object? \r\n\r\nAlso eg IntegerArray with int64 and int32 would not need to be converted to object ?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427340269",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22994#issuecomment-427340269",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22994",
    "id": 427340269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzM0MDI2OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T11:56:26Z",
    "updated_at": "2018-10-05T11:56:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Do we need more fine grained control?\r\n\r\n\r\nAbsolutely. We're even getting there with Sparse, since it would like to take non-sparse arrays and make them sparse, rather than going to object. Right now I think we just special case sparse before getting to concat.\r\n\r\nI think we're coming up on the need for a general `concat_array` mechanism. We scan the list of types, and try those. I wonder how much we should piggy back on https://www.numpy.org/neps/nep-0018-array-function-protocol.html. I think it would be nice if a `pd.api.extensions.concatenate_array` simply became `np.concatenate` some day."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429782816",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22994#issuecomment-429782816",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22994",
    "id": 429782816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTc4MjgxNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T09:58:37Z",
    "updated_at": "2018-10-15T09:58:37Z",
    "author_association": "MEMBER",
    "body": "Looking at the array function protocol as inspiration for the design looks a good idea to me"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436279333",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22994#issuecomment-436279333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22994",
    "id": 436279333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjI3OTMzMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T14:51:35Z",
    "updated_at": "2018-11-06T14:52:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are we OK with pushing this to 0.25?\r\n\r\nAs a proposal, we can have something like the following:\r\n\r\nIterate through the dtypes, calling `ExtensionDtype.get_concat_dtype(dtypes)`. As soon as an array type says \"I know how to handle all these dtypes\" by returning a non-None dtype, we stop looking.\r\n\r\n```python\r\ndef get_concat_dtype(arrays):  # internal to pandas\r\n    \"\"\"\r\n    Get the result dtype for concatenating many arrays.\r\n\r\n    Parameters\r\n    ----------\r\n    arrays : Sequence[Union[numpy.ndarray, ExtensionArray]]\r\n\r\n    Returns\r\n    -------\r\n    dtype : Union[ExtensionDtype, numpy.dtype]\r\n        The NumPy dtype or ExtensionDtype to use for the concatenated\r\n        array.\r\n    \"\"\"\r\n    types = {x.dtype for x in arrays}\r\n    if len(types) == 1:\r\n        return list(types)[0]\r\n\r\n    seen = {}\r\n    # iterate in order of `arrays`\r\n    for arr in objs:\r\n        dtype = arr.dtype\r\n        if dtype not in seen:\r\n            seen.insert(dtype)\r\n\r\n        # this assumes it's an extension dtype, which isn't correct\r\n        result_dtype = dtype.get_concat_dtype(dtypes)\r\n        if result_dtype is not None:\r\n            return result_dtype\r\n\r\n    return np.dtype('object')\r\n\r\nclass ExtensionDtype:\r\n    ...\r\n    @classmethod\r\n    def get_concat_dtype(cls, dtypes):\r\n        # part of the extension array API\r\n        return None\r\n```\r\n\r\nSo for SparseDtype, we would return a `SparseDtype(object)`, or a `SparseDtype(dtype)` if the subtypes are all coercible. For IntegerArray, we would return the highest precision necessary (follow the rules of the underlying dtypes). Categorical could do something like `union_categoricals`.\r\n\r\nSome questions:\r\n\r\n1. Should this be \"type stable\", i.e. the `ExtensionDtype.get_concat_dtype` only sees *types* and not *values*?\r\n2. Should we special case `self` in `ExtensionDtype.get_concat_dtype`. Right now I made it a class method, but do we want to know that the actual instance?"
  }
]
