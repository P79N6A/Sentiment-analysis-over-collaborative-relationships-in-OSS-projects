[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63185798",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-63185798",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 63185798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTg1Nzk4",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-15T19:43:53Z",
    "updated_at": "2014-11-15T19:43:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is something that's always bothered me a bit.\n\nI don't think there's a good reason for Series and DataFrame to behave differently.\nMatplotlib seems to always plot on the currently active axis (there may be exceptions), so we should probably follow that.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63239065",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-63239065",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 63239065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjM5MDY1",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-16T21:03:30Z",
    "updated_at": "2014-11-16T21:03:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just to be clear, `pyplot` has a notion of 'current' axes, not mpl as a whole.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63246139",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-63246139",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 63246139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjQ2MTM5",
    "user": {
      "login": "onesandzeroes",
      "id": 1460294,
      "node_id": "MDQ6VXNlcjE0NjAyOTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1460294?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onesandzeroes",
      "html_url": "https://github.com/onesandzeroes",
      "followers_url": "https://api.github.com/users/onesandzeroes/followers",
      "following_url": "https://api.github.com/users/onesandzeroes/following{/other_user}",
      "gists_url": "https://api.github.com/users/onesandzeroes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onesandzeroes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onesandzeroes/subscriptions",
      "organizations_url": "https://api.github.com/users/onesandzeroes/orgs",
      "repos_url": "https://api.github.com/users/onesandzeroes/repos",
      "events_url": "https://api.github.com/users/onesandzeroes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onesandzeroes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-16T23:53:37Z",
    "updated_at": "2014-11-16T23:53:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Personally I think both should follow DataFrame behaviour of creating a new figure unless ax is explicitly passed. Like tacaswell says, pyplot works based on the currently active axis but once you start dealing with multiple axes, it's much nicer to use the object-oriented approach to creating figures and axes, and pass them explicitly to plotting functions. \n\nAs it is, `Series.plot()` modifies your existing axes without giving you much warning, e.g.:\n\n``` python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ns = pd.Series([4, 5, 6, 7, 8, 9])\n\n# x-axis runs from 0-2\nplt.plot([1, 2, 3])\n# not anymore!\ns.plot()\nplt.show()\n```\n\n![figure_1](https://cloud.githubusercontent.com/assets/1460294/5063758/c738b860-6e47-11e4-9fc9-6c8cfffffee3.png)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63257333",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-63257333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 63257333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjU3MzMz",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-17T04:01:12Z",
    "updated_at": "2014-11-17T04:01:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "The advantage of targeting the 'current axes', rather than making a new figure is that it lets you easily plot multiple lines to the same axes (which something at least I frequently do) without forcing the users to start using the OO api.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64069004",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-64069004",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 64069004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDY5MDA0",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-22T04:39:10Z",
    "updated_at": "2014-11-22T04:39:10Z",
    "author_association": "MEMBER",
    "body": "Agreed to let `Series` behave like a `DataFrame`. When we want to plot on the same axes, we can do:\n\n```\n# Assuming \"serieses\" contains a list of series\nax = None:\nfor s in serieses:\n    s.plot(ax=None)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/67517748",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-67517748",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 67517748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTE3NzQ4",
    "user": {
      "login": "rcarneva",
      "id": 1483534,
      "node_id": "MDQ6VXNlcjE0ODM1MzQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1483534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcarneva",
      "html_url": "https://github.com/rcarneva",
      "followers_url": "https://api.github.com/users/rcarneva/followers",
      "following_url": "https://api.github.com/users/rcarneva/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcarneva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcarneva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcarneva/subscriptions",
      "organizations_url": "https://api.github.com/users/rcarneva/orgs",
      "repos_url": "https://api.github.com/users/rcarneva/repos",
      "events_url": "https://api.github.com/users/rcarneva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcarneva/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-18T16:59:11Z",
    "updated_at": "2014-12-18T16:59:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Strongly disagree with the suggestions to make Series behave like the current DataFrame implementation and would much rather have it the other way around. As a frequent user of pandas/mpl in interactive work, I seldom want to have to deal with the OO interface, and not having a default behavior of using plt.gcf()/gca() in what's supposed to be a convenience method makes it much less useful.\n\nAlso, for what it's worth, the current behavior is a change from the old behavior in pandas 0.13.x:\nhttp://nbviewer.ipython.org/gist/rcarneva/c302ac1ea27304a12957\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70530834",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-70530834",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 70530834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTMwODM0",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-19T17:29:40Z",
    "updated_at": "2015-01-19T17:29:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "From my perspective, the Series behavior of plotting on gca is super useful for interactive work, and I really don't want to get rid of that. I see Series/DataFrame.plot as being mainly for quick and dirty plots, which are usually done interactively. When I need to refine somethingI turn to seaborn / matplotlib and use the OO interface.\n\nSo I guess what I'm saying is\n- document that Series and DataFrame are different for now\n- put off unifying the two till our mythical 1.0 release (where I'd vote a slight preference for plotting on the current axis when `ax` is None).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70548299",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-70548299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 70548299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTQ4Mjk5",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-19T19:36:28Z",
    "updated_at": "2015-01-19T19:36:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is speaking wearing my not-mpl-dev hat, this is not the settled plan of mpl.\n\nOne of the things I have been thinking about (but have not fully fleshed out yet) is having mpl provide a decorator/registration function as part of `pyplot` that takes care of ensuring that the axes object exist (and maybe registering the wrapped function into the same space).  The idea would be that you have something like \n\n``` python\ndef pandas_plotting_func(ax, df_or_ds, bunch_of_style):\n    ax.foo\n```\n\nin pandas and then to provide interactive plotting you would do something like\n\n``` python\nplt.register_func(pdplot.pandas_plotting_func)\nplt.pandas_plotting_func(df, ...)\nplt.pandas_plotting_func(df, ..., ax=ax1)\n```\n\nwould all work as expected.\n\nThe register function would look something like\n\n``` python\ndef register_func(func):\n    @wraps(func)\n    def inner(*args, **kwargs):\n        if 'ax' in kwargs:\n            ax = kwargs.pop('ax', None)\n        elif len(args) > 0 and isinstance(args[0], matplotlib.axes.Axes):\n            ax = args[0]\n            args = args[1:]\n        else:\n            ax = plt.gca()\n        ret = func(ax, *args, **kwargs)\n        ax.figure.canvas.draw()  # possible perf hit\n        return ret\n    # magic to insert function into pyplot namespace\n    return inner\n```\n\nThat way you can get the best of both worlds, have quick and dirty interactive plotting and be able to re-use those same functions embedded in larger applications.\n\nI would also like to rip most of the core plotting off of the `Axes` objects and push it to a pattern like this (and expose it through pyplot using this decorator/register function).\n\ncc @danielballan\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70571599",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-70571599",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 70571599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTcxNTk5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-19T22:20:41Z",
    "updated_at": "2015-01-19T22:20:41Z",
    "author_association": "MEMBER",
    "body": "I agree with @TomAugspurger here that the Series behaviour is certainly usefull for interactive plotting, so I wouldn't change that either. \nLet's indeed start with documenting better the current situation.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75863397",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-75863397",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 75863397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODYzMzk3",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-24T22:43:38Z",
    "updated_at": "2015-02-24T22:47:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Personally I think both should follow DataFrame behaviour of creating a new figure unless ax is explicitly passed. Like tacaswell says, pyplot works based on the currently active axis but once you start dealing with multiple axes, it's much nicer to use the object-oriented approach to creating figures and axes, and pass them explicitly to plotting functions.\n\nI completely agree with this.  I find it so annoying when I do something like\n\n```\nseries.plot()\n```\n\nand nothing appears from an interactive IPython session (except `__repr__()`).  And then I do a\n\n```\nseries.to_frame().plot()\n```\n\nto make a window appear.\n\nSimilarly when goign exploatory work, I often write things like\n\n```\ndf.some_series.plot()\n```\n\nand then nothing.  Which leaves me with the options of going back to `to_frame()` or using \n\n```\ndf[['some_series']].plot()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75889545",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-75889545",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 75889545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODg5NTQ1",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-25T01:41:59Z",
    "updated_at": "2015-02-25T01:41:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Your plot in being dumped into your currently open figure.  You may need a call to `plt.draw()` (pandas may not being doing this automatically under the hood).  Another option is to make a call to `plt.figure()` before plotting a series.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75898892",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-75898892",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 75898892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODk4ODky",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-25T03:23:08Z",
    "updated_at": "2015-02-25T03:23:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> You may need a call to plt.draw() (pandas may not being doing this automatically under the hood). Another option is to make a call to plt.figure() before plotting a series.\n\nThe problem with this process is that `pyplot` hasn't been imported - and it isn't clear why someone should need to access`pyplot` directly to do exploratory, often throw-away work.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75954242",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-75954242",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 75954242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTU0MjQy",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-25T12:49:16Z",
    "updated_at": "2015-02-25T12:49:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Pandas is importing pyplot under the hood no matter what.\n\nThe pyplot interface is for exploratory work (as opposed to the OO\ninterface).\n\nOn Tue, Feb 24, 2015, 22:23 Kevin Sheppard notifications@github.com wrote:\n\n> You may need a call to plt.draw() (pandas may not being doing this\n> automatically under the hood). Another option is to make a call to\n> plt.figure() before plotting a series.\n> \n> The problem with this process is that pyplot hasn't been imported - and\n> it isn't clear why someone should need to accesspyplot directly to do\n> exploratory, often throw-away work.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/8776#issuecomment-75898892.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75965549",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-75965549",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 75965549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTY1NTQ5",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-25T14:12:35Z",
    "updated_at": "2015-02-25T14:12:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Pandas is importing pyplot under the hood no matter what. The pyplot interface is for exploratory work (as opposed to the OO interface).\n\nI understand - my only gripe here is that it should not be necessary to explicitly `import pyplot` just a pandas `plot()` method, on either a `DataFrame` or a `Series`.  Right now, this is only true for a `DataFrame` \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/94080420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-94080420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 94080420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0MDgwNDIw",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-17T21:38:37Z",
    "updated_at": "2015-04-17T21:43:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I too am in the camp of finding it annoying that a Series does not open a plot window on it's own. Pandas is extraordinary helpful for exploratory data analysis and I just don't see the logic behind having a DataFrame opening a new figure just fine and a Series, which in terms of the data analyst is just another column, would NOT do that. I feel that this throws me off all the time, it just does not make any sense to me, so I would to see this discussed more on both the MPL and Pandas point of views, to help me make sense of it.\nEdit: I meant above for the nbagg/notebook backend. In `inline` this works for whatever reason, but I guess this is related.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/275270005",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-275270005",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 275270005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTI3MDAwNQ==",
    "user": {
      "login": "spencerogden",
      "id": 1019539,
      "node_id": "MDQ6VXNlcjEwMTk1Mzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1019539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spencerogden",
      "html_url": "https://github.com/spencerogden",
      "followers_url": "https://api.github.com/users/spencerogden/followers",
      "following_url": "https://api.github.com/users/spencerogden/following{/other_user}",
      "gists_url": "https://api.github.com/users/spencerogden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spencerogden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spencerogden/subscriptions",
      "organizations_url": "https://api.github.com/users/spencerogden/orgs",
      "repos_url": "https://api.github.com/users/spencerogden/repos",
      "events_url": "https://api.github.com/users/spencerogden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spencerogden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-25T23:52:35Z",
    "updated_at": "2017-01-25T23:52:35Z",
    "author_association": "NONE",
    "body": "I agree that the inconsistent behavior for .plot() is a gotcha. Personally, I like the DataFrame behavior. Plotting on the same axes is straight forward and intuitive:\r\n```\r\nax = pandas.DataFrame(...).plot()\r\npandas.DataFrame(...).plot(ax=ax)\r\n```\r\nAs opposed to Series, which, with the current behavior, requires to the non-intuitive `to_frame()` to get the DataFrame like behavior. While this works and is not a lot of extra typing, I don't think this is a trick users discover on their own. And it certainly isn't clear from the docs how to get this behavior.\r\n```\r\npandas.Series(...).plot()\r\npandas.Series(...).to_frame().plot() # Surprising\r\n```\r\n\r\nAt a minimum, the documentation should be amended:\r\nDataFrame.plot()\r\n   **ax** : matplotlib axes object, default None, resulting in the plot appearing on a new figure.\r\n\r\nSeries.plot()\r\n   **ax** : matplotlib axes object, default gca(), resulting in the plot appearing on the last drawn figure.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/280679691",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8776#issuecomment-280679691",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8776",
    "id": 280679691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDY3OTY5MQ==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-17T15:26:53Z",
    "updated_at": "2017-02-17T15:26:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Responding (very late) to @michaelaye it 'works' with inline because it does not keep live figures around, thus the next call to `gca` has to make a new figure.  No other backend works this way, the behavior of 'nbagg' is the normal case."
  }
]
