[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/449607388",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24396#issuecomment-449607388",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24396",
    "id": 449607388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTYwNzM4OA==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-23T01:08:46Z",
    "updated_at": "2018-12-23T01:08:46Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report. Investigation and PRs welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/449995392",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24396#issuecomment-449995392",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24396",
    "id": 449995392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTk5NTM5Mg==",
    "user": {
      "login": "cbertinato",
      "id": 20772838,
      "node_id": "MDQ6VXNlcjIwNzcyODM4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20772838?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cbertinato",
      "html_url": "https://github.com/cbertinato",
      "followers_url": "https://api.github.com/users/cbertinato/followers",
      "following_url": "https://api.github.com/users/cbertinato/following{/other_user}",
      "gists_url": "https://api.github.com/users/cbertinato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cbertinato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cbertinato/subscriptions",
      "organizations_url": "https://api.github.com/users/cbertinato/orgs",
      "repos_url": "https://api.github.com/users/cbertinato/repos",
      "events_url": "https://api.github.com/users/cbertinato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cbertinato/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-26T17:11:27Z",
    "updated_at": "2018-12-26T17:11:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I looked into this and it may not be considered a bug. \r\n\r\nIn this case, the two operands are a string (or `object` as far as pandas is concerned) and an integer.  Because the former is a string, the mod operation is interpreted as string formatting.  The first attempt at evaluation sets up an operation between two nd-arrays, but probably ends up looping through each and doing something like `mod('foo', 1)`, and so, raises a `TypeError` because the string does not contain any string formatting characters (`TypeError: not all arguments converted during string formatting`).  \r\n\r\nA general `Exception` is caught and tries instead to do a `masked_arith_op`, which ends up doing something like `mod('foo', np.array(range(1, 10))`.  This does not raise a `TypeError`, but rather, gives the result that we see at the end: `'foo'`. \r\n\r\nSo it this really a bug?  \r\n\r\nIt is perhaps worth noting here that when the string contains a format characters, *e.g.*, `pd.Series('foo %d')`, then the result is as expected, which is a valid use-case.  However, in that case, the first attempt at evaluating the operation does not generate a TypeError, so we can still distinguish between a mod operation between a string and an int that is valid, and one such as the case we are now discussing.\r\n\r\nWe could simply check for a string type once the `TypeError` is generated, but I wonder whether there is not a reason that I am not seeing to not allow the operation to go through."
  }
]
