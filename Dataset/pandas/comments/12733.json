[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203015516",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203015516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203015516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzAxNTUxNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-29T17:34:20Z",
    "updated_at": "2016-03-29T17:34:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls show a copy pastable example that repros.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203035665",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203035665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203035665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzAzNTY2NQ==",
    "user": {
      "login": "samkuehn",
      "id": 263189,
      "node_id": "MDQ6VXNlcjI2MzE4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samkuehn",
      "html_url": "https://github.com/samkuehn",
      "followers_url": "https://api.github.com/users/samkuehn/followers",
      "following_url": "https://api.github.com/users/samkuehn/following{/other_user}",
      "gists_url": "https://api.github.com/users/samkuehn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samkuehn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samkuehn/subscriptions",
      "organizations_url": "https://api.github.com/users/samkuehn/orgs",
      "repos_url": "https://api.github.com/users/samkuehn/repos",
      "events_url": "https://api.github.com/users/samkuehn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samkuehn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-29T18:19:28Z",
    "updated_at": "2016-03-29T18:19:28Z",
    "author_association": "NONE",
    "body": "```\nimport pandas as pd\n\n\nclass TestObject(object):\n    prop1 = None\n    prop2 = None\n    prop3 = None\n    prop4 = None\n    prop5 = None\n\n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\nobj_list = [\n    TestObject(prop1='1', prop2='11', prop3='foo1', prop4='bar1', prop5=1),\n    TestObject(prop1='1', prop2='22', prop3='foo2', prop4='bar2', prop5=2),\n    TestObject(prop1='1', prop2='33', prop3='foo3', prop4='bar3', prop5=3),\n    TestObject(prop1='1', prop2='44', prop3='foo4', prop4='bar4', prop5=3),\n    TestObject(prop1='1', prop2='55', prop3='foo5', prop4='bar5', prop5=5),\n]\ndf = pd.DataFrame.from_records(\n    [(obj.prop1,\n      obj.prop2,\n      obj.prop3,\n      obj.prop4,\n      obj.prop5,\n      ) for obj in obj_list],\n    columns=(\n        'prop1',\n        'prop2',\n        'prop3',\n        'prop4',\n        'prop5',\n    ),\n    coerce_float=True,\n)\npt = df.pivot_table('prop1', index=['prop2', 'prop3'], columns=['prop4'], aggfunc=lambda x: x)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203038479",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203038479",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203038479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzAzODQ3OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-29T18:25:59Z",
    "updated_at": "2016-03-29T18:25:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "the `aggfunc` must be a reducer, so this is correct\n\nfurthermore you should coerce types as working with objects is not performant and non-idiomatic\n\n```\nIn [17]: df2 = df.apply(pd.to_numeric, errors='ignore')\n\nIn [18]: df.dtypes\nOut[18]: \nprop1    object\nprop2    object\nprop3    object\nprop4    object\nprop5     int64\ndtype: object\n\nIn [19]: df2.dtypes\nOut[19]: \nprop1     int64\nprop2     int64\nprop3    object\nprop4    object\nprop5     int64\ndtype: object\n\nIn [20]: df2.pivot_table('prop1', index=['prop2', 'prop3'], columns=['prop4'])\nOut[20]: \nprop4        bar1  bar2  bar3  bar4  bar5\nprop2 prop3                              \n11    foo1    1.0   NaN   NaN   NaN   NaN\n22    foo2    NaN   1.0   NaN   NaN   NaN\n33    foo3    NaN   NaN   1.0   NaN   NaN\n44    foo4    NaN   NaN   NaN   1.0   NaN\n55    foo5    NaN   NaN   NaN   NaN   1.0\n```\n\nYou prob want to simply groupby as that is what `pd.pivot_table` is actually doing under the hood.\nThen you can iterate if you really want to.\n\n```\nIn [25]: for g, grp in df2.groupby(['prop2','prop3']):\n   ....:     print g, grp\n   ....:     \n(11, 'foo1')    prop1  prop2 prop3 prop4  prop5\n0      1     11  foo1  bar1      1\n(22, 'foo2')    prop1  prop2 prop3 prop4  prop5\n1      1     22  foo2  bar2      2\n(33, 'foo3')    prop1  prop2 prop3 prop4  prop5\n2      1     33  foo3  bar3      3\n(44, 'foo4')    prop1  prop2 prop3 prop4  prop5\n3      1     44  foo4  bar4      3\n(55, 'foo5')    prop1  prop2 prop3 prop4  prop5\n4      1     55  foo5  bar5      5\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203068037",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203068037",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203068037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzA2ODAzNw==",
    "user": {
      "login": "samkuehn",
      "id": 263189,
      "node_id": "MDQ6VXNlcjI2MzE4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samkuehn",
      "html_url": "https://github.com/samkuehn",
      "followers_url": "https://api.github.com/users/samkuehn/followers",
      "following_url": "https://api.github.com/users/samkuehn/following{/other_user}",
      "gists_url": "https://api.github.com/users/samkuehn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samkuehn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samkuehn/subscriptions",
      "organizations_url": "https://api.github.com/users/samkuehn/orgs",
      "repos_url": "https://api.github.com/users/samkuehn/repos",
      "events_url": "https://api.github.com/users/samkuehn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samkuehn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-29T19:42:01Z",
    "updated_at": "2016-03-29T19:42:01Z",
    "author_association": "NONE",
    "body": "My initial example over simplified.  Not sure the suggested solutions will work in my case.  I understand that what I am doing here is probably blasphemous but it has been working.  This example is more representative of what I am actually trying to do:\n\n```\nimport random\n\nimport pandas as pd\nfrom pandas.core.groupby import BaseGrouper\n\n\ndef _is_builtin_func(self, func):\n    return func\n\n\n# This to make the example work - comment out to break\nBaseGrouper._is_builtin_func = _is_builtin_func\n\n\nclass TestObject(object):\n    prop1 = None\n    prop2 = None\n    prop3 = None\n    prop4 = None\n    prop5 = None\n    obj = None\n\n    def method1(self):\n        return 'this is prop1 {}'.format(self.prop1)\n\n    def randumb_method(self):\n        return 'randumb number {}'.format(random.randint(0, 99999999))\n\n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\n\nobj_list = [\n    TestObject(prop1='1', prop2='11', prop3='foo1', prop4='bar1', prop5=1),\n    TestObject(prop1='1', prop2='22', prop3='foo2', prop4='bar2', prop5=2),\n    TestObject(prop1='1', prop2='33', prop3='foo3', prop4='bar3', prop5=3),\n    TestObject(prop1='1', prop2='44', prop3='foo4', prop4='bar4', prop5=3),\n    TestObject(prop1='1', prop2='55', prop3='foo5', prop4='bar5', prop5=5),\n]\ndf = pd.DataFrame.from_records(\n    [(obj.prop1,\n      obj.prop2,\n      obj.prop3,\n      obj.prop4,\n      obj.prop5,\n      obj,\n      ) for obj in obj_list],\n    columns=(\n        'prop1',\n        'prop2',\n        'prop3',\n        'prop4',\n        'prop5',\n        'obj',\n    ),\n    coerce_float=True,\n)\npt = df.pivot_table('obj', index=['prop1', 'prop2'], columns=['prop3'], aggfunc=lambda x: x)\npt.fillna('', inplace=True)\n\n# The below loop is contrived - I am actually building and HTML table in a Django template.\nfor i in pt.iterrows():\n    for j in i[1]:\n        if j:\n            print(j.prop4)\n            print(j.prop5)\n            print(j.method1())\n            print(j.randumb_method())\n```\n\nI know you will probably look and this and wonder if I have lost my mind.  Probably the wrong tool/approach but it was the best I could come up with.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203073205",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203073205",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203073205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzA3MzIwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-29T19:56:52Z",
    "updated_at": "2016-03-29T19:57:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@samkuehn really not sure what you are trying to do. patching internal methods is not a good idea. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203103406",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203103406",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203103406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzEwMzQwNg==",
    "user": {
      "login": "samkuehn",
      "id": 263189,
      "node_id": "MDQ6VXNlcjI2MzE4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samkuehn",
      "html_url": "https://github.com/samkuehn",
      "followers_url": "https://api.github.com/users/samkuehn/followers",
      "following_url": "https://api.github.com/users/samkuehn/following{/other_user}",
      "gists_url": "https://api.github.com/users/samkuehn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samkuehn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samkuehn/subscriptions",
      "organizations_url": "https://api.github.com/users/samkuehn/orgs",
      "repos_url": "https://api.github.com/users/samkuehn/repos",
      "events_url": "https://api.github.com/users/samkuehn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samkuehn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-29T21:04:12Z",
    "updated_at": "2016-03-29T21:04:12Z",
    "author_association": "NONE",
    "body": "I am trying to construct an HTML table using a pivot table where the values of the pivot table are objects.  Perhaps it would have been more clear if I had written my loop like this:\n\n```\nprint('<table>')\nfor i in pt.iterrows():\n    print('<tr>')\n    for j in i[1]:\n        if j:\n            # add properties of the TestObject to the table cell\n            print('<td> prop4:{} - randumb_method: {}</td>'.format(j.prop4, j.randumb_method())) \n        else:\n            print('<td>Nothing to see here</td>')\n    print('</tr>')\nprint('</table>')\n```\n\nI realize patching internal methods is not a good idea but it was the only way to get it to work after the update to 0.18.0.  I know that you said \"working with objects is not performant and non-idiomatic\" so I am willing to look for a new solution outside of Pandas but wanted to post the issue in case others were running into this after upgrading.  I am almost certain that I saw a post using the aggfunc=lambda x: x hack on StackOverflow somewhere so I would assume that others are using it too.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203170000",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203170000",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203170000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzE3MDAwMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T00:37:21Z",
    "updated_at": "2016-03-30T00:37:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@samkuehn are you able to generate the HTML in pandas, and pass that to your Django template? I'll take a closer look later. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203170703",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203170703",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203170703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzE3MDcwMw==",
    "user": {
      "login": "samkuehn",
      "id": 263189,
      "node_id": "MDQ6VXNlcjI2MzE4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samkuehn",
      "html_url": "https://github.com/samkuehn",
      "followers_url": "https://api.github.com/users/samkuehn/followers",
      "following_url": "https://api.github.com/users/samkuehn/following{/other_user}",
      "gists_url": "https://api.github.com/users/samkuehn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samkuehn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samkuehn/subscriptions",
      "organizations_url": "https://api.github.com/users/samkuehn/orgs",
      "repos_url": "https://api.github.com/users/samkuehn/repos",
      "events_url": "https://api.github.com/users/samkuehn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samkuehn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T00:41:21Z",
    "updated_at": "2016-03-30T00:41:21Z",
    "author_association": "NONE",
    "body": "Unfortunately I don't think so.  The HTML I need to generate is pretty specific and I need a lot of control.  I don't the the Pandas to_html is capable of generating the markup I need.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203171657",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203171657",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203171657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzE3MTY1Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T00:43:09Z",
    "updated_at": "2016-03-30T00:43:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "DataFrame.style is much more flexible than to_html. I'm guessing it'd be capable (happy to help if you hit issues)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203175408",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12733#issuecomment-203175408",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12733",
    "id": 203175408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzE3NTQwOA==",
    "user": {
      "login": "samkuehn",
      "id": 263189,
      "node_id": "MDQ6VXNlcjI2MzE4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samkuehn",
      "html_url": "https://github.com/samkuehn",
      "followers_url": "https://api.github.com/users/samkuehn/followers",
      "following_url": "https://api.github.com/users/samkuehn/following{/other_user}",
      "gists_url": "https://api.github.com/users/samkuehn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samkuehn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samkuehn/subscriptions",
      "organizations_url": "https://api.github.com/users/samkuehn/orgs",
      "repos_url": "https://api.github.com/users/samkuehn/repos",
      "events_url": "https://api.github.com/users/samkuehn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samkuehn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T00:57:56Z",
    "updated_at": "2016-03-30T00:57:56Z",
    "author_association": "NONE",
    "body": "It is quite possible that DataFrame.style would allow me to generate the correct markup.  The issue is that I need the value of the pivot table to be an object (Django model object) so that I can use its properties in the template.\n"
  }
]
