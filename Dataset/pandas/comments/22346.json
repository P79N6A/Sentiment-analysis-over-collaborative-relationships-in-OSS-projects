[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412939334",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22346#issuecomment-412939334",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22346",
    "id": 412939334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjkzOTMzNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T16:47:50Z",
    "updated_at": "2018-08-14T16:47:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "To kick things off, one option is to make EA authors implement a `_reduce` like we do internally. That would require them adding things like `.min`, `.max`, .etc directly to their EA. This seems reasonable, but may be a bit overly restrictive."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412987719",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22346#issuecomment-412987719",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22346",
    "id": 412987719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjk4NzcxOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T19:27:08Z",
    "updated_at": "2018-08-14T19:27:08Z",
    "author_association": "MEMBER",
    "body": "(We also have https://github.com/pandas-dev/pandas/issues/22224)\r\n\r\nSo basically, for `Series`, the reduction operations call the following function (where `op` is eg `nanops.nansum` in case of `Series.sum()`):\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/cf70d11a25ec59a5b630921d86759c7fa49884db/pandas/core/series.py#L3244-L3266\r\n\r\nSo with this existing infrastructure, it is indeed an option to let EA's implement `_reduce`.\r\n\r\nInternally, such a `_reduce` basically always simply checks if the operation is defined as a method and calls that, eg for Categorical:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/cf70d11a25ec59a5b630921d86759c7fa49884db/pandas/core/arrays/categorical.py#L2077-L2084\r\n\r\n> That would require them adding things like .min, .max, .etc directly to their EA. This seems reasonable, but may be a bit overly restrictive.\r\n\r\n@TomAugspurger What do you mean exactly with restrictive? (note that using `_reduce` actually does not require them to implement all methods directly, since they can also simply return directly the result from `_reduce`) Is it int64, or should we preserve Int64?\r\n\r\nWe could also go the current numpy way of checking if the object has a similarly named method (so which is basically what the internal `_reduce` implementations do, but we could simply do that as the EA protocol instead of going through `_reduce`)?\r\n\r\n> What should this look like for EA authors? What helpers can / should we provide?\r\n\r\nI am not sure that we can provide helpers? I think the actual implementation (or which of the reductions work) will be rather EA dependent.\r\n\r\n> How does this affect users? Specifically, assuming IntegerArray implements reductions, what's the dtype here? ...\r\n\r\nI think, if the IntegerArray implements the asked reduction, is should definitely be Int64 and not int64 (so preserving the dtype). Is there a reason not to do that? \r\n(of course, depending on the reduction, the dtype might change, eg for mean -> float, but that is up to the EA implementation?)\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412987981",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22346#issuecomment-412987981",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22346",
    "id": 412987981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjk4Nzk4MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T19:28:07Z",
    "updated_at": "2018-08-14T19:28:07Z",
    "author_association": "MEMBER",
    "body": "> I think, if the IntegerArray implements the asked reduction, is should definitely be Int64 and not int64 (so preserving the dtype). Is there a reason not to do that?\r\n\r\nAh, in case of groupby, you need to gather together the scalar results, so in that case it is indeed not that straightforward, as you then need to know the desired dtype .. (which might depend on the actual reduction type)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412990362",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22346#issuecomment-412990362",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22346",
    "id": 412990362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjk5MDM2Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T19:36:58Z",
    "updated_at": "2018-08-14T19:36:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What do you mean exactly with restrictive? (note that using _reduce actually does not require them to implement all methods directly, since they can also simply return directly the result from _reduce)\r\n\r\nAh, by restrictive I meant it requires them to implement `.min`, etc. directly on their EA. But as you explain, they can do whatever they want in `_reduce`, so ignore that comment.\r\n\r\n> I am not sure that we can provide helpers?\r\n\r\nI vaguely had in mind something like `Categorical._reduce`, so that EAs mirroring NumPy and defining reductions would work \"for free\". But that's maybe not a good idea.\r\n\r\n> you need to gather together the scalar results\r\n\r\nRight. I think for *most* reductions, the result will be an instance of `ExtensionDtype.type` (reductions are an algebra). But is that true for all of them? If so, then we should be fine with saying that reductions preserve dtype in groupby. We should also look at `window`..."
  }
]
