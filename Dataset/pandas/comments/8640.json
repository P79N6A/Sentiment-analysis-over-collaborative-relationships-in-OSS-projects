[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60536811",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-60536811",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 60536811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTM2ODEx",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-26T23:16:27Z",
    "updated_at": "2014-10-26T23:16:27Z",
    "author_association": "MEMBER",
    "body": "I think it  would be a very nice improvement to have a real 'string' dtype in pandas. \nSo no longer having the confusion in pandas of `object` dtype being actually in most cases a string, and sometimes a 'real' `object`.\n\nHowever, I don't know if this should be 'coupled' to categorical. Maybe that is only a technical implementation detail, but for me it should just be a string dtype, a dtype that holds string values, and has in essence nothing to do with categorical.\n\nIf I think about a string dtype, I am more thinking about numpy's strings types (but it has of course also impractialities, that is has fixed sizes), or the CHAR/VARCHAR in sql.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60536848",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-60536848",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 60536848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTM2ODQ4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-26T23:17:14Z",
    "updated_at": "2014-10-27T01:13:47Z",
    "author_association": "MEMBER",
    "body": "I'm of two minds about this. This could be quite useful, but on the other hand, it would be _way_ better if this could be done upstream in numpy or dynd. Pandas specific array types are not great for compatibility with the broader ecosystem.\n\nI understand there are good reasons it may not be feasible to implement this upstream (#8350), but these solutions do feel very stop-gap. For example, if @teoliphant is right that dynd could be hooked up in the near future to replace numpy in pandas internals, I would be much more excited about exploring that possibility.\n\nAs for this specific proposal:\n1. Would we really use this in place of object dtype for almost _all_ string data in pandas? If so, this needs to meet a much higher standard than if it's merely an option.\n2. It would be premature to call this the dtype `\"string\"` rather than `\"interned_string\"`, unless we're sure interning is always a good idea. Also, libraries like dynd _do_ implement a true variable length string type (unlike numpy), and I think it is a good long term goal to align pandas dtypes with dtypes on the ndarray used for storage.\n3. The worst of the performance consequences might be avoided if we do not guarantee that the string \"categories\" are unique. Otherwise every str op requires a call to `factorize`.\n4. Especially if this is the default/standard, I really think we should try to make it work for N-dimensional data (I still need to finish up my patch for categorical).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60537957",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-60537957",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 60537957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTM3OTU3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-26T23:49:36Z",
    "updated_at": "2014-10-26T23:50:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "So I have tagged a related issue, about including integer NA support by using `libdynd` (#8643). This will actuall be the first thing I do. (as its new and cool, and I think a slightly more straightforward path to include dynd as an optional dep).\n\n@mwiebe \n\ncan you maybe explain a bit about the tradeoffs involved with representing strings in 2 ways using `libdynd`\n- as a libdynd categorical (like proposing above but using the native categorical type which DOES exist in libdynd currently)\n- as vlen strings (another libdynd feature that DOES exist).\n\ncc @teoliphant \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61329311",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-61329311",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 61329311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzI5MzEx",
    "user": {
      "login": "mwiebe",
      "id": 399551,
      "node_id": "MDQ6VXNlcjM5OTU1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwiebe",
      "html_url": "https://github.com/mwiebe",
      "followers_url": "https://api.github.com/users/mwiebe/followers",
      "following_url": "https://api.github.com/users/mwiebe/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions",
      "organizations_url": "https://api.github.com/users/mwiebe/orgs",
      "repos_url": "https://api.github.com/users/mwiebe/repos",
      "events_url": "https://api.github.com/users/mwiebe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwiebe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-31T20:50:11Z",
    "updated_at": "2014-10-31T20:50:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've had in mind an intention to tweak the string representation in dynd slightly, and have written that up now. https://github.com/ContinuumIO/libdynd/issues/158  The vlen string in dynd does work presently, but it has slightly different properties than what I'm writing here.\n\nProperties that this vlen string has are a 16 byte representation, using the small string optimization. This means strings with size <= 15 bytes encoded as utf-8 will fit in that memory. Bigger strings will involve a dynamic memory allocation per string, a little bit like Python's string, but with the utf-8 encoding and knowledge that it is a string instead of having to go through dynamic dispatch like in numpy object arrays of strings.\n\nRepresenting strings as a dynd categorical is a bit more complicated, and wouldn't be dynamically updatable in the same way. The types in dynd are immutable, so a categorical type, once created, has a fixed memory layout, etc. This allows for optimized storage, e.g. if the total number of categories is <= 256, each element can be stored as one byte in the array, but does not allow the assignment of a new string that was not already a in the array of categories.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/77046118",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-77046118",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 77046118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDQ2MTE4",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-03T22:02:38Z",
    "updated_at": "2015-03-03T22:02:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "The issue mentioned in the last comment is now at https://github.com/libdynd/libdynd/issues/158\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/237537819",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-237537819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 237537819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzUzNzgxOQ==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T12:26:21Z",
    "updated_at": "2016-08-04T12:26:21Z",
    "author_association": "MEMBER",
    "body": "Is there any opinion to work this in 0.19? Hopefully I have some time during the summer:)\n\nThere are few comments in #13827, and I think it's OK if it can be done without breaking existing user's code. Though we may need some breaking change in 2.0, but the same limitation should be applied to `Categorical`...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/237538900",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-237538900",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 237538900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzUzODkwMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T12:31:35Z",
    "updated_at": "2016-08-04T12:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think want to release 0.19.0 shortly  (RC in couple of weeks). So let's slate this for next major release (which will be 1.0, rather than 0.20.0) I think.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/237546645",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-237546645",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 237546645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzU0NjY0NQ==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T13:05:30Z",
    "updated_at": "2016-08-04T13:05:30Z",
    "author_association": "MEMBER",
    "body": "yep, but let me try this weekend. of course it's ok to put it off to 1.0 if there is no time to review:)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/237680387",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-237680387",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 237680387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzY4MDM4Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T20:54:06Z",
    "updated_at": "2016-08-04T20:54:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sinhrks hey I think a real-string pandas dtype would be great. would allow us to be much more string about object dtype.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238680185",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238680185",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238680185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODY4MDE4NQ==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T20:27:30Z",
    "updated_at": "2016-08-09T20:27:30Z",
    "author_association": "MEMBER",
    "body": "How much work / additional code complexity would this require? I see this as a \"nice to have\" rather than something that adds fundamentally new functionality to the library\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238695482",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238695482",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238695482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODY5NTQ4Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T21:20:57Z",
    "updated_at": "2016-08-09T21:20:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "maybe @sinhrks can comment more here, but I think at the very least this allows for quite some code simplification. We will then know w/o having to contstantly infer whether something is all strings or includes actual `objects`. \n\nI think it could be done w/o changing much top-level API (e.g. adding another pandas dtype), we have most of this machinery already done. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238696007",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238696007",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238696007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODY5NjAwNw==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T21:22:46Z",
    "updated_at": "2016-08-09T21:22:46Z",
    "author_association": "MEMBER",
    "body": "My concern is that it may introduce new user APIs / semantics which may be in the line of fire for future API breakage. If the immediate _user_ benefits (vs. developer benefits) warrant this risk then it may be worth it\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238718307",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238718307",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238718307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODcxODMwNw==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T23:00:05Z",
    "updated_at": "2016-08-09T23:00:05Z",
    "author_association": "MEMBER",
    "body": "I worked a little for this, and currently expect minimum API change. Because it is being like a `Categorical` which internally handles `categories` and `codes` automatically (user no need to care its internal repr).\n\nI assume the impl consists from 2 parts, and mostly done by re-using / cleaning-up the current codes:\n- `String` class which wraps `.str` methods (this should simplify `string.py` (Maybe replaced by a `StringArray(?)` or its wrapper in the future).\n- `string` dtype (shares most of internal with `Categorical`)\n\nI agree that we shouldn't force users/devs to unnecessary migration cost. I expect it can be achieved by minimizing `Categorical` API breakage (it should also be applied to `String`).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238719355",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238719355",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238719355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODcxOTM1NQ==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T23:05:52Z",
    "updated_at": "2016-08-09T23:05:52Z",
    "author_association": "MEMBER",
    "body": "This is the first instance in a long time of changing the logical dtype under users' feet. The last (I think?) was the creation of `DatetimeIndex` and adding `datetime64[ns]` to the set of supported dtypes. I'm aware of pandas users that are still running on a fork of 0.7.x over this, if you can believe it. \n\nSo, this proposed change introduces a couple of immediate API breakages:\n- `string_arr.dtype == np.object_` is now False\n- `string_arr.values` is no longer an ndarray (is that right?)\n\nThis alone makes this seem not really comparable to Categorical / DatetimeTZ (those were new types, not modifying existing types)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238724210",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238724210",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238724210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODcyNDIxMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T23:32:42Z",
    "updated_at": "2016-08-09T23:33:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think `.values` should be affected; it will still return an `object` array. This is handled with an indirection from the BlockManger (e.g. `.external_values()` / `.internal_values()`).\n\nwe did this for datetime-tz:\n\n```\nIn [3]: s = Series(pd.date_range('20130101',periods=3,tz='US/Eastern'))\n\nIn [4]: s\nOut[4]: \n0   2013-01-01 00:00:00-05:00\n1   2013-01-02 00:00:00-05:00\n2   2013-01-03 00:00:00-05:00\ndtype: datetime64[ns, US/Eastern]\n\nIn [5]: s.values\nOut[5]: \narray(['2013-01-01T05:00:00.000000000', '2013-01-02T05:00:00.000000000',\n       '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n\nIn [6]: s._values\nOut[6]: DatetimeIndex(['2013-01-01 00:00:00-05:00', '2013-01-02 00:00:00-05:00', '2013-01-03 00:00:00-05:00'], dtype='datetime64[ns, US/Eastern]', freq='D')\n```\n\nunfort the numpy-dtype vs string comparison is horribly broken IMHO by numpy: https://github.com/numpy/numpy/issues/5329\n\nbut to be honest its _already_ broken by `category/datetimetz`,  and ONLY for `==` on `Series`. Of course we have the accessors and `.select_dtypes` as the recommended ways.\n\nGiven all this evidence, I don't think this will impose on users any more than we already have, and will make some code quite a bit simpler as @sinhrks indicates.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238726995",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238726995",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238726995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODcyNjk5NQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T23:48:19Z",
    "updated_at": "2016-08-09T23:48:19Z",
    "author_association": "MEMBER",
    "body": "> unfort the numpy-dtype vs string comparison is horribly broken IMHO by numpy: numpy/numpy#5329\n\nSure, but that doesn't make it any less real for our users. Hopefully they use `np.asarray` to convert to NumPy arrays, but quite possibly they have logic that checks dtypes and expects strings to use `dtype=object`.\n\nWithout fixing this upstream, this sort of breakage is best handled by changing things all together in a pandas 2.0 release.\n\n> `string_arr.dtype == np.object_` is now False\n\nYes, but worse `np.dtype(object) == string_arr.dtype` will now be `TypeError: data type not understood`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238728489",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238728489",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238728489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODcyODQ4OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T23:57:35Z",
    "updated_at": "2016-08-09T23:57:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer Yes this is broken upstream\nbut I don't see it ever fixed. Has been very little movement in numpy for fundamental things like this. This is in fact one of the reasons that pandas 2.0 needs to happen.\n\nThat said, I also do not see any good reason to hold back on changes which bring a better user experience. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238730945",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238730945",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238730945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODczMDk0NQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T00:13:05Z",
    "updated_at": "2016-08-10T00:13:05Z",
    "author_association": "MEMBER",
    "body": "> Yes this is broken upstream but I don't see it ever fixed. Has been very little movement in numpy for fundamental things like this.\n\nThings get fixed in NumPy when someone who cares (generally a downstream developer) gets involved and makes it happen, taking the time to get buy in from stakeholders on the mailing list.\n\nThat's how I was able to fix `datetime64` (in NumPy 1.11) from \"implicitly UTC\" (with automatic conversion to local time zones when printed) to datetime native.\n\n> That said, I also do not see any good reason to hold back on changes which bring a better user experience.\n\nMany parts of `pd.String` would certainly be a better user experience. But just as certainly, the transition would cause pain for some users due to the API breakage. This is not an unambiguous win, especially if we are going to overhaul things again with pandas 2.0.\n\nAs another example, even if `.values` still works by returning a new numpy array, there's no way to avoid breaking assignment to that array.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238733097",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238733097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238733097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODczMzA5Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T00:27:49Z",
    "updated_at": "2016-08-10T00:27:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Things get fixed in NumPy when someone who cares (generally a downstream developer) gets involved and makes it happen, taking the time to get buy in from stakeholders on the mailing list.\n> \n> That's how I was able to fix datetime64 (in NumPy 1.11) from \"implicitly UTC\" (with automatic conversion to local time zones when printed) to datetime native.\n\nand that's great. But generally I think the downstream devs have way _less_ time as they have to contend with their own packages.\n\nI have seen the frustration first hand, the glacial pace and endless discussion on the numpy mailing list. Surely they are trying to preserve backward compat and that is great. But this stifles things.\n\nHolding back pandas with this standard in this way just makes people turn away out of frustration. Better performance, better compat, and features have been driving pandas for quite a while. Why stop now?\n\nWe _already_ provide much compat with numpy, but that does not mean that this should guide pandas direction _solely_ EVEN in the current pandas versions. 2.0 is going to take a while.\n\npandas forging ahead is a GREAT thing for the community. We go to great lengths to provide compatibility. sure `pd.String` is not an unambiguous win, but I don't think _any_ changes are now-adays. There _always_ is a compat issue/argument.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/238733732",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-238733732",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 238733732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODczMzczMg==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T00:32:15Z",
    "updated_at": "2016-08-10T00:32:15Z",
    "author_association": "MEMBER",
    "body": "As with all things, there are tradeoffs. Let's try to explicitly list out the concrete pros / user benefits (and code examples showing before/after if relevant) and also cons (API breaks, any changes to memory representation, etc.).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239780998",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-239780998",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 239780998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTc4MDk5OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T11:24:07Z",
    "updated_at": "2016-08-15T11:24:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "The benefits of having a separate dtype from `object` are several fold:\n- transparency:\n  It is then clear to the user what is held in the dtype (including encoding, see below)\n- simpler code path:\n  code that can assume strings only, can be simpler, raising better error messages to the user\n- performance:\n  specific typing allows for an optimization; backing Strings by `pd.String` (the class), sub- classing (or maybe a super-class) of `pd.Categorical`, provide quite a number of memory and  performance benefits\n- forward compat:\n  should be pretty compatibile with pandas 2.0 philosophy / user API\n\nCons:\n- some incompatiblities. For the most part this can be pretty transparent. We go to great lengths to avoid breaking API. I think that could be done here as well, e.g. `.values` can coerce to an `object` array for compat.\n- There is a claim that assignment to `.values` will not work. Sure, but in the general case with a 2-d Frame, this generally doesn't work now. Certainly there are times it _can_ work. Further this case _has_ to go away. We have a set of indexers that already do all of this in a very clear way. providing multiple ways of doing an action is not very pythonic. This is a minor usecase and can be easily documented.\n\nI would propose: `string[encoding]`, with the encoding being optional. (e.g. `string`) is acceptable as a dtype.\n\nSome would say that we should just wait for pandas 2.0. However a) this can lay the groundwork for the API change (in the dtype), and b) this may not be all that crazy to do; we have all of the machinery already existing.\n\nrelated #13941 for `Period[freq]`, and `Boolean` types (much simpler to implement).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239804653",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-239804653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 239804653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTgwNDY1Mw==",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-15T13:42:55Z",
    "updated_at": "2016-08-15T13:42:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just to chime in from my (limited) experience from helping with `pd.Categorical`: that needed one release to introduce the new functionality and one additional major release to work out all the corner cases. While lots of corner cases regarding \"encode objects/strings with int + lookup\" are now guarded with `is_categorical_dtype` (and so can be looked at and decided if they guard against \"encode only\" or a special case of \"this is different for categoricals\") is still suspect that a second release will be needed to iron out the corner cases. So IMO implementing it in the release which should become a long term release is quite a risk.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240002008",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-240002008",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 240002008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDAwMjAwOA==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T05:04:43Z",
    "updated_at": "2016-08-16T05:05:29Z",
    "author_association": "MEMBER",
    "body": "Several thoughts\n- I'm concerned about changing the memory representation of strings (such as making `pd.StringArray` a subclass of `pd.Categorical`) at this late stage. Other extension dtypes have added new semantic functionality whereas this modifies existing functionality. The strongest argument I see is the more efficient / performant internal representation, but this is quite a rabbit hole. For example:\n\n```\nIn [1]: import pandas as pd\n\nIn [2]: cats = pd.Categorical.from_array(['foo', 'bar', 'baz'])\n\nIn [3]: cats\nOut[3]: \n[foo, bar, baz]\nCategories (3, object): [bar, baz, foo]\n\nIn [4]: cats[2] = 'qux'\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-4-4e3b1fefa183> in <module>()\n----> 1 cats[2] = 'qux'\n\n/home/wesm/miniconda/lib/python3.5/site-packages/pandas/core/categorical.py in __setitem__(self, key, value)\n   1609         # something to np.nan\n   1610         if len(to_add) and not isnull(to_add).all():\n-> 1611             raise ValueError(\"Cannot setitem on a Categorical with a new \"\n   1612                              \"category, set the categories first\")\n   1613 \n\nValueError: Cannot setitem on a Categorical with a new category, set the categories first\n```\n\nIf we do a dictionary-encoded representation in pandas 2.0, then we will have to deal with this as well, and this implementation work will likely be duplicated. We also don't necessarily know what kinds of performance regressions this will introduce into user code that does a lot of string array mutation\n- While this does push the pandas API in the direction of the desired pandas 2.0 outcome (i.e. consistent and self-contained metadata across the board, rather than our current \"franken-metadata\" numpy-pandas hybrid), it does expand the API surface area, and the API may need to be changed / broken (again) in the pandas 2.0 refactor. Adding a Period dtype (as with Categorical / DatetimeTZ) does little harm because it will not affect as much existing working code. Of course, we currently have:\n\n```\nIn [7]: df = pd.DataFrame({'periods': pd.period_range('2000-01-01', periods=10)})\n\nIn [8]: df.dtypes\nOut[8]: \nperiods    object\ndtype: object\n\nIn [9]: df['periods'][0]\nOut[9]: Period('2000-01-01', 'D')\n```\n\nbut the number of users who are depending on this current behavior / representation seems limited compared with strings (which are used by effectively every pandas user).\n- Introducing encoding metadata feels like a deep rabbit hole that will introduce complexity both for users and developers. My preference as per discussions in #13944 is to support UTF-8 and Binary data, but nothing else. If you support an byte-encoded / non-UTF-8 string type, then encoding inference or validation (e.g. using https://pypi.python.org/pypi/chardet and/or stdlib codecs) becomes necessary.\n\nI would rather be conservative here (given that strings along with floating point numbers are probably the two most important types of data right now used by pandas users) and invest our energies designing a more future-proof foundation in the 2.x development branch (and where we will have enough time to eat the dog food and fix any mistakes before users are impacted).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240002969",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-240002969",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 240002969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDAwMjk2OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T05:13:37Z",
    "updated_at": "2016-08-16T05:13:37Z",
    "author_association": "MEMBER",
    "body": "@jreback Thanks for outlining pros/cons. I think it's important to consider that most of the advantages here will be short lived / obsoleted by pandas 2.0. In contrast, the downsides of yet-another data-type migration are quite real (especially if we need to do more fix-ups later). When we make this change, it is quite likely to break many downstream applications and libraries.\n\nWhat would valid choices for `encoding` be? Just `ascii` and `utf8`, or the full range of valid Python encodings? From a forward thinking perspective, I would suggest dropping `encoding` and requiring that all strings be unicode/UTF-8 (like Python 3).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240067987",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-240067987",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 240067987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDA2Nzk4Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T10:44:19Z",
    "updated_at": "2016-08-16T10:44:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "So when I originally wrote this I was actually going to separate this into 2 stages. A creation of the `string` dtype, and separately the change in the underlying repr (to a `pd.String` that was categorical based).\n\nMy goal was multi-fold.\n\nThe dtype change is really for code-cleanup internally. This in-and-of-itself prob does not justify the cost of its changes, but it moves us in the direction of pandas 2.0. I acutally think this is a very very important point. Just saying pandas 2.0 seems like it is _around-the-corner_. But we all know that it is at the very least 1 year aways from a stable back-compat release.\n\nI don't see why pandas 1.x should slow down / stop, EVEN IF we have a further API change. Here's the crucial point. I think any attempt to make a 'BIG' leap (aka py2/py3) is just a complete disaster and should be avoided at all costs. Including, and up to, multiple 'smaller' API breaks.\n\nThis gives people time to adjust gradually. The more gradual the better. Since pandas 2.0 will be a user API change in _maybe_ 1 year. Having one in 3 months which will do the builk of the changes anyhow, is IMHO, beneficial, NOT detrimental.\n\nAs far as the details, as @shoyer points out. Ideally we could spec this out to be 'about' what pandas 2.0 needs. So I would support `string[ascii]` for compat and `string[utf-8]`, where `string` == `string[utf-i]`.  Again these would prob just be a 'display' dtype, e.g.\n\n```\nIn [1]: Series(list('abc'))\nOut[1]: \n0    a\n1    b\n2    c\ndtype: string\n\nIn [2]: Series([u'a', u'b', u'c'])\nOut[2]: \n0    a\n1    b\n2    c\ndtype: string[utf8]\n```\n\nIf the impl is actually a rabbit hole (and to be honest it will STILL need to be addressed, but of course that could be later). This is such a big win for memory usage, that I would push for this in 1.x. That is why I am pushing for the dtype change, with an attendant breakage.\n\nIn fact, better to do it now, to see how it shakes out in reality. What better test bed that current pandas?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240074214",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-240074214",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 240074214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDA3NDIxNA==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T11:18:41Z",
    "updated_at": "2016-08-16T11:18:41Z",
    "author_association": "MEMBER",
    "body": "> I don't see why pandas 1.x should slow down / stop, EVEN IF we have a further API change\n\nI have a hard time believing that a major refactor of pandas's internals can ever succeed if pandas 1.x does not commit to strict API stability. If you are against creating a production / fully API-stable maintenance branch, perhaps we should return to that discussion on the mailing list. \n\nTo me this feels like one of the most sensitive changes that the library has seen in a long time, on par with the datetime64 work from pandas 0.7 to pandas 0.8, and so I'm not confident that we can get it right on the first try. My gut feeling is that it will affect users in many unknown ways in the long tail, and we won't get that feedback until releasing the change in a major release, which will foil the plan of making a API-stable major release. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240075386",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-240075386",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 240075386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDA3NTM4Ng==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T11:25:41Z",
    "updated_at": "2016-08-16T11:25:41Z",
    "author_association": "MEMBER",
    "body": "> As far as the details, as @shoyer points out. Ideally we could spec this out to be 'about' what pandas 2.0 needs.\n\nI'm also very concerned about ending up with a bolted-on solution (that we feel some obligation to stick with) before we have a chance to really dig in and see what uniform, self-contained metadata / logical types looks like practically-speaking for users (which will likely take some iteration, why add constraints now?).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240084910",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-240084910",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 240084910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDA4NDkxMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T12:17:49Z",
    "updated_at": "2016-12-07T22:57:43Z",
    "author_association": "MEMBER",
    "body": "I would personally also go the more conservative route for pandas 1.0, for the following reasons:\r\n- As already noted by others, a bigger change like this needs a few releases to stabilize. If we want to release a pandas 1.0 in the relative near future (so not in eg one year), I don't think we should include such bigger changes.\r\n- We should make upgrading to pandas 1.0 'LTS' as easy as possible for current users that are stuck on one of the older releases. Introducing pd.String, although it certainly has nice enhancements in itself for both users as for us developers, will not make this upgrade easier.\r\n- For me, this discussion is also about available time and priorities we choose. If we want to make pandas 2.0 happen, it will take a lot of time. Doing this string dtype change in 1.0, will generate more work for maintaining 1.0 (reviewing changes, a flood of issues regarding migration issues, breakages, subtle changes to flesh out to manage and solve). Time that will not be available for pushing 2.0. \r\n  Of course this can also make things easier in the code base and save developers time in this way, but if we are going to change things for 2.0 again, I don't think this will outweigh the extra work.\r\n\r\nIf we would like to add this functionality now, I would rather go the **'opt-in' route** (if this is possible), and not using it by default for string columns. We _could_ rather easily make a version of the Categorical without the strict checks on the categories, and provide this for users _now_ that want a way to have a more performant string type, without the strictness of current Categorical. \r\nBut of course, then we don't have the advantage of simpler code paths internally that @jreback listed above.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240099176",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-240099176",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 240099176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDA5OTE3Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T13:21:02Z",
    "updated_at": "2016-08-16T13:21:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok @wesm and @jorisvandenbossche you make some valid points. So will move this to 2.0 milestone. All that said, if during discussions, it looks like pandas 2.0 will be signficantly delayed, e.g. more than 1 year out. Then we ought to reconsider non-trivial API changes. \n\nWe should be really clear what 'freezing' the API actually means. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/240103213",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8640#issuecomment-240103213",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8640",
    "id": 240103213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDEwMzIxMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-16T13:35:40Z",
    "updated_at": "2016-08-16T13:35:40Z",
    "author_association": "MEMBER",
    "body": "> We should be really clear what 'freezing' the API actually means. \n\nYes, let's start a separate discussion for this. Start a discussion on the pandas-dev list first? (or an issue is fine for me as well). I will try to formulate some initial thoughts this evening.\n"
  }
]
