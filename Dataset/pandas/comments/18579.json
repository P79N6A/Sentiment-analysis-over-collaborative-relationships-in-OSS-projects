[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348375558",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18579#issuecomment-348375558",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18579",
    "id": 348375558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODM3NTU1OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-01T01:33:10Z",
    "updated_at": "2017-12-01T01:33:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@robbuckley not really clear *why* you would do this, e.g. pass a DataFrame to an Index. I believe we are going to raise on this (just discussing with @toobaz can't quite find the issue).\r\n\r\nAnd a boolean index is a quite strange beast."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348447954",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18579#issuecomment-348447954",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18579",
    "id": 348447954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODQ0Nzk1NA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-01T09:37:35Z",
    "updated_at": "2017-12-01T09:37:35Z",
    "author_association": "MEMBER",
    "body": "@robbuckley three things are sure:\r\n- if you pass something as ``index=something``, it should _not_ go in the Series values\r\n- whatever behavior we choose for ``index=`` for ``Series``, ``DataFrame`` should behave the same.\r\n- if an error must arise, it must be in the constructor call, not later\r\n\r\nThe rest is a bit less obvious. Boolean indexes are strange beasts at least for the general reason that non-unique indexes are strange beasts. But I personally think we will end up supporting them, for consistency (in particular with unstacking of boolean levels from ``MultiIndex``es, which make sense instead). See #15890 (@jreback probably not what you were looking for however) and maybe [this comment](https://github.com/pandas-dev/pandas/pull/17343#issuecomment-325121662).\r\n\r\nThis said, even if not introducing a ``BooleanIndex`` (or until we do), my preference for the above is to cast to ``object``, rather than to raise an error."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348465999",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18579#issuecomment-348465999",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18579",
    "id": 348465999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODQ2NTk5OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-01T10:58:42Z",
    "updated_at": "2017-12-01T10:58:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@toobaz yeah I'll repurpose this issue a bit to enhance error reporting w.r.t. nested-list likes to ``Index``, e.g. if you pass a ``DataFrame`` I would expect an error, even though technically you could make a MI."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348472137",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18579#issuecomment-348472137",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18579",
    "id": 348472137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODQ3MjEzNw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-01T11:29:33Z",
    "updated_at": "2017-12-01T11:29:33Z",
    "author_association": "MEMBER",
    "body": "Sorry, I totally misunderstood the original report, so my point \"if you pass something as index=something, it should not go in the Series values\" made no sense. Let me try again:\r\n\r\n- if you pass a ``Series`` as ``index=s``, it should use ``s.values``, not ``s.index``\r\n- I'm +1 on allowing a DataFrame to be casted to MultiIndex , but I agree it's debatable. Related to #15472 I guess.\r\n- if an error must arise, it must be in the constructor call, not later\r\n\r\nthe discussion on ``BooleanIndex`` still holds, I think."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348476206",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18579#issuecomment-348476206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18579",
    "id": 348476206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODQ3NjIwNg==",
    "user": {
      "login": "robbuckley",
      "id": 20515024,
      "node_id": "MDQ6VXNlcjIwNTE1MDI0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20515024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbuckley",
      "html_url": "https://github.com/robbuckley",
      "followers_url": "https://api.github.com/users/robbuckley/followers",
      "following_url": "https://api.github.com/users/robbuckley/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbuckley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbuckley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbuckley/subscriptions",
      "organizations_url": "https://api.github.com/users/robbuckley/orgs",
      "repos_url": "https://api.github.com/users/robbuckley/repos",
      "events_url": "https://api.github.com/users/robbuckley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbuckley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-01T11:51:59Z",
    "updated_at": "2017-12-01T14:17:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback i dont have a specific use case, I just stumbled across it. IMHO they should either raise early or be supported in a consistent way. It would be in the spirit of the docs to use s.values for all cases, casting df.values into a multiindex. But a raise on any attempt to use a Series or df as an index would be better than the current behaviour, i think\r\n\r\nCurrently the constructors succeed for all these examples, but various things fail down the line, in more or less confusing ways -- except for the integer Series example, where it behaves as if s.index were passed.\r\n\r\nThe dataframe case is especially confusing - at a first [careless] glance, it appears to have kind-of worked -- s.index looks as if it has 2x1 ndarrays as the keys. But in fact s.index.values is a 2x3 ndarray and bad things happen when i try to do other things with the series."
  }
]
