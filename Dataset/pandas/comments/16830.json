[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315554097",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-315554097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 315554097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU1NDA5Nw==",
    "user": {
      "login": "lphk92",
      "id": 761075,
      "node_id": "MDQ6VXNlcjc2MTA3NQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/761075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lphk92",
      "html_url": "https://github.com/lphk92",
      "followers_url": "https://api.github.com/users/lphk92/followers",
      "following_url": "https://api.github.com/users/lphk92/following{/other_user}",
      "gists_url": "https://api.github.com/users/lphk92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lphk92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lphk92/subscriptions",
      "organizations_url": "https://api.github.com/users/lphk92/orgs",
      "repos_url": "https://api.github.com/users/lphk92/repos",
      "events_url": "https://api.github.com/users/lphk92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lphk92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T18:48:13Z",
    "updated_at": "2017-07-15T18:48:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am working on this at the SciPy 2017 sprints"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412211029",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-412211029",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 412211029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjIxMTAyOQ==",
    "user": {
      "login": "rgommers",
      "id": 98330,
      "node_id": "MDQ6VXNlcjk4MzMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/98330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgommers",
      "html_url": "https://github.com/rgommers",
      "followers_url": "https://api.github.com/users/rgommers/followers",
      "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
      "organizations_url": "https://api.github.com/users/rgommers/orgs",
      "repos_url": "https://api.github.com/users/rgommers/repos",
      "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgommers/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-10T21:26:44Z",
    "updated_at": "2018-08-10T21:26:44Z",
    "author_association": "NONE",
    "body": "`np.argmax(some_series)` does the correct thing right now (and did in the past, and will remain correct). But it gives:\r\n\r\n```\r\n\\site-packages\\numpy\\core\\fromnumeric.py:52: FutureWarning: 'argmax' is deprecated. Use 'idxmax' instead. The behavior of 'argmax' will be corrected to return the positional maximum in the future. Use 'series.values.argmax' to get the position of the maximum now.\r\n  return getattr(obj, method)(*args, **kwds)\r\n```\r\n\r\nThe deprecation warning appears to be for `np.argmax` which is confusing. So two suggestions:\r\n- amend the message to say `pd.Series.argmax is ...`\r\n- don't use the word \"deprecated\" - `Series.argmax` is not deprecated, it will just change behavior (hence `FutureWarning`). Deprecation normally means that it will be removed.\r\n\r\nAnd a possible more involved change for this orpossibly for future related warnings: check whether the deprecated method is called by numpy's [_wrapfunc](https://github.com/numpy/numpy/blob/master/numpy/core/fromnumeric.py#L49) rather than by the user directly, and avoid giving a warning if that is the case and the user code is and remains correct."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412495095",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-412495095",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 412495095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjQ5NTA5NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T12:01:57Z",
    "updated_at": "2018-08-13T12:01:57Z",
    "author_association": "MEMBER",
    "body": "> np.argmax(some_series) does the correct thing right now (and did in the past, and will remain correct)\r\n\r\nI don't think it does? Eg\r\n\r\n```\r\nIn [8]: np.argmax(pd.Series([1, 2, 3], index=['a', 'b', 'c']))\r\n/home/joris/miniconda3/envs/dev/lib/python3.5/site-packages/numpy/core/fromnumeric.py:57: FutureWarning: 'argmax' is deprecated, use 'idxmax' instead. The behavior of 'argmax'\r\nwill be corrected to return the positional maximum in the future.\r\nUse 'series.values.argmax' to get the position of the maximum row.\r\n  return getattr(obj, method)(*args, **kwds)\r\nOut[8]: 'c'\r\n\r\nIn [9]: np.argmax(pd.Series([1, 2, 3], index=['a', 'b', 'c']).values)\r\nOut[9]: 2\r\n```\r\n\r\nSo it gives 'c', while it should give 2.\r\n\r\nBut I certainly agree that it is confusing that it seems that `np.argmax` is deprecated (not sure if we can solve this apart from the wording, as this has to do with python stacklevel printing), and that the wording can be improved (+1 on your two suggestions).\r\n\r\n> check whether the deprecated method is called by numpy's _wrapfunc rather than by the user directly, and avoid giving a warning if that is the case and the user code is and remains correct.\r\n\r\nIs that possible? (how to do it exactly?) \r\nBecause that would certainly be nice, also in some other cases.  For example in https://github.com/pandas-dev/pandas/pull/21930#issuecomment-408068861 where we deprecated `Series.compress` (to remove it eventually) which also raises a warning for `np.compress(s)` (in this case that was actually OK, as it will not work anymore in the future, but I can imagine similar cases).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412498230",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-412498230",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 412498230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjQ5ODIzMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T12:15:55Z",
    "updated_at": "2018-08-13T12:15:55Z",
    "author_association": "MEMBER",
    "body": "I suppose it is easy to do with inspecting the stack. Is it guaranteed to always be `_wrapfunc `, or should we rather check in general if the call is coming from the numpy module?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412500820",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-412500820",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 412500820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjUwMDgyMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T12:26:31Z",
    "updated_at": "2018-08-13T12:26:31Z",
    "author_association": "MEMBER",
    "body": "@rgommers see https://github.com/pandas-dev/pandas/pull/22310 for edit to the deprecation message"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412755837",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-412755837",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 412755837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjc1NTgzNw==",
    "user": {
      "login": "rgommers",
      "id": 98330,
      "node_id": "MDQ6VXNlcjk4MzMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/98330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgommers",
      "html_url": "https://github.com/rgommers",
      "followers_url": "https://api.github.com/users/rgommers/followers",
      "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
      "organizations_url": "https://api.github.com/users/rgommers/orgs",
      "repos_url": "https://api.github.com/users/rgommers/repos",
      "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgommers/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T05:06:53Z",
    "updated_at": "2018-08-14T05:06:53Z",
    "author_association": "NONE",
    "body": "> So it gives 'c', while it should give 2.\r\n\r\nYou're right. My code does: \r\n\r\n>>> x = pd.Series([1, 2, 3], index=['a', 'b', 'c'])\r\n>>> x[np.argmax(x)]\r\n\r\nI think this is normal though - the majority of users probably won't look at the actual value of the index.\r\n\r\n> Is it guaranteed to always be _wrapfunc, or should we rather check in general if the call is coming from the numpy module?\r\n\r\n`_wrapfunc` probably won't change, but it's private so no hard guarantee. These are the functions that use `_wrapfunc`:\r\n\r\n- take\r\n- reshape\r\n- choose\r\n- repeat\r\n- swapaxes\r\n- transpose\r\n- argpartition\r\n- argsort\r\n- argmax\r\n- argmin\r\n- searchsorted\r\n- nonzero\r\n- compress\r\n- clip\r\n- cumsum\r\n- cumprod\r\n- round\r\n\r\nSo that's not all - there are functions like `np.sum` that implement the logic themselves:\r\n\r\n    if type(a) is not mu.ndarray:\r\n        try:\r\n            sum = a.sum\r\n        except AttributeError:\r\n            pass\r\n        else:\r\n            return sum(axis=axis, dtype=dtype, out=out, **kwargs)\r\n\r\nIndeed checking that the caller is a numpy object is probably best. But having thought about it, there's probably some way to break that, e.g. by a user wrapping a call to pandas in `np.vectorize`. Probably best to ignore my suggestion, not worth the trouble.\r\n\r\n> @rgommers see #22310 for edit to the deprecation message\r\n\r\nThanks"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412787792",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-412787792",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 412787792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjc4Nzc5Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T08:00:09Z",
    "updated_at": "2018-08-14T08:00:09Z",
    "author_association": "MEMBER",
    "body": "> You're right. My code does:\r\n>\r\n>            x = pd.Series([1, 2, 3], index=['a', 'b', 'c'])\r\n>            x[np.argmax(x)]\r\n>\r\n> I think this is normal though - the majority of users probably won't look at the actual value of the index.\r\n\r\nThat's a good point. In case you have a non-numerical index like in the small example above, the `x[np.argmax(x)]` will keep working in the future (when `argmax` will return a positional integer), but with numerical indexes, this will not be guaranteed to give the same result. So therefore, if you have this deprecation message, you are still encouraged to switch to `idxmax`. \r\nWhich of course makes it more difficult to write code that works for both a Series and numpy 1D-array, but as long as `[]` mixes positional (numpy-like) and label-based indexing, there is no way around this complexity."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/416085123",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-416085123",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 416085123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjA4NTEyMw==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-27T00:37:09Z",
    "updated_at": "2018-08-27T00:37:09Z",
    "author_association": "MEMBER",
    "body": "I just ran into this problem when working through errata for _Python for Data Analysis_. Can argmax/argmin return the positional values in 0.24.0?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/416149534",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-416149534",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 416149534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjE0OTUzNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-27T08:09:12Z",
    "updated_at": "2018-08-27T08:09:12Z",
    "author_association": "MEMBER",
    "body": "Generally, our rule is to keep deprecations two additional feature releases (after the first release having the warning), and only remove/change it in the release after that. For argmax/argmin, that would mean to only change it in 0.25/1.0.\r\n\r\n@wesm the reason you ask is because you actually want to get the positional value? (and don't want to resort to `np.argmin(np.array(values))` that would only be needed for one additional release?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/416278126",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16830#issuecomment-416278126",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16830",
    "id": 416278126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjI3ODEyNg==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-27T16:07:37Z",
    "updated_at": "2018-08-27T16:07:37Z",
    "author_association": "MEMBER",
    "body": "Correct, the positional value. That's what it did before the cited refactoring caused index labels to be returned"
  }
]
