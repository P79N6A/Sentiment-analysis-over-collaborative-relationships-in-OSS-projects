[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41388921",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41388921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41388921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzg4OTIx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T12:53:19Z",
    "updated_at": "2014-04-25T12:53:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "You can simply do this (this would need an adjustement to handle scalars)\n\nhandling a mixed None and even lists/scalars is a bit non-trivial in python alone\ne.g. `len(None)` is not defined\n\n```\nIn [47]: def f(x):\n   ....:     return x is not None and bool(len(x))\n   ....: \n\nIn [48]: f(None)\nOut[48]: False\n\nIn [49]: f([])\nOut[49]: False\n\nIn [50]: f(DataFrame())\nOut[50]: False\n\nIn [51]: f([True])\nOut[51]: True\n\nIn [52]: f([False])\nOut[52]: True\n\nIn [53]: f(DataFrame(True,index=range(2),columns=range(2)))\nOut[53]: True\n\n```\n\nI am not sure why you are confused about the ambiguity. Lists/tuples/dicts dont' care about the contents so by definition their isn't a problem. However pandas objects (and numpy objects) are simply different; the DO care about the contents and act on them.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41390263",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41390263",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41390263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkwMjYz",
    "user": {
      "login": "tstriker",
      "id": 177651,
      "node_id": "MDQ6VXNlcjE3NzY1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/177651?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tstriker",
      "html_url": "https://github.com/tstriker",
      "followers_url": "https://api.github.com/users/tstriker/followers",
      "following_url": "https://api.github.com/users/tstriker/following{/other_user}",
      "gists_url": "https://api.github.com/users/tstriker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tstriker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tstriker/subscriptions",
      "organizations_url": "https://api.github.com/users/tstriker/orgs",
      "repos_url": "https://api.github.com/users/tstriker/repos",
      "events_url": "https://api.github.com/users/tstriker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tstriker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T13:08:57Z",
    "updated_at": "2014-04-25T13:10:00Z",
    "author_association": "NONE",
    "body": "I'm not confused about ambiguity - i'm saying that there is not ambiguity if you approach the problem from the perspective of python - the default check in python is for None/empty, while the other two (.any and .all) are to be provided explicitly.\n\nTo your point - handling a mixed None and even lists/scalars in python is trivial in python - it's `if foo` as [None, [], (,), {}, False] all evaluate to False.\n\nI'm arguing that providing a sane default that matches the behavior of the environment would make it more standard in the pythonic sense. \n\nFinally - it's not objects that care about data - it's the programmers - pandas and numpy sure have special properties, but from my perspective they all can be boiled down to python primitives and unless there is strong reason, on the basic level should also behave as such.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41391082",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41391082",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41391082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkxMDgy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T13:18:09Z",
    "updated_at": "2014-04-25T13:18:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "you just made my point, these are NOT python primitives, in fact they are much more feature rich. Trying to treat a frame (or a numpy array) as a list is meaningless. Yes it sometimes can _act_ like a list, but that doesn't mean it IS one. Duck typing has its limits.\n\nso are you also advocating that numpy change this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41394595",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41394595",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41394595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzk0NTk1",
    "user": {
      "login": "tstriker",
      "id": 177651,
      "node_id": "MDQ6VXNlcjE3NzY1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/177651?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tstriker",
      "html_url": "https://github.com/tstriker",
      "followers_url": "https://api.github.com/users/tstriker/followers",
      "following_url": "https://api.github.com/users/tstriker/following{/other_user}",
      "gists_url": "https://api.github.com/users/tstriker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tstriker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tstriker/subscriptions",
      "organizations_url": "https://api.github.com/users/tstriker/orgs",
      "repos_url": "https://api.github.com/users/tstriker/repos",
      "events_url": "https://api.github.com/users/tstriker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tstriker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T13:53:12Z",
    "updated_at": "2014-04-25T13:53:12Z",
    "author_association": "NONE",
    "body": "Eesh, i guess i've gotten myself into trouble.\n\nIn short - I'm using pandas for a web app, and it just trips me personally up every time when i do an \"if foo\" in the templates and then pandas is waving hands and claiming that it doesn't know what i'm talking about. The next steps then are plugging in .empty and then making sure that the object is always defined as DataFrame, as it would fail when the code branch that sets it from None would not execute, etc. Your suggested function would solve the problem, but shortly we would find ourselves following the magic of a cargo cult calling the f function for all the things.\n\nThe benefit of allowing simple evaluation would be that of simplicity of code. \nAs for downsides - i don't see any - so maybe that's a valid point for investigation - is there really ambiguity, considering how the environment treats empty objects? Or is it inertia?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41395060",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41395060",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41395060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzk1MDYw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T13:57:43Z",
    "updated_at": "2014-04-25T13:57:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tbaugis you have a valid point, but I think its a combination of inertia (back compat), and refusing to guess\n\nHere is the change issue with lots of sub-issues and commentary\nhttps://github.com/pydata/pandas/pull/4657\n\nif you want to review and come back with comments. Always like to hear a view.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41397118",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41397118",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41397118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzk3MTE4",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T14:17:36Z",
    "updated_at": "2014-04-25T14:17:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tbaugis considering numpy, there is some danger factor given how it can broadcast a single `False` value to a full container which will lose its \"falseness\". It is not an ambiguity per se, but you're in for a lot of surprises if you one day decide to replace a single constant with per-element one and don't have this particular scenario well tested (see #6966 for example).\n\nPandas containers are not so malleable, so there's less to be afraid of, but consistency with numpy is a plus.\n\nAs for the magical `f` function, I'm sticking to using empty lists as non-existent DataFrames and then `len(self.data) > 0` check works in both cases.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41416153",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41416153",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41416153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDE2MTUz",
    "user": {
      "login": "armaganthis3",
      "id": 7407093,
      "node_id": "MDQ6VXNlcjc0MDcwOTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7407093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/armaganthis3",
      "html_url": "https://github.com/armaganthis3",
      "followers_url": "https://api.github.com/users/armaganthis3/followers",
      "following_url": "https://api.github.com/users/armaganthis3/following{/other_user}",
      "gists_url": "https://api.github.com/users/armaganthis3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/armaganthis3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/armaganthis3/subscriptions",
      "organizations_url": "https://api.github.com/users/armaganthis3/orgs",
      "repos_url": "https://api.github.com/users/armaganthis3/repos",
      "events_url": "https://api.github.com/users/armaganthis3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/armaganthis3/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T17:06:59Z",
    "updated_at": "2014-04-25T17:06:59Z",
    "author_association": "NONE",
    "body": "The OP is about _Empty_ dataframes. As mentioned all empty python sequences give `false`.  So are empty numpy arrays:\n\n``` python\nIn [320]: np.empty(shape=[0])\nOut[320]: array([], dtype=float64)\n\nIn [321]: bool(np.empty(shape=[0]))\nOut[321]: False\n\nIn [322]: bool(np.empty(shape=[0,0]))\nOut[322]: False\n```\n\nNumpy will not broadcast on an dimensions which have zero elements so what @immerrr \nnotes doesn't seem ralevent (correct me if I'm wrong). Furthermore this was broken by a fix for  #4633 about binary boolean operators between NDframes, but none of the examples in that issues have to do with empty frames or numpy arrays. They are all about binary boolean operators between containers having at least some data.\n\n#4657 by @jreback that changed this itself broke long existing behaviuor, and did it despite  objections from users (@jseabold of statsmodels was one ) and actually overruled  the original call wes mckiney made on this specific issue. Especially when considering the amount of breaking changes that have been going into master since 0.12.1 and for the most threadbare reasons, the \"concerns\" about backward-compatibility seem kinda hypocritical.\n\nWhat's an actual good reason why `bool(pd.DataFrame())` shouldn't be false like everything else in python? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41417421",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41417421",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41417421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDE3NDIx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T17:19:30Z",
    "updated_at": "2014-04-25T17:20:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@armaganthis3 \n\nThe changes were all about consistency; @jseabold objection had to do with IMHO a numpy inconcistency. Pandas actually hasn't changed AT ALL, with the exception of the single-element case.\nso numpy treats the 0,1 element cases differently from all others.\n\n```\nIn [18]: bool(np.array([]))\nOut[18]: False\n\nIn [19]: bool(np.array([True]))\nOut[19]: True\n\nIn [20]: bool(np.array([False]))\nOut[20]: False\n\nIn [21]: bool(np.array([False,False]))\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n\nIn [22]: bool(np.array([True,True]))\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n```\n\nPandas is entirely consistent\n\n```\n\nIn [23]: bool(pd.DataFrame())\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\nIn [24]: bool(pd.DataFrame([[True]]))\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\nIn [25]: bool(pd.DataFrame([[False]]))\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41428267",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41428267",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41428267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDI4MjY3",
    "user": {
      "login": "armaganthis3",
      "id": 7407093,
      "node_id": "MDQ6VXNlcjc0MDcwOTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7407093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/armaganthis3",
      "html_url": "https://github.com/armaganthis3",
      "followers_url": "https://api.github.com/users/armaganthis3/followers",
      "following_url": "https://api.github.com/users/armaganthis3/following{/other_user}",
      "gists_url": "https://api.github.com/users/armaganthis3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/armaganthis3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/armaganthis3/subscriptions",
      "organizations_url": "https://api.github.com/users/armaganthis3/orgs",
      "repos_url": "https://api.github.com/users/armaganthis3/repos",
      "events_url": "https://api.github.com/users/armaganthis3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/armaganthis3/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:03:56Z",
    "updated_at": "2014-04-25T19:03:56Z",
    "author_association": "NONE",
    "body": "... and we're back to discussing non-empty dataframes again?  The OP put it in the title, discussed it in his description and I hyper-emphasized the point again in my comment. The question is about **empty** dataframes. \n\nConsistency. By which you mean doing the same thing whether it makes sense or not? Even if by doing so it's inconsistent with every other python data type out there? That's just _bizzare_.\n\nwhat's the point of this \"consistency\"? whom does it benefit?\n\nthe OP,  discussions in previous issue, the ml discussion and the PEP are all explicit about \nthe obvious fact that `bool(empty)=false` is convenient. It's certainly pythonic by acclamation. how is all that trumped by some bogus definition of \"consistency\"? what precisely is ambiguous about the truth value of an **empty** dataframe as the exception message suggests?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41429071",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41429071",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41429071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDI5MDcx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:12:00Z",
    "updated_at": "2014-04-25T19:12:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "so you think that `bool(DataFrame()) == False` but if its non empty you get a raise is better? how is that?\n\nif I have an if statement I don't want it working when the test is False, but raising when it is True. *_that_ makes no sense.\n\nThat would be **inconsistent**\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41431598",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41431598",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41431598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMxNTk4",
    "user": {
      "login": "tstriker",
      "id": 177651,
      "node_id": "MDQ6VXNlcjE3NzY1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/177651?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tstriker",
      "html_url": "https://github.com/tstriker",
      "followers_url": "https://api.github.com/users/tstriker/followers",
      "following_url": "https://api.github.com/users/tstriker/following{/other_user}",
      "gists_url": "https://api.github.com/users/tstriker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tstriker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tstriker/subscriptions",
      "organizations_url": "https://api.github.com/users/tstriker/orgs",
      "repos_url": "https://api.github.com/users/tstriker/repos",
      "events_url": "https://api.github.com/users/tstriker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tstriker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:39:18Z",
    "updated_at": "2014-04-25T19:39:18Z",
    "author_association": "NONE",
    "body": "If it's nonempty, you would get a True, irregardless of the contents of the frame. The bool check would be evaluating if the DataFrame (or other sequences for that matter, unless they are generators) is empty or not.\n\n@armaganthis3 raised a good point, that the issue is not with consistency, but rather matching expectations (pep8).\n\nI ran through the archive of the pointed out issue (thanks for the link!) and the discussion (https://groups.google.com/forum/#!topic/pydata/XzSHSLlTSZ8) seems to have flushed the baby (empty checks) with the bathwater (evaluating dataframe contents to determine the bool value), not considering the option to leave empty checks as the sane default.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41431605",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41431605",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41431605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMxNjA1",
    "user": {
      "login": "armaganthis3",
      "id": 7407093,
      "node_id": "MDQ6VXNlcjc0MDcwOTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7407093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/armaganthis3",
      "html_url": "https://github.com/armaganthis3",
      "followers_url": "https://api.github.com/users/armaganthis3/followers",
      "following_url": "https://api.github.com/users/armaganthis3/following{/other_user}",
      "gists_url": "https://api.github.com/users/armaganthis3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/armaganthis3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/armaganthis3/subscriptions",
      "organizations_url": "https://api.github.com/users/armaganthis3/orgs",
      "repos_url": "https://api.github.com/users/armaganthis3/repos",
      "events_url": "https://api.github.com/users/armaganthis3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/armaganthis3/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:39:25Z",
    "updated_at": "2014-04-25T19:39:25Z",
    "author_association": "NONE",
    "body": "Yes, That's exactly what I think. So does the OP. So did the numpy developers.\nSo did several users on the ml/comments in the other issues.\n\nI have no idea where you came up with this definition of consistency, and I sure don't know\nwhy you're clinging to it with so very little to back it up with except some personal aesthetic\nyou personally hold.\n\nWho says a method can't return a value when it's appropriate and raise otherwise? that's\nreally... common, come to think of it.\n\na method that always raises whenever it's called regardless of circumstances? \nyup, that sure is consistent. also useless. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41431739",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41431739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41431739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMxNzM5",
    "user": {
      "login": "tstriker",
      "id": 177651,
      "node_id": "MDQ6VXNlcjE3NzY1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/177651?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tstriker",
      "html_url": "https://github.com/tstriker",
      "followers_url": "https://api.github.com/users/tstriker/followers",
      "following_url": "https://api.github.com/users/tstriker/following{/other_user}",
      "gists_url": "https://api.github.com/users/tstriker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tstriker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tstriker/subscriptions",
      "organizations_url": "https://api.github.com/users/tstriker/orgs",
      "repos_url": "https://api.github.com/users/tstriker/repos",
      "events_url": "https://api.github.com/users/tstriker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tstriker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:40:53Z",
    "updated_at": "2014-04-25T19:40:53Z",
    "author_association": "NONE",
    "body": "@armaganthis3 btw, couldn't not notice that you have created a github burner account - while you are certainly helping with argumentation, i'd beg you to stay constructive if possible :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41431791",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41431791",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41431791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMxNzkx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:41:34Z",
    "updated_at": "2014-04-25T19:41:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "alright,\n\n@armaganthis3 \n\nso let' have a PR from you that fixes the issue (pretty trivial), but changes the documentation with an explanation as well\n\nlook forward to it\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41432017",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41432017",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41432017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMyMDE3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:44:06Z",
    "updated_at": "2014-04-25T19:44:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "So to repeat @jseabold points (which I think are very rational), and were addressed, correctly me if I am wrong\n\n```\nBehavior and reasoning: \n\n1. Empty series raises. Maybe you screwed up your index? What is the \n'correct' output of this? \n\nif pd.isnull(pd.DataFrame([])): \n  print 'this dataframe has no missing values?' \n\nThis seems ambiguous. You can't answer the question because there's no \ninformation to evaluate the statement. \n\n2. 1 element is fine. You know what you're doing, carry on. Also \n.all() == .any() in this case, so it's not ambiguous. \n\n3. Length > 1 raises . This is ambiguous. Ask for all, any, or empty. \nMaybe you screwed up your index? \n\nSkipper \n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41432527",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41432527",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41432527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMyNTI3",
    "user": {
      "login": "armaganthis3",
      "id": 7407093,
      "node_id": "MDQ6VXNlcjc0MDcwOTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7407093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/armaganthis3",
      "html_url": "https://github.com/armaganthis3",
      "followers_url": "https://api.github.com/users/armaganthis3/followers",
      "following_url": "https://api.github.com/users/armaganthis3/following{/other_user}",
      "gists_url": "https://api.github.com/users/armaganthis3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/armaganthis3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/armaganthis3/subscriptions",
      "organizations_url": "https://api.github.com/users/armaganthis3/orgs",
      "repos_url": "https://api.github.com/users/armaganthis3/repos",
      "events_url": "https://api.github.com/users/armaganthis3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/armaganthis3/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:49:21Z",
    "updated_at": "2014-04-25T19:49:41Z",
    "author_association": "NONE",
    "body": "@jreback, you might do well to take a step back and think about what the real issue is.\nin this issue, and in the previous ones that prompted this code. Just look. it's right \nit's not back-compat. it's not consistency. it's ambiguity. That's what the exception warns\nof, that's what prompted the ban on `bool()`, and it simply doesn't apply when the dataframe\nis empty.\n\nI will not be opening a PR, I'm sure you'll have fun finding made-up problems (whitespace,\nsquashing, I've seen you do it) and wasting my time.\n\n@tbaugis, I opened up a GH account just so I can comment on this. It makes me so angry\nto see technical discussions mired by nonsenical arguments in a project as widely used as this.\nIf one good reason would have been given, we'd all know why it shouldn't be done and there'd \nbe no need for all this. instead you get malarky like \"it's beacuse of the feature-richness!\".\n\nThat said, you're completely right and I do sound like a troll. Going away now.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41433004",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41433004",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41433004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMzMDA0",
    "user": {
      "login": "tstriker",
      "id": 177651,
      "node_id": "MDQ6VXNlcjE3NzY1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/177651?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tstriker",
      "html_url": "https://github.com/tstriker",
      "followers_url": "https://api.github.com/users/tstriker/followers",
      "following_url": "https://api.github.com/users/tstriker/following{/other_user}",
      "gists_url": "https://api.github.com/users/tstriker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tstriker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tstriker/subscriptions",
      "organizations_url": "https://api.github.com/users/tstriker/orgs",
      "repos_url": "https://api.github.com/users/tstriker/repos",
      "events_url": "https://api.github.com/users/tstriker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tstriker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T19:54:48Z",
    "updated_at": "2014-04-25T19:54:48Z",
    "author_association": "NONE",
    "body": "Here's the proposed rationale (going reductionist):\n1. Empty series returns False - see PEP8 on sequences\n2. 1 element returns True - see PEP8 on sequences\n3. Lenght > 1 returns True - see PEP8 on sequences\n\nAnd here's is why it's no ambiguous - and can be expressed in one sentence: The boolean check evaluates DataFrame for emptiness. In fact, it's so obvious that it wouldn't even require a line in the documentation (because, see PEP8). \n\nWe could run a fun dev poll on this - \"what do you think an empty DataFrame should evaluate to? (a) can't evaluate, it's ambiguous; (b) False\"\nAnd if empty dataframe is False, then a non-empty one is True.\n\nBut i'm afraid i'm running circles now, heh.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41433929",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41433929",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41433929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMzOTI5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T20:05:20Z",
    "updated_at": "2014-04-25T20:05:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tbaugis that completely breaks with numpy for 2) and 3). not that numpy is always right.\n\nfor 2) numpy evaluates `Series([True])` and `Series([False])` (or Frame), to `True` and `False`\npandas provides `.bool()` for this purpose\n\nfor 3) always raise the `ValueError` (same as numpy)\n\nthere is just too much room for screwing up your indexes in pandas because you did an operation which happened to return a different index and thus you end up with an empty frame. This is much harder in numpy; THAT's why pandas has to error in favor of more errors rather than less.\n\nI supposes 1) is ok, but I think it goees to the same exact reason above, you might have screwed something up.\n\nYes, PEP8 is nice, but you want a failure to be obvious and loud.\n\nIf you have an empty DataFrame you had better be sure that is what you actually want and just didn't make a mistake (this is QUITE common).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41434060",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41434060",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41434060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDM0MDYw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T20:06:52Z",
    "updated_at": "2014-04-25T20:06:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd @jseabold jump in? I know we had this disccusion, but @tbaugis does have a valid point\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41490629",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41490629",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41490629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDkwNjI5",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-27T07:59:22Z",
    "updated_at": "2014-04-27T07:59:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tbaugis - I agree that it's annoying that you can't do normal checks like `if x: do y` on dataframes, but I think the problem is that you're assuming that it's feasible to say that all non-empty NDFrames are truthy.\n\n> And if empty dataframe is False, then a non-empty one is True.\n\nbut if non-empty dataframes _must_ raise, would you still want an empty dataframe to register as False? \n\nI've included some explanation from numpy devs on why you need to raise on the ambiguity, which mostly centers around this:\n\n``` python\n>>> pd.Series(['a', 'b']) == pd.Series(['a', 'c'])\n0     True\n1    False\ndtype: bool\n>>> if pd.Series(['a', 'b']) == pd.Series(['c', 'd']):\n...    print \"This is truthy\"\n```\n\nExcept that `a == b` must return the elementwise comparison of a and b , and therefore the statement `if a == b` would always be `True` if `a` and `b` have more than one item (as in the above).\n\nEvery built in Python object returns a bool on logical comparisons (with the exception of the special keywords `and` and `or`) and pandas would be much less useful if you couldn't write something like `c[c >= max_value] = max_value`. You definitely sacrifice some clarity regarding coercing to booleans, but in exchange you get more expressive syntax.\n\n---\n\nThere are a few mailing list threads you might check out that explains why numpy chose to raise on non-empty arrays (links from https://github.com/numpy/numpy/issues/2031) Snippet from [a mailing list post](http://article.gmane.org/gmane.comp.python.numeric.general/32820) that I think breaks it down best: \n\n> No. Numeric used to use the any() interpretation, and it led to many,\n> many errors in people's code that went undetected for years. For\n> example, people seem to usually want \"a == b\" to be True iff _all_\n> elements are equal. People also seem to usually want \"a != b\" to be\n> True if _any_ elements are unequal. These desires are inconsistent and\n> cannot be realized at the same time, yet people seem to hold both\n> mental models in their head without thoroughly thinking through the\n> logic or testing it. No amount of documentation or education seemed to\n> help, so we decided to raise an exception instead.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41606560",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41606560",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41606560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjA2NTYw",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-28T20:06:48Z",
    "updated_at": "2014-04-28T20:06:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "We can't keep **everyone happy** here, so we keep **everyone unhappy** but with correct code (that is, code without surprises)... _which ought to keep everyone happy (inside)_.\n\nAs you've mentioned this was brought up in #4633 #4633 originally #1073 #1069 etc. and was discussed extensively in the mailing lists: https://groups.google.com/d/msg/pydata/XzSHSLlTSZ8/QEOsT4l3RFYJ\n\nI understand @tbaugis's sentiment that it should work pythonically, however experience/discussion suggest this is a bad idea. The current solution works well with a raise if it's ambiguous (and unfortunately it **is** ambiguous*), I stand by team's decision that raising is the correct solution, and writing `df.empty` rather than `df` is [more explicit](http://legacy.python.org/dev/peps/pep-0020/)...\n\nThe message on this exception tells you **exactly and immediately** how to fix your code to be non-ambiguous.\n\n\\* For example, consider calling bool on the following Series:\n\n```\nIn [1]: a = pd.Series([False])\n\nIn [2]: bool(a.values)  # numpy\nOut[2]: False\n\nIn [3]: bool(list(a))  # python\nOut[3]: True\n```\n\nChoosing either is going to surprise/confuse. _(That said, if you can persuade numpy to \"fix\" this potentially we'd be happy to as well...)_\n\n@armaganthis3 I think you've misread the numpy examples above, checking:\n\n```\nif a.values:  # numpy\n```\n\ndoes **not** check emptiness, it checks emptiness _or_ whether it contains one item whose value is Falsey _and_ if it contains more than one item it RAISES.... which is fine if that's what you meant, but IMO that's rarely what the user means. Personally I can't see a good reason to write code which could potentially depending on the length raise... but if you want to, for your convenience, you can use `.bool()`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41611403",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41611403",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41611403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjExNDAz",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-28T20:47:50Z",
    "updated_at": "2014-04-28T20:47:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "As I mentioned in the ML thread, I used the \n\n``` python\nif df:\n  do stuff\n```\n\nidiom quite a bit. It was super convenient and I never had a problem with the ambiguous cases. I had lots of legacy code break by making things more _correct_. If pandas were a personal project, it would work the way lists do. \n\nThat being said, there are valid reasons for the _inconvenience_ and it's not something I even register anymore. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41663163",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41663163",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41663163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjYzMTYz",
    "user": {
      "login": "tstriker",
      "id": 177651,
      "node_id": "MDQ6VXNlcjE3NzY1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/177651?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tstriker",
      "html_url": "https://github.com/tstriker",
      "followers_url": "https://api.github.com/users/tstriker/followers",
      "following_url": "https://api.github.com/users/tstriker/following{/other_user}",
      "gists_url": "https://api.github.com/users/tstriker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tstriker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tstriker/subscriptions",
      "organizations_url": "https://api.github.com/users/tstriker/orgs",
      "repos_url": "https://api.github.com/users/tstriker/repos",
      "events_url": "https://api.github.com/users/tstriker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tstriker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-29T10:59:02Z",
    "updated_at": "2014-04-29T10:59:02Z",
    "author_association": "NONE",
    "body": "@jratner - what seems to be off for me is the attempt to do stuff like this \n\n```\n>>> pd.Series(['a', 'b']) == pd.Series(['a', 'c'])\n0     True\n1    False\n```\n\nequality operator is not the correct one to use as the response is not a single Boolean, but rather a list of booleans. I'm having hard time remembering any precedents like this outside of the numpy/pandas. The proper thing here would be to use an explictly named function something like `pd.Series(['a', 'b']).compare(pd.Series(['a', 'c']))` or similar.\n\nAnd the equality comparison should compare for full equality - that is if the hashes of the objects match.\n\nHope i'm not repeating myself too much!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41663954",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41663954",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41663954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjYzOTU0",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-29T11:11:56Z",
    "updated_at": "2014-04-29T11:51:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I'm having hard time remembering any precedents like this outside of the numpy/pandas\n\n[octave](http://www.gnu.org/software/octave/doc/interpreter/Comparison-Ops.html) and [matlab](http://www.mathworks.com/help/matlab/ref/relationaloperators.html) come to mind.\n\nUPD: also, [R](http://cran.r-project.org/doc/manuals/r-release/R-lang.html#Operators).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41666893",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41666893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41666893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjY2ODkz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-29T11:55:02Z",
    "updated_at": "2014-04-29T11:55:02Z",
    "author_association": "MEMBER",
    "body": "@tbaugis This is the core of numpy (and pandas) that operations work elementwise. See also eg adding two arrays will add the individual elements, while adding two lists concatenates them:\n\n```\nIn [36]: a = np.array([1,2])\nIn [37]: b = np.array([3,4])\nIn [38]: a + b\nOut[38]: array([4, 6])\nIn [39]: list(a) + list(b)\nOut[39]: [1, 2, 3, 4]\n```\n\nand the equality operator behaves the same.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41668278",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41668278",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41668278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjY4Mjc4",
    "user": {
      "login": "tstriker",
      "id": 177651,
      "node_id": "MDQ6VXNlcjE3NzY1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/177651?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tstriker",
      "html_url": "https://github.com/tstriker",
      "followers_url": "https://api.github.com/users/tstriker/followers",
      "following_url": "https://api.github.com/users/tstriker/following{/other_user}",
      "gists_url": "https://api.github.com/users/tstriker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tstriker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tstriker/subscriptions",
      "organizations_url": "https://api.github.com/users/tstriker/orgs",
      "repos_url": "https://api.github.com/users/tstriker/repos",
      "events_url": "https://api.github.com/users/tstriker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tstriker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-29T12:13:39Z",
    "updated_at": "2014-04-29T12:13:39Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche thanks for the insight! Without grudge, i guess pandas can be described as \"matlab or r in python\", where the math computational world notations clash with the python ones.\n\nHow about pandas3k then! :)\n\nAnyhoo, I guess you have explained all the things to me. Thank you all for your time!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41668668",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41668668",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41668668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjY4NjY4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-29T12:18:39Z",
    "updated_at": "2014-04-29T12:19:16Z",
    "author_association": "MEMBER",
    "body": "@tbaugis It's indeed true that pandas deviates from python in some ways, to have more convenient behaviour for numerical data analysis (what you can call matlab or R-like, but more general scientific computing like). But maybe this can be made clearer in the docs, for example a section on \"differences between pandas and python\" or \"dataframes are not lists\" (because it is certainly not going to change :-)).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41668982",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41668982",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41668982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjY4OTgy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-29T12:23:07Z",
    "updated_at": "2014-04-29T12:23:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tbaugis thanks for your patience, this has been an illuminating issue!\n\ngoing to close, but if anyone has comments, pls feel free to post!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41672609",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41672609",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41672609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjcyNjA5",
    "user": {
      "login": "jseabold",
      "id": 296164,
      "node_id": "MDQ6VXNlcjI5NjE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jseabold",
      "html_url": "https://github.com/jseabold",
      "followers_url": "https://api.github.com/users/jseabold/followers",
      "following_url": "https://api.github.com/users/jseabold/following{/other_user}",
      "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions",
      "organizations_url": "https://api.github.com/users/jseabold/orgs",
      "repos_url": "https://api.github.com/users/jseabold/repos",
      "events_url": "https://api.github.com/users/jseabold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jseabold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-29T13:02:38Z",
    "updated_at": "2014-04-29T13:02:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "On Tue, Apr 29, 2014 at 6:59 AM, Toms Bauģis notifications@github.comwrote:\n\n> @jratner https://github.com/jratner - what seems to be off for me is\n> the attempt to do stuff like this\n> \n> > > > pd.Series(['a', 'b']) == pd.Series(['a', 'c'])\n> > > > 0     True\n> > > > 1    False\n> \n> equality operator is not the correct one to use as the response is not a\n> single Boolean, but rather a list of booleans. I'm having hard time\n> remembering any precedents like this outside of the numpy/pandas. The\n> proper thing here would be to use an explictly named function something\n> like pd.Series(['a', 'b']).compare(pd.Series(['a', 'c'])) or similar.\n\nFWIW, this is what the `.all` method is for in numpython. 'explicit is\nbetter than implicit'\n\n```\n(pd.Series(['a', 'b']) == pd.Series(['a', 'c'])).all()\n```\n\nor\n\n```\nall(pd.Series(['a', 'b']) == pd.Series(['a', 'c']))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41674096",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6964#issuecomment-41674096",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6964",
    "id": 41674096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjc0MDk2",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-29T13:17:40Z",
    "updated_at": "2014-04-29T13:17:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tbaugis that's #1134 (a \"feature\").\n\nThere was some discussion of better way to check two pandas objects are equal... there's a couple of SO answers [using assert_frame_equal](http://stackoverflow.com/a/19918849/1240268) :S ...hacky.\n"
  }
]
