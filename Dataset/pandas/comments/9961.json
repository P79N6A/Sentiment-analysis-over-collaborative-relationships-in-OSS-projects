[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/94810230",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-94810230",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 94810230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0ODEwMjMw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-21T14:13:16Z",
    "updated_at": "2015-04-21T14:13:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "almost all testing is now done in test_index.py\nnot precluding another file but most / all should be there (in a new section) inheriting from the base tester\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/94866056",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-94866056",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 94866056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0ODY2MDU2",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-21T16:45:06Z",
    "updated_at": "2015-04-23T07:12:31Z",
    "author_association": "NONE",
    "body": "@jreback Thanks. I am currently rewriting the test suite of `Int64Index` for `RangeIndex`.\n\nClearly instantiation will be different. Which of the following cases should be possible?\n\n```\n1. RangeIndex(0.5, 10, 0.1)\n2. RangeIndex()  --> empty, might be useful to allow cheap resizing by setting start/stop property of index\n3. RangeIndex(1, 1)\n4. RangeIndex(np.nan)\n5. RangeIndex([1, 2, 3]) --> I.e. Check if list is monotonically increasing and represent compactly if possible, fall-back to `Int64Index` otherwise?\n6. RangeIndex(1, dtype=np.int4) --> relevant for `index.values` behaviour. Necessary? Can we restrict to int64?\n7. Index(1) --> RangeIndex(1) ?\n```\n\nShould `RangeIndex(5).values` return `np.arange(5)` or something memory saving?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/94892525",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-94892525",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 94892525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0ODkyNTI1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-21T18:11:06Z",
    "updated_at": "2015-04-21T18:11:06Z",
    "author_association": "MEMBER",
    "body": "I would not trouble yourself with allowing for non-integer or missing `start`, `step` or `stop`. Also, IMO arguments to `RangeIndex` should be parsed exactly like the built-in `range` (except for the optional `name` keyword argument).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/94895077",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-94895077",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 94895077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0ODk1MDc3",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-21T18:21:35Z",
    "updated_at": "2015-04-21T18:21:35Z",
    "author_association": "MEMBER",
    "body": "For implementation, I would strongly recommend keeping track of [builtin `range`](https://docs.python.org/3/library/stdtypes.html#typesseq-range) object (from Python 3 or [a backport](http://python-future.org/reference.html#range)) under the hood. `range` already supports all the bounds checking and slicing logic.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/95132302",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-95132302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 95132302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1MTMyMzAy",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-22T10:46:56Z",
    "updated_at": "2015-04-22T10:47:43Z",
    "author_association": "NONE",
    "body": "I find that I frequently have to check whether the supplied dtype parameter it equivalent to `np.int64`. Since dtype can be string, etc, my current solution is this:\n\n```\ntry:\n    got_int64_dtype = isinstance(np.dtype(dtype), np.int64)\nexcept TypeError:\n    got_int64_dtype = False\n```\n\nIs there a converter function already available for use in the idiom `isinstance(some_conv_fn(dtype), np.int64)`?\n\n@shoyer Thanks for the helpful advice and references.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/95139189",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-95139189",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 95139189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1MTM5MTg5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-22T11:10:19Z",
    "updated_at": "2015-04-22T11:10:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "this should use virtually the same `__new__` as `Int64Index`. Use `com.is_integer_dtype`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/95263208",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-95263208",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 95263208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1MjYzMjA4",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-22T16:55:55Z",
    "updated_at": "2015-04-23T07:13:09Z",
    "author_association": "NONE",
    "body": "Ok, I am slowly making progress: I finally figured out how to do an \"analytic\" intersection (inner join) between two general, dissimilar `RangeIndex` of the type `range(start, stop, step)`. Of course this results simply in a new `RangeIndex` with a new set of parameters.\n\nNow I am a bit unsure on how to proceed with the union (outer join) of two `RangeIndex`. This can in general not be represented as a single `range(start, stop, step)` but in the worst case requires two ranges with different parameters.\n\nOne could imagine a `CompoundRangeIndex` that keeps a list of multiple `RangeIndex`. \n\nI was planning to avoid converting `RangeIndex` to `Int64Index` as much as possible but at a certain point operations on a numpy array will probably become faster than running through as list of different `RangeIndex` contained in a `CompoundRangeIndex`...\n\nWhat does everybody think? Is it worth the effort? Or shall I just convert to a `Int64Index` when a union is required and be done with it?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/95263689",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-95263689",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 95263689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1MjYzNjg5",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-22T16:58:14Z",
    "updated_at": "2015-04-22T16:58:14Z",
    "author_association": "MEMBER",
    "body": "I would just covert to Int64Index when necessary, possibly even for all union operations on RangeIndex objects (for the sake of consistency).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/95903130",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9961#issuecomment-95903130",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9961",
    "id": 95903130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1OTAzMTMw",
    "user": {
      "login": "ARF1",
      "id": 5834577,
      "node_id": "MDQ6VXNlcjU4MzQ1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5834577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ARF1",
      "html_url": "https://github.com/ARF1",
      "followers_url": "https://api.github.com/users/ARF1/followers",
      "following_url": "https://api.github.com/users/ARF1/following{/other_user}",
      "gists_url": "https://api.github.com/users/ARF1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ARF1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ARF1/subscriptions",
      "organizations_url": "https://api.github.com/users/ARF1/orgs",
      "repos_url": "https://api.github.com/users/ARF1/repos",
      "events_url": "https://api.github.com/users/ARF1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ARF1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T11:22:10Z",
    "updated_at": "2015-04-24T11:22:10Z",
    "author_association": "NONE",
    "body": "I am closing this in favor of #9977 to deal with merging issues.\n"
  }
]
