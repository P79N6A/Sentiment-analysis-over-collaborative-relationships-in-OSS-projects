[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11233385",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11233385",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11233385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjMzMzg1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T07:06:23Z",
    "updated_at": "2012-12-11T07:48:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "storage of this data is is pretty easy to implement in HDFStore. \n(not pushing HDFStor as a general mechanism!)\n\ngeneral thoughts on meta data:\n- A single meta attribute avoids lots of issues\n- vote for 'meta'\n- allow hierarchical\n- allow anything (eg no checking)\n- do u keep copying it?, just shallow I think\n- in serialization make json only\n\nspecific to HDFStore:\n- serialization -(PyTables already has this requirement), maybe have this raise/warn user that they r going to lose data\n- in HDFStore: what to do when appending (and not overwriting) - maybe ignore it, and force user to pass an option, meta=True?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11233686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11233686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11233686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjMzNjg2",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T07:24:48Z",
    "updated_at": "2012-12-11T07:25:48Z",
    "author_association": "NONE",
    "body": "pytables it is a very good fit in terms of features, but:\n- pytables is not currently a hard dependency of pandas.\n- is not currently available for python3?\n- does not support in memory databases (?)\n- alsom cannot itself be pickled or jsoned easily? so you have to embed a binary hdfs file.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11233812",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11233812",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11233812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjMzODEy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T07:31:13Z",
    "updated_at": "2012-12-11T07:44:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "oh - was not suggesting we use this as a backend for specific storage\nof meta deta in general (the above points were my comments in general on meta\ndata - reading it again it DOES look like I am pushing HDFStore)\n\nwas just pointing out that HDFStore can support meta deta if pandas structures do\n\nto answer your questions\n- not a hard dependency - nor should pandas make it one \n- not yet py3 (being worked on now I believe)\n- not in memory capable\n- hdf is meant to be an external format \n  (so would have to include a separate file)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11234744",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11234744",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11234744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjM0NzQ0",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T08:17:04Z",
    "updated_at": "2012-12-11T08:34:30Z",
    "author_association": "NONE",
    "body": "+1 for all meta data living under a single attribute\n\nI'm against allowing non-serializable objects as metadata, at all. But not sure \nif that should be a constraint on the objects or the serialization format.\n\nin any case, a hook+type tag mechanism would allow users to plant ids of external\nobjects and reconstruct things at load-time.\nI've been thinking of suggesting a hooking mechanism elsewhere (for custom representations\nof dataframes - viz, html and so on).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11236643",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11236643",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11236643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjM2NjQz",
    "user": {
      "login": "gerigk",
      "id": 1327168,
      "node_id": "MDQ6VXNlcjEzMjcxNjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1327168?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerigk",
      "html_url": "https://github.com/gerigk",
      "followers_url": "https://api.github.com/users/gerigk/followers",
      "following_url": "https://api.github.com/users/gerigk/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerigk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerigk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerigk/subscriptions",
      "organizations_url": "https://api.github.com/users/gerigk/orgs",
      "repos_url": "https://api.github.com/users/gerigk/repos",
      "events_url": "https://api.github.com/users/gerigk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerigk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T09:23:29Z",
    "updated_at": "2012-12-11T09:25:02Z",
    "author_association": "NONE",
    "body": "what do you mean by not in memory capable?\n\nHDF5 has an in memory+ stdout writer and pytables support has been added\nrecently.\n\n(https://github.com/PyTables/PyTables/pull/173) \n\nOn Tue, Dec 11, 2012 at 8:31 AM, jreback notifications@github.com wrote:\n\n> oh - was not suggesting we use this as a backend for specific storage\n> of meta deta in general\n> just that HDFStore can support meta deta if pandas structures do\n> \n> to answer your questions\n> - not a hard dependency - nor should pandas make it one\n> - not yet py3 (being worked on now I believe)\n> - not in memory capable\n>   \n>   —\n>   Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/2485#issuecomment-11233812.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11237279",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11237279",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11237279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjM3Mjc5",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T09:45:37Z",
    "updated_at": "2012-12-11T09:45:37Z",
    "author_association": "NONE",
    "body": "oh. I wasn't aware of that and didn't find anythig in the online docs.\nThis seems to have been added after the latest 2.4.0 pytables release and so is not\nyet available off pypi or the distros.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11257061",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11257061",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11257061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjU3MDYx",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T18:58:12Z",
    "updated_at": "2012-12-11T18:58:12Z",
    "author_association": "NONE",
    "body": "Thanks for including me on this request y-p.\n\nIMO, it seems like we should not try to prohibit objects as metadata based on their serialization capacity.  I only say this because how would one account for every possible object?  For example, Chaco plots from the Enthought Tool Suite don't serialize easily, but who would know that unless they tried.  I think that it's best to let users put anything as metadata, and if it can't serialize, then they'll know when an error is thrown.  It is also possible to have the program serialize everything but the metadata, and then just alert the user that this aspect has been lost.  \n\nDoes anyone here know the pandas source code well enough to understand how to implement something like this?  I really don't have a clue, but hope this isn't asking too much of the developers.\n\nAlso, I think this addition will be a nice way to appease people who are always looking to subclass a dataframe. \n\n   *up vote for adding attribute being called 'meta'\n   *up vote for putting it on Index classes as well as Series, DataFrame and Panel\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11308117",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11308117",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11308117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzA4MTE3",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T20:31:53Z",
    "updated_at": "2012-12-12T20:31:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Last time I checked, HDF5 has a limit on the size of the AttributeSet. I had to get around it by having my store object encapsulate a directory, with .h5 and pickled meta objects. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11309070",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11309070",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11309070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzA5MDcw",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T20:57:14Z",
    "updated_at": "2012-12-12T20:57:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that adding metadata to the DataFrame object requires that it serialize and work with all backends (pickle, hdf5, etc). Which probably means restricting the type of metadata that can be added. There are corner cases to pickling custom classes that would become pandas problems. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11309197",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11309197",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11309197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzA5MTk3",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T21:00:47Z",
    "updated_at": "2012-12-12T21:00:47Z",
    "author_association": "NONE",
    "body": "Hi guys.  I'm a bit curious about something.  This fix is currently addressing adding custom attributes to a dataframe.  The values of these attributes, they can be python functions no?  If so, this might be a workaround to adding custom instance methods to a dataframe.  I know some people way back when were interested in this possibility.  \n\nI think the way this could work is the dataframe should have a new method, call it... I dunno, add_custom_method().  This would take in a function, then add the function to the 'meta' attribute dictionary, with some sort of traceback to let the program know it is special. \n\nWhen the proposed new machinery assigns custom attributes to the new dataframe, it also may be neat to automatically promote such a function to an instance method.  If it could do that, then we would have a way to effectively subclass a DataFrame without actually doing so.\n\nThis is likely overkill for the first first go around, but maybe something to think about down the road.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11309461",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11309461",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11309461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzA5NDYx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T21:07:35Z",
    "updated_at": "2012-12-12T21:07:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dalejung do you have a link to the AttributeSet limit?\n@hugadams you can simply monkey-patch if you want custom instance methods\n\n```\nimport pandas\ndef my_func(self, **kwargs):\n    return self * 2\npandas.DataFrame.my_func = myfunc\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11309852",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11309852",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11309852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzA5ODUy",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T21:16:15Z",
    "updated_at": "2012-12-12T21:16:15Z",
    "author_association": "NONE",
    "body": "@jreback:  Thanks for pointing this out man.  I've heard of monkeypatching instance methods, but always thought it was more of a colloquialism for something more difficult.\n\nThanks for showing me this.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11309881",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11309881",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11309881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzA5ODgx",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T21:17:02Z",
    "updated_at": "2012-12-12T21:17:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback http://www.hdfgroup.org/HDF5/doc/UG/13_Attributes.html#SpecIssues maybe? It's been awhile and it could be that pytables hasn't implemented new HDF5 features. \n\nPersonally, I had a dataset with ~40k items of metadata. Nothing complicated, just large. It was much easier to just pickle that stuff separately and use HDF for the actual data. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11310130",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11310130",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11310130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzEwMTMw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T21:22:37Z",
    "updated_at": "2012-12-12T21:22:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dalejung thanks for the link....I am not sure of use-cases for meta data beyond simple structures anyhow....if you have regular data you can always store as separate structures or pickle or whatever....\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11310189",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11310189",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11310189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzEwMTg5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T21:23:59Z",
    "updated_at": "2012-12-12T21:23:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hugadams np....good luck\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11311008",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11311008",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11311008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzExMDA4",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T21:44:58Z",
    "updated_at": "2012-12-12T21:44:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback sure, but that's kind of the state now. You can use DataFrames as attributes of custom classes. You can keep track of your metadata separately. \n\nMy point is that there would be an expectation for the DataFrame metadata serialization to work. The HDF5 limit is worse because it's based on size and not type, which means it can work until it suddenly does not. \n\nThere are always going to be use-cases we don't think of. Adding a metadata attribute that sometimes saves will be asking for trouble. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11311206",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11311206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11311206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzExMjA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T21:49:43Z",
    "updated_at": "2012-12-12T21:49:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dalejung ok...once this PR GH #2497 is merged in you can try this out in a limited way (limited because data frames don't 'yet' pass this around). could catch errors if you try to store too much (not much to do in this case EXCEPT fail)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11327586",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11327586",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11327586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzI3NTg2",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-13T09:17:52Z",
    "updated_at": "2012-12-13T09:17:52Z",
    "author_association": "NONE",
    "body": "Looks like the for and against of the thorny serialization issue are clear.\n\nHere is another thorny issue - what's the semantics of propegating meta through operations?\n\n``` python\ndf1.meta.observation_date = \"1/1/1981\"\ndf1.meta.origin = \"tower1\"\ndf2.meta.observation_date = \"1/1/1982\"\ndf2.meta.origin = \"tower2\"\n\ndf3=pd.concat(df1,df2)\n# or merge, addition, ix, apply, etc'\n```\n\nNow, what's the \"correct\" meta for df3?\n- besides load/save, users usually perform operations on dataframes. If most operations (combination,\n  mutation, slicing...) invalidate all the meta tags (i.e makes them wrong or drops them  completely), what's the \n  remaining use case of metadata?\n- If we start defining an algebra for combining meta, this is perhaps getting too complicated \n  to be attractive.\n\nI'd be interested to hear specific examples of the problems you hope this will solve for you,\nwhat are the kinds of meta tags you wish you had for your work?\n\n`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11329741",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11329741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11329741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzI5NzQx",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-13T10:34:37Z",
    "updated_at": "2012-12-13T10:34:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@y-p I agree that propagation logic gets wonky. From experience, whether to propagate meta1/meta2/nothing is specific to the situation and doesn't follow any rule. \n\nMaybe the need for metadata would be fulfilled by easier composition tools? For example, I tend to delegate attribute calls to the child dataframe and also connect the repr/str. There are certain conveniences that pandas provides that you lose with a simple composition. \n\nThinking about it, an api like the numpy **array** might be useful to allow composition classes to substitute for DataFrames. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11346106",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11346106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11346106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzQ2MTA2",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-13T18:20:06Z",
    "updated_at": "2012-12-13T18:20:06Z",
    "author_association": "NONE",
    "body": "Hi y-p.  You bring up very good points in regard to merging.  My thoughts would be that merged quantities that share keys should store results in a tuple, instead of overwriting; however, this is still a unfavorable situation.\n\nYou know, once the monkey patching was made clear to me by jreback, I realized that I could most likely get all the functionality I was looking for in custom attributes.  Perhaps what would be more helpful at this point, rather than custom attributes, would be a small tutorial on the main page about how to monkey patch and customize pandas DataStructures.  \n\nIn my personal situation, I no longer feel that custom metadata would really make or break my projects if monkey patching is adequate; however, you guys seem to have a better overview of pandas, so I think that it really is your judgement call if the new pros of metadata would outweigh the cons.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11363573",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11363573",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11363573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzYzNTcz",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-14T03:01:10Z",
    "updated_at": "2012-12-14T03:01:10Z",
    "author_association": "NONE",
    "body": "Thanks for all the ideas, here is my summary:\n1. It might be useful to attach metadata to serialized files as opposed to live objects.\n2. people want to extend _functionality_ in a natural way, rather then adding meta **data**,\n   even if it makes no sense to have it as part of upstream.\n   monkey-patching is a useful  idiom for that . I use it myself in my IPython startup file.\n   (#2530)\n3. Allowing arbitrary metadata to be added to live objects makes little sense when mutation \n   is inevitabely involved. well-defined metadata tags are bound to be either domain-specific,\n   or suitable to be \"baked in\" when general enough.\n4. There might be an existing need for a \"scientific data container\" file format, probably to be \n   designed by a commitee over several years, producing a 250 page standard with a name like \n   IKF-B76/J-2017, not adopted by anyone outside the US DOD energy research lab community. \n   pandas is not it though.\n\nDropping the milestone for now but will leave open if someone has more to add.\nif you need (1), please open an issue and explain your use-case.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11504256",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11504256",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11504256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTA0MjU2",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-18T20:44:51Z",
    "updated_at": "2012-12-18T20:45:54Z",
    "author_association": "NONE",
    "body": "Hey y-p.  Thanks for leaving this open.  It turns out that monkey patching has not solved my problem as I originally thought it would.\n\nYes, monkey patching does allow one to add custom instance methods and attributes to a dataframe; however, any function that results in a new dataframe will not retain the values of these custom attributes.\n\nFrom an email currently on the mailing list:\n\n```\nimport pandas\n\npandas.DataFrame.test=None\n\ndf=pandas.DataFrame(name='Bill')\ndf.name\n>>> 'Bill'\n\ndf2=df.mul(50)\ndf2.name\n>>>\n```\n\nI've put together a custom dataframe for spectroscopy that I'm very excited about putting at the center of a new spectroscopy package; however, realized that every operation that returns a new dataframe resets all of my custom attributes.  The instance methods and slots for the attributes are retained, so this is better than nothing, but still is going to hamper my program.\n\nThe only workaround I can find is to add some sort of attribute transfer function to every single dataframe method that I want to work with my custom dataframe.  Thus, the whole point of making my object a custom dataframe is lost.\n\nWith this in mind, I think monkey patching is not adequate unless there's a workaround that I'm not aware of.  Will see if anyone replies on the mailing list.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11514467",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11514467",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11514467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTE0NDY3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T02:00:26Z",
    "updated_at": "2012-12-19T02:00:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hugadams you are probably much better off to create a class to hold both the frame and the meta and then forward methods as needed to handle manipulations...something like\n\n```\nclass MyObject(object):\n\n   def __init__(self, df, meta):\n         self.df = df\n         self.meta = meta\n\n   @property\n    def ix(self):\n          return self.df.ix\n```\n\ndepending on what exactly you need to do, the following will work\n\n```\no = MyObject(df, meta)\no.ix[:,'foo'] = 'bar'\no.name = 'myobj'\n```\n\nand then you can custom serialization, object creation, etc\nyou coulud event allow **getattr** to automatically forward methods to df/meta as needed\n\nonly gets tricky when you do mutations \n\n```\no.df = o.df * 5\n```\n\nyou can even handle this by defining `__mul__` in MyObject\n\nyou prob have a limited set of operations that you really want to support, power users can just\nreach in and grab o.df if they need to...\n\nhth\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11541633",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11541633",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11541633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQxNjMz",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T18:27:17Z",
    "updated_at": "2012-12-19T18:28:47Z",
    "author_association": "NONE",
    "body": "@jreback \n\nThanks for the input.  I will certainly keep this in mind if the metadata idea of this thread never reaches fruition, as it seems to be the best way forward.  Do you know offhand how I can implement direct slicing eg:\n\no['col1'] instead of o.df['col1']\n\nI wasn't sure how to transfer that functionality to my custom object without a direct call to the underlying dataframe.\n\nThanks for pointing out the **mul** redefintion.  This will help me going forward.\n\nThis really does feel like a roundabout solution to the Dataframe's inability to be subclassed.   Especially if my custom object were to evolve with pandas, this would require maintenance to keep it synced up with changes to the Dataframe API.\n\nWhat if we do this-  Using jreback's example, we create a generic class with the specific intention of being subclassed for custom use?  We can include the most common Dataframe methods and update all the operators accordingly.  Then, hopeless fools like me who come along with the intent to customize have a really strong starting point.\n\nI think that pandas' full potential has yet to be recognized by the research community, and anticipate it will diffuse into many more scientific fields.  As such, if we could present them with a generic class for customizing dataframes, then researchers may be more inclined to build packages around pandas, rather than coming up with their own ad-hoc datastructures.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11543873",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11543873",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11543873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQzODcz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T19:19:51Z",
    "updated_at": "2012-12-19T19:19:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are only a handful of methods you prob need to worry about, you can always access df anyhow\ne.g. arithmetic, getitem,setitem,ix, maybe boolean\n\ndepends on what you want the user to be able to do with your object\npython is all about least suprise. an object should **do** what you expect; in this case you are\nhaving your object quack like a DataFrame with extra attributes, or are you really do more complex stuff like redefiing the way operators work?\n\nfor example you could redefine `*` to mean `call my cool multiplier function`, and in some fields this makes sense (e.g. frequency domain analysis you want `*` to mean convolution)\n\ncan you provide an example of what you are trying to do?\n\n```\n# to provide: o['col1'] access\n\ndef __getitem__(self, key):\n\n     # you could intercept calls to metadata here for example\n      if key in meta:\n           return meta[key]\n\n     return self.df.__getitem__(self, key)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11545119",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11545119",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11545119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ1MTE5",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T19:46:43Z",
    "updated_at": "2012-12-19T19:51:12Z",
    "author_association": "NONE",
    "body": "All I'm doing is creating a dataframe for spectral data.  As such, it has a special index type that I've written called \"SpecIndex\" and several methods for transforming itself to various representations of data.  It also has special methods for extending how temporal data is managed.  In any case, these operations are well-contained in my monkey patched version, and also would be easily implemented in a new class formalism as you've shown.\n\nAfter this, it really should just quack.  Besides these spectroscopic functions and attributes, it should behave like a dataframe.  Therefore, the most common operations on the dataframe, I would prefer to be seemless and promote to instance methods.  I want to encourage users to learn pandas and use this tool for **exploratory** spectroscopy.  As such, I'm trying to intercept any inconsistencies ahead of time like the one you pointed out about o.df=o.df \\* 5.  Will I have to change the behavior of all the basic operators (eg \\* / + -) or just *?  Any caveat like this, I'd like to correct in advance.  In the end, I want the class layer itself to be as invisible as possible.\n\nDo any more of these gotchas that come to mind?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11547275",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11547275",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11547275,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ3Mjc1",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T20:37:03Z",
    "updated_at": "2012-12-19T20:37:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's best to think of Pandas objects like you do integers. If you had a hypothetical Person object, its height would just be a number. The number would have no idea it was a height or what unit it was in. It's just there for numerical operations. `height / height_avg` doesn't care about the person's sex, weight, or race. \n\nI think when the DataFrame is the primary data object this seems weird. But imagine that the Person object had a weight_history attribute. It wouldn't make sense to subclass a DataFrame to hold that attribute. Especially if other Pandas objects existed in Person data. \n\nsubclassing/metadata will always run into issues when doing exploratory analysis. Does SubDataFrame.tail() return a SubDataFrame? If it does, will it keep the same attributes? Do we want to make copy of the **dict** for all ops like +/-*?\n\nAfter a certain point it becomes obvious that you're not working with a Person or SpectralSeries. You're working on an int or a DataFrame. In the same way that `convert_height(Person person)` isn't more convenient than `convert_height(int height)`, getting your users into the mindset that a DataFrame is just a data type will be simpler in the long run. Especially if your class gets more complicated and needs to hold more than one Pandas object. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11547284",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11547284",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11547284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ3Mjg0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T20:37:19Z",
    "updated_at": "2012-12-19T20:37:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hugadams I would suggest looking at the various tests in pandas/tests/test_frame.py, and creating your own test suite. You can start by using your 'DataFrame' like object and see what breaks (obviously most things will break at the beginning). Then skip tests and/or fix things as you go.\n\nYou will probably want to change most of the arithmetic operations (e.g. \\* / + - ), e.g. anything you want a user to be able to do.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11547626",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11547626",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11547626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ3NjI2",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T20:45:53Z",
    "updated_at": "2012-12-19T20:45:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hugadams If you want to see an old funky attempt at subclassing a df: http://nbviewer.ipython.org/4238540/\n\nIt quasi works because pretty much every DataFrame magic method calls another method, this gets intercepted in getattribute and redirected to the SubDF.df. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11548429",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2485#issuecomment-11548429",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2485",
    "id": 11548429,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ4NDI5",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T21:03:45Z",
    "updated_at": "2012-12-19T21:03:45Z",
    "author_association": "NONE",
    "body": "Thanks for all the help guys.  I think agree that maybe subclassing will get me into trouble, and thanks for sharing the example.\n\nI will attempt jreback's implementation, but may I first ask one final thing?\n\nThe only reason I want special behavior/subclassing is that I want my custom attributes to persist after operations on the dataframe.  Looking at this subclass example, it leads me to believe that if it may not be so difficult to change the correct methods such that these few new fixed attributes are transferred to any new dataframe created from an instance method or general operation.  I mean, dataframes already preserve their attribute values upon mutation.  How hard would it be to simply add my handful of new attributes into this machinery?  This seems like it might be less work than building an entirely new class just to store attributes.  (Instance methods can be monkey patched afterall).\n\n@dalejung, in the simplest case, if all I wanted to do was add a \"name\" attribute to dataframe, such that its value will persist after doing:\n\n   df=df*5\n\nor\n\n   df=df.apply( somfunc )\n\nWould this be an easy hack to the source you provided?\n"
  }
]
