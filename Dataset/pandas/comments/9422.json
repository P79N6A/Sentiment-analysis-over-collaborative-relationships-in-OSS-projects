[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73156035",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-73156035",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 73156035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTU2MDM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-05T23:57:52Z",
    "updated_at": "2015-02-05T23:58:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess the `np.nan*` methods 'ignore' nans by default  and thus all-nans is really an empty array. But this seems wrong to me. You can _never_ get a `NaN` result back. \n\nHowever pandas wants to propogate `NaN` results, so this would break existing behavior (which looking at it seems slightly wrong).\n\n```\nIn [13]: s = Series([np.nan])                 \n\nIn [15]: s.sum(skipna=True)\nOut[15]: nan\n\nIn [16]: s.sum(skipna=False)\nOut[16]: nan\n```\n\nso I think that you are proposing that `[15]` should be 0.0 (this is the default, FYI).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73159582",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-73159582",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 73159582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTU5NTgy",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-06T00:30:14Z",
    "updated_at": "2015-02-06T00:30:14Z",
    "author_association": "MEMBER",
    "body": "Yes, we might want to change your line `[15]` to 0.0. There is certainly something to be said for staying in sync with numpy/bottleneck.\n\nI think `sum` and `prod` are the only functions that would need to change to match the numpy behavior (`nanprod` will be new in numpy 1.10: https://github.com/numpy/numpy/pull/5418). All the other NA-skipping aggregation functions (mean, std, var, median, etc) are undefined for empty arrays, so it still makes sense for them to return NaN in the all NaN case.\n\nThis change also has implications for windowed and grouped sum/prod. These might also need a corresponding change to match.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/126661336",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-126661336",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 126661336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjY2MTMzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-31T11:35:16Z",
    "updated_at": "2015-07-31T11:35:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeh an option passed to `core/nanops/_maybe_null_out` in `nansum/nanprod` would do the trick here.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/158405629",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-158405629",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 158405629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODQwNTYyOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-20T13:40:49Z",
    "updated_at": "2015-11-20T13:40:49Z",
    "author_association": "MEMBER",
    "body": "In any case, the current docstring is no longer fully correct in all cases:\n\n```\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\n```\n\nSo we should mention something there that the result of an entire NaN row/column depends on the installed version of bottleneck \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169500773",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169500773",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169500773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUwMDc3Mw==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-06T23:46:28Z",
    "updated_at": "2016-01-06T23:53:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "TBH I don't see the logic of why summing `NaN` should return anything but `NaN`, (maybe sum starts from zero and adds numbers on, and so an 'empty' array sums to zero?), but even if there's a reasonable set of cases where that's true, it's _much_ easier to get that behavior if the result is `NaN` (i.e. `fillna(0)` on the result), rather than the current bottleneck behavior.\n\nIf we've decided on a policy, do you have a view of the easiest way to make the change?\n\nAlso @shoyer :\n\n> This matches a change from numpy 1.8 -> 1.9.\n\nI couldn't find this:\n\n``` python\nIn [2]: import numpy as np\n\nIn [3]: nan_array=np.asarray([np.nan]*5)\n\nIn [4]: nan_array.sum()\nOut[4]: nan\n```\n\nEven though an empty array does return 0.0. (Am I building my `nan_array` incorrectly?)\n\n``` python\nIn [15]: np.asarray([]).sum()\nOut[15]: 0.0\n```\n\n```\n\nIn [9]: pd.show_versions()\n\nINSTALLED VERSIONS\n------------------\ncommit: None\npython: 3.5.0.final.0\npython-bits: 64\nOS: Darwin\nOS-release: 15.0.0\nmachine: x86_64\nprocessor: i386\nbyteorder: little\nLC_ALL: None\nLANG: en_US.UTF-8\n\npandas: 0.17.1\nnose: 1.3.7\npip: 7.1.2\nsetuptools: 18.2\nCython: None\nnumpy: 1.10.1\nscipy: None\nstatsmodels: None\nIPython: 4.0.1\nsphinx: None\npatsy: None\ndateutil: 2.4.2\npytz: 2015.7\nblosc: None\nbottleneck: 1.0.0\ntables: None\nnumexpr: None\nmatplotlib: None\nopenpyxl: None\nxlrd: None\nxlwt: None\nxlsxwriter: None\nlxml: None\nbs4: None\nhtml5lib: None\nhttplib2: None\napiclient: None\nsqlalchemy: None\npymysql: None\npsycopg2: None\nJinja2: None\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169502253",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169502253",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169502253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUwMjI1Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-06T23:55:43Z",
    "updated_at": "2016-01-06T23:55:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "see the numpy issue referenced at the top for the rationale (from. numpy side)\n\nI think pandas should be different here from as I agree it makes a lot more sense (to propagate nan)\nwe have lots of options to skip and fillna\n\nbut others disagree\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169502459",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169502459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169502459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUwMjQ1OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-06T23:57:04Z",
    "updated_at": "2016-01-06T23:57:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "use nansum in your example with numpy (sum is unchanged)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169506572",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169506572",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169506572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUwNjU3Mg==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-07T00:20:24Z",
    "updated_at": "2016-01-07T00:20:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some numpy discussion is here: https://github.com/numpy/numpy/issues/1721\n\nShould we comparing pandas `sum` to numpy's `sum` or `nansum`? A quote from that issue:\n\n> This is the \"nansum\" function we are talking about, not the normal \"sum\" function, which of course returns nan if there is any nan value in the array.\n> nansum is designed to treat nan like 0, which is sometimes exactly what you need. This is not your case, but nobody forces you to use that function. We are not even discussing the general behavior of nansum, but a few corner cases of it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169508202",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169508202",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169508202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUwODIwMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-07T00:26:25Z",
    "updated_at": "2016-01-07T00:26:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "see the point is pandas `.sum(skipna=True)` is the default, so we basically use `nansum` like behavior for everthing. The issues is if you ONLY have `nans` then numpy says it should be 0, because `nansum` 'skips' nans.\n\nBut in pandas that is completely misleading and lossy, because nans by definition propogate (unless you specifically dont' propogate them). numpy simply does not handle nans well and I think that is the fundamental issue. \n\nthe classic case is this:\n\n```\nIn [2]: df = DataFrame({'A' : [np.nan, np.nan], 'B' : [np.nan, 1]})\n\nIn [3]: df.sum()\nOut[3]: \nA    0\nB    1\ndtype: float64\n\nIn [4]: pandas.core.nanops._USE_BOTTLENECK=False\n\nIn [5]: df.sum()\nOut[5]: \nA   NaN\nB     1\ndtype: float64\n```\n\nSince we are deferring computation to `bottleneck` (eg. I have 1.0 installed). [3] is completely wrong IMHO. and [5] is much much more useful and non-lossy. A user can always `.fillna` on [5], but info is lost on [3].\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169510331",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169510331",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169510331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUxMDMzMQ==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-07T00:41:00Z",
    "updated_at": "2016-01-07T00:41:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I couldn't agree more\n\nWhat's the easiest way to make the change?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169510503",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169510503",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169510503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUxMDUwMw==",
    "user": {
      "login": "wholmgren",
      "id": 4383303,
      "node_id": "MDQ6VXNlcjQzODMzMDM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4383303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wholmgren",
      "html_url": "https://github.com/wholmgren",
      "followers_url": "https://api.github.com/users/wholmgren/followers",
      "following_url": "https://api.github.com/users/wholmgren/following{/other_user}",
      "gists_url": "https://api.github.com/users/wholmgren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wholmgren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wholmgren/subscriptions",
      "organizations_url": "https://api.github.com/users/wholmgren/orgs",
      "repos_url": "https://api.github.com/users/wholmgren/repos",
      "events_url": "https://api.github.com/users/wholmgren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wholmgren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-07T00:42:11Z",
    "updated_at": "2016-01-07T00:42:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think pandas should be different here from as I agree it makes a lot more sense (to propagate nan)\n\n+1 (and reiterating my [comment](https://github.com/pydata/pandas/pull/10815#issuecomment-137324254) in #10815).\n\nI looked into how you could add something like an `all_nan='nan'` kwarg to pandas `.sum` but it seemed complicated to do it efficiently/reliably/elegantly. So, I took the easy way out of modifying my code in a few key spots using something like...\n\n``` python\nallnans = data.notnull().sum(axis=axis) == 0\nthesum = data.sum(axis=axis)\nthesum[allnans] = np.nan\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169511607",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169511607",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169511607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUxMTYwNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-07T00:50:38Z",
    "updated_at": "2016-01-07T00:51:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the easiest thing to do is simply to to modify:https://github.com/pydata/pandas/blob/master/pandas/core/nanops.py#L122\n\nright now we defer to bottleneck (if its installed) for `nansum` (they are all named this way), only for `float64/int64`, smaller numerics don't go. You can make all `nansum` (and actually all `nanprod`) go thru the alt pandas routines.\n\nAnd you'd have to back out some of the test fixing, search for `_incompat_bottleneck_version` (as bottleneck < 1.0 has the behavior like this, its only >= 1.0 that changes to match numpy).\n\nAnd of course a loud whatsnew note.\n\nI suppose we _could_ make this an `pd.options.numeric.all_nan_is_zero=False` (and switch based on this option). Though not really a fan of that.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/169513132",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-169513132",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 169513132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUxMzEzMg==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-07T01:01:11Z",
    "updated_at": "2016-01-07T01:01:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK great, let me see if I can do this efficiently\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/170644346",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-170644346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 170644346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDY0NDM0Ng==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-11T18:31:21Z",
    "updated_at": "2016-01-11T18:31:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer we'll do this in XRay too? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/170661931",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-170661931",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 170661931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDY2MTkzMQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-11T19:25:31Z",
    "updated_at": "2016-01-11T19:25:31Z",
    "author_association": "MEMBER",
    "body": "> @shoyer we'll do this in XRay too?\n\nYep, I suppose so. Though it's a real pain to get an alternate version of everything working rather than just using numpy/bottleneck/dask...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/170668695",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-170668695",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 170668695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDY2ODY5NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-11T19:48:03Z",
    "updated_at": "2016-01-11T19:48:03Z",
    "author_association": "MEMBER",
    "body": "As another data point, R also returns 0 for an all NA vector:\n\n```\n> sum(c(NA, NA, NA))\n[1] NA\n> sum(c(NA, NA, NA), na.rm = T)\n[1] 0\n```\n\nIt is stated in their docs of `sum`: _NB: the sum of an empty set is zero, by definition._\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/170668852",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-170668852",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 170668852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDY2ODg1Mg==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-11T19:48:39Z",
    "updated_at": "2016-01-11T19:48:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer I know. \nIs there another way? Is the `nan`-x definition just unclear? What do you do in numbagg?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/170671444",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-170671444",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 170671444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDY3MTQ0NA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-11T19:57:31Z",
    "updated_at": "2016-01-11T19:57:31Z",
    "author_association": "MEMBER",
    "body": "I just copied bottleneck in numbagg. But `nansum` is also [only a few lines](https://github.com/shoyer/numbagg/blob/0e5bf2c65fb3965ab373ab0d26d354ce65aad48e/numbagg/funcs.py#L36-L41) in numbagg, so it would be pretty easy to write both versions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/170714586",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-170714586",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 170714586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDcxNDU4Ng==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-11T22:40:59Z",
    "updated_at": "2016-01-11T22:40:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I find returning `0` quite sensible, because otherwise `0` would fail to be an additive identity and `1` a multiplicative identity.  \n\n`NaN` will have a clearer meaning (as a silent error) in these functions -- if the function has enough arguments to compute something, and if the arguments can give valid results, then it will spit out a number.  What the product of an empty array should be may be a bit more debatable, but by symmetry `1` seems suitable.\n\n`NaN` would not give you certainty that the whole column is `NaN`, so I don't think any information will be lost.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/178919146",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-178919146",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 178919146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3ODkxOTE0Ng==",
    "user": {
      "login": "brazilbean",
      "id": 73453,
      "node_id": "MDQ6VXNlcjczNDUz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/73453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brazilbean",
      "html_url": "https://github.com/brazilbean",
      "followers_url": "https://api.github.com/users/brazilbean/followers",
      "following_url": "https://api.github.com/users/brazilbean/following{/other_user}",
      "gists_url": "https://api.github.com/users/brazilbean/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brazilbean/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brazilbean/subscriptions",
      "organizations_url": "https://api.github.com/users/brazilbean/orgs",
      "repos_url": "https://api.github.com/users/brazilbean/repos",
      "events_url": "https://api.github.com/users/brazilbean/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brazilbean/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-03T00:43:45Z",
    "updated_at": "2016-02-03T00:43:45Z",
    "author_association": "NONE",
    "body": "I've been running into this issue a lot recently - here are my two (or twenty) cents:\n\nIn a system that can represent the concept of \"no data\" (NaN), what is an operation on \"no data\"? I would assert: \"no data\". **If I give an algorithm nothing to work with, it gives me nothing back.**\n\nWhen I can represent the concept of \"no data\", that concept is VERY different from \"data: no magnitude\" (i.e. zero). In such a context, confusing the two (NaN vs 0) is troublesome and problematic.\n\nIf I cannot represent the concept of \"no data\", then I have to default to whatever makes algorithmic sense. (e.g. vanilla Python)\n\nThe algorithmic treatment of \"no data\" that makes the most sense to me is that you only operate on the data you are given. \n\nSo:\n\nnansum([NaN, 1]) should be 1\nnansum([Nan, 0]) should be 0\n**nansum([]) should be NaN** (I sum no numbers, so my result is not a number)\nnansum([NaN, NaN]) should be NaN\n\nI believe that the scientific/statistic/numeric community got off on the wrong foot when we ported the logic and interpretation of the non-scientific Python method sum() to the scientific necessity nansum().\n\nPandas, this is your chance to get us back on track!\n\nAnd, for a practical argument, I have large arrays full of real data, with an occasional NaN in the mix. However, every once in a while, something catastrophic goes wrong upstream, and I get a vector of NaNs. \n\nIdeally, I just want to sum/mean/etc. on the data, ignoring the occasional missing (NaN) value. But if all the data are NaN, I want that \"complete missing-ness\" to propagate so the vector isn't mistaken for all zeros (a very different input).\n\nI could interweave nan-checks throughout my code, but it has the same code smell as null-checking. You can do it, but it isn't as elegant/concise/theoretically-pure.\n\nIn summary:\n**If I have no information to start with, I should return no information.** \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274472982",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-274472982",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 274472982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQ3Mjk4Mg==",
    "user": {
      "login": "maxencedb",
      "id": 5191708,
      "node_id": "MDQ6VXNlcjUxOTE3MDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5191708?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxencedb",
      "html_url": "https://github.com/maxencedb",
      "followers_url": "https://api.github.com/users/maxencedb/followers",
      "following_url": "https://api.github.com/users/maxencedb/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxencedb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxencedb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxencedb/subscriptions",
      "organizations_url": "https://api.github.com/users/maxencedb/orgs",
      "repos_url": "https://api.github.com/users/maxencedb/repos",
      "events_url": "https://api.github.com/users/maxencedb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxencedb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T12:10:47Z",
    "updated_at": "2017-01-23T12:10:47Z",
    "author_association": "NONE",
    "body": "Is there any update on this issue ? It's a little disconcerting to have the specified behaviour of Pandas sum() change when a dependency is added."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274488652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-274488652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 274488652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQ4ODY1Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T13:33:14Z",
    "updated_at": "2017-01-23T13:33:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@maxencedb well I agree, bottleneck & numpy changed their behavior a while back and pandas didn't, for good reason. I stated above that we should simply continue to use the pandas behavior (e.g.. sum ``NaN`` is nan), as this doesn't lose information, while numpy/bottleneck does.\r\n\r\ne.g. numpy 1.11.3\r\n```\r\nIn [2]: np.nansum([np.nan])\r\nOut[2]: 0.0\r\n\r\nIn [3]: np.nanmean([np.nan])\r\n/Users/jreback/miniconda3/envs/pandas/lib/python3.5/site-packages/numpy/lib/nanfunctions.py:703: RuntimeWarning: Mean of empty slice\r\n  warnings.warn(\"Mean of empty slice\", RuntimeWarning)\r\nOut[3]: nan\r\n```\r\n\r\nmaster\r\n```\r\nIn [5]: Series([np.nan]).sum()\r\nOut[5]: 0.0\r\n\r\nIn [6]: Series([np.nan]).mean()\r\nOut[6]: nan\r\n\r\nIn [7]: pandas.core.nanops._USE_BOTTLENECK = False\r\n\r\nIn [8]: Series([np.nan]).sum()\r\nOut[8]: nan\r\n\r\nIn [9]: Series([np.nan]).mean()\r\nOut[9]: nan\r\n```\r\n\r\nSo this is unfortunate, and I have actually run into this in the real-world.\r\n\r\nSo clearly this shouldn't depend on the dependencies. I also suspect that its going to be less disruptive to continue with the (correct) way of doing things by using the pandas method.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283502828",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-283502828",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 283502828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUwMjgyOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T23:14:45Z",
    "updated_at": "2017-03-01T23:14:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "so we need to do something about this, keeps coming up (xref #15542), and separately current bottleneck (1.2.0) uses in32 as an accumulator (rather than int64) so it can overflow (#15453).\r\n\r\nSo here are my thoughts.\r\n\r\nexamples\r\n\r\n```\r\nIn [1]: df = pd.DataFrame({'A' : [np.nan, np.nan], 'B':[np.nan, 0]})\r\n\r\nIn [2]: df\r\nOut[2]: \r\n    A    B\r\n0 NaN  NaN\r\n1 NaN  0.0\r\n\r\nIn [3]: s = Series([np.nan])\r\n\r\nIn [4]: s\r\nOut[4]: \r\n0   NaN\r\ndtype: float64\r\n\r\n```\r\n\r\n- when I originally added bottleneck to the mix (a long time ago), pandas, bottleneck, and numpy all did the same thing (numpy was < 1.8, see docs [here](https://docs.scipy.org/doc/numpy/reference/generated/numpy.nansum.html)\r\n- bottleneck >= 1.0 took on the numpy model\r\n- so pandas now has 2 behaviors, depending on if bottleneck is installed or not (we don't directly use numpy at all, rather ``core/nanops/nansum.py``).\r\n\r\nSo my 2c is that this is very problematic and leads to hard to find bugs. So I w/o reservation would keep the pandas behavior (impl is easy, we simply disable the dispatch to ``bottleneck`` for ``nansum``). And here's why\r\n\r\n- its consistent with ANY version of pandas when bottleneck is not installed\r\n- it does not depend (going forward) on whether bottleneck is installed\r\n- its consistent with the current documentation\r\n- the current community who uses pandas very likely has a much smaller installed base of (pandas + bottleneck), as compared to just pandas alone.\r\n- most importantly, you *dont' lose information*!  e.g.\r\n\r\n```\r\nIn [5]: from pandas.core import nanops\r\n\r\nIn [6]: nanops._USE_BOTTLENECK\r\nOut[6]: True\r\n\r\nIn [7]: s.sum()\r\nOut[7]: 0.0\r\n\r\nIn [8]: df.sum()\r\nOut[8]: \r\nA    0.0\r\nB    0.0\r\ndtype: float64\r\n\r\nIn [9]: nanops._USE_BOTTLENECK = False\r\n\r\nIn [11]: s.sum()\r\nOut[11]: nan\r\n\r\nIn [10]: df.sum()\r\nOut[10]: \r\nA    NaN\r\nB    0.0\r\ndtype: float64\r\n```\r\n\r\nIt is *obvious* that [8] is completely WRONG, while [10] is the RIGHT answer here. If a user wants, they can simply fill [10], but if you get [8] then you are SOL.\r\n\r\nSo IMHO w/o hesistation, we should simply disable bottleneck for ``nansum``. This also has the nice propery of affecting a fairly small percentage of users (e.g. (pandas + bottleneck) / just pandas. While there reverse change (e.g. go to numpy/bottleneck) would be a disaster and we would be forced to reverse it causing even more confusion.\r\n\r\nFrom a personal note, I have actually debugged and found this exact situation in multiple engagements. This is not a small issue at all and we should fix this for 0.20.0."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283502880",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-283502880",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 283502880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUwMjg4MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T23:15:01Z",
    "updated_at": "2017-03-01T23:20:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @shoyer @jorisvandenbossche @wesm @TomAugspurger @sinhrks @chris-b1 @cpcloud "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283503023",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-283503023",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 283503023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUwMzAyMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T23:15:42Z",
    "updated_at": "2017-03-01T23:15:42Z",
    "author_association": "MEMBER",
    "body": "We need to take a decision on this, as this has lingered long enough (as you can see on the amount of linked issues above :-))\r\n\r\nFor those not up to speed with what this is about, I tried to make a summary at the top https://github.com/pandas-dev/pandas/issues/9422#issue-56707245.\r\n\r\nThere have been several who have argued for returning NaN, others for returning 0 (and I didn't yet state that explicitly above, but I would also put myself in the 0-camp). \r\n\r\nHow do we go about this decision? \r\nSomebody who wants to try to summarize pro/cons or reasoning for both options?\r\n\r\ncc @wesm "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283503849",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-283503849",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 283503849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUwMzg0OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T23:19:13Z",
    "updated_at": "2017-03-01T23:19:13Z",
    "author_association": "MEMBER",
    "body": "@jreback ok, our posts just crossed each other :-)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283504136",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-283504136",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 283504136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUwNDEzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T23:20:37Z",
    "updated_at": "2017-03-01T23:20:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche yep :->"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283507401",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-283507401",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 283507401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUwNzQwMQ==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T23:36:12Z",
    "updated_at": "2017-03-01T23:36:12Z",
    "author_association": "MEMBER",
    "body": "I believe the answer is `NaN` because there are no valid observations. Any reduction over an indeterminate  number of values should be NaN. \r\n\r\nIf you truly want 0 when NaN -- in a groupby setting you can fillna with 0 after the groupby, or in a scalar setting you can do\r\n\r\n```\r\nx = s.sum()\r\nif pd.isnull(x):\r\n    x = 0\r\n```\r\n\r\nThe 0 solution drops information (i.e. you have to ask \"what kind of 0 is that?\"), the NaN solution does not -- with `skipna=True`, the only way to get NaN is to have no valid values"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283508904",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-283508904",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 283508904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUwODkwNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T23:43:24Z",
    "updated_at": "2017-03-01T23:43:24Z",
    "author_association": "MEMBER",
    "body": "I don't think there is anything \"completely wrong\" about the behaviour of returning 0. I certainly understand the reasoning of wanting NaN as a result, but there is just as much a reasoning that explains 0 as a result.\r\n\r\nSo some arguments for returning 0:\r\n\r\n- This is consistent with the idea of \"skipping NaNs\" that pandas does by default -> if you skip all NaNs, you actually have an empty Series, and the sum of an empty Series is 0:\r\n\r\n    ```\r\n    In [1]: pd.Series([]).sum()\r\n    Out[1]: 0\r\n    ``` \r\n\r\n  And note that this behaviour of empty series is always 0, not depending on whether bottleneck is installed or not.\r\n\r\n- This is consistent with numpy and bottleneck (disregarding older versions). In numpy, both the sum of a empty array (``np.sum([])``) as nansum of all-nan array (`np.nansum([np.nan])`) return 0.  \r\n  I know they have a different 'domain' (scientific array computing vs more statistical dataframe computing) and therefore end up with different choices in some occasions (there are other examples in pandas of making a different choice as numpy), but still, consistency with the rest of the python ecosystem is nice.\r\n\r\n- This would be consistent with R and matlab, both returning 0 (and probably some other languages as well)\r\n\r\n- Regarding which choice will impact most users: bottleneck is installed by default in Anaconda, so all people using a plain Anaconda, will already have the 0 behaviour. Not saying that this is the majority of users, but I am also not sure it is the 'much smaller user base' / 'small percentage of users' \r\n  (but OK, the other way around would of course also affect a lot of people. I just think this is not a strong argument)\r\n\r\nRegarding  the argument of \"it does not depend (going forward) on whether bottleneck is installed\". This can also be the case of returning 0, if want (we can also disable dispatch to bottleneck for nansum when we changed our nansum)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283510366",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9422#issuecomment-283510366",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9422",
    "id": 283510366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUxMDM2Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T23:50:44Z",
    "updated_at": "2017-03-01T23:51:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "anaconda just recently added ``bottleneck`` by default FYI (I think 4.1, release july 2016)."
  }
]
