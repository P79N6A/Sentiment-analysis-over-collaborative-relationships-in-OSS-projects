[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193358730",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193358730",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193358730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzM1ODczMA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T17:26:19Z",
    "updated_at": "2016-03-07T17:26:19Z",
    "author_association": "MEMBER",
    "body": "I think the fundamental problem here is that JSON has no native way to represent complex values. I suppose we could encode complex values in some way here (e.g., by converting to strings or dictionaries with keys real/imaginary), but I'm not sure how useful that would be.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193358745",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193358745",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193358745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzM1ODc0NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T17:26:24Z",
    "updated_at": "2016-03-07T17:26:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is not tested, and AFAIK not in the JSON standard. What would JSON output look like for this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193454643",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193454643",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193454643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ1NDY0Mw==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T21:18:01Z",
    "updated_at": "2016-03-07T21:26:13Z",
    "author_association": "NONE",
    "body": "Given that json is, after all, _javascript_ object notation, one choice might be to implicitly rely on a javascript library that handles complex numbers. Three candidates are [math.js](http://mathjs.org/),  [numbers.js](https://github.com/numbers/numbers.js) and [numericjs](https://github.com/sloisel/numeric/). \n\nmath.js and numbers.js are Apache licensed. numericjs is MIT licensed.\n\nnumbers.js depends on node.js. I did not find lists of dependencies for math.js. I did find a statement that numericjs has no dependencies.\n\nmath.js names complex values as Complex objects, but with a lowercase math.complex as a factory ([documentation](https://github.com/josdejong/mathjs/blob/master/docs/datatypes/complex_numbers.md)):\n\n```\nvar a = math.complex(2, 3);     // Complex 2 + 3i\na.re;                           // Number 2\na.im;                           // Number 3\n\nvar b = math.complex('4 - 2i'); // Complex 4 - 2i\nb.re = 5;                       // Number 5\nb;                              // Complex 5 - 2i\n```\n\nnumbers.js names complex values as Complex objects ([test file](https://github.com/numbers/numbers.js/blob/master/test/complex.test.js)):\n\n```\n    var A = new Complex(3, 4);\n```\n\nThe documentation is sparse. \n\nnumericjs names complex values as x,y coordinates ([documentation](https://github.com/sloisel/numeric/blob/master/src/documentation.html)):\n\n```\nIN> z = new numeric.T(3,4);\nOUT> {x: 3, y: 4}\n```\n\nOn cursory examination of the repos, math.js seems the most mature.\n\nSo my proposal would be to actually expect the output:\n'{\"a\":{\"0\":math.complex(3, -1)}}'\n\nOnce math.js has been imported, then that json becomes interpretable in javascript, but that's a side concern for pandas.\n\nIt also seems relatively clear for human consumption, and relatively easy to implement in python deserialization. The major downside I see is that any naive interpreter (e.g. a json validator) will fail.\n\nGiven that there is a downside, perhaps this could be implemented as an option to to_json, with a default of turning these values into strings, perhaps with a warning? E.g. \n\n```\n'{\"a\":{\"0\":\"math.complex(3, -1)\"}}'\nWarning: Serializing numeric complex value as a string. Consider using the complex=True option.\n```\n\nor \n\n```\n'{\"a\":{\"0\":\"3-1j\"}}'\n```\n\nThe first of those would be easier to DTRT and robustly re-serialize as a complex value anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193455776",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193455776",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193455776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ1NTc3Ng==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T21:19:32Z",
    "updated_at": "2016-03-07T21:19:32Z",
    "author_association": "NONE",
    "body": "(grumble... why does github put \"Close and comment\" next to \"Comment\", instead of e.g. putting \"Preview\" there, and putting \"Close and Comment\" on the other side or whatever?) Sorry.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193457762",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193457762",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193457762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ1Nzc2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T21:24:43Z",
    "updated_at": "2016-03-07T21:24:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gregory-marton I think you are confusing the `JSON` spec and `javascript`. These are not the same thing. JSON is a platform independent way of representing things. See the spec [here](https://en.wikipedia.org/wiki/JSON). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193457903",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193457903",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193457903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ1NzkwMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T21:25:11Z",
    "updated_at": "2016-03-07T21:25:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "see #12213 for some related commentary.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193459435",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193459435",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193459435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ1OTQzNQ==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T21:27:44Z",
    "updated_at": "2016-03-07T21:27:44Z",
    "author_association": "NONE",
    "body": "@jreback not confusing; intentionally confounding as a way of getting to a readable and sensible standard proposal.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193461328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193461328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193461328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ2MTMyOA==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T21:30:08Z",
    "updated_at": "2016-03-07T21:30:16Z",
    "author_association": "NONE",
    "body": "In particular, especially in the case of stringifying the value, notating it as \"math.complex(3, -1)\" makes the intent very clear, and confusion with something else (e.g. a version string) unlikely. I look to javascript on a historical basis, and because using an existing library's notation might aid buy-in.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193485578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193485578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193485578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ4NTU3OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T22:31:05Z",
    "updated_at": "2016-03-07T22:31:05Z",
    "author_association": "MEMBER",
    "body": "@gregory-marton Even in JavaScript, it's [a bad idea](http://stackoverflow.com/questions/1843343/json-parse-vs-eval) to use `eval` rather than `JSON.parse`. No matter how we handle complex values, `DataFrame.to_json` needs to always generate valid JSON (or error).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193486286",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193486286",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193486286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ4NjI4Ng==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T22:33:12Z",
    "updated_at": "2016-03-07T22:33:26Z",
    "author_association": "MEMBER",
    "body": "@gregory-marton  Now that I read your reply more carefully, I see that you do propose using strings. That seems fine to me. I would definitely prefer `\"3 - 1j\"` to `math.complex(3, -1)` because the former can be more easily parsed in different languages (e.g., in Python).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193486459",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193486459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193486459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ4NjQ1OQ==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T22:33:47Z",
    "updated_at": "2016-03-07T22:33:47Z",
    "author_association": "NONE",
    "body": "@shoyer fair enough. Non-string proposal withdrawn.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193487951",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193487951",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193487951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ4Nzk1MQ==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T22:39:03Z",
    "updated_at": "2016-03-07T22:39:03Z",
    "author_association": "NONE",
    "body": "@shoyer the downside I see with using just '3-1j' or '3 - 1j' is that those are not crazy strings to have in other contexts. Consider a product code or version string. That gets worse when you allow '3.2-1.j' etc. It would be safer to automatically make the decision to parse \"math.complex(3, -1)\" as a complex value in python than it would be to parse \"3-1j\" that way.\n\nAs for requiring spaces, I know that python is the language of significant whitespace, but that's not a sort of whitespace that I would imagine standing out to a casual reader as required.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193489080",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193489080",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193489080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ4OTA4MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T22:41:47Z",
    "updated_at": "2016-03-07T22:41:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gregory-marton well that's the issue with JSON its type-less and you have to infer things. You can have a look at how / if there are already any standards for how to represent complex numbers (e.g. for example in dates there are 2 competing ones, an integer epoch and as an ISO string).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193490333",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193490333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193490333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ5MDMzMw==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T22:45:59Z",
    "updated_at": "2016-03-07T22:45:59Z",
    "author_association": "NONE",
    "body": "@jreback Good point! I should have looked. [math.js's complex numbers documentation](http://mathjs.org/docs/datatypes/complex_numbers.html) has a json section. They encode complex values as\n\n```\n{mathjs: 'Complex', re: number, im: number}\n```\n\nThat certainly seems like an option, as dictionaries are not allowed in DataFrames (right?)\n\nSo then the desired output would be\n\n```\n'{\"a\":{\"0\":{\"mathjs\":\"Complex\",\"re\":3,\"im\":-1}}}'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193492441",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193492441",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193492441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ5MjQ0MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T22:53:49Z",
    "updated_at": "2016-03-07T22:54:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nIn [6]: df = pandas.DataFrame({'a': [complex(3, -1)]})\n\nIn [11]: df['a'] = df['a'].apply(lambda x: {'mathjs' : 'Complex', 're' : x.real, 'im' : x.imag})\n\nIn [12]: df.to_json()\nOut[12]: '{\"a\":{\"0\":{\"mathjs\":\"Complex\",\"im\":-1.0,\"re\":3.0}}}'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193493657",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193493657",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193493657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ5MzY1Nw==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T22:58:27Z",
    "updated_at": "2016-03-07T22:58:40Z",
    "author_association": "NONE",
    "body": "@jreback well, there goes that idea, then. Other suggestions? \n\nOr is that a special case pandas would be willing to live with?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193501837",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193501837",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193501837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzUwMTgzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T23:23:36Z",
    "updated_at": "2016-03-07T23:23:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "well _you_ can certainly do this. \n\nI think the default should be to stringify (like we do for everything else that cannot be handled). The issue here is that `.to_json()` knows its a numpy array, but doesn't know what to do with it. e.g. its sensible to:\n\n```\nIn [13]: str(complex(3, -1))\nOut[13]: '(3-1j)'\n```\n\nfor each element.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193915832",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193915832",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193915832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkxNTgzMg==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T18:59:53Z",
    "updated_at": "2016-03-08T19:03:40Z",
    "author_association": "NONE",
    "body": "So for json.dumps, I can provide a cls=... to specify how I want stuff converted if there is no default. That's analogous to the default_handler option to `.to_json`\n\nSo I'm trying to write an encoder that will dtrt without my having to apply the above transformation separately. So my first guess is:\n\n```\nimport json\nclass MyEncoder(json.JSONEncoder):\n  # disable method-hidden because https://github.com/PyCQA/pylint/issues/414\n  def default(self, obj): # pylint: disable=method-hidden\n    try:\n      if hasattr(obj, 'to_json'):\n        if 'default_handler' in obj.to_json.__code__.co_varnames:\n          return obj.to_json(default_handler=MyEncoder)\n        else:\n          return obj.to_json()\n      if hasattr(obj, 'toJSON'):\n        return obj.toJSON()\n      if hasattr(obj,'to_dict'):\n        return obj.to_dict()\n      if isinstance(obj, complex):\n        return {'mathjs' : 'Complex', 're' : x.real, 'im' : x.imag}\n        # See discussion at https://github.com/pydata/pandas/issues/12554\n      return json.JSONEncoder.default(self, obj)\n    except Exception as e:\n      return repr(e)\n\nfrom pandas import DataFrame\ndf = DataFrame({'a': [1, 2.3, complex(4, -5)],\n                'b': [float('nan'), None, 'N/A']})\n\nassert ('{\"a\":{\"0\":1.0,\"1\":2.3,\"2\":{\"mathjs\":\"Complex\",\"re\":4,\"im\":-5}},'\n        '\"b\":{\"0\":null,\"1\":null,\"2\":\"N\\/A\"}}') == df.to_json(default_handler=MyEncoder)\n```\n\nBut I still get \n\n```\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-17-5adab7ea3faf> in <module>()\n      1 assert ('{\"a\":{\"0\":1.0,\"1\":2.3,\"2\":{\"mathjs\":\"Complex\",\"re\":4,\"im\":-5}},'\n----> 2         '\"b\":{\"0\":null,\"1\":null,\"2\":\"N\\/A\"}}') == df.to_json(default_handler=MyEncoder)\n\n.../lib/python2.7/site-packages/pandas/core/generic.pyc in to_json(self, path_or_buf, orient, date_format, double_precision, force_ascii, date_unit, default_handler)\n    892             force_ascii=force_ascii,\n    893             date_unit=date_unit,\n--> 894             default_handler=default_handler)\n    895 \n    896     def to_hdf(self, path_or_buf, key, **kwargs):\n\n.../lib/python2.7/site-packages/pandas/io/json.pyc in to_json(path_or_buf, obj, orient, date_format, double_precision, force_ascii, date_unit, default_handler)\n     33             obj, orient=orient, date_format=date_format,\n     34             double_precision=double_precision, ensure_ascii=force_ascii,\n---> 35             date_unit=date_unit, default_handler=default_handler).write()\n     36     else:\n     37         raise NotImplementedError(\"'obj' should be a Series or a DataFrame\")\n\n.../lib/python2.7/site-packages/pandas/io/json.pyc in write(self)\n     76             date_unit=self.date_unit,\n     77             iso_dates=self.date_format == 'iso',\n---> 78             default_handler=self.default_handler)\n     79 \n     80 \n\nRuntimeError: Unhandled numpy dtype 15\n```\n\nThoughts on next steps? I understand applying the function manually is a workaround. But it would be nice if default_handler could apply when a numpy dtype happens to be unhandled.\n\nBut also, I'm somewhat new to this, and may not have gotten my guess right.\nThanks in advance!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193920454",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193920454",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193920454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkyMDQ1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T19:08:30Z",
    "updated_at": "2016-03-08T19:08:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is a bit tricky. The problem is that since this is a numpy dtype it goes down a certain path (in the c-code), then can't figure out what to do and raises an error (and the default-handler is not called). So that's a bug, that when fixed will allow the default_handler to succeed. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193921068",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193921068",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193921068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkyMTA2OA==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T19:10:18Z",
    "updated_at": "2016-03-08T19:10:18Z",
    "author_association": "NONE",
    "body": "Should I file that bug separately, or will this one serve?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193921636",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193921636",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193921636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkyMTYzNg==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T19:11:50Z",
    "updated_at": "2016-03-08T19:11:50Z",
    "author_association": "NONE",
    "body": "Perhaps I should file that with [numpy](https://github.com/numpy/numpy/issues), rather than pandas?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193929162",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193929162",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193929162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkyOTE2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T19:21:48Z",
    "updated_at": "2016-03-08T19:21:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "has nothing to do with numpy, code is [here](https://github.com/pydata/pandas/blob/master/pandas/src/ujson/python/objToJSON.c)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193930564",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193930564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193930564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkzMDU2NA==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T19:24:03Z",
    "updated_at": "2016-03-08T19:25:04Z",
    "author_association": "NONE",
    "body": "Perhaps it should omit raising the RuntimeError, just return JT_INVALID, and it should be [write](https://github.com/pydata/pandas/blob/master/pandas/io/json.py#L71)'s responsibility to check the return code and invoke the default_handler if available, which should raise its own error, or if there is no default_handler, to raise a RuntimeError then? I think I could write that patch.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193932289",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193932289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193932289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkzMjI4OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T19:27:58Z",
    "updated_at": "2016-03-08T19:28:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep exactly. rather it should return a code that allows it to fall out of that loop, then treat it like an iterable (not 100% sure if that would work, but give it a try). Once the iterable has it it should call the defaultHandler\n\nI misread a bit of what you pointed to. This should ALL be in the c-code. That's where everything is handled.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/193989021",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-193989021",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 193989021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mzk4OTAyMQ==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T22:11:33Z",
    "updated_at": "2016-03-08T22:12:37Z",
    "author_association": "NONE",
    "body": "Thank you for misunderstanding me well.\n\nJust removing the RuntimeError creates interesting json:\n\n```\n'\"{\\\\\"a\\\\\":{\\\\\"0\\\\\":,\\\\\"1\\\\\":,\\\\\"2\\\\\":},\\\\\"b\\\\\":{\\\\\"0\\\\\":null,\\\\\"1\\\\\":null,\\\\\"2\\\\\":\\\\\"N\\\\\\\\/A\\\\\"}}\"'\n```\n\nThat's a json string representing a python string that contains a stringified dictionary, with the first column replaced by something very strange.\n\nBut of course one needs to do more. This is as far as I got today: \n\n```\n--- a/pandas/io/tests/test_json/test_pandas.py\n+++ b/pandas/io/tests/test_json/test_pandas.py\n@@ -815,11 +815,38 @@ DataFrame\\\\.index values are different \\\\(100\\\\.0 %\\\\)\n\n     def test_default_handler(self):\n         value = object()\n-        frame = DataFrame({'a': ['a', value]})\n-        expected = frame.applymap(str)\n+        frame = DataFrame({'a': [7, value]})\n+        expected = DataFrame({'a': [7, str(value)]})\n         result = pd.read_json(frame.to_json(default_handler=str))\n         assert_frame_equal(expected, result, check_index_type=False)\n\n+    def test_default_handler_with_json_dumps(self):\n+        import json\n+        class PlausibleHandler(json.JSONEncoder):\n+            # disable method-hidden because\n+            # https://github.com/PyCQA/pylint/issues/414\n+            def default(self, obj): # pylint: disable=method-hidden\n+                try:\n+                    if hasattr(obj, 'to_json'):\n+                        optargs = obj.to_json.__code__.co_varnames\n+                        if 'default_handler' in optargs:\n+                            return obj.to_json(default_handler=PlausibleHandler)\n+                        else:\n+                            return obj.to_json()\n+                    if isinstance(obj, complex):\n+                        return {'mathjs' : 'Complex',\n+                                're' : x.real, 'im' : x.imag}\n+                        # https://github.com/pydata/pandas/issues/12554\n+                    return json.JSONEncoder.default(self, obj)\n+                except Exception as e:\n+                    return repr(e)\n+        df_list = [ 9, DataFrame({'a': [1, 2.3, complex(4, -5)],\n+                                  'b': [float('nan'), None, 'N/A']})]\n+        expected = ('[9,{\"a\":{\"0\":1.0,\"1\":2.3,'\n+                    '\"2\":{\"mathjs\":\"Complex\",\"re\":4,\"im\":-5}},'\n+                    '\"b\":{\"0\":null,\"1\":null,\"2\":\"N\\/A\"}}]')\n+        self.assertEqual(expected, json.dumps(df_list, cls=PlausibleHandler))\n+\n     def test_default_handler_raises(self):\n         def my_handler_raises(obj):\n             raise TypeError(\"raisin\")\ndiff --git a/pandas/src/ujson/python/objToJSON.c b/pandas/src/ujson/python/objToJSON.c\nindex dcb509b..cbabb11 100644\n--- a/pandas/src/ujson/python/objToJSON.c\n+++ b/pandas/src/ujson/python/objToJSON.c\n@@ -544,12 +544,8 @@ static int NpyTypeToJSONType(PyObject* obj, JSONTypeContext* tc, int npyType, vo\n     return *((npy_bool *) value) == NPY_TRUE ? JT_TRUE : JT_FALSE;\n   }\n\n-  PRINTMARK();\n-  PyErr_Format (\n-      PyExc_RuntimeError,\n-      \"Unhandled numpy dtype %d\",\n-      npyType);\n-  return JT_INVALID;\n+  PRINTMARK();  // GREMIO\n+  return JT_OBJECT;\n }\n\n\n@@ -1834,11 +1830,15 @@ void Object_beginTypeContext (JSOBJ _obj, JSONTypeContext *tc)\n\n   if (enc->npyType >= 0)\n   {\n-    PRINTMARK();\n-    tc->prv = &(enc->basicTypeContext);\n-    tc->type = NpyTypeToJSONType(obj, tc, enc->npyType, enc->npyValue);\n-    enc->npyType = -1;\n-    return;\n+    int jt_type = NpyTypeToJSONType(obj, tc, enc->npyType, enc->npyValue);\n+    if (jt_type != JT_INVALID) // GREMIO\n+    {\n+      PRINTMARK();\n+      tc->prv = &(enc->basicTypeContext);\n+      tc->type = jt_type;\n+      enc->npyType = -1;\n+      return;\n+    }\n   }\n\n   if (PyBool_Check(obj))\n```\n\nI verified that the test fails the way it should without changes.\n\nWith the shown set of changes, it gives me a segfault, which I would have started debugging, but [el capitan is stupid](http://stackoverflow.com/questions/33162757/how-to-install-gdb-debugger-in-mac-osx-el-capitan). Tomorrow I'll try on a different machine where debugging isn't quite such a pita. In the meantime, I'd love some early feedback.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/195128614",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-195128614",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 195128614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTEyODYxNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T01:16:18Z",
    "updated_at": "2016-03-11T01:16:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @Komnomnomnom\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/195185737",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-195185737",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 195185737,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTE4NTczNw==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T04:57:00Z",
    "updated_at": "2016-03-11T04:57:42Z",
    "author_association": "NONE",
    "body": "So where I got with this today is that I have the default handler getting called for each element of the bad-dtype column. Unfortunately it's getting called with the whole DataFrame, instead of with the individual cell value. Even then, I'd like the dispatch only to go to the defaultHandler if the type is not one of the ones I can handle internally, so that remains to be done too. If one of you knows how I can get the individual value as a PyObject instead of getting the whole df, that'd be a great hint.\n\n[patch.txt](https://github.com/pydata/pandas/files/168472/patch.txt)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/195490706",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-195490706",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 195490706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTQ5MDcwNg==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T18:33:18Z",
    "updated_at": "2016-03-11T18:33:18Z",
    "author_association": "NONE",
    "body": "I feel like what I want is:\n\n```\nPyObject *PyArray_GETITEM(PyArrayObject* arr, void* itemptr)\nGet a Python object from the ndarray, arr, at the location pointed to by itemptr. Return NULL on failure.\n```\n\nbut I'm not sure where to get my hands on the relevant PyArrayObject instead of the whole dataframe.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/196372139",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-196372139",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 196372139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NjM3MjEzOQ==",
    "user": {
      "login": "gregory-marton",
      "id": 5065456,
      "node_id": "MDQ6VXNlcjUwNjU0NTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5065456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregory-marton",
      "html_url": "https://github.com/gregory-marton",
      "followers_url": "https://api.github.com/users/gregory-marton/followers",
      "following_url": "https://api.github.com/users/gregory-marton/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregory-marton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregory-marton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregory-marton/subscriptions",
      "organizations_url": "https://api.github.com/users/gregory-marton/orgs",
      "repos_url": "https://api.github.com/users/gregory-marton/repos",
      "events_url": "https://api.github.com/users/gregory-marton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregory-marton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-14T15:38:45Z",
    "updated_at": "2016-03-14T16:34:57Z",
    "author_association": "NONE",
    "body": "I left in a huff last time after having the following conversation with gdb:\n\n```\n(gdb) p enc->outputFormat\n$19 = 4 \n(gdb) n\n2282          pc->iterNext = PdBlock_iterNext;\n(gdb) p enc->outputFormat\n$20 = 4 \n(gdb) n\n2283          pc->iterGetName = PdBlock_iterGetName;\n(gdb) p enc->outputFormat\n$21 = 1207959552\n(gdb) p pc\n$24 = (TypeContext *) 0x7ffffffe99a0\n(gdb) p &enc\n$25 = (PyObjectEncoder **) 0x7ffffffe99b0\n(gdb) p &(pc->iterNext)\n$28 = (JSPFN_ITERNEXT *) 0x7ffffffe99b0\n```\n\nI have otherwise made no significant further progress. I'm going to stop working on this for awhile. If someone wants to jump in with some explanation of the right way to approach the desired behavior, I might take another shot, but stuff like the above is just ... discouraging.\n\nOut of curiosity, how current and how strong are the use cases that drive the decision to write this in C? In what client contexts are serialization and deserialization the most performance-sensitive tasks, more important than flexibility (and perhaps correctness, if the above is an indication)? Is there a considered design behind the structure of the C code (long functions, use of goto, non-use of [boost](http://www.boost.org/doc/libs/1_60_0/libs/python/doc/html/tutorial/tutorial/object.html)), and if so, where can I read about it?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/196480138",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12554#issuecomment-196480138",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12554",
    "id": 196480138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NjQ4MDEzOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-14T19:11:42Z",
    "updated_at": "2016-03-14T19:11:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gregory-marton that's why I cc @Komnomnomnom . He is the original author. The style is typical for a c-style when its pretty low level like this. This is how numpy does lots of things, the gotos are almost all for error handling. Further you can't use much newer type things (e.g. boost). These things I believe all compile under c99.\n\nAs far as perf. This is of course why its written in c. In fact this is a pretty big bottleneck in general for JSON. \n\nAs far as correctness, this is simply an unsupported feature (as are a couple of other things). The `default_handler` is supposed to work for this and that's the bug.\n"
  }
]
