[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357783409",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19254#issuecomment-357783409",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19254",
    "id": 357783409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzc4MzQwOQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T20:34:48Z",
    "updated_at": "2018-01-15T20:34:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "xref #19165 (master tracker)\r\n\r\nA PR would be welcome!  As you note the key thing would be implementing a single-pass group mode function in cython, can look at others for examples. \r\n\r\nhttps://github.com/pandas-dev/pandas/blob/aa9e002463d104b6dc37cdb32b2726bafcb5aa36/pandas/_libs/groupby_helper.pxi.in#L213"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357812690",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19254#issuecomment-357812690",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19254",
    "id": 357812690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzgxMjY5MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T23:35:15Z",
    "updated_at": "2018-01-15T23:35:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "how is this different that ``.value_counts()`` ?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357872656",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19254#issuecomment-357872656",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19254",
    "id": 357872656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzg3MjY1Ng==",
    "user": {
      "login": "j-musial",
      "id": 25081610,
      "node_id": "MDQ6VXNlcjI1MDgxNjEw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25081610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/j-musial",
      "html_url": "https://github.com/j-musial",
      "followers_url": "https://api.github.com/users/j-musial/followers",
      "following_url": "https://api.github.com/users/j-musial/following{/other_user}",
      "gists_url": "https://api.github.com/users/j-musial/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/j-musial/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/j-musial/subscriptions",
      "organizations_url": "https://api.github.com/users/j-musial/orgs",
      "repos_url": "https://api.github.com/users/j-musial/repos",
      "events_url": "https://api.github.com/users/j-musial/events{/privacy}",
      "received_events_url": "https://api.github.com/users/j-musial/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T07:14:15Z",
    "updated_at": "2018-01-16T07:14:15Z",
    "author_association": "NONE",
    "body": "Hi Jeff,\n\nAs you can see below .value_counts() does not apply to groupby object.\nFurthermore, returning sorted values and counts within thousands/millions\nof groups gives huge overheads, whereas all you want is the most frequent\nvalue.\n\nBest,\n\nJan\n\n\n>>>\npd.DataFrame({'a':['a','a','a','a','b','b','b','b'],'b':[1,1,2,3,1,2,2,3]}).groupby('a').value_counts()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/dist-packages/pandas/core/groupby.py\", line 529,\nin __getattr__\n    (type(self).__name__, attr))\nAttributeError: 'DataFrameGroupBy' object has no attribute 'value_counts'\n>>> pd.__version__\n'0.19.2'\n\nOn Tue, Jan 16, 2018 at 12:35 AM, Jeff Reback <notifications@github.com>\nwrote:\n\n> how is this different that .value_counts() ?\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/19254#issuecomment-357812690>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AX63CvX5BIOlK47m-61a26oBEGAvrJTOks5tK-DBgaJpZM4Re3QD>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357929039",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19254#issuecomment-357929039",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19254",
    "id": 357929039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzkyOTAzOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T11:13:49Z",
    "updated_at": "2018-01-16T11:13:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "``.value_counts()`` is a series method. I guess mode would simply give back the max per group.\r\n\r\n```\r\nIn [32]: pd.options.display.max_rows=12\r\n\r\nIn [33]: ngroups = 100; N = 100000; np.random.seed(1234)\r\n\r\nIn [34]: df = pd.DataFrame({'key': np.random.randint(0, ngroups, size=N), 'value': np.random.randint(0, 10000, size=N)})\r\n\r\nIn [35]: df.groupby('key').value.value_counts()\r\nOut[35]: \r\nkey  value\r\n0    5799     3\r\n     7358     3\r\n     8860     3\r\n     185      2\r\n     583      2\r\n     872      2\r\n             ..\r\n99   9904     1\r\n     9916     1\r\n     9922     1\r\n     9932     1\r\n     9935     1\r\n     9936     1\r\nName: value, Length: 95112, dtype: int64\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358040965",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19254#issuecomment-358040965",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19254",
    "id": 358040965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODA0MDk2NQ==",
    "user": {
      "login": "j-musial",
      "id": 25081610,
      "node_id": "MDQ6VXNlcjI1MDgxNjEw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25081610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/j-musial",
      "html_url": "https://github.com/j-musial",
      "followers_url": "https://api.github.com/users/j-musial/followers",
      "following_url": "https://api.github.com/users/j-musial/following{/other_user}",
      "gists_url": "https://api.github.com/users/j-musial/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/j-musial/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/j-musial/subscriptions",
      "organizations_url": "https://api.github.com/users/j-musial/orgs",
      "repos_url": "https://api.github.com/users/j-musial/repos",
      "events_url": "https://api.github.com/users/j-musial/events{/privacy}",
      "received_events_url": "https://api.github.com/users/j-musial/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T17:33:17Z",
    "updated_at": "2018-01-16T17:33:17Z",
    "author_association": "NONE",
    "body": "Thanks Jeff!\n\nUnlike .value_counts() the .mode() would act like a reduction function\nreturning just one value. Returning entire histogram just to get the most\nfrequent value is huge waste of computing resources.\n\nBest,\n\nJan\n\nOn Tue, Jan 16, 2018 at 12:14 PM, Jeff Reback <notifications@github.com>\nwrote:\n\n> .value_counts() is a series method. I guess mode would simply give back\n> the max per group.\n>\n> In [32]: pd.options.display.max_rows=12\n>\n> In [33]: ngroups = 100; N = 100000; np.random.seed(1234)\n>\n> In [34]: df = pd.DataFrame({'key': np.random.randint(0, ngroups, size=N), 'value': np.random.randint(0, 10000, size=N)})\n>\n> In [35]: df.groupby('key').value.value_counts()\n> Out[35]:\n> key  value\n> 0    5799     3\n>      7358     3\n>      8860     3\n>      185      2\n>      583      2\n>      872      2\n>              ..\n> 99   9904     1\n>      9916     1\n>      9922     1\n>      9932     1\n>      9935     1\n>      9936     1\n> Name: value, Length: 95112, dtype: int64\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/19254#issuecomment-357929039>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AX63CnSbVx2jD-KDExPJYtY0eLmF_Qp6ks5tLIR7gaJpZM4Re3QD>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362852169",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19254#issuecomment-362852169",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19254",
    "id": 362852169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjg1MjE2OQ==",
    "user": {
      "login": "jaradc",
      "id": 12854767,
      "node_id": "MDQ6VXNlcjEyODU0NzY3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12854767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaradc",
      "html_url": "https://github.com/jaradc",
      "followers_url": "https://api.github.com/users/jaradc/followers",
      "following_url": "https://api.github.com/users/jaradc/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaradc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaradc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaradc/subscriptions",
      "organizations_url": "https://api.github.com/users/jaradc/orgs",
      "repos_url": "https://api.github.com/users/jaradc/repos",
      "events_url": "https://api.github.com/users/jaradc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaradc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T20:35:33Z",
    "updated_at": "2018-02-03T20:35:33Z",
    "author_association": "NONE",
    "body": "What would `.mode()` do in the case of text data?\r\n\r\nEx data:\r\n```\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nnan = np.nan\r\ndf = pd.DataFrame({'D1': ['mobile', nan, 'mobile', 'mobile', 'mobile', 'desktop', 'desktop',\r\n                          'desktop', 'desktop', 'desktop', 'desktop', 'mobile', 'mobile', nan],\r\n                   'D2': [nan, 'm.site.com', 'www.site.com', 'm.site.com', 'm.site.com',\r\n                          'www.site.com', nan, 'www.site.com', 'www.site.com', 'm.site.com',\r\n                          'm.site.com', 'm.site.com', nan, 'www.site.com'],\r\n                   'D3': ['New Visitor', 'New Visitor', 'New Visitor', 'New Visitor', nan,\r\n                          'New Visitor', 'New Visitor', 'New Visitor', 'New Visitor', nan,\r\n                          'Returning Visitor', 'New Visitor', 'New Visitor', 'New Visitor'],\r\n                   'D4': [nan, 2, 2, 1, 1, 6, 4, 2, 8, 8, nan, 5, 6, 7],\r\n                   'ID1': [0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4],\r\n                   'ID2': ['1513947210589.498foauq', '1514422572948.4vyo6zj',\r\n                           '1514422572948.4vyo6zj', '1514422572948.4vyo6zj',\r\n                           '1514425695272.dzsx0r5', '1514222583279.vn2j3ath',\r\n                           '1514222583279.vn2j3ath', '1514222583279.vn2j3ath',\r\n                           '1514383627556.zc6t10sll2', '1514383700797.eqetpiviq',\r\n                           '1514383700797.eqetpiviq', '1514841713220.wjrcnsml',\r\n                           '1514841713220.wjrcnsml', '1514841713220.wjrcnsml']},\r\n                  columns=['ID1', 'ID2', 'D1', 'D2', 'D3', 'D4'])\r\n```\r\n\r\nLooks like:\r\n\r\n```\r\n    ID1                       ID2       D1            D2                 D3   D4\r\n0     0    1513947210589.498foauq   mobile           NaN        New Visitor  NaN\r\n1     1     1514422572948.4vyo6zj      NaN    m.site.com        New Visitor  2.0\r\n2     1     1514422572948.4vyo6zj   mobile  www.site.com        New Visitor  2.0\r\n3     1     1514422572948.4vyo6zj   mobile    m.site.com        New Visitor  1.0\r\n4     1     1514425695272.dzsx0r5   mobile    m.site.com                NaN  1.0\r\n5     2    1514222583279.vn2j3ath  desktop  www.site.com        New Visitor  6.0\r\n6     2    1514222583279.vn2j3ath  desktop           NaN        New Visitor  4.0\r\n7     2    1514222583279.vn2j3ath  desktop  www.site.com        New Visitor  2.0\r\n8     3  1514383627556.zc6t10sll2  desktop  www.site.com        New Visitor  8.0\r\n9     3   1514383700797.eqetpiviq  desktop    m.site.com                NaN  8.0\r\n10    3   1514383700797.eqetpiviq  desktop    m.site.com  Returning Visitor  NaN\r\n11    4    1514841713220.wjrcnsml   mobile    m.site.com        New Visitor  5.0\r\n12    4    1514841713220.wjrcnsml   mobile           NaN        New Visitor  6.0\r\n13    4    1514841713220.wjrcnsml      NaN  www.site.com        New Visitor  7.0\r\n```\r\n\r\nCalling mode on the groupby object directly:\r\n```\r\n>>> df.groupby(['ID1', 'ID2']).mode()\r\n\t\t\t      \r\nTraceback (most recent call last):\r\n  File \"<pyshell#41>\", line 1, in <module>\r\n    df.groupby(['ID1', 'ID2']).mode()\r\n  File \"C:\\python36\\lib\\site-packages\\pandas\\core\\groupby.py\", line 673, in __getattr__\r\n    return self._make_wrapper(attr)\r\n  File \"C:\\python36\\lib\\site-packages\\pandas\\core\\groupby.py\", line 687, in _make_wrapper\r\n    raise AttributeError(msg)\r\nAttributeError: Cannot access callable attribute 'mode' of 'DataFrameGroupBy' objects, try using the 'apply' method\r\n```\r\nCalling mode on a specific column in the groupby:\r\n```\r\n>>> df.groupby(['ID1', 'ID2'], as_index=False)['D1'].mode()\r\n\t\t       \r\nTraceback (most recent call last):\r\n  File \"<pyshell#56>\", line 1, in <module>\r\n    df.groupby(['ID1', 'ID2'], as_index=False)['D1'].mode()\r\n  File \"C:\\python36\\lib\\site-packages\\pandas\\core\\groupby.py\", line 673, in __getattr__\r\n    return self._make_wrapper(attr)\r\n  File \"C:\\python36\\lib\\site-packages\\pandas\\core\\groupby.py\", line 687, in _make_wrapper\r\n    raise AttributeError(msg)\r\nAttributeError: Cannot access callable attribute 'mode' of 'DataFrameGroupBy' objects, try using the 'apply' method\r\n```\r\n\r\nYou can use `idxmax()` and `value_counts` but I agree with @j-musial that it's a computational waste just to get the most frequent.\r\n```\r\n>>> df.groupby(['ID1', 'ID2'], as_index=False)['D4'].apply(lambda x: x.value_counts(dropna=False).idxmax())\r\nID1  ID2                     \r\n0    1513947210589.498foauq      NaN\r\n1    1514422572948.4vyo6zj       2.0\r\n     1514425695272.dzsx0r5       1.0\r\n2    1514222583279.vn2j3ath      2.0\r\n3    1514383627556.zc6t10sll2    8.0\r\n     1514383700797.eqetpiviq     NaN\r\n4    1514841713220.wjrcnsml      7.0\r\ndtype: float64\r\n```\r\n\r\nThe `mode()` function creator might need to ask:\r\n\r\n1. numeric and text data or just numeric data?\r\n2. what to do in the case of a tie-breaker of modes?\r\n3. what to do when no mode exists (ex: nans)?\r\n\r\nI'll provide one example where I'd like to use this type of functionality:\r\n\r\nI'd like to fill nans with the most-common value (mode) in a groupby. Said a different way, I'd like to impute text data to fill with the most-frequent in a groupby. ([SO example here](https://stackoverflow.com/a/45741963/1577947) but this approach fails when index `[0]` does not exist).\r\n\r\nThis effectively does nothing:\r\n```\r\ndf.groupby(['ID1', 'ID2'], as_index=False).apply(lambda x: x.fillna(x.mode()))\r\n```\r\n\r\nIf I approach this with `ffill()` and `bfill()`, it's very slow because those in a groupby is not vectorized (is pure Python) is my understanding.\r\n\r\n`groupby.mode()` request turns out to not be a trivial request imo. Clear examples and use-cases would really help sketch out the idea I think."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/466584030",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19254#issuecomment-466584030",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19254",
    "id": 466584030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjU4NDAzMA==",
    "user": {
      "login": "bfarrer",
      "id": 47905408,
      "node_id": "MDQ6VXNlcjQ3OTA1NDA4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/47905408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfarrer",
      "html_url": "https://github.com/bfarrer",
      "followers_url": "https://api.github.com/users/bfarrer/followers",
      "following_url": "https://api.github.com/users/bfarrer/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfarrer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfarrer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfarrer/subscriptions",
      "organizations_url": "https://api.github.com/users/bfarrer/orgs",
      "repos_url": "https://api.github.com/users/bfarrer/repos",
      "events_url": "https://api.github.com/users/bfarrer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfarrer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-22T23:28:06Z",
    "updated_at": "2019-02-22T23:28:29Z",
    "author_association": "NONE",
    "body": "If I have a DataFrame that includes a column of cities and I want to know the most frequent city to occur on the list. I'm pretty new to python and pandas, so maybe there's an easy alternative, but I'm not aware of one."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473703149",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19254#issuecomment-473703149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19254",
    "id": 473703149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzcwMzE0OQ==",
    "user": {
      "login": "BrittonWinterrose",
      "id": 12835712,
      "node_id": "MDQ6VXNlcjEyODM1NzEy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12835712?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrittonWinterrose",
      "html_url": "https://github.com/BrittonWinterrose",
      "followers_url": "https://api.github.com/users/BrittonWinterrose/followers",
      "following_url": "https://api.github.com/users/BrittonWinterrose/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrittonWinterrose/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrittonWinterrose/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrittonWinterrose/subscriptions",
      "organizations_url": "https://api.github.com/users/BrittonWinterrose/orgs",
      "repos_url": "https://api.github.com/users/BrittonWinterrose/repos",
      "events_url": "https://api.github.com/users/BrittonWinterrose/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrittonWinterrose/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-17T18:56:07Z",
    "updated_at": "2019-03-17T18:56:07Z",
    "author_association": "NONE",
    "body": "I am interested in this feature as well. +1"
  }
]
