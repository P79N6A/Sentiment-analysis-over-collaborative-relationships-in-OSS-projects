[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59166719",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59166719",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59166719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTY2NzE5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T07:16:25Z",
    "updated_at": "2014-10-15T07:18:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "can u show a specific example (of what u think it should do)\nthis with 0,15rc1?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59166765",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59166765",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59166765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTY2NzY1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T07:16:56Z",
    "updated_at": "2014-10-15T07:17:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @JanSchulz\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59169792",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59169792",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59169792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTY5Nzky",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T07:53:26Z",
    "updated_at": "2014-10-15T07:53:26Z",
    "author_association": "NONE",
    "body": "``` python\ns = pd.Series(['a','b','a','c','d','c'])\ncount_str = s[s.isin(['a','u'])].value_counts()\ncount_cat = s.astype('category')[s.isin(['a','u'])].value_counts()\n```\n\n```\ncount_str\na    2\n```\n\n```\ncount_cat\na    2\nd    0\nc    0\nb    0\n```\n\n```\nassert count_str==count_cat\n...\nValueError: Series lengths must match to compare\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59170267",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59170267",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59170267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTcwMjY3",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T07:58:05Z",
    "updated_at": "2014-10-15T07:58:05Z",
    "author_association": "NONE",
    "body": ".. and yes version is 0.15.0rc1-24-g56dbb8c\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59184021",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59184021",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59184021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTg0MDIx",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T10:06:41Z",
    "updated_at": "2014-10-15T10:06:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the current behaviour is correct: A categorical is not a more memory efficient string dtype but a dtype with a fixed set of values. One of the main points for categoricals is that \"unused\" categories show up in all kind of operations, e.g. during groupby and during value counts. This will come in handy in ggplot, where plot axis should be the same for all facets and unused cats should show up with length zero bars. \n\nIf you want to have the same output, you need to do the \"isin\" with the results of `value_count()` (untested, I don't have a recent pandas env right now):\n\n```\ncount_str = s[s.isin(['a','u'])].value_counts()\ntemp = s.astype('category').value_counts()\ncount_cat = temp[temp.index.isin([\"a\",\"u\"])] # untested, I hope index has that method\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59184260",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59184260",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59184260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTg0MjYw",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T10:08:50Z",
    "updated_at": "2014-10-15T10:08:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "IMO, it's also consistent, as 'value_count' counts every value it knows about and in case of categoricals it knows that there are more than only the \"used\" categories.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59184517",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59184517",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59184517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTg0NTE3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T10:11:14Z",
    "updated_at": "2014-10-15T10:11:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "what about adding the dropna=False arg?\nsince the default is different would this be confusing?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59184778",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59184778",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59184778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTg0Nzc4",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T10:13:56Z",
    "updated_at": "2014-10-15T10:14:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "`dropzero=False` would be ok, but on the other hand you can do that afterwards as well in a similar manner:\n\n```\nret= ... \nif dropzero: \n    return ret[ret.count!=0] # probably needs a copy to get around the 'setting_with_copy`thingy...\nelse \n   return ret\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59184995",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59184995",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59184995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTg0OTk1",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-15T10:16:12Z",
    "updated_at": "2014-10-15T10:16:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer What is actually the use case here, i.e., why do you need a Categorical and zero-cats removed?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59390696",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59390696",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59390696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzkwNjk2",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-16T16:33:40Z",
    "updated_at": "2014-10-16T16:33:40Z",
    "author_association": "NONE",
    "body": "- Series example with isin was only a minimalistic example. Does not reflect my use cases.\n- Typical application is complex filtering on many df columns, then using value_counts as convenient tool to find out for which categories this filter holds true. Typical use case: interactive data cleansing/exploration with negative filter supposed to return only those - few - categories for which idiosyncrasies (in the other columns) are found. For instance:\n  - `df_quotes[outlier_filter].symbol.value_counts()`\n  - `df_shipment[outlier_filter].airport_dep.value_counts()`\n- This issue seems to be deeper and not restricted to value_counts, `Series.unique()` also returns all categories which I consider even more problematic. So `df_quotes[outlier_filter].symbol.unique()` is equivalent to `df_quotes.symbol.cat.categories`. Only `df_quotes[outlier_filter].symbol.astype(str).unique()` does what I'd expect but I hope I don't have to do that. Gotcha alert!\n- Regarding the plotting argument: I guess there are situations where one or the other (keep zero-cats or not) comes in handy (similar to dropna). And speaking of facet plotting, I'm having trouble with [seaborn.FacetGrid](http://web.stanford.edu/~mwaskom/software/seaborn/generated/seaborn.FacetGrid.html) right now due to keep-all-categoricals behaviour (many empty facet subplots), so I have to convert back to string before using FacetGrid. FacetGrid relies on Series.unique, see https://github.com/mwaskom/seaborn/blob/master/seaborn/axisgrid.py#L205. That's exactly what I meant regarding the inconsistency between explicit categoricals and implicit string categoricals as used so far. So this is really a matter of being backward-compatible in a way.\n- Conceptual argument: IMO categorical is a separation of internal and external representation. The external representation, the label, is only meta-data but not data and meta-data should not be present if the underlying data is - virtually - not existent. But admittedly there is no consensual view. R's `table` keeps zero frequencies for factor variables, Stata's `tabulate` doesn't for [encoded](http://www.stata.com/help.cgi?encode) variables.\n- Re \"_A categorical is not a more memory efficient string dtype_\": I'd say \"not _only_\", but for me memory efficiency is a very important and for now the most important reason to use categoricals. Thanks to that (and thanks to you!) I'm currently working with a dataset on my laptop which before I could only handle on a server.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59416072",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59416072",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59416072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDE2MDcy",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-16T19:25:12Z",
    "updated_at": "2014-10-16T19:31:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "**Re plotting**: having all values preserved in all facets (so not `cat x cat` facets but a cat variable as x axis in each facet -> zero values turn up as zero length bars) is actually the use case for ggplot where cats are wanted (in ggplot this relies on `value_counts()`). I'm not sure what to make of the 'cat as facet variable\" case. R's ggplot2 removes empty categories in that case:\n\n```\nlibrary(reshape2)\nlibrary(ggplot2)\nlevels(tips$sex) <- c(\"f\", \"m\", \"-\")\nsp <- ggplot(tips, aes(x=total_bill, y=tip/total_bill)) + geom_point(shape=1)\nsp + facet_grid(sex ~ .)\n```\n\nInterestingly unique returns a factor (with all levels, but only the \"used\" levels as values) when the input is a factor:\n\n```\n> unique(tips$sex)\n[1] f m\nLevels: f m -\n> unique(as.character(tips$sex))\n[1] \"f\" \"m\"\n```\n\nThis is IMO a argument to drop unused categories in `unique()`.\n\nAs a workaround for your seaborn problem, you can use `df.variable.cat.drop_unused_categories(inplace=True)` before faceting\n\n**Re value_count**: `value_count()` is equivalent to:\n\n```\n> table(tips$sex)\n  f   m   - \n 87 157   0 \n```\n\nI think a `dropzero=False` default argument can be done for `value_count()` but that essential means that this is either ported to all `value_count()` methods (where it makes not sense) or you have to test for categorical series (in which case you could also simple remove all zero counted values of the returned dataframe).\n\nOr you have a \"remove unused categories\" step in between...\n\nWhat will happen in your app when you reorder the categories (e.g., \"one\" < \"two\" < \"three\")?\n\n**Re metadata**: I see it that the levels are actually part of every item of the categorical data (which it is in R, but right now not in pandas: getting a single item will return a single item cat in R but a int/string/... in pandas):\n\n```\n> tips$sex[1]\n[1] f\nLevels: f m -\n```\n\nFrom your metadata comment and the last bullet I think what you want is a memory efficient string dtype. This could actually be done by subclassing categorical and \"hiding\" the categorical thingies and add categories during set automatically. Should actually be almost trivial... This was actually one argument to implement such a data type in numpy so that they have a proper variable length string dtype :-)\n\n=> I see the problem with `unique()` but not with `value_count()` and seeing categories as \"to be hidden\" meta data.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59422744",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59422744",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59422744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDIyNzQ0",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-16T20:12:53Z",
    "updated_at": "2014-10-16T21:20:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh my:\n\n```\n> library(reshape2)\n> library(dplyr)\n> levels(tips$sex) <- c(\"f\", \"m\", \"-\")\n> gb = group_by(tips, sex)\n> summarise(gb,count = n())\nSource: local data frame [2 x 2]\n\n  sex count\n1   f    87\n2   m   157\n```\n\n-> dplyr omits unused levels in group_by\n\nFollowing this would mean that pandas groupby should also not return empty (unused) categories...\n\n@hadley is that intentional?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59430030",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59430030",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59430030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDMwMDMw",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-16T21:02:26Z",
    "updated_at": "2014-10-16T21:02:26Z",
    "author_association": "MEMBER",
    "body": "For the `unique` case I also think we should only return the categories that occur in the series (or return a Categorical)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59432593",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59432593",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59432593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDMyNTkz",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-16T21:20:29Z",
    "updated_at": "2014-10-16T21:20:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I will prepare a PR for the unique case.\n\nWhat about the rest? removing empty groups from groupby will be deeper than the unique change...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59442278",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59442278",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59442278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDQyMjc4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-16T22:40:27Z",
    "updated_at": "2014-10-16T22:40:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JanSchulz IIRC we specifically made the groupby return ALL of the categorical groups (I like this and think this makes sense). Unique I suppose is a different issue, though (and I agree with the above).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59442608",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59442608",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59442608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDQyNjA4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-16T22:43:46Z",
    "updated_at": "2014-10-16T22:43:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "so I'd like to ask if we think their are actually 2 'categorical' types:\n\n1) a memory saving object representation, which is implemented by a `categorical` but in reality is `object` like (e.g. imagine make all string-like series actually use this as an implementation.\n2) a real `categorical` which for example would show all of the groups in a groupby (whereas an `object` dtypes would not).\n\nThese seem really close (and in fact we don't distinguish these), should we?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59470714",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59470714",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59470714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDcwNzE0",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T06:16:04Z",
    "updated_at": "2014-10-17T06:16:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "The biggest difference: how \"not in categories\" values are handled: e.g when using concat or setting new values.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59473497",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59473497",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59473497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDczNDk3",
    "user": {
      "login": "fkaufer",
      "id": 3984277,
      "node_id": "MDQ6VXNlcjM5ODQyNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3984277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkaufer",
      "html_url": "https://github.com/fkaufer",
      "followers_url": "https://api.github.com/users/fkaufer/followers",
      "following_url": "https://api.github.com/users/fkaufer/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkaufer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkaufer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkaufer/subscriptions",
      "organizations_url": "https://api.github.com/users/fkaufer/orgs",
      "repos_url": "https://api.github.com/users/fkaufer/repos",
      "events_url": "https://api.github.com/users/fkaufer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkaufer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T06:58:50Z",
    "updated_at": "2014-10-17T07:01:35Z",
    "author_association": "NONE",
    "body": "Just to clarify: I do not only (mis)use categoricals for memory efficiency of string variables. But this is - along the custom ordering - something I get right out of box now, where as for the other benefits (signalling for stats/ML, plotting) it will take some time until the respective libs directly support pandas categoricals.\n\nThat said, I don't think there should be two different categorical types. I guess the difference in our views on categoricals is rather a matter of the size (cardinality) of the categorical. To me it seems the current design is for categoricals of small cardinality, rather coming from boolean vars. In this cases I can understand your take on value_counts and plotting. I have these categorials as well but I have many categoricals of cardinality in the order of tens, hundreds and even thousands. To me that makes perfectly sense and I consider them \"real categoricals\" (IMO the main strong criterion to qualify as a \"real categorical\" is the fixed range of values). Plotting diagrams with these large-cardinalities categoricals typically means you have applied some filtering before which has virtually decreased the cardinality, hence plotting zero-length bars and showing zero frequencies is really not what you want. Probably I would even use dropna=False more often then dropzero=False. Personally, I would rather suggest to have a separate new method \"levels\", \"tabulate\" or \"cat_freq\" and keep existing methods (unique, value_counts, groupby, ...) consistent with other data types. Such a new method could then also be applied to all dtypes.\n\nSimilar to the meta-data perspective I also like to consider categoricals as separate dimension/lookup tables as in databases with the built-in feature of being auto-joined whenever I use the categorical for projection (i.e. SELECT in SQL) or certain selections (WHERE cat=scalar). For a database query you would then apply a left or inner/natural join (for real categories with fixed values left and inner join are the same), which is also the default behaviour of pandas' merge (default: inner) and join (default: left). The current behaviour of value_counts et al corresponds to a full/right outer join (analogous to left/inner: full and right outer join are equivalent for real categoricals) which feels similarly unnatural as if pandas' join/merge default would be set to full/right outer join.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59477617",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59477617",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59477617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDc3NjE3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T07:45:06Z",
    "updated_at": "2014-10-17T07:45:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer join behavior will have to think about but all for consistency\n\n@JanSchulz can u prepare a pr for reverting\nunique, value_counts, groupby to not return nan/0n categories by default \n\nI think this just means honoring the dropna in unique, value_counts\nwe can add an option (dropna) for groupby in the next version to optionally include all groups\npls create an issue for that\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59515379",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59515379",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59515379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTE1Mzc5",
    "user": {
      "login": "hadley",
      "id": 4196,
      "node_id": "MDQ6VXNlcjQxOTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hadley",
      "html_url": "https://github.com/hadley",
      "followers_url": "https://api.github.com/users/hadley/followers",
      "following_url": "https://api.github.com/users/hadley/following{/other_user}",
      "gists_url": "https://api.github.com/users/hadley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hadley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hadley/subscriptions",
      "organizations_url": "https://api.github.com/users/hadley/orgs",
      "repos_url": "https://api.github.com/users/hadley/repos",
      "events_url": "https://api.github.com/users/hadley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hadley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T13:51:08Z",
    "updated_at": "2014-10-17T13:51:08Z",
    "author_association": "NONE",
    "body": "@JanSchulz it's on the long term to do list.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59554191",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59554191",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59554191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTU0MTkx",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T18:21:47Z",
    "updated_at": "2014-10-17T18:21:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hadley Just that I understand it correctly: you plan to change group_by to include empty levels?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59554802",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59554802",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59554802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTU0ODAy",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T18:26:14Z",
    "updated_at": "2014-10-17T18:29:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkaufer \nyep, currently `Categorical` is optimized for usecases like lickert scales (~7 items) or names of states (10-200) and the behaviour should make sense in that context (like counting persons for each state -> zero persons in one state makes IMO sense). In the end it comes down to what is more useful and needs less user code: including empty categories or excluding them. E.g. how often would I need to add empty categories to the result of a groupby (probably a reindex with the original categories) or how often do I need to remove empty groups (`res = res[pd.isnull(res.whatever)]`) or how many extra lines do I need to come up with a apply function (if there is an error for empty dataframes) vs how many line to add empty groups afterwards. I'm no sure if anybody has an idea what cases there are.\n\n**Re your app**: If you use custom ordering and therefore special cases categorical data, then it wouldn't matter to use a `drop_unused_categories` afterward or filter nan/zero in any results of groupby based functions.\n\n**Re categorical and \"metadata\":** I don't see them as a \"join operation between codes and categories\", but as a new data type which only can take a few values (like you can't put a longer than max-int into a int array). As such each individual entry consists of \"value and metadata\" the same as an int is \"value and metadata\", only that in the int case the metadata is encoded in the length of the memory block which is used to store the int. They are \"just\" implemented like a database join...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59555151",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59555151",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59555151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTU1MTUx",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T18:28:53Z",
    "updated_at": "2014-10-19T12:13:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \nRemoving empty groups from groupby will need more than a few code changes, as most of the rest of the code also right now depends on that behaviour (e.g. value_count) and I'm not so sure whats needs changing in groupby.py to make that change, so I think this is post 0.15 work. I would also find it good to model our behaviour after the one in dplr, as I think that will be the \"expected\" behaviour for people coming from R.\n\n The unique case is IMO smaller, as it only takes a few lines in `unique()` and the tests. I can do that for 0.15 or 0.15.1\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/59612192",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-59612192",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 59612192,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjEyMTky",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-18T12:56:25Z",
    "updated_at": "2014-10-18T12:56:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "going to move this to 0.15.1\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64189570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-64189570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 64189570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTg5NTcw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T12:50:41Z",
    "updated_at": "2014-11-24T12:50:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JanSchulz \n\nok, so to summarise:\n-  `groupby/value_counts` WILL return all of the categories. I think is correct/intuitive. leave as is \n- (maybe implemente  a `dropna=False` argument to optionally not do this)\n- `unique` on the other hand, _should_ only return the 'used' categories\n\n@JanSchulz you are doing a PR for `unique` case?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64323338",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-64323338",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 64323338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzIzMzM4",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T08:10:48Z",
    "updated_at": "2014-11-25T08:10:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Unique should be easy, just do the unique on the codes and then `take` the results. Will do...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73707304",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-73707304",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 73707304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNzA3MzA0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-10T14:27:44Z",
    "updated_at": "2015-02-10T14:27:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JanSchulz can you revisit. See what we need from this issue.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383089665",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-383089665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 383089665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzA4OTY2NQ==",
    "user": {
      "login": "quantumds",
      "id": 19568551,
      "node_id": "MDQ6VXNlcjE5NTY4NTUx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/19568551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quantumds",
      "html_url": "https://github.com/quantumds",
      "followers_url": "https://api.github.com/users/quantumds/followers",
      "following_url": "https://api.github.com/users/quantumds/following{/other_user}",
      "gists_url": "https://api.github.com/users/quantumds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quantumds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quantumds/subscriptions",
      "organizations_url": "https://api.github.com/users/quantumds/orgs",
      "repos_url": "https://api.github.com/users/quantumds/repos",
      "events_url": "https://api.github.com/users/quantumds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quantumds/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-20T13:06:11Z",
    "updated_at": "2018-04-20T13:06:11Z",
    "author_association": "NONE",
    "body": "I believe that the output of value_counts when applied to categorical variables, shouldn't print values that are inexistent/not assigned for that variable in the current dataframe. This issue would benefit a lot Pandas users in data Analysis. Do we have an estimation of when this improvement will be included? Thanks!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403164848",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8559#issuecomment-403164848",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8559",
    "id": 403164848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzE2NDg0OA==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T22:49:02Z",
    "updated_at": "2018-07-06T22:49:02Z",
    "author_association": "MEMBER",
    "body": "In the absence of clear guidance about whether to change anything, I'm closing this as Won't Fix.\r\n\r\nNote: R maintains the empty categories when tabulating factor counts\r\n\r\n```\r\n> values <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)\r\n> values\r\n [1] 1 1 1 2 2 2 3 3 3 4 4 4\r\n> values <- factor(values)\r\n> values\r\n [1] 1 1 1 2 2 2 3 3 3 4 4 4\r\nLevels: 1 2 3 4\r\n> values == 2\r\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\r\n> (values == 2) | (values == 4)\r\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE\r\n> values[(values == 2) | (values == 4)]\r\n[1] 2 2 2 4 4 4\r\nLevels: 1 2 3 4\r\n> values2 <- values[(values == 2) | (values == 4)]\r\n> values2\r\n[1] 2 2 2 4 4 4\r\nLevels: 1 2 3 4\r\n> table(values2)\r\nvalues2\r\n1 2 3 4 \r\n0 3 0 3 \r\n```"
  }
]
