[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/387693105",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20954#issuecomment-387693105",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20954",
    "id": 387693105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzY5MzEwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-09T10:18:48Z",
    "updated_at": "2018-05-09T10:18:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "So it seems we are taking the name into account when aligning these for Series [45]. The DataFrame corr effectively ignores this, e.g. [46]\r\n```\r\nIn [45]: Series(s_c.values).corr(Series(s_b))\r\nOut[45]: nan\r\n\r\nIn [46]: Series(s_c.values).corr(Series(s_b.values))\r\nOut[46]: 0.0\r\n```\r\n\r\nSo I think its reasonable to align (e.g. you match index values), but ignore the name. Would take a PR for this, it might be slightly tricky as the magic is done in ``.align``"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388633350",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20954#issuecomment-388633350",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20954",
    "id": 388633350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODYzMzM1MA==",
    "user": {
      "login": "BobMcFry",
      "id": 5111809,
      "node_id": "MDQ6VXNlcjUxMTE4MDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5111809?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BobMcFry",
      "html_url": "https://github.com/BobMcFry",
      "followers_url": "https://api.github.com/users/BobMcFry/followers",
      "following_url": "https://api.github.com/users/BobMcFry/following{/other_user}",
      "gists_url": "https://api.github.com/users/BobMcFry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BobMcFry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BobMcFry/subscriptions",
      "organizations_url": "https://api.github.com/users/BobMcFry/orgs",
      "repos_url": "https://api.github.com/users/BobMcFry/repos",
      "events_url": "https://api.github.com/users/BobMcFry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BobMcFry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T15:01:02Z",
    "updated_at": "2018-05-13T15:01:02Z",
    "author_association": "NONE",
    "body": "I was looking into this, when I realized that I made a mistake reporting the bug. In `s_b` I forgot to eliminate the explicit index argument, resulting, of course, in strange behavior. This renders most part of this bug report pointless (sorry for that) because after removing the index argument, both methods in `Series` and `DataFrame` are producing the same results as stored in `corr_df`.\r\n\r\nA further remark: I was still confused why the results of the correlation were not consistent. Theoretically the result for `corr_df`should look something like:\r\n```\r\n>>> corr_df\r\n    a    b    c\r\na NaN  NaN  NaN\r\nb NaN  1.0  NaN\r\nc NaN  NaN  NaN\r\n```\r\nWhenever at least one vector of data has a standard deviation of zero, the resulting correlation should always show the same results. In the example above `s_a` and `s_c` have non-varying data which thus should result in 'NaN' values. Long story short, due to floating point problems the std dev of `s_c` is \r\n```\r\n>>> s_c.std() \r\n7.757919228897728e-18\r\n```\r\nwhich explains these inconsistencies. I guess this bug report can be closed unless this numerical problem needs to be discussed any further.\r\n\r\nI am sorry for the inconvenience."
  }
]
