[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408600797",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22096#issuecomment-408600797",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22096",
    "id": 408600797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODYwMDc5Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-28T11:27:38Z",
    "updated_at": "2018-07-28T11:27:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "A couple side-notes related to these tests\r\n\r\n1. It'd be good to add full docstrings for methods that subclasses are expected to override, like `_compare_other(self, s, data, op_name, other)`.\r\n2. It'd a bit hard to resuse code from `BaseOpsUtil` for the common case of implementing an op. This diff suggests a way to easily use the base class's check, while preserving the default behavior of assuming an array doesn't implement ops.\r\n```diff\r\ndiff --git a/pandas/tests/extension/base/ops.py b/pandas/tests/extension/base/ops.py\r\nindex f7bfdb8ec..6117cc81a 100644\r\n--- a/pandas/tests/extension/base/ops.py\r\n+++ b/pandas/tests/extension/base/ops.py\r\n@@ -20,12 +20,12 @@ class BaseOpsUtil(BaseExtensionTests):\r\n \r\n         return op\r\n \r\n-    def check_opname(self, s, op_name, other, exc=NotImplementedError):\r\n+    def check_opname(self, s, op_name, other, exc=Exception):\r\n         op = self.get_op_from_name(op_name)\r\n \r\n         self._check_op(s, op, other, exc)\r\n \r\n-    def _check_op(self, s, op, other, exc=NotImplementedError):\r\n+    def _check_op(self, s, op, other, exc=Exception):\r\n         if exc is None:\r\n             result = op(s, other)\r\n             expected = s.combine(other, op)\r\n@@ -34,7 +34,7 @@ class BaseOpsUtil(BaseExtensionTests):\r\n             with pytest.raises(exc):\r\n                 op(s, other)\r\n \r\n-    def _check_divmod_op(self, s, op, other, exc=NotImplementedError):\r\n+    def _check_divmod_op(self, s, op, other, exc=Exception):\r\n         # divmod has multiple return values, so check separatly\r\n         if exc is None:\r\n             result_div, result_mod = op(s, other)\r\n@@ -51,33 +51,38 @@ class BaseOpsUtil(BaseExtensionTests):\r\n \r\n class BaseArithmeticOpsTests(BaseOpsUtil):\r\n     \"\"\"Various Series and DataFrame arithmetic ops methods.\"\"\"\r\n+    series_scalar_exc = TypeError\r\n+    frame_scalar_exc = TypeError\r\n+    series_array_exc = TypeError\r\n+    divmod_exc = TypeError\r\n \r\n     def test_arith_series_with_scalar(self, data, all_arithmetic_operators):\r\n         # series & scalar\r\n         op_name = all_arithmetic_operators\r\n         s = pd.Series(data)\r\n-        self.check_opname(s, op_name, s.iloc[0], exc=TypeError)\r\n+        self.check_opname(s, op_name, s.iloc[0], exc=self.series_scalar_exc)\r\n \r\n     @pytest.mark.xfail(run=False, reason=\"_reduce needs implementation\")\r\n     def test_arith_frame_with_scalar(self, data, all_arithmetic_operators):\r\n         # frame & scalar\r\n         op_name = all_arithmetic_operators\r\n         df = pd.DataFrame({'A': data})\r\n-        self.check_opname(df, op_name, data[0], exc=TypeError)\r\n+        self.check_opname(df, op_name, data[0], exc=self.frame_scalar_exc)\r\n \r\n     def test_arith_series_with_array(self, data, all_arithmetic_operators):\r\n         # ndarray & other series\r\n         op_name = all_arithmetic_operators\r\n         s = pd.Series(data)\r\n-        self.check_opname(s, op_name, [s.iloc[0]] * len(s), exc=TypeError)\r\n+        self.check_opname(s, op_name, [s.iloc[0]] * len(s), exc=self.series_array_exc)\r\n \r\n     def test_divmod(self, data):\r\n         s = pd.Series(data)\r\n-        self._check_divmod_op(s, divmod, 1, exc=TypeError)\r\n-        self._check_divmod_op(1, ops.rdivmod, s, exc=TypeError)\r\n+        self._check_divmod_op(s, divmod, 1, exc=self.divmod_exc)\r\n+        self._check_divmod_op(1, ops.rdivmod, s, exc=self.divmod_exc)\r\n \r\n     def test_error(self, data, all_arithmetic_operators):\r\n         # invalid ops\r\n+        # What is this testing?\r\n         op_name = all_arithmetic_operators\r\n         with pytest.raises(AttributeError):\r\n             getattr(data, op_name)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408602466",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22096#issuecomment-408602466",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22096",
    "id": 408602466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODYwMjQ2Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-28T12:01:10Z",
    "updated_at": "2018-07-28T12:01:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "itâ€™s just wrapped in a series to use the same testing to compare "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/408832527",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22096#issuecomment-408832527",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22096",
    "id": 408832527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODgzMjUyNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T11:29:59Z",
    "updated_at": "2018-07-30T11:29:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Right, but the op takes place on a Series twice, and never directly on the array. Shouldn't line 328 be\r\n\r\n```python\r\n# array\r\nresult = op(data, other)\r\n```\r\n\r\nand then later on we do\r\n\r\n```python\r\n# series\r\nresult = op(s, other)\r\n```"
  }
]
