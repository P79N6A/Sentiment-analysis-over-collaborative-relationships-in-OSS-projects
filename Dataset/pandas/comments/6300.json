[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34516536",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34516536",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34516536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTE2NTM2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-07T22:55:19Z",
    "updated_at": "2014-02-07T22:55:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't recall if we test deprecations in general (e.g. call the function in an `assert_produces_warning` wrapper)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34740766",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34740766",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34740766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzQwNzY2",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-11T10:08:37Z",
    "updated_at": "2014-02-11T10:08:37Z",
    "author_association": "MEMBER",
    "body": "This is I think easy to agree on, to be consistent with the other io modules:\n- `DataFrame.to_sql(...)` instead of `sql.to_sql(df, ...)`\n- `pd.read_sql` instead of `sql.read_sql`\n\nBut\n- what to do with `read_table`? (which is, at this moment how it is laid out in the docs, sort of the primary function, http://pandas-docs.github.io/pandas-docs-travis/io.html#io-sql)\n  - rename and also put toplevel, eg `pd.read_sqltable`\n  - just keep as is in `sql` (but this feels odd because, as I said above, this is somewhat the main function of the sql module).\n  - rename `read_table` to toplevel `pd.read_sql` (the main function), and the current `read_sql` to something like `pd.read_sqlquery` or `sql.read_query` or `sql.query()`, `sql.get_query`. But I assume this is not possible due to backwards compatibility.\n  - merge `read_sql` and `read_table` to one function (but see comments here https://github.com/pydata/pandas/pull/5950#issuecomment-33174797)\n\n@hayd @mangecoeur @jreback @danielballan @y-p Opinions?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34743076",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34743076",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34743076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzQzMDc2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-11T10:43:37Z",
    "updated_at": "2014-02-11T10:43:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "it seems that you can use read_table if u can reflect the table definition\notherwise u have to use read_sql and then figure out types\n\nwell it seems that pandas should then try to use read_table if possible (eg try to reflect the table) then fallback to read_sql?\n\nwhy is this this a problem or not possible?\n\nit is really confusing to have 2 functions which basically do the same thing depending on an implementation detail \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34762804",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34762804",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34762804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzYyODA0",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-11T15:08:25Z",
    "updated_at": "2014-02-11T15:08:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I addressed some of the reasons here, and some more reasons below\n https://github.com/pydata/pandas/pull/5950#issuecomment-33174797\n\nI don't see this as confusing at all, and the functionality is distinct - you have low level SQL querying and higher level \"table selection\" apis.\nYou can always reflect a table if you have it's name, so there's no need for read_sql fallback in that sense.\n\nOn the other hand, if you issue a read_sql, you will be using an SQL query, that may not return values stored in a db TABLE - e.g. you might do something like \n\"SELECT COUNT(tbl1.foo), SUM(tbl2.bar) FROM tbl1, tbl2 WHERE tbl1.otherID == tbl2.ID GROUP BY tbl2.groupable_name\"\nAnd none of the returned values will be data stored in the DB, instead they are calculated on the fly. You can't reflect type information before hand, so you can't rely on the same type conversion.\n\nIf you used read_table in the case you only wanted one table (and we'll see below why that's not straightforward) you would suddenly find you had different type casting rules, because instead of the rules that apply to read_sql (limited type coertion) you get the ones that apply to read_table. You should never create that sort of unexpected behaviour.\n\nIn any case, how would you know if you were only selecting one table? You would have to parse the SQL string to find out that \"SELECT \\* FROM table_name\" (and it's functionally equivalent alternatives, of which there are a few) meant you want everything from table_name. Which means you need to introduce an SQL parser and to deal with the differences between SQL dialects, which completely defeats the point of using SQLAlchemy.\n\nNext, there are keyword arguments which have meaning for read_table but not for read_sql, and vice-versa. E.g. \"flavor\" is meaningless for read_table, \"columns\" is likewise for read_sql. If you tried to merge the functions these options would have a different effect depending on the value of the input arg - that to me is really bad API design, it's as if the accelerator pedal of your car turned into the brake pedal depending on whether you are wearing a hat. It's just nuts!\n\nHaving 2 functions which represent different levels of abstraciton from raw SQL completely eliminates these problems. It leaves lots of room to add interesting funcitonality to read_table and to take advantage of the higher level of abstraction offered by SQLAlchemy's expression language. \n\nAll we need to do is figure out nice API names. If a top level function is required (though IMHO it's not that important) I think `read_sql_table` or `read_db_table` as aliases of `sql.read_table` would be fine. If it weren't for backward compatibility isses I would prefer even read_table to be called `read_sql` and the old read_sql to be `query_sql` or similar.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34800755",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34800755",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34800755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODAwNzU1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-11T20:16:16Z",
    "updated_at": "2014-02-11T20:16:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur ok...I hear ya...so to summarize, `read_sql` returns a table (that may or may not be defined but pandas will try extra hard to infer dtypes`, while the currently named`read_table`` will essentially perform arbitrary sql and not do anything special with the result. ok\n\nThe big question here is whether to expose the currently named `read_table` at the top-level (I think its ok)....but with what name.\n\nSince we are breaking.....why don't we use the names you suggest\n\nI actually think the top-level names ARE important as most users will simply use those by default. In general you don't get too many diving into the modules (nor should they necessarily). If these are both useful, then they can both be top-level.\n\n`read_sql_table` and `read_sql_query`; can simply map `read_sql` to `read_sql_table` (with a deprc) so things will 'work'.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34806897",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34806897",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34806897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA2ODk3",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-11T21:06:55Z",
    "updated_at": "2014-02-11T21:06:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I had the same thought: sep to read_sql_query and read_sql_table (I think this will be used more).\n\n@jreback Isn't it the other way around? read_sql_table takes a table_name and infers dtypes based on the dtypes of the sql table. read_sql_query  takes arbitrary sql and has a go at infering ?\n\nI still think there is a case for read_sql to do `read_sql_table(sql) if has_table(sql) else read_sql_query(sql)`... I don't think we should shy away from lots of (optional) args, we certainly don't elsewhere!\n\nDefinitely the _functionality_ of sql_read_table should be toplevel.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34807259",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34807259",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34807259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA3MjU5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-11T21:10:27Z",
    "updated_at": "2014-02-11T21:10:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd oh...I see I did put them 'backwards'. Ok if we go with `read_sql_query` and `read_sql_table` then map `read_sql` to `read_sql_table` (maybe with a deprecate on `read_sql` directly)....everyone ok with that?\n\nseems minimum pain\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34809766",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34809766",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34809766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA5NzY2",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-11T21:32:06Z",
    "updated_at": "2014-02-11T21:32:06Z",
    "author_association": "MEMBER",
    "body": "@mangecoeur About the top level function: that's the design choice made earlier in pandas, and I think it is important to be consistent on this: the main read_.. function in top level namespace. \n\nIndeed a good summary: there are two cases for reading sql data:\n- full table (with currently `read_table`) -> infer types from table definition via sqlalchemy types\n- custom sql query (with currently `read_sql`) -> try to infer types just from result set\n\nAnd due to the potential differences between the results of both methods, it is indeed important to clearly identify those two cases in the docs (whether as two cases in one function, or two cases in two functions).\n\nFor me it is ok to go with `read_sql_query` and `read_sql_table`. \nBut @jreback, what do you mean with mapping `read_sql` to `read_sql_table`? Because isn't that just the problem with the backwards compatibility that `read_sql` already exists and has a different behaviour? But if this deprecation is OK, then we actually can just use `read_sql` instead of `read_sql_table` as the name for the function that reads whole tables (unless we find `read_sql_table` better as it is more explicit).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/34823611",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-34823611",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 34823611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODIzNjEx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-11T23:55:39Z",
    "updated_at": "2014-02-11T23:55:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that I am refering to these top-level functions reversed. so ignore me!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35089798",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35089798",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35089798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDg5Nzk4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-14T14:51:47Z",
    "updated_at": "2014-02-14T14:51:55Z",
    "author_association": "MEMBER",
    "body": "Something else, @mangecoeur, is it also the intention that users could use one of the objects? (in the meaning: has this an added value, so that it would be usefull to mention it in the docs)\n\nBecause now, in the docs there is a mention of `PandasSQLWIthEngine` (just above this header: http://pandas-docs.github.io/pandas-docs-travis/io.html#querying), but I think this is certainly outdated and maybe not your intention of being in the docs? (possibly a leftover from the rebasing complexity, there were some merging conflicts in the docs that I manually, and maybe incorrectly,  resolved).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35091982",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35091982",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35091982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkxOTgy",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-14T15:15:36Z",
    "updated_at": "2014-02-14T15:15:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche well spotted, that should be updated to read PandasSQLAlchemy, and maybe also to include PandasSQLTable. But the OO API probably still needs work anyway. It's very useful if you need more fine control for certain use cases (I use it for debugging to check the create table statements before doing an insert for example)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35092852",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35092852",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35092852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkyODUy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-14T15:25:12Z",
    "updated_at": "2014-02-14T15:25:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur you might want to put a small explanation at the top of the sql.py file for these 'internal' classes. clearly will not be externally exposed, but just like anything else, I am sure someone will fine a use for them!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35093112",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35093112",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35093112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkzMTEy",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-14T15:27:45Z",
    "updated_at": "2014-02-14T15:27:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Not sure what you mean by \"externally exposed\". They should remain accessible through pandas.io.sql for anyone who needs them (that includes me). The whole module probably needs more docstrings in general, the classes in particular, but they might change a little still so I guess I would wait until most of the bugs are ironed out.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35095922",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35095922",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35095922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDk1OTIy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-14T15:56:15Z",
    "updated_at": "2014-02-14T15:56:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur I just mean they aren't in the public API (which they are not now)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35120499",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35120499",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35120499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTIwNDk5",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-14T20:15:41Z",
    "updated_at": "2014-02-14T20:15:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback The original intention was for one to be in public api. Just like you create a HDF5Store and query it, you'd create a PandasSQL (perhaps should rename to SQLStore or something?) and then do read_sql and write_sql against this.\n\nIMO you want to have a one constructor (to be in global API) which you can pass either a conn or engine to, since these can be reused.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35121373",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35121373",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35121373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTIxMzcz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-14T20:26:00Z",
    "updated_at": "2014-02-14T20:26:00Z",
    "author_association": "MEMBER",
    "body": "See also the discussion in a previous issue on this topic, around https://github.com/pydata/pandas/issues/4163#issuecomment-25086478\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35121784",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35121784",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35121784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTIxNzg0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-14T20:30:42Z",
    "updated_at": "2014-02-14T20:30:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hayd ok...that makes sense then...sure....I like `SQLStore` :+1: \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35621506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35621506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35621506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIxNTA2",
    "user": {
      "login": "mangecoeur",
      "id": 743508,
      "node_id": "MDQ6VXNlcjc0MzUwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/743508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mangecoeur",
      "html_url": "https://github.com/mangecoeur",
      "followers_url": "https://api.github.com/users/mangecoeur/followers",
      "following_url": "https://api.github.com/users/mangecoeur/following{/other_user}",
      "gists_url": "https://api.github.com/users/mangecoeur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mangecoeur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mangecoeur/subscriptions",
      "organizations_url": "https://api.github.com/users/mangecoeur/orgs",
      "repos_url": "https://api.github.com/users/mangecoeur/repos",
      "events_url": "https://api.github.com/users/mangecoeur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mangecoeur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-20T13:35:04Z",
    "updated_at": "2014-02-20T13:35:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback would that be SQLStore to refer to what is now the PandasSqlEngine (for access to tables and queries of tables in a DB) or to the PandasSqlTable (that handles mapping between a single DataFrame and db table)?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35621940",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-35621940",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 35621940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIxOTQw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-20T13:40:40Z",
    "updated_at": "2014-02-20T13:40:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mangecoeur I think that would be `PandasSqlEngine` as it holds access to possible multiple tables.\n\ncaveat, I haven't really look at this though in detail. Idea being this would be the first thing a user would use if they say want to open a db then interactively work on it (as opposed to using the `read_sql` functionaility (which is analagous to `read_hdf`.)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40020084",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40020084",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40020084,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDIwMDg0",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T21:41:42Z",
    "updated_at": "2014-04-09T21:42:05Z",
    "author_association": "MEMBER",
    "body": "OK, we have to come to a decision here. Options:\n- option 1:\n  - keep `read_sql` as is and rename `read_table` to `read_sql_table`\n  - drawback: 'main' function (the read_table functionality) is not `read_sql`\n- option 2:\n  - rename `read_sql` to `read_sql_query` and `read_table` to `read_sql_table`. `read_sql` will eventually be deprecated.\n  - drawback: we don't use the shortest/nicest `read_sql` name\n- option 3:\n  - rename `read_table` to `read_sql`, and the original `read_sql` to `read_sql_query` (or `sql.read_query`), and in the beginning `read_sql` will still accept a sql query statement for backwards compatibility.\n  - drawback: this is actually merging the functionality of both (for the backwards compatibility), and see the objections of @mangecoeur to this above.\n- option 4:\n  - or we have a `sql.read_table` and `sql.read_query`, and then only a top level `read_sql` which delegates to `sql.read_table`/`sql.read_query` depending on the input.\n  - drawback: different names as toplevel and in sql module is confusing (as users will see both in code depending on how they are imported). + drawback of option 3\n\nOther options? Or combinations? \nWhat do you prefer?\n\n@jreback @mangecoeur @hayd @jtratner @danielballan @cpcloud \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40021206",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40021206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40021206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDIxMjA2",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T21:53:15Z",
    "updated_at": "2014-04-09T21:54:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "There's tweak to option 4 I rate: Have top level read_sql which does both, that is still called `read_sql` in io.sql. We split the two functions (neither of which are top level) so that read_sql is defined as:\n\n```\ndef read_sql(sql):  # arg more honestly called sql_or_table_name\n    read_sql_table(sql) if has_table(sql) else read_sql_query(sql)\n```\n\nIt could take an _optional_ kwarg if you wanted to be more explicit (like we do with regex kwarg in select):\n\n```\nread_sql(table='foo')\nread_sql(query='SELECT * FROM foo')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40027102",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40027102",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40027102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDI3MTAy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T23:04:17Z",
    "updated_at": "2014-04-09T23:04:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think a modified option 2 might be the best bet:\n\n`pd.read_sql_table` and `pd.read_sql_query`, simple, clear what they are doing, and you don't need to have any `sql.*` based functions.\n\nthen\n\n`pd.read_sql` is simply an alias (or maybe calls) `pd.read_sql_table`. This is the by far the most common operation (right?) that people will want to do, e.g. I have a table, read it in.\n\n_maybe_ we come back in a later version of allowing something along what @hayd is suggesting (where you can specify a `query` directly in `read_sql`.\n\nI dont' think we need to deprecate `read_sql` at all in this case.\n\nso maybe call this option 2a.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40069277",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40069277",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40069277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDY5Mjc3",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T11:52:27Z",
    "updated_at": "2014-04-10T11:52:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like 2a. I like what @hayd is suggesting for read_sql. I agree,@jreback,\nthat reading table in its entirety is the more common operation, but making\nread_sql an alias for read_sql_table would break lots of old code.\n\nIf we implement 2a and do what @hayd suggests, all at once, nothing breaks.\n\nOn Wednesday, April 9, 2014, jreback notifications@github.com wrote:\n\n> I think a modified option 2 might be the best bet:\n> \n> pd.read_sql_table and pd.read_sql_query, simple, clear what they are\n> doing, and you don't need to have any sql.\\* based functions.\n> \n> then\n> \n> pd.read_sql is simply is an alias (or maybe calls) pd.read_sql_table.\n> This is the by far the most common operation (right?) that people will want\n> to do, e.g. I have a table, read it in.\n> \n> _maybe_ we come back in a later version of allowing something along what\n> @hayd https://github.com/hayd is suggesting (where you can specify a\n> query directly in read_sql.\n> \n> I dont' think we need to deprecate read_sql at all in this case.\n> \n> so maybe call this option 2a.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/6300#issuecomment-40027102\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40083817",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40083817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40083817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDgzODE3",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T13:53:01Z",
    "updated_at": "2014-04-10T13:53:01Z",
    "author_association": "MEMBER",
    "body": "@jreback problem with your idea is that `read_sql` is at this moment an alias for the future `read_sql_query`, so when we also want to be able to use `read_sql` for `read_sql_table`, then you have what @hayd suggested.\n\nSo, we have a `pd.read_sql_table` and a `pd.read_sql_query`, but\n- for backwards compatibility, `pd.read_sql` will in every case have to pass a query to `read_sql_query`, so question is do we also pass a table name to `read_sql_table` (as @hayd suggests for `read_sql`, and is what @danielballan proposes)\n- if we do that last, then we have three top level functions (`pd.read_sql`/`read_sql_table`/`read_sql_query`). Not too much (in light of profileration of `read_..` functions)? \n- What do we recommend/use in the docs? Consequently using `read_sql_table/read_sql_query` and only mention that you can also use `read_sql` for both functions as a convenience alias? Or use `read_sql` in the docs?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40084369",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40084369",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40084369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDg0MzY5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T13:57:28Z",
    "updated_at": "2014-04-10T13:57:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "is it always unambiguous what `read_sql` should do ? \n\nmeaning that it can easily figure out whether to send to `read_sql_query` or `read_table_query`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40085103",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40085103",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40085103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDg1MTAz",
    "user": {
      "login": "danielballan",
      "id": 2279598,
      "node_id": "MDQ6VXNlcjIyNzk1OTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielballan",
      "html_url": "https://github.com/danielballan",
      "followers_url": "https://api.github.com/users/danielballan/followers",
      "following_url": "https://api.github.com/users/danielballan/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions",
      "organizations_url": "https://api.github.com/users/danielballan/orgs",
      "repos_url": "https://api.github.com/users/danielballan/repos",
      "events_url": "https://api.github.com/users/danielballan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielballan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T14:03:28Z",
    "updated_at": "2014-04-10T14:03:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can't think of a valid SQL query that could also be the name of a table. A table name must be one identifier, and every query I can think of contains more than one identifier. Therefore, if the string passed to `read_sql` is found to match a table name, it cannot be a valid query.\n\nFor the docs, I favor using `read_sql_table` and `read_sql_query` in examples and then prominently mentioning `read_sql` as a convenience alias.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40085768",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40085768",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40085768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDg1NzY4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T14:09:27Z",
    "updated_at": "2014-04-10T14:09:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok...switch my vote to @hayd + having all 3 top-level functions (I don't think its too much). \n\nFYI you also might want to make make a `SQLStore` which is in reality `PandasSQLAlchemy` as a top-levevl as well (though might be better to just make public `pandasSQL_builder` (better name?)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40085775",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40085775",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40085775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDg1Nzc1",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T14:09:30Z",
    "updated_at": "2014-04-10T14:09:30Z",
    "author_association": "MEMBER",
    "body": "I think so, we can always check if the provided string is a table name (and as @danielballan notes there is not really a possible solution), and if it is a query, I also think there should always be a 'select' in it (I don't think other sql statements return tables?). \nSo that could be an argument to only have a `read_sql` toplevel instead of 3 functions, but you have also the argument of @mangecoeur that the kwargs for `read_sql_table` and `read_sql_query` will not be (or remain) the same, so it is more clear to have (at least also) seperate functions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40086279",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40086279",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40086279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDg2Mjc5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T14:13:56Z",
    "updated_at": "2014-04-10T14:13:56Z",
    "author_association": "MEMBER",
    "body": "OK, so consensus seems to be going to 3 top level functions where `read_sql` delegates to both `read_sql_table` and `read_sql_query`. And in the docs we mainly use these last two.\n\n@jreback about the SQLStore, I know, that is still another part of the api, but I first wanted to conclude on the functional interface, the rest can come later.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40086452",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6300#issuecomment-40086452",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6300",
    "id": 40086452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDg2NDUy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T14:15:19Z",
    "updated_at": "2014-04-10T14:15:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche agreed\n\nok..so this is good, then have backward compat, and provide a nice clean interface!\n\n:+1: to this!\n"
  }
]
