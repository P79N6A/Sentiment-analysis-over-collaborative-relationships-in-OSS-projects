[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216229554",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-216229554",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 216229554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjIyOTU1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-02T13:05:18Z",
    "updated_at": "2016-05-02T13:05:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "The `_wrap_result` needs to incorporate the meta-data from the table and cast as appropriate (or potentially just pass it directly to `.from_records`). \n\n@jorisvandenbossche \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216389017",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-216389017",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 216389017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjM4OTAxNw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-02T22:54:27Z",
    "updated_at": "2016-05-02T22:54:27Z",
    "author_association": "MEMBER",
    "body": "There is already the `_harmonize_columns` method (https://github.com/pydata/pandas/blob/master/pandas/io/sql.py#L895) that is called in `read_table` after `from_records` is used. So the column information from the database _is_ already used to some extend, but this method can possibly be improved.\n\nHowever, the problem of eg possible NaNs in integer columns will not be solved by this I think? The only way to be certain to always have consistent dtype in different chunks is to convert integer columns always to float (unless in the case that a not-nullable constraint is put on the column). Which I am not sure of we should do, as in many cases we will be converting all integers without NaN unnecessarily to floats ..\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216456136",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-216456136",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 216456136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjQ1NjEzNg==",
    "user": {
      "login": "rsdenijs",
      "id": 3237939,
      "node_id": "MDQ6VXNlcjMyMzc5Mzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3237939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsdenijs",
      "html_url": "https://github.com/rsdenijs",
      "followers_url": "https://api.github.com/users/rsdenijs/followers",
      "following_url": "https://api.github.com/users/rsdenijs/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsdenijs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsdenijs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsdenijs/subscriptions",
      "organizations_url": "https://api.github.com/users/rsdenijs/orgs",
      "repos_url": "https://api.github.com/users/rsdenijs/repos",
      "events_url": "https://api.github.com/users/rsdenijs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsdenijs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-03T07:15:36Z",
    "updated_at": "2016-05-03T09:20:04Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche `read_table` could use the `nullable` information provided by sqlalchemy. An integer that is nullable could be casted as float in pandas. \nIn the case of `read_query` i did not find the column `type` from sqlalchemy directly, but the `type` and `nullable` information is specified in the cursor description from the DBAPI.\n\n> Cursor attributes\n> .description\n> This read-only attribute is a sequence of 7-item sequences.\n> \n> Each of these sequences contains information describing one result column:\n> \n> name\n> type_code\n> display_size\n> internal_size\n> precision\n> scale\n> null_ok\n> \n> The first two items ( name and type_code ) are mandatory, the other five are optional and are set to None if no meaningful values can be provided.\n> \n> This attribute will be None for operations that do not return rows or if the cursor has not had an operation invoked via the .execute*() method yet.\n> \n> The type_code can be interpreted by comparing it to the Type Objects specified in the section below.\n\nThis is supported by most major drivers with the exception of sqlite3, ~~for reasons I dont understand~~ because sqlite [has no proper column types](http://www.sqlite.org/datatype3.html) . \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216484492",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-216484492",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 216484492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjQ4NDQ5Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-03T09:58:13Z",
    "updated_at": "2016-05-03T09:58:13Z",
    "author_association": "MEMBER",
    "body": "> read_table could use the nullable information provided by sqlalchemy. An integer that is nullable could be casted as float in pandas. \n\nIMO the problem with this is that by default columns can hold NULLs, so I suppose in many cases people will not specify this, although maybe their columns do in practice not hold NULLs. For all those cases the dtype of the returned column would now change, in many cases unnecessarily. \n\nI am not saying the issue you raise is not a problem, because it certainly _is_, but I am considering what would be the best solution for all cases.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216487961",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-216487961",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 216487961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjQ4Nzk2MQ==",
    "user": {
      "login": "rsdenijs",
      "id": 3237939,
      "node_id": "MDQ6VXNlcjMyMzc5Mzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3237939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsdenijs",
      "html_url": "https://github.com/rsdenijs",
      "followers_url": "https://api.github.com/users/rsdenijs/followers",
      "following_url": "https://api.github.com/users/rsdenijs/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsdenijs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsdenijs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsdenijs/subscriptions",
      "organizations_url": "https://api.github.com/users/rsdenijs/orgs",
      "repos_url": "https://api.github.com/users/rsdenijs/repos",
      "events_url": "https://api.github.com/users/rsdenijs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsdenijs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-03T10:15:50Z",
    "updated_at": "2016-05-03T10:15:50Z",
    "author_association": "NONE",
    "body": "I doubt that in _serious_ environments non-nullable columns are left as nullable... but I guess we will never know. I think this could be handled by a keyword `use_metadata_nulls` or something with a better name. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216489834",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-216489834",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 216489834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjQ4OTgzNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-03T10:27:25Z",
    "updated_at": "2016-05-03T10:28:36Z",
    "author_association": "MEMBER",
    "body": "@rsdenijs That is quite possible, but the fact is that there are also a lot of less experienced people using pandas/sql .. The question then of course is to what extent we have to take those into account for this issue. \n(and it is actually more the problem that pandas cannot have integer columns with missing values ... but that is a whole other can of worms :-))\n\nAnyway, trying to think of other ways to deal with this issue:\n- the issue with string columns and missing values should certainly be solvable I think (both can perfectly be object dtype, in that case we don't have the int/float issue)\n- We could also provide a way to specify dtypes in `read_sql`. But this would then still be manual work, and has probably not that much of advantage to just doing the `astype` after `read_sql` (maybe a little bit more convenience)\n- Something like what you suggest: keyword `use_metadata_nulls` to trigger this check. But it is always a tough balance between keeping the API simple and clear and providing the options you need.\n\nWould you be interested in doing a PR for the first bullet point? This is in any case the non-controversial part I think and could already solve it for string columns (leaving only int columns to handle manually).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217167768",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-217167768",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 217167768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzE2Nzc2OA==",
    "user": {
      "login": "rsdenijs",
      "id": 3237939,
      "node_id": "MDQ6VXNlcjMyMzc5Mzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3237939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsdenijs",
      "html_url": "https://github.com/rsdenijs",
      "followers_url": "https://api.github.com/users/rsdenijs/followers",
      "following_url": "https://api.github.com/users/rsdenijs/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsdenijs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsdenijs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsdenijs/subscriptions",
      "organizations_url": "https://api.github.com/users/rsdenijs/orgs",
      "repos_url": "https://api.github.com/users/rsdenijs/repos",
      "events_url": "https://api.github.com/users/rsdenijs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsdenijs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-05T14:23:31Z",
    "updated_at": "2016-05-05T14:23:31Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche  Actually I might have been confused regarding the strings. String columns are always of type object, regardless of the presence of NaNs. For some reason I thought there was an actual string type in pandas.  So although I would like to take a stab at it, im no longer sure what the goal would be. \n\nRegarding the ints types, I think that `read_table` (not `read_query`) should always inspect if the column is nullable from the SqlAlchemy info. We are reading the col_type anyway, why not check if it is nullable?\nSpecifically, I think the following part is bad when we are chunking, because we dont know if later chunks will have nulls (in fact, im not sure it is ever achieving anything, as it is being called after `from_records`, so pure int and pure bool columns should already have the right type)\n\n```\n\n                elif len(df_col) == df_col.count():\n                    # No NA values, can convert ints and bools\n                    if col_type is np.dtype('int64') or col_type is bool:\n                        self.frame[col_name] = df_col.astype(\n                            col_type, copy=False)\n```\n\nIf for some reason we can not verify the column is nullable (sqlalchemy), when chunking the default behaviour should imo be that ints.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/268494800",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-268494800",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 268494800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODQ5NDgwMA==",
    "user": {
      "login": "chananshgong",
      "id": 24369534,
      "node_id": "MDQ6VXNlcjI0MzY5NTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/24369534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chananshgong",
      "html_url": "https://github.com/chananshgong",
      "followers_url": "https://api.github.com/users/chananshgong/followers",
      "following_url": "https://api.github.com/users/chananshgong/following{/other_user}",
      "gists_url": "https://api.github.com/users/chananshgong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chananshgong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chananshgong/subscriptions",
      "organizations_url": "https://api.github.com/users/chananshgong/orgs",
      "repos_url": "https://api.github.com/users/chananshgong/repos",
      "events_url": "https://api.github.com/users/chananshgong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chananshgong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-21T10:58:04Z",
    "updated_at": "2016-12-21T10:58:04Z",
    "author_association": "NONE",
    "body": "My problem is that even if the detection works, integers loose precision when casted to float and my values are id of records so I need full 64 bit integer precision. Any workaround? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348187597",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-348187597",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 348187597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODE4NzU5Nw==",
    "user": {
      "login": "konstantinmiller",
      "id": 2629945,
      "node_id": "MDQ6VXNlcjI2Mjk5NDU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2629945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/konstantinmiller",
      "html_url": "https://github.com/konstantinmiller",
      "followers_url": "https://api.github.com/users/konstantinmiller/followers",
      "following_url": "https://api.github.com/users/konstantinmiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/konstantinmiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/konstantinmiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/konstantinmiller/subscriptions",
      "organizations_url": "https://api.github.com/users/konstantinmiller/orgs",
      "repos_url": "https://api.github.com/users/konstantinmiller/repos",
      "events_url": "https://api.github.com/users/konstantinmiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/konstantinmiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T13:28:02Z",
    "updated_at": "2017-11-30T13:28:02Z",
    "author_association": "NONE",
    "body": "It would be extremely helpful to be able to specify the types of columns as read_sql() input arguments! Could we maybe have at least that for the moment?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/348192363",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13049#issuecomment-348192363",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13049",
    "id": 348192363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODE5MjM2Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T13:47:15Z",
    "updated_at": "2017-11-30T13:47:15Z",
    "author_association": "MEMBER",
    "body": "Yes, we can.. if somebody makes a contribution to add it! \r\nSo PR welcome to add a `dtype` argument to `read_sql`"
  }
]
