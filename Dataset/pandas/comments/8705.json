[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61391612",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61391612",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61391612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzkxNjEy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T02:16:40Z",
    "updated_at": "2014-11-02T02:19:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @immerrr\n\ncan you have a look. I think `core/internals/BlockManager/iget` needs to be slightly restructued. I am now allowing a CategoricalBlock in 3-d, BUT they are still represented as single blocks (e.g. NonConsolidatable). \n\nSo the problem is you can have multiple return blocks (e.g. `_blknos` is no longer unique).\nI think instead of creating more blocks like I am doing in `reshape_nd` (for the Categorical case), really should just support a 2-d version of Categorical in a single block. (as the categories have to all be the same).\n\nlmk what you think.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61391667",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61391667",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61391667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzkxNjY3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T02:19:46Z",
    "updated_at": "2014-11-02T02:19:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @shoyer \ncc @JanSchulz\n\nyou might also find this interesting, as you have brought this up before (e.g. a 2-d Categorical type)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61393463",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61393463",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61393463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzkzNDYz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T04:00:14Z",
    "updated_at": "2014-11-02T04:00:14Z",
    "author_association": "MEMBER",
    "body": "My hope was that we'll switch categoricals to dynd before too long, which would give us N-D categoricals for free. It looks like this works, although the fix is awkward. That said, getting the current categoricals fully N-dimensional really does not look that bad... I was most of the way there in #8012.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61404463",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61404463",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61404463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDA0NDYz",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T12:16:22Z",
    "updated_at": "2014-11-02T12:16:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> can you have a look. I think core/internals/BlockManager/iget needs to be slightly restructued. I am now allowing a CategoricalBlock in 3-d, BUT they are still represented as single blocks (e.g. NonConsolidatable). \n\nI am not a fan of NonConsolidatable blocks in general. The idea may be great to get 90% of use cases working with low effort, but it adds a lot of semantic load, e.g. you have to think through every tiny bit of API to work with it properly (which is I guess the issue you hit with this PR).\n\nI suppose we could make categorical a proper dtype (or try and take one from dynd) to convey the category information and that would render NonConsolidatable hack unnecessary as categorical blocks will stop consolidating with object ones because of dtype mismatch. As a bonus, categorical blocks that actually _share_ the category info could be merged and nd-categoricals will no longer be an issue.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61404656",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61404656",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61404656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDA0NjU2",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T12:23:13Z",
    "updated_at": "2014-11-02T12:23:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "An interesting generalization of categorical dtype would be a record-like categorical, where each item across one of the axes can be of its own categorical type, since it is basically a MultiIndex.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61404703",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61404703",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61404703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDA0NzAz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T12:24:43Z",
    "updated_at": "2014-11-02T12:24:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "- dynd support will happen at some point (see the issue on adding integer na), but this won't really solve anything anyhow, still always have to represent them in pandas even if the underlying has a dtype support (though this wouldn't hurt)\n- NonConsolidatables are necessary for same dtype that for example DON't share the same categories, its really a sub-dtype distinction.\n\nSo \n\na) could disallow this until we fix it (e.g. you can create a panel but selecting from it is just doesn't work)\nb) could add in a way to combine certain types of these blocks to form a 2-d version of categorical\n(e.g. codes becomes 2-d, not sure how complicated this is)\nc) add in a container type block that can hold multiple of these consolidatable blocks to avoid indexing issues\n\n?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61404739",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61404739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61404739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDA0NzM5",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T12:26:21Z",
    "updated_at": "2014-11-02T12:26:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> NonConsolidatables are necessary for same dtype that for example DON't share the same categories, its really a sub-dtype distinction.\n\nMy point is exactly to put category information _into_ dtype definition so that ones with different categories become unequal.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61404921",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61404921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61404921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDA0OTIx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T12:33:21Z",
    "updated_at": "2014-11-02T12:33:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@immerrr and I agree with you, but I don't think that's trivial / possible ATM (or maybe not ever, how does one define that these categories are different from others in a dtype-like? maybe hash it). The shape, sub-dtype is simply not good enough.\n\nI think we have to work in the existing framework.\n\nwhat do you think about the other ideas?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61405579",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8705#issuecomment-61405579",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8705",
    "id": 61405579,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDA1NTc5",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T12:57:33Z",
    "updated_at": "2014-11-02T12:57:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "> what do you think about the other ideas?\n\nOf those I like b) most. Intentionally or not, to me it sounds pretty much making categorical blocks \"in some way consolidatable\".\n\n> how does one define that these categories are different from others in a dtype-like? maybe hash it\n\nFor the beginning, requiring a full match should be ok, e.g. `(dtype1.cat.ordered == dtype2.cat.ordered) and np.array_equal(dtype1.cat.categories, dtype2.cat.categories)`. We can always figure out a smarter scheme afterwards.\n"
  }
]
