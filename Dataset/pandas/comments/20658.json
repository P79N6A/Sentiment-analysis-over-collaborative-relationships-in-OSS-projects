[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380528067",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20658#issuecomment-380528067",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20658",
    "id": 380528067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDUyODA2Nw==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T17:12:41Z",
    "updated_at": "2018-04-11T17:12:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you have a `DataFrame`, then each column is a `Series`.  So, in your example:\r\n```\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: df = pd.DataFrame({'a':[1,2,3]})\r\n\r\nIn [3]: df['a']\r\nOut[3]:\r\n0    1\r\n1    2\r\n2    3\r\nName: a, dtype: int64\r\n\r\nIn [4]: type(df['a'])\r\nOut[4]: pandas.core.series.Series\r\n\r\nIn [5]: df[df.columns[0]]\r\nOut[5]:\r\n0    1\r\n1    2\r\n2    3\r\nName: a, dtype: int64\r\n```\r\nThe last example shows that you don't even need to know the column name.\r\n\r\nSo there really isn't a need to convert a `DataFrame` to a `Series`, since each column is already a `Series`\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380716188",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20658#issuecomment-380716188",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20658",
    "id": 380716188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDcxNjE4OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T08:08:59Z",
    "updated_at": "2018-04-12T08:08:59Z",
    "author_association": "MEMBER",
    "body": "As @Dr-Irv notes, one way to go about this is \"selecting the single column\". There are some different ways (as @Dr-Irv shows), and your `df.iloc[:, 0]` is also a way to do this. You might find it obscure (because you might not think about indexing because you have in your head to convert the dataframe to series), but in the indexing logic, it is what you want: give me all rows of the first column.\r\n\r\nThat said, on the other points:\r\n\r\n- I am personally not sure it is worth to add a `to_series` method on DataFrame, given the other ways to do the same. Adding new methods to a DataFrame should be done considerate, and the added value is of course always subjective ..\r\n\r\n- The result of `pd.Series(pd.DataFrame({'a':[1,2,3]}))` is for sure a bug, as it is indeed non-sensical. I tried it on the latest master, and there it raises an error (\"ValueError: Wrong number of items passed 1, placement implies 3\"). The error is still confusing (a better message would be good), but at least an error is better than the previous behaviour I think. \r\n  Whether it should ideally convert the dataframe to a series instead of erroring, I am not fully sure. Eg if you do `pd.Series(df.values)` (so passing a 2D array, as a DataFrame is a 2D data structure), you get an error saying \"Exception: Data must be 1-dimensional\". So it would also be good to have consistency with that.\r\n\r\n- The `squeeze` method is inherited from numpy, and we follow their behaviour. I personally don't use it, but you can actually achieve what you want (also in the len-1 case) by specifying you only want to squeeze the second axis (columns), and not the first (rows): `pd.DataFrame({'a':[1]}).squeeze(axis=1)`\r\n\r\nBTW, thanks for raising this issue and for the feedback. It's always interesting to hear such experiences. Although that intuitivity is often something subjective, there are certainly many things that can be improved (although that a lot of things also have historical reasons and backwards compatibility constraints).\r\n\r\n"
  }
]
