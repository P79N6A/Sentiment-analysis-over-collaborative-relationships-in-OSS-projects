[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359192486",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19322#issuecomment-359192486",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19322",
    "id": 359192486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTE5MjQ4Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T18:37:06Z",
    "updated_at": "2018-01-20T18:37:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is what numpy does though i think we changed for Series a long time ago"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359200735",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19322#issuecomment-359200735",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19322",
    "id": 359200735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTIwMDczNQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T20:43:43Z",
    "updated_at": "2018-01-20T21:50:54Z",
    "author_association": "MEMBER",
    "body": "The [test from ](https://github.com/pandas-dev/pandas/pull/9308/files#diff-933180870dd152b775952fc54a99dba7R2744)#9308 for `Series` division is now in `tests.series.test_operators`.  Splitting it into separate tests for `Series.__div__`, `Series.__rdiv__`, `Series.__floordiv__` and parameterizing it with different dtypes and different zero-like `other` args, the behavior is inconsistent.\r\n\r\n```\r\n# For testing division by (or of) zero for Series with length 3, this\r\n# gives several scalar-zeros and length-3 vector-zeros\r\nzeros = [box([0, 0, 0], dtype=dtype)\r\n         for box in [pd.Series, pd.Index, np.array]\r\n         for dtype in [np.int64, np.uint64, np.float64]]\r\nzeros.extend([np.array(0, dtype=dtype)\r\n             for dtype in [np.int64, np.uint64, np.float64]])\r\nzeros.extend([0, 0.0, long(0)])\r\n\r\nclass TestSeriesArithmetic(object):\r\n    @pytest.mark.parametrize('dtype', [np.int64, np.uint64, np.float64])\r\n    @pytest.mark.parametrize('zero', zeros)\r\n    def test_div_zero(self, dtype, zero):\r\n        # GH#9144\r\n        # dtype stability GH#19322\r\n        ser = Series([-1, 0, 1]).astype(dtype)\r\n\r\n        result = ser / zero\r\n        expected = Series([-np.inf, np.nan, np.inf])\r\n        assert_series_equal(result, expected)\r\n```\r\n\r\n15 of these fail, 38 for the analogous `__floordiv__` test.  Before I try to fix this: is there a convention we're following where `0 / 0`, `1 / 0`, and `-1 / 0` may vary depending on the exact dtypes of the `1`s and `0`s?  Or should these always be `np.nan`, `np.inf`, and `-np.inf`, respectively?\r\n\r\n<b>Update</b> The tests with `dtype==np.uint64` are wrong b/c of casting."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359202642",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19322#issuecomment-359202642",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19322",
    "id": 359202642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTIwMjY0Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T21:15:03Z",
    "updated_at": "2018-01-20T21:15:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "there is an old issue and whatsnew about this see if u can find it\r\nmaybe version .11 or around there "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359204942",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19322#issuecomment-359204942",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19322",
    "id": 359204942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTIwNDk0Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T21:51:50Z",
    "updated_at": "2018-01-20T21:51:50Z",
    "author_association": "MEMBER",
    "body": "0.12.0 has\r\n\r\n```\r\n  - Fix modulo and integer division on Series,DataFrames to act similarly to ``float`` dtypes to return\r\n    ``np.nan`` or ``np.inf`` as appropriate (:issue:`3590`). This correct a numpy bug that treats ``integer``\r\n    and ``float`` dtypes differently.\r\n```\r\n\r\nIt looks like #3600 and #9308 are both about this, but unsigned ints appear to be missing form the tests, along with a bunch of the reverse ops.  I can patch this and implement a thorough set of test cases, but need to confirm that all ints and all zeros are interchangeable for this purpose."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359205188",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19322#issuecomment-359205188",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19322",
    "id": 359205188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTIwNTE4OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T21:56:11Z",
    "updated_at": "2018-01-20T21:56:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is tricky as numpy does different things for uint and int\r\nthey don’t convert to float\r\n\r\ni think we should though - see what breaks"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359266731",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19322#issuecomment-359266731",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19322",
    "id": 359266731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTI2NjczMQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-21T17:53:22Z",
    "updated_at": "2018-01-21T17:53:22Z",
    "author_association": "MEMBER",
    "body": "Making some progress on this.  It's liable to be a big diff, so my thought is to first write all the tests and xfail the ones that are currently wrong (allowing a reviewer to double-check my understanding of the desired behavior), then make reasonably-sized PRs to un-xfail those tests."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/359267699",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19322#issuecomment-359267699",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19322",
    "id": 359267699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTI2NzY5OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-21T18:06:56Z",
    "updated_at": "2018-01-21T18:06:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah I think these should all match what we do in series now.\r\n```\r\nIn [1]: idx = pd.Index(range(5))\r\n\r\nIn [2]: s = Series(idx)\r\n\r\nIn [3]: s / 0\r\nOut[3]: \r\n0    NaN\r\n1    inf\r\n2    inf\r\n3    inf\r\n4    inf\r\ndtype: float64\r\n\r\nIn [4]: idx / s\r\nOut[4]: \r\n0    NaN\r\n1    1.0\r\n2    1.0\r\n3    1.0\r\n4    1.0\r\ndtype: float64\r\n\r\nIn [5]: idx / 0\r\n---------------------------------------------------------------------------\r\nZeroDivisionError                         Traceback (most recent call last)\r\n<ipython-input-5-99f2096171d8> in <module>()\r\n----> 1 idx / 0\r\n\r\n~/pandas/pandas/core/indexes/range.py in _evaluate_numeric_binop(self, other)\r\n    600                     if step:\r\n    601                         with np.errstate(all='ignore'):\r\n--> 602                             rstep = step(self._step, other)\r\n    603 \r\n    604                         # we don't have a representable op\r\n\r\nZeroDivisionError: division by zero\r\n\r\nIn [6]: idx // 0\r\n---------------------------------------------------------------------------\r\nZeroDivisionError                         Traceback (most recent call last)\r\n<ipython-input-6-1648d8a4476e> in <module>()\r\n----> 1 idx // 0\r\n\r\n~/pandas/pandas/core/indexes/range.py in __floordiv__(self, other)\r\n    553         if is_integer(other):\r\n    554             if (len(self) == 0 or\r\n--> 555                     self._start % other == 0 and\r\n    556                     self._step % other == 0):\r\n    557                 start = self._start // other\r\n\r\nZeroDivisionError: integer division or modulo by zero\r\n\r\nIn [7]: s // 0\r\nOut[7]: \r\n0    NaN\r\n1    inf\r\n2    inf\r\n3    inf\r\n4    inf\r\ndtype: float64\r\n\r\n```\r\n\r\nyes xfailing things would be ok. Note since these *are* in ops, It think it would make sense to split out the giant tests_ops to sub-modules first :> (I know that's for Series), but same idea."
  }
]
