[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/215943459",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-215943459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 215943459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTk0MzQ1OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-30T07:15:24Z",
    "updated_at": "2016-04-30T07:15:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @mrocklin iirc you had some thoughts about macro type things\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/215943610",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-215943610",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 215943610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTk0MzYxMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-30T07:19:43Z",
    "updated_at": "2016-04-30T14:36:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "we already do a similar thing with `.query()` by copying scope, though it's much simpler as don't have all of the function machinery and until recently only allowed a single statement (so possibility of assignment to a local inside was really small); and its string based (not lambda bases) so can't confuse the calling convention\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/215944524",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-215944524",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 215944524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTk0NDUyNA==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-30T07:38:01Z",
    "updated_at": "2016-04-30T07:38:01Z",
    "author_association": "NONE",
    "body": "Interesting idea :-). I don't have anything particularly useful to say, but two somewhat tangential thoughts:\n- In your example of a lambda accessing a variable from the \"local\" scope: this is actually creating a closure, so the variable isn't a local inside the lambda -- lookup for closed-over variables is implemented differently than for locals. For locals, the bytecode uses `LOAD_FAST`, which accesses the special hidden array of local variables:\n\n``` python\nIn [9]: def f():\n   ...:     x = 1\n   ...:     return x\n   ...: \n\nIn [10]: dis.dis(f)\n[...]\n  3           6 LOAD_FAST                0 (x)\n              9 RETURN_VALUE\n```\n\nBut for closed-over variables (`nonlocal` scope -- this is really what it's called :-)), Python uses LOAD_DEREF:\n\n``` python\nIn [11]: def f():\n   ....:     x = 1\n   ....:     return lambda: x\n   ....: \n\nIn [12]: dis.dis(f())\n  3           0 LOAD_DEREF               0 (x)\n              3 RETURN_VALUE\n```\n\nI'm not sure what LOAD_DEREF's semantics are exactly, but it involves loading a [cell object](https://docs.python.org/2/c-api/cell.html) attached to the function (`func.__closure__` on py3, maybe `.func_closure` on py2), and it might be possible to intercept that loading without all the dark magic. Or not, I haven't checked :-)\n- I may have mentioned this before, but I think we could make a reasonable proposal for getting actual runtime-evaluated macros in py 3.6 if someone cares enough to push it forward, with syntax like `df![sepal_length > 3]` where the `!` is a rust-style marker meaning \"this invocation gets passed the AST of its arguments instead of the actual values\". I don't have time / care enough to take point on this, but I'm happy to help out anyone who does want to take point.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/215978282",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-215978282",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 215978282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTk3ODI4Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-30T16:49:19Z",
    "updated_at": "2016-04-30T16:49:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I'm +0.5 on this :) I need to read through your pandas-magic library again first. I've been mildly annoyed with the verbosity of `df.assign(y=lambda x: x...)` in the past when doing many assigns.\n\nNow we just need a PEP for accepting `Î»` in place of the `lambda` keyword :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216007738",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-216007738",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 216007738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjAwNzczOA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-01T01:53:06Z",
    "updated_at": "2016-05-01T01:53:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "As much as I've wanted for a long time some type of delayed-evaluation semantics in Python, I'm very leery of these hacks that try to manage the global scope under the hood. They are brittle and hard to understand/debug (as @njsmith's caveats in his dark magic gist indicate). And there's always the possibility that something changes down the road in the CPython implementation itself that breaks this, I don't know the extent to which the semantics of these low-level pieces are official...\n\nBut a cleaner solution would be great!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216132310",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-216132310",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 216132310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjEzMjMxMA==",
    "user": {
      "login": "rsdenijs",
      "id": 3237939,
      "node_id": "MDQ6VXNlcjMyMzc5Mzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3237939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsdenijs",
      "html_url": "https://github.com/rsdenijs",
      "followers_url": "https://api.github.com/users/rsdenijs/followers",
      "following_url": "https://api.github.com/users/rsdenijs/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsdenijs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsdenijs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsdenijs/subscriptions",
      "organizations_url": "https://api.github.com/users/rsdenijs/orgs",
      "repos_url": "https://api.github.com/users/rsdenijs/repos",
      "events_url": "https://api.github.com/users/rsdenijs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsdenijs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-02T08:15:41Z",
    "updated_at": "2016-05-02T08:15:41Z",
    "author_association": "NONE",
    "body": "Instead of a lambda, would it be possible to do this with some magic dataframe that deffers all evaluations until the context is given?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216320151",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-216320151",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 216320151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjMyMDE1MQ==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-02T18:29:52Z",
    "updated_at": "2016-05-02T18:30:18Z",
    "author_association": "NONE",
    "body": "For the longer term, maybe it would be  better to marshal behind @haypo 's code transformer pep: https://www.python.org/dev/peps/pep-0511/ \n\nAnd then get a concerted effort going behind something like macropy. \n\n@mrocklin had some ideas about python macros. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216332078",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-216332078",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 216332078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjMzMjA3OA==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-02T19:10:34Z",
    "updated_at": "2016-05-02T19:10:34Z",
    "author_association": "NONE",
    "body": "I'm not a big fan of the idea of pandas trying to run a global search-replace over all my code, which is what that code transformer pep basically would give. Along with the obvious concerns about spooky action at a distance, there's the problem that when doing a static search/replace we don't _know_ which bits of code that look like `df[...]` are actually data frame indexing, and figuring this out would  require some kind of nasty static analysis.\n\nBut again, if someone wants to write a more targeted pep for what pandas would actually want, then I'm happy to help.\n\nFolks following this might also be interested in the current Python-ideas thread(s) discussing syntax like `using some_namespace: ...`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216356388",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-216356388",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 216356388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjM1NjM4OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-02T20:39:24Z",
    "updated_at": "2016-05-02T20:39:24Z",
    "author_association": "MEMBER",
    "body": "> And there's always the possibility that something changes down the road in the CPython implementation itself that breaks this, I don't know the extent to which the semantics of these low-level pieces are official...\n\nThis specific implementation is less brittle than most -- far safer than @njsmith's context manager. Again, the implementation is all based on public API with the `types` module from the standard library:\n\n``` python\ndef injected(df, thunk):\n    \"\"\"Evaluate a thunk in the context of DataFrame\n\n    >>> df = pd.DataFrame({'x': [0, 1, 2]}, index=['a', 'b', 'c'])\n    >>> injected(df, lambda: x ** 2)\n    a    0\n    b    1\n    c    4\n    Name: x, dtype: int64\n    \"\"\"\n    new_globals = thunk.__globals__.copy()\n    new_globals.update(df)\n    new_thunk = types.FunctionType(thunk.__code__, new_globals, thunk.__name__,\n                                   thunk.__defaults__, thunk.__closure__)\n    return new_thunk()\n```\n\nThe problem is that we create the new injected variables as globals in the context of the function evaluation, which is not what one would expect. It's a bad thing is something like this works differently in IPython or a script than wrapped in a function:\n\n```\nx = 1\ndf.pipe(lambda: x)\n```\n\nIn theory, I think we could create a new closure object to create a new scope instead, but that starts to get down the dark magic path.\n\nOne thing we _could_ do is raise an error if injecting new variables would overwrite any global or non-local variables. We could do this by checking to make sure that `thunk.__closure__ is None` and that no dataframe columns are found in `thunk.__globals__`. But I worry that this wouldn't be very satisfying, either, because it's very common to write stuff code where you do use columns as local variables first, e..g,\n\n``` python\nx = ...\ndf['x'] = x\ndf[lambda: x > 500]\n```\n\n> Instead of a lambda, would it be possible to do this with some magic dataframe that deffers all evaluations until the context is given?\n\nNo, unfortunately not unless we're able to change Python itself, because Python builds in eager evaluation.\n\nOne viable alternative is the magic `X` from pandas-ply: http://pythonhosted.org/pandas-ply/\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216481081",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-216481081",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 216481081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjQ4MTA4MQ==",
    "user": {
      "login": "rsdenijs",
      "id": 3237939,
      "node_id": "MDQ6VXNlcjMyMzc5Mzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3237939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsdenijs",
      "html_url": "https://github.com/rsdenijs",
      "followers_url": "https://api.github.com/users/rsdenijs/followers",
      "following_url": "https://api.github.com/users/rsdenijs/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsdenijs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsdenijs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsdenijs/subscriptions",
      "organizations_url": "https://api.github.com/users/rsdenijs/orgs",
      "repos_url": "https://api.github.com/users/rsdenijs/repos",
      "events_url": "https://api.github.com/users/rsdenijs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsdenijs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-03T09:40:10Z",
    "updated_at": "2016-05-03T09:40:10Z",
    "author_association": "NONE",
    "body": "> > Instead of a lambda, would it be possible to do this with some magic dataframe that deffers all evaluations until the context is given?\n> \n> No, unfortunately not unless we're able to change Python itself, because Python builds in eager evaluation.\n> \n> One viable alternative is the magic X from pandas-ply: http://pythonhosted.org/pandas-ply/\n\nI was thinking about something in that direction. A \"lambda DataFrame\"  Î» could represent a defered object or an expression tree . A normal DataFrame could then pass `self` to the Î», which is then evaluated. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217293264",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-217293264",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 217293264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzI5MzI2NA==",
    "user": {
      "login": "rsdenijs",
      "id": 3237939,
      "node_id": "MDQ6VXNlcjMyMzc5Mzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3237939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsdenijs",
      "html_url": "https://github.com/rsdenijs",
      "followers_url": "https://api.github.com/users/rsdenijs/followers",
      "following_url": "https://api.github.com/users/rsdenijs/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsdenijs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsdenijs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsdenijs/subscriptions",
      "organizations_url": "https://api.github.com/users/rsdenijs/orgs",
      "repos_url": "https://api.github.com/users/rsdenijs/repos",
      "events_url": "https://api.github.com/users/rsdenijs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsdenijs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-05T22:04:44Z",
    "updated_at": "2016-05-05T22:05:54Z",
    "author_association": "NONE",
    "body": "@shoyer On Python 2.7.6 and Pandas 0.18.0 , when I want to play with the magic:\n\n```\nimport pandas as pd\nimport pandas_magic.monkeypatched\npd.DataFrame([1])\n```\n\nI get\n\n`TypeError: unbound method _patched_new() must be called with DataFrame instance as first argument (got type instance instead)`\n\nSeems like the `__new__`method is not being overwritten properly?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217294080",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-217294080",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 217294080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzI5NDA4MA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-05T22:08:34Z",
    "updated_at": "2016-05-05T22:08:34Z",
    "author_association": "MEMBER",
    "body": "@rsdenijs I wrote this some months ago, and it worked on an earlier version of pandas with Python 2.7. It is quite likely that something has broken my hack -- you are welcome to look into fixing it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218131988",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-218131988",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 218131988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODEzMTk4OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-10T11:34:43Z",
    "updated_at": "2016-05-10T11:34:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like the idea, but the scopes don't work out the way you'd expect without some darker magic than the original proposal. One reason I like Python is that stuff like scoping mostly makes sense, so my mental model of what's going on usually works. I don't think it's worth sacrificing that for this convenience.\n\nMy take is that things like this have to be built into the language itself, as Nathaniel mentioned - adding it on top of the language is not going to be very robust or very widely understood by people reading the code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218217605",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-218217605",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 218217605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODIxNzYwNQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-10T16:43:03Z",
    "updated_at": "2016-05-10T16:43:03Z",
    "author_association": "MEMBER",
    "body": "@takluyver Agreed. Closing this issue as \"won't fix\". We need changes to the Python language to make this viable.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218219104",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-218219104",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 218219104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODIxOTEwNA==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-10T16:48:13Z",
    "updated_at": "2016-05-10T16:48:38Z",
    "author_association": "NONE",
    "body": "@shoyer do you think that will ever happen? Python is at quite a deficit compared to R and Julia for data manipulation syntax. \n\nIIRC guido said he would entertain a macro PEP.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218251878",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-218251878",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 218251878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODI1MTg3OA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-10T18:44:01Z",
    "updated_at": "2016-05-10T18:44:01Z",
    "author_association": "MEMBER",
    "body": "@datnamer I agree with @njsmith above that if someone has sufficient interest to push this, there is a plausible chance of getting this in. I'm also happy to help but not ready to write the PEP myself -- I don't understand Python's internals well enough to provide the necessary technical detail.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218253857",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-218253857",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 218253857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODI1Mzg1Nw==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-10T18:51:10Z",
    "updated_at": "2016-05-10T18:51:10Z",
    "author_association": "NONE",
    "body": "Oh sorry, I missed that.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218303282",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-218303282",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 218303282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODMwMzI4Mg==",
    "user": {
      "login": "rsdenijs",
      "id": 3237939,
      "node_id": "MDQ6VXNlcjMyMzc5Mzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3237939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsdenijs",
      "html_url": "https://github.com/rsdenijs",
      "followers_url": "https://api.github.com/users/rsdenijs/followers",
      "following_url": "https://api.github.com/users/rsdenijs/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsdenijs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsdenijs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsdenijs/subscriptions",
      "organizations_url": "https://api.github.com/users/rsdenijs/orgs",
      "repos_url": "https://api.github.com/users/rsdenijs/repos",
      "events_url": "https://api.github.com/users/rsdenijs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsdenijs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-10T21:53:13Z",
    "updated_at": "2016-05-10T21:53:13Z",
    "author_association": "NONE",
    "body": "But wouldnt it be possible to reduce the amount of required magic by going for the  following syntax? It would require a magic object L. Maybe I miss the point but it would only need to \"resolve\" L, there would be no conflicts with other local variables.  \n\n```\nfrom pandas import MagicLambda as L\n\n...\n\n(df[L.sepal_length > 3]\n .groupby(pd.cut(L.sepal_width, 5))\n .apply(L.petal_width.mean()))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218305357",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-218305357",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 218305357,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODMwNTM1Nw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-10T22:02:23Z",
    "updated_at": "2016-05-11T02:30:02Z",
    "author_association": "MEMBER",
    "body": "> But wouldnt it be possible to reduce the amount of required magic by going for the following syntax? It would require a magic object L.\n\nYes, in fact [pandas-ply](https://github.com/coursera/pandas-ply) already provides almost exactly this object in the form of `X`, though it might need a little bit of work to ensure `__call__` methods are defined appropriately such that we don't need to use `install_ply`. I'll open a new issue to discuss.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/218346310",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13040#issuecomment-218346310",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13040",
    "id": 218346310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM0NjMxMA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T02:30:23Z",
    "updated_at": "2016-05-11T02:30:23Z",
    "author_association": "MEMBER",
    "body": "Opened a new issue to propose porting the magic X from pandas-ply to pandas proper: https://github.com/pydata/pandas/issues/13133\n"
  }
]
