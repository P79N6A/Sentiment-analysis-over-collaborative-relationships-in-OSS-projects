[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372139844",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-372139844",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 372139844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjEzOTg0NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T19:01:21Z",
    "updated_at": "2018-03-11T19:01:21Z",
    "author_association": "MEMBER",
    "body": "Make sure you review the validation script - there are definitely some errors with your examples in `Series.map` that need to be accounted for"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372298425",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-372298425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 372298425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjI5ODQyNQ==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T12:50:09Z",
    "updated_at": "2018-03-12T12:50:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the comments. I will work on them this evening probably.\r\nI would like to point out though that, as stated in the topmost comment of the pull request, I worked on CategoricalIndex.map docstring. The other docstrings were just marginally improved on the way, sometimes in very trivial ways, like, for example, the first sentence being on the same line as \"\"\" or a dot in the wrong place.\r\nI never wanted to fully amend the docs of the other three methods (Categorical.map, Index.map, Series.map). The time to do that goes beyond what I have at the moment. Not considering that some of the methods we are talking about were supposed to be improved by other participants to the sprint.\r\nI made sure that the validation script runs correctly on the CategoricalIndex.map, but I didn't require that the script run on the others.\r\nCan we consider that the present pull request makes the CategoricalIndex.map compliant with the guidelines and incidentally improves (but does not make compliant) the other docstrings?\r\nI can change the title if you want."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372299436",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-372299436",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 372299436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjI5OTQzNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T12:54:19Z",
    "updated_at": "2018-03-12T12:54:19Z",
    "author_association": "MEMBER",
    "body": "@l736x Ah, sorry, I didn't fully read that comment at the top. I have renamed the PR to make that more clear :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372300028",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-372300028",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 372300028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjMwMDAyOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T12:56:29Z",
    "updated_at": "2018-03-12T12:56:29Z",
    "author_association": "MEMBER",
    "body": "For me it's fine both ways: keep it focused on CategoricalIndex (and you can ignore the comments in the others pars), or it's also fine to expand the scope of the PR to try to fo all map methods. As you prefer."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372301003",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-372301003",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 372301003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjMwMTAwMw==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T13:00:00Z",
    "updated_at": "2018-03-12T13:00:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just to clarify: I'm not saying that the pull request cannot be improved, I completely agree that also Series.map, Index.map and Categorical.map need a rework.\r\nI'm just saying that this goes beyond the scope of the task we worked on during the sprint and that I can not commit to this larger rework at the moment."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372301572",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-372301572",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 372301572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjMwMTU3Mg==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T13:02:04Z",
    "updated_at": "2018-03-12T13:02:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm more willing to work on the other map methods in a separate pull request to avoid delaying this one, if you are all ok with this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372302673",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-372302673",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 372302673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjMwMjY3Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T13:06:02Z",
    "updated_at": "2018-03-12T13:06:02Z",
    "author_association": "MEMBER",
    "body": "That's fine!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373953853",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-373953853",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 373953853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk1Mzg1Mw==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T21:27:12Z",
    "updated_at": "2018-03-17T21:27:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I thing I'm getting out of my mind.\r\nI was editing the pull request to take into account your comments and all of a sudden I cannot run anymore the examples I wrote in the docstring of CategoricalIndex.map.\r\nI honestly don't understand, although I suspect I'm doing something stupid somewhere.\r\nI need help!\r\n\r\nCan you tell me if at the moment this code runs correctly?:\r\n\r\n```\r\nidx = pd.CategoricalIndex(['a', 'b', 'c'])\r\nidx.map({'a': 'first', 'b': 'second', 'c': 'third'})\r\n```\r\n\r\nAccording to the examples it should give:\r\n\r\n```\r\nCategoricalIndex(['first', 'second', 'third'], categories=['first',\r\n                 'second', 'third'], ordered=False, dtype='category')\r\n```\r\n\r\nI swear it was working last saturday, but at the moment I get:\r\n\r\n```\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: idx = pd.CategoricalIndex(['a', 'b', 'c'])\r\n\r\nIn [3]: idx.map({'a': 'first', 'b': 'second', 'c': 'third'})\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-c78c3647d1e7> in <module>()\r\n----> 1 idx.map({'a': 'first', 'b': 'second', 'c': 'third'})\r\n\r\n~/anaconda3/envs/pandas_dev/lib/python3.6/site-packages/pandas/core/indexes/category.py in map(self, mapper)\r\n    639 \r\n    640         \"\"\"\r\n--> 641         return self._shallow_copy_with_infer(self.values.map(mapper))\r\n    642 \r\n    643     def delete(self, loc):\r\n\r\n~/anaconda3/envs/pandas_dev/lib/python3.6/site-packages/pandas/core/categorical.py in map(self, mapper)\r\n   1138 \r\n   1139         \"\"\"\r\n-> 1140         new_categories = self.categories.map(mapper)\r\n   1141         try:\r\n   1142             return self.from_codes(self._codes.copy(),\r\n\r\n~/anaconda3/envs/pandas_dev/lib/python3.6/site-packages/pandas/core/indexes/base.py in map(self, mapper)\r\n   2882         \"\"\"\r\n   2883         from .multi import MultiIndex\r\n-> 2884         mapped_values = self._arrmap(self.values, mapper)\r\n   2885         attributes = self._get_attributes_dict()\r\n   2886         if mapped_values.size and isinstance(mapped_values[0], tuple):\r\n\r\npandas/_libs/algos_common_helper.pxi in pandas._libs.algos.arrmap_object()\r\n\r\nTypeError: 'dict' object is not callable\r\n```\r\n\r\nBy inspecting the code in algos_common_helper.pxi I would guess that it should indeed fail. (The file did not change recently as far as I can see.)\r\n\r\nThe troubling thing is that even a simple Index is not working with .map(dict), while from the docstring it should.\r\n\r\n```\r\nidx = pd.Index(['a', 'b', 'c'])\r\nidx.map({'a': 'first', 'b': 'second', 'c': 'third'})\r\n```\r\n\r\nAny thoughts?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373954053",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-373954053",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 373954053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk1NDA1Mw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T21:30:20Z",
    "updated_at": "2018-03-17T21:30:20Z",
    "author_association": "MEMBER",
    "body": "Typically if you get errors from the Cython layer you need to rebuild the C extensions, so try running\r\n\r\n`python setup.py build_ext --inplace`\r\n\r\nAnd see if that resolves"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373954454",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-373954454",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 373954454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk1NDQ1NA==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T21:37:04Z",
    "updated_at": "2018-03-17T21:37:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "It says everything is up-to-date and does not rebuild anything. :(\r\nCan you check if the last two commands I wrote in the previous comment work for you?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373954804",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-373954804",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 373954804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk1NDgwNA==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T21:43:28Z",
    "updated_at": "2018-03-17T21:43:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I got it: for a reason that I don't understand I was picking up the anaconda default pandas instead of the branch I was editing. Problem solved, back to my pull request.\r\nSorry for the noise!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373957754",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-373957754",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 373957754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk1Nzc1NA==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T22:32:47Z",
    "updated_at": "2018-03-17T22:32:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I updated the pull request.\r\nIn the end I added also the missing sections for Categorical.map. In the current state also that method is now docstring-compliant.\r\n\r\nAbout your proposal for the Extended Summary: \"Maps the categories to new categories, retaining any ordering. Missing entries will be replaced with an np.ndarray containing NaN.\"\r\nTo me it is not clear what ordering the sentence is referring to: the categorical or the properties?\r\nIt is not clear either where the entries are missing: in the categorical? in the mapping?\r\nMoreover we are not replacing single missing entries with ndarrays, we are changing the type of the output according to whether there are missing entries or not.\r\nPersonally I don't see the reason for being too concise in the Extended Summary, I think that if there is a catch in the function it is better to put it there rather than in the example section that is far below and might not be read at all.\r\n\r\nLet me know if you like this version better.\r\n\r\nHere the new validation script outputs:\r\n\r\n```\r\n################################################################################\r\n################### Docstring (pandas.CategoricalIndex.map)  ###################\r\n################################################################################\r\n\r\nMap values using input correspondence (a dict, Series, or function).\r\n\r\nMaps the values (their categories, not the codes) of the index to new\r\ncategories. If the mapping correspondence is a bijection (maps each\r\noriginal category to a different new category) the result is a\r\n:class:`~pandas.CategoricalIndex` which has the same order property as\r\nthe original, otherwise an :class:`~pandas.Index` is returned.\r\n\r\nIf a `dict` or :class:`~pandas.Series` is used any unmapped category is\r\nmapped to NaN. Note that if this happens an :class:`~pandas.Index` will\r\nbe returned.\r\n\r\nParameters\r\n----------\r\nmapper : function, dict, or Series\r\n    Mapping correspondence.\r\n\r\nReturns\r\n-------\r\npandas.CategoricalIndex or pandas.Index\r\n    Mapped index.\r\n\r\nSee Also\r\n--------\r\nIndex.map : Apply a mapping correspondence on an\r\n    :class:`~pandas.Index`.\r\nSeries.map : Apply a mapping correspondence on a\r\n    :class:`~pandas.Series`.\r\nSeries.apply : Apply more complex functions on a\r\n    :class:`~pandas.Series`.\r\n\r\nExamples\r\n--------\r\n>>> idx = pd.CategoricalIndex(['a', 'b', 'c'])\r\n>>> idx\r\nCategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\r\n                 ordered=False, dtype='category')\r\n>>> idx.map(lambda x: x.upper())\r\nCategoricalIndex(['A', 'B', 'C'], categories=['A', 'B', 'C'],\r\n                 ordered=False, dtype='category')\r\n>>> idx.map({'a': 'first', 'b': 'second', 'c': 'third'})\r\nCategoricalIndex(['first', 'second', 'third'], categories=['first',\r\n                 'second', 'third'], ordered=False, dtype='category')\r\n\r\nIf the mapping is not bijective an :class:`~pandas.Index` is returned:\r\n\r\n>>> idx.map({'a': 'first', 'b': 'second', 'c': 'first'})\r\nIndex(['first', 'second', 'first'], dtype='object')\r\n\r\nIf a `dict` is used, all unmapped categories are mapped to NaN and\r\nthe result is an :class:`~pandas.Index`:\r\n\r\n>>> idx.map({'a': 'first', 'b': 'second'})\r\nIndex(['first', 'second', nan], dtype='object')\r\n\r\n################################################################################\r\n################################## Validation ##################################\r\n################################################################################\r\n\r\nDocstring for \"pandas.CategoricalIndex.map\" correct. :)\r\n```\r\n\r\n```\r\n################################################################################\r\n###################### Docstring (pandas.Categorical.map) ######################\r\n################################################################################\r\n\r\nMap categories using input correspondence (dict, Series, or function).\r\n\r\nMaps the categories to new categories. If the mapping correspondence is\r\na bijection (maps each original category to a different new category)\r\nthe result is a :class:`~pandas.Categorical` which has the same order\r\nproperty as the original, otherwise a :class:`~pandas.Index` is\r\nreturned.\r\n\r\nIf a `dict` or :class:`~pandas.Series` is used any unmapped category is\r\nmapped to NaN. Note that if this happens an :class:`~pandas.Index` will\r\nbe returned.\r\n\r\nParameters\r\n----------\r\nmapper : function, dict, or Series\r\n    Mapping correspondence.\r\n\r\nReturns\r\n-------\r\npandas.Categorical or pandas.Index\r\n    Mapped categorical.\r\n\r\nSee Also\r\n--------\r\nCategoricalIndex.map : Apply a mapping correspondence on a\r\n    :class:`~pandas.CategoricalIndex`.\r\nIndex.map : Apply a mapping correspondence on an\r\n    :class:`~pandas.Index`.\r\nSeries.map : Apply a mapping correspondence on a\r\n    :class:`~pandas.Series`.\r\nSeries.apply : Apply more complex functions on a\r\n    :class:`~pandas.Series`.\r\n\r\nExamples\r\n--------\r\n>>> cat = pd.Categorical(['a', 'b', 'c'])\r\n>>> cat\r\n[a, b, c]\r\nCategories (3, object): [a, b, c]\r\n>>> cat.map(lambda x: x.upper())\r\n[A, B, C]\r\nCategories (3, object): [A, B, C]\r\n>>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\r\n[first, second, third]\r\nCategories (3, object): [first, second, third]\r\n\r\nIf the mapping is not bijective an :class:`~pandas.Index` is returned:\r\n\r\n>>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\r\nIndex(['first', 'second', 'first'], dtype='object')\r\n\r\nIf a `dict` is used, all unmapped categories are mapped to NaN and\r\nthe result is an :class:`~pandas.Index`:\r\n\r\n>>> cat.map({'a': 'first', 'b': 'second'})\r\nIndex(['first', 'second', nan], dtype='object')\r\n\r\n################################################################################\r\n################################## Validation ##################################\r\n################################################################################\r\n\r\nDocstring for \"pandas.Categorical.map\" correct. :)\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373958129",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-373958129",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 373958129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk1ODEyOQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T22:39:59Z",
    "updated_at": "2018-03-17T22:39:59Z",
    "author_association": "MEMBER",
    "body": "I would also say that if the documentation is not clear to you as the writer (or in this case editor) then it would not be clear to the general reader either, hence the request for an update. I agree with you that examples would be nice - given the docstring before was certainly trying to call out something about how the ordering and missing values were being handled can you add examples to illustrate those caveats? Perhaps then a better wording will become clear to you.\r\n\r\nFWIW I wouldn't use words that fall under a specific technical domain like \"bijection\" - I think the concept(s) can be explained in general terms so again try adding at least one example each highlighting the sorting and missing value nuances and see what that yields\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373963622",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-373963622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 373963622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk2MzYyMg==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-18T00:39:43Z",
    "updated_at": "2018-03-18T00:40:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@WillAyd I did! Did you read the new docstring?\r\n\r\nBetter explanation:\r\n\r\n```\r\nIf the mapping correspondence is\r\na bijection (maps each original category to a different new category) ...\r\n```\r\n\r\nExample (in both Categorical and CategoricalIndex):\r\n\r\n```\r\nIf the mapping is not bijective an :class:`~pandas.Index` is returned:\r\n\r\n>>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\r\nIndex(['first', 'second', 'first'], dtype='object')\r\n```\r\n\r\nPersonally I'm happy with this version. I took into consideration your remarks, I explained why I don't agree with the correction that you proposed and I gave you a new version that to me is clear enough.\r\nIf you have other comments, please be sure to read the current version first.\r\n\r\n[edited for a misspelling]"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373977211",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-373977211",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 373977211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk3NzIxMQ==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-03-18T07:02:23Z",
    "updated_at": "2018-03-21T23:10:56Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20286?src=pr&el=h1) Report\n> Merging [#20286](https://codecov.io/gh/pandas-dev/pandas/pull/20286?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/01882ba5b4c21b0caf2e6b9279fb01967aa5d650?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/20286/graphs/tree.svg?width=650&height=150&src=pr&token=eZ4WkYLtcO)](https://codecov.io/gh/pandas-dev/pandas/pull/20286?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master   #20286   +/-   ##\n=======================================\n  Coverage    91.8%    91.8%           \n=======================================\n  Files         152      152           \n  Lines       49215    49215           \n=======================================\n  Hits        45181    45181           \n  Misses       4034     4034\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.18% <ø> (ø)` | :arrow_up: |\n| #single | `41.84% <ø> (-0.01%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/20286?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/arrays/categorical.py](https://codecov.io/gh/pandas-dev/pandas/pull/20286/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL2NhdGVnb3JpY2FsLnB5) | `96.21% <ø> (ø)` | :arrow_up: |\n| [pandas/core/series.py](https://codecov.io/gh/pandas-dev/pandas/pull/20286/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvc2VyaWVzLnB5) | `93.84% <ø> (ø)` | :arrow_up: |\n| [pandas/core/indexes/category.py](https://codecov.io/gh/pandas-dev/pandas/pull/20286/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9jYXRlZ29yeS5weQ==) | `97.3% <ø> (ø)` | :arrow_up: |\n| [pandas/core/indexes/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/20286/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9iYXNlLnB5) | `96.68% <ø> (ø)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20286?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20286?src=pr&el=footer). Last update [01882ba...ecbaca0](https://codecov.io/gh/pandas-dev/pandas/pull/20286?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374415675",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-374415675",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 374415675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDQxNTY3NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T23:05:49Z",
    "updated_at": "2018-03-19T23:05:49Z",
    "author_association": "MEMBER",
    "body": "> FWIW I wouldn't use words that fall under a specific technical domain like \"bijection\" - I think the concept(s) can be explained in general terms so again try adding at least one example each highlighting the sorting and missing value nuances and see what that yields\r\n\r\nI agree with trying to avoid terms like \"bijection\", I don't think many people know what it it (although you directly explain it here ..). \r\nFor the ordering, I find the current version clear (it is not about the ordering of the mapping, it is the returned categorical that keeps the ordering property). \r\n\r\n@WillAyd if there is still something else unclear to you in the current version, can you add some inline comments?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374777676",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-374777676",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 374777676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDc3NzY3Ng==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T22:23:40Z",
    "updated_at": "2018-03-20T22:23:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I replaced the word \"bijection\" with \"one-to-one mapping\" as suggested. You are both right, this is better.\r\n\r\n@WillAyd, sorry I didn't understand that your comment was about a new example. I agree it's a good idea so I added one for both Categorical.map and CategoricalIndex.map.\r\n\r\nLet me know if you are ok with the present version or you need other fixes.\r\n\r\n```\r\n################################################################################\r\n################### Docstring (pandas.CategoricalIndex.map)  ###################\r\n################################################################################\r\n\r\nMap values using input correspondence (a dict, Series, or function).\r\n\r\nMaps the values (their categories, not the codes) of the index to new\r\ncategories. If the mapping correspondence is a one-to-one mapping (maps\r\neach original category to a different new category) the result is a\r\n:class:`~pandas.CategoricalIndex` which has the same order property as\r\nthe original, otherwise an :class:`~pandas.Index` is returned.\r\n\r\nIf a `dict` or :class:`~pandas.Series` is used any unmapped category is\r\nmapped to NaN. Note that if this happens an :class:`~pandas.Index` will\r\nbe returned.\r\n\r\nParameters\r\n----------\r\nmapper : function, dict, or Series\r\n    Mapping correspondence.\r\n\r\nReturns\r\n-------\r\npandas.CategoricalIndex or pandas.Index\r\n    Mapped index.\r\n\r\nSee Also\r\n--------\r\nIndex.map : Apply a mapping correspondence on an\r\n    :class:`~pandas.Index`.\r\nSeries.map : Apply a mapping correspondence on a\r\n    :class:`~pandas.Series`.\r\nSeries.apply : Apply more complex functions on a\r\n    :class:`~pandas.Series`.\r\n\r\nExamples\r\n--------\r\n>>> idx = pd.CategoricalIndex(['a', 'b', 'c'])\r\n>>> idx\r\nCategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\r\n                 ordered=False, dtype='category')\r\n>>> idx.map(lambda x: x.upper())\r\nCategoricalIndex(['A', 'B', 'C'], categories=['A', 'B', 'C'],\r\n                 ordered=False, dtype='category')\r\n>>> idx.map({'a': 'first', 'b': 'second', 'c': 'third'})\r\nCategoricalIndex(['first', 'second', 'third'], categories=['first',\r\n                 'second', 'third'], ordered=False, dtype='category')\r\n\r\nThe ordering of the categories is preserved by the map:\r\n\r\n>>> idx = pd.CategoricalIndex(['a', 'b', 'c'], ordered=True)\r\n>>> idx\r\nCategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\r\n                 ordered=True, dtype='category')\r\n>>> idx.map({'a': 3, 'b': 2, 'c': 1})\r\nCategoricalIndex([3, 2, 1], categories=[3, 2, 1], ordered=True,\r\n                 dtype='category')\r\n\r\nIf the mapping is not one-to-one an :class:`~pandas.Index` is returned:\r\n\r\n>>> idx.map({'a': 'first', 'b': 'second', 'c': 'first'})\r\nIndex(['first', 'second', 'first'], dtype='object')\r\n\r\nIf a `dict` is used, all unmapped categories are mapped to NaN and\r\nthe result is an :class:`~pandas.Index`:\r\n\r\n>>> idx.map({'a': 'first', 'b': 'second'})\r\nIndex(['first', 'second', nan], dtype='object')\r\n\r\n################################################################################\r\n################################## Validation ##################################\r\n################################################################################\r\n\r\nDocstring for \"pandas.CategoricalIndex.map\" correct. :)\r\n```\r\n\r\n```\r\n################################################################################\r\n###################### Docstring (pandas.Categorical.map) ######################\r\n################################################################################\r\n\r\nMap categories using input correspondence (dict, Series, or function).\r\n\r\nMaps the categories to new categories. If the mapping correspondence is\r\na one-to-one mapping (maps each original category to a different new\r\ncategory) the result is a :class:`~pandas.Categorical` which has the\r\nsame order property as the original, otherwise a :class:`~pandas.Index`\r\nis returned.\r\n\r\nIf a `dict` or :class:`~pandas.Series` is used any unmapped category is\r\nmapped to NaN. Note that if this happens an :class:`~pandas.Index` will\r\nbe returned.\r\n\r\nParameters\r\n----------\r\nmapper : function, dict, or Series\r\n    Mapping correspondence.\r\n\r\nReturns\r\n-------\r\npandas.Categorical or pandas.Index\r\n    Mapped categorical.\r\n\r\nSee Also\r\n--------\r\nCategoricalIndex.map : Apply a mapping correspondence on a\r\n    :class:`~pandas.CategoricalIndex`.\r\nIndex.map : Apply a mapping correspondence on an\r\n    :class:`~pandas.Index`.\r\nSeries.map : Apply a mapping correspondence on a\r\n    :class:`~pandas.Series`.\r\nSeries.apply : Apply more complex functions on a\r\n    :class:`~pandas.Series`.\r\n\r\nExamples\r\n--------\r\n>>> cat = pd.Categorical(['a', 'b', 'c'])\r\n>>> cat\r\n[a, b, c]\r\nCategories (3, object): [a, b, c]\r\n>>> cat.map(lambda x: x.upper())\r\n[A, B, C]\r\nCategories (3, object): [A, B, C]\r\n>>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\r\n[first, second, third]\r\nCategories (3, object): [first, second, third]\r\n\r\nThe ordering of the categories is preserved by the map:\r\n\r\n>>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\r\n>>> cat\r\n[a, b, c]\r\nCategories (3, object): [a < b < c]\r\n>>> cat.map({'a': 3, 'b': 2, 'c': 1})\r\n[3, 2, 1]\r\nCategories (3, int64): [3 < 2 < 1]\r\n\r\nIf the mapping is not one-to-one an :class:`~pandas.Index` is returned:\r\n\r\n>>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\r\nIndex(['first', 'second', 'first'], dtype='object')\r\n\r\nIf a `dict` is used, all unmapped categories are mapped to NaN and\r\nthe result is an :class:`~pandas.Index`:\r\n\r\n>>> cat.map({'a': 'first', 'b': 'second'})\r\nIndex(['first', 'second', nan], dtype='object')\r\n\r\n################################################################################\r\n################################## Validation ##################################\r\n################################################################################\r\n\r\nDocstring for \"pandas.Categorical.map\" correct. :)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375102807",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-375102807",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 375102807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTEwMjgwNw==",
    "user": {
      "login": "l736x",
      "id": 1564485,
      "node_id": "MDQ6VXNlcjE1NjQ0ODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1564485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l736x",
      "html_url": "https://github.com/l736x",
      "followers_url": "https://api.github.com/users/l736x/followers",
      "following_url": "https://api.github.com/users/l736x/following{/other_user}",
      "gists_url": "https://api.github.com/users/l736x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l736x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l736x/subscriptions",
      "organizations_url": "https://api.github.com/users/l736x/orgs",
      "repos_url": "https://api.github.com/users/l736x/repos",
      "events_url": "https://api.github.com/users/l736x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l736x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T21:31:38Z",
    "updated_at": "2018-03-21T21:31:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the improvements. I missed the `NaN` because I introduced them later to replace NA."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375130654",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-375130654",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 375130654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTEzMDY1NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T23:37:28Z",
    "updated_at": "2018-03-21T23:37:28Z",
    "author_association": "MEMBER",
    "body": "Thanks for the updates lgtm. @jorisvandenbossche I'm good with this when you are"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375218920",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20286#issuecomment-375218920",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20286",
    "id": 375218920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTIxODkyMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T08:39:18Z",
    "updated_at": "2018-03-22T08:39:18Z",
    "author_association": "MEMBER",
    "body": "Thanks @l736x for the PR and @WillAyd for the feedback!"
  }
]
