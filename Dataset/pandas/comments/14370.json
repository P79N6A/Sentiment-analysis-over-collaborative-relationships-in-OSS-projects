[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/252211456",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14370#issuecomment-252211456",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14370",
    "id": 252211456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjIxMTQ1Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-07T10:35:57Z",
    "updated_at": "2016-10-07T10:35:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is irrespective of other dtypes. You are returning a 2 element list so naturally pandas will try to coerce to the original shape as its compatible. Returning a list is not labeled so that is the only thing pandas can do. You can do this if you want. I also suppose more/better documentation is possible.\n\n```\nIn [8]: df1.apply(lambda row: Series([row.B + 3], ['result']), axis=1)\nOut[8]: \n   result\n0       7\n1       8\n2       9\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/252310808",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14370#issuecomment-252310808",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14370",
    "id": 252310808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjMxMDgwOA==",
    "user": {
      "login": "KevinGrealish",
      "id": 6888317,
      "node_id": "MDQ6VXNlcjY4ODgzMTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6888317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KevinGrealish",
      "html_url": "https://github.com/KevinGrealish",
      "followers_url": "https://api.github.com/users/KevinGrealish/followers",
      "following_url": "https://api.github.com/users/KevinGrealish/following{/other_user}",
      "gists_url": "https://api.github.com/users/KevinGrealish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KevinGrealish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KevinGrealish/subscriptions",
      "organizations_url": "https://api.github.com/users/KevinGrealish/orgs",
      "repos_url": "https://api.github.com/users/KevinGrealish/repos",
      "events_url": "https://api.github.com/users/KevinGrealish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KevinGrealish/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-07T17:22:03Z",
    "updated_at": "2016-10-07T17:26:32Z",
    "author_association": "NONE",
    "body": "Jeff, are you saying it's by design that r1 and r2 come out different, (By Design), or are you saying they should be the same (Won't Fix)?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/252316441",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14370#issuecomment-252316441",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14370",
    "id": 252316441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjMxNjQ0MQ==",
    "user": {
      "login": "KevinGrealish",
      "id": 6888317,
      "node_id": "MDQ6VXNlcjY4ODgzMTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6888317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KevinGrealish",
      "html_url": "https://github.com/KevinGrealish",
      "followers_url": "https://api.github.com/users/KevinGrealish/followers",
      "following_url": "https://api.github.com/users/KevinGrealish/following{/other_user}",
      "gists_url": "https://api.github.com/users/KevinGrealish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KevinGrealish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KevinGrealish/subscriptions",
      "organizations_url": "https://api.github.com/users/KevinGrealish/orgs",
      "repos_url": "https://api.github.com/users/KevinGrealish/repos",
      "events_url": "https://api.github.com/users/KevinGrealish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KevinGrealish/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-07T17:46:51Z",
    "updated_at": "2016-10-07T17:46:51Z",
    "author_association": "NONE",
    "body": "In my case, f is a function that takes a string and returns a list of strings and it needs to be applied to each row. i.e. I want result cells to have lists in them, I simplified this in the example, but here is a better repro. If what I was doing is under specified to Pandas, I want it to error all the time, not just when another column happens to be a date. It cost a me a lot of time trying to figure out why this only worked some of the time.:\n\n``` python\nimport pandas as pd\ndf1 = pd.DataFrame.from_items([('A', [1,2,3]), ('B', [\"ABCD\", \"EFGH\", \"IJKL\"])])\ndf2 = pd.DataFrame.from_items([('A', [pd.datetime(1970,1,1), pd.datetime(1970,1,1), pd.datetime(1970,1,1)]), ('B', [\"ABCD\", \"EFGH\", \"IJKL\"])])\nf = lambda row: [char for char in row.B]\nr1 = df1.apply(f, axis=1)  # works\nr2 = df2.apply(f, axis=1)  # fails\n# bug: apply when date present crashes.\n# expect: r1 and r2 to be the same values and shape. r1 has the expected value.\n```\n\nThe problem is that I now have code that crashes only when a date column is present. Your workaround to use a series:\n\n``` python\nf = lambda row: pd.Series([[char for char in row.B]], [\"result\"])\nr1 = df1.apply(f, axis=1)\nr2 = df2.apply(f, axis=1) \n```\n"
  }
]
