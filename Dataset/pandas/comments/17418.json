[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326722011",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17418#issuecomment-326722011",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17418",
    "id": 326722011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjcyMjAxMQ==",
    "user": {
      "login": "pratapvardhan",
      "id": 3757165,
      "node_id": "MDQ6VXNlcjM3NTcxNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3757165?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pratapvardhan",
      "html_url": "https://github.com/pratapvardhan",
      "followers_url": "https://api.github.com/users/pratapvardhan/followers",
      "following_url": "https://api.github.com/users/pratapvardhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/pratapvardhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pratapvardhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pratapvardhan/subscriptions",
      "organizations_url": "https://api.github.com/users/pratapvardhan/orgs",
      "repos_url": "https://api.github.com/users/pratapvardhan/repos",
      "events_url": "https://api.github.com/users/pratapvardhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pratapvardhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T04:52:19Z",
    "updated_at": "2017-09-02T05:11:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just for this usecase, here are two ways you could do it.\r\n\r\n```python\r\nIn [958]: df.replace('', 0).join(df.eq('').add_suffix('=')).astype(float)\r\nOut[958]:\r\n   apple  carrot  pear  apple=  carrot=  pear=\r\n0    3.0     1.0   0.0     0.0      0.0    1.0\r\n1    0.0     3.0   2.0     1.0      0.0    0.0\r\n2    4.0     1.0   3.0     0.0      0.0    0.0\r\n```\r\nOr, use `pd.to_numeric` instead of replacing blanks, for any non-numeric values,\r\n```python\r\nIn [959]: dfn = df.apply(pd.to_numeric)\r\n\r\nIn [960]: dfn.fillna(0).join(dfn.isnull().add_suffix('=')).astype(float)\r\nOut[960]:\r\n   apple  carrot  pear  apple=  carrot=  pear=\r\n0    3.0     1.0   0.0     0.0      0.0    1.0\r\n1    0.0     3.0   2.0     1.0      0.0    0.0\r\n2    4.0     1.0   3.0     0.0      0.0    0.0\r\n```\r\nand, drop columns which are all-zero perhaps?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326722866",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17418#issuecomment-326722866",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17418",
    "id": 326722866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjcyMjg2Ng==",
    "user": {
      "login": "pratapvardhan",
      "id": 3757165,
      "node_id": "MDQ6VXNlcjM3NTcxNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3757165?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pratapvardhan",
      "html_url": "https://github.com/pratapvardhan",
      "followers_url": "https://api.github.com/users/pratapvardhan/followers",
      "following_url": "https://api.github.com/users/pratapvardhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/pratapvardhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pratapvardhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pratapvardhan/subscriptions",
      "organizations_url": "https://api.github.com/users/pratapvardhan/orgs",
      "repos_url": "https://api.github.com/users/pratapvardhan/repos",
      "events_url": "https://api.github.com/users/pratapvardhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pratapvardhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T05:17:32Z",
    "updated_at": "2017-09-02T05:20:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "And, instead of \r\n`enc.fit_transform(df.T.to_dict().values())` \r\nyou could just do \r\n`enc.fit_transform(df.to_dict(orient='records'))` \r\n\r\n\r\norient=`records` will give you records list-like."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326729316",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17418#issuecomment-326729316",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17418",
    "id": 326729316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjcyOTMxNg==",
    "user": {
      "login": "lesshaste",
      "id": 4278485,
      "node_id": "MDQ6VXNlcjQyNzg0ODU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4278485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lesshaste",
      "html_url": "https://github.com/lesshaste",
      "followers_url": "https://api.github.com/users/lesshaste/followers",
      "following_url": "https://api.github.com/users/lesshaste/following{/other_user}",
      "gists_url": "https://api.github.com/users/lesshaste/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lesshaste/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lesshaste/subscriptions",
      "organizations_url": "https://api.github.com/users/lesshaste/orgs",
      "repos_url": "https://api.github.com/users/lesshaste/repos",
      "events_url": "https://api.github.com/users/lesshaste/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lesshaste/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T07:59:36Z",
    "updated_at": "2017-09-02T07:59:36Z",
    "author_association": "NONE",
    "body": "@pratapvardhan Those are nice solutions to the particular example I gave.  I guess one can drop all zero columns with `dfn.loc[:, (dfn != 0).any(axis=0)]`?  It would be interesting to benchmark the solutions you gave.  In fact I thought `pd.get_dummies(dfn, dummy_na=True)` should work too for my simple example but it appears not to.\r\n\r\nIt would have been better if I had shown an example with more different categorical values.  Take this very slightly bigger example:\r\n\r\n```\r\n  apple  carrot pear\r\n0     3       1    a\r\n1     a       3    2\r\n2     4       1    3\r\n3     3       1    b\r\n4     3       1    4\r\n```\r\n\r\n```\r\nenc.fit_transform(df.to_dict(orient='r'))\r\narray([[ 3.,  0.,  1.,  0.,  1.,  0.],\r\n       [ 0.,  1.,  3.,  2.,  0.,  0.],\r\n       [ 4.,  0.,  1.,  3.,  0.,  0.],\r\n       [ 3.,  0.,  1.,  0.,  0.,  1.],\r\n       [ 3.,  0.,  1.,  4.,  0.,  0.]])\r\n```\r\n\r\nBut using get_dummies we get:\r\n\r\n```\r\npd.get_dummies(df)\r\n   carrot  apple_3  apple_4  apple_a  pear_2  pear_3  pear_4  pear_a  pear_b\r\n0       1        1            0             0            0           0           0           1           0\r\n1       3        0            0             1            1           0           0           0           0\r\n2       1        0            1             0            0           1           0           0           0\r\n3       1        1            0             0            0           0           0           0           1\r\n4       1        1            0             0            0           0           1           0           0\r\n```\r\n\r\nIn general, my data will have dozens of categorical values and tens  of thousands of numerical values per column.     It would be great if pandas had an easy way to deal with this situation.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326730836",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17418#issuecomment-326730836",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17418",
    "id": 326730836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjczMDgzNg==",
    "user": {
      "login": "pratapvardhan",
      "id": 3757165,
      "node_id": "MDQ6VXNlcjM3NTcxNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3757165?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pratapvardhan",
      "html_url": "https://github.com/pratapvardhan",
      "followers_url": "https://api.github.com/users/pratapvardhan/followers",
      "following_url": "https://api.github.com/users/pratapvardhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/pratapvardhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pratapvardhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pratapvardhan/subscriptions",
      "organizations_url": "https://api.github.com/users/pratapvardhan/orgs",
      "repos_url": "https://api.github.com/users/pratapvardhan/repos",
      "events_url": "https://api.github.com/users/pratapvardhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pratapvardhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T08:32:48Z",
    "updated_at": "2017-09-02T08:32:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, thanks, can reproduce it, removing the above comment, could you add this to first post under `Code Sample` section?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326731506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17418#issuecomment-326731506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17418",
    "id": 326731506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjczMTUwNg==",
    "user": {
      "login": "pratapvardhan",
      "id": 3757165,
      "node_id": "MDQ6VXNlcjM3NTcxNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3757165?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pratapvardhan",
      "html_url": "https://github.com/pratapvardhan",
      "followers_url": "https://api.github.com/users/pratapvardhan/followers",
      "following_url": "https://api.github.com/users/pratapvardhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/pratapvardhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pratapvardhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pratapvardhan/subscriptions",
      "organizations_url": "https://api.github.com/users/pratapvardhan/orgs",
      "repos_url": "https://api.github.com/users/pratapvardhan/repos",
      "events_url": "https://api.github.com/users/pratapvardhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pratapvardhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T08:43:17Z",
    "updated_at": "2017-09-02T08:54:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lesshaste -- for time-being, you could use `pd.get_dummies` like?\r\n```python\r\nIn [1192]: dfn = df.apply(pd.to_numeric, errors='coerce').isnull() # or df.applymap(np.isreal)\r\n\r\nIn [1193]: df.mask(dfn, 0).join(pd.get_dummies(df.where(dfn)).filter(like='_'))\r\nOut[1193]:\r\n  apple  carrot pear  apple_a  pear_a  pear_b\r\n0     3       1    0        0       1       0\r\n1     0       3    2        1       0       0\r\n2     4       1    3        0       0       0\r\n3     3       1    0        0       0       1\r\n4     3       1    4        0       0       0\r\n\r\nIn [1194]: pd.DataFrame(enc.fit_transform(df.to_dict(orient='r')), columns=enc.feature_names_)\r\nOut[1194]:\r\n   apple  apple=a  carrot  pear  pear=a  pear=b\r\n0    3.0      0.0     1.0   0.0     1.0     0.0\r\n1    0.0      1.0     3.0   2.0     0.0     0.0\r\n2    4.0      0.0     1.0   3.0     0.0     0.0\r\n3    3.0      0.0     1.0   0.0     0.0     1.0\r\n4    3.0      0.0     1.0   4.0     0.0     0.0\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326731789",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17418#issuecomment-326731789",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17418",
    "id": 326731789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjczMTc4OQ==",
    "user": {
      "login": "lesshaste",
      "id": 4278485,
      "node_id": "MDQ6VXNlcjQyNzg0ODU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4278485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lesshaste",
      "html_url": "https://github.com/lesshaste",
      "followers_url": "https://api.github.com/users/lesshaste/followers",
      "following_url": "https://api.github.com/users/lesshaste/following{/other_user}",
      "gists_url": "https://api.github.com/users/lesshaste/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lesshaste/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lesshaste/subscriptions",
      "organizations_url": "https://api.github.com/users/lesshaste/orgs",
      "repos_url": "https://api.github.com/users/lesshaste/repos",
      "events_url": "https://api.github.com/users/lesshaste/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lesshaste/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T08:50:40Z",
    "updated_at": "2017-09-02T18:14:52Z",
    "author_association": "NONE",
    "body": "@pratapvardhan  Your new solution is ingenuous!  Is there an easy way to make a large test dataframe so we can benchmark it?"
  }
]
