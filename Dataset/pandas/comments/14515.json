[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/256574525",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14515#issuecomment-256574525",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14515",
    "id": 256574525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjU3NDUyNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T08:03:53Z",
    "updated_at": "2016-10-27T08:03:53Z",
    "author_association": "MEMBER",
    "body": "@kaloramik So the change is not in `read_csv` (because the example you give raises for me for both 0.19.0 and 0.18.1, and also 0.16), but in the output that `to_csv` is generating.\n\nIn versions < 0.19.0, the file looks like:\n\n```\na,a,b,b\ncol_1,col_2,col_1,col_2\n,,,\n```\n\nwhile in 0.19.0 it looks like (what you showed above):\n\n```\na,a,b,b\ncol_1,col_2,col_1,col_2\n```\n\nSo previously there was an extra line with empty values. Reading this in with 0.19.0 still gives your desired result of an empty frame:\n\n```\ns = \"\"\"a,a,b,b\ncol_1,col_2,col_1,col_2\n,,,\"\"\"\n\nIn [89]: pd.read_csv(StringIO(s), header=[0,1])\nOut[89]: \nEmpty DataFrame\nColumns: [(a, col_1), (a, col_2), (b, col_1), (b, col_2)]\nIndex: []\n\nIn [90]: pd.__version__\nOut[90]: '0.19.0'\n```\n\n(however, something could be said this should actually give you one row of NaNs)\n\nSo the change is in `to_csv`. In 0.19.0, the extra line is not added\n\n```\nIn [94]: df = pd.DataFrame(columns=pd.MultiIndex.from_product([('a', 'b'), ('col_1', 'col_2')]))\n\nIn [96]: print(df.to_csv())\n,a,a,b,b\n,col_1,col_2,col_1,col_2\n```\n\nwhile in 0.18.0 there was an extra line with comma's:\n\n```\nIn [32]: df = pd.DataFrame(columns=pd.MultiIndex.from_product([('a', 'b'), ('col_1', 'col_2')]))\n\nIn [34]: print(df.to_csv())\n,a,a,b,b\n,col_1,col_2,col_1,col_2\n,,,,\n```\n\nThis was a bug (since you don't have any data, there should not be a line of missing values), and this bug was fixed in 0.19.0, see https://github.com/pandas-dev/pandas/issues/6618\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/256577947",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14515#issuecomment-256577947",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14515",
    "id": 256577947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjU3Nzk0Nw==",
    "user": {
      "login": "kaloramik",
      "id": 1311091,
      "node_id": "MDQ6VXNlcjEzMTEwOTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaloramik",
      "html_url": "https://github.com/kaloramik",
      "followers_url": "https://api.github.com/users/kaloramik/followers",
      "following_url": "https://api.github.com/users/kaloramik/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaloramik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaloramik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaloramik/subscriptions",
      "organizations_url": "https://api.github.com/users/kaloramik/orgs",
      "repos_url": "https://api.github.com/users/kaloramik/repos",
      "events_url": "https://api.github.com/users/kaloramik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaloramik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T08:20:17Z",
    "updated_at": "2016-10-27T08:20:17Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche hmm really? That's not what I'm seeing at all. Is it possible I have a package thats screwing something up? Can you post your pd.show_versions?\n\nBut looking at the behavior, shouldn't the expected behavior be what I posted? As in, if you read in a file of length 2, and your headers are taken up to by 2 lines, then it should return an empty df with those columns. I believe the same behavior applies for a single header. \n\nThe error message doesn't seem to make sense\n\n```\nPassed header=[0,1], len of 2, but only 2 lines in file\n```\n\nit DOES have 2 lines in the file, so it should be able to construct the header. In addition, the source code has the following comment\nhttps://github.com/pandas-dev/pandas/blob/6130e77fb7c9d44fde5d98f9719bd67bb9ec2ade/pandas/parser.pyx\n\n```\n                # e.g., if header=3 and file only has 2 lines\n                elif self.parser.lines < hr + 1:\n                    msg = self.orig_header\n                    if isinstance(msg, list):\n                        msg = \"[%s], len of %d,\" % (\n                            ','.join([ str(m) for m in msg ]), len(msg))\n                    raise CParserError(\n                        'Passed header=%s but only %d lines in file'\n                        % (msg, self.parser.lines))\n```\n\nAccording to the comment, the function should fail if the file has less than len(header) lines, implying that the function should succeed if len(header) == len(lines). Does that sound right? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/256579129",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14515#issuecomment-256579129",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14515",
    "id": 256579129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjU3OTEyOQ==",
    "user": {
      "login": "kaloramik",
      "id": 1311091,
      "node_id": "MDQ6VXNlcjEzMTEwOTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaloramik",
      "html_url": "https://github.com/kaloramik",
      "followers_url": "https://api.github.com/users/kaloramik/followers",
      "following_url": "https://api.github.com/users/kaloramik/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaloramik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaloramik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaloramik/subscriptions",
      "organizations_url": "https://api.github.com/users/kaloramik/orgs",
      "repos_url": "https://api.github.com/users/kaloramik/repos",
      "events_url": "https://api.github.com/users/kaloramik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaloramik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T08:26:18Z",
    "updated_at": "2016-10-27T08:26:18Z",
    "author_association": "NONE",
    "body": "Oh actually, scratch that, you are right about 0.18.1 returning an extra line of commas (And so the read_csv succeeds I guess)\n\nBut this breaks behavior now, as in my data pipelines, I am unable to write then read empty dataframes as before. I think the above behavior I described is still the desired one? Unless you have better workarounds? ( I don't think replicating the old behavior by forcibly adding a row of commas would be a good idea)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/256579178",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14515#issuecomment-256579178",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14515",
    "id": 256579178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjU3OTE3OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T08:26:35Z",
    "updated_at": "2016-10-27T08:26:35Z",
    "author_association": "MEMBER",
    "body": "> But looking at the behavior, shouldn't the expected behavior be what I posted?\n\nPossibly. But I am just pointing out that it is _not_ a change in `read_csv`. The code you link to hasn't changed in 2 years (and I tested up to 0.16 that this has been raising this error consistently). \n\nApart from that, it is worth discussing if we should allow this. IMO returning an empty frame is indeed more logical to do. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/256579956",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14515#issuecomment-256579956",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14515",
    "id": 256579956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjU3OTk1Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T08:30:26Z",
    "updated_at": "2016-10-27T08:30:26Z",
    "author_association": "MEMBER",
    "body": "The bug fix in `to_csv` was in any case a good one, so we can only fix it in `read_csv`. Personally I am in favor of returning an empty frame instead of erroring. \nAs you point out, this is more in line with a single header line:\n\n```\ns = \"\"\"a,b\n\"\"\"\n\nIn [14]: pd.read_csv(StringIO(s))\nOut[14]: \nEmpty DataFrame\nColumns: [a, b]\nIndex: []\n```\n\nNote that also for a single header, once you pass the `header` kwarg, it raises:\n\n```\nIn [105]: pd.read_csv(StringIO(s), header=[0])\n...\nCParserError: Passed header=[0], len of 1, but only 1 lines in file\n```\n\ncc @gfyoung @chris-b1 \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/256580194",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14515#issuecomment-256580194",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14515",
    "id": 256580194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjU4MDE5NA==",
    "user": {
      "login": "kaloramik",
      "id": 1311091,
      "node_id": "MDQ6VXNlcjEzMTEwOTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaloramik",
      "html_url": "https://github.com/kaloramik",
      "followers_url": "https://api.github.com/users/kaloramik/followers",
      "following_url": "https://api.github.com/users/kaloramik/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaloramik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaloramik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaloramik/subscriptions",
      "organizations_url": "https://api.github.com/users/kaloramik/orgs",
      "repos_url": "https://api.github.com/users/kaloramik/repos",
      "events_url": "https://api.github.com/users/kaloramik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaloramik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T08:31:34Z",
    "updated_at": "2016-10-27T08:31:34Z",
    "author_association": "NONE",
    "body": "Got it. Thanks for the clarification! Actually as a temporary workaround I guess forcing a write of an empty row on empty data frames should be ok. \n\nDo you know if there are any other workarounds, perhaps from the read side? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/256580779",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14515#issuecomment-256580779",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14515",
    "id": 256580779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjU4MDc3OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T08:34:22Z",
    "updated_at": "2016-10-27T08:34:22Z",
    "author_association": "MEMBER",
    "body": "Hmm, I don't directly see a workaround on the read side. If you want to end up with the multi-index, I don't think there is an easy solution. Probably easier to temporarily fix on the write side as you point out.\n"
  }
]
