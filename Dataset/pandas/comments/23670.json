[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438364011",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438364011",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438364011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODM2NDAxMQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T17:33:28Z",
    "updated_at": "2018-11-13T17:33:28Z",
    "author_association": "MEMBER",
    "body": "Hmm not sure I agree. Might just be my personal usage bias but why would someone opt for a 1-D MultiIndex in the first place?\r\n\r\nI ultimately foresee most people using `sep` or the `fmt` argument you proposed with this method rather than creating an Index of tuples at the end of the day"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438373213",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438373213",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438373213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODM3MzIxMw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T17:57:18Z",
    "updated_at": "2018-11-13T17:57:18Z",
    "author_association": "MEMBER",
    "body": "> Hmm not sure I agree. Might just be my personal usage bias but why would someone opt for a 1-D MultiIndex in the first place?\r\n\r\nI don't have in mind a killer application, but my answer to your question is \"for the same reason why people would want to call ``pd.Index.to_flat_index()``: compatibility\"... "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438374139",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438374139",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438374139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODM3NDEzOQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T17:59:54Z",
    "updated_at": "2018-11-13T17:59:54Z",
    "author_association": "MEMBER",
    "body": "> I ultimately foresee most people using `sep` or the `fmt` argument you proposed with this method rather than creating an Index of tuples at the end of the day\r\n\r\n... and explaining that ``.to_flat_index(fmt=callable)`` is just syntactic sugar for ``.to_flat_index().map(lambda x : callable(*x))`` is I think a nice and concise description - which is currently false for ``pd.Index``."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438376297",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438376297",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438376297,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODM3NjI5Nw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T18:06:30Z",
    "updated_at": "2018-11-13T18:06:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> [...] only method [...] I can think of which gives a different result when called on a flat `Index` and when called on an equivalent 1-level `MultiIndex`\r\n\r\nFWIW, `.str.cat` works for `Index`, but not a 1-level `MultiIndex`, which I guess qualifies as a different result. ;-)\r\n\r\nThere's probably many more broken methods for 1-level `MultiIndex` in the `.str` accessor (the `.str`-constructor passes for 1-level `MultiIndex`, but the methods behind it are completely untested for this case). My current idea/plan is to disable `.str` for `MultiIndex` in #23167 (which is in the process of being split into several PRs).\r\n```\r\n>>> pd.Index(['a', 'b', 'c']).str.cat()\r\n'abc'\r\n>>> pd.MultiIndex.from_arrays([pd.Index(['a', 'b', 'c'])]).str.cat()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\ProgramData\\Miniconda3\\envs\\pf-dev\\lib\\site-packages\\pandas\\core\\strings.py\", line 2275, in cat\r\n    data = Series(self._orig, index=self._orig)\r\n  File \"C:\\ProgramData\\Miniconda3\\envs\\pf-dev\\lib\\site-packages\\pandas\\core\\series.py\", line 191, in __init__\r\n    raise NotImplementedError(\"initializing a Series from a \"\r\nNotImplementedError: initializing a Series from a MultiIndex is not supported\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438386832",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438386832",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438386832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODM4NjgzMg==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T18:36:57Z",
    "updated_at": "2018-11-13T18:37:18Z",
    "author_association": "MEMBER",
    "body": "> FWIW, `.str.cat` works for `Index`, but not a 1-level `MultiIndex`, which I guess qualifies as a different result. ;-)\r\n\r\nRight, thanks! But this is clearly a bug... (because at least some other ``.str`` methods work...)\r\n\r\n>  My current idea/plan is to disable `.str` for `MultiIndex` in #23167\r\n\r\nSorry, naive question, but what is the problem with just running ``.str`` on the result of ``self.get_level_values(0)``?\r\n\r\nMore in general, differences between ``pd.Index`` and 1-level ``pd.MultiIndex`` could be of two kinds:\r\n- not implemented features of one or the other\r\n- consequences of design decisions\r\n\r\nI _think_ there are no differences of the second kind. If we have, and plan to keep, differences of the first kind (and not considering them as \"bug\"), then I wonder whether we should ban 1-level ``pd.MultiIndex`` altogether.\r\n\r\n(Notice that if we did that, I would even more convinced of the current issue, where we pretend that ``pd.Index`` behaves like a 1-level ``pd.MultiIndex``)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438400836",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438400836",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438400836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQwMDgzNg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T19:17:38Z",
    "updated_at": "2018-11-13T19:17:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Sorry, naive question, but what is the problem with just running .str on the result of self.get_level_values(0)?\r\n\r\nFair point, will most likely use that. Just didn't bother investigating further when I saw those were mostly broken. Only question then would be the following: Currently, `Index.str.<method>` always returns an `Index`. It'd be easy to return the same for 1-level `MultiIndex`, but would that change (from MI->`Index`) be confusing/surprising from a user-POV? I guess this goes towards your second point.\r\n\r\n> [...] then I wonder whether we should ban 1-level pd.MultiIndex altogether.\r\n\r\nI admit I don't have the full implications in view, but would be sympathetic (+0.25) to always turn 1-level MI to regular `Index` where necessary.\r\n\r\n> (Notice that if we did that, I would even more convinced of the current issue, where we pretend that `pd.Index` behaves like a 1-level `pd.MultiIndex`)\r\n\r\nI may be missing something, but if that ban should be enforced, then this issue goes away, no?\r\nIt would be much more strange (IMO) to have:\r\n```\r\nIn [2]: pd.Index([1, 2, 3,]).to_flat_index()\r\nOut[2]: Index([(1,), (2,), (3,)], dtype='object')\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438443996",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438443996",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438443996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ0Mzk5Ng==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T21:29:06Z",
    "updated_at": "2018-11-13T21:29:06Z",
    "author_association": "MEMBER",
    "body": "> I may be missing something, but if that ban should be enforced, then this issue goes away, no?\r\n> It would be much more strange (IMO) to have:\r\n\r\nOn the contrary, I would think it is even more important. ``to_flat_index`` always produces an index of tuples, except on ``Index``. As of now, we can say (e.g. to a user whose callable expects an iterable argument) \"there is the 1-level ``MultiIndex`` for that\". If we decide to replace all 1-level ``MultiIndex``es with flat ``Index``es, then we really want ``Index`` to behave, on any \"assumingly multilevel operation\", like a 1-level ``MultiIndex`` does now."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438491089",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438491089",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438491089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ5MTA4OQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T00:27:38Z",
    "updated_at": "2018-11-14T00:27:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> then we really want Index to behave, on any \"assumingly multilevel operation\", like a 1-level `MultiIndex` does now.\r\n\r\nThis sounds like an argument *against* abolishing 1-level `MultiIndex` to me -- what I mean is that IMO, \"assumingly *multi*level operation\" do not have to work on an `Index` at all (per se)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438574811",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-438574811",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 438574811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODU3NDgxMQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T08:13:27Z",
    "updated_at": "2018-11-14T10:25:49Z",
    "author_association": "MEMBER",
    "body": "> This sounds like an argument _against_ abolishing 1-level `MultiIndex` to me -- what I mean is that IMO, \"assumingly _multi_level operation\" do not have to work on an `Index` at all (per se).\r\n\r\nThat we do tend to \"backport\" (all?) ``MultiIndex`` methods to flat ``Index`` is a fact, right? And I think that's a good thing. That's what I had in mind with \"assumingly multilevel\"..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/460010083",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-460010083",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 460010083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDAxMDA4Mw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-02T23:58:18Z",
    "updated_at": "2019-02-02T23:58:18Z",
    "author_association": "MEMBER",
    "body": "Giving this some more thought after the PR you posted I am +/- 0 here. Part of me thinks consistency is great in that regardless of whether an `Index` or `MultiIndex` calls this that you'd get a tuplized version of the index, but from a practicality perspective why do you think that is beneficial? \r\n\r\nMy assumption (potentially wrong) is that users would still have to be aware of the labels contained within the calling object since they'd be indexing afterwards, and moving from a scalar to a tuple there feels weird, though maybe it's weird for them to ever call this in the first place then..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/460038589",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23670#issuecomment-460038589",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23670",
    "id": 460038589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDAzODU4OQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-03T10:05:49Z",
    "updated_at": "2019-02-03T19:29:00Z",
    "author_association": "MEMBER",
    "body": "> from a practicality perspective why do you think that is beneficial?\r\n\r\nI think it is close to irrelevant (I'm insisting on this only i) for consistency/robust code ii) because the thing is brand new so I want to solve this soon), but if I do try to think to some real world case, it's going to be something like:\r\n\r\n``` python3\r\ndef anonymize(idx, hashfunc):\r\n    \"\"\"\r\n    Replace each label in a (multi-)index with its hashfunc-ed version.\r\n    \"\"\"\r\n    new_cont = [tuple([hashfunc(l) for l in t]) for t in idx.to_flat_index()]\r\n    return pd.Index(new_cont, tupleize_cols=True)\r\n```\r\n... which currently will break on flat indexes.\r\n\r\n(Not claiming my example is particularly well coded, there might be better ones)\r\n\r\nOn the other hand, I'm pretty sure we don't loose anything from subtracting the user another alias for ``lambda self : self`` (which is the current behavior on flat indexes)!"
  }
]
