[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/109195757",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-109195757",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 109195757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTE5NTc1Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-05T07:56:25Z",
    "updated_at": "2015-06-05T07:56:25Z",
    "author_association": "MEMBER",
    "body": "This is the result of sqlalchemy returning this as the key of the result set:\n\n```\nIn [65]: res = conn.execute(\"select * from test\")\n\nIn [66]: res.keys()\nOut[66]: [u'a', u'c']\n```\n\nBut, in the Table object it has the correct column name:\n\n```\nIn [67]: meta = sqlalchemy.MetaData(bind=engine)\n\nIn [68]: meta.reflect()\n\nIn [69]: table = meta.tables['test']\n\nIn [70]: table.columns.keys()\nOut[70]: ['a', 'b.c']\n```\n\n@zzzeek Is there a reason for this difference?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/109304472",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-109304472",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 109304472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTMwNDQ3Mg==",
    "user": {
      "login": "zzzeek",
      "id": 128223,
      "node_id": "MDQ6VXNlcjEyODIyMw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zzzeek",
      "html_url": "https://github.com/zzzeek",
      "followers_url": "https://api.github.com/users/zzzeek/followers",
      "following_url": "https://api.github.com/users/zzzeek/following{/other_user}",
      "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions",
      "organizations_url": "https://api.github.com/users/zzzeek/orgs",
      "repos_url": "https://api.github.com/users/zzzeek/repos",
      "events_url": "https://api.github.com/users/zzzeek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zzzeek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-05T14:09:02Z",
    "updated_at": "2015-06-05T14:09:02Z",
    "author_association": "NONE",
    "body": "in the former case you're looking at sqlite3's cursor.description, and I believe we have some workarounds in place for when sqlite3 does the wrong thing with UNION statements that is specifically truncating off dotted names.     periods inside of table and column names are a really bad idea.    see item #1 here: https://periscope.io/blog/better-sql-schema.html\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/109305149",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-109305149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 109305149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTMwNTE0OQ==",
    "user": {
      "login": "zzzeek",
      "id": 128223,
      "node_id": "MDQ6VXNlcjEyODIyMw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zzzeek",
      "html_url": "https://github.com/zzzeek",
      "followers_url": "https://api.github.com/users/zzzeek/followers",
      "following_url": "https://api.github.com/users/zzzeek/following{/other_user}",
      "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions",
      "organizations_url": "https://api.github.com/users/zzzeek/orgs",
      "repos_url": "https://api.github.com/users/zzzeek/repos",
      "events_url": "https://api.github.com/users/zzzeek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zzzeek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-05T14:12:02Z",
    "updated_at": "2015-06-05T14:12:02Z",
    "author_association": "NONE",
    "body": "call the \"sqlite_raw_colnames\" execution option to turn this off:\n\n```\nres = conn.execution_options(sqlite_raw_colnames=True).execute(\"select * from test\")\n```\n\nor\n\n```\neng = create_engine(\"sqlite://\", execution_options={\"sqlite_raw_colnames\": True})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/109419969",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-109419969",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 109419969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQxOTk2OQ==",
    "user": {
      "login": "zzzeek",
      "id": 128223,
      "node_id": "MDQ6VXNlcjEyODIyMw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zzzeek",
      "html_url": "https://github.com/zzzeek",
      "followers_url": "https://api.github.com/users/zzzeek/followers",
      "following_url": "https://api.github.com/users/zzzeek/following{/other_user}",
      "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions",
      "organizations_url": "https://api.github.com/users/zzzeek/orgs",
      "repos_url": "https://api.github.com/users/zzzeek/repos",
      "events_url": "https://api.github.com/users/zzzeek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zzzeek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-05T19:50:12Z",
    "updated_at": "2015-06-05T19:50:12Z",
    "author_association": "NONE",
    "body": "here's that bug in case you're curious\n\n```\nimport sqlite3\n\nconn = sqlite3.connect(\":memory:\")\ncursor = conn.cursor()\n\ncursor.execute(\"create table x (a integer, b integer)\")\ncursor.execute(\"insert into x (a, b) values (1, 1)\")\ncursor.execute(\"insert into x (a, b) values (2, 2)\")\n\ncursor.execute(\"select x.a, x.b from x\")\nassert [c[0] for c in cursor.description] == ['a', 'b']\n\ncursor.execute(\"\"\"\n    select x.a, x.b from x where a=1\n    union\n    select x.a, x.b from x where a=2\n\"\"\")\nassert [c[0] for c in cursor.description] == ['a', 'b'], \\\n    [c[0] for c in cursor.description]\n```\n\noutput:\n\n```\n  File \"test.py\", line 18, in <module>\n    assert [c[0] for c in cursor.description] == ['a', 'b'], [c[0] for c in cursor.description]\nAssertionError: ['x.a', 'x.b']\n```\n\nsee the problem?  add a UNION, the driver totally blows the cursor.description.  those break SQLAlchemy queries, so we filter out the dots.   \n\nFeel free to report upstream to the sqlite3/pysqlite driver.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/109536405",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-109536405",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 109536405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTUzNjQwNQ==",
    "user": {
      "login": "Gerenuk",
      "id": 3168512,
      "node_id": "MDQ6VXNlcjMxNjg1MTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3168512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gerenuk",
      "html_url": "https://github.com/Gerenuk",
      "followers_url": "https://api.github.com/users/Gerenuk/followers",
      "following_url": "https://api.github.com/users/Gerenuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gerenuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gerenuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gerenuk/subscriptions",
      "organizations_url": "https://api.github.com/users/Gerenuk/orgs",
      "repos_url": "https://api.github.com/users/Gerenuk/repos",
      "events_url": "https://api.github.com/users/Gerenuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gerenuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-06T06:22:35Z",
    "updated_at": "2015-06-06T06:22:35Z",
    "author_association": "NONE",
    "body": "This seems like a questionable hack. The select union doesn't blow up, but just gives too much information which the user still can use. Whereas cutting out random parts of names loses information and should strictly speaking be documented. Moreover, this isn't even common to write the union with a superfluous `x.`.\nBut worst of all, it introduces dead/buggy code once the issue has been fixed in sqlite.\nI hope there aren't more surprises.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/109581014",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-109581014",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 109581014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTU4MTAxNA==",
    "user": {
      "login": "zzzeek",
      "id": 128223,
      "node_id": "MDQ6VXNlcjEyODIyMw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zzzeek",
      "html_url": "https://github.com/zzzeek",
      "followers_url": "https://api.github.com/users/zzzeek/followers",
      "following_url": "https://api.github.com/users/zzzeek/following{/other_user}",
      "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions",
      "organizations_url": "https://api.github.com/users/zzzeek/orgs",
      "repos_url": "https://api.github.com/users/zzzeek/repos",
      "events_url": "https://api.github.com/users/zzzeek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zzzeek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-06T13:53:11Z",
    "updated_at": "2015-06-06T13:53:11Z",
    "author_association": "NONE",
    "body": "> This seems like a questionable hack. The select union doesn't blow up, but just gives too much information which the user still can use.\n\nYour defense of the sqlite driver in asserting that this is not a bug at all, just that the driver is in this case deciding to \"give too much information that the user can still use\", suggests that SQLAlchemy is merely recognizing that a column name of the form \"x.y\" is just the SQLite driver giving us \"too much information\", which for SQLAlchemy's purposes we necessarily truncate, because it confuses other parts of the system.   If this was in fact only \"extra\" information that's not needed, then it should be safe to truncate.   This is of course totally wrong, because this is not \"extra\" information; it's garbage which without context we cannot distinguish between a table-qualified column name and a standalone column name with a dot in it.\n\n> Whereas cutting out random parts of names loses information and should strictly speaking be documented.\n\nThis isn't a \"random\" part of the name, it is explicitly the part preceding the dot which in the vast majority of cases is the table or alias name.   The lack of documentation _was_ a bug and is resolved as of yesterday: \n\nhttp://docs.sqlalchemy.org/en/rel_1_0/dialects/sqlite.html#dotted-column-names\n\n> Moreover, this isn't even common to write the union with a superfluous x..\n\nIt is absolutely common if your query happens to contain more than one table/alias/subquery, and further is fully necessary if there is any kind of column name overlap between those relations.  Vastly more common than the \"questionable\" practice of putting dots in column names.\n\nThe SQLAlchemy Core and ORM querying features, which account for the overwhelming vast majority of queries performed under normal use of SQLAlchemy, render all SELECT statements with the leading table name.   Historically, the Core also has relied upon a predictable set of column names coming back from cursor.description in order to match result columns to the Core table constructs which they correspond towards.   \n\nCalling this \"too much information\" is not accurate at all because it is entirely ambiguous and without context (short of parsing the SQL statement to see if it has the word \"UNION\" in it - now _that_ would be a hack).  We have no idea if the \"x.\" prefix is part of the column name or is part of a table/alias name.  That's not information, it's noise.   Very recent SQLAlchemy releases no longer rely as heavily on the names in cursor.description and we could likely just switch this behavior off at this point, however it is very likely that real-world applications are themselves relying upon consistency in these names; Pandas itself is one such example.  If SQLAlchemy did _not_ do what it does here, then the user whose Pandas application ends up calling upon a UNION against multiple tables/aliases would report the _same issue_ from the other end.  It's a no-win situation as long as sqlite3 has this issue.\n\nCertainly the sqlite3 driver is most responsible here, as it has a lot of silly SQL-parsing issues like these which often go on for years without fixes (see http://bugs.python.org/issue21718 for another example).    \n\nPandas itself is also not without blame, as it naively constructs SQL schemas using the raw naming schemes from an entirely different domain instead of applying reasonable escaping patterns to avoid poor SQL practices such as putting dots / spaces / other things in column names.\n\n> But worst of all, it introduces dead/buggy code once the issue has been fixed in sqlite.\n\nTo my knowledge, this is not even acknowledged as a bug in sqlite.  I hardly bother reporting them myself because in ten years I've hardly seen the pysqlite driver ever fix any of the bugs we're reported.  Bugs like these in sqlite and the driver linger on for years.   I can assure you the moment a fixed is released, SQLAlchemy will immediately release an accommodation for this - on my end there's a lot of ugly crap that had to happen to make these use cases work.  \n\nIt is by nature that database abstraction libraries have dependencies on the specific behaviors of the drivers, so accommodating continued change in those libraries is necessary in any case; there are hundreds of critical behaviors in SQLAlchemy dialects that would classify as \"dead/buggy\" if the upstream driver made a change in behavior; something as simple as a new version of the psycopg2 driver suddenly deciding to parse JSON result sets into json rather than returning them as strings, for example.  SQLAlchemy clearly had to parse the JSON beforehand and the psycopg2 driver clearly benefits by building in this parsing themselves and releasing it.  That's just how it goes in this domain.\n\nWithout this name-truncation at some level, common SQLAlchemy queries like query(X).union(query(Y)) would historically simply fail.   We felt it was appropriate to keep the public-facing keys() consistent with this.    Because using dots in column names is vastly less common than emitting a SELECT/UNION with table-qualified column names.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/109582070",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-109582070",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 109582070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTU4MjA3MA==",
    "user": {
      "login": "Gerenuk",
      "id": 3168512,
      "node_id": "MDQ6VXNlcjMxNjg1MTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3168512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gerenuk",
      "html_url": "https://github.com/Gerenuk",
      "followers_url": "https://api.github.com/users/Gerenuk/followers",
      "following_url": "https://api.github.com/users/Gerenuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gerenuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gerenuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gerenuk/subscriptions",
      "organizations_url": "https://api.github.com/users/Gerenuk/orgs",
      "repos_url": "https://api.github.com/users/Gerenuk/repos",
      "events_url": "https://api.github.com/users/Gerenuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gerenuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-06T14:08:06Z",
    "updated_at": "2015-06-06T14:08:06Z",
    "author_association": "NONE",
    "body": "Thanks for the explanation.\nThe dots come in from reading external data and without a warning on driver limitations it's hard to foresee.\nSince a work-around suggestion was available quickly, it's fine. Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/417062403",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-417062403",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 417062403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzA2MjQwMw==",
    "user": {
      "login": "kokes",
      "id": 8451755,
      "node_id": "MDQ6VXNlcjg0NTE3NTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8451755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kokes",
      "html_url": "https://github.com/kokes",
      "followers_url": "https://api.github.com/users/kokes/followers",
      "following_url": "https://api.github.com/users/kokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/kokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kokes/subscriptions",
      "organizations_url": "https://api.github.com/users/kokes/orgs",
      "repos_url": "https://api.github.com/users/kokes/repos",
      "events_url": "https://api.github.com/users/kokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-29T18:44:11Z",
    "updated_at": "2018-08-29T18:44:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Using the original snippet, I get the expected output\r\n\r\n```\r\n$ python3 10279.py \r\n   a  b.c\r\n0  1    2\r\n```\r\n\r\nThat's probably because the `.keys` method returns the correct column names, as illustrated here:\r\n\r\n```\r\n$ cat 10279b.py \r\nfrom sqlalchemy import create_engine\r\nengine = create_engine('sqlite://')\r\nconn = engine.connect()\r\nconn.execute(\"create table test (a int, `b.c` int)\")\r\nconn.execute(\"insert into test values (1,2)\")\r\nex = conn.execute('select * from test')\r\n\r\nprint(ex.keys())\r\n$ python3 10279b.py \r\n['a', 'b.c']\r\n```\r\n\r\nSo this has been fixed upstream, so I guess we can close this? Or is there a need for a test to avoid regressions?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418704186",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10279#issuecomment-418704186",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10279",
    "id": 418704186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODcwNDE4Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T11:58:19Z",
    "updated_at": "2018-09-05T11:58:19Z",
    "author_association": "MEMBER",
    "body": "Yes, as also noted in http://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#dotted-column-names, this seems to be fixed now. \r\n\r\nSo closing this (anyhow, it was not a pandas issues, but rather sqlite/sqlalchemy interaction). Thank @kokes for noting"
  }
]
