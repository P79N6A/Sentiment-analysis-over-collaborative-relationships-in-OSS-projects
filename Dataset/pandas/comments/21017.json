[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388629766",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-388629766",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 388629766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODYyOTc2Ng==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T14:11:37Z",
    "updated_at": "2018-05-13T14:11:37Z",
    "author_association": "MEMBER",
    "body": "I don't have a strong preference on convention here but do you have other projects you can point to that use this? `cls` stylistically from PEP8 is preferred as the first argument to class methods, which is conceptually different from using as a parameter in pytest.\r\n\r\nNot familiar with SublimeText but I'd imagine it's syntax highlighting is intended for those class methods and not related to parametrization. In a similar art we wouldn't (I don't think) ever use `self` as a parameter name.\r\n\r\nAlso wondering if we'd ever have a parametrized class setup method where the usage of `cls` would conflict with the intended usage of it as the first argument. Admittedly a very obscure use case but ideally want a standard that would work in all instances."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388658068",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-388658068",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 388658068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODY1ODA2OA==",
    "user": {
      "login": "selik",
      "id": 1328688,
      "node_id": "MDQ6VXNlcjEzMjg2ODg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1328688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/selik",
      "html_url": "https://github.com/selik",
      "followers_url": "https://api.github.com/users/selik/followers",
      "following_url": "https://api.github.com/users/selik/following{/other_user}",
      "gists_url": "https://api.github.com/users/selik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/selik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/selik/subscriptions",
      "organizations_url": "https://api.github.com/users/selik/orgs",
      "repos_url": "https://api.github.com/users/selik/repos",
      "events_url": "https://api.github.com/users/selik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/selik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T21:42:08Z",
    "updated_at": "2018-05-13T21:42:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting point. Searching the CPython repository shows at least two dozen occurrences of \"cls\" used as a parameter outside of classmethods. There are about half as many occurrences of \"klass\" in the same manner, none of which are motivated by the use of a classmethod.\r\n\r\nThe variable name \"self\" has a more special-purpose meaning. We're lucky that there are other terms like \"obj\" or \"instance\" that could mean the same thing. For a class, we don't have the variety of synonyms. There's \"type\", but that's also burdened by being a builtin.\r\n\r\nThe special case you described sounds plausible, but I can't remember any time I've used that pattern in the last 10 years."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388659937",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-388659937",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 388659937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODY1OTkzNw==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T22:18:03Z",
    "updated_at": "2018-05-13T22:18:03Z",
    "author_association": "MEMBER",
    "body": "An alternative to `cls` or `klass` is to add a trailing underscore and use `class_`.  See [pep8.org](https://pep8.org) and search for \"class_\"."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388660223",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-388660223",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 388660223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODY2MDIyMw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T22:23:59Z",
    "updated_at": "2018-05-13T22:53:06Z",
    "author_association": "MEMBER",
    "body": "Thanks both for the insight. Personally I’d take `class_` over `cls` - probably being overly cautious in that regard but seems to align better with the PEP. I’d say a PR is welcome to make consistent unless others have a different perspective "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388661195",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-388661195",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 388661195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODY2MTE5NQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-13T22:38:27Z",
    "updated_at": "2018-05-13T22:38:27Z",
    "author_association": "MEMBER",
    "body": "I also like `cls` more than `klass`. `class_` is also a reasonable alternative."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/388672233",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-388672233",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 388672233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODY3MjIzMw==",
    "user": {
      "login": "selik",
      "id": 1328688,
      "node_id": "MDQ6VXNlcjEzMjg2ODg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1328688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/selik",
      "html_url": "https://github.com/selik",
      "followers_url": "https://api.github.com/users/selik/followers",
      "following_url": "https://api.github.com/users/selik/following{/other_user}",
      "gists_url": "https://api.github.com/users/selik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/selik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/selik/subscriptions",
      "organizations_url": "https://api.github.com/users/selik/orgs",
      "repos_url": "https://api.github.com/users/selik/repos",
      "events_url": "https://api.github.com/users/selik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/selik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T01:24:54Z",
    "updated_at": "2018-05-14T01:32:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "One interesting case of possible conflict is `issubclass` and similar functions. It's sidestepped because the 2nd argument can either be a class or a tuple of classes, so the parameters are \"cls\" and \"class_or_tuple\". Looking at the habits for `__new__`, which also uses many class-related parameters, we've got \"metacls\", \"cls\", \"bases\", and \"classdict\", all of which use the \"c\" spelling. I'm a little surprised that \"metacls\" became a habit despite \"metaclass\" not conflicting with anything, but that might be a sense of caution, as \"metaclass\" *feels* like something reserved or builtin.\r\n\r\nAnyway, here's my evidence that \"cls\" is the right choice:\r\n\r\n\t$ grep -r \", klass\" cpython | wc -l\r\n\t      19\r\n\t$ grep -r \", cls\" cpython | wc -l\r\n\t     223\r\n\t$ grep -r \", class_\" cpython | wc -l\r\n\t      51\r\n\r\nI suppose it'd be best to avoid changing any parameter names in the actual Pandas API. I'll take a look at how often these names are used in the tests and if it make sense to standardize them I'll put together a pull request next week."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/390695007",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-390695007",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 390695007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDY5NTAwNw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T15:48:17Z",
    "updated_at": "2018-05-21T15:48:17Z",
    "author_association": "MEMBER",
    "body": "> Anyway, here's my evidence that \"cls\" is the right choice:\r\n\r\nDoesn't this disregard the possible ambiguity of ``cls``?\r\n\r\nI find ``cls`` OK aestethically, but I think distinguishing it from the parameter in classmethods is more important.\r\n\r\nAnd while I'm no particular fan of ``klass``, I definitely like it more than ``class_`` (I think in Python we tend to attach meaning to underscores and not to \"k\"s). I would immediately change preferences if I was provided clues that the widespread use of ``klass`` is an intended reference to white supremacist groups, but I'm aware of none. On the other hand, there are other misspellings availables: for instance I don't see downsides (if we omit the fact that ``klass`` is somewhat standard outside pandas) in ``clas``."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/390701385",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-390701385",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 390701385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDcwMTM4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T16:09:03Z",
    "updated_at": "2018-05-21T16:09:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think in Python we tend to attach meaning to underscores and not to \"k\"s\r\n\r\nFWIW, PEP8 recommends a trailing underscore specifically for this case: https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles (avoiding a conflict with a keyword / builtin)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/390888868",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-390888868",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 390888868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDg4ODg2OA==",
    "user": {
      "login": "selik",
      "id": 1328688,
      "node_id": "MDQ6VXNlcjEzMjg2ODg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1328688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/selik",
      "html_url": "https://github.com/selik",
      "followers_url": "https://api.github.com/users/selik/followers",
      "following_url": "https://api.github.com/users/selik/following{/other_user}",
      "gists_url": "https://api.github.com/users/selik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/selik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/selik/subscriptions",
      "organizations_url": "https://api.github.com/users/selik/orgs",
      "repos_url": "https://api.github.com/users/selik/repos",
      "events_url": "https://api.github.com/users/selik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/selik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-22T07:21:51Z",
    "updated_at": "2018-05-22T07:28:02Z",
    "author_association": "CONTRIBUTOR",
    "body": ">> Doesn't this disregard the possible ambiguity of cls?\r\n\r\n> I think distinguishing it from the parameter in classmethods is more important [than aesthetics].\r\n\r\n@toobaz That was in response to the question of whether that ambiguity matters, demonstrating that `cls` is often used outside of classmethods in CPython and the standard library."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/390897600",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-390897600",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 390897600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDg5NzYwMA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-22T07:55:30Z",
    "updated_at": "2018-05-22T07:55:30Z",
    "author_association": "MEMBER",
    "body": "> @toobaz That was in response to the question of whether that ambiguity matters, demonstrating that cls is often used outside of classmethods in CPython and the standard library.\r\n\r\nSorry, I must have missed this... how do you show that your count refers to the use \"_outside of classmethods_\"?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/391062348",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-391062348",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 391062348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTA2MjM0OA==",
    "user": {
      "login": "selik",
      "id": 1328688,
      "node_id": "MDQ6VXNlcjEzMjg2ODg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1328688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/selik",
      "html_url": "https://github.com/selik",
      "followers_url": "https://api.github.com/users/selik/followers",
      "following_url": "https://api.github.com/users/selik/following{/other_user}",
      "gists_url": "https://api.github.com/users/selik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/selik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/selik/subscriptions",
      "organizations_url": "https://api.github.com/users/selik/orgs",
      "repos_url": "https://api.github.com/users/selik/repos",
      "events_url": "https://api.github.com/users/selik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/selik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-22T16:50:42Z",
    "updated_at": "2018-05-22T16:53:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "The grep was for `\", cls\"` not `\"(cls\"`. A classmethod would have been the latter. Before doing the line count, I also quickly scanned the results. They didn't look like classmethods based on the function names and order of the parameters. I didn't verify.\r\n\r\nI could do some more research for historical use if that's helpful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/391136685",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-391136685",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 391136685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTEzNjY4NQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-22T20:52:27Z",
    "updated_at": "2018-05-22T20:52:27Z",
    "author_association": "MEMBER",
    "body": "> The grep was for \", cls\" not \"(cls\". A classmethod would have been the latter\r\n\r\nwould have been _also_ the latter... but you typically do something with the ``cls`` parameter of a classmethod... and\r\n \r\n```\r\n$ grep -r \"(cls, \" cpython-master | wc -l\r\n685\r\n```\r\n\r\n(not that this proves that ``cls`` is necessarily a bad choice, of course)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/391795723",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21017#issuecomment-391795723",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21017",
    "id": 391795723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTc5NTcyMw==",
    "user": {
      "login": "selik",
      "id": 1328688,
      "node_id": "MDQ6VXNlcjEzMjg2ODg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1328688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/selik",
      "html_url": "https://github.com/selik",
      "followers_url": "https://api.github.com/users/selik/followers",
      "following_url": "https://api.github.com/users/selik/following{/other_user}",
      "gists_url": "https://api.github.com/users/selik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/selik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/selik/subscriptions",
      "organizations_url": "https://api.github.com/users/selik/orgs",
      "repos_url": "https://api.github.com/users/selik/repos",
      "events_url": "https://api.github.com/users/selik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/selik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T17:28:04Z",
    "updated_at": "2018-05-24T17:28:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I've discovered the *de facto* standard from CPython is to use \"type\" as the 2nd class-object parameter name when \"cls\" is the first parameter and a second class-object parameter is desired. For example, EnumMeta has `def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1)`.\r\n\r\nInterestingly, it seems slightly more common to receive a tuple of classes than a single class as a 2nd parameter, so name collisions is avoided by saying \"types\" or \"bases\".\r\n\r\nAll this discussion and I think I've talked myself down from the argument. Sorry for the bikeshedding. I still prefer \"cls\" though :-)"
  }
]
