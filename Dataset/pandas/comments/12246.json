[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/180883298",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-180883298",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 180883298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MDg4MzI5OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-06T23:13:42Z",
    "updated_at": "2016-02-06T23:13:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "there are no real changes here (aside from a bug fix), except for now raising `TypeError` where we _should_ have been showing the `FutureWarning` previously\n\nbut if anyone would has comments great.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/182679501",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-182679501",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 182679501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MjY3OTUwMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-11T02:59:25Z",
    "updated_at": "2016-02-11T02:59:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger @jorisvandenbossche @shoyer any objections?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/182738181",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-182738181",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 182738181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MjczODE4MQ==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-11T06:40:27Z",
    "updated_at": "2016-02-11T06:40:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "If setting works and changes the index to `Float64Index`, what should `s` be after this?\n\n```\nIn [17]: s = pandas.Series([1,2,3])\n\nIn [18]: s.index = pandas.Int64Index([2**53, 2**53+1, 2**53+2])\n\nIn [19]: s\nOut[19]: \n9007199254740992    1\n9007199254740993    2\n9007199254740994    3\ndtype: int64\n\nIn [20]: s[2**53+0.0] = 4\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/182745852",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-182745852",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 182745852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Mjc0NTg1Mg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-11T07:24:14Z",
    "updated_at": "2016-02-11T07:25:09Z",
    "author_association": "MEMBER",
    "body": "We _should not_ make using floats instead of ints for label based indexing (e.g., with `.loc`) error. I think we need to following the precedence of the Python dictionary here:\n\n```\nIn [16]: x = {1: 'one'}\n\nIn [17]: x[1.0]\nOut[17]: 'one'\n```\n\nI'm totally on board with making this error in cases were it was previously doing positional indexing (e.g., `.iloc`), though. That would be consistent with NumPy and base Python:\n\n```\nIn [18]: y = [1, 2]\n\nIn [19]: y[1.0]\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-19-d03a4798580f> in <module>()\n----> 1 y[1.0]\n\nTypeError: list indices must be integers or slices, not float\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/182861861",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-182861861",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 182861861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Mjg2MTg2MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-11T13:26:50Z",
    "updated_at": "2016-02-11T13:27:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is a giant rabbit hole.\n\nSorry about sending you down it :/\n\nI think I'm with @shoyer here. If two items compare as equal, _label_ getting / setting go through (assuming that's possible to implement, while still raising on positional getting/setting).\n\nThe additional thing we have to decide on is what casting to do when setting. Do we cast the label to be like the rest of the Index or the Index to be like the new label? FWIW NumPy will cast the new item for arrays\n\n``` python\nIn [40]: x = np.array([1, 2, 3], dtype='int64')\n\nIn [41]: x[1] = 2.0\n\nIn [42]: x.dtype\nOut[42]: dtype('int64')\n```\n\nOh, but they also do this even if the float can't be cast to an equal int. So setting `x[1] = 2.5` also truncates to 2. I don't think we can do that.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/182863277",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-182863277",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 182863277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Mjg2MzI3Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-11T13:31:32Z",
    "updated_at": "2016-02-11T13:31:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "So this comes down to: is `1.0` a key in an `Int64Index/RangeIndex` or is it not found, in which case we upcast the `Index` to either `Float64Index` or `object`\n\n```\nIn [1]: s = Series(range(3), range(3))\n\nIn [2]: s\nOut[2]: \n0    0\n1    1\n2    2\ndtype: int64\n```\n\nwhat should\n`s[1.0] = 5` do\n\nOption 1\nIn this PR (this looks kind of wrong to me, essentially \n\n```\nIn [6]: s[1.0] = 5     \n\nIn [7]: s\nOut[7]: \n0.0    0\n1.0    1\n2.0    2\n1.0    5\ndtype: int64\n\nIn [8]: s.index\nOut[8]: Float64Index([0.0, 1.0, 2.0, 1.0], dtype='float64')\n```\n\nOption 2\nand alternative is to upcast this\n\n```\nIn [10]: s2 = Series(range(4),index=Index([0,1,2,1.0],dtype=object))  \n\nIn [11]: s2.index\nOut[11]: Index([0, 1, 2, 1.0], dtype='object')\n\nIn [12]: s\nOut[12]: \n0.0    0\n1.0    1\n2.0    2\n1.0    5\ndtype: int64\n```\n\nOption 3\nThird we could make `1.0` match `1` (remember this is for `.loc/[]`, e.g. ONLY for label indexing), though `.ix` actually would NOT match this for positional so `.ix` would do the same\n\nand simply have\n\n```\nIn [2]: s\nOut[2]: \n0    0\n1    5\n2    2\ndtype: int64\n```\n\nThen there is the case where we are doing `s[0.1] = 5` (and option 3 is off the table).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/183403300",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-183403300",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 183403300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzQwMzMwMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-12T16:44:05Z",
    "updated_at": "2016-02-12T16:44:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok here's the revised setting behavior, I think its pretty natural\n\nthe value is coerced (gently) to the index type and regular indexing is performed\nthis only actually matters in the case of a float with an integer index (e.g. 0.0 -> 0)\nstrings and non-coercible floats (e.g. 4.1) will force conversion to `object` or `Float64Index` as appropriate.\n\n```\nIn [2]: s = Series(range(3))\n\nIn [3]: s2 = s.copy()\n\nIn [4]: s2[0] = 10\n\nIn [5]: s2.index\nOut[5]: RangeIndex(start=0, stop=3, step=1)\n\nIn [6]: s2 = s.copy()\n\nIn [7]: s2['0'] = 10\n\nIn [8]: s2.index\nOut[8]: Index([0, 1, 2, u'0'], dtype='object')\n\nIn [9]: s2 = s.copy()\n\nIn [10]: s2[0.0] = 10\n\nIn [11]: s2.index\nOut[11]: RangeIndex(start=0, stop=3, step=1)\n\nIn [12]: s2 = s.copy()\n\nIn [13]: s2[4] = 10\n\nIn [14]: s2.index\nOut[14]: Int64Index([0, 1, 2, 4], dtype='int64')\n\nIn [15]: s2 = s.copy()\n\nIn [16]: s2[4.0] = 10\n\nIn [17]: s2.index\nOut[17]: Int64Index([0, 1, 2, 4], dtype='int64')\n\nIn [18]: s2 = s.copy()\n\nIn [19]: s2[4.1] = 10\n\nIn [20]: s2.index\nOut[20]: Float64Index([0.0, 1.0, 2.0, 4.1], dtype='float64')\n```\n\nComparison to 0.17.1\ndifferences are a 2 bug fixes\nand no warning now issued (though I _could_ do that)\n\n```\nIn [3]: s = Series(range(3))\n\nIn [4]: s2 = s.copy()\n\nIn [5]: s2[0] = 10\n\nIn [6]: s2.index\nOut[6]: Int64Index([0, 1, 2], dtype='int64')\n\nIn [7]: s2 = s.copy()\n\n# this is wrong and a bug fix\nIn [8]: s2['0'] = 10\n\nIn [9]: s2.index\nOut[9]: Int64Index([0, 1, 2, 0], dtype='int64')\n\nIn [10]: s2 = s.copy()\n\n# warning issued in 0.17.1\nIn [11]: s2[0.0] = 10\n/Users/jreback/miniconda/lib/python2.7/site-packages/pandas/core/indexing.py:1063: FutureWarning: scalar indexers for index type Int64Index should be integers and not floating point\n  obj = self._convert_scalar_indexer(obj, axis)\n\nIn [12]: s2.index\nOut[12]: Int64Index([0, 1, 2], dtype='int64')\n\nIn [13]: s2 = s.copy()\n\nIn [14]: s2[4] = 10\n\nIn [15]: s2.index\nOut[15]: Int64Index([0, 1, 2, 4], dtype='int64')\n\nIn [16]: s2 = s.copy()\n\nIn [17]: s2[4.0] = 10\n\nIn [18]: s2.index\nOut[18]: Int64Index([0, 1, 2, 4], dtype='int64')\n\nIn [19]: s2 = s.copy()\n\n# this was buggy in 0.17.1\nIn [20]: s2[4.1] = 10\nIndexingError: 4.1\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/183457728",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-183457728",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 183457728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzQ1NzcyOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-12T19:26:34Z",
    "updated_at": "2016-02-12T19:26:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @shoyer @TomAugspurger @jorisvandenbossche \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/183458480",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-183458480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 183458480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzQ1ODQ4MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-12T19:29:40Z",
    "updated_at": "2016-02-12T19:29:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "At a glance those all look correct. Haven't had a chance to look through the code.\n\n:+1: to your general approach of coercing the new member to the Index type if possible, otherwise coerce the index. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/183700466",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-183700466",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 183700466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzcwMDQ2Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-13T16:41:49Z",
    "updated_at": "2016-02-13T16:41:49Z",
    "author_association": "MEMBER",
    "body": "Some after merge feedback:\n\nI took a look and I also like the logic now as how you explained it in your last post (for label based indexing: if the label evaluates as equal, then it is interpreted as the existing label)\n\nA few things:\n- The whatsnew needs to be updated (as it still says it raises now for all cases, as you started the PR)\n- (minor) When using `iloc` with a float (so the case it still should raise an error), the error message is not fully correct:\n  \n  ```\n  In [76]: s2 = s.copy()\n  \n  In [77]: s2.iloc[2.0] = 10\n  TypeError: cannot do label indexing on <class 'pandas.indexes.range.RangeIndex'>\n  with these indexers [2.0] of <type 'float'>\n  ```\n  \n  This is not 'label' indexing, but 'integer' or 'positional' indexing\n- The behaviour of using a float indexer with `ix` on a non-numerical index has changed:\n  \n  ```\n  In [78]: s3 = pd.Series(range(3), index=list('abc'))\n  \n  In [79]: s4 = s3.copy()\n  \n  In [80]: s4.ix[1.0] = 10\n  \n  In [81]: s4\n  Out[81]:\n  a       0\n  b       1\n  c       2\n  1.0    10\n  dtype: int64\n  \n  In [82]: s4.index\n  Out[82]: Index([u'a', u'b', u'c', 1.0], dtype='object')\n  \n  In [83]: pd.__version__\n  Out[83]: '0.17.1+350.g5f7c9e9'\n  ```\n  \n  and with 0.16.2\n  \n  ```\n  In [1]: pd.__version__\n  Out[1]: '0.16.2'\n  \n  In [2]: s3 = pd.Series(range(3), index=list('abc'))\n  \n  In [3]: s4 = s3.copy()\n  \n  In [4]: s4.ix[1.0] = 10\n  C:\\Anaconda\\lib\\site-packages\\pandas\\core\\index.py:805: FutureWarning: scalar i\n  dexers for index type Index should be integers and not floating point\n  type(self).__name__),FutureWarning)\n  \n  In [5]: s4\n  Out[5]:\n  a     0\n  b    10\n  c     2\n  dtype: int64\n  \n  In [6]: s4.index\n  Out[6]: Index([u'a', u'b', u'c'], dtype='object')\n  \n  ```\n  \n  The change is logical, as before the float was interpreted as a positional indexer (and for this the warning was raised). But now a float cannot be a positional indexer anymore, so it is interpreted as a new label. \n  To be clear, I think this change is OK, but just wanted to point out a case where this change will not raise an error but alter your results (worth mentioning in the whatsnew docs?)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/184385102",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-184385102",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 184385102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDM4NTEwMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-15T20:41:24Z",
    "updated_at": "2016-02-15T20:41:24Z",
    "author_association": "MEMBER",
    "body": "Actually, I don't yet agree with the behaviour of how it is now merged in this PR (but now only saw this by looking at your other PR for the doc issues https://github.com/pydata/pandas/pull/12330).\n\nWe had a discussion about what to do if a float (eg 1.0) evaluates as equal to a label (eg 1). Initially this raised, but after the discussion the behaviour was changed for setting:\n\n```\nIn [7]: s = pd.Series([1,2,3])\n\nIn [8]: s[0.0] = 10\n\nIn [9]: s\nOut[9]:\n0    10\n1     2\n2     3\ndtype: int64\n\nIn [10]: s.index\nOut[10]: RangeIndex(start=0, stop=3, step=1)\n```\n\nThis comment above gives an overview of this: https://github.com/pydata/pandas/pull/12246#issuecomment-183403300\n\nBut, the behaviour was not changed for getting, so the getting variant of the example above raises:\n\n```\nIn [11]: s[0.0]\nTypeError: cannot do label indexing on <class 'pandas.indexes.range.RangeIndex'>\n with these indexers [0.0] of <type 'float'>\n```\n\nWhich feels a bit inconsistent. And it is also, if I understand it correctly, what @shoyer opposed to:\n\n> We should not make using floats instead of ints for label based indexing (e.g., with .loc) error. I think we need to following the precedence of the Python dictionary here:\n> \n> In [16]: x = {1: 'one'}\n> \n> In [17]: x[1.0]\n> Out[17]: 'one'\n\n@jreback That is actually the reason I gave the comment to update the whatsnew notes, as I thought they were incorrect (assuming that not only setting was changed, but also getting)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/184387149",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-184387149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 184387149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDM4NzE0OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-15T20:47:00Z",
    "updated_at": "2016-02-15T20:47:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, for `[]/.ix` I _could_ agree with you (certainly not for `.loc/.iloc` though) as these are quite strict.\n\nIt comes down to whether we are actually indexing with a label or a position (and that of course is the ambiguity here).\n\n@shoyer comment is too simple for many of these cases. We have different indexers for this reason (and some legacy w.r.t. `[]`).\n\n@jorisvandenbossche can you enumerate when you think we ought to coerce by indexer?\n\nmaybe open a new issue.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/184388006",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12246#issuecomment-184388006",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12246",
    "id": 184388006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDM4ODAwNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-15T20:50:40Z",
    "updated_at": "2016-02-15T20:51:19Z",
    "author_association": "MEMBER",
    "body": "This just looks very odd:\n\n```\nIn [11]: s = pd.Series([1,2,3])\n\nIn [12]: s.loc[0.0] = 10\n\nIn [13]: s.loc[0.0]\nTypeError: cannot do label indexing on <class 'pandas.indexes.range.RangeIndex'>\n with these indexers [0.0] of <type 'float'>\n```\n\nAnd I don't think we should introduce even more differences between loc/ix/[] here.\n\nBut indeed, will open a new issue\n"
  }
]
