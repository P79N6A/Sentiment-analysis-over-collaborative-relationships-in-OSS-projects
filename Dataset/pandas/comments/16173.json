[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/298798395",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16173#issuecomment-298798395",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16173",
    "id": 298798395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODc5ODM5NQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T00:34:09Z",
    "updated_at": "2017-05-03T00:34:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting idea / package!  It seems like fairly niche functionality, so my initial reaction is that this makes more sense, at least for now, as a 3rd party library.  \r\n\r\nFYI, you may look at intercepting the output of the `ExcelFormatter` class that pandas uses, it already provides a sort of abstract mapping of the data to excel locations.\r\nhttps://github.com/pandas-dev/pandas/blob/39cc1d0685481c77115f061d856cc60c1e59c8c2/pandas/io/formats/excel.py#L308 \r\n\r\nAnd you've maybe already seen these, but if not, this page from the `xlsxwriter` docs might provide some examples of things to support/make easy.\r\nhttp://xlsxwriter.readthedocs.io/pandas_examples.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/299328991",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16173#issuecomment-299328991",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16173",
    "id": 299328991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTMyODk5MQ==",
    "user": {
      "login": "0Hughman0",
      "id": 16800307,
      "node_id": "MDQ6VXNlcjE2ODAwMzA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16800307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0Hughman0",
      "html_url": "https://github.com/0Hughman0",
      "followers_url": "https://api.github.com/users/0Hughman0/followers",
      "following_url": "https://api.github.com/users/0Hughman0/following{/other_user}",
      "gists_url": "https://api.github.com/users/0Hughman0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0Hughman0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0Hughman0/subscriptions",
      "organizations_url": "https://api.github.com/users/0Hughman0/orgs",
      "repos_url": "https://api.github.com/users/0Hughman0/repos",
      "events_url": "https://api.github.com/users/0Hughman0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0Hughman0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-04T22:40:15Z",
    "updated_at": "2017-05-04T22:40:15Z",
    "author_association": "NONE",
    "body": "Cheers! Yeah I think that's a fair comment!\r\n\r\nThanks for the suggestion, I'll definitely look into this. It has occurred to me that the logic for where each cell goes is in the codebase somewhere. This could be a better solution, as essentially I'm repeating logic (on where to place header rows etc).\r\n\r\nI've seen them, but I've not really thought of wrapping every one, but that is a nice idea. Might help with making the application seem less abstract.\r\n\r\nCheers."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/343104244",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16173#issuecomment-343104244",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16173",
    "id": 343104244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzEwNDI0NA==",
    "user": {
      "login": "0Hughman0",
      "id": 16800307,
      "node_id": "MDQ6VXNlcjE2ODAwMzA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16800307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0Hughman0",
      "html_url": "https://github.com/0Hughman0",
      "followers_url": "https://api.github.com/users/0Hughman0/followers",
      "following_url": "https://api.github.com/users/0Hughman0/following{/other_user}",
      "gists_url": "https://api.github.com/users/0Hughman0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0Hughman0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0Hughman0/subscriptions",
      "organizations_url": "https://api.github.com/users/0Hughman0/orgs",
      "repos_url": "https://api.github.com/users/0Hughman0/repos",
      "events_url": "https://api.github.com/users/0Hughman0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0Hughman0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T09:56:18Z",
    "updated_at": "2017-11-09T09:56:18Z",
    "author_association": "NONE",
    "body": "Hi!\r\n\r\nDunno if it's worth giving you an update, but whatever!\r\n\r\nThe project has come a long way since April. I completely re-implremented the 'excel map', both to simplify it, and also to make use of `ExcelFormatter`. Probably more significantly I've added a `XLMap.create_chart` method, that can generate complete chart object for both `xlsxwriter` and `openpyxl`.\r\n\r\nE.g.\r\n\r\n```\r\nimport random\r\nfrom xl_link import XLDataFrame\r\n\r\nf = XLDataFrame(columns=('X', 'Y1', 'Y2'),\r\n                         data={'X': range(10),\r\n                               'Y1': list(random.randrange(0, 10) for _ in range(10)),\r\n                               'Y2': list(random.randrange(0, 10) for _ in range(10))})\r\nf.set_index('X', inplace=True)\r\n\r\nxlmap = f.to_excel(writer, sheet_name='scatter', engine='openpyxl')\r\nscatter_chart = xlmap.create_chart('scatter', x_axis_name='x', y_axis_name='y', title='Scatter Example')\r\nxlmap.sheet.insert_chart('A1', scatter_chart)\r\nxlmap.writer.save()\r\n```\r\n![Produces this graph](https://github.com/0Hughman0/xl_link/raw/master/examples/ScatterExample.PNG)\r\n\r\nhttps://github.com/0Hughman0/xl_link\r\n\r\nI'd love to hear what you think."
  }
]
