[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429621266",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-429621266",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 429621266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTYyMTI2Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T12:11:01Z",
    "updated_at": "2018-10-14T12:11:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would think mkl would be more likely to blame / thank here, rather than bias. Can you try in an environment with `nomkl`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429623410",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-429623410",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 429623410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTYyMzQxMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T12:43:18Z",
    "updated_at": "2018-10-14T12:43:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "pandas doesn't explicity call any BLAS routines at all, or any offer an parallelism, except for dispatch to ``numexpr``, which doesn't apply here. Likely some numpy routines are actually dispatching to multiple threads."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429649905",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-429649905",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 429649905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTY0OTkwNQ==",
    "user": {
      "login": "stuarteberg",
      "id": 1655821,
      "node_id": "MDQ6VXNlcjE2NTU4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1655821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuarteberg",
      "html_url": "https://github.com/stuarteberg",
      "followers_url": "https://api.github.com/users/stuarteberg/followers",
      "following_url": "https://api.github.com/users/stuarteberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuarteberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuarteberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuarteberg/subscriptions",
      "organizations_url": "https://api.github.com/users/stuarteberg/orgs",
      "repos_url": "https://api.github.com/users/stuarteberg/repos",
      "events_url": "https://api.github.com/users/stuarteberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuarteberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T18:26:34Z",
    "updated_at": "2018-10-14T19:08:29Z",
    "author_association": "NONE",
    "body": ">Can you try in an environment with `nomkl`?\r\n\r\nYou're right!  I tried creating a fresh environment and experimented with the `openblas` vs. `mkl` builds of `blas`.  When `mkl` is active, I see strange parallelism as described above.  But when `mkl` is not active (e.g. via`conda install nomkl`), then I see single-threaded behavior.\r\n\r\n>pandas doesn't explicity call any BLAS routines at all [...] Likely some numpy routines are actually dispatching to multiple threads.\r\n\r\nI am not familiar with `pandas` internals, but naively, I think this is the function of interest:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/f6da1f1ec3b68a9210be158a693ac389076fa179/pandas/_libs/hashtable_func_helper.pxi.in#L75-L124\r\n\r\nI don't see anything suspicious in there, so I'm at a loss as to where the threads are coming from.  How is BLAS coming into play here?  (Or is `mkl` used for anything besides BLAS?)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429917306",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-429917306",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 429917306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTkxNzMwNg==",
    "user": {
      "login": "stuarteberg",
      "id": 1655821,
      "node_id": "MDQ6VXNlcjE2NTU4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1655821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuarteberg",
      "html_url": "https://github.com/stuarteberg",
      "followers_url": "https://api.github.com/users/stuarteberg/followers",
      "following_url": "https://api.github.com/users/stuarteberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuarteberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuarteberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuarteberg/subscriptions",
      "organizations_url": "https://api.github.com/users/stuarteberg/orgs",
      "repos_url": "https://api.github.com/users/stuarteberg/repos",
      "events_url": "https://api.github.com/users/stuarteberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuarteberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T16:13:24Z",
    "updated_at": "2018-10-15T16:13:24Z",
    "author_association": "NONE",
    "body": "Minor clarification: The pandas/numpy versions I mentioned in the OP are somewhat out-of-date, but this issue is easy to reproduce (on linux) using the most up-to-date packages from both `conda-forge` and also conda's `defaults` channel (since `mkl` is installed either way.)\r\n\r\nSimply try `conda create -n test pandas` and then run the test program above to see the behavior.  I guess this means anyone using `multiprocessing`, `pyspark`, or `dask` with a default conda install will see degraded performance if they call `value_counts()` (and maybe other functions)?.\r\n\r\nShould this issue be retagged as a Bug or Performance issue?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429918817",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-429918817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 429918817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTkxODgxNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T16:17:43Z",
    "updated_at": "2018-10-15T16:17:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do you actually observe lower performance when using one of those libraries in an environment with mkl? I may be wrong, but I thought that mkl handled oversubscription."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429922047",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-429922047",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 429922047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTkyMjA0Nw==",
    "user": {
      "login": "stuarteberg",
      "id": 1655821,
      "node_id": "MDQ6VXNlcjE2NTU4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1655821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuarteberg",
      "html_url": "https://github.com/stuarteberg",
      "followers_url": "https://api.github.com/users/stuarteberg/followers",
      "following_url": "https://api.github.com/users/stuarteberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuarteberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuarteberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuarteberg/subscriptions",
      "organizations_url": "https://api.github.com/users/stuarteberg/orgs",
      "repos_url": "https://api.github.com/users/stuarteberg/repos",
      "events_url": "https://api.github.com/users/stuarteberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuarteberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T16:27:20Z",
    "updated_at": "2018-10-15T16:27:20Z",
    "author_association": "NONE",
    "body": ">Do you actually observe lower performance when using one of those libraries in an environment with mkl?\r\n\r\nYes, it appears so.\r\n\r\nIn my case, I was running 16 processes on a 16-core machine.  But since each process was using openmp, they had 16 threads each, so my total thread count was in the 100s.  The code I was running happened to be dominated by `value_counts()`, so when I set `OMP_NUM_THREADS=1`, the thread count dropped down to normal, and my overall performance jumped up ~6x."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431162573",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-431162573",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 431162573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTE2MjU3Mw==",
    "user": {
      "login": "stuarteberg",
      "id": 1655821,
      "node_id": "MDQ6VXNlcjE2NTU4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1655821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuarteberg",
      "html_url": "https://github.com/stuarteberg",
      "followers_url": "https://api.github.com/users/stuarteberg/followers",
      "following_url": "https://api.github.com/users/stuarteberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuarteberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuarteberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuarteberg/subscriptions",
      "organizations_url": "https://api.github.com/users/stuarteberg/orgs",
      "repos_url": "https://api.github.com/users/stuarteberg/repos",
      "events_url": "https://api.github.com/users/stuarteberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuarteberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T21:03:52Z",
    "updated_at": "2018-10-19T01:29:57Z",
    "author_association": "NONE",
    "body": ">pandas doesn't explicity call any BLAS routines at all [...] Likely some numpy routines are actually dispatching to multiple threads.\r\n\r\nI did a little more digging, to see if functions besides`Series.value_counts()` also exhibit multi-core behavior.  Here are my results.  Maybe a core developer can take a look and discern a pattern.\r\n\r\n(In the statements below, `s` is a large `pd.Series` with random data.)\r\n\r\n<hr>\r\n\r\nOn my test machine, the following functions use every CPU core available, (consuming 80-100% of cycles per core).\r\n\r\n<details>\r\n\r\n<summary>Fully multicore functions</summary>\r\n\r\n```python\r\ns[:] = s[:]\r\n_ = (s == s)\r\n_ = (s != s)\r\n_ = s.all()\r\n_ = s.any()\r\n_ = s.between(3, 7)\r\n_ = s.copy()\r\n_ = s.corr(s)\r\n_ = s.cov(s)\r\n_ = s.cummax()\r\n_ = s.cummin()\r\n_ = s.cumprod()\r\n_ = s.cumsum()\r\n_ = s.describe()\r\n_ = s.drop_duplicates()\r\n_ = s.dropna()\r\n_ = s.duplicated()\r\n_ = s.idxmax()\r\n_ = s.idxmin()\r\n_ = s.interpolate()\r\n_ = s.kurt()\r\n_ = s.kurtosis()\r\n_ = s.mad()\r\n_ = s.mask(cond)\r\n_ = s.max()\r\n_ = s.mean()\r\n_ = s.median()\r\n_ = s.min()\r\n_ = s.mode()\r\n_ = s.nlargest(10)\r\n_ = s.nsmallest(10)\r\n_ = s.pct_change()\r\n_ = s.ptp()\r\n_ = s.quantile()\r\n_ = s.reindex()\r\n_ = s.replace(1, 5) # Compare with 'inplace' call\r\n_ = s.reset_index(drop=True)\r\n_ = s.sem()\r\n_ = s.skew()\r\n_ = s.sort_index()\r\n_ = s.value_counts()\r\n```\r\n\r\n</details>\r\n<hr>\r\n\r\nThe following functions use all 16 CPU cores, but not at 100%, indicating that they are probably calling one of the above functions, but the majority of their time is spent in a single thread.\r\n\r\n<details>\r\n\r\n<summary>Partially multi-core functions</summary>\r\n\r\n```python\r\n_ = s.align(s2) \r\n_ = s.eq(s2)\r\n_ = s.ne(s2)\r\n_ = s.rank()\r\n_ = s.sort_values()\r\n```\r\n\r\n</details>\r\n\r\n<hr>\r\n\r\nThe following functions use only 3 CPU cores (at 100%), so maybe they are using a different parallelization mechanism:\r\n\r\n<details>\r\n\r\n<summary>Moderately parallelized functions</summary>\r\n\r\n```python\r\n# Exactly 3 cores\r\n_ = s.div(s)\r\n_ = s.divide(s)\r\n_ = s.rdiv(s) # Exactly 3 cores\r\n```\r\n\r\n</details>\r\n\r\n<hr>\r\n\r\nAnd the following functions use exactly 1 core:\r\n\r\n<details>\r\n\r\n<summary>Single-threaded functions</summary>\r\n\r\n```python\r\n_ = s.abs()\r\n_ = s.add(s)\r\n_ = s.agg(lambda s: s+1)\r\n_ = s.clip(3, 7)\r\n_ = s.clip_lower(3)\r\n_ = s.clip_upper(7)\r\n_ = s.combine(s2, lambda a,b: a+b)\r\n_ = s.combine_first(s2)\r\n_ = s.compound()\r\n_ = s.count()\r\n_ = s.diff()\r\n_ = s.dot(s) # Really???\r\n_ = s.dot(s2) # Really???\r\n_ = s.drop(3)\r\n_ = s.equals(s) # Compare with s.eq(s)\r\n_ = s.ge(s) # compare with s.eq(s)\r\n_ = s.groupby(s % 2)\r\n_ = s.groupby(s % 2).sum()\r\n_ = s.gt(s) # compare with s.eq(s)\r\n_ = s.isin([3,4,5])\r\n_ = s.isna()\r\n_ = s.isnull()\r\n_ = s.le(s)\r\n_ = s.lt(s)\r\n_ = s.map(lambda x: x+2)\r\n_ = s.mod(s)\r\n_ = s.mul(s)\r\n_ = s.multiply(s)\r\n_ = s.nonzero()\r\n_ = s.notna()\r\n_ = s.notnull()\r\n_ = s.nunique()\r\n_ = s.prod()\r\n_ = s.product()\r\n_ = s.radd(s)\r\n_ = s.replace(1, 5, inplace=True) # Compare with non-inplace call\r\n_ = s.sample(1000)\r\n_ = s.tolist()\r\n_ = s.unique()\r\n```\r\n\r\n</details>\r\n\r\n<hr>\r\n\r\n\r\nSome interesting observations:\r\n\r\n- Apparently there is a big difference between `(s == s)` (uses all cores) and `s.eq(s)` (mostly single-threaded).\r\n- There is a big difference in running `s.replace(..., inplace=True)` vs. `s.replace(..., inplace=False)`, indicating that the multi-CPU usage in the latter case is due to the creation of a new Series for the result.\r\n- Given that we think the multi-core behavior is related to `mkl` and/or BLAS functions, I expected `np.dot` to use multiple cores.  But to my surprise, it uses only a single core.\r\n- Interestingly, `s.any()` and `s.all()` use multiple cores, but the numpy equivalents `np.all()` and `np.any()` do not.\r\n\r\n---\r\n\r\n\r\n**TEST SETUP:**\r\n\r\nThe above statements were tested in Python, by inserting them into the `for`-loop shown below.  Then I just looked at `htop` to see how many CPUs were being used.\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\na = np.random.randint(10, size=20_000_000)\r\ns = pd.Series(a)\r\ns2 = s.iloc[::-1].reindex().copy()\r\n\r\nfor _ in range(50):\r\n    {{STATEMENT}}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431217337",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-431217337",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 431217337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTIxNzMzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T01:38:32Z",
    "updated_at": "2018-10-19T01:38:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "any kind of parallism is likely from numexpr\r\nwhich we use in expressions and comparisons\r\neg df + 1 or df == 1"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431224967",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-431224967",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 431224967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTIyNDk2Nw==",
    "user": {
      "login": "stuarteberg",
      "id": 1655821,
      "node_id": "MDQ6VXNlcjE2NTU4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1655821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuarteberg",
      "html_url": "https://github.com/stuarteberg",
      "followers_url": "https://api.github.com/users/stuarteberg/followers",
      "following_url": "https://api.github.com/users/stuarteberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuarteberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuarteberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuarteberg/subscriptions",
      "organizations_url": "https://api.github.com/users/stuarteberg/orgs",
      "repos_url": "https://api.github.com/users/stuarteberg/repos",
      "events_url": "https://api.github.com/users/stuarteberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuarteberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T02:28:18Z",
    "updated_at": "2018-10-19T02:28:18Z",
    "author_association": "NONE",
    "body": ">any kind of parallism is likely from numexpr\r\n>which we use in expressions and comparisons\r\n>eg df + 1 or df == 1\r\n\r\nOK, that explains why `(s == s)` uses all cores.\r\n\r\nEven so, it seems strange that `s.copy()` uses all cores.  Does `Series.copy()` use `numexpr`?\r\n\r\nAlso, does the `numexpr` theory explain the difference between the following two lines?\r\n\r\n```\r\ns.replace(1, 2, inplace=True)  # 1 core\r\ns.replace(1, 2, inplace=False) # 16 cores\r\n```\r\n\r\n(Sorry if that's a dumb question; I don't know much about the pandas internals.)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431322749",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-431322749",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 431322749,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTMyMjc0OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T10:45:34Z",
    "updated_at": "2018-10-19T10:45:34Z",
    "author_association": "CONTRIBUTOR",
    "body": ".copy() is ultimately just np.copy at lowest level\r\nok multiple arrays (index and values)\r\n\r\nall operations call .copy (except inplace)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431382341",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-431382341",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 431382341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTM4MjM0MQ==",
    "user": {
      "login": "stuarteberg",
      "id": 1655821,
      "node_id": "MDQ6VXNlcjE2NTU4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1655821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuarteberg",
      "html_url": "https://github.com/stuarteberg",
      "followers_url": "https://api.github.com/users/stuarteberg/followers",
      "following_url": "https://api.github.com/users/stuarteberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuarteberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuarteberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuarteberg/subscriptions",
      "organizations_url": "https://api.github.com/users/stuarteberg/orgs",
      "repos_url": "https://api.github.com/users/stuarteberg/repos",
      "events_url": "https://api.github.com/users/stuarteberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuarteberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T14:29:02Z",
    "updated_at": "2018-10-19T14:29:02Z",
    "author_association": "NONE",
    "body": ">.copy() is ultimately just np.copy at lowest level\r\n\r\nNice tip, thanks.  OK, I verified that, yes, `np.copy(a)` does indeed use all cores.  So that explains many of the above results.\r\n\r\nHowever, some are still mysterious, e.g. `Series.any()` is multicore.  I thought the `numexpr` theory might explain it, but then I tried ` export NUMEXPR_NUM_THREADS=1` before running my test.  It seems to make no difference -- `s.any()` still uses all cores, while `np.any(a)` does not.\r\n\r\nIn any case, I'm sure there's no way to avoid `np.copy()` in the pandas internals, even if you wanted to, so the best we can do is put a strong warning in the documentation to encourage users to use `OMP_NUM_THREADS=1` before they run their code.\r\n\r\nFWIW, there seems to be a related discussion in the numpy repo: https://github.com/numpy/numpy/issues/11826\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431383418",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-431383418",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 431383418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTM4MzQxOA==",
    "user": {
      "login": "stuarteberg",
      "id": 1655821,
      "node_id": "MDQ6VXNlcjE2NTU4MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1655821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuarteberg",
      "html_url": "https://github.com/stuarteberg",
      "followers_url": "https://api.github.com/users/stuarteberg/followers",
      "following_url": "https://api.github.com/users/stuarteberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuarteberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuarteberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuarteberg/subscriptions",
      "organizations_url": "https://api.github.com/users/stuarteberg/orgs",
      "repos_url": "https://api.github.com/users/stuarteberg/repos",
      "events_url": "https://api.github.com/users/stuarteberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuarteberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T14:32:17Z",
    "updated_at": "2018-10-19T14:32:43Z",
    "author_association": "NONE",
    "body": ">the best we can do is put a strong warning in the documentation to encourage users to use `OMP_NUM_THREADS=1` before they run their code.\r\n\r\nI'll write something up.  Which section(s) of the docs should I edit?  I think the following sections are candidates:\r\n\r\n- [Install](https://pandas.pydata.org/pandas-docs/stable/install.html)\r\n- [Enhancing Performance](https://pandas.pydata.org/pandas-docs/stable/enhancingperf.html)\r\n- [FAQ](https://pandas.pydata.org/pandas-docs/stable/gotchas.html)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/431439454",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23139#issuecomment-431439454",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23139",
    "id": 431439454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTQzOTQ1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T17:33:54Z",
    "updated_at": "2018-10-19T17:33:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "a section in FAQ i think would be good"
  }
]
