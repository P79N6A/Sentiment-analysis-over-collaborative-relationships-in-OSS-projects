[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461657132",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25211#issuecomment-461657132",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25211",
    "id": 461657132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTY1NzEzMg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T01:18:58Z",
    "updated_at": "2019-02-08T01:18:58Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report! That does seem strange that NA is required here. \r\n\r\nInvestigation and PRs are always welcome"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461745397",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25211#issuecomment-461745397",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25211",
    "id": 461745397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTc0NTM5Nw==",
    "user": {
      "login": "vladserkoff",
      "id": 9671366,
      "node_id": "MDQ6VXNlcjk2NzEzNjY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9671366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vladserkoff",
      "html_url": "https://github.com/vladserkoff",
      "followers_url": "https://api.github.com/users/vladserkoff/followers",
      "following_url": "https://api.github.com/users/vladserkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/vladserkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vladserkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vladserkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/vladserkoff/orgs",
      "repos_url": "https://api.github.com/users/vladserkoff/repos",
      "events_url": "https://api.github.com/users/vladserkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vladserkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T09:41:27Z",
    "updated_at": "2019-02-08T09:41:27Z",
    "author_association": "NONE",
    "body": "I've found the source of the discrepancy between the arrays with and without NA, it's in `pandas.core.arrays.integer.coerce_to_array`:\r\nhttps://github.com/pandas-dev/pandas/blob/0eddba88332e9b7f41b838e503c155f7ebe4d9a1/pandas/core/arrays/integer.py#L179\r\nhttps://github.com/pandas-dev/pandas/blob/0eddba88332e9b7f41b838e503c155f7ebe4d9a1/pandas/core/arrays/integer.py#L190-L192\r\nWhen `np.array` is called on an array with NAs it casts the arrays to float:\r\n```python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: np.array([False, True]).dtype\r\nOut[2]: dtype('bool')\r\n\r\nIn [3]: np.array([False, True, np.nan]).dtype\r\nOut[3]: dtype('float64')\r\n```\r\nThough I'm not sure how to handle this properly, should we cast boolean arrays to numpy floats first?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462093946",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25211#issuecomment-462093946",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25211",
    "id": 462093946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjA5Mzk0Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-10T00:59:28Z",
    "updated_at": "2019-02-10T00:59:28Z",
    "author_association": "MEMBER",
    "body": "> should we cast boolean arrays to numpy floats first?\r\n\r\nI would prefer casting to `int` actually.  This approach seems a little special-casey, but trying to modify EA logic is by no means straightforward and has its own landmines.  Give this a shot!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462287001",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25211#issuecomment-462287001",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25211",
    "id": 462287001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjI4NzAwMQ==",
    "user": {
      "login": "vladserkoff",
      "id": 9671366,
      "node_id": "MDQ6VXNlcjk2NzEzNjY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9671366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vladserkoff",
      "html_url": "https://github.com/vladserkoff",
      "followers_url": "https://api.github.com/users/vladserkoff/followers",
      "following_url": "https://api.github.com/users/vladserkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/vladserkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vladserkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vladserkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/vladserkoff/orgs",
      "repos_url": "https://api.github.com/users/vladserkoff/repos",
      "events_url": "https://api.github.com/users/vladserkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vladserkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-11T10:54:12Z",
    "updated_at": "2019-02-11T10:57:51Z",
    "author_association": "NONE",
    "body": "Well, my PR seems to fix this issue but the tests are failing with several similar errors:\r\n```python-traceback\r\npandas/tests/extension/base/ops.py:33: AssertionError\r\n___________ TestComparisonOps.test_compare_scalar[__gt__-Int32Dtype] ___________\r\n[gw0] darwin -- Python 3.5.6 /Users/vsts/miniconda3/envs/pandas-dev/bin/python\r\n\r\nself = <pandas.tests.extension.test_integer.TestComparisonOps object at 0x1378eb470>\r\ndata = <IntegerArray>\r\n[  1,   2,   3,   4,   5,   6,   7,   8, NaN,  10,  11,  12,  13,  14,  15,\r\n  16,  17,  18,  19,  20,  ...2,  83,  84,  85,  86,  87,  88,  89,  90,\r\n  91,  92,  93,  94,  95,  96,  97, NaN,  99, 100]\r\nLength: 100, dtype: Int32\r\nall_compare_operators = '__gt__'\r\n\r\n    def test_compare_scalar(self, data, all_compare_operators):\r\n        op_name = all_compare_operators\r\n        s = pd.Series(data)\r\n>       self._compare_other(s, data, op_name, 0)\r\n\r\npandas/tests/extension/base/ops.py:148: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\npandas/tests/extension/test_integer.py:154: in _compare_other\r\n    self.check_opname(s, op_name, other)\r\npandas/tests/extension/test_integer.py:151: in check_opname\r\n    other, exc=None)\r\npandas/tests/extension/base/ops.py:27: in check_opname\r\n    self._check_op(s, op, other, op_name, exc)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <pandas.tests.extension.test_integer.TestComparisonOps object at 0x1378eb470>\r\ns = 0       1\r\n1       2\r\n2       3\r\n3       4\r\n4       5\r\n5       6\r\n6       7\r\n7       8\r\n8     NaN\r\n9      10\r\n10     11\r\n11     1... 91\r\n91     92\r\n92     93\r\n93     94\r\n94     95\r\n95     96\r\n96     97\r\n97    NaN\r\n98     99\r\n99    100\r\nLength: 100, dtype: Int32\r\nop = <built-in function gt>, other = 0, op_name = '__gt__', exc = None\r\n\r\n    def _check_op(self, s, op, other, op_name, exc=NotImplementedError):\r\n        if exc is None:\r\n            result = op(s, other)\r\n            expected = s.combine(other, op)\r\n>           self.assert_series_equal(result, expected)\r\nE           AssertionError: Attributes are different\r\nE           \r\nE           Attribute \"dtype\" are different\r\nE           [left]:  bool\r\nE           [right]: Int64\r\n```\r\nIt looks like that these should not be related, and I'd be happy for any help clarifying it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462384570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25211#issuecomment-462384570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25211",
    "id": 462384570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjM4NDU3MA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-11T16:06:14Z",
    "updated_at": "2019-02-11T16:06:14Z",
    "author_association": "MEMBER",
    "body": "@vladserkoff : This is what I was referring to when I was talking about how trying to modify EA logic is by no means straightforward and has its own landmines.\r\n\r\nI would try casting before you hit any of the EA logic."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462694916",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25211#issuecomment-462694916",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25211",
    "id": 462694916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjY5NDkxNg==",
    "user": {
      "login": "vladserkoff",
      "id": 9671366,
      "node_id": "MDQ6VXNlcjk2NzEzNjY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9671366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vladserkoff",
      "html_url": "https://github.com/vladserkoff",
      "followers_url": "https://api.github.com/users/vladserkoff/followers",
      "following_url": "https://api.github.com/users/vladserkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/vladserkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vladserkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vladserkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/vladserkoff/orgs",
      "repos_url": "https://api.github.com/users/vladserkoff/repos",
      "events_url": "https://api.github.com/users/vladserkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vladserkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T09:59:53Z",
    "updated_at": "2019-02-12T09:59:53Z",
    "author_association": "NONE",
    "body": "@gfyoung, thanks. I've left the fix where it was, only made sure to not cast to int if the target dtype is not an integer. Tests are now ok, except for an unrelated ImportError in a windows test:\r\n\r\n<details>\r\n\r\n```python-traceback\r\n_____________________________ test_oo_optimizable _____________________________\r\n[gw1] win32 -- Python 2.7.15 C:\\Miniconda\\envs\\pandas-dev\\python.exe\r\n\r\n    def test_oo_optimizable():\r\n        # GH 21071\r\n>       subprocess.check_call([sys.executable, \"-OO\", \"-c\", \"import pandas\"])\r\n\r\npandas\\tests\\test_downstream.py:63: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\npopenargs = (['C:\\\\Miniconda\\\\envs\\\\pandas-dev\\\\python.exe', '-OO', '-c', 'import pandas'],)\r\nkwargs = {}, retcode = 1\r\ncmd = ['C:\\\\Miniconda\\\\envs\\\\pandas-dev\\\\python.exe', '-OO', '-c', 'import pandas']\r\n\r\n    def check_call(*popenargs, **kwargs):\r\n        \"\"\"Run command with arguments.  Wait for command to complete.  If\r\n        the exit code was zero then return, otherwise raise\r\n        CalledProcessError.  The CalledProcessError object will have the\r\n        return code in the returncode attribute.\r\n    \r\n        The arguments are the same as for the Popen constructor.  Example:\r\n    \r\n        check_call([\"ls\", \"-l\"])\r\n        \"\"\"\r\n        retcode = call(*popenargs, **kwargs)\r\n        if retcode:\r\n            cmd = kwargs.get(\"args\")\r\n            if cmd is None:\r\n                cmd = popenargs[0]\r\n>           raise CalledProcessError(retcode, cmd)\r\nE           CalledProcessError: Command '['C:\\\\Miniconda\\\\envs\\\\pandas-dev\\\\python.exe', '-OO', '-c', 'import pandas']' returned non-zero exit status 1\r\n\r\nC:\\Miniconda\\envs\\pandas-dev\\lib\\subprocess.py:190: CalledProcessError\r\n---------------------------- Captured stderr call -----------------------------\r\nTraceback (most recent call last):\r\n\r\n  File \"<string>\", line 1, in <module>\r\n\r\n  File \"pandas\\__init__.py\", line 35, in <module>\r\n\r\n    \"the C extensions first.\".format(module))\r\n\r\nImportError: C extension: DLL load failed: The parameter is incorrect. not built. If you want to import pandas from the source directory, you may need to run 'python setup.py build_ext --inplace --force' to build the C extensions first.\r\n```\r\n</details> \r\n  \r\nUnfortunately Codecov is down by 50%, and I'm afraid I can't fix this as I'm new to it."
  }
]
