[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3254153",
    "html_url": "https://github.com/pandas-dev/pandas/issues/526#issuecomment-3254153",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/526",
    "id": 3254153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTQxNTM=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-22T20:07:17Z",
    "updated_at": "2011-12-22T20:07:17Z",
    "author_association": "MEMBER",
    "body": "Let me guess...you've got lists of JSON objects? =P\n\nthis works for example:\n\n```\nIn [4]: DataFrame.from_dict(dict(zip(range(2), [dict(a=1,c=1,d=True),dict(b=2,c='abc')])), orient='index')\nOut[4]: \n   a    b    c    d  \n0  1    NaN  1    1  \n1  NaN  2    abc  NaN\n```\n\nbut I agree with you that the constructor should be able to figure out a list of dicts without having to type so much. I'll look at your impl and cook up something similar / fast as possible.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3254294",
    "html_url": "https://github.com/pandas-dev/pandas/issues/526#issuecomment-3254294",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/526",
    "id": 3254294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTQyOTQ=",
    "user": {
      "login": "gregglind",
      "id": 163983,
      "node_id": "MDQ6VXNlcjE2Mzk4Mw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/163983?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregglind",
      "html_url": "https://github.com/gregglind",
      "followers_url": "https://api.github.com/users/gregglind/followers",
      "following_url": "https://api.github.com/users/gregglind/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregglind/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregglind/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregglind/subscriptions",
      "organizations_url": "https://api.github.com/users/gregglind/orgs",
      "repos_url": "https://api.github.com/users/gregglind/repos",
      "events_url": "https://api.github.com/users/gregglind/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregglind/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-22T20:19:42Z",
    "updated_at": "2011-12-22T20:19:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "My data does mostly come in from JSON, and I have to transform it.  I\nwrote a mutant jsonpath / jquery sort of of way to 'flatten' out\njson/mongo structures into 'table-ish' (row-column) things, which is\nalready gross enough!  My current temptation is to use R (because, for\nthe life of me, I don't grok numpy indexing / slicing), but pandas\nDataFrame feels right :)\n\nEventually, I want to make my exploratory stuff as simple as possible,\nas described in previous rants!\n\nNote:  If the default 'use all columns that appear in any' is desired\n(which feels 'more right' to me):\n\n```\n        from itertools import chain\n        columns = sorted(\n            set(chain(*(x.keys() for x in data)))\n        )\n```\n\nIt's worth thinking about if this is something you want to actually\ninclude.  It think this is fixable only patching\n`pandas/core/frame.py:DataFrame`, `docs`, and `tests`.    That\nwhole set of code could stand an interface / behavior / documentation\nreview.  Lots of `isinstance` and other hidden assumptions (like\ntending to privilege whatever goes on in row[0]).\n\nThanks for reviewing the idea!  (and sorry that the `iget` is so\ngross!  It should have to hide in utils as punishment)\n\nGL\n\nOn Thu, Dec 22, 2011 at 2:07 PM, Wes McKinney\nreply@reply.github.com\nwrote:\n\n> Let me guess...you've got lists of JSON objects? =P\n> \n> this works for example:\n> \n> ```\n> In [4]: DataFrame.from_dict(dict(zip(range(2), [dict(a=1,c=1,d=True),dict(b=2,c='abc')])), orient='index')\n> Out[4]:\n>   a    b    c    d\n> 0  1    NaN  1    1\n> 1  NaN  2    abc  NaN\n> ```\n> \n> but I agree with you that the constructor should be able to figure out a list of dicts without having to type so much. I'll look at your impl and cook up something similar / fast as possible.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/wesm/pandas/issues/526#issuecomment-3254153\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3254449",
    "html_url": "https://github.com/pandas-dev/pandas/issues/526#issuecomment-3254449",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/526",
    "id": 3254449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTQ0NDk=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-22T20:32:41Z",
    "updated_at": "2011-12-22T20:32:41Z",
    "author_association": "MEMBER",
    "body": "I think  'use all columns that appear in any' is the right default behavior unless a set of columns is explicitly passed (in which case obviously just use those). This would probably also be a good time to review all the dict-creation routines and set up some vbench action for them too (http://pandas.sourceforge.net/vbench.html). I'm kind of performance obsessed (!) if that hasn't come through yet, so I suspect I can come up with a pretty performant way of processing the data into the right form.\n\nAs far as giving privilege to the first element of a list...well, if a user passes a list of differently-typed objects, that is most likely going to blow up. In practice that is pretty rare so I'm willing to live with it. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3254516",
    "html_url": "https://github.com/pandas-dev/pandas/issues/526#issuecomment-3254516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/526",
    "id": 3254516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTQ1MTY=",
    "user": {
      "login": "gregglind",
      "id": 163983,
      "node_id": "MDQ6VXNlcjE2Mzk4Mw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/163983?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregglind",
      "html_url": "https://github.com/gregglind",
      "followers_url": "https://api.github.com/users/gregglind/followers",
      "following_url": "https://api.github.com/users/gregglind/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregglind/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregglind/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregglind/subscriptions",
      "organizations_url": "https://api.github.com/users/gregglind/orgs",
      "repos_url": "https://api.github.com/users/gregglind/repos",
      "events_url": "https://api.github.com/users/gregglind/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregglind/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-22T20:39:17Z",
    "updated_at": "2011-12-22T20:39:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Let me know if you want design or code review on any of it!  I will be\nposting my jsonpath-ish stuff soon, which is allied to pandas.\n\n(eventually, I want to write bridge code to use DataFrames in orange as well)\n\nGL\n\nOn Thu, Dec 22, 2011 at 2:32 PM, Wes McKinney\nreply@reply.github.com\nwrote:\n\n> I think  'use all columns that appear in any' is the right default behavior unless a set of columns is explicitly passed (in which case obviously just use those). This would probably also be a good time to review all the dict-creation routines and set up some vbench action for them too (http://pandas.sourceforge.net/vbench.html). I'm kind of performance obsessed (!) if that hasn't come through yet, so I suspect I can come up with a pretty performant way of processing the data into the right form.\n> \n> As far as giving privilege to the first element of a list...well, if a user passes a list of differently-typed objects, that is most likely going to blow up. In practice that is pretty rare so I'm willing to live with it.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/wesm/pandas/issues/526#issuecomment-3254449\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3254767",
    "html_url": "https://github.com/pandas-dev/pandas/issues/526#issuecomment-3254767",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/526",
    "id": 3254767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTQ3Njc=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-22T20:59:25Z",
    "updated_at": "2011-12-22T20:59:25Z",
    "author_association": "MEMBER",
    "body": "Cool. I think that would be very valuable (on both fronts). I'd be happy to have json-related tools in pandas, I'm eventually going to need to write up DataFrame with JS data visualization in the browser\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3256843",
    "html_url": "https://github.com/pandas-dev/pandas/issues/526#issuecomment-3256843",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/526",
    "id": 3256843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTY4NDM=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-23T00:41:17Z",
    "updated_at": "2011-12-23T00:41:17Z",
    "author_association": "MEMBER",
    "body": "I implemented this in the above commit. I guess you piqued my interest :) btw the implementation (utilizing Cython routines) above is roughly 6x faster than the one in the gist above. The Cython routine I have that implements\n\n```\nfrom itertools import chain\ncolumns = sorted(\n    set(chain(*(x.keys() for x in data)))\n)\n```\n\nbeats it by about 35%. Though I do love the simple elegance of itertools and generators\n"
  }
]
