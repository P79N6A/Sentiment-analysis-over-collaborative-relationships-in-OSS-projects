[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264715864",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14794#issuecomment-264715864",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14794",
    "id": 264715864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDcxNTg2NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-04T17:02:00Z",
    "updated_at": "2016-12-04T17:02:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\nIn [4]: list(zip(*T))\r\nOut[4]: [(0, 0, 0, 0, 0, 0, 0)]\r\n```\r\n\r\nis what we do with a list-of-tuples (though), first making a list of this before hand doesn't change the result.\r\n\r\nI am not sure of what *zip* does with unbalanced tuples.\r\n\r\nSo in this case we should be raising (``.from_arrays`` will raise with unbalanced input arrays, which was a recent change).\r\n\r\nSo if you can figure out a nice performant way to zip these (w/o losing things), all ears."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264917532",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14794#issuecomment-264917532",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14794",
    "id": 264917532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDkxNzUzMg==",
    "user": {
      "login": "groutr",
      "id": 10678620,
      "node_id": "MDQ6VXNlcjEwNjc4NjIw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10678620?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/groutr",
      "html_url": "https://github.com/groutr",
      "followers_url": "https://api.github.com/users/groutr/followers",
      "following_url": "https://api.github.com/users/groutr/following{/other_user}",
      "gists_url": "https://api.github.com/users/groutr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/groutr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/groutr/subscriptions",
      "organizations_url": "https://api.github.com/users/groutr/orgs",
      "repos_url": "https://api.github.com/users/groutr/repos",
      "events_url": "https://api.github.com/users/groutr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/groutr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T17:24:33Z",
    "updated_at": "2016-12-05T17:24:33Z",
    "author_association": "NONE",
    "body": "Zip terminates at the shortest iterable.  As I mentioned in my first post, `itertools.zip_longest` (from the standard library) is the ways to solve that (https://docs.python.org/3/library/itertools.html#itertools.zip_longest).  What my questions were trying to get at was if there were any underlying reasons for the behavior.\r\n\r\nI see that list(zip(*tuples)) seems to do a transpose.\r\n```\r\nIn []: list(T55)\r\nOut[]:\r\n[(0, 1, 2, 3, 4),\r\n (0, 1, 2, 3, 4),\r\n (0, 1, 2, 3, 4),\r\n (0, 1, 2, 3, 4),\r\n (0, 1, 2, 3, 4)]\r\nIn []: list(zip(*T55))\r\nOut[]:\r\n[(0, 0, 0, 0, 0),\r\n (1, 1, 1, 1, 1),\r\n (2, 2, 2, 2, 2),\r\n (3, 3, 3, 3, 3),\r\n (4, 4, 4, 4, 4)]\r\n```\r\n\r\nI'd propose the following the if statement.\r\n```python\r\n        elif isinstance(tuples, Sequence):     # Sequence is an abstract class from collections.abc\r\n            arrays = list(lib.to_object_array_tuples(list(tuples)).T)\r\n        else:\r\n            arrays = list(zip_longest(*tuples))\r\n```\r\nBut, if the elif is checking that tuples is a Sequence, then I think the else clause is largely unnecessary, because if tuples is a sequence, then lib.to_object_array_tuples should be able to handle it.  In fact, the call to `to_object_array_tuples` maybe wholly unneeded because we can pass a list of tuples directly to MultiIndex.from_arrays (zip_longest will ensure that each inner tuple is the same length)\r\n\r\nMaybe the else clause should raise an error if tuples isn't a sequence.  This avoids the need to zip anything, unless I'm misunderstanding how lib.to_object_array_tuples can fail.\r\n```python\r\n        elif isinstance(tuples, Sequence):\r\n            arrays = list(zip_longest(*tuples))\r\n        else:\r\n            raise ValueError(\"tuples must be a sequence\")\r\n        return MultiIndex.from_arrays(arrays, ...)\r\n```\r\n\r\nUpon further investigation, to_object_array_tuples appears to mostly reimplement zip_longest.  It seems for small iterables, zip_longest is can be much faster.  Though for longer iterables, to_object_array_tuples starts to get an edge (timings done with python 3.5).  Should we optimize index creation between large and small indexes?\r\n```\r\n# d55 = list of tuples like T (from OP) k=55\r\nzip_longest = 19.9us\r\nto_object_array_tuples: 15.5us\r\n\r\n#where k = 20\r\nzip_longest = 3.74us\r\nto_object_array_tuples = 4.84us\r\n\r\n# k =10\r\nzip_longest = 1.46us\r\nto_object_array_tuples = 3.35us\r\n```\r\nIf you prefer to discuss code details in a PR, I can open one tonight."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264983040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14794#issuecomment-264983040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14794",
    "id": 264983040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDk4MzA0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-05T21:29:35Z",
    "updated_at": "2016-12-05T21:29:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "not sure of the original rationale for having all of the clauses in the if\r\n\r\nso feel free to see what happens if you add your examples as a test (and make changes as u suggest)"
  }
]
