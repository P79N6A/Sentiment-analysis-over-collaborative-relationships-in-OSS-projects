[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454527961",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24784#issuecomment-454527961",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24784",
    "id": 454527961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDUyNzk2MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T19:53:01Z",
    "updated_at": "2019-01-15T19:53:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "The source for these are in https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_timeseries.py if you want to look further."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/457856511",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24784#issuecomment-457856511",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24784",
    "id": 457856511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg1NjUxMQ==",
    "user": {
      "login": "matmcnic",
      "id": 15078200,
      "node_id": "MDQ6VXNlcjE1MDc4MjAw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15078200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matmcnic",
      "html_url": "https://github.com/matmcnic",
      "followers_url": "https://api.github.com/users/matmcnic/followers",
      "following_url": "https://api.github.com/users/matmcnic/following{/other_user}",
      "gists_url": "https://api.github.com/users/matmcnic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matmcnic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matmcnic/subscriptions",
      "organizations_url": "https://api.github.com/users/matmcnic/orgs",
      "repos_url": "https://api.github.com/users/matmcnic/repos",
      "events_url": "https://api.github.com/users/matmcnic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matmcnic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-26T19:03:45Z",
    "updated_at": "2019-01-27T01:44:32Z",
    "author_association": "NONE",
    "body": "I looked at the source but I was unable to determine the cause of the error.\r\n\r\nBelow is some more info that may be helpul...\r\n\r\nIt looks like the epoch is correct and the locator is correct, but the formatter's conversion to string is not correct.\r\n\r\nIn the attached output image and sample I use my formatter to show the epoch for the minor ticks and the internal formatter to show the date string for the  major ticks. When I use my formatter it puts out the correct 1970 epoch numbers for each data point (2018-01-01 is 17532, etc.) but when I use the internal formatter (mdates.DateFormatter(\"\\n%b%d\")) the date string is off by one day. In my output image you can see the first tick is 17532, Dec 31 (but 17532 should be Jan 01).\r\n\r\nAlso the following prints the correct epoch numbers so it is not a case of incorrect epoch's for each tick but rather something in the epoch to date string calculation (but I can't see where that happens in the source).\r\n\r\n`print(ax.get_xticks())`\r\nResult: [17532. 17533. 17534. 17535. 17536. 17537.]\r\n\r\n![pandasdebug](https://user-images.githubusercontent.com/15078200/51791592-763a5200-2173-11e9-8ee5-97f109996ba7.png)\r\n\r\nMy updated sample code:\r\n```\r\nimport pandas as pd \r\nimport datetime\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.ticker as ticker\r\nimport matplotlib.dates as mdates\r\n\r\ndef format_x(x, pos=None):\r\n    return(x)\r\n\r\nd = {\r\n    '2018-01-01': 20,\r\n    '2018-01-02': 20,\r\n    '2018-01-03': 15,\r\n    '2018-01-04': 1,\r\n    '2018-01-05': 118,\r\n    '2018-01-06': 16,\r\n}\r\n\r\ndf = pd.DataFrame(list(d.items()), columns=['DATE', 'TMIN'])\r\ndf['DATE'] = df['DATE'].astype('datetime64[ns]')\r\n\r\nfig, ax = plt.subplots(figsize=(8, 4))\r\n\r\ndf.plot(x='DATE', y='TMIN', kind='line', ax=ax)\r\n\r\nax.xaxis.set_major_locator(mdates.DayLocator())\r\nax.xaxis.set_minor_locator(mdates.DayLocator())\r\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"\\n%b%d\"))\r\nax.xaxis.set_minor_formatter(ticker.FuncFormatter(format_x))\r\n\r\nax.grid(True, which='both')\r\n\r\nplt.show()\r\n\r\nprint(ax.get_xticks())\r\n```\r\n\r\nPerhaps the days-since-epoch are being interpreted using local time instead of UTC? That would give the Dec 31 instead of Jan 01 bug? (I looked through the pandas source but I can't see where the cals are?).\r\n```\r\nimport datetime\r\ndays_test = 17532 * 86400\r\nlocal_time = datetime.datetime.fromtimestamp(days_test).strftime('%Y-%m-%d %H:%M:%S')\r\nutc_time = datetime.datetime.utcfromtimestamp(days_test).strftime('%Y-%m-%d %H:%M:%S')\r\nprint(f'{local_time}\\n{utc_time}')\r\n```\r\nResults:\r\n2017-12-31 19:00:00\r\n2018-01-01 00:00:00\r\n\r\nAlso...\r\nThe problem also goes away in pandas if I use x_compat=True. This causes pandas to use the 0000 epoch instead of the 1970 epoch. If you add x_compat=True to my test code above you'll see the epoch days printed on the x-axis (and see they are epoch 0000).\r\n\r\n`df.plot(x='DATE', y='TMIN', kind='line', ax=ax, x_compat=True)`\r\n\r\nI ran a similar test in just matplotlib. The problem does not occur and it looks like they use the 0000 epoch instead of 1970. Pandas also will use the 0000 epoch if you have a break in the dates (just comment out one of my days above to see it) and in that case pandas no longer has the problem (so it's only when 1970 epoch is used in pandas that the bug shows up).\r\n\r\n\r\nMy matplotlib test and result:\r\n\r\n```\r\nimport datetime as dt\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.dates as mdates\r\nimport matplotlib.ticker as ticker\r\n\r\ndef format_x(x, pos=None):\r\n    return(x)\r\n\r\ndates = ['2018-01-01','2018-01-02','2018-01-03','2018-01-04','2018-01-05','2018-01-06']\r\nx = [dt.datetime.strptime(d,'%Y-%m-%d').date() for d in dates]\r\ny = [20, 20, 15, 1, 118, 16,]\r\n\r\nplt.gca().xaxis.set_major_locator(mdates.DayLocator())\r\nplt.gca().xaxis.set_minor_locator(mdates.DayLocator())\r\nplt.gca().xaxis.set_minor_formatter(mdates.DateFormatter(\"\\n%b%d\"))\r\nplt.gca().xaxis.set_major_formatter(ticker.FuncFormatter(format_x))\r\n\r\nplt.plot(x,y)\r\nplt.gca().grid(True, which='both')\r\n\r\nprint(plt.gca().get_xticks())\r\n```\r\n![matplotlibtest](https://user-images.githubusercontent.com/15078200/51791782-86076580-2176-11e9-805d-7e7a2e8b78d0.png)\r\n[736695. 736696. 736697. 736698. 736699. 736700.]\r\n\r\n"
  }
]
