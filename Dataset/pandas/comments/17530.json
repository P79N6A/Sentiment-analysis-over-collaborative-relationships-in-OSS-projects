[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329537444",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-329537444",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 329537444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTUzNzQ0NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-14T16:30:59Z",
    "updated_at": "2017-09-14T16:30:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "need a copy-pastable example"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329665391",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-329665391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 329665391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTY2NTM5MQ==",
    "user": {
      "login": "ruiann",
      "id": 5110107,
      "node_id": "MDQ6VXNlcjUxMTAxMDc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5110107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruiann",
      "html_url": "https://github.com/ruiann",
      "followers_url": "https://api.github.com/users/ruiann/followers",
      "following_url": "https://api.github.com/users/ruiann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruiann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruiann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruiann/subscriptions",
      "organizations_url": "https://api.github.com/users/ruiann/orgs",
      "repos_url": "https://api.github.com/users/ruiann/repos",
      "events_url": "https://api.github.com/users/ruiann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruiann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-15T02:52:02Z",
    "updated_at": "2017-09-15T02:52:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "```python\r\ndf = pd.DataFrame(np.random.randn(3), index=pd.Series(['2017-08-09 13:32:23', '2017-08-11 23:23:15', '2017-08-11 22:23:15'], dtype='datetime64[ns]'))\r\n\r\ngrouper = pd.TimeGrouper('D')\r\ngrouped = df.groupby(grouper)\r\ndata = grouped.count()\r\ngrouped = df.groupby([grouper])\r\ndata = grouped.count()\r\n\r\n```\r\n\r\nyou can see the result is different\r\n\r\nSorry that convention parameter doesn't influence this scenario, but the result is what you can see, there is no way to resample and group by another categorical columns in the same time I think?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329679028",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-329679028",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 329679028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTY3OTAyOA==",
    "user": {
      "login": "ruiann",
      "id": 5110107,
      "node_id": "MDQ6VXNlcjUxMTAxMDc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5110107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruiann",
      "html_url": "https://github.com/ruiann",
      "followers_url": "https://api.github.com/users/ruiann/followers",
      "following_url": "https://api.github.com/users/ruiann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruiann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruiann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruiann/subscriptions",
      "organizations_url": "https://api.github.com/users/ruiann/orgs",
      "repos_url": "https://api.github.com/users/ruiann/repos",
      "events_url": "https://api.github.com/users/ruiann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruiann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-15T04:35:33Z",
    "updated_at": "2017-09-15T04:35:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "```python\r\n    def _get_binner_for_grouping(self, obj):\r\n        # return an ordering of the transformed group labels,\r\n        # suitable for multi-grouping, e.g the labels for\r\n        # the resampled intervals\r\n        binner, grouper, obj = self._get_grouper(obj)\r\n\r\n        l = []\r\n        for key, group in grouper.get_iterator(self.ax):\r\n            l.extend([key] * len(group))\r\n        pdb.set_trace()\r\n        if isinstance(self.ax, PeriodIndex):\r\n            grouper = binner.__class__(l, freq=binner.freq, name=binner.name)\r\n        else:\r\n            # resampling causes duplicated values, specifying freq is invalid\r\n            grouper = binner.__class__(l, name=binner.name)\r\n\r\n        # since we may have had to sort\r\n        # may need to reorder groups here\r\n        if self.indexer is not None:\r\n            indexer = self.indexer.argsort(kind='quicksort')\r\n            grouper = grouper.take(indexer)\r\n        return grouper\r\n```\r\n\r\nthe second grouper generated by this method, while the first way generate grouper by\r\n```python\r\nbinner, grouper, obj = self._get_grouper(obj)\r\n```\r\n\r\nit seems that the second way get the same grouper of TimeGrouper as the first way and then sample it once more, which only uses the existed time slices in group axis by\r\n```python\r\nl.extend([key] * len(group))\r\n```\r\nand then do some other operations"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329711051",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-329711051",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 329711051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTcxMTA1MQ==",
    "user": {
      "login": "ruiann",
      "id": 5110107,
      "node_id": "MDQ6VXNlcjUxMTAxMDc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5110107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruiann",
      "html_url": "https://github.com/ruiann",
      "followers_url": "https://api.github.com/users/ruiann/followers",
      "following_url": "https://api.github.com/users/ruiann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruiann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruiann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruiann/subscriptions",
      "organizations_url": "https://api.github.com/users/ruiann/orgs",
      "repos_url": "https://api.github.com/users/ruiann/repos",
      "events_url": "https://api.github.com/users/ruiann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruiann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-15T08:00:48Z",
    "updated_at": "2017-09-15T08:00:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "So what is the expected behavior? If follow the SQL rule, the missing time slices shouldn't be filled for TimeGrouper, only the resample method can get a complete time axis index. As the resample method call the TimeGrouper to implement the time axis index, may a new parameter needed to control TimeGrouper's behavior?\r\n\r\nMy target is to group by a categorical column and then resample to get a complete statistic in time dimension, I cannot do this in a groupby operation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329740671",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-329740671",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 329740671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTc0MDY3MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-15T10:09:35Z",
    "updated_at": "2017-09-15T10:09:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, this is a duplicate of #16746, but I like your example better, slightly formatted:\r\n\r\nshould all result the same [6] and [8] are correct, [7] is the bug.\r\n```\r\nIn [5]: df = pd.DataFrame(np.random.randn(3), index=pd.Series(['2017-08-09 13:32:23', '2017-08-11 23:23:15', '2017-08-11 22:23:15'], dtype='datetime64[ns]'))\r\n   ...: \r\n   ...: grouper = pd.TimeGrouper('D')\r\n   ...: grouped1 = df.groupby(grouper)\r\n   ...: data1 = grouped1.count()\r\n   ...: grouped2 = df.groupby([grouper])\r\n   ...: data2 = grouped2.count()\r\n   ...: \r\n\r\nIn [6]: data1\r\nOut[6]: \r\n            0\r\n2017-08-09  1\r\n2017-08-10  0\r\n2017-08-11  2\r\n\r\nIn [7]: data2\r\nOut[7]: \r\n            0\r\n2017-08-09  1\r\n2017-08-11  2\r\n\r\nIn [8]: df.resample('D').count()\r\nOut[8]: \r\n            0\r\n2017-08-09  1\r\n2017-08-10  0\r\n2017-08-11  2\r\n\r\n```\r\n\r\nShould be straightforward to fix if you'd like to dig in."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329743309",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-329743309",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 329743309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTc0MzMwOQ==",
    "user": {
      "login": "ruiann",
      "id": 5110107,
      "node_id": "MDQ6VXNlcjUxMTAxMDc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5110107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruiann",
      "html_url": "https://github.com/ruiann",
      "followers_url": "https://api.github.com/users/ruiann/followers",
      "following_url": "https://api.github.com/users/ruiann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruiann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruiann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruiann/subscriptions",
      "organizations_url": "https://api.github.com/users/ruiann/orgs",
      "repos_url": "https://api.github.com/users/ruiann/repos",
      "events_url": "https://api.github.com/users/ruiann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruiann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-15T10:22:04Z",
    "updated_at": "2017-09-15T10:22:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I think 7 is also correct if follow the SQL rule, missed data can not be queried, maybe a new parameter needed? After hours debug, I think this situation is very complex and hard to fix, when by scalar TimeGrouper returns a BinGrouper, while by list returns a BaseGrouper that may have other grouping. I'll take some effort in this bug but can't promise to fix it out."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329746173",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-329746173",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 329746173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTc0NjE3Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-15T10:36:11Z",
    "updated_at": "2017-09-15T10:36:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "you are diving too deep. look more around [here]( https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby.py#L2656)\r\n\r\n[7] is not a resample, rather a straight groupby by date\r\n\r\n```\r\nIn [42]: df.groupby(df.index.normalize()).count()\r\nOut[42]: \r\n            0\r\n2017-08-09  1\r\n2017-08-11  2\r\n```\r\n\r\nyou could add this example to the groupby docs, but another parameter is not needed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/329941322",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-329941322",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 329941322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTk0MTMyMg==",
    "user": {
      "login": "ruiann",
      "id": 5110107,
      "node_id": "MDQ6VXNlcjUxMTAxMDc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5110107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruiann",
      "html_url": "https://github.com/ruiann",
      "followers_url": "https://api.github.com/users/ruiann/followers",
      "following_url": "https://api.github.com/users/ruiann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruiann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruiann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruiann/subscriptions",
      "organizations_url": "https://api.github.com/users/ruiann/orgs",
      "repos_url": "https://api.github.com/users/ruiann/repos",
      "events_url": "https://api.github.com/users/ruiann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruiann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-16T03:11:38Z",
    "updated_at": "2017-09-16T03:11:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the situation is complex than your thought.\r\nFor list groupers, groupings are built for each grouper to make a BaseGrouper, and Grouping class only get binner by *_get_binner_for_grouping* of each grouper, the group_info of BaseGrouper property generated by the labels and group_index of its groupings, and each grouping get them by the **binner**, which is the label list of each row.\r\n\r\n```python\r\n# the labels and group_index of Grouping class, with them the BaseGrouper generate group_info\r\n    @property\r\n    def labels(self):\r\n        if self._labels is None:\r\n            self._make_labels()\r\n        return self._labels\r\n\r\n    @property\r\n    def group_index(self):\r\n        if self._group_index is None:\r\n            self._make_labels()\r\n        return self._group_index\r\n\r\n    def _make_labels(self):\r\n        if self._labels is None or self._group_index is None:\r\n            pdb.set_trace()\r\n            # self.grouper is the label of each row\r\n            labels, uniques = algorithms.factorize(\r\n                self.grouper, sort=self.sort)\r\n            uniques = Index(uniques, name=self.name)\r\n            self._labels = labels\r\n            self._group_index = uniques\r\n```\r\nBut for BinGrouper, the group_info property generated in different way, which directly map the labels and group_index.\r\n```python\r\n    def group_info(self):\r\n        pdb.set_trace()\r\n        ngroups = self.ngroups\r\n        obs_group_ids = np.arange(ngroups)\r\n        rep = np.diff(np.r_[0, self.bins])\r\n\r\n        rep = _ensure_platform_int(rep)\r\n        if ngroups == len(self.bins):\r\n            comp_ids = np.repeat(np.arange(ngroups), rep)\r\n        else:\r\n            comp_ids = np.repeat(np.r_[-1, np.arange(ngroups)], rep)\r\n\r\n        return comp_ids.astype('int64', copy=False), \\\r\n            obs_group_ids.astype('int64', copy=False), ngroups\r\n```\r\nSo the bug occurs, the binner can only provide the labels of each row in selected axis, and then unique them to get unique labels and group_index, so the missed date time cannot be generated.\r\n\r\nI think the way to fix this bug is to provide group_info in *_get_binner_for_grouping* of grouper to get more info? I think this logic change may be bigger? I'll take further look."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330048503",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-330048503",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 330048503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDA0ODUwMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-17T14:07:33Z",
    "updated_at": "2017-09-17T14:07:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ruiann again, you can simply have a len-1 list-like grouper case turn into the same case as the scalar passed case. its just going down the wrong path."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330050497",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-330050497",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 330050497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDA1MDQ5Nw==",
    "user": {
      "login": "ruiann",
      "id": 5110107,
      "node_id": "MDQ6VXNlcjUxMTAxMDc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5110107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruiann",
      "html_url": "https://github.com/ruiann",
      "followers_url": "https://api.github.com/users/ruiann/followers",
      "following_url": "https://api.github.com/users/ruiann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruiann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruiann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruiann/subscriptions",
      "organizations_url": "https://api.github.com/users/ruiann/orgs",
      "repos_url": "https://api.github.com/users/ruiann/repos",
      "events_url": "https://api.github.com/users/ruiann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruiann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-17T14:20:12Z",
    "updated_at": "2017-09-17T14:37:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Then how about the result of ['categorical_axis', TimeGrouper('D', key='time_axis')]? It can not get all time slices for each category item.\r\nIn fact I think the\r\n```python\r\n    def _get_binner_for_grouping(self, obj):\r\n        # return an ordering of the transformed group labels,\r\n        # suitable for multi-grouping, e.g the labels for\r\n        # the resampled intervals\r\n        binner, grouper, obj = self._get_grouper(obj)\r\n\r\n        l = []\r\n        for key, group in grouper.get_iterator(self.ax):\r\n            l.extend([key] * len(group))\r\n        pdb.set_trace()\r\n        if isinstance(self.ax, PeriodIndex):\r\n            grouper = binner.__class__(l, freq=binner.freq, name=binner.name)\r\n        else:\r\n            # resampling causes duplicated values, specifying freq is invalid\r\n            grouper = binner.__class__(l, name=binner.name)\r\n\r\n        # since we may have had to sort\r\n        # may need to reorder groups here\r\n        if self.indexer is not None:\r\n            indexer = self.indexer.argsort(kind='quicksort')\r\n            grouper = grouper.take(indexer)\r\n        return grouper\r\n```\r\nmethod of BaseGrouper (and BinGrouper) class works wrong, the group_info can be get from the BaseGrouper/BinGrouper instance generated by _get_grouper method, but not to read and sort them again item by item.\r\n\r\nI'm trying to return the BaseGrouper/BinGrouper instance generated by _get_grouper method if the Grouping instance is given by Grouper instance, and get labels, group_index from the group_info, but there are still some bugs reported by test case, I'm now trying to fix them.\r\n\r\nAt last, I think groupby related logics need some refactor (I mean the name, alias, call stack sometimes confuse me, also some duplicated calls happened, maybe convert them all to list groupers could be better, with which only one implement need to deal)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330054931",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-330054931",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 330054931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDA1NDkzMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-17T15:00:01Z",
    "updated_at": "2017-09-17T15:00:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> At last, I think groupby related logics need some refactor (I mean the name, alias, call stack sometimes confuse me, also some duplicated calls happened, maybe convert them all to list groupers could be better, with which only one implement need to deal).\r\n\r\nIf you want to attempt that, sure. Pls do so w/o adding any features / fixing any bugs, (though you can add xfailing tests). Try to make things pass everything that currently works, then in different commits / PR add things."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330418866",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17530#issuecomment-330418866",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17530",
    "id": 330418866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDQxODg2Ng==",
    "user": {
      "login": "ruiann",
      "id": 5110107,
      "node_id": "MDQ6VXNlcjUxMTAxMDc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5110107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruiann",
      "html_url": "https://github.com/ruiann",
      "followers_url": "https://api.github.com/users/ruiann/followers",
      "following_url": "https://api.github.com/users/ruiann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruiann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruiann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruiann/subscriptions",
      "organizations_url": "https://api.github.com/users/ruiann/orgs",
      "repos_url": "https://api.github.com/users/ruiann/repos",
      "events_url": "https://api.github.com/users/ruiann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruiann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-19T03:31:28Z",
    "updated_at": "2017-09-19T03:31:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\nI've fixed this bug in [this PR](https://github.com/pandas-dev/pandas/pull/17587)\r\n\r\nThe fix is to allow the Grouping to use grouper generated by _get_grouper of passed TimeGrouper\\OtherGrouper item of the list directly, and provide indexer for BinGrouper to reorder them correctly for the values of the grouped axis\r\n\r\nThere are some PEP8 errors, which not caused by my change, and hard to change 😢\r\n\r\nAlso the Contributing guide doesn't work for me\r\nWhen I try to use conda to build the development env\r\n```\r\nconda create -n pandas_dev --file ci/requirements_dev.txt\r\n```\r\nshell said\r\n```\r\nFetching package metadata .........\r\n\r\nPackageNotFoundError: Package missing in current osx-64 channels: \r\n  - moto\r\n\r\nClose matches found; did you mean one of these?\r\n\r\n    moto: boto\r\n```\r\n\r\nWhen I build env by setup.py and run all tests\r\n```\r\npytest pandas\r\n```\r\nsame bug occurs in some test cases\r\n```\r\npandas/tests/io/test_excel.py:2403: in <module>\r\n    pytest.param('xlwt',\r\nE   AttributeError: 'module' object has no attribute 'param'\r\n```\r\n"
  }
]
