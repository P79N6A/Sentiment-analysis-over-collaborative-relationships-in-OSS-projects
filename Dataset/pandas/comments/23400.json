[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433726842",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-433726842",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 433726842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzcyNjg0Mg==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-28T17:55:38Z",
    "updated_at": "2018-10-28T17:55:38Z",
    "author_association": "NONE",
    "body": "Hello @h-vetinari! Thanks for submitting the PR.\n\n - There are no PEP8 issues in the file [`pandas/tests/test_algos.py`](https://github.com/h-vetinari/pandas/blob/0d6dad0ca13dd95f9c4d28e42839b4b33be064d3/pandas/tests/test_algos.py) !\n\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433734450",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-433734450",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 433734450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzczNDQ1MA==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-10-28T19:32:38Z",
    "updated_at": "2018-11-27T07:57:14Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23400?src=pr&el=h1) Report\n> Merging [#23400](https://codecov.io/gh/pandas-dev/pandas/pull/23400?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/90961f2acad5c2db6aa957e2a79df8668f5b02d1?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/23400/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/23400?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master   #23400   +/-   ##\n=======================================\n  Coverage   92.31%   92.31%           \n=======================================\n  Files         161      161           \n  Lines       51483    51483           \n=======================================\n  Hits        47525    47525           \n  Misses       3958     3958\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.7% <100%> (ø)` | :arrow_up: |\n| #single | `42.43% <100%> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/23400?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/algorithms.py](https://codecov.io/gh/pandas-dev/pandas/pull/23400/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYWxnb3JpdGhtcy5weQ==) | `95.11% <100%> (ø)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23400?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23400?src=pr&el=footer). Last update [90961f2...00a304d](https://codecov.io/gh/pandas-dev/pandas/pull/23400?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434552282",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-434552282",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 434552282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDU1MjI4Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T03:53:05Z",
    "updated_at": "2018-10-31T03:53:05Z",
    "author_association": "MEMBER",
    "body": "I'll take a look at this.\r\n\r\n@h-vetinari a couple of preliminary, totally uninformed questions.  Does it make sense to implement asvs for this?  Can any of the tempita-using code be implemented with fused types (which I for one find more readable)?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434582911",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-434582911",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 434582911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDU4MjkxMQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T07:05:45Z",
    "updated_at": "2018-10-31T07:22:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Finally got an ASV to run through, and not be too noisy (compare #23412 about an earlier attempt).\r\n```\r\n     [7191af9b]       [19c7c1f8]\r\n     <master>         <unique_inverse_cython>\r\n+      10.2±0.8ms         109±10ms    10.77  frame_ctor.FromRecords.time_frame_from_records_generator(None)\r\n+      1.41±0.2ms       3.12±0.8ms     2.22  index_object.Indexing.time_get_loc_non_unique_sorted('Int')\r\n+        547±80μs         1.09±0ms     2.00  indexing_engines.NumericEngineIndexing.time_get_loc((<class 'pandas._libs.index.UInt8Engine'>, <class 'numpy.uint8'>), 'non_monotonic')\r\n+      12.5±0.8ms         15.6±0ms     1.25  groupby.Transform.time_transform_multi_key1\r\n+        12.5±0ms         15.6±0ms     1.25  replace.FillNa.time_replace(False)\r\n+        14.1±0ms         15.6±0ms     1.11  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('float')\r\n-        15.6±0ms       14.1±0.6ms     0.90  groupby.Float32.time_sum\r\n-         156±0μs          141±0μs     0.90  groupby.GroupByMethods.time_dtype_as_field('float', 'shift', 'direct')\r\n-        156±60μs          141±0μs     0.90  indexing.NumericSeriesIndexing.time_ix_slice(<class 'pandas.core.indexes.numeric.Int64Index'>, 'unique_monotonic_inc')\r\n-        1.56±0ms         1.41±0ms     0.90  indexing_engines.NumericEngineIndexing.time_get_loc((<class 'pandas._libs.index.Int8Engine'>, <class 'numpy.int8'>), 'monotonic_incr')\r\n-        1.56±0ms         1.41±0ms     0.90  replace.FillNa.time_fillna(True)\r\n-        15.6±0ms         12.5±0ms     0.80  binary_ops.AddOverflowScalar.time_add_overflow_scalar(-1)\r\n-        15.6±0ms         12.5±0ms     0.80  timeseries.AsOf.time_asof('DataFrame')\r\n-         625±0μs          188±0μs     0.30  indexing.NumericSeriesIndexing.time_ix_slice(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-       469±200μs          141±0μs     0.30  series_methods.SeriesConstructor.time_constructor(None)\r\n-         625±0μs          109±6μs     0.17  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>, 'nonunique_monotonic_inc')\r\n```\r\n\r\nWhat remains is noise IMO, with the likely exception of `frame_ctor.FromRecords.time_frame_from_records_generator(None)`. I've had a look at `DataFrame.from_records`, and can't really tell from first glance where this might be calling `unique` at all.\r\n\r\nThe reason that I'm quite confident that it's noise is that I've had a couple different runs (and specifically checking the index part again as well), where the above time increases did *not* show up, e.g.:\r\n`asv continuous -f 1.1 upstream/master HEAD -b \"^(re)?index\"`\r\n```\r\n       before           after         ratio\r\n     [360e7271]       [19c7c1f8]\r\n     <master>         <unique_inverse_cython>\r\n+      3.12±0.2ms         15.6±2ms     5.00  index_object.Indexing.time_get_loc_non_unique_sorted('Float')\r\n+        20.3±1μs         93.8±0μs     4.62  indexing.NonNumericSeriesIndexing.time_getitem_scalar('datetime', 'nonunique_monotonic_inc')\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434585564",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-434585564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 434585564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDU4NTU2NA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T07:18:33Z",
    "updated_at": "2018-10-31T07:30:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel \r\n> I'll take a look at this.\r\n\r\nThanks! :)\r\n\r\n> Does it make sense to implement asvs for this?\r\n\r\nAbsolutely, haven't done so yet.\r\n\r\n> Can any of the tempita-using code be implemented with fused types (which I for one find more readable)?\r\n\r\nI totally agree, but I gave up after some preliminary investigation (and may not be fully aware of all the capabilities of fused types). There's a bunch of classes\r\n* `{{dtype}}VectorData` is already declared fused (after some initial templating)\r\n* `{{dtype}}Vector` templates on `{{for name, dtype, arg, idtype in dtypes}}` and uses some `{{if dtype == 'int64'}}` conditions\r\n* `{{name}}HashTable` templates on `{{for name, dtype, float_group, default_na_value in dtypes}}` and uses the `khash` hashtable code, whose methods are explicitly typed, e.g. `k = kh_put_{{dtype}}(self.table, key, &ret)`.\r\n\r\nNot sure how flexible the fused type machinery is (i.e. having to use tuples or structs to catch all the required fields to template over?), but it seems to me that in any case, one would probably need to first fuse-type `khash`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434673921",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-434673921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 434673921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDY3MzkyMQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T12:48:58Z",
    "updated_at": "2018-10-31T12:48:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\nThanks for the response.\r\nTLDR: I think it's better to have one core function definition rather than 3 slightly different ones for `factorize` / `unique` (with and without inverse).\r\n\r\n> I would be more amenable to this if it were templated on the type. you are duplicating lots of code for the object / non-object cases. \r\n\r\nThis is already templated on the dtype. The code for strings/object is already different (and uses different constructions, i.e. no `const` or `nogil`)\r\n\r\n> Further you haven't proven your performance claims here.\r\n\r\nHow can I prove it other than by ASVs and a reproducible(!) timing code just for the most sensitive `unique`-branch (see OP)?\r\n\r\n> You are adding lots of paths to reduce signature and such, but it is just making it more complicated.\r\n\r\nThe separate functions for `unique` and `factorize` already exist, I just moved them above the templated `def {{func_name}}` to make it more easily readable\r\n\r\n> We want less complicated code, sure performance matters, and some hotspot optimizations are worth it, but unless they can be fully templatized / use fused types they just add complexity.\r\n\r\nHaving `return_inverse` for `unique` without templating currently has about a 10% perf penalty. If that is seen as alright, then we're back to the situation of #22986, where you said \"perf will dictate this\". The dtypes-tempita is also the current state of the code - using fused types would be a substantial undertaking (see response to @jbrockmendel above), because of the typed `khash` methods.\r\n\r\n> Once code is added to pandas and it is complex, it is rarely maintained. This is why we bend over backwards to have code simplicity.\r\n\r\nFair enough - I'd love for this to work without templating (not templating on `return_inverse` may be an acceptable perf/maintainability tradeoff; the dtypes will be harder to get rid of).\r\n\r\nIn any case, I think one function (albeit templated) is easier to maintain than having slightly different versions for each of `unique` / `factorize` / `get_labels` (the latter two were already unified in #22986), and thin wrappers (3 LOC) that only slightly adapt the signature are IMO very easy to follow."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434675500",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-434675500",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 434675500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDY3NTUwMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T12:54:17Z",
    "updated_at": "2018-10-31T12:54:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In any case, I think one function (albeit templated) is easier to maintain than having slightly different versions for each of unique / factorize / get_labels (the latter two were already unified in #22986), and thin wrappers (3 LOC) that only slightly adapt the signature are IMO very easy to follow.\r\n\r\nI agree. I am willing to have 10% penalty for this, though I think this is basically what we have now?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434676576",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-434676576",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 434676576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDY3NjU3Ng==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T12:57:54Z",
    "updated_at": "2018-10-31T12:57:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I agree. I am willing to have 10% penalty for this, though I think this is basically what we have now?\r\n\r\nNo, not yet. Adding a `return_inverse`-kwarg to `unique` would add this penalty on top of the current situation. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434795742",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-434795742",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 434795742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDc5NTc0Mg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T18:22:06Z",
    "updated_at": "2018-10-31T18:22:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\nThe latest version is definitely easier on the eyes. I'll try another ASV run to see the impact."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435203094",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-435203094",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 435203094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTIwMzA5NA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T22:05:22Z",
    "updated_at": "2018-11-01T22:05:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's the ASV output of the lastest run:\r\n\r\n```\r\n       before           after         ratio\r\n     [9019582c]       [c7327fd0]\r\n     <master>         <unique_inverse_cython>\r\n!        9.38±0μs           failed      n/a  categoricals.CategoricalSlicing.time_getitem_list_like('monotonic_decr')\r\n!         219±8ms           failed      n/a  frame_methods.SortValues.time_frame_sort_values(True)\r\n!             n/a           failed      n/a  groupby.GroupByMethods.time_dtype_as_field('datetime', 'cummax', 'transformation')\r\n!         367±8ms           failed      n/a  indexing.NonNumericSeriesIndexing.time_getitem_scalar('string', 'nonunique_monotonic_inc')\r\n!      12.5±0.6ms           failed      n/a  io.csv.ReadUint64Integers.time_read_uint64_na_values\r\n!        3.12±0ms           failed      n/a  join_merge.Merge.time_merge_dataframe_integer_key(True)\r\n!        6.25±0ms           failed      n/a  reindex.DropDuplicates.time_frame_drop_dups_na(True)\r\n!        39.1±3ms           failed      n/a  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'float', 'std')\r\n!      4.69±0.6ms           failed      n/a  stat_ops.SeriesMultiIndexOps.time_op(1, 'sum')\r\n!        391±80ns           failed      n/a  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+         203±0μs          938±0μs     4.62  indexing.NonNumericSeriesIndexing.time_getitem_label_slice('datetime', 'nonunique_monotonic_inc')\r\n+      3.12±0.2ms         12.5±2ms     4.00  index_object.Indexing.time_get_loc_non_unique('Float')\r\n+         141±6μs          156±0μs     1.11  groupby.GroupByMethods.time_dtype_as_field('datetime', 'last', 'transformation')\r\n+         141±0μs          156±0μs     1.11  series_methods.SeriesConstructor.time_constructor(None)\r\n+        14.1±0ms         15.6±0ms     1.11  timeseries.AsOf.time_asof_nan('DataFrame')\r\n+         531±8ms          578±8ms     1.09  frame_methods.Nunique.time_frame_nunique\r\n-        15.6±0ms         14.1±0ms     0.90  multiindex_object.Sortlevel.time_sortlevel_one\r\n-         156±0μs          141±0μs     0.90  indexing.NumericSeriesIndexing.time_iloc_array(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        938±80μs         625±80μs     0.67  inference.NumericInferOps.time_subtract(<class 'numpy.int16'>)\r\n-         938±0μs         625±60μs     0.67  period.PeriodProperties.time_property('min', 'end_time')\r\n-        62.5±0μs       20.3±0.6μs     0.32  indexing.NumericSeriesIndexing.time_getitem_scalar(<class 'pandas.core.indexes.numeric.Int64Index'>, 'nonunique_monotonic_inc')\r\n-        12.5±2ms       3.20±0.2ms     0.26  index_object.Indexing.time_get_loc_non_unique_sorted('Float')\r\n-        7.81±0ms         1.88±0ms     0.24  reindex.DropDuplicates.time_frame_drop_dups_int(True)\r\n-      5.47±0.8ms         1.25±0ms     0.23  indexing.NumericSeriesIndexing.time_ix_array(<class 'pandas.core.indexes.numeric.Int64Index'>, 'unique_monotonic_inc')\r\n-        93.8±0μs         20.3±0μs     0.22  indexing.NonNumericSeriesIndexing.time_getitem_scalar('datetime', 'nonunique_monotonic_inc')\r\n-      9.38±0.8ms         1.25±0ms     0.13  frame_ctor.FromRecords.time_frame_from_records_generator(None)\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435204926",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-435204926",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 435204926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTIwNDkyNg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T22:12:54Z",
    "updated_at": "2018-11-01T22:12:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Doesn't look too bad, IMO (failures in ASV are pretty arbitrary when they happen, the test suite ran fine). Another look, @jreback @jbrockmendel, please? :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435598440",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-435598440",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 435598440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTU5ODQ0MA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-03T15:56:12Z",
    "updated_at": "2018-11-03T15:57:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\n\r\nI know it looks like a lot, but the changes are not that many. For all the three hashtable-codes (dtyped, strings, object), I do the following:\r\n* Add `return_inverse` and `ignore_na` kwargs to the private method `_unique` (renamed from `_factorize` because `unique+ignore_na` = `factorize`; the name `_factorize` was only a temporary step from the precursor PR)\r\n* slight reshuffle in the loop to avoid checking the `return_inverse` bint unless necessary (i.e. when `k != self.table.n_buckets`)\r\n* Remove the existing `unique` method and replace it with a call to `_unique` (this adds the `return_inverse` capability)\r\n* Adapt `factorize` and `get_labels` to use `_unique`.\r\n* Add docstrings for `unique` and `factorize`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435989865",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-435989865",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 435989865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk4OTg2NQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T18:50:11Z",
    "updated_at": "2018-11-08T19:04:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback\r\n> my point was just always construct the inverse, which is just the factorization, and simply leave this as _factorize as that is what it is.\r\n\r\nThat's the whole point of this exercise -- the functions `factorize` / `get_labels` and `unique` (with or without inverse) only differ by marginal details. You yourself agreed to this unification above in https://github.com/pandas-dev/pandas/pull/23400#issuecomment-434675500\r\n\r\nThey have the following differences:\r\n* `unique` currently has no inverse (one of the drivers of unifying these methods, but more of a side benefit than only reason)\r\n* `factorize`/`get_labels` ignore NaNs for the uniques\r\n* slight variations in output signature\r\n\r\nTheir common point is that they all calculate **unique** values (and their indices), and as such, the core function was already named `_unique` in #22986. That the name changed was because you required the actual unification to be split off from that PR, and @jorisvandenbossche then required that *for the state of #22986* (i.e. pre-unification), it should rather be named `_factorize`. Now that we're actually unifying these things, I'm going back to `_unique`.\r\n\r\n> Changing the names and conditionally having return_inverse are just not worth the added complexity. I can live with a small perf hit when only uniques are needed.\r\n\r\nThe only added complexity is adding the `return_inverse` and `ignore_na` switches (there's a slight reshuffle of lines to minimize checking those `bints`). `ignore_na` accounts for the difference between `factorize` and `unique`, while `return_inverse` exists to avoid a performance hit for `unique` (when not requiring the inverse). "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436461013",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-436461013",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 436461013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQ2MTAxMw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T00:37:04Z",
    "updated_at": "2018-11-07T00:37:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I'll take a look at this.\r\n\r\n@jbrockmendel \r\nDo you think you could have another look at this? :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436491232",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-436491232",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 436491232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQ5MTIzMg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T03:21:06Z",
    "updated_at": "2018-11-07T03:21:28Z",
    "author_association": "MEMBER",
    "body": "@h-vetinari will do, thanks for your patience (hit close by accident, reopened)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438864488",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-438864488",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 438864488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODg2NDQ4OA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T00:01:13Z",
    "updated_at": "2018-11-15T00:01:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\nabout the order of the returns:\r\n* annoyingly, `pd.factorize` returns the uniques second, labels first. This is stupid IMO, but hard to change\r\n* `np.unique` returns the `uniques` first, and then the index/inverse. **This is the only sane option** for adding outputs with a kwarg, as we want to enable for `pd.Series.unique`.\r\n\r\nI *can* unify the cython functions to have the same output signature, it just moves the point where the signatures diverge one level up (where pandas-factorize calls cython-factorize). I really don't see a good option for unifying that in the short term, unless with switching the returns of `pd.factorize` at some point."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439695525",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-439695525",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 439695525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY5NTUyNQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-18T14:06:53Z",
    "updated_at": "2018-11-18T14:10:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\n> > just always return the inverse as i mentioned, then you don't need all of these if statements\r\n\r\n> this would impact perf (for the non-inverse case) even more than it is already. I can try if you want, but the slowdown will be much more substantial, I believe\r\n\r\nAs expected, the performance impact is prohibitive. The whole point of using the `return_inverse`-kwarg within `_unique` is to avoid unnecessary calculations, and those cost big time (in addition to the ~10% penalty for unifying the code):\r\n\r\n```\r\n                  6079c26bf3            30de418936 relative_incr\r\n                  with_kwarg always_return_inverse\r\nStringIndex        15.979770             17.984079       +12.54%\r\nCategoricalIndex    1.422668              2.286147       +60.69%\r\nIntIndex            3.239154              4.779124       +47.54%\r\nUIntIndex           3.154020              5.497799       +74.31%\r\nRangeIndex          3.169554              4.744420       +49.69%\r\nFloatIndex          5.185764              6.226479       +20.07%\r\nTimedeltaIndex      4.687067              6.111426       +30.39%\r\nStringSeries       61.367722             67.109812        +9.36%\r\nCategoricalSeries   2.875649              3.967762       +37.98%\r\nIntSeries           5.505677              8.534605       +55.01%\r\nUIntSeries          5.719809              8.529084       +49.11%\r\nRangeSeries         5.523339              8.487045       +53.66%\r\nFloatSeries         7.731418             12.674213       +63.93%\r\nTimedeltaSeries     5.581938              9.093818       +62.92%\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439701505",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-439701505",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 439701505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTcwMTUwNQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-18T15:33:04Z",
    "updated_at": "2018-11-18T15:33:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Failure is just the rank segfault..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440067795",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-440067795",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 440067795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDA2Nzc5NQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T22:38:22Z",
    "updated_at": "2018-11-19T22:38:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Reverting https://github.com/pandas-dev/pandas/pull/23400/commits/30de418936cda9aa9c26a8cfa4c3a0b42906e2b2 due to the performance degradation. Was just for demo purposes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440165369",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-440165369",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 440165369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDE2NTM2OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T06:59:11Z",
    "updated_at": "2018-11-20T06:59:11Z",
    "author_association": "MEMBER",
    "body": "> flip the order of the return here, make this like factorize, otherwise this is very confusing.\r\n\r\n@jreback if you are asking that only for the internal hashtable method, I don't bother that much (@h-vetinari so you can do it here as Jeff asks, for the internal code it doesn't matter *that* much). \r\nBut IMO, we certainly don't want to do that for the user facing `pd.unique` (but we can do the flip in order also there; although I don't think that makes the code necessarily clearer). For `pd.unique`, I think we want to follow the return order of `np.unique`. \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440171265",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-440171265",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 440171265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDE3MTI2NQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T07:27:59Z",
    "updated_at": "2018-11-20T07:33:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche @jreback \r\n> For `pd.unique`, I think we want to follow the return order of `np.unique`.\r\n\r\nThat's my point exactly, and even more so: **adding the inverse as the first component of the tuple based on a kwarg** is bound to lead to lots and lots of confusion. The only sane option IMO is the way `np.unique` goes, of *appending* the output.\r\n\r\nI think we have to live with this discrepancy, and then, it just becomes a question where the signature break is in the code. I'd argue that it should be at the lowest level possible (i.e. `Hashtable._unique` --> `Hashtable.factorize`), so that the vast majority of users/developers need not be concerned with it at all."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441285787",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-441285787",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 441285787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTI4NTc4Nw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-23T16:54:08Z",
    "updated_at": "2018-11-23T16:54:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel \r\n> @h-vetinari will do, thanks for your patience\r\n\r\nCare to take another look? :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441440024",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-441440024",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 441440024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQ0MDAyNA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-25T13:19:54Z",
    "updated_at": "2018-11-25T13:19:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel \r\n> @h-vetinari a couple of preliminary, totally uninformed questions. Does it make sense to implement asvs for this?\r\n\r\nI remembered this question, and checked the ASV benchmarks for existing calls to unique. There's nothing in `algorithms.py`, and actually, not many occurrences at all:\r\n```\r\n(pandas-dev) C:\\[...]\\pddev>findstr /r /S /N \"\\.unique\\(\" asv_bench/benchmarks/*.py\r\nasv_bench/benchmarks/period.py:116:        self.index.unique()\r\nasv_bench/benchmarks/timeseries.py:41:        self.index.unique()\r\n```\r\n\r\nSeems one should add some ASVs to `asv_bench/benchmarks.algorithms.py`, but I'd suggest to leave that for a follow-up."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441552694",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-441552694",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 441552694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTU1MjY5NA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-26T08:16:14Z",
    "updated_at": "2018-11-26T08:16:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "The failure is a flaky hypothesis test."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441953505",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-441953505",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 441953505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTk1MzUwNQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T07:18:35Z",
    "updated_at": "2018-11-27T07:18:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\nTurns out `hashtable.factorize` was only used in `algorithms.py`, the other calls are either to `_factorize_array` `libhashtable.Factorizer.factorize` (or of course the user-facing `algorithms.factorize`), all of which are not affected."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442272510",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-442272510",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 442272510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI3MjUxMA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T00:32:51Z",
    "updated_at": "2018-11-28T00:32:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback All green."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442903756",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-442903756",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 442903756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjkwMzc1Ng==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T16:39:51Z",
    "updated_at": "2018-11-29T16:39:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\nPing"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442919248",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-442919248",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 442919248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjkxOTI0OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T17:21:29Z",
    "updated_at": "2018-11-29T17:21:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks @h-vetinari "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442989443",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23400#issuecomment-442989443",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23400",
    "id": 442989443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjk4OTQ0Mw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T20:54:21Z",
    "updated_at": "2018-11-29T20:54:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cool, thanks."
  }
]
