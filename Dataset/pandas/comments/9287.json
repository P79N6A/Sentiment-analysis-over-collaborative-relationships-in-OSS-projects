[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70389313",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9287#issuecomment-70389313",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9287",
    "id": 70389313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzg5MzEz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-17T23:30:29Z",
    "updated_at": "2015-01-17T23:30:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "see #9133 and #4464 it's not that difficult\nwant to give a try?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/382053377",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9287#issuecomment-382053377",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9287",
    "id": 382053377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjA1MzM3Nw==",
    "user": {
      "login": "rpalloni",
      "id": 17080117,
      "node_id": "MDQ6VXNlcjE3MDgwMTE3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17080117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpalloni",
      "html_url": "https://github.com/rpalloni",
      "followers_url": "https://api.github.com/users/rpalloni/followers",
      "following_url": "https://api.github.com/users/rpalloni/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpalloni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpalloni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpalloni/subscriptions",
      "organizations_url": "https://api.github.com/users/rpalloni/orgs",
      "repos_url": "https://api.github.com/users/rpalloni/repos",
      "events_url": "https://api.github.com/users/rpalloni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpalloni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T16:19:37Z",
    "updated_at": "2018-04-17T16:19:52Z",
    "author_association": "NONE",
    "body": "This way actually works:\r\ndata_df = data_df.astype(**dtype=** {\"wheel_number\":\"int64\", \"car_name\":\"object\",\"minutes_spent\":\"float64\"})"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/390378870",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9287#issuecomment-390378870",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9287",
    "id": 390378870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDM3ODg3MA==",
    "user": {
      "login": "answerquest",
      "id": 9089552,
      "node_id": "MDQ6VXNlcjkwODk1NTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9089552?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/answerquest",
      "html_url": "https://github.com/answerquest",
      "followers_url": "https://api.github.com/users/answerquest/followers",
      "following_url": "https://api.github.com/users/answerquest/following{/other_user}",
      "gists_url": "https://api.github.com/users/answerquest/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/answerquest/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/answerquest/subscriptions",
      "organizations_url": "https://api.github.com/users/answerquest/orgs",
      "repos_url": "https://api.github.com/users/answerquest/repos",
      "events_url": "https://api.github.com/users/answerquest/events{/privacy}",
      "received_events_url": "https://api.github.com/users/answerquest/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-19T04:50:17Z",
    "updated_at": "2018-05-19T04:50:17Z",
    "author_association": "NONE",
    "body": "One difference between `read_csv( csvFile, dtype={..} )` and  `df.astpye(dtype={..} )` :   \r\nIn read_csv's case, it's ok if the dict supplied contains more columns that aren't in the csv, they are ignored gracefully. In `astype()`'s case, it errors out if all the columns defined aren't present in the data.\r\n\r\nIt should be more like read_csv. Because we can have incoming dict's that may have some columns and not others. Right now this is the workaround I have to do:\r\n```\r\ndf = pd.DataFrame( incoming_data )\r\ngtfs_dtypes = { ... } # my master dtypes dict, having all possible column names\r\ngtfs_dtypes_specific = { x:gtfs_dtypes.get(x,'str') for x in df.columns.tolist() }\r\ndf = df.astype(dtype=gtfs_dtypes_specific)\r\n```"
  }
]
