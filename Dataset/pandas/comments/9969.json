[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/95359045",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9969#issuecomment-95359045",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9969",
    "id": 95359045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1MzU5MDQ1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-22T22:47:54Z",
    "updated_at": "2015-04-22T22:50:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "well here are some timings\n\nFile as described\n\n```\nIn [3]: %timeit read_csv(\"Downloads/MWE/speech_vectors_short.csv\")\n1 loops, best of 3: 10.5 s per loop\n```\n\nDon't interpret NA's; force the dtype\n\n```\nIn [2]: %timeit read_csv(\"Downloads/MWE/speech_vectors_short.csv\",dtype='float64',keep_default_na=False)\n1 loops, best of 3: 7.03 s per loop\n```\n\nHere is a transposed version\n\n```\nIn [7]: df.T.to_csv('test.csv')\n\nIn [8]: %timeit pd.read_csv('test.csv')\n1 loops, best of 3: 1.93 s per loop\n```\n\nso about 3x faster on the transposed. Not suprising at all. Each column individuall get's inferred for its type; this is what takes all the time. \n\nVery wide tables are not the usual way of string tabular data. I would simply store your data transposed. I am not sure you are going to get much speeds doing anything else. \n\nOn the transposed version I am getting 25 MB/s (which is pretty reasonable given I have a regular disk)\nso 3x slowdown for the same data, but stored in a format which needs more work to interpret is ok IMHO.\n\nI was able to make a 1-line change. To have a 2x speedup (from the above), or 3x over existing. However, this may have farther reaching ramifications, eg.. amount of memory used, or perf on row-based. Basically this changes the function for determining how much to read in a single chunk when processing (which is an inverse function of the table size).\n\n```\nIn [2]: %timeit read_csv(\"../Downloads/MWE/speech_vectors_short.csv\",dtype='float64',keep_default_na=False)\n1 loops, best of 3: 2.83 s per loop\n```\n\nSo if someone wants to profile, would appreciate. Here's the change: https://github.com/pydata/pandas/blob/master/pandas/parser.pyx#L514 (I randomly tried 2**30).\n\nFurther I could imagine 2 more enhancements:\n- an option to ignore INF/-INF parsing (which might break your data), but could potentially speed it up a lot (cuts about 1s off parsing time)\n- an option to just try to astype the entire structure rather than parsing it in-memory (not sure how much of a diff this would make)\n\nHere's the diff for the change:\n\n```\ndiff --git a/pandas/parser.pyx b/pandas/parser.pyx\nindex b28e058..67bf15e 100644\n--- a/pandas/parser.pyx\n+++ b/pandas/parser.pyx\n@@ -512,7 +512,7 @@ cdef class TextReader:\n             raise ValueError(\"No columns to parse from file\")\n\n         # compute buffer_lines as function of table width\n-        heuristic = 2**20 // self.table_width\n+        heuristic = 2**30 // self.table_width\n         self.buffer_lines = 1\n         while self.buffer_lines * 2< heuristic:\n             self.buffer_lines *= 2\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/95756912",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9969#issuecomment-95756912",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9969",
    "id": 95756912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1NzU2OTEy",
    "user": {
      "login": "tloredo",
      "id": 186722,
      "node_id": "MDQ6VXNlcjE4NjcyMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/186722?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tloredo",
      "html_url": "https://github.com/tloredo",
      "followers_url": "https://api.github.com/users/tloredo/followers",
      "following_url": "https://api.github.com/users/tloredo/following{/other_user}",
      "gists_url": "https://api.github.com/users/tloredo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tloredo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tloredo/subscriptions",
      "organizations_url": "https://api.github.com/users/tloredo/orgs",
      "repos_url": "https://api.github.com/users/tloredo/repos",
      "events_url": "https://api.github.com/users/tloredo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tloredo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T00:07:40Z",
    "updated_at": "2015-04-24T00:43:43Z",
    "author_association": "NONE",
    "body": "@jreback: Thanks for the benchmarks, advice, and parse.py revision!\n\nI should have mentioned that I'd already tried fixing the type, using dtype=float (I'm guessing this is the same as dtype='float64'; the resulting dataframe has float64 dtypes); it had a negligible impact on performance, which really surprised me as I originally thought the performance penalty was at least in part due to type inference. The keep_default_na=False argument was not something I would have thought to try; it has a greater impact on my platform than the dtype setting (best of 3 results):\n\n```\npandas, vector file laps:\n  * No dtype:  15.895569 s\n  * float:  15.566296 s\n  * float64:  15.780505 s\n  * Add default_na:  10.713563 s\n```\n\nI can verify the 3x speedup from your patch:\n\n```\npandas, vector file laps:\n  * No dtype:  4.847848 s\n  * float:  5.160179 s\n  * float64:  4.986040 s\n  * Add default_na:  4.397989 s\n```\n\nInterestingly, the patch appears to make the dtype and keep_default_na settings more or less irrelevant.\n\nThanks again for looking into this.\n"
  }
]
