[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429820529",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23124#issuecomment-429820529",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23124",
    "id": 429820529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTgyMDUyOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T11:47:55Z",
    "updated_at": "2018-10-15T11:47:55Z",
    "author_association": "MEMBER",
    "body": "> we apparently (sometimes?) allow a fill_value whose dtype is not the same as sp_values.dtype\r\n\r\nIt was indeed allowed in some places, but in previous releases, I think it was mostly explicitly not allowed:\r\n\r\n(examples are using 0.23.4)\r\n\r\n```\r\nIn [5]: a = pd.SparseArray([1, 0, 0, 1, 0])\r\n\r\nIn [6]: a\r\nOut[6]: \r\n[1, 0, 0, 1, 0]\r\nFill: 0\r\nIntIndex\r\nIndices: array([0, 3], dtype=int32)\r\n\r\nIn [7]: a.fill_value = np.nan\r\n...\r\nValueError: unable to set fill_value nan to int64 dtype\r\n```\r\n\r\n```\r\nIn [8]: a = pd.SparseArray([1, np.nan, np.nan, 1, np.nan])\r\n\r\nIn [9]: a\r\nOut[9]: \r\n[1.0, nan, nan, 1.0, nan]\r\nFill: nan\r\nIntIndex\r\nIndices: array([0, 3], dtype=int32)\r\n\r\nIn [10]: a.astype(int)\r\n...\r\nValueError: unable to coerce current fill_value nan to int64 dtype\r\n```\r\n\r\nOne place where we did not check it, was the constructor. However, I think it is only possible to that way create an array with an incompatible fill_value if it is fully dense?\r\n\r\n```\r\nIn [11]: a = pd.SparseArray([1, 0, 0, 1], fill_value=np.nan)\r\n\r\nIn [12]: a\r\nOut[12]: \r\n[1, 0, 0, 1]\r\nFill: nan\r\nIntIndex\r\nIndices: array([0, 1, 2, 3], dtype=int32)\r\n```\r\n\r\nBecause if there is already a `np.nan` in the list, the dtype of the data will be float64, and then np.nan is not an incompatible fill_value.\r\n\r\n---\r\n\r\nOn master we now allow this, but this gives rise to inconsistencies:\r\n\r\n(examples are using master now)\r\n\r\n```\r\nIn [2]: a = pd.SparseArray([1, 0, 0, 1])\r\n\r\nIn [3]: a.fill_value = np.nan\r\n\r\nIn [4]: a\r\nOut[4]: \r\n[1, nan, nan, 1]\r\nFill: nan\r\nIntIndex\r\nIndices: array([0, 3], dtype=int32)\r\n\r\nIn [5]: a.dtype\r\nOut[5]: Sparse[int64, nan]\r\n\r\nIn [6]: a.to_dense()\r\nOut[6]: \r\narray([                   1, -9223372036854775808, -9223372036854775808,\r\n                          1])\r\n\r\nIn [7]: np.array(a)\r\nOut[7]: array([  1.,  nan,  nan,   1.])\r\n\r\nIn [8]: np.array(a).dtype\r\nOut[8]: dtype('float64')\r\n```\r\n\r\nSo you could of course say that  `to_dense` is incorrect (and should fill with np.nan), but on the other hand I find it also inconsistent that the dtype of the densified array is different from the dtype of the sparse array.\r\n\r\nAnd https://github.com/pandas-dev/pandas/issues/23125 about `astype` is a related issue I think."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429822371",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23124#issuecomment-429822371",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23124",
    "id": 429822371,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTgyMjM3MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T11:53:39Z",
    "updated_at": "2018-10-15T11:53:39Z",
    "author_association": "MEMBER",
    "body": "> I suspect a primary motivation was supporting sparse integer values with NaN for a fill value. We should investigate what's tested, part of the API, and useful to users.\r\n\r\nDo you have an example of how to create such an integer sparse array?\r\n\r\nEven with constructing it explicitly with passing integer `sp_values` and `sp_index`, the result has float dtype:\r\n\r\n```\r\nIn [32]: a = pd.SparseArray([0, 1, 0, 1])\r\n\r\nIn [33]: a.sp_values\r\nOut[33]: array([1, 1])\r\n\r\nIn [34]: a.sp_values.dtype\r\nOut[34]: dtype('int64')\r\n\r\nIn [35]: new_a = pd.SparseArray(a.sp_values, sparse_index=a.sp_index, fill_value=np.nan)\r\n\r\nIn [36]: new_a.dtype\r\nOut[36]: dtype('float64')\r\n```\r\n\r\nSo my suspicion is that it was actually not meant to be supported (but of course, only guessing here, as I never used it\r\n\r\n---\r\n\r\nSo for me the main questions is; what is the use case of allowing this? Why allowing the potential confusing, instead of adding a few checks?\r\n\r\nAnd then the \"integer with NA\" use case you mention is indeed one possible answer. But since (I think, see above) this is a new possibility, and not kept for backwards compatibility, I am personally not sure we should allow it for that reason.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429827953",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23124#issuecomment-429827953",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23124",
    "id": 429827953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTgyNzk1Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T12:10:56Z",
    "updated_at": "2018-10-15T12:10:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm thanks for testing that out... I thought that additional tests broke, but I could be misremembering.\r\n\r\nI do agree that we shouldn't be adding new functionality. If the only thing that breaks is the constructor, i.e.\r\n\r\n```python\r\nIn [13]: a = pd.SparseArray([1, 0, 0, 1], fill_value=np.nan)\r\n\r\nIn [14]: a\r\nOut[14]:\r\n[1, 0, 0, 1]\r\nFill: nan\r\nIntIndex\r\nIndices: array([0, 1, 2, 3], dtype=int32)\r\n```\r\n\r\nthen I'm OK with not allowing that, because it isn't actually saving any memory in that case."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429830893",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23124#issuecomment-429830893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23124",
    "id": 429830893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTgzMDg5Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T12:19:39Z",
    "updated_at": "2018-10-15T12:19:39Z",
    "author_association": "MEMBER",
    "body": "> Hmm thanks for testing that out... I thought that additional tests broke, but I could be misremembering.\r\n\r\nI might be wrong of course, I only tried out some obvious things. Might be good to assure that with the tests."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/432791397",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23124#issuecomment-432791397",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23124",
    "id": 432791397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc5MTM5Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T19:11:28Z",
    "updated_at": "2018-10-24T19:11:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, I think this will require a change in `DataFrame.to_sparse`. Right now the default `fill_value` is just np.nan. When you have e.g. an int array, you can't have `np.nan` for your fill_value.\r\n\r\nSo I think we need to change the meaning of `fill_value=None`  in `to_sparse`. Instead of just being `nan`, it will be `na_value_for_dtype(dtype)` on each column.\r\n\r\nWe'll also I think need to update the API to allow `fill_value` to be a mapping of `{column: fill_value}` when you have a mixed dataframe and want different fill values for each column."
  }
]
