[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2791871",
    "html_url": "https://github.com/pandas-dev/pandas/pull/385#issuecomment-2791871",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/385",
    "id": 2791871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTE4NzE=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-18T17:36:53Z",
    "updated_at": "2011-11-18T17:36:53Z",
    "author_association": "MEMBER",
    "body": "thanks Wouter, I made sure that the other plot methods return something too-- will also write some unit tests to hit all of the cases described in the issue before releasing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2794607",
    "html_url": "https://github.com/pandas-dev/pandas/pull/385#issuecomment-2794607",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/385",
    "id": 2794607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTQ2MDc=",
    "user": {
      "login": "lodagro",
      "id": 1094464,
      "node_id": "MDQ6VXNlcjEwOTQ0NjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1094464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lodagro",
      "html_url": "https://github.com/lodagro",
      "followers_url": "https://api.github.com/users/lodagro/followers",
      "following_url": "https://api.github.com/users/lodagro/following{/other_user}",
      "gists_url": "https://api.github.com/users/lodagro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lodagro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lodagro/subscriptions",
      "organizations_url": "https://api.github.com/users/lodagro/orgs",
      "repos_url": "https://api.github.com/users/lodagro/repos",
      "events_url": "https://api.github.com/users/lodagro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lodagro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-18T21:31:48Z",
    "updated_at": "2011-11-18T21:31:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Been thinking a bit on uniformering signatures for plot, hist, boxplot and what they do/return.\nFor reference, below an overview what pandas and matplotlib.pyplot have.\n\nsome things that come to mind\n- +1 for what you did with boxplot, _by_ and _column_ are handy, this could also be used for other kind of plots.\n- bar-plot goes through plot, why not bar() itself.\n- maybe pie() to?\n- plot offers possibility to control _sharex_ and _sharey_, others don not have this control.\n- not all functions use the same subplot layout approach. DataFrame.plot() can plot all lines on a single axis or a nx1 layout. DataFrame.hist() uses nxn layout and DataFrame.boxplot is clever and can do nxm, but the user has no control. Maybe add _nrow_, _ncol_ arguments? Default to None, meaning pandas can control layout, if either one defined pandas should compute the other one. Can get tricky for plot(), need to do something with _subplots_ argument\n- usage of **_kwds_, e.g boxplot has it, does not use this. maybe add _subplot_kw_ and _figure_kw_ arguments for dispatching argmuments -- like matplotlib does.\n- Series.plot has _style_, DataFrame.plot not -- later could maybe use style/colum (like _formatters_ in to_string)?\n- rot not used everywhere\n- probably many users of pandas are familiair with matplotlib too, in general allign plotting signatures and return objects with matplotlib would be a good thing to do?\n\nMaybe if i stare at it a bit longer i may have some more ideas, but this is getting long already. What do you think?\n\n# for reference\n\n## Series:\n\n```\nplot(self, label=None, kind='line', use_index=True, rot=30, ax=None, style='-',\n     grid=True, **kwds)\n\nhist(self, ax=None, grid=True, **kwds)\n```\n\n## DataFrame:\n\n```\nboxplot(self, column=None, by=None, ax=None, fontsize=None,\n            rot=0, grid=True, **kwds)\n\nplot(self, subplots=False, sharex=True, sharey=False, use_index=True,\n         figsize=None, grid=True, legend=True, rot=30, ax=None,\n         kind='line', **kwds)\n\ndef hist(self, grid=True, **kwds):\n```\n\n## matplotlib.pyplot\n\n```\nfigure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None,\n             frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>,\n             **kwargs)\n\nfig, ax = subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True,\n                   subplot_kw=None, **fig_kw)\n---> always creates a new figure\n\nplot(*args, **kwargs)\n    returns list of matplotlib.lines.Line2D\n\nboxplot(x, notch=0, sym='b+', vert=1, whis=1.5, positions=None,\n            widths=None, patch_artist=False, bootstrap=None, hold=None)\n    Returns a dictionary, mapping each component of the boxplot\n    to a list of the :class:`matplotlib.lines.Line2D`\n    instances created.\n\nplt.pie(x, explode=None, labels=None, colors=None, autopct=None,\n        pctdistance=0.6, shadow=False, labeldistance=1.1, hold=None)\n   Return value:\n      If *autopct* is None, return the tuple (*patches*, *texts*):\n\n        - *patches* is a sequence of\n          :class:`matplotlib.patches.Wedge` instances\n\n        - *texts* is a list of the label\n          :class:`matplotlib.text.Text` instances.\n\n      If *autopct* is *None*, return the tuple (*patches*, *texts*)\n      If *autopct* is not *None*, return the tuple (*patches*, *texts*, *autotexts*)\n\nplt.bar(left, height, width=0.8, bottom=None, hold=None, **kwargs)\n    Return value is a list of matplotlib.patches.Rectangle instances\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2868416",
    "html_url": "https://github.com/pandas-dev/pandas/pull/385#issuecomment-2868416",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/385",
    "id": 2868416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njg0MTY=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-24T19:20:36Z",
    "updated_at": "2011-11-24T19:20:36Z",
    "author_association": "MEMBER",
    "body": "hi wouter, i'll move your comment to a new issue\n"
  }
]
