[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362358186",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-362358186",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 362358186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjM1ODE4Ng==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-02-01T18:29:05Z",
    "updated_at": "2018-02-06T09:40:22Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19484?src=pr&el=h1) Report\n> Merging [#19484](https://codecov.io/gh/pandas-dev/pandas/pull/19484?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/35812eaaecebeeee0ddf07dee4b583c4eea07785?src=pr&el=desc) will **decrease** coverage by `0.07%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/19484/graphs/tree.svg?token=eZ4WkYLtcO&src=pr&width=650&height=150)](https://codecov.io/gh/pandas-dev/pandas/pull/19484?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #19484      +/-   ##\n==========================================\n- Coverage   91.67%    91.6%   -0.08%     \n==========================================\n  Files         148      150       +2     \n  Lines       48553    48750     +197     \n==========================================\n+ Hits        44513    44657     +144     \n- Misses       4040     4093      +53\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `89.97% <100%> (-0.07%)` | :arrow_down: |\n| #single | `41.75% <0%> (+0.03%)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/19484?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/io/sas/sas7bdat.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL3Nhcy9zYXM3YmRhdC5weQ==) | `91.07% <100%> (ø)` | :arrow_up: |\n| [pandas/errors/\\_\\_init\\_\\_.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL2Vycm9ycy9fX2luaXRfXy5weQ==) | `92.3% <0%> (-7.7%)` | :arrow_down: |\n| [pandas/core/arrays/categorical.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL2NhdGVnb3JpY2FsLnB5) | `94.74% <0%> (-1.04%)` | :arrow_down: |\n| [pandas/core/internals.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW50ZXJuYWxzLnB5) | `95.05% <0%> (-0.42%)` | :arrow_down: |\n| [pandas/core/ops.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvb3BzLnB5) | `95.22% <0%> (-0.31%)` | :arrow_down: |\n| [pandas/plotting/\\_core.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL3Bsb3R0aW5nL19jb3JlLnB5) | `82.23% <0%> (-0.18%)` | :arrow_down: |\n| [pandas/tseries/offsets.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL3RzZXJpZXMvb2Zmc2V0cy5weQ==) | `97% <0%> (-0.09%)` | :arrow_down: |\n| [pandas/core/sparse/array.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvc3BhcnNlL2FycmF5LnB5) | `91.4% <0%> (-0.08%)` | :arrow_down: |\n| [pandas/core/indexes/range.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9yYW5nZS5weQ==) | `95.65% <0%> (-0.06%)` | :arrow_down: |\n| [pandas/core/dtypes/dtypes.py](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZHR5cGVzL2R0eXBlcy5weQ==) | `96.08% <0%> (-0.04%)` | :arrow_down: |\n| ... and [15 more](https://codecov.io/gh/pandas-dev/pandas/pull/19484/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19484?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19484?src=pr&el=footer). Last update [35812ea...f09bee7](https://codecov.io/gh/pandas-dev/pandas/pull/19484?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362870727",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-362870727",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 362870727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjg3MDcyNw==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-04T01:01:47Z",
    "updated_at": "2018-02-06T06:47:42Z",
    "author_association": "NONE",
    "body": "Hello @jbrockmendel! Thanks for updating the PR.\n\n\n\n\n\nCheers ! There are no PEP8 issues in this Pull Request. :beers: \n\n##### Comment last updated on February 06, 2018 at 06:47 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362882618",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-362882618",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 362882618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjg4MjYxOA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-04T05:40:24Z",
    "updated_at": "2018-02-04T05:40:24Z",
    "author_association": "MEMBER",
    "body": "It looks like the CI errors are occurring in builds with cython pinned to 0.24.0.  The un-pinned builds are using 0.27.3 and passing.  Running locally it looks like 0.25.0 still breaks, but 0.26.0 works."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363161799",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-363161799",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 363161799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzE2MTc5OQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T17:42:57Z",
    "updated_at": "2018-02-05T17:42:57Z",
    "author_association": "MEMBER",
    "body": "@gfyoung any idea what the timeline is for bumping the cython specs?  This is going nowhere until that happens, so may be closable."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363162834",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-363162834",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 363162834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzE2MjgzNA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T17:46:30Z",
    "updated_at": "2018-02-05T17:46:30Z",
    "author_association": "MEMBER",
    "body": "@jbrockmendel : Not my call unfortunately.  Let's ping @jreback about this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363275445",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-363275445",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 363275445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzI3NTQ0NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T01:06:58Z",
    "updated_at": "2018-02-06T01:06:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "we changed this dep to 0.23 in pandas 0.20.1"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363469954",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-363469954",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 363469954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzQ2OTk1NA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T16:03:53Z",
    "updated_at": "2018-02-06T16:03:53Z",
    "author_association": "MEMBER",
    "body": "It looks like implementing tslibs.util is a/the fix for the older cythons."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363606636",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-363606636",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 363606636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzYwNjYzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T23:52:40Z",
    "updated_at": "2018-02-06T23:52:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "looks good. going to need a perf check. might want to put the util changes in a separate PR? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363835700",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-363835700",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 363835700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzgzNTcwMA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T16:57:22Z",
    "updated_at": "2018-02-07T17:04:31Z",
    "author_association": "MEMBER",
    "body": "Ran the whole asv suite a few times overnight.  <s>Usual melange</s> A few things took a hit, see next comment.  First for just timeseries:\r\n\r\n```\r\nasv continuous -f 1.1 -E virtualenv master HEAD -b timeseries\r\n[...]\r\n    before     after       ratio\r\n  [983d71fa] [f09bee78]\r\n+    6.93ms    33.49ms      4.83  timeseries.Factorize.time_factorize(None)\r\n+    6.99ms    33.09ms      4.74  timeseries.Factorize.time_factorize('Asia/Tokyo')\r\n+    6.04ms     9.51ms      1.57  timeseries.AsOf.time_asof('DataFrame')\r\n+  261.93μs   365.65μs      1.40  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+  537.02μs   706.39μs      1.32  timeseries.InferFreq.time_infer_freq(None)\r\n+  541.84μs   711.63μs      1.31  timeseries.InferFreq.time_infer_freq('D')\r\n+    5.97ms     7.53ms      1.26  timeseries.AsOf.time_asof_nan('DataFrame')\r\n+  128.04ms   156.67ms      1.22  timeseries.DatetimeIndex.time_to_pydatetime('tz_aware')\r\n+   66.47ms    79.99ms      1.20  timeseries.ToDatetimeISO8601.time_iso8601_tz_spaceformat\r\n+  843.69μs     1.01ms      1.20  timeseries.InferFreq.time_infer_freq('B')\r\n-   21.69ms    19.69ms      0.91  timeseries.DatetimeIndex.time_to_pydatetime('repeated')\r\n-    3.00ms     2.71ms      0.90  timeseries.ToDatetimeCache.time_dup_seconds_and_unit(False)\r\n-    4.82μs     4.26μs      0.88  timeseries.DatetimeIndex.time_get('dst')\r\n-  139.72ms   123.21ms      0.88  timeseries.DatetimeIndex.time_to_time('tz_aware')\r\n-  527.94μs   458.28μs      0.87  timeseries.ResetIndex.time_reest_datetimeindex('US/Eastern')\r\n-    3.79ms     3.15ms      0.83  timeseries.AsOf.time_asof_nan('Series')\r\n-    3.90ms     3.24ms      0.83  timeseries.AsOf.time_asof('Series')\r\n-    2.80ms     1.85ms      0.66  timeseries.ResampleDataFrame.time_method('max')\r\n-    4.92ms     3.02ms      0.61  timeseries.AsOf.time_asof_nan_single('DataFrame')\r\n-    4.33ms     2.54ms      0.59  timeseries.ToDatetimeCache.time_dup_string_tzoffset_dates(True)\r\n\r\n    before     after       ratio\r\n  [983d71fa] [f09bee78]\r\n+    1.86ms     3.10ms      1.66  timeseries.DatetimeIndex.time_add_timedelta('repeated')\r\n+  256.82μs   358.71μs      1.40  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+  538.74μs   688.32μs      1.28  timeseries.InferFreq.time_infer_freq(None)\r\n+  541.64μs   687.80μs      1.27  timeseries.InferFreq.time_infer_freq('D')\r\n+  840.61μs     1.00ms      1.19  timeseries.InferFreq.time_infer_freq('B')\r\n-    3.96ms     3.42ms      0.86  timeseries.AsOf.time_asof('Series')\r\n-    3.77ms     3.14ms      0.83  timeseries.AsOf.time_asof_nan('Series')\r\n```\r\n\r\nAnd the whole suite:\r\n```\r\n    before     after       ratio\r\n  [983d71fa] [f09bee78]\r\n+   11.95ms    35.06ms      2.93  io.hdf.HDFStorePanel.time_read_store_table_panel\r\n+   20.88ms    44.81ms      2.15  io.hdf.HDF.time_read_hdf('fixed')\r\n+  125.70μs   211.42μs      1.68  indexing.IntervalIndexing.time_getitem_list\r\n+   86.26ms   139.19ms      1.61  io.json.ToJSON.time_float_int_str('split')\r\n+   21.72ms    34.26ms      1.58  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<CustomBusinessDay>)\r\n+   83.22ms   129.40ms      1.55  io.json.ToJSON.time_float_int('split')\r\n+  304.53μs   468.58μs      1.54  stat_ops.SeriesOps.time_op('mean', 'float', False)\r\n+  224.66μs   340.59μs      1.52  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n+  243.17μs   364.07μs      1.50  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  224.34μs   334.48μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n+  237.56μs   352.31μs      1.48  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+    5.35ms     7.92ms      1.48  stat_ops.SeriesMultiIndexOps.time_op(0, 'sem')\r\n+  228.48μs   337.05μs      1.48  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  253.66μs   371.63μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  237.63μs   347.45μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  234.48μs   341.10μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  235.38μs   341.91μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<Day>)\r\n+  240.36μs   345.56μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  241.32μs   346.50μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  257.84μs   370.16μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  506.50μs   725.95μs      1.43  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  259.27μs   370.45μs      1.43  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+    7.98ms    11.28ms      1.41  binary_ops.Ops.time_frame_add(True, 'default')\r\n+  263.65μs   370.73μs      1.41  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+    1.50ms     2.08ms      1.39  inference.NumericInferOps.time_multiply(<type 'numpy.int32'>)\r\n+    1.43ms     1.97ms      1.37  inference.NumericInferOps.time_subtract(<type 'numpy.float32'>)\r\n+   11.94ms    16.09ms      1.35  frame_methods.Repr.time_repr_tall\r\n+    1.01ms     1.33ms      1.31  inference.NumericInferOps.time_subtract(<type 'numpy.uint64'>)\r\n+  303.84μs   396.25μs      1.30  groupby.GroupByMethods.time_method('int', 'sum')\r\n+  108.24ms   140.14ms      1.29  io.json.ToJSON.time_delta_int_tstamp('index')\r\n+  539.02μs   696.29μs      1.29  timeseries.InferFreq.time_infer_freq(None)\r\n+  299.71ns   385.43ns      1.29  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+  537.47μs   686.67μs      1.28  timeseries.InferFreq.time_infer_freq('D')\r\n+   16.69μs    21.12μs      1.27  offset.OffestDatetimeArithmetic.time_subtract_10(<QuarterEnd: startingMonth=3>)\r\n+  349.34μs   441.60μs      1.26  inference.NumericInferOps.time_multiply(<type 'numpy.uint16'>)\r\n+    3.73ms     4.68ms      1.26  timeseries.ToDatetimeCache.time_dup_seconds_and_unit(True)\r\n+  579.46ms   724.11ms      1.25  io.json.ToJSON.time_delta_int_tstamp_lines('columns')\r\n+  611.83ms   757.73ms      1.24  io.json.ToJSON.time_delta_int_tstamp_lines('split')\r\n+  273.24μs   338.34μs      1.24  inference.NumericInferOps.time_subtract(<type 'numpy.int8'>)\r\n+  415.03μs   513.02μs      1.24  offset.ApplyIndex.time_apply_index(<MonthEnd>)\r\n+  487.02ns   598.83ns      1.23  timestamp.TimestampProperties.time_freqstr(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+  617.10ms   756.28ms      1.23  io.json.ToJSON.time_delta_int_tstamp_lines('index')\r\n+  857.92μs     1.05ms      1.22  offset.ApplyIndex.time_apply_index(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+   10.70ms    12.99ms      1.21  timeseries.Iteration.time_iter_preexit(<function period_range at 0x7fefcb4211b8>)\r\n+  770.87ms   935.24ms      1.21  io.json.ToJSON.time_float_int_lines('columns')\r\n+  761.82ms   923.69ms      1.21  io.json.ToJSON.time_float_int_lines('index')\r\n+  761.20ms   922.92ms      1.21  io.json.ToJSON.time_float_int_lines('split')\r\n+  913.65μs     1.11ms      1.21  offset.OffsetSeriesArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+   36.00ms    43.57ms      1.21  eval.Eval.time_chained_cmp('python', 'all')\r\n+   37.37ms    44.94ms      1.20  eval.Eval.time_and('numexpr', 'all')\r\n+  838.16μs     1.01ms      1.20  timeseries.InferFreq.time_infer_freq('B')\r\n+    1.88ms     2.25ms      1.20  stat_ops.SeriesOps.time_op('sem', 'int', True)\r\n+  879.47μs     1.05ms      1.20  binary_ops.Timeseries.time_series_timestamp_compare('US/Eastern')\r\n+  673.02μs   802.19μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+    1.75ms     2.08ms      1.19  index_object.SetOperations.time_operation('datetime', 'intersection')\r\n+  312.61μs   369.60μs      1.18  stat_ops.SeriesOps.time_op('prod', 'int', True)\r\n+  640.26μs   756.66μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  648.34μs   765.92μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+    3.95μs     4.66μs      1.18  timeseries.DatetimeIndex.time_get('tz_naive')\r\n+  289.92μs   342.10μs      1.18  stat_ops.SeriesOps.time_op('prod', 'float', False)\r\n+  656.86μs   774.82μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  313.58μs   369.64μs      1.18  stat_ops.SeriesOps.time_op('prod', 'int', False)\r\n+  638.20μs   751.74μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<MonthEnd>)\r\n+  292.55μs   344.47μs      1.18  stat_ops.SeriesOps.time_op('prod', 'float', True)\r\n+  302.77μs   356.28μs      1.18  stat_ops.SeriesOps.time_op('sum', 'float', False)\r\n+  303.06μs   356.41μs      1.18  stat_ops.SeriesOps.time_op('sum', 'float', True)\r\n+    2.23ms     2.62ms      1.17  inference.NumericInferOps.time_add(<type 'numpy.int64'>)\r\n+   30.46ms    35.78ms      1.17  groupby.Groups.time_series_groups('int64_small')\r\n+  643.87μs   754.34μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  662.20μs   775.72μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  637.74μs   743.06μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<MonthBegin>)\r\n+  652.56μs   759.65μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  123.53ns   143.64ns      1.16  index_object.Datetime.time_is_dates_only\r\n+    1.16ms     1.35ms      1.16  stat_ops.SeriesOps.time_op('sem', 'float', False)\r\n+   32.33ms    37.45ms      1.16  eval.Eval.time_chained_cmp('numexpr', 'all')\r\n+  307.81μs   356.41μs      1.16  stat_ops.SeriesOps.time_op('mean', 'float', True)\r\n+    7.96ms     9.20ms      1.16  series_methods.ValueCounts.time_value_counts('object')\r\n+    1.16ms     1.34ms      1.16  stat_ops.SeriesOps.time_op('sem', 'float', True)\r\n+  672.12μs   776.18μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  655.24μs   756.04μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+    4.27ms     4.92ms      1.15  inference.NumericInferOps.time_modulo(<type 'numpy.float32'>)\r\n+   68.31μs    78.71μs      1.15  indexing.IntervalIndexing.time_loc_scalar\r\n+  346.41μs   399.08μs      1.15  stat_ops.SeriesOps.time_op('sum', 'int', False)\r\n+  348.32μs   401.17μs      1.15  stat_ops.SeriesOps.time_op('sum', 'int', True)\r\n+  659.05μs   758.31μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n+  343.71μs   393.68μs      1.15  inference.NumericInferOps.time_multiply(<type 'numpy.int16'>)\r\n+   17.66μs    20.12μs      1.14  offset.OffestDatetimeArithmetic.time_apply(<Day>)\r\n+    5.37μs     6.10μs      1.14  indexing.NonNumericSeriesIndexing.time_get_value('string')\r\n+     2.44s      2.75s      1.13  groupby.FirstLast.time_groupby_first('object')\r\n+   10.67μs    12.04μs      1.13  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessYearEnd: month=12>)\r\n+    3.62ms     4.08ms      1.13  binary_ops.Ops.time_frame_comparison(True, 1)\r\n+    2.23ms     2.51ms      1.13  inference.NumericInferOps.time_subtract(<type 'numpy.int64'>)\r\n+  664.09μs   747.88μs      1.13  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+    5.74μs     6.47μs      1.13  index_object.Float64IndexMethod.time_get_loc\r\n+    1.73ms     1.95ms      1.12  timeseries.ResampleSeries.time_resample('datetime', '1D', 'mean')\r\n+  423.93μs   475.77μs      1.12  stat_ops.SeriesOps.time_op('mean', 'int', False)\r\n+  423.33μs   474.88μs      1.12  stat_ops.SeriesOps.time_op('mean', 'int', True)\r\n+  865.78ns   970.73ns      1.12  period.PeriodProperties.time_property('M', 'quarter')\r\n+   11.29μs    12.65μs      1.12  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<YearBegin: month=1>)\r\n+  313.19ms   350.77ms      1.12  io.json.ReadJSONLines.time_read_json_lines('int')\r\n+    9.14μs    10.20μs      1.12  offset.OffestDatetimeArithmetic.time_apply(<BusinessMonthBegin>)\r\n+  701.01μs   780.10μs      1.11  stat_ops.SeriesOps.time_op('var', 'int', False)\r\n+    2.73ms     3.03ms      1.11  algorithms.Duplicated.time_duplicated_int(False)\r\n+   12.32μs    13.65μs      1.11  offset.OffestDatetimeArithmetic.time_add(<BusinessQuarterBegin: startingMonth=3>)\r\n+   11.58μs    12.77μs      1.10  offset.OffestDatetimeArithmetic.time_add(<BusinessMonthEnd>)\r\n+  540.39μs   596.03μs      1.10  stat_ops.SeriesOps.time_op('std', 'float', False)\r\n+     2.21s      2.43s      1.10  io.json.ReadJSON.time_read_json('index', 'datetime')\r\n+   45.92ms    50.59ms      1.10  eval.Eval.time_and('python', 'all')\r\n+  534.77μs   588.99μs      1.10  stat_ops.SeriesOps.time_op('std', 'float', True)\r\n-    6.86μs     6.23μs      0.91  timedelta.TimedeltaConstructor.time_from_string\r\n-    6.80ms     6.18ms      0.91  groupby.Transform.time_transform_multi_key2\r\n-   25.92μs    23.49μs      0.91  ctors.SeriesConstructors.time_series_constructor(<function <lambda> at 0x7fefc5bc8d70>, False)\r\n-   10.49ms     9.50ms      0.91  stat_ops.FrameOps.time_op('mad', 'int', 1, True)\r\n-  960.27μs   869.18μs      0.91  groupby.GroupByMethods.time_method('int', 'sem')\r\n-   18.37μs    16.62μs      0.90  offset.OffestDatetimeArithmetic.time_add_10(<SemiMonthEnd: day_of_month=15>)\r\n-  320.56ms   289.57ms      0.90  groupby.GroupByMethods.time_method('float', 'skew')\r\n-  117.34ms   105.99ms      0.90  inference.ToNumericDowncast.time_downcast('string-float', 'float')\r\n-    9.12ms     8.23ms      0.90  inference.NumericInferOps.time_modulo(<type 'numpy.int64'>)\r\n-   25.91ms    23.36ms      0.90  frame_methods.SortIndexByColumns.time_frame_sort_values_by_columns\r\n-   12.97μs    11.70μs      0.90  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<SemiMonthEnd: day_of_month=15>)\r\n-   17.06μs    15.36μs      0.90  offset.OffestDatetimeArithmetic.time_subtract(<QuarterBegin: startingMonth=3>)\r\n-    1.01ms   910.83μs      0.90  index_object.Ops.time_add('float')\r\n-    3.45ms     3.11ms      0.90  stat_ops.FrameOps.time_op('sum', 'float', 1, False)\r\n-    7.37ms     6.63ms      0.90  groupby.Categories.time_groupby_nosort\r\n-   12.96μs    11.65μs      0.90  offset.OffestDatetimeArithmetic.time_add(<BusinessYearEnd: month=12>)\r\n-    2.64ms     2.37ms      0.90  timeseries.DatetimeIndex.time_unique('tz_aware')\r\n-    1.93ms     1.74ms      0.90  stat_ops.SeriesMultiIndexOps.time_op(1, 'prod')\r\n-   12.23μs    10.99μs      0.90  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<YearEnd: month=12>)\r\n-  993.40μs   892.27μs      0.90  groupby.GroupByMethods.time_method('float', 'sem')\r\n-   10.38ms     9.32ms      0.90  stat_ops.FrameOps.time_op('mad', 'int', 0, False)\r\n-  111.28ms    99.84ms      0.90  io.json.ToJSON.time_float_int_str('index')\r\n-    2.87ms     2.57ms      0.90  stat_ops.FrameOps.time_op('sum', 'int', 1, False)\r\n-   16.98μs    15.22μs      0.90  offset.OffestDatetimeArithmetic.time_add_10(<QuarterEnd: startingMonth=3>)\r\n-    7.94μs     7.11μs      0.90  timestamp.TimestampProperties.time_is_leap_year(None, 'B')\r\n-   65.37ms    58.52ms      0.90  io.json.ToJSON.time_floats_with_int_index('split')\r\n-    3.03ms     2.71ms      0.90  sparse.SparseArrayConstructor.time_sparse_array(0.01, nan, <type 'numpy.float64'>)\r\n-   13.07μs    11.69μs      0.89  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    2.00ms     1.78ms      0.89  stat_ops.SeriesMultiIndexOps.time_op(0, 'sum')\r\n-   12.74μs    11.36μs      0.89  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    3.93ms     3.50ms      0.89  offset.OnOffset.time_on_offset(<CustomBusinessMonthEnd>)\r\n-    1.43μs     1.27μs      0.89  timedelta.TimedeltaConstructor.time_from_missing\r\n-   16.15ms    14.36ms      0.89  reshape.PivotTable.time_pivot_table\r\n-   11.72ms    10.41ms      0.89  stat_ops.Rank.time_average_old('DataFrame', False)\r\n-  952.45μs   846.10μs      0.89  inference.NumericInferOps.time_multiply(<type 'numpy.uint32'>)\r\n-    7.56μs     6.71μs      0.89  timestamp.TimestampProperties.time_is_quarter_start(None, 'B')\r\n-     2.24s      1.99s      0.89  join_merge.I8Merge.time_i8merge('outer')\r\n-   24.63ms    21.81ms      0.89  groupby.Datelike.time_sum('period_range')\r\n-    3.89ms     3.44ms      0.88  stat_ops.SeriesOps.time_op('mad', 'float', True)\r\n-    7.21ms     6.38ms      0.88  stat_ops.FrameOps.time_op('var', 'float', 0, False)\r\n-    2.76ms     2.44ms      0.88  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'count')\r\n-  334.01μs   295.06μs      0.88  inference.NumericInferOps.time_multiply(<type 'numpy.int8'>)\r\n-   16.60μs    14.66μs      0.88  offset.OffestDatetimeArithmetic.time_subtract(<BusinessQuarterBegin: startingMonth=3>)\r\n-   11.21μs     9.90μs      0.88  multiindex_object.GetLoc.time_string_get_loc\r\n-    1.13ms   998.93μs      0.88  inference.NumericInferOps.time_add(<type 'numpy.uint64'>)\r\n-    1.00ms   882.87μs      0.88  index_object.Ops.time_multiply('int')\r\n-    7.92ms     6.98ms      0.88  stat_ops.FrameMultiIndexOps.time_op(0, 'median')\r\n-   12.99μs    11.44μs      0.88  timestamp.TimestampProperties.time_is_month_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    5.39ms     4.74ms      0.88  stat_ops.SeriesMultiIndexOps.time_op(1, 'sem')\r\n-  405.44ms   356.30ms      0.88  io.stata.Stata.time_write_stata('tw')\r\n-   13.03μs    11.45μs      0.88  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    1.02ms   894.57μs      0.88  binary_ops.Timeseries.time_timestamp_series_compare('US/Eastern')\r\n-    7.57μs     6.62μs      0.88  timestamp.TimestampProperties.time_is_year_start(None, 'B')\r\n-     2.20s      1.93s      0.88  join_merge.I8Merge.time_i8merge('inner')\r\n-   11.74ms    10.27ms      0.87  stat_ops.FrameMultiIndexOps.time_op([0, 1], 'median')\r\n-  144.00μs   125.84μs      0.87  offset.OffestDatetimeArithmetic.time_subtract_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-  597.62ns   521.99ns      0.87  timestamp.TimestampProperties.time_weekday_name(None, 'B')\r\n-    6.52ms     5.68ms      0.87  stat_ops.FrameMultiIndexOps.time_op(0, 'sem')\r\n-   19.68μs    17.14μs      0.87  period.PeriodUnaryMethods.time_asfreq('min')\r\n-    15.40s     13.40s      0.87  join_merge.JoinIndex.time_left_outer_join_index\r\n-     2.27s      1.97s      0.87  join_merge.I8Merge.time_i8merge('left')\r\n-    1.09ms   942.30μs      0.87  replace.FillNa.time_replace(True)\r\n-   28.42ms    24.62ms      0.87  stat_ops.FrameMultiIndexOps.time_op(0, 'skew')\r\n-   11.26ms     9.74ms      0.87  stat_ops.FrameOps.time_op('mad', 'int', 1, False)\r\n-     2.30s      1.99s      0.86  join_merge.ConcatPanels.time_c_ordered(2, True)\r\n-   24.77μs    21.40μs      0.86  offset.OffestDatetimeArithmetic.time_subtract(<Day>)\r\n-   10.88μs     9.40μs      0.86  timedelta.TimedeltaConstructor.time_from_components\r\n-   13.41ms    11.56ms      0.86  frame_methods.MaskBool.time_frame_mask_bools\r\n-   10.70μs     9.22μs      0.86  offset.OffestDatetimeArithmetic.time_apply(<BusinessMonthEnd>)\r\n-  958.66μs   825.89μs      0.86  index_object.Ops.time_subtract('int')\r\n-     2.32s      1.99s      0.86  join_merge.ConcatPanels.time_c_ordered(2, False)\r\n-    3.81ms     3.28ms      0.86  stat_ops.SeriesOps.time_op('mad', 'float', False)\r\n-   11.48μs     9.83μs      0.86  multiindex_object.GetLoc.time_med_get_loc\r\n-    7.92μs     6.74μs      0.85  timestamp.TimestampProperties.time_is_month_end(None, 'B')\r\n-    1.10ms   935.84μs      0.85  replace.FillNa.time_fillna(True)\r\n-    1.91ms     1.62ms      0.84  inference.NumericInferOps.time_divide(<type 'numpy.uint8'>)\r\n-  124.76ms   105.31ms      0.84  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<CustomBusinessMonthBegin>)\r\n-   13.04μs    11.00μs      0.84  timestamp.TimestampProperties.time_is_year_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    3.92ms     3.31ms      0.84  timeseries.AsOf.time_asof('Series')\r\n-     4.83s      4.04s      0.84  join_merge.MergeCategoricals.time_merge_object\r\n-    3.35ms     2.80ms      0.84  inference.NumericInferOps.time_divide(<type 'numpy.int64'>)\r\n-    8.43ms     7.02ms      0.83  stat_ops.FrameOps.time_op('std', 'float', 1, False)\r\n-    5.90ms     4.88ms      0.83  groupby.Nth.time_series_nth_any\r\n-   22.66ms    18.68ms      0.82  reindex.DropDuplicates.time_frame_drop_dups_int(False)\r\n-  248.34ms   204.65ms      0.82  plotting.Plotting.time_series_plot\r\n-  265.84ms   218.39ms      0.82  strings.Split.time_split(True)\r\n-   73.38μs    60.24μs      0.82  offset.OffestDatetimeArithmetic.time_add_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    7.71ms     6.33ms      0.82  stat_ops.FrameOps.time_op('std', 'float', 0, True)\r\n-   20.36μs    16.65μs      0.82  offset.OffestDatetimeArithmetic.time_subtract(<BusinessDay>)\r\n-    9.97ms     8.14ms      0.82  binary_ops.Ops.time_frame_mult(True, 'default')\r\n-  183.78ms   149.70ms      0.81  sparse.SparseArrayConstructor.time_sparse_array(0.01, nan, <type 'numpy.int64'>)\r\n-     1.59s      1.29s      0.81  join_merge.ConcatPanels.time_f_ordered(1, False)\r\n-    3.85ms     3.13ms      0.81  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlite', 'float_with_nan')\r\n-   38.43ms    31.13ms      0.81  sparse.Arithmetic.time_divide(0.01, nan)\r\n-     1.67s      1.35s      0.81  join_merge.ConcatPanels.time_f_ordered(0, True)\r\n-    8.38ms     6.72ms      0.80  stat_ops.FrameOps.time_op('var', 'float', 1, False)\r\n-   18.10μs    14.51μs      0.80  offset.OffestDatetimeArithmetic.time_subtract(<MonthEnd>)\r\n-    1.45ms     1.16ms      0.80  inference.NumericInferOps.time_multiply(<type 'numpy.float32'>)\r\n-  187.25ms   149.98ms      0.80  sparse.SparseArrayConstructor.time_sparse_array(0.1, nan, <type 'numpy.int64'>)\r\n-     1.65s      1.32s      0.80  join_merge.ConcatPanels.time_f_ordered(0, False)\r\n-   26.16ms    20.91ms      0.80  io.csv.ToCSV.time_frame('mixed')\r\n-     1.57s      1.25s      0.80  join_merge.ConcatPanels.time_f_ordered(2, True)\r\n-     1.58s      1.26s      0.79  join_merge.ConcatPanels.time_f_ordered(1, True)\r\n-  344.18μs   272.50μs      0.79  inference.NumericInferOps.time_multiply(<type 'numpy.uint8'>)\r\n-     1.64s      1.30s      0.79  join_merge.ConcatPanels.time_c_ordered(1, True)\r\n-    5.74ms     4.52ms      0.79  timedelta.TimedeltaOps.time_add_td_ts\r\n-     1.64s      1.29s      0.79  join_merge.ConcatPanels.time_f_ordered(2, False)\r\n-    4.04ms     3.17ms      0.78  timeseries.AsOf.time_asof_nan('Series')\r\n-  280.40ms   217.10ms      0.77  plotting.Plotting.time_frame_plot\r\n-    1.98ms     1.53ms      0.77  reshape.Melt.time_melt_dataframe\r\n-     1.39s      1.07s      0.77  join_merge.ConcatPanels.time_c_ordered(0, False)\r\n-     3.05s      2.35s      0.77  join_merge.MergeCategoricals.time_merge_cat\r\n-   35.01μs    26.93μs      0.77  offset.OffestDatetimeArithmetic.time_add_10(<CustomBusinessDay>)\r\n-   22.81ms    17.54ms      0.77  stat_ops.FrameOps.time_op('skew', 'int', 1, False)\r\n-    7.98ms     6.12ms      0.77  timeseries.AsOf.time_asof('DataFrame')\r\n-    7.64ms     5.81ms      0.76  timeseries.AsOf.time_asof_nan('DataFrame')\r\n-    3.88ms     2.95ms      0.76  groupby.Size.time_category_size\r\n-   94.73ms    71.63ms      0.76  io.json.ToJSON.time_floats_with_dt_index('columns')\r\n-   20.52μs    15.32μs      0.75  offset.OffestDatetimeArithmetic.time_add_10(<YearEnd: month=12>)\r\n-  803.71ms   597.36ms      0.74  reshape.Unstack.time_full_product\r\n-     1.67s      1.23s      0.74  join_merge.ConcatPanels.time_c_ordered(1, False)\r\n-  287.57ns   208.82ns      0.73  timestamp.TimestampProperties.time_microsecond(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-   17.01μs    12.13μs      0.71  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-     1.49s      1.06s      0.71  join_merge.ConcatPanels.time_c_ordered(0, True)\r\n-   40.71μs    28.87μs      0.71  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    1.78ms     1.24ms      0.70  timeseries.ResampleDataFrame.time_method('mean')\r\n-   17.02μs    11.80μs      0.69  offset.OffestDatetimeArithmetic.time_add(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   28.50ms    19.64ms      0.69  algorithms.Factorize.time_factorize_float(True)\r\n-   27.45ms    18.45ms      0.67  stat_ops.FrameOps.time_op('skew', 'float', 1, True)\r\n-   14.64μs     9.76μs      0.67  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-  115.06μs    76.15μs      0.66  indexing.NonNumericSeriesIndexing.time_getitem_label_slice('datetime')\r\n-    6.32ms     4.18ms      0.66  binary_ops.Ops.time_frame_add(False, 1)\r\n-  701.50ms   451.22ms      0.64  join_merge.ConcatDataFrames.time_c_ordered(0, False)\r\n-   32.45ms    20.83ms      0.64  stat_ops.FrameOps.time_op('median', 'int', 1, False)\r\n-  791.37ms   507.61ms      0.64  io.json.ToJSON.time_float_int_str_lines('columns')\r\n-   96.92ms    61.76ms      0.64  io.json.ToJSON.time_floats_with_int_index('columns')\r\n-    2.36ms     1.48ms      0.63  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', None)\r\n-   32.05ms    19.67ms      0.61  stat_ops.FrameOps.time_op('median', 'int', 1, True)\r\n-  249.90ms   151.68ms      0.61  multiindex_object.Integer.time_is_monotonic\r\n-  759.93ms   459.92ms      0.61  join_merge.ConcatDataFrames.time_f_ordered(0, True)\r\n-   28.85ms    17.27ms      0.60  stat_ops.FrameOps.time_op('skew', 'int', 1, True)\r\n-  931.21μs   549.00μs      0.59  series_methods.Dropna.time_dropna('int')\r\n-  253.24ms   148.53ms      0.59  join_merge.Align.time_series_align_int64_index\r\n-  778.32ms   455.46ms      0.59  join_merge.ConcatDataFrames.time_c_ordered(0, True)\r\n-  118.97ms    68.75ms      0.58  io.json.ToJSON.time_floats_with_int_index('index')\r\n-  828.06ms   476.80ms      0.58  join_merge.ConcatDataFrames.time_f_ordered(0, False)\r\n-   29.69ms    17.09ms      0.58  stat_ops.FrameOps.time_op('sem', 'int', 1, True)\r\n-     1.01s   579.20ms      0.57  multiindex_object.Sortlevel.time_sortlevel_int64\r\n-  131.32ms    75.07ms      0.57  io.json.ToJSON.time_floats_with_dt_index('index')\r\n-   25.48ms    14.51ms      0.57  stat_ops.FrameOps.time_op('kurt', 'int', 1, False)\r\n-  580.86ms   329.38ms      0.57  join_merge.ConcatDataFrames.time_c_ordered(1, False)\r\n-   26.29ms    14.69ms      0.56  stat_ops.FrameOps.time_op('sem', 'int', 0, True)\r\n-  603.96ms   331.15ms      0.55  join_merge.ConcatDataFrames.time_c_ordered(1, True)\r\n-   26.57ms    14.51ms      0.55  stat_ops.FrameOps.time_op('sem', 'int', 0, False)\r\n-   26.74ms    14.31ms      0.54  join_merge.Join.time_join_dataframe_index_multi(False)\r\n-   24.69ms    13.01ms      0.53  stat_ops.FrameOps.time_op('sem', 'float', 0, True)\r\n-  595.18ms   297.23ms      0.50  join_merge.ConcatDataFrames.time_f_ordered(1, False)\r\n-   43.67ms    21.75ms      0.50  stat_ops.FrameOps.time_op('median', 'float', 1, True)\r\n-  878.45ms   430.42ms      0.49  io.json.ToJSON.time_float_int_str_lines('index')\r\n-  221.51ms   108.45ms      0.49  reshape.Pivot.time_reshape_pivot_time_series\r\n-  852.03ms   411.87ms      0.48  io.json.ToJSON.time_float_int_str_lines('split')\r\n-   42.69ms    20.59ms      0.48  binary_ops.Ops2.time_frame_int_mod\r\n-   21.55ms    10.37ms      0.48  stat_ops.FrameOps.time_op('mad', 'float', 1, True)\r\n-   20.49ms     9.76ms      0.48  inference.DateInferOps.time_timedelta_plus_datetime\r\n-   21.10ms    10.01ms      0.47  stat_ops.FrameOps.time_op('skew', 'int', 0, False)\r\n-   45.60ms    21.43ms      0.47  stat_ops.FrameOps.time_op('median', 'float', 1, False)\r\n-  611.97ms   285.83ms      0.47  join_merge.ConcatDataFrames.time_f_ordered(1, True)\r\n-   22.15ms    10.21ms      0.46  stat_ops.FrameOps.time_op('mad', 'float', 1, False)\r\n-   21.67ms     9.92ms      0.46  stat_ops.FrameOps.time_op('skew', 'float', 0, True)\r\n-   40.20ms    18.14ms      0.45  stat_ops.FrameOps.time_op('skew', 'float', 1, False)\r\n-   22.30ms     9.86ms      0.44  stat_ops.FrameOps.time_op('kurt', 'float', 0, True)\r\n-   20.87ms     9.21ms      0.44  stat_ops.FrameOps.time_op('mad', 'float', 0, True)\r\n-   21.83ms     9.59ms      0.44  join_merge.Join.time_join_dataframe_index_single_key_bigger(False)\r\n-   20.55ms     9.01ms      0.44  stat_ops.FrameOps.time_op('mad', 'float', 0, False)\r\n-   40.23ms    17.57ms      0.44  stat_ops.FrameOps.time_op('sem', 'int', 1, False)\r\n-  165.22ms    70.66ms      0.43  join_merge.Align.time_series_align_left_monotonic\r\n-   39.37ms    16.73ms      0.43  stat_ops.FrameOps.time_op('sem', 'float', 1, False)\r\n-   22.74ms     9.58ms      0.42  stat_ops.FrameOps.time_op('kurt', 'int', 0, False)\r\n-  111.50ms    46.59ms      0.42  binary_ops.Ops2.time_frame_float_floor_by_zero\r\n-   33.88ms    13.20ms      0.39  stat_ops.FrameOps.time_op('kurt', 'float', 1, False)\r\n-    6.10ms     2.37ms      0.39  timeseries.ResampleSeries.time_resample('datetime', '5min', 'ohlc')\r\n-   25.71ms     9.81ms      0.38  stat_ops.FrameOps.time_op('kurt', 'float', 0, False)\r\n-   36.72ms    13.94ms      0.38  stat_ops.FrameOps.time_op('kurt', 'int', 1, True)\r\n-   18.70ms     6.81ms      0.36  stat_ops.FrameOps.time_op('var', 'float', 1, True)\r\n-  319.99ms   115.89ms      0.36  multiindex_object.GetLoc.time_large_get_loc_warm\r\n-   36.16ms    12.61ms      0.35  stat_ops.FrameOps.time_op('kurt', 'float', 1, True)\r\n-  167.41ms    57.98ms      0.35  multiindex_object.Duplicated.time_duplicated\r\n-  108.74ms    36.92ms      0.34  panel_ctor.TwoIndexes.time_from_dict\r\n-  310.29ms   103.92ms      0.33  multiindex_object.GetLoc.time_large_get_loc\r\n-   34.59ms    11.09ms      0.32  join_merge.Concat.time_concat_series(0)\r\n-   91.39ms    29.05ms      0.32  binary_ops.Ops2.time_frame_float_div\r\n-  592.60ms   184.82ms      0.31  io.json.ToJSON.time_floats_with_int_idex_lines('index')\r\n-   32.64ms    10.05ms      0.31  stat_ops.FrameOps.time_op('kurt', 'int', 0, True)\r\n-  122.65ms    37.58ms      0.31  binary_ops.Ops.time_frame_multi_and(True, 1)\r\n-   33.75ms    10.24ms      0.30  stat_ops.FrameOps.time_op('skew', 'float', 0, False)\r\n-  609.42ms   184.20ms      0.30  io.json.ToJSON.time_floats_with_int_idex_lines('columns')\r\n-   33.28ms     9.96ms      0.30  stat_ops.FrameOps.time_op('skew', 'int', 0, True)\r\n-  217.24ms    62.67ms      0.29  binary_ops.Ops.time_frame_multi_and(True, 'default')\r\n-   30.62ms     8.67ms      0.28  inference.DateInferOps.time_add_timedeltas\r\n-  605.51ms   168.36ms      0.28  io.json.ToJSON.time_floats_with_dt_index_lines('columns')\r\n-  588.24ms   163.29ms      0.28  io.json.ToJSON.time_floats_with_int_idex_lines('split')\r\n-  587.41ms   156.76ms      0.27  io.json.ToJSON.time_floats_with_dt_index_lines('split')\r\n-  119.43ms    31.44ms      0.26  binary_ops.Ops.time_frame_multi_and(False, 'default')\r\n-    9.36ms     2.36ms      0.25  timeseries.ResampleSeries.time_resample('period', '5min', 'ohlc')\r\n-  647.44ms   160.88ms      0.25  io.json.ToJSON.time_floats_with_dt_index_lines('index')\r\n-  125.39ms    31.01ms      0.25  binary_ops.Ops.time_frame_multi_and(False, 1)\r\n-  435.09ms    97.61ms      0.22  multiindex_object.Integer.time_get_indexer\r\n-    9.04ms     1.96ms      0.22  timeseries.ResampleSeries.time_resample('period', '5min', 'mean')\r\n-   10.09ms     2.10ms      0.21  timeseries.ResampleSeries.time_resample('period', '1D', 'ohlc')\r\n-   77.67ms    15.91ms      0.20  eval.Eval.time_add('python', 1)\r\n-   35.26ms     6.81ms      0.19  timeseries.Factorize.time_factorize(None)\r\n-  195.25ms    35.71ms      0.18  eval.Eval.time_add('numexpr', 'all')\r\n-    9.35ms     1.69ms      0.18  timeseries.ResampleSeries.time_resample('period', '1D', 'mean')\r\n-   39.97ms     6.77ms      0.17  timeseries.Factorize.time_factorize('Asia/Tokyo')\r\n-   98.88ms    16.45ms      0.17  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift('US/Eastern')\r\n-   81.72ms    13.32ms      0.16  eval.Eval.time_mult('python', 1)\r\n-  208.43ms    32.22ms      0.15  eval.Eval.time_mult('numexpr', 'all')\r\n-  152.65ms    23.36ms      0.15  reindex.DropDuplicates.time_frame_drop_dups_int(True)\r\n-  324.53ms    49.58ms      0.15  eval.Eval.time_add('python', 'all')\r\n-  274.97ms    41.86ms      0.15  eval.Eval.time_mult('python', 'all')\r\n-   95.99ms    13.99ms      0.15  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift(None)\r\n-   44.19ms     6.40ms      0.14  binary_ops.Ops2.time_frame_int_div_by_zero\r\n-   77.86ms    10.55ms      0.14  eval.Eval.time_add('numexpr', 1)\r\n-   78.99ms    10.35ms      0.13  eval.Eval.time_mult('numexpr', 1)\r\n-   73.78ms     9.54ms      0.13  binary_ops.Timeseries.time_timestamp_ops_diff('US/Eastern')\r\n-   87.67ms     9.42ms      0.11  binary_ops.Timeseries.time_timestamp_ops_diff(None)\r\n-   37.50ms     3.07ms      0.08  replace.FillNa.time_replace(False)\r\n\r\n    before     after       ratio\r\n  [983d71fa] [f09bee78]\r\n+   29.09ms   926.15ms     31.84  frame_methods.Reindex.time_reindex_axis1\r\n+    2.07ms    47.98ms     23.14  categoricals.Concat.time_concat\r\n+   48.54ms      1.09s     22.41  eval.Eval.time_add('python', 'all')\r\n+   12.77ms   283.56ms     22.20  frame_methods.Reindex.time_reindex_both_axes\r\n+   12.64ms   276.70ms     21.89  frame_methods.Reindex.time_reindex_both_axes_ix\r\n+    8.99ms   158.63ms     17.65  frame_methods.Shift.time_shift(1)\r\n+    9.23ms   153.44ms     16.63  frame_methods.Shift.time_shift(0)\r\n+   28.70ms   382.43ms     13.32  frame_methods.Count.time_count_level_multi(0)\r\n+   33.12ms   400.07ms     12.08  frame_methods.Count.time_count_level_mixed_dtypes_multi(1)\r\n+   35.41ms   378.86ms     10.70  frame_methods.Dropna.time_dropna('all', 1)\r\n+   33.36ms   356.66ms     10.69  frame_methods.Dropna.time_dropna('all', 0)\r\n+   27.08ms   274.08ms     10.12  eval.Eval.time_mult('numexpr', 'all')\r\n+    3.04ms    30.32ms      9.97  algorithms.Duplicated.time_duplicated_int(False)\r\n+   39.31ms   391.16ms      9.95  frame_methods.Count.time_count_level_mixed_dtypes_multi(0)\r\n+   10.12ms    94.69ms      9.35  binary_ops.Timeseries.time_timestamp_ops_diff(None)\r\n+   44.52ms   408.41ms      9.17  frame_methods.Count.time_count_level_multi(1)\r\n+   10.66ms    90.81ms      8.52  eval.Eval.time_add('numexpr', 1)\r\n+   37.10ms   309.98ms      8.35  eval.Eval.time_mult('python', 'all')\r\n+   13.46ms    95.92ms      7.12  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift(None)\r\n+   55.68ms   383.65ms      6.89  binary_ops.Ops.time_frame_multi_and(True, 'default')\r\n+    4.71ms    32.23ms      6.84  algorithms.Duplicated.time_duplicated_float('last')\r\n+    7.38ms    43.88ms      5.94  binary_ops.Ops2.time_frame_int_div_by_zero\r\n+   10.98ms    62.44ms      5.69  eval.Eval.time_mult('numexpr', 1)\r\n+    3.37ms    19.15ms      5.68  algorithms.Duplicated.time_duplicated_int('last')\r\n+   10.97ms    62.14ms      5.66  binary_ops.Timeseries.time_timestamp_ops_diff('US/Eastern')\r\n+   17.79ms    98.24ms      5.52  binary_ops.Timeseries.time_timestamp_ops_diff_with_shift('US/Eastern')\r\n+    6.09ms    33.43ms      5.49  algorithms.Duplicated.time_duplicated_float(False)\r\n+   13.40ms    72.16ms      5.39  eval.Eval.time_add('python', 1)\r\n+    3.61ms    18.50ms      5.12  algorithms.Duplicated.time_duplicated_int('first')\r\n+    6.57ms    33.20ms      5.05  timeseries.Factorize.time_factorize('Asia/Tokyo')\r\n+   37.25ms   183.75ms      4.93  eval.Eval.time_add('numexpr', 'all')\r\n+   33.07ms   160.42ms      4.85  binary_ops.Ops.time_frame_multi_and(False, 1)\r\n+   13.89ms    66.41ms      4.78  eval.Eval.time_mult('python', 1)\r\n+   31.58ms   147.90ms      4.68  binary_ops.Ops.time_frame_multi_and(False, 'default')\r\n+    1.99ms     9.05ms      4.54  timeseries.ResampleSeries.time_resample('period', '5min', 'mean')\r\n+   17.42ms    78.93ms      4.53  frame_methods.Dropna.time_dropna('any', 1)\r\n+    2.16ms     9.76ms      4.51  timeseries.ResampleSeries.time_resample('period', '1D', 'ohlc')\r\n+  145.13ms   640.41ms      4.41  frame_methods.Dropna.time_dropna_axis_mixed_dtypes('all', 0)\r\n+  142.94ms   610.76ms      4.27  frame_methods.Dropna.time_dropna_axis_mixed_dtypes('all', 1)\r\n+   29.83ms   116.50ms      3.91  binary_ops.Ops2.time_frame_float_div\r\n+    4.38ms    16.97ms      3.87  algorithms.Factorize.time_factorize_int(False)\r\n+   41.91ms   158.12ms      3.77  binary_ops.Ops.time_frame_multi_and(True, 1)\r\n+    4.58ms    16.87ms      3.69  binary_ops.AddOverflowScalar.time_add_overflow_scalar(-1)\r\n+    2.52ms     9.26ms      3.68  timeseries.ResampleSeries.time_resample('period', '5min', 'ohlc')\r\n+    5.54ms    20.30ms      3.66  algorithms.Duplicated.time_duplicated_float('first')\r\n+    4.47ms    16.30ms      3.65  binary_ops.AddOverflowScalar.time_add_overflow_scalar(0)\r\n+   19.01ms    68.00ms      3.58  frame_methods.Dropna.time_dropna('any', 0)\r\n+    4.69ms    16.47ms      3.51  binary_ops.AddOverflowScalar.time_add_overflow_scalar(1)\r\n+   10.22ms    32.79ms      3.21  inference.DateInferOps.time_add_timedeltas\r\n+    6.64ms    20.53ms      3.09  timeseries.Factorize.time_factorize(None)\r\n+    6.48ms    19.20ms      2.96  algorithms.Factorize.time_factorize_float(False)\r\n+   13.85ms    37.11ms      2.68  categoricals.Constructor.time_regular\r\n+   10.38ms    27.77ms      2.67  stat_ops.FrameOps.time_op('skew', 'float', 0, False)\r\n+    6.18ms    16.14ms      2.61  eval.Query.time_query_datetime_column\r\n+  125.27ms   323.78ms      2.58  frame_methods.Dropna.time_dropna_axis_mixed_dtypes('any', 0)\r\n+   10.14ms    25.96ms      2.56  stat_ops.FrameOps.time_op('kurt', 'int', 0, True)\r\n+  124.89ms   319.12ms      2.56  frame_methods.Dropna.time_dropna_axis_mixed_dtypes('any', 1)\r\n+   11.85ms    29.74ms      2.51  frame_methods.MaskBool.time_frame_mask_bools\r\n+   10.06ms    25.01ms      2.49  stat_ops.FrameOps.time_op('kurt', 'float', 0, False)\r\n+   18.13ms    43.36ms      2.39  frame_methods.Equals.time_frame_object_equal\r\n+   11.04ms    25.59ms      2.32  algorithms.Factorize.time_factorize_int(True)\r\n+   47.69ms   105.65ms      2.22  binary_ops.Ops2.time_frame_float_floor_by_zero\r\n+  285.06ms   628.62ms      2.21  frame_methods.Nunique.time_frame_nunique\r\n+   12.76ms    27.46ms      2.15  stat_ops.FrameOps.time_op('kurt', 'float', 1, False)\r\n+   20.88ms    44.22ms      2.12  binary_ops.Ops2.time_frame_int_mod\r\n+  101.32ms   212.42ms      2.10  frame_methods.Duplicated.time_frame_duplicated\r\n+   20.73ms    43.33ms      2.09  algorithms.Factorize.time_factorize_float(True)\r\n+    9.86ms    19.52ms      1.98  stat_ops.FrameOps.time_op('kurt', 'int', 0, False)\r\n+   19.18ms    37.23ms      1.94  stat_ops.FrameOps.time_op('median', 'int', 1, False)\r\n+    9.76ms    18.85ms      1.93  stat_ops.FrameOps.time_op('skew', 'int', 0, True)\r\n+   21.42ms    40.93ms      1.91  eval.Query.time_query_with_boolean_selection\r\n+   12.10ms    22.78ms      1.88  frame_methods.MaskBool.time_frame_mask_floats\r\n+   17.23ms    32.04ms      1.86  timeseries.DatetimeIndex.time_to_date('tz_naive')\r\n+   13.78ms    25.17ms      1.83  stat_ops.FrameOps.time_op('kurt', 'int', 1, False)\r\n+   10.23ms    18.43ms      1.80  stat_ops.FrameOps.time_op('skew', 'float', 0, True)\r\n+   12.35ms    22.19ms      1.80  eval.Query.time_query_datetime_index\r\n+   21.71ms    38.85ms      1.79  stat_ops.FrameOps.time_op('median', 'float', 1, True)\r\n+  532.78μs   926.41μs      1.74  series_methods.Dropna.time_dropna('int')\r\n+  144.04ms   250.09ms      1.74  frame_methods.SortValues.time_frame_sort_values(True)\r\n+  105.49ms   182.79ms      1.73  frame_methods.Interpolate.time_interpolate('infer')\r\n+   17.53ms    30.09ms      1.72  stat_ops.FrameOps.time_op('sem', 'int', 1, True)\r\n+   10.17ms    17.29ms      1.70  stat_ops.FrameOps.time_op('mad', 'float', 0, False)\r\n+    9.97ms    16.73ms      1.68  stat_ops.FrameOps.time_op('mad', 'float', 1, False)\r\n+   14.42ms    24.17ms      1.68  stat_ops.FrameOps.time_op('sem', 'int', 0, True)\r\n+   79.36ms   132.02ms      1.66  frame_methods.Interpolate.time_interpolate(None)\r\n+   13.76ms    22.27ms      1.62  stat_ops.FrameOps.time_op('kurt', 'int', 1, True)\r\n+  126.05ms   200.93ms      1.59  categoricals.Constructor.time_with_nan\r\n+    1.21ms     1.89ms      1.57  inference.NumericInferOps.time_add(<type 'numpy.float32'>)\r\n+    3.18ms     4.93ms      1.55  binary_ops.Ops2.time_frame_float_div_by_zero\r\n+  224.79μs   344.92μs      1.53  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n+   20.23ms    30.83ms      1.52  stat_ops.FrameOps.time_op('median', 'float', 1, False)\r\n+   17.42ms    26.53ms      1.52  stat_ops.FrameOps.time_op('sem', 'int', 1, False)\r\n+   17.25ms    25.66ms      1.49  stat_ops.FrameOps.time_op('skew', 'float', 1, False)\r\n+  229.29μs   340.68μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<Day>)\r\n+  148.33ms   219.41ms      1.48  frame_methods.SortValues.time_frame_sort_values(False)\r\n+  225.79μs   333.92μs      1.48  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n+  227.39μs   334.45μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  233.23μs   342.33μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  240.53μs   352.79μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  242.22μs   352.54μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  252.29μs   366.30μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  234.46μs   340.41μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  241.55μs   350.48μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  260.54μs   375.78μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+  246.42μs   350.87μs      1.42  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  264.19μs   376.07μs      1.42  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  512.34μs   717.31μs      1.40  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  265.03μs   368.61μs      1.39  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+    4.70ms     6.51ms      1.38  stat_ops.SeriesMultiIndexOps.time_op(1, 'sem')\r\n+    1.25ms     1.73ms      1.38  inference.NumericInferOps.time_divide(<type 'numpy.float32'>)\r\n+     1.16s      1.57s      1.35  join_merge.JoinIndex.time_left_outer_join_index\r\n+    5.84ms     7.89ms      1.35  timeseries.AsOf.time_asof_nan('DataFrame')\r\n+    3.88ms     5.14ms      1.32  frame_methods.Reindex.time_reindex_axis0\r\n+  534.38μs   703.73μs      1.32  timeseries.InferFreq.time_infer_freq(None)\r\n+  531.96μs   695.66μs      1.31  timeseries.InferFreq.time_infer_freq('D')\r\n+    1.13ms     1.48ms      1.30  frame_methods.Equals.time_frame_float_equal\r\n+    6.03ms     7.79ms      1.29  timeseries.AsOf.time_asof('DataFrame')\r\n+  298.30μs   373.70μs      1.25  stat_ops.SeriesOps.time_op('sum', 'float', True)\r\n+   72.35ms    90.30ms      1.25  join_merge.ConcatDataFrames.time_c_ordered(1, True)\r\n+  919.66μs     1.15ms      1.25  offset.OffsetSeriesArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+    6.91ms     8.53ms      1.23  stat_ops.FrameOps.time_op('std', 'float', 1, True)\r\n+  830.42μs     1.02ms      1.23  timeseries.InferFreq.time_infer_freq('B')\r\n+    2.06ms     2.53ms      1.23  categoricals.Concat.time_union\r\n+    2.24ms     2.75ms      1.23  inference.NumericInferOps.time_divide(<type 'numpy.float64'>)\r\n+   24.57ms    30.12ms      1.23  groupby.Groups.time_series_groups('int64_small')\r\n+    2.77ms     3.40ms      1.22  inference.NumericInferOps.time_subtract(<type 'numpy.int64'>)\r\n+  420.87μs   513.31μs      1.22  offset.ApplyIndex.time_apply_index(<MonthEnd>)\r\n+    4.72ms     5.74ms      1.21  timedelta.TimedeltaOps.time_add_td_ts\r\n+   20.33ms    24.66ms      1.21  stat_ops.FrameOps.time_op('median', 'int', 1, True)\r\n+    6.16ms     7.46ms      1.21  stat_ops.FrameOps.time_op('std', 'float', 0, False)\r\n+  297.66μs   358.68μs      1.21  stat_ops.SeriesOps.time_op('sum', 'float', False)\r\n+    2.52ms     3.03ms      1.20  sparse.SparseArrayConstructor.time_sparse_array(0.01, 0, <type 'numpy.int64'>)\r\n+  286.52μs   344.34μs      1.20  stat_ops.SeriesOps.time_op('prod', 'float', True)\r\n+  668.35μs   800.41μs      1.20  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+    6.20ms     7.41ms      1.19  stat_ops.FrameOps.time_op('var', 'float', 0, False)\r\n+    3.60ms     4.29ms      1.19  inference.NumericInferOps.time_modulo(<type 'numpy.uint32'>)\r\n+  305.38μs   363.92μs      1.19  stat_ops.SeriesOps.time_op('mean', 'float', False)\r\n+    1.16ms     1.38ms      1.19  stat_ops.SeriesOps.time_op('sem', 'float', False)\r\n+   53.49ms    63.70ms      1.19  stat_ops.FrameMultiIndexOps.time_op(1, 'skew')\r\n+  290.51μs   345.70μs      1.19  stat_ops.SeriesOps.time_op('prod', 'float', False)\r\n+  644.63μs   766.50μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<MonthEnd>)\r\n+  309.95μs   367.73μs      1.19  stat_ops.SeriesOps.time_op('prod', 'int', True)\r\n+  347.68μs   412.05μs      1.19  stat_ops.SeriesOps.time_op('sum', 'int', True)\r\n+  642.30μs   761.19μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  664.68μs   787.21μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  648.92μs   767.69μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  214.21ms   252.59ms      1.18  strings.Split.time_split(True)\r\n+  306.41μs   360.53μs      1.18  stat_ops.SeriesOps.time_op('mean', 'float', True)\r\n+  315.36μs   370.79μs      1.18  stat_ops.SeriesOps.time_op('prod', 'int', False)\r\n+    2.41ms     2.83ms      1.17  sparse.SparseArrayConstructor.time_sparse_array(0.01, 0, <type 'numpy.float64'>)\r\n+  649.64μs   761.35μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+    5.16ms     6.04ms      1.17  stat_ops.FrameMultiIndexOps.time_op([0, 1], 'std')\r\n+  346.82μs   406.17μs      1.17  stat_ops.SeriesOps.time_op('sum', 'int', False)\r\n+    4.88ms     5.70ms      1.17  frame_methods.Fillna.time_frame_fillna(False, 'bfill')\r\n+   12.13μs    14.13μs      1.16  offset.OffestDatetimeArithmetic.time_add(<BusinessMonthBegin>)\r\n+  651.25μs   757.84μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  851.84μs   991.05μs      1.16  offset.ApplyIndex.time_apply_index(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  641.54μs   745.72μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<MonthBegin>)\r\n+    3.45ms     4.01ms      1.16  stat_ops.SeriesOps.time_op('mad', 'int', False)\r\n+  657.14μs   762.05μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n+    2.57μs     2.97μs      1.16  timeseries.DatetimeIndex.time_get('repeated')\r\n+   18.48μs    21.39μs      1.16  offset.OffestDatetimeArithmetic.time_subtract_10(<SemiMonthBegin: day_of_month=15>)\r\n+   16.79ms    19.43ms      1.16  stat_ops.FrameOps.time_op('skew', 'int', 1, False)\r\n+    6.77ms     7.81ms      1.15  stat_ops.FrameOps.time_op('var', 'float', 1, True)\r\n+  286.43μs   330.51μs      1.15  inference.NumericInferOps.time_add(<type 'numpy.uint8'>)\r\n+    4.25ms     4.89ms      1.15  rolling.Methods.time_rolling('Series', 10, 'int', 'count')\r\n+  661.75μs   762.03μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+    2.23μs     2.57μs      1.15  timestamp.TimestampConstruction.time_parse_now\r\n+  677.45μs   779.55μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+   14.64μs    16.81μs      1.15  indexing.NumericSeriesIndexing.time_getitem_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n+    6.93ms     7.95ms      1.15  stat_ops.FrameOps.time_op('std', 'float', 1, False)\r\n+  662.39μs   759.63μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  731.82μs   835.78μs      1.14  inference.NumericInferOps.time_subtract(<type 'numpy.uint32'>)\r\n+    3.22ms     3.68ms      1.14  inference.DateInferOps.time_subtract_datetimes\r\n+   17.15μs    19.46μs      1.13  offset.OffestDatetimeArithmetic.time_subtract(<BusinessDay>)\r\n+  663.21μs   752.07μs      1.13  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+   17.56ms    19.90ms      1.13  stat_ops.FrameOps.time_op('skew', 'float', 1, True)\r\n+  420.26μs   476.39μs      1.13  stat_ops.SeriesOps.time_op('mean', 'int', True)\r\n+  423.83μs   480.43μs      1.13  stat_ops.SeriesOps.time_op('mean', 'int', False)\r\n+   30.81ms    34.88ms      1.13  eval.Eval.time_chained_cmp('numexpr', 'all')\r\n+    5.36ms     6.06ms      1.13  stat_ops.SeriesMultiIndexOps.time_op([0, 1], 'sem')\r\n+    3.95μs     4.46μs      1.13  timeseries.DatetimeIndex.time_get('dst')\r\n+    3.85μs     4.34μs      1.13  timeseries.DatetimeIndex.time_get('tz_naive')\r\n+   83.06ms    93.69ms      1.13  join_merge.Align.time_series_align_int64_index\r\n+    7.88ms     8.87ms      1.13  series_methods.ValueCounts.time_value_counts('object')\r\n+    3.03ms     3.41ms      1.12  inference.NumericInferOps.time_modulo(<type 'numpy.uint16'>)\r\n+    7.36ms     8.26ms      1.12  multiindex_object.Values.time_datetime_level_values_copy\r\n+    1.21ms     1.36ms      1.12  stat_ops.SeriesOps.time_op('sem', 'float', True)\r\n+  692.98μs   777.11μs      1.12  stat_ops.SeriesOps.time_op('var', 'int', False)\r\n+   11.19μs    12.55μs      1.12  offset.OffestDatetimeArithmetic.time_add(<MonthEnd>)\r\n+  518.21μs   580.76μs      1.12  stat_ops.SeriesOps.time_op('var', 'float', True)\r\n+    3.35ms     3.75ms      1.12  stat_ops.FrameOps.time_op('mean', 'float', 1, True)\r\n+  533.86μs   596.39μs      1.12  stat_ops.SeriesOps.time_op('std', 'float', True)\r\n+   15.83μs    17.68μs      1.12  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessMonthEnd>)\r\n+    7.19ms     8.02ms      1.12  stat_ops.FrameMultiIndexOps.time_op(1, 'median')\r\n+  891.06μs   994.25μs      1.12  binary_ops.Timeseries.time_timestamp_series_compare(None)\r\n+    4.27ms     4.76ms      1.11  stat_ops.FrameMultiIndexOps.time_op([0, 1], 'mean')\r\n+    6.52ms     7.25ms      1.11  stat_ops.FrameOps.time_op('var', 'float', 1, False)\r\n+    9.30ms    10.35ms      1.11  stat_ops.FrameOps.time_op('mad', 'int', 1, True)\r\n+   49.48ms    55.05ms      1.11  groupby.Groups.time_series_groups('object_small')\r\n+    1.67ms     1.86ms      1.11  timeseries.DatetimeIndex.time_add_timedelta('tz_naive')\r\n+   26.41ms    29.37ms      1.11  sparse.SparseArrayConstructor.time_sparse_array(0.01, nan, <type 'object'>)\r\n+    2.11ms     2.35ms      1.11  stat_ops.FrameOps.time_op('prod', 'float', 1, False)\r\n+    1.88ms     2.09ms      1.11  stat_ops.SeriesOps.time_op('sem', 'int', True)\r\n+   11.89μs    13.19μs      1.11  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<SemiMonthBegin: day_of_month=15>)\r\n+    4.30ms     4.76ms      1.11  stat_ops.FrameOps.time_op('median', 'int', 0, False)\r\n+   22.96ms    25.44ms      1.11  strings.Methods.time_replace\r\n+    4.08ms     4.52ms      1.11  stat_ops.SeriesMultiIndexOps.time_op([0, 1], 'sum')\r\n+  884.83μs   979.47μs      1.11  binary_ops.Timeseries.time_series_timestamp_compare(None)\r\n+    2.63ms     2.90ms      1.11  reindex.DropDuplicates.time_frame_drop_dups(True)\r\n+    9.49μs    10.49μs      1.11  timestamp.TimestampProperties.time_dayofyear(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+    1.10ms     1.21ms      1.11  stat_ops.SeriesOps.time_op('skew', 'float', True)\r\n+  284.50ms   314.50ms      1.11  rolling.Quantile.time_quantile('Series', 1000, 'float', 0.5)\r\n+    6.52ms     7.21ms      1.11  binary_ops.Ops.time_frame_comparison(True, 'default')\r\n+    2.56ms     2.82ms      1.10  rolling.Methods.time_rolling('Series', 10, 'float', 'std')\r\n+    1.97ms     2.17ms      1.10  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'skew')\r\n+  520.10μs   572.52μs      1.10  stat_ops.SeriesOps.time_op('var', 'float', False)\r\n-   18.57ms    16.88ms      0.91  period.DataFramePeriodColumn.time_setitem_period_column\r\n-   52.45ms    47.66ms      0.91  eval.Eval.time_and('python', 'all')\r\n-    1.49ms     1.35ms      0.90  inference.NumericInferOps.time_subtract(<type 'numpy.float32'>)\r\n-   20.91μs    18.90μs      0.90  offset.OffestDatetimeArithmetic.time_add(<CustomBusinessDay>)\r\n-   60.43μs    54.52μs      0.90  period.PeriodUnaryMethods.time_now('min')\r\n-   16.94μs    15.27μs      0.90  offset.OffestDatetimeArithmetic.time_add_10(<QuarterEnd: startingMonth=3>)\r\n-  929.76μs   837.20μs      0.90  frame_ctor.FromRecords.time_frame_from_records_generator(1000)\r\n-   92.47μs    83.16μs      0.90  offset.OffestDatetimeArithmetic.time_add_10(<CustomBusinessMonthEnd>)\r\n-   10.65μs     9.57μs      0.90  timestamp.TimestampProperties.time_dayofyear(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-    3.85ms     3.46ms      0.90  io.hdf.HDFStoreDataFrame.time_query_store_table\r\n-  141.99ms   127.52ms      0.90  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5)\r\n-   30.45ms    27.32ms      0.90  frame_methods.Iteration.time_itertuples\r\n-  956.03ns   856.20ns      0.90  period.PeriodProperties.time_property('M', 'qyear')\r\n-    1.25ms     1.12ms      0.89  inference.NumericInferOps.time_add(<type 'numpy.uint64'>)\r\n-    4.94ms     4.40ms      0.89  groupby.FirstLast.time_groupby_first('float32')\r\n-    1.04ms   928.66μs      0.89  inference.NumericInferOps.time_multiply(<type 'numpy.uint32'>)\r\n-    4.43ms     3.94ms      0.89  offset.OnOffset.time_on_offset(<CustomBusinessMonthBegin>)\r\n-    2.21ms     1.96ms      0.89  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 1)\r\n-  140.75μs   124.92μs      0.89  offset.OffestDatetimeArithmetic.time_subtract_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    5.06ms     4.49ms      0.89  groupby.Categories.time_groupby_extra_cat_nosort\r\n-   26.18ms    23.20ms      0.89  eval.Eval.time_chained_cmp('python', 1)\r\n-    7.70μs     6.83μs      0.89  timestamp.TimestampProperties.time_is_quarter_start(None, 'B')\r\n-    8.86ms     7.77ms      0.88  binary_ops.Ops.time_frame_add(True, 'default')\r\n-  379.58ms   331.56ms      0.87  io.stata.Stata.time_read_stata('ty')\r\n-    8.00μs     6.92μs      0.87  timestamp.TimestampProperties.time_is_quarter_end(None, 'B')\r\n-    2.53ms     2.18ms      0.86  inference.NumericInferOps.time_add(<type 'numpy.float64'>)\r\n-  904.13μs   781.27μs      0.86  inference.NumericInferOps.time_add(<type 'numpy.uint32'>)\r\n-    1.53ms     1.32ms      0.86  inference.NumericInferOps.time_multiply(<type 'numpy.float32'>)\r\n-    1.29ms     1.11ms      0.86  index_object.Ops.time_multiply('float')\r\n-   21.11μs    18.15μs      0.86  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessDay>)\r\n-   20.43μs    17.57μs      0.86  offset.OffestDatetimeArithmetic.time_subtract(<SemiMonthBegin: day_of_month=15>)\r\n-    2.04ms     1.75ms      0.86  inference.NumericInferOps.time_multiply(<type 'numpy.int32'>)\r\n-    6.61μs     5.66μs      0.86  timestamp.TimestampProperties.time_dayofyear(None, None)\r\n-    7.77ms     6.65ms      0.86  groupby.Categories.time_groupby_nosort\r\n-  458.69μs   391.83μs      0.85  inference.NumericInferOps.time_multiply(<type 'numpy.int16'>)\r\n-    3.91ms     3.34ms      0.85  timeseries.AsOf.time_asof('Series')\r\n-   72.40μs    61.65μs      0.85  offset.OffestDatetimeArithmetic.time_add_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    3.77ms     3.19ms      0.85  timeseries.AsOf.time_asof_nan('Series')\r\n-   19.25μs    16.28μs      0.85  period.PeriodUnaryMethods.time_asfreq('M')\r\n-   22.25μs    18.80μs      0.84  period.PeriodUnaryMethods.time_now('M')\r\n-     2.88s      2.43s      0.84  groupby.FirstLast.time_groupby_first('object')\r\n-   33.94ms    28.60ms      0.84  index_object.SetOperations.time_operation('strings', 'symmetric_difference')\r\n-    4.92ms     4.13ms      0.84  groupby.FirstLast.time_groupby_last('float64')\r\n-   89.94ms    74.94ms      0.83  join_merge.ConcatDataFrames.time_c_ordered(1, False)\r\n-  416.20μs   338.97μs      0.81  inference.NumericInferOps.time_subtract(<type 'numpy.uint16'>)\r\n-   12.64μs    10.18μs      0.81  multiindex_object.GetLoc.time_med_get_loc\r\n-  419.17μs   335.82μs      0.80  inference.NumericInferOps.time_multiply(<type 'numpy.uint16'>)\r\n-    2.49ms     1.97ms      0.79  inference.NumericInferOps.time_subtract(<type 'numpy.float64'>)\r\n-    7.12μs     5.55μs      0.78  timestamp.TimestampProperties.time_week(None, 'B')\r\n-    1.39ms     1.07ms      0.77  inference.NumericInferOps.time_multiply(<type 'numpy.uint64'>)\r\n-   46.04ms    35.46ms      0.77  eval.Eval.time_and('numexpr', 'all')\r\n-    2.04ms     1.57ms      0.77  reshape.Melt.time_melt_dataframe\r\n-    3.38ms     2.60ms      0.77  inference.NumericInferOps.time_divide(<type 'numpy.int64'>)\r\n-    3.09ms     2.37ms      0.77  inference.NumericInferOps.time_multiply(<type 'numpy.int64'>)\r\n-   26.34ms    20.17ms      0.77  strings.Methods.time_lstrip\r\n-   15.29μs    11.56μs      0.76  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    1.90ms     1.42ms      0.75  inference.NumericInferOps.time_add(<type 'numpy.int32'>)\r\n-    1.78ms     1.31ms      0.74  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', 'round_trip')\r\n-   17.78μs    12.49μs      0.70  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-  466.34μs   324.94μs      0.70  inference.NumericInferOps.time_subtract(<type 'numpy.int8'>)\r\n-   40.79μs    28.24μs      0.69  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   13.79ms     9.43ms      0.68  stat_ops.FrameOps.time_op('mad', 'float', 0, True)\r\n-   14.76μs     9.97μs      0.68  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   17.54μs    11.53μs      0.66  offset.OffestDatetimeArithmetic.time_add(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-  240.17μs   153.87μs      0.64  indexing.DataFrameNumericIndexing.time_iloc_dups\r\n-   17.51ms    10.31ms      0.59  index_object.SetOperations.time_operation('datetime', 'symmetric_difference')\r\n-   12.40ms   910.98μs      0.07  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(True, 'custom')\r\n\r\n    before     after       ratio\r\n  [983d71fa] [f09bee78]\r\n+    3.82ms     6.89ms      1.81  timeseries.TimeDatetimeConverter.time_convert\r\n+   12.28ms    21.64ms      1.76  groupby.AggFunctions.time_different_python_functions_multicol\r\n+    5.64ms     9.72ms      1.72  io.csv.ToCSVDatetime.time_frame_date_formatting\r\n+    1.37μs     2.22μs      1.61  timestamp.TimestampOps.time_replace_None(None)\r\n+  226.76μs   357.78μs      1.58  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n+  225.72μs   344.63μs      1.53  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  235.43μs   355.53μs      1.51  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  228.13μs   343.40μs      1.51  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<Day>)\r\n+   38.41ms    57.79ms      1.50  strings.Methods.time_match\r\n+  217.29μs   326.54μs      1.50  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n+  246.84μs   367.21μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  240.49μs   352.52μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  240.60μs   351.04μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  257.40μs   375.41μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+  236.64μs   344.42μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  251.69μs   366.23μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  253.94μs   368.26μs      1.45  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+  236.69μs   341.00μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+    1.31ms     1.88ms      1.44  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', 'round_trip')\r\n+  306.88ns   440.84ns      1.44  timestamp.TimestampProperties.time_days_in_month(None, None)\r\n+  505.03μs   724.86μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  233.53μs   333.59μs      1.43  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  718.54μs     1.02ms      1.42  timeseries.DatetimeIndex.time_to_pydatetime('dst')\r\n+  288.78μs   401.67μs      1.39  inference.NumericInferOps.time_multiply(<type 'numpy.int8'>)\r\n+  301.26μs   412.48μs      1.37  join_merge.JoinNonUnique.time_join_non_unique_equal\r\n+    1.42ms     1.94ms      1.37  inference.NumericInferOps.time_subtract(<type 'numpy.int32'>)\r\n+  837.89μs     1.14ms      1.36  groupby.GroupByMethods.time_method('int', 'sem')\r\n+    6.29ms     8.38ms      1.33  binary_ops.Ops.time_frame_comparison(True, 'default')\r\n+  536.69μs   693.47μs      1.29  timeseries.InferFreq.time_infer_freq(None)\r\n+  540.75μs   698.14μs      1.29  timeseries.InferFreq.time_infer_freq('D')\r\n+  911.21μs     1.16ms      1.27  offset.OffsetSeriesArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+   31.17ms    39.14ms      1.26  eval.Eval.time_chained_cmp('numexpr', 'all')\r\n+    2.35ms     2.93ms      1.24  timeseries.DatetimeIndex.time_unique('tz_aware')\r\n+  627.02μs   777.46μs      1.24  offset.OffsetSeriesArithmetic.time_add_offset(<MonthEnd>)\r\n+  409.41μs   505.36μs      1.23  offset.ApplyIndex.time_apply_index(<MonthEnd>)\r\n+    3.75ms     4.54ms      1.21  sparse.Arithmetic.time_add(0.01, 0)\r\n+    9.30ms    11.23ms      1.21  stat_ops.FrameOps.time_op('mad', 'int', 1, False)\r\n+   41.55ms    49.91ms      1.20  eval.Eval.time_add('python', 'all')\r\n+  637.76μs   765.70μs      1.20  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  294.22μs   350.63μs      1.19  inference.NumericInferOps.time_add(<type 'numpy.uint8'>)\r\n+  641.64μs   762.74μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  631.53μs   750.69μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<MonthBegin>)\r\n+  837.75μs   994.18μs      1.19  timeseries.InferFreq.time_infer_freq('B')\r\n+  288.98ns   342.75ns      1.19  timestamp.TimestampProperties.time_dayofweek(None, 'B')\r\n+  675.02μs   800.51μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+  331.56μs   392.72μs      1.18  inference.NumericInferOps.time_add(<type 'numpy.uint16'>)\r\n+  632.26μs   747.83μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+   16.01μs    18.93μs      1.18  timeseries.AsOf.time_asof_single('Series')\r\n+   11.15μs    13.17μs      1.18  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessYearBegin: month=1>)\r\n+   49.65ms    58.56ms      1.18  eval.Eval.time_and('python', 'all')\r\n+  302.28μs   356.38μs      1.18  stat_ops.SeriesOps.time_op('sum', 'float', True)\r\n+    1.13ms     1.33ms      1.18  inference.NumericInferOps.time_add(<type 'numpy.uint64'>)\r\n+   16.00ms    18.84ms      1.18  stat_ops.Rank.time_average_old('Series', False)\r\n+  306.22μs   360.48μs      1.18  stat_ops.SeriesOps.time_op('mean', 'float', False)\r\n+   17.06μs    20.05μs      1.18  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<Day>)\r\n+    2.05ms     2.41ms      1.18  inference.NumericInferOps.time_multiply(<type 'numpy.int64'>)\r\n+  290.16μs   340.77μs      1.17  stat_ops.SeriesOps.time_op('prod', 'float', True)\r\n+    5.77ms     6.76ms      1.17  stat_ops.FrameMultiIndexOps.time_op(0, 'sem')\r\n+  309.55μs   363.07μs      1.17  stat_ops.SeriesOps.time_op('prod', 'int', True)\r\n+    3.90μs     4.57μs      1.17  timeseries.DatetimeIndex.time_get('dst')\r\n+  634.94μs   742.04μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+    3.46ms     4.04ms      1.17  stat_ops.SeriesOps.time_op('mad', 'float', False)\r\n+  289.69μs   338.15μs      1.17  stat_ops.SeriesOps.time_op('prod', 'float', False)\r\n+  645.37μs   752.97μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  304.29μs   354.97μs      1.17  stat_ops.SeriesOps.time_op('mean', 'float', True)\r\n+    7.56ms     8.80ms      1.16  series_methods.ValueCounts.time_value_counts('object')\r\n+  655.73μs   763.04μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+    1.97ms     2.29ms      1.16  inference.NumericInferOps.time_multiply(<type 'numpy.float64'>)\r\n+  302.79μs   351.80μs      1.16  stat_ops.SeriesOps.time_op('sum', 'float', False)\r\n+  647.15μs   751.77μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+   16.53ms    19.18ms      1.16  stat_ops.Rank.time_average_old('Series', True)\r\n+  315.00μs   365.41μs      1.16  stat_ops.SeriesOps.time_op('prod', 'int', False)\r\n+  650.69μs   753.69μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n+  833.15ns   963.06ns      1.16  period.PeriodProperties.time_property('min', 'month')\r\n+  670.64μs   773.99μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+    4.30ms     4.96ms      1.15  groupby.FirstLast.time_groupby_first('float32')\r\n+  345.74μs   397.73μs      1.15  stat_ops.SeriesOps.time_op('sum', 'int', False)\r\n+    1.18ms     1.35ms      1.15  stat_ops.SeriesOps.time_op('sem', 'float', False)\r\n+  676.15μs   773.70μs      1.14  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+    1.17ms     1.34ms      1.14  stat_ops.SeriesOps.time_op('sem', 'float', True)\r\n+  341.39μs   388.63μs      1.14  inference.NumericInferOps.time_multiply(<type 'numpy.int16'>)\r\n+    5.55μs     6.31μs      1.14  timestamp.TimestampProperties.time_dayofyear(None, 'B')\r\n+  865.13μs   984.54μs      1.14  offset.ApplyIndex.time_apply_index(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  347.82μs   393.21μs      1.13  stat_ops.SeriesOps.time_op('sum', 'int', True)\r\n+    3.26μs     3.67μs      1.13  timedelta.TimedeltaConstructor.time_from_int\r\n+   10.77μs    12.12μs      1.13  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessMonthBegin>)\r\n+    2.16ms     2.43ms      1.12  inference.NumericInferOps.time_add(<type 'numpy.int64'>)\r\n+    2.45ms     2.75ms      1.12  timeseries.ToDatetimeCache.time_unique_seconds_and_unit(False)\r\n+    1.53ms     1.71ms      1.12  reshape.Melt.time_melt_dataframe\r\n+   14.92μs    16.61μs      1.11  offset.OffestDatetimeArithmetic.time_apply(<CustomBusinessDay>)\r\n+   16.39μs    18.22μs      1.11  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessDay>)\r\n+    1.86ms     2.06ms      1.11  stat_ops.SeriesOps.time_op('sem', 'int', True)\r\n+    1.86ms     2.06ms      1.11  stat_ops.SeriesOps.time_op('sem', 'int', False)\r\n+    3.19ms     3.52ms      1.10  io.hdf.HDFStoreDataFrame.time_query_store_table\r\n+    3.43ms     3.79ms      1.10  algorithms.Duplicated.time_duplicated_float('first')\r\n+  536.42μs   591.83μs      1.10  stat_ops.SeriesOps.time_op('std', 'float', True)\r\n+    1.64ms     1.81ms      1.10  timeseries.DatetimeIndex.time_add_timedelta('tz_naive')\r\n+   14.94μs    16.45μs      1.10  offset.OffestDatetimeArithmetic.time_add_10(<MonthEnd>)\r\n+  426.64μs   469.33μs      1.10  stat_ops.SeriesOps.time_op('mean', 'int', True)\r\n-   10.79μs     9.80μs      0.91  timestamp.TimestampProperties.time_dayofyear(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-   17.86μs    16.21μs      0.91  offset.OffestDatetimeArithmetic.time_add_10(<SemiMonthEnd: day_of_month=15>)\r\n-    6.27ms     5.69ms      0.91  stat_ops.FrameMultiIndexOps.time_op(1, 'sem')\r\n-    4.48ms     4.06ms      0.91  groupby.FirstLast.time_groupby_last('float64')\r\n-  943.30μs   854.94μs      0.91  index_object.Ops.time_subtract('int')\r\n-   66.77μs    60.33μs      0.90  period.PeriodUnaryMethods.time_to_timestamp('M')\r\n-  117.75μs   106.00μs      0.90  offset.OffestDatetimeArithmetic.time_add(<CustomBusinessMonthBegin>)\r\n-    4.66ms     4.19ms      0.90  groupby.Categories.time_groupby_extra_cat_nosort\r\n-    7.37ms     6.63ms      0.90  groupby.Categories.time_groupby_nosort\r\n-   13.19μs    11.86μs      0.90  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessDay>)\r\n-   12.03μs    10.81μs      0.90  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<QuarterBegin: startingMonth=3>)\r\n-   17.13μs    15.39μs      0.90  offset.OffestDatetimeArithmetic.time_subtract(<YearBegin: month=1>)\r\n-   15.56μs    13.94μs      0.90  offset.OffestDatetimeArithmetic.time_subtract(<MonthBegin>)\r\n-    3.70ms     3.32ms      0.90  algorithms.Duplicated.time_duplicated_float('last')\r\n-   16.04μs    14.34μs      0.89  offset.OffestDatetimeArithmetic.time_add_10(<YearEnd: month=12>)\r\n-    4.58μs     4.10μs      0.89  timeseries.DatetimeIndex.time_get('tz_naive')\r\n-   20.08μs    17.93μs      0.89  period.PeriodUnaryMethods.time_asfreq('min')\r\n-    7.55μs     6.73μs      0.89  timestamp.TimestampProperties.time_is_quarter_end(None, 'B')\r\n-   13.13μs    11.69μs      0.89  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    7.45μs     6.63μs      0.89  timestamp.TimestampProperties.time_is_year_start(None, 'B')\r\n-   29.63μs    26.35μs      0.89  offset.OffestDatetimeArithmetic.time_add_10(<CustomBusinessDay>)\r\n-    1.24ms     1.10ms      0.89  inference.NumericInferOps.time_multiply(<type 'numpy.uint64'>)\r\n-    5.35μs     4.74μs      0.89  index_object.Float64IndexMethod.time_get_loc\r\n-    8.09ms     7.17ms      0.89  binary_ops.Ops2.time_frame_int_div_by_zero\r\n-  961.41μs   849.65μs      0.88  index_object.Ops.time_multiply('float')\r\n-   10.88ms     9.61ms      0.88  binary_ops.Timeseries.time_timestamp_ops_diff('US/Eastern')\r\n-   12.99μs    11.44μs      0.88  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-   10.36μs     9.06μs      0.87  offset.OffestDatetimeArithmetic.time_apply(<BusinessYearBegin: month=1>)\r\n-   13.30μs    11.61μs      0.87  timestamp.TimestampProperties.time_is_month_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    3.90ms     3.40ms      0.87  timeseries.ToDatetimeCache.time_unique_seconds_and_unit(True)\r\n-    2.66ms     2.32ms      0.87  timeseries.ResampleSeries.time_resample('period', '5min', 'ohlc')\r\n-    7.65μs     6.67μs      0.87  timestamp.TimestampProperties.time_is_month_end(None, 'B')\r\n-   71.15ms    61.82ms      0.87  frame_ctor.FromDicts.time_nested_dict_int64\r\n-  420.96μs   365.09μs      0.87  inference.NumericInferOps.time_subtract(<type 'numpy.uint16'>)\r\n-  236.66ms   205.16ms      0.87  join_merge.ConcatPanels.time_f_ordered(0, True)\r\n-   12.97μs    11.22μs      0.87  timestamp.TimestampProperties.time_is_year_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-  140.40μs   120.69μs      0.86  offset.OffestDatetimeArithmetic.time_subtract_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    2.69ms     2.31ms      0.86  timeseries.DatetimeIndex.time_unique('tz_naive')\r\n-    2.55ms     2.19ms      0.86  timeseries.ResampleDatetetime64.time_resample\r\n-    3.65ms     3.13ms      0.86  timeseries.AsOf.time_asof_nan('Series')\r\n-   13.53μs    11.59μs      0.86  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<SemiMonthBegin: day_of_month=15>)\r\n-    7.71μs     6.55μs      0.85  timestamp.TimestampProperties.time_is_month_start(None, 'B')\r\n-   22.19μs    18.84μs      0.85  offset.OffestDatetimeArithmetic.time_add(<CustomBusinessDay>)\r\n-    3.51μs     2.98μs      0.85  timedelta.TimedeltaConstructor.time_from_np_timedelta\r\n-    3.84ms     3.24ms      0.84  timeseries.AsOf.time_asof('Series')\r\n-    1.81ms     1.53ms      0.84  inference.NumericInferOps.time_subtract(<type 'numpy.float32'>)\r\n-  342.81μs   289.02μs      0.84  inference.NumericInferOps.time_subtract(<type 'numpy.uint8'>)\r\n-   12.50ms    10.52ms      0.84  frame_methods.MaskBool.time_frame_mask_floats\r\n-   36.91ms    30.85ms      0.84  eval.Eval.time_add('numexpr', 'all')\r\n-    2.67ms     2.23ms      0.83  inference.NumericInferOps.time_subtract(<type 'numpy.float64'>)\r\n-    1.57ms     1.30ms      0.83  inference.NumericInferOps.time_divide(<type 'numpy.int16'>)\r\n-    7.49μs     6.21μs      0.83  offset.OnOffset.time_on_offset(<Day>)\r\n-    8.19μs     6.78μs      0.83  timestamp.TimestampProperties.time_is_year_end(None, 'B')\r\n-   73.70μs    60.19μs      0.82  offset.OffestDatetimeArithmetic.time_add_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    8.18μs     6.64μs      0.81  timestamp.TimestampProperties.time_is_quarter_start(None, 'B')\r\n-  449.52μs   364.48μs      0.81  inference.NumericInferOps.time_add(<type 'numpy.int16'>)\r\n-    4.49ms     3.63ms      0.81  binary_ops.Ops2.time_frame_float_div_by_zero\r\n-     1.22s   963.90ms      0.79  join_merge.JoinIndex.time_left_outer_join_index\r\n-    1.75ms     1.37ms      0.78  inference.NumericInferOps.time_add(<type 'numpy.int32'>)\r\n-   58.84ms    45.52ms      0.77  eval.Eval.time_mult('python', 'all')\r\n-   16.81μs    12.83μs      0.76  offset.OffestDatetimeArithmetic.time_add(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    3.88ms     2.96ms      0.76  inference.NumericInferOps.time_divide(<type 'numpy.int64'>)\r\n-   16.96μs    11.77μs      0.69  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   40.70μs    28.24μs      0.69  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   36.04ms    23.95ms      0.66  eval.Eval.time_mult('numexpr', 'all')\r\n-   14.49μs     9.33μs      0.64  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   29.48ms    18.73ms      0.64  reindex.DropDuplicates.time_frame_drop_dups_int(False)\r\n-  918.95ns   513.65ns      0.56  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-   29.42μs    12.91μs      0.44  offset.OffestDatetimeArithmetic.time_add(<QuarterBegin: startingMonth=3>)\r\n\r\n  [983d71fa] [f09bee78]\r\n+   16.26μs    30.40μs      1.87  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessMonthBegin>)\r\n+    1.30ms     2.21ms      1.70  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'round_trip')\r\n+    3.07ms     5.10ms      1.66  replace.FillNa.time_replace(False)\r\n+  238.70μs   389.94μs      1.63  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+    1.32ms     2.15ms      1.62  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', 'round_trip')\r\n+   18.73ms    29.94ms      1.60  groupby.Apply.time_scalar_function_multi_col\r\n+  714.33μs     1.12ms      1.57  stat_ops.SeriesOps.time_op('std', 'int', False)\r\n+    1.33ms     2.04ms      1.53  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'round_trip')\r\n+  229.71μs   346.42μs      1.51  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n+    1.30ms     1.96ms      1.51  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', 'round_trip')\r\n+   68.71ms   103.19ms      1.50  io.sas.SAS.time_read_msgpack('sas7bdat')\r\n+  220.76μs   329.21μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  237.40μs   353.62μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  218.53μs   322.34μs      1.48  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n+  254.93μs   375.73μs      1.47  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+  230.46μs   339.59μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  241.05μs   354.82μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  231.40μs   339.10μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<Day>)\r\n+  253.56μs   370.10μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  253.02μs   368.55μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+    1.33ms     1.92ms      1.44  inference.NumericInferOps.time_multiply(<type 'numpy.float32'>)\r\n+  237.45μs   340.05μs      1.43  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  507.25μs   723.49μs      1.43  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  245.02μs   348.65μs      1.42  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  257.29μs   364.14μs      1.42  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+   13.67μs    19.04μs      1.39  offset.OffestDatetimeArithmetic.time_add(<BusinessQuarterBegin: startingMonth=3>)\r\n+    4.19ms     5.50ms      1.31  groupby.FirstLast.time_groupby_last('float64')\r\n+  540.34μs   704.55μs      1.30  timeseries.InferFreq.time_infer_freq(None)\r\n+    9.60ms    12.50ms      1.30  binary_ops.Ops.time_frame_add(True, 'default')\r\n+  540.52μs   691.60μs      1.28  timeseries.InferFreq.time_infer_freq('D')\r\n+   26.41ms    33.68ms      1.28  eval.Eval.time_add('numexpr', 'all')\r\n+    2.20ms     2.78ms      1.26  inference.NumericInferOps.time_add(<type 'numpy.int64'>)\r\n+    1.49ms     1.88ms      1.26  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', 'round_trip')\r\n+    3.42ms     4.31ms      1.26  algorithms.Duplicated.time_duplicated_float('first')\r\n+    6.00ms     7.51ms      1.25  inference.NumericInferOps.time_modulo(<type 'numpy.uint8'>)\r\n+    5.10ms     6.35ms      1.24  stat_ops.SeriesMultiIndexOps.time_op(0, 'sem')\r\n+    3.44ms     4.26ms      1.24  sparse.ArithmeticBlock.time_addition(0)\r\n+  910.62μs     1.12ms      1.23  offset.OffsetSeriesArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  414.28μs   508.49μs      1.23  offset.ApplyIndex.time_apply_index(<MonthEnd>)\r\n+    1.29ms     1.58ms      1.22  inference.NumericInferOps.time_divide(<type 'numpy.int16'>)\r\n+  633.92μs   762.40μs      1.20  offset.OffsetSeriesArithmetic.time_add_offset(<MonthEnd>)\r\n+  106.93ms   128.41ms      1.20  inference.ToNumericDowncast.time_downcast('string-float', 'signed')\r\n+  840.30μs     1.01ms      1.20  timeseries.InferFreq.time_infer_freq('B')\r\n+   11.68ms    14.01ms      1.20  frame_methods.MaskBool.time_frame_mask_bools\r\n+  635.31μs   759.04μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  672.72μs   800.06μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+  645.57μs   766.69μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+    9.23μs    10.94μs      1.19  offset.OffestDatetimeArithmetic.time_apply(<MonthEnd>)\r\n+  855.12μs     1.01ms      1.18  offset.ApplyIndex.time_apply_index(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  666.16μs   786.82μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  275.56μs   324.66μs      1.18  inference.NumericInferOps.time_add(<type 'numpy.uint8'>)\r\n+    1.95ms     2.29ms      1.17  rolling.Quantile.time_quantile('DataFrame', 10, 'float', 0)\r\n+  303.95μs   356.67μs      1.17  stat_ops.SeriesOps.time_op('sum', 'float', True)\r\n+  635.99μs   744.99μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<MonthBegin>)\r\n+  313.90μs   367.61μs      1.17  stat_ops.SeriesOps.time_op('prod', 'int', True)\r\n+  634.42μs   742.46μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+   11.02μs    12.89μs      1.17  multiindex_object.GetLoc.time_string_get_loc\r\n+  306.82μs   357.78μs      1.17  stat_ops.SeriesOps.time_op('mean', 'float', True)\r\n+  290.37μs   338.52μs      1.17  stat_ops.SeriesOps.time_op('prod', 'float', False)\r\n+    1.21ms     1.41ms      1.16  ctors.SeriesConstructors.time_series_constructor(<type 'list'>, False)\r\n+  656.44μs   763.83μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  313.69μs   365.00μs      1.16  stat_ops.SeriesOps.time_op('prod', 'int', False)\r\n+  302.38μs   351.42μs      1.16  stat_ops.SeriesOps.time_op('sum', 'float', False)\r\n+  673.97μs   783.16μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  649.74μs   754.88μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n+  648.34μs   752.74μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+   18.15ms    21.05ms      1.16  io.sql.SQL.time_read_sql_query('sqlite')\r\n+   97.29ms   112.86ms      1.16  strings.Split.time_split(False)\r\n+   25.94ms    30.07ms      1.16  io.hdf.HDFStorePanel.time_write_store_table_panel\r\n+   21.89ms    25.31ms      1.16  groupby.FirstLast.time_groupby_nth_all('float32')\r\n+    1.49ms     1.72ms      1.15  inference.NumericInferOps.time_subtract(<type 'numpy.float32'>)\r\n+  290.07μs   334.17μs      1.15  stat_ops.SeriesOps.time_op('prod', 'float', True)\r\n+  308.84μs   355.18μs      1.15  stat_ops.SeriesOps.time_op('mean', 'float', False)\r\n+  348.10μs   398.90μs      1.15  stat_ops.SeriesOps.time_op('sum', 'int', False)\r\n+   39.22ms    44.95ms      1.15  eval.Eval.time_and('numexpr', 'all')\r\n+    1.98ms     2.27ms      1.15  replace.FillNa.time_fillna(False)\r\n+  345.28μs   395.48μs      1.15  stat_ops.SeriesOps.time_op('sum', 'int', True)\r\n+    2.00ms     2.29ms      1.15  rolling.Quantile.time_quantile('DataFrame', 1000, 'float', 1)\r\n+    7.68ms     8.80ms      1.14  series_methods.ValueCounts.time_value_counts('object')\r\n+  647.02μs   740.31μs      1.14  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  686.80μs   781.89μs      1.14  inference.NumericInferOps.time_multiply(<type 'numpy.uint32'>)\r\n+    1.19ms     1.35ms      1.14  stat_ops.SeriesOps.time_op('sem', 'float', True)\r\n+  656.39μs   743.77μs      1.13  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+    2.07ms     2.34ms      1.13  io.hdf.HDFStoreDataFrame.time_read_store_table\r\n+   10.58ms    11.93ms      1.13  eval.Eval.time_add('numexpr', 1)\r\n+    9.09ms    10.24ms      1.13  stat_ops.FrameOps.time_op('mad', 'float', 0, False)\r\n+  421.81μs   474.89μs      1.13  stat_ops.SeriesOps.time_op('mean', 'int', False)\r\n+   20.70ms    23.28ms      1.12  strings.Methods.time_endswith\r\n+   16.41μs    18.42μs      1.12  offset.OffestDatetimeArithmetic.time_add_10(<SemiMonthEnd: day_of_month=15>)\r\n+    2.11ms     2.36ms      1.12  inference.NumericInferOps.time_divide(<type 'numpy.float32'>)\r\n+   16.88μs    18.92μs      1.12  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessDay>)\r\n+   18.93μs    21.16μs      1.12  offset.OffestDatetimeArithmetic.time_subtract_10(<SemiMonthBegin: day_of_month=15>)\r\n+    5.30ms     5.90ms      1.11  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\r\n+   12.79ms    14.20ms      1.11  stat_ops.FrameOps.time_op('kurt', 'float', 1, False)\r\n+    6.83ms     7.57ms      1.11  frame_methods.Apply.time_apply_lambda_mean\r\n+    2.92ms     3.24ms      1.11  algorithms.Duplicated.time_duplicated_int('first')\r\n+   19.06μs    21.11μs      1.11  period.PeriodUnaryMethods.time_now('M')\r\n+  422.97μs   468.16μs      1.11  stat_ops.SeriesOps.time_op('mean', 'int', True)\r\n+  531.08μs   587.08μs      1.11  stat_ops.SeriesOps.time_op('std', 'float', True)\r\n+  519.67μs   574.31μs      1.11  stat_ops.SeriesOps.time_op('var', 'float', True)\r\n+    8.54μs     9.42μs      1.10  offset.OffestDatetimeArithmetic.time_apply(<BusinessYearEnd: month=12>)\r\n+    4.02μs     4.42μs      1.10  timeseries.DatetimeIndex.time_get('dst')\r\n+    2.29ms     2.52ms      1.10  inference.NumericInferOps.time_subtract(<type 'numpy.int64'>)\r\n-   17.57μs    15.94μs      0.91  offset.OffestDatetimeArithmetic.time_subtract(<BusinessYearEnd: month=12>)\r\n-  134.79μs   122.28μs      0.91  offset.OffestDatetimeArithmetic.time_subtract(<CustomBusinessMonthEnd>)\r\n-   16.49μs    14.95μs      0.91  offset.OffestDatetimeArithmetic.time_add_10(<MonthEnd>)\r\n-   11.07ms    10.04ms      0.91  stat_ops.FrameOps.time_op('mad', 'float', 1, False)\r\n-   15.91μs    14.42μs      0.91  offset.OffestDatetimeArithmetic.time_subtract(<MonthEnd>)\r\n-    4.04ms     3.66ms      0.91  io.hdf.HDFStoreDataFrame.time_read_store_mixed\r\n-    4.68ms     4.23ms      0.90  groupby.Categories.time_groupby_extra_cat_nosort\r\n-    5.11ms     4.62ms      0.90  binary_ops.Ops2.time_frame_float_div_by_zero\r\n-  138.11μs   124.77μs      0.90  offset.OffestDatetimeArithmetic.time_subtract_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    4.47μs     4.03μs      0.90  timedelta.TimedeltaConstructor.time_from_datetime_timedelta\r\n-   18.39μs    16.52μs      0.90  offset.OffestDatetimeArithmetic.time_subtract(<SemiMonthEnd: day_of_month=15>)\r\n-   10.67ms     9.55ms      0.89  groupby.Categories.time_groupby_ordered_nosort\r\n-   12.85μs    11.48μs      0.89  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<QuarterEnd: startingMonth=3>)\r\n-   22.02μs    19.66μs      0.89  offset.OffestDatetimeArithmetic.time_add_10(<Day>)\r\n-  819.72μs   731.57μs      0.89  inference.NumericInferOps.time_add(<type 'numpy.uint32'>)\r\n-   12.35μs    10.98μs      0.89  timestamp.TimestampProperties.time_is_leap_year(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    3.19μs     2.83μs      0.89  timedelta.TimedeltaConstructor.time_from_np_timedelta\r\n-    3.93μs     3.49μs      0.89  timedelta.TimedeltaConstructor.time_from_unit\r\n-   12.72μs    11.24μs      0.88  timestamp.TimestampProperties.time_is_month_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-  310.05μs   273.68μs      0.88  inference.NumericInferOps.time_multiply(<type 'numpy.int8'>)\r\n-    7.73μs     6.82μs      0.88  timestamp.TimestampProperties.time_is_month_start(None, 'B')\r\n-    1.50ms     1.32ms      0.88  inference.NumericInferOps.time_divide(<type 'numpy.int8'>)\r\n-    1.96ms     1.73ms      0.88  inference.NumericInferOps.time_divide(<type 'numpy.uint32'>)\r\n-    7.39ms     6.50ms      0.88  groupby.Categories.time_groupby_nosort\r\n-   12.52μs    11.01μs      0.88  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessMonthBegin>)\r\n-   20.51μs    18.00μs      0.88  period.PeriodUnaryMethods.time_asfreq('min')\r\n-  391.45μs   342.96μs      0.88  join_merge.JoinNonUnique.time_join_non_unique_equal\r\n-   11.12μs     9.73μs      0.88  offset.OffestDatetimeArithmetic.time_apply(<SemiMonthEnd: day_of_month=15>)\r\n-    7.91μs     6.89μs      0.87  timestamp.TimestampProperties.time_is_year_end(None, 'B')\r\n-  473.31ns   411.25ns      0.87  timestamp.TimestampProperties.time_is_month_end(None, None)\r\n-  338.17μs   292.68μs      0.87  inference.NumericInferOps.time_multiply(<type 'numpy.uint8'>)\r\n-    2.01ms     1.74ms      0.86  io.hdf.HDFStoreDataFrame.time_read_store\r\n-   21.14μs    18.25μs      0.86  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessDay>)\r\n-  124.48μs   107.43μs      0.86  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessMonthBegin>)\r\n-    1.55ms     1.31ms      0.85  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', None)\r\n-   13.63μs    11.54μs      0.85  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    2.52ms     2.13ms      0.85  inference.NumericInferOps.time_multiply(<type 'numpy.int64'>)\r\n-    5.75ms     4.85ms      0.84  stat_ops.SeriesMultiIndexOps.time_op(1, 'sem')\r\n-    4.08μs     3.42μs      0.84  timedelta.TimedeltaConstructor.time_from_int\r\n-    1.04μs   862.02ns      0.83  period.PeriodProperties.time_property('M', 'is_leap_year')\r\n-    3.72ms     3.08ms      0.83  timeseries.AsOf.time_asof_nan('Series')\r\n-   87.77ms    72.36ms      0.82  join_merge.ConcatDataFrames.time_c_ordered(1, True)\r\n-    3.96ms     3.25ms      0.82  timeseries.AsOf.time_asof('Series')\r\n-   72.84μs    59.65μs      0.82  offset.OffestDatetimeArithmetic.time_add_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    5.04ms     4.11ms      0.82  algorithms.Factorize.time_factorize_int(False)\r\n-    1.70μs     1.38μs      0.81  timestamp.TimestampOps.time_replace_None(None)\r\n-   13.43μs    10.92μs      0.81  timestamp.TimestampProperties.time_is_quarter_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    1.72ms     1.36ms      0.79  inference.NumericInferOps.time_add(<type 'numpy.int32'>)\r\n-    3.59ms     2.83ms      0.79  inference.NumericInferOps.time_divide(<type 'numpy.int64'>)\r\n-    1.96ms     1.54ms      0.78  reshape.Melt.time_melt_dataframe\r\n-    3.37ms     2.59ms      0.77  reindex.DropDuplicates.time_frame_drop_dups_na(True)\r\n-    8.38ms     6.43ms      0.77  inference.NumericInferOps.time_modulo(<type 'numpy.int8'>)\r\n-    1.96ms     1.50ms      0.77  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', 'round_trip')\r\n-   25.58μs    18.98μs      0.74  inference.ToNumeric.time_from_float('coerce')\r\n-   36.57ms    26.75ms      0.73  join_merge.Concat.time_concat_small_frames(0)\r\n-   17.15μs    12.03μs      0.70  offset.OffestDatetimeArithmetic.time_add(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    6.17ms     4.27ms      0.69  stat_ops.FrameOps.time_op('median', 'int', 0, True)\r\n-   40.92μs    28.15μs      0.69  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-  323.40μs   217.83μs      0.67  strings.Encode.time_encode_decode\r\n-   17.32μs    11.64μs      0.67  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    2.17ms     1.45ms      0.67  inference.NumericInferOps.time_multiply(<type 'numpy.int32'>)\r\n-    4.63ms     3.08ms      0.67  inference.NumericInferOps.time_divide(<type 'numpy.int32'>)\r\n-   14.28μs     9.30μs      0.65  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-  238.59μs   153.40μs      0.64  groupby.GroupByMethods.time_method('int', 'cummax')\r\n-  383.16ns   191.88ns      0.50  timedelta.TimedeltaProperties.time_timedelta_microseconds\r\n-   32.27μs    15.96μs      0.49  offset.OffestDatetimeArithmetic.time_subtract(<BusinessMonthEnd>)\r\n-    7.07ms     3.49ms      0.49  sparse.ArithmeticBlock.time_division(nan)\r\n-    9.20ms   945.69μs      0.10  io.csv.ReadUint64Integers.time_read_uint64_na_values\r\n\r\n  [983d71fa] [f09bee78]\r\n+    1.33ms     2.24ms      1.69  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'round_trip')\r\n+    2.04ms     3.21ms      1.57  timedelta.DatetimeAccessor.time_timedelta_seconds\r\n+    2.22ms     3.43ms      1.54  inference.NumericInferOps.time_add(<type 'numpy.int64'>)\r\n+  223.67μs   341.17μs      1.53  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n+  235.91μs   358.25μs      1.52  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  219.17μs   330.34μs      1.51  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n+  229.08μs   344.27μs      1.50  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  231.15μs   344.59μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<Day>)\r\n+  239.86μs   354.33μs      1.48  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  244.18μs   360.08μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  237.92μs   349.85μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+   22.16ms    32.48ms      1.47  eval.Eval.time_add('numexpr', 'all')\r\n+  237.11μs   344.14μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  256.78μs   371.48μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  231.58μs   333.72μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  257.39μs   370.59μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  252.68μs   362.24μs      1.43  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+  261.21μs   371.61μs      1.42  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+  513.03μs   706.13μs      1.38  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+   22.79ms    30.32ms      1.33  eval.Eval.time_mult('numexpr', 'all')\r\n+  157.77μs   207.15μs      1.31  join_merge.Concat.time_concat_empty_right(1)\r\n+  275.99μs   361.50μs      1.31  inference.NumericInferOps.time_subtract(<type 'numpy.uint8'>)\r\n+  537.30μs   693.39μs      1.29  timeseries.InferFreq.time_infer_freq('D')\r\n+  541.72μs   686.31μs      1.27  timeseries.InferFreq.time_infer_freq(None)\r\n+    3.50ms     4.39ms      1.26  stat_ops.SeriesOps.time_op('mad', 'int', True)\r\n+  341.04μs   427.38μs      1.25  inference.NumericInferOps.time_subtract(<type 'numpy.uint16'>)\r\n+    1.52ms     1.90ms      1.25  inference.NumericInferOps.time_multiply(<type 'numpy.int32'>)\r\n+   70.98ms    88.56ms      1.25  join_merge.ConcatDataFrames.time_c_ordered(1, True)\r\n+    1.74ms     2.16ms      1.24  io.hdf.HDFStoreDataFrame.time_read_store\r\n+  414.39μs   514.09μs      1.24  offset.ApplyIndex.time_apply_index(<MonthEnd>)\r\n+    1.99ms     2.47ms      1.24  stat_ops.SeriesOps.time_op('sem', 'int', True)\r\n+  656.68μs   809.51μs      1.23  inference.NumericInferOps.time_subtract(<type 'numpy.uint32'>)\r\n+  637.38μs   781.87μs      1.23  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+    3.23ms     3.95ms      1.22  stat_ops.FrameOps.time_op('mean', 'int', 0, False)\r\n+    3.43ms     4.18ms      1.22  sparse.ArithmeticBlock.time_division(0)\r\n+    3.39μs     4.12μs      1.22  timedelta.TimedeltaConstructor.time_from_int\r\n+  945.90μs     1.15ms      1.21  offset.OffsetSeriesArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  299.30μs   360.25μs      1.20  stat_ops.SeriesOps.time_op('sum', 'float', False)\r\n+  847.68μs     1.02ms      1.20  offset.ApplyIndex.time_apply_index(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  284.46μs   339.39μs      1.19  stat_ops.SeriesOps.time_op('prod', 'float', True)\r\n+  635.73μs   755.66μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<MonthBegin>)\r\n+  677.22μs   804.68μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  667.96μs   791.81μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  647.85μs   767.72μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  311.58μs   368.38μs      1.18  stat_ops.SeriesOps.time_op('prod', 'int', False)\r\n+  860.68μs     1.02ms      1.18  index_object.Ops.time_multiply('float')\r\n+    7.60ms     8.97ms      1.18  series_methods.ValueCounts.time_value_counts('object')\r\n+  644.39μs   760.84μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  646.93μs   762.87μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+   10.94μs    12.89μs      1.18  multiindex_object.GetLoc.time_med_get_loc\r\n+  637.39μs   750.96μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<MonthEnd>)\r\n+  653.18μs   767.64μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  290.49μs   340.82μs      1.17  stat_ops.SeriesOps.time_op('prod', 'float', False)\r\n+  303.40μs   355.78μs      1.17  stat_ops.SeriesOps.time_op('mean', 'float', False)\r\n+    2.24ms     2.63ms      1.17  inference.NumericInferOps.time_multiply(<type 'numpy.float64'>)\r\n+    9.31μs    10.91μs      1.17  offset.OffestDatetimeArithmetic.time_apply(<BusinessYearBegin: month=1>)\r\n+  847.05μs   990.74μs      1.17  timeseries.InferFreq.time_infer_freq('B')\r\n+  654.88μs   765.73μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  660.95μs   770.46μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n+  302.59μs   352.54μs      1.17  stat_ops.SeriesOps.time_op('sum', 'float', True)\r\n+  314.91μs   365.86μs      1.16  stat_ops.SeriesOps.time_op('prod', 'int', True)\r\n+    1.17ms     1.36ms      1.16  stat_ops.SeriesOps.time_op('sem', 'float', True)\r\n+   11.89μs    13.76μs      1.16  offset.OffestDatetimeArithmetic.time_add(<BusinessMonthBegin>)\r\n+   12.72μs    14.71μs      1.16  offset.OffestDatetimeArithmetic.time_add(<SemiMonthBegin: day_of_month=15>)\r\n+    1.15ms     1.33ms      1.16  stat_ops.SeriesOps.time_op('sem', 'float', False)\r\n+    2.91ms     3.37ms      1.16  algorithms.Duplicated.time_duplicated_int('first')\r\n+  345.12μs   398.51μs      1.15  stat_ops.SeriesOps.time_op('sum', 'int', False)\r\n+    5.89μs     6.80μs      1.15  offset.OnOffset.time_on_offset(<BusinessMonthBegin>)\r\n+  653.47μs   751.88μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  417.49μs   479.39μs      1.15  stat_ops.SeriesOps.time_op('mean', 'int', True)\r\n+    3.97μs     4.55μs      1.15  timedelta.TimedeltaConstructor.time_from_unit\r\n+  686.48μs   786.40μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+   21.34ms    24.43ms      1.14  io.csv.ToCSV.time_frame('mixed')\r\n+  345.71μs   395.63μs      1.14  stat_ops.SeriesOps.time_op('sum', 'int', True)\r\n+    1.38ms     1.57ms      1.14  inference.NumericInferOps.time_subtract(<type 'numpy.float32'>)\r\n+  305.93μs   349.53μs      1.14  stat_ops.SeriesOps.time_op('mean', 'float', True)\r\n+   10.14ms    11.58ms      1.14  multiindex_object.GetLoc.time_small_get_loc_warm\r\n+  518.32μs   590.32μs      1.14  stat_ops.SeriesOps.time_op('var', 'float', True)\r\n+   56.53ms    64.32ms      1.14  rolling.Methods.time_rolling('Series', 1000, 'float', 'median')\r\n+   16.95μs    19.29μs      1.14  timeseries.AsOf.time_asof_single('Series')\r\n+    3.27ms     3.72ms      1.14  algorithms.Duplicated.time_duplicated_float('first')\r\n+   12.69μs    14.40μs      1.13  offset.OffestDatetimeArithmetic.time_add(<SemiMonthEnd: day_of_month=15>)\r\n+    2.06ms     2.34ms      1.13  io.hdf.HDFStoreDataFrame.time_read_store_table\r\n+    3.72ms     4.22ms      1.13  timeseries.ToDatetimeISO8601.time_iso8601_format\r\n+    9.38ms    10.63ms      1.13  join_merge.Join.time_join_dataframe_index_single_key_bigger(False)\r\n+   19.48ms    22.04ms      1.13  strings.Methods.time_get\r\n+  858.73μs   971.30μs      1.13  index_object.Ops.time_subtract('float')\r\n+    9.07μs    10.23μs      1.13  offset.OffestDatetimeArithmetic.time_apply(<YearBegin: month=1>)\r\n+   10.90μs    12.28μs      1.13  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessYearBegin: month=1>)\r\n+  423.51μs   475.13μs      1.12  stat_ops.SeriesOps.time_op('mean', 'int', False)\r\n+    6.54ms     7.34ms      1.12  timeseries.Factorize.time_factorize(None)\r\n+    1.52ms     1.69ms      1.12  inference.NumericInferOps.time_add(<type 'numpy.float32'>)\r\n+   42.69ms    47.62ms      1.12  eval.Eval.time_chained_cmp('python', 'all')\r\n+   23.15ms    25.80ms      1.11  eval.Eval.time_chained_cmp('python', 1)\r\n+    2.61ms     2.90ms      1.11  stat_ops.Correlation.time_corr('pearson')\r\n+    2.83μs     3.14μs      1.11  timedelta.TimedeltaConstructor.time_from_np_timedelta\r\n+   30.86ms    34.22ms      1.11  eval.Eval.time_chained_cmp('numexpr', 'all')\r\n+   14.50μs    16.06μs      1.11  offset.OffestDatetimeArithmetic.time_subtract(<MonthBegin>)\r\n+  703.26μs   778.75μs      1.11  stat_ops.SeriesOps.time_op('std', 'int', False)\r\n+  530.86μs   587.76μs      1.11  stat_ops.SeriesOps.time_op('std', 'float', True)\r\n+    4.56μs     5.04μs      1.11  index_object.Float64IndexMethod.time_get_loc\r\n+   15.35μs    16.96μs      1.11  offset.OffestDatetimeArithmetic.time_subtract(<YearBegin: month=1>)\r\n+    1.73ms     1.91ms      1.10  index_object.SetOperations.time_operation('datetime', 'intersection')\r\n+    5.16μs     5.69μs      1.10  timestamp.TimestampOps.time_replace_None('US/Eastern')\r\n+  166.05μs   183.33μs      1.10  groupby.GroupByMethods.time_method('float', 'cumsum')\r\n+    2.72μs     3.00μs      1.10  indexing.DataFrameStringIndexing.time_get_value\r\n+   15.03μs    16.57μs      1.10  offset.OffestDatetimeArithmetic.time_apply(<CustomBusinessDay>)\r\n+   11.46μs    12.63μs      1.10  multiindex_object.GetLoc.time_string_get_loc\r\n+    3.27ms     3.59ms      1.10  inference.NumericInferOps.time_divide(<type 'numpy.int64'>)\r\n-    7.21ms     6.55ms      0.91  groupby.Categories.time_groupby_nosort\r\n-   12.60μs    11.44μs      0.91  timestamp.TimestampProperties.time_is_month_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-   15.98μs    14.43μs      0.90  offset.OffestDatetimeArithmetic.time_add_10(<QuarterEnd: startingMonth=3>)\r\n-  373.58μs   337.06μs      0.90  join_merge.JoinNonUnique.time_join_non_unique_equal\r\n-    8.21μs     7.40μs      0.90  timestamp.TimestampConstruction.time_parse_iso8601_tz\r\n-    4.27ms     3.85ms      0.90  algorithms.Factorize.time_factorize_int(False)\r\n-   13.13μs    11.81μs      0.90  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-  303.57μs   272.79μs      0.90  inference.NumericInferOps.time_add(<type 'numpy.uint8'>)\r\n-    2.93ms     2.63ms      0.90  inference.ToNumeric.time_from_numeric_str('ignore')\r\n-   16.76μs    15.00μs      0.90  offset.OffestDatetimeArithmetic.time_add_10(<BusinessYearBegin: month=1>)\r\n-   24.75μs    22.08μs      0.89  offset.OffestDatetimeArithmetic.time_subtract(<Day>)\r\n-    3.50ms     3.12ms      0.89  inference.NumericInferOps.time_divide(<type 'numpy.int32'>)\r\n-  135.35μs   119.83μs      0.89  offset.OffestDatetimeArithmetic.time_subtract(<CustomBusinessMonthEnd>)\r\n-    7.59μs     6.71μs      0.88  timestamp.TimestampProperties.time_is_leap_year(None, 'B')\r\n-    7.50μs     6.62μs      0.88  timestamp.TimestampProperties.time_is_year_end(None, 'B')\r\n-   13.26μs    11.66μs      0.88  timestamp.TimestampProperties.time_is_month_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-   24.47ms    21.42ms      0.88  groupby.FirstLast.time_groupby_nth_all('float32')\r\n-    2.25ms     1.97ms      0.88  inference.NumericInferOps.time_multiply(<type 'numpy.int64'>)\r\n-    2.35ms     2.05ms      0.87  inference.NumericInferOps.time_subtract(<type 'numpy.int64'>)\r\n-    1.84ms     1.59ms      0.87  inference.NumericInferOps.time_divide(<type 'numpy.float32'>)\r\n-     1.01s   868.78ms      0.86  groupby.GroupByMethods.time_method('float', 'pct_change')\r\n-    7.85μs     6.75μs      0.86  timestamp.TimestampProperties.time_is_year_start(None, 'B')\r\n-    8.27μs     7.07μs      0.85  timestamp.TimestampProperties.time_is_quarter_end(None, 'B')\r\n-   11.08ms     9.46ms      0.85  stat_ops.FrameOps.time_op('mad', 'float', 0, False)\r\n-    7.10μs     6.05μs      0.85  timedelta.TimedeltaConstructor.time_from_string\r\n-  142.41μs   121.05μs      0.85  offset.OffestDatetimeArithmetic.time_subtract_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   17.81μs    15.12μs      0.85  offset.OffestDatetimeArithmetic.time_subtract(<BusinessQuarterBegin: startingMonth=3>)\r\n-   15.24ms    12.88ms      0.85  categoricals.ValueCounts.time_value_counts(True)\r\n-    3.87ms     3.27ms      0.84  timeseries.AsOf.time_asof('Series')\r\n-   71.81μs    60.58μs      0.84  offset.OffestDatetimeArithmetic.time_add_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    2.15ms     1.81ms      0.84  rolling.Methods.time_rolling('DataFrame', 10, 'float', 'std')\r\n-    3.75ms     3.14ms      0.84  timeseries.AsOf.time_asof_nan('Series')\r\n-   20.43μs    16.98μs      0.83  period.PeriodUnaryMethods.time_asfreq('min')\r\n-   18.71μs    15.48μs      0.83  offset.OffestDatetimeArithmetic.time_subtract_10(<MonthEnd>)\r\n-    7.83ms     6.41ms      0.82  binary_ops.Ops.time_frame_comparison(True, 'default')\r\n-    2.37ms     1.94ms      0.82  inference.NumericInferOps.time_divide(<type 'numpy.float64'>)\r\n-     2.07s      1.69s      0.82  join_merge.JoinIndex.time_left_outer_join_index\r\n-   53.15ms    43.13ms      0.81  eval.Eval.time_and('numexpr', 'all')\r\n-   17.52μs    14.17μs      0.81  offset.OffestDatetimeArithmetic.time_add_10(<BusinessYearEnd: month=12>)\r\n-    8.41ms     6.69ms      0.80  binary_ops.Ops2.time_frame_int_div_by_zero\r\n-    4.41ms     3.51ms      0.80  sparse.ArithmeticBlock.time_division(nan)\r\n-    4.49ms     3.56ms      0.79  binary_ops.Ops2.time_frame_float_div_by_zero\r\n-    2.01ms     1.59ms      0.79  inference.NumericInferOps.time_subtract(<type 'numpy.int32'>)\r\n-   55.45ms    43.74ms      0.79  eval.Eval.time_mult('python', 'all')\r\n-  632.04μs   486.10μs      0.77  inference.NumericInferOps.time_multiply(<type 'numpy.uint16'>)\r\n-    1.79ms     1.33ms      0.74  inference.NumericInferOps.time_multiply(<type 'numpy.float32'>)\r\n-  427.31μs   303.55μs      0.71  groupby.GroupByMethods.time_method('float', 'prod')\r\n-   17.62μs    12.27μs      0.70  offset.OffestDatetimeArithmetic.time_add(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   14.18μs     9.86μs      0.70  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    2.18ms     1.48ms      0.68  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', 'high')\r\n-   17.55μs    11.79μs      0.67  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   41.74μs    27.99μs      0.67  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    2.82ms     1.72ms      0.61  inference.NumericInferOps.time_divide(<type 'numpy.uint32'>)\r\n-  585.99ns   295.30ns      0.50  timestamp.TimestampProperties.time_is_year_start(None, None)\r\n\r\n  [983d71fa] [f09bee78]\r\n+    1.48ms     2.99ms      2.02  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', None)\r\n+   36.39ms    58.53ms      1.61  eval.Eval.time_mult('python', 'all')\r\n+  224.56μs   349.53μs      1.56  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<Day>)\r\n+  237.47μs   363.35μs      1.53  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  224.43μs   343.32μs      1.53  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n+   20.54ms    31.28ms      1.52  io.csv.ToCSV.time_frame('mixed')\r\n+  232.74μs   353.91μs      1.52  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  218.61μs   327.19μs      1.50  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n+  221.66μs   330.39μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  236.48μs   350.70μs      1.48  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+   40.36ms    59.83ms      1.48  reindex.Align.time_align_series_irregular_string\r\n+  248.91μs   367.97μs      1.48  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+    3.82ms     5.59ms      1.46  algorithms.Factorize.time_factorize_int(False)\r\n+  239.73μs   348.80μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+    1.16ms     1.69ms      1.45  inference.NumericInferOps.time_add(<type 'numpy.float32'>)\r\n+  233.56μs   338.21μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  260.20μs   376.42μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+  250.40μs   361.94μs      1.45  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+   21.19ms    30.62ms      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<CustomBusinessDay>)\r\n+  250.61μs   359.80μs      1.44  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  508.43μs   726.95μs      1.43  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  240.75μs   343.80μs      1.43  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+    1.97ms     2.79ms      1.42  timeseries.DatetimeIndex.time_add_timedelta('repeated')\r\n+    2.16ms     3.04ms      1.41  index_object.SetDisjoint.time_datetime_difference_disjoint\r\n+    1.75ms     2.34ms      1.34  timeseries.DatetimeIndex.time_add_timedelta('tz_aware')\r\n+    1.86ms     2.49ms      1.34  inference.NumericInferOps.time_divide(<type 'numpy.float64'>)\r\n+    3.23ms     4.18ms      1.29  binary_ops.Ops2.time_frame_float_div_by_zero\r\n+   11.93ms    15.38ms      1.29  frame_methods.Repr.time_repr_tall\r\n+  540.33μs   692.13μs      1.28  timeseries.InferFreq.time_infer_freq(None)\r\n+  541.21μs   692.43μs      1.28  timeseries.InferFreq.time_infer_freq('D')\r\n+  188.28μs   239.23μs      1.27  multiindex_object.Values.time_datetime_level_values_sliced\r\n+  305.08μs   379.26μs      1.24  stat_ops.SeriesOps.time_op('sum', 'float', True)\r\n+  928.16μs     1.13ms      1.22  offset.OffsetSeriesArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  415.88μs   506.15μs      1.22  offset.ApplyIndex.time_apply_index(<MonthEnd>)\r\n+  837.98μs     1.02ms      1.21  timeseries.InferFreq.time_infer_freq('B')\r\n+   23.06ms    27.92ms      1.21  stat_ops.SeriesMultiIndexOps.time_op(1, 'skew')\r\n+  630.94μs   760.48μs      1.21  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+    9.98ms    11.94ms      1.20  stat_ops.FrameOps.time_op('mad', 'float', 1, False)\r\n+  631.74μs   755.56μs      1.20  offset.OffsetSeriesArithmetic.time_add_offset(<MonthEnd>)\r\n+  635.17μs   757.80μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  648.93μs   773.06μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  641.78μs   760.25μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  646.02μs   764.34μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+   10.38ms    12.22ms      1.18  stat_ops.Rank.time_average_old('DataFrame', False)\r\n+  667.42μs   785.50μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+    9.10μs    10.69μs      1.17  offset.OffestDatetimeArithmetic.time_apply(<QuarterBegin: startingMonth=3>)\r\n+  659.59μs   773.95μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+    3.45μs     4.05μs      1.17  index_object.Indexing.time_slice('Float')\r\n+  661.41μs   775.08μs      1.17  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  305.28μs   357.23μs      1.17  stat_ops.SeriesOps.time_op('mean', 'float', False)\r\n+  289.92μs   337.45μs      1.16  stat_ops.SeriesOps.time_op('prod', 'float', True)\r\n+  651.98μs   758.68μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+   21.35μs    24.84μs      1.16  offset.OffestDatetimeArithmetic.time_subtract(<Day>)\r\n+  676.96μs   786.89μs      1.16  reindex.LevelAlign.time_reindex_level\r\n+   16.44μs    19.10μs      1.16  offset.OffestDatetimeArithmetic.time_subtract_10(<YearBegin: month=1>)\r\n+  304.87μs   354.10μs      1.16  stat_ops.SeriesOps.time_op('mean', 'float', True)\r\n+  192.25μs   223.30μs      1.16  frame_methods.GetDtypeCounts.time_frame_get_dtype_counts\r\n+   10.55ms    12.23ms      1.16  eval.Eval.time_add('numexpr', 1)\r\n+     2.52s      2.92s      1.16  join_merge.JoinIndex.time_left_outer_join_index\r\n+  662.40μs   766.51μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n+  646.06μs   746.69μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+    1.17ms     1.35ms      1.16  stat_ops.SeriesOps.time_op('sem', 'float', False)\r\n+  303.69μs   350.24μs      1.15  stat_ops.SeriesOps.time_op('sum', 'float', False)\r\n+  315.16μs   363.21μs      1.15  stat_ops.SeriesOps.time_op('prod', 'int', False)\r\n+  636.05μs   732.88μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<MonthBegin>)\r\n+  127.13ms   146.48ms      1.15  rolling.Quantile.time_quantile('Series', 10, 'float', 0.5)\r\n+  293.05μs   337.54μs      1.15  stat_ops.SeriesOps.time_op('prod', 'float', False)\r\n+  282.42μs   324.47μs      1.15  inference.NumericInferOps.time_multiply(<type 'numpy.int8'>)\r\n+    9.93ms    11.39ms      1.15  multiindex_object.GetLoc.time_small_get_loc_warm\r\n+  419.26μs   480.41μs      1.15  stat_ops.SeriesOps.time_op('mean', 'int', False)\r\n+    1.16ms     1.33ms      1.15  stat_ops.SeriesOps.time_op('sem', 'float', True)\r\n+  315.16μs   359.46μs      1.14  stat_ops.SeriesOps.time_op('prod', 'int', True)\r\n+  864.55μs   985.53μs      1.14  offset.ApplyIndex.time_apply_index(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  347.98μs   396.29μs      1.14  stat_ops.SeriesOps.time_op('sum', 'int', True)\r\n+  348.25μs   396.10μs      1.14  stat_ops.SeriesOps.time_op('sum', 'int', False)\r\n+   66.45ms    75.56ms      1.14  binary_ops.Ops.time_frame_multi_and(True, 'default')\r\n+    7.72ms     8.76ms      1.14  series_methods.ValueCounts.time_value_counts('object')\r\n+    1.43ms     1.62ms      1.13  series_methods.NSort.time_nsmallest('first')\r\n+    6.36ms     7.17ms      1.13  binary_ops.Ops.time_frame_comparison(True, 'default')\r\n+  533.38μs   600.97μs      1.13  stat_ops.SeriesOps.time_op('std', 'float', False)\r\n+  420.28μs   473.47μs      1.13  stat_ops.SeriesOps.time_op('mean', 'int', True)\r\n+   16.19μs    18.17μs      1.12  offset.OffestDatetimeArithmetic.time_subtract(<BusinessQuarterEnd: startingMonth=3>)\r\n+    2.80ms     3.14ms      1.12  inference.NumericInferOps.time_modulo(<type 'numpy.uint16'>)\r\n+  517.99μs   580.64μs      1.12  stat_ops.SeriesOps.time_op('var', 'float', True)\r\n+    9.37ms    10.48ms      1.12  stat_ops.FrameOps.time_op('mad', 'int', 1, True)\r\n+    4.89ms     5.47ms      1.12  stat_ops.SeriesMultiIndexOps.time_op(1, 'sem')\r\n+    4.08μs     4.55μs      1.12  timeseries.DatetimeIndex.time_get('dst')\r\n+    1.98ms     2.20ms      1.11  inference.NumericInferOps.time_multiply(<type 'numpy.int64'>)\r\n+   12.49μs    13.90μs      1.11  offset.OffestDatetimeArithmetic.time_add(<BusinessQuarterBegin: startingMonth=3>)\r\n+   35.61ms    39.54ms      1.11  io.hdf.HDF.time_write_hdf('table')\r\n+    1.63ms     1.80ms      1.11  inference.NumericInferOps.time_multiply(<type 'numpy.int32'>)\r\n+   33.16ms    36.68ms      1.11  io.pickle.Pickle.time_read_pickle\r\n+    3.75ms     4.14ms      1.10  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlite', 'datetime')\r\n+    3.73ms     4.12ms      1.10  groupby.GroupManyLabels.time_sum(1000)\r\n+   28.85ms    31.79ms      1.10  binary_ops.Ops2.time_frame_float_div\r\n+    3.12μs     3.44μs      1.10  indexing.NonNumericSeriesIndexing.time_getitem_scalar('datetime')\r\n+   37.64ms    41.43ms      1.10  binary_ops.Ops.time_frame_multi_and(True, 1)\r\n+  740.06μs   814.55μs      1.10  inference.NumericInferOps.time_add(<type 'numpy.uint32'>)\r\n+   10.96μs    12.06μs      1.10  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<MonthEnd>)\r\n-   16.45μs    14.95μs      0.91  offset.OffestDatetimeArithmetic.time_add_10(<BusinessQuarterEnd: startingMonth=3>)\r\n-    7.11μs     6.46μs      0.91  algorithms.Duplicated.time_duplicated_string(False)\r\n-  946.02ns   858.66ns      0.91  period.PeriodProperties.time_property('M', 'is_leap_year')\r\n-   73.17μs    66.41μs      0.91  period.PeriodProperties.time_property('M', 'end_time')\r\n-    6.18ms     5.61ms      0.91  io.hdf.HDFStoreDataFrame.time_query_store_table_wide\r\n-   12.82μs    11.63μs      0.91  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-   77.15ms    69.79ms      0.90  timeseries.ToDatetimeCache.time_dup_string_tzoffset_dates(False)\r\n-    2.27ms     2.05ms      0.90  timeseries.ResampleSeries.time_resample('period', '1D', 'ohlc')\r\n-   12.44μs    11.24μs      0.90  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessMonthEnd>)\r\n-   13.19μs    11.91μs      0.90  offset.OffestDatetimeArithmetic.time_add(<MonthEnd>)\r\n-    6.54ms     5.90ms      0.90  stat_ops.FrameMultiIndexOps.time_op(0, 'sem')\r\n-    7.93ms     7.15ms      0.90  multiindex_object.Values.time_datetime_level_values_copy\r\n-    3.60ms     3.24ms      0.90  indexing.Take.time_take('datetime')\r\n-    6.14μs     5.52μs      0.90  timestamp.TimestampProperties.time_dayofyear(None, None)\r\n-    8.82ms     7.92ms      0.90  stat_ops.FrameMultiIndexOps.time_op([0, 1], 'sem')\r\n-   52.36ms    46.96ms      0.90  eval.Eval.time_and('python', 'all')\r\n-   18.69μs    16.77μs      0.90  period.PeriodUnaryMethods.time_asfreq('min')\r\n-  349.61μs   313.01μs      0.90  join_merge.JoinNonUnique.time_join_non_unique_equal\r\n-  112.98μs   100.95μs      0.89  period.PeriodIndexConstructor.time_from_date_range('D')\r\n-    3.42ms     3.05ms      0.89  stat_ops.FrameOps.time_op('sum', 'float', 1, True)\r\n-   10.31μs     9.19μs      0.89  offset.OffestDatetimeArithmetic.time_apply(<BusinessQuarterEnd: startingMonth=3>)\r\n-   11.98ms    10.67ms      0.89  binary_ops.Ops.time_frame_mult(True, 'default')\r\n-   66.99μs    59.65μs      0.89  period.PeriodUnaryMethods.time_to_timestamp('min')\r\n-    4.29ms     3.82ms      0.89  offset.OnOffset.time_on_offset(<CustomBusinessMonthBegin>)\r\n-   13.75μs    12.22μs      0.89  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    7.48ms     6.62ms      0.88  timeseries.Factorize.time_factorize('Asia/Tokyo')\r\n-   18.38μs    16.22μs      0.88  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessMonthBegin>)\r\n-    7.35ms     6.47ms      0.88  groupby.Categories.time_groupby_nosort\r\n-   14.63μs    12.88μs      0.88  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<SemiMonthEnd: day_of_month=15>)\r\n-   71.71μs    63.10μs      0.88  frame_ctor.FromNDArray.time_frame_from_ndarray\r\n-  123.98μs   108.92μs      0.88  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<CustomBusinessMonthBegin>)\r\n-   18.66ms    16.38ms      0.88  period.DataFramePeriodColumn.time_setitem_period_column\r\n-    6.21μs     5.44μs      0.88  timestamp.TimestampProperties.time_dayofyear(None, 'B')\r\n-    2.37ms     2.08ms      0.88  inference.NumericInferOps.time_multiply(<type 'numpy.float64'>)\r\n-   19.52μs    16.92μs      0.87  offset.OffestDatetimeArithmetic.time_subtract(<SemiMonthEnd: day_of_month=15>)\r\n-  114.12ms    98.75ms      0.87  timedelta.ToTimedeltaErrors.time_convert('ignore')\r\n-   19.89μs    17.11μs      0.86  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessYearEnd: month=12>)\r\n-   44.45ms    38.25ms      0.86  eval.Eval.time_chained_cmp('python', 'all')\r\n-   43.95ms    37.49ms      0.85  eval.Eval.time_and('numexpr', 'all')\r\n-    3.85ms     3.27ms      0.85  timeseries.AsOf.time_asof('Series')\r\n-  143.70μs   121.82μs      0.85  offset.OffestDatetimeArithmetic.time_subtract_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    2.32ms     1.96ms      0.84  timeseries.ResampleSeries.time_resample('datetime', '5min', 'mean')\r\n-   39.21ms    32.89ms      0.84  eval.Eval.time_mult('numexpr', 'all')\r\n-    3.78ms     3.17ms      0.84  timeseries.AsOf.time_asof_nan('Series')\r\n-  392.13μs   324.74μs      0.83  inference.NumericInferOps.time_subtract(<type 'numpy.uint16'>)\r\n-   19.44μs    15.95μs      0.82  offset.OffestDatetimeArithmetic.time_add_10(<BusinessDay>)\r\n-    1.31ms     1.07ms      0.82  inference.NumericInferOps.time_multiply(<type 'numpy.uint64'>)\r\n-   18.10μs    14.79μs      0.82  offset.OffestDatetimeArithmetic.time_add_10(<QuarterEnd: startingMonth=3>)\r\n-   73.37μs    59.25μs      0.81  offset.OffestDatetimeArithmetic.time_add_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    3.19ms     2.57ms      0.81  inference.NumericInferOps.time_divide(<type 'numpy.int64'>)\r\n-    8.21ms     6.61ms      0.81  inference.NumericInferOps.time_modulo(<type 'numpy.int64'>)\r\n-    2.61ms     2.10ms      0.81  stat_ops.Correlation.time_corr('pearson')\r\n-   11.42ms     9.16ms      0.80  binary_ops.Ops.time_frame_add(True, 'default')\r\n-   88.61ms    70.73ms      0.80  join_merge.ConcatDataFrames.time_c_ordered(1, False)\r\n-    1.63ms     1.29ms      0.79  inference.NumericInferOps.time_subtract(<type 'numpy.int32'>)\r\n-    2.05ms     1.62ms      0.79  timeseries.ResampleSeries.time_resample('datetime', '1D', 'mean')\r\n-    3.03ms     2.39ms      0.79  inference.NumericInferOps.time_subtract(<type 'numpy.float64'>)\r\n-  443.50μs   345.24μs      0.78  inference.NumericInferOps.time_multiply(<type 'numpy.uint16'>)\r\n-  210.30ms   161.47ms      0.77  series_methods.SeriesConstructor.time_constructor(None)\r\n-  436.90μs   328.46μs      0.75  inference.NumericInferOps.time_subtract(<type 'numpy.int16'>)\r\n-    2.51ms     1.88ms      0.75  groupby.Datelike.time_sum('date_range')\r\n-    2.19ms     1.63ms      0.75  inference.NumericInferOps.time_add(<type 'numpy.int32'>)\r\n-    2.03ms     1.50ms      0.74  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', 'high')\r\n-    5.11ms     3.69ms      0.72  offset.OnOffset.time_on_offset(<CustomBusinessMonthEnd>)\r\n-    2.44ms     1.76ms      0.72  inference.NumericInferOps.time_subtract(<type 'numpy.int64'>)\r\n-   16.88μs    11.89μs      0.70  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   67.71ms    47.30ms      0.70  eval.Eval.time_add('python', 'all')\r\n-  400.61μs   278.24μs      0.69  inference.NumericInferOps.time_add(<type 'numpy.int8'>)\r\n-   16.71μs    11.58μs      0.69  offset.OffestDatetimeArithmetic.time_add(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    1.19ms   825.86μs      0.69  groupby.GroupByMethods.time_method('int', 'sem')\r\n-   33.27ms    22.84ms      0.69  frame_methods.Repr.time_html_repr_trunc_mi\r\n-   14.70μs     9.55μs      0.65  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    6.70ms     4.34ms      0.65  stat_ops.FrameMultiIndexOps.time_op([0, 1], 'prod')\r\n-   42.53μs    27.22μs      0.64  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    2.51ms     1.51ms      0.60  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', 'high')\r\n-   24.49ms    11.78ms      0.48  multiindex_object.GetLoc.time_med_get_loc_warm\r\n\r\n  [983d71fa] [f09bee78]\r\n+   12.83ms    24.22ms      1.89  stat_ops.FrameOps.time_op('sem', 'float', 0, False)\r\n+   66.99μs   112.40μs      1.68  groupby.GroupByMethods.time_method('float', 'size')\r\n+   17.94μs    27.86μs      1.55  offset.OffestDatetimeArithmetic.time_subtract_10(<YearEnd: month=12>)\r\n+    4.55ms     7.02ms      1.54  stat_ops.SeriesMultiIndexOps.time_op([0, 1], 'std')\r\n+  224.02μs   343.50μs      1.53  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n+  216.68μs   329.57μs      1.52  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n+  221.73μs   336.18μs      1.52  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  232.24μs   351.29μs      1.51  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+  241.34μs   360.55μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+  273.21μs   407.30μs      1.49  inference.NumericInferOps.time_add(<type 'numpy.int8'>)\r\n+  229.34μs   341.23μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<Day>)\r\n+  239.41μs   355.53μs      1.49  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  231.51μs   341.89μs      1.48  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  252.18μs   371.61μs      1.47  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  259.46μs   378.68μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+  250.12μs   364.87μs      1.46  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  242.00μs   351.54μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+  237.40μs   343.68μs      1.45  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  255.56μs   368.42μs      1.44  timeseries.DatetimeIndex.time_add_timedelta('dst')\r\n+    1.51ms     2.13ms      1.41  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', None)\r\n+  506.48μs   698.20μs      1.38  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+    1.74ms     2.35ms      1.35  inference.NumericInferOps.time_add(<type 'numpy.int64'>)\r\n+  278.50μs   375.90μs      1.35  inference.NumericInferOps.time_subtract(<type 'numpy.int8'>)\r\n+    3.69ms     4.95ms      1.34  timeseries.AsOf.time_asof_nan('Series')\r\n+  535.81μs   699.97μs      1.31  timeseries.InferFreq.time_infer_freq(None)\r\n+  537.01μs   698.67μs      1.30  timeseries.InferFreq.time_infer_freq('D')\r\n+   16.09ms    20.71ms      1.29  stat_ops.Rank.time_average_old('Series', False)\r\n+   11.62μs    14.85μs      1.28  offset.OffestDatetimeArithmetic.time_add(<BusinessYearBegin: month=1>)\r\n+    4.48μs     5.69μs      1.27  index_object.Float64IndexMethod.time_get_loc\r\n+    1.50ms     1.89ms      1.27  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', 'high')\r\n+   16.14ms    20.42ms      1.27  period.DataFramePeriodColumn.time_setitem_period_column\r\n+    1.10ms     1.39ms      1.26  stat_ops.SeriesOps.time_op('skew', 'float', False)\r\n+    2.41ms     3.02ms      1.25  inference.NumericInferOps.time_divide(<type 'numpy.int64'>)\r\n+    6.75ms     8.44ms      1.25  stat_ops.FrameOps.time_op('var', 'float', 1, True)\r\n+  922.00μs     1.15ms      1.25  offset.OffsetSeriesArithmetic.time_add_offset(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+    3.19ms     3.92ms      1.23  io.hdf.HDFStoreDataFrame.time_query_store_table\r\n+    6.41ms     7.87ms      1.23  binary_ops.Ops2.time_frame_int_div_by_zero\r\n+  412.76μs   503.39μs      1.22  offset.ApplyIndex.time_apply_index(<MonthEnd>)\r\n+  643.35μs   778.90μs      1.21  offset.OffsetSeriesArithmetic.time_add_offset(<YearEnd: month=12>)\r\n+    2.32ms     2.77ms      1.19  stat_ops.Correlation.time_corr('pearson')\r\n+  642.71μs   764.86μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<MonthEnd>)\r\n+  301.28μs   358.18μs      1.19  stat_ops.SeriesOps.time_op('sum', 'float', False)\r\n+   10.64μs    12.65μs      1.19  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessYearEnd: month=12>)\r\n+  287.51μs   341.64μs      1.19  stat_ops.SeriesOps.time_op('prod', 'float', True)\r\n+  636.61μs   755.75μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n+    1.31ms     1.56ms      1.19  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'round_trip')\r\n+  648.52μs   768.54μs      1.19  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearBegin: month=1>)\r\n+  639.97μs   757.45μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n+  655.15μs   774.92μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<Day>)\r\n+  659.58μs   778.99μs      1.18  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n+  842.18μs   994.62μs      1.18  offset.ApplyIndex.time_apply_index(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n+  852.75μs     1.00ms      1.18  timeseries.InferFreq.time_infer_freq('B')\r\n+  303.23μs   356.85μs      1.18  stat_ops.SeriesOps.time_op('mean', 'float', True)\r\n+    1.16ms     1.36ms      1.17  stat_ops.SeriesOps.time_op('sem', 'float', False)\r\n+  301.07μs   353.36μs      1.17  stat_ops.SeriesOps.time_op('sum', 'float', True)\r\n+  316.24μs   371.02μs      1.17  stat_ops.SeriesOps.time_op('prod', 'int', False)\r\n+  344.36μs   401.97μs      1.17  stat_ops.SeriesOps.time_op('sum', 'int', False)\r\n+  288.23μs   336.09μs      1.17  stat_ops.SeriesOps.time_op('prod', 'float', False)\r\n+  649.45μs   756.30μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<QuarterBegin: startingMonth=3>)\r\n+  633.31μs   736.19μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<MonthBegin>)\r\n+  635.47μs   738.07μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<YearBegin: month=1>)\r\n+  667.49μs   774.93μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterEnd: startingMonth=3>)\r\n+  663.51μs   769.56μs      1.16  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessYearEnd: month=12>)\r\n+   26.65ms    30.91ms      1.16  frame_methods.Iteration.time_itertuples\r\n+   10.58μs    12.24μs      1.16  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<YearEnd: month=12>)\r\n+   25.74μs    29.73μs      1.16  timestamp.TimestampOps.time_replace_tz('US/Eastern')\r\n+  662.46μs   764.47μs      1.15  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessQuarterBegin: startingMonth=3>)\r\n+   20.84ms    24.01ms      1.15  io.csv.ToCSV.time_frame('mixed')\r\n+  305.45μs   351.32μs      1.15  stat_ops.SeriesOps.time_op('mean', 'float', False)\r\n+  346.36μs   398.33μs      1.15  stat_ops.SeriesOps.time_op('sum', 'int', True)\r\n+    5.30ms     6.07ms      1.15  stat_ops.SeriesMultiIndexOps.time_op([0, 1], 'sem')\r\n+  414.61μs   472.53μs      1.14  stat_ops.SeriesOps.time_op('mean', 'int', True)\r\n+  318.43μs   362.90μs      1.14  stat_ops.SeriesOps.time_op('prod', 'int', True)\r\n+  100.53ms   114.08ms      1.13  io.json.ReadJSON.time_read_json('split', 'int')\r\n+   19.58ms    22.21ms      1.13  io.csv.ReadCSVComment.time_comment\r\n+   23.25μs    26.34μs      1.13  offset.OffestDatetimeArithmetic.time_subtract_10(<Day>)\r\n+  419.26μs   474.69μs      1.13  stat_ops.SeriesOps.time_op('mean', 'int', False)\r\n+   11.64μs    13.18μs      1.13  offset.OffestDatetimeArithmetic.time_add(<MonthEnd>)\r\n+    7.71ms     8.73ms      1.13  series_methods.ValueCounts.time_value_counts('object')\r\n+    2.74ms     3.09ms      1.13  period.PeriodIndexConstructor.time_from_pydatetime('D')\r\n+    6.17ms     6.95ms      1.13  inference.NumericInferOps.time_modulo(<type 'numpy.uint8'>)\r\n+  218.36μs   245.70μs      1.13  indexing.DataFrameStringIndexing.time_boolean_rows_object\r\n+    1.87ms     2.10ms      1.12  stat_ops.SeriesOps.time_op('sem', 'int', True)\r\n+    1.18ms     1.33ms      1.12  stat_ops.SeriesOps.time_op('sem', 'float', True)\r\n+   64.28ms    72.18ms      1.12  timeseries.ToDatetimeISO8601.time_iso8601_tz_spaceformat\r\n+  484.16ns   543.23ns      1.12  timestamp.TimestampProperties.time_freqstr(None, None)\r\n+  346.61ns   388.04ns      1.12  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+  332.48μs   371.80μs      1.12  inference.NumericInferOps.time_multiply(<type 'numpy.int16'>)\r\n+    2.60μs     2.91μs      1.12  timeseries.DatetimeIndex.time_get('repeated')\r\n+    1.84ms     2.05ms      1.12  stat_ops.SeriesOps.time_op('sem', 'int', False)\r\n+    2.04ms     2.28ms      1.11  timeseries.ResampleSeries.time_resample('datetime', '5min', 'mean')\r\n+  119.45ms   133.12ms      1.11  frame_methods.ToHTML.time_to_html_mixed\r\n+   11.71μs    13.04μs      1.11  offset.OffestDatetimeArithmetic.time_add(<YearBegin: month=1>)\r\n+   17.95μs    19.89μs      1.11  offset.OffestDatetimeArithmetic.time_subtract_10(<QuarterEnd: startingMonth=3>)\r\n+    6.02ms     6.66ms      1.11  timeseries.Factorize.time_factorize(None)\r\n+   21.77ms    24.09ms      1.11  timeseries.IrregularOps.time_add\r\n+  518.16μs   573.18μs      1.11  stat_ops.SeriesOps.time_op('var', 'float', False)\r\n+  844.79μs   931.70μs      1.10  index_object.Ops.time_subtract('int')\r\n+  536.59μs   591.48μs      1.10  stat_ops.SeriesOps.time_op('std', 'float', False)\r\n+  617.70μs   680.62μs      1.10  inference.NumericInferOps.time_subtract(<type 'numpy.uint32'>)\r\n+    5.72μs     6.30μs      1.10  period.Indexing.time_shallow_copy\r\n+  529.71μs   583.39μs      1.10  stat_ops.SeriesOps.time_op('std', 'float', True)\r\n+   21.48ms    23.65ms      1.10  frame_ctor.FromDictwithTimestamp.time_dict_with_timestamp_offsets(<Hour>)\r\n+   34.28ms    37.74ms      1.10  stat_ops.FrameMultiIndexOps.time_op(0, 'mad')\r\n+    13.97s     15.38s      1.10  strings.Dummies.time_get_dummies\r\n-    2.70ms     2.45ms      0.91  timeseries.ToDatetimeCache.time_dup_seconds_and_unit(False)\r\n-    7.54μs     6.83μs      0.91  timestamp.TimestampProperties.time_is_month_start(None, 'B')\r\n-    4.70ms     4.25ms      0.91  groupby.Categories.time_groupby_extra_cat_nosort\r\n-   13.12μs    11.88μs      0.91  timestamp.TimestampProperties.time_is_year_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-   10.61μs     9.60μs      0.90  timestamp.TimestampProperties.time_dayofyear(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-   43.95ms    39.70ms      0.90  eval.Eval.time_chained_cmp('python', 'all')\r\n-   16.73μs    15.08μs      0.90  offset.OffestDatetimeArithmetic.time_subtract_10(<MonthBegin>)\r\n-   13.58μs    12.20μs      0.90  timestamp.TimestampProperties.time_is_month_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-    8.66μs     7.74μs      0.89  timeseries.AsOf.time_asof_single_early('Series')\r\n-  138.25μs   123.44μs      0.89  offset.OffestDatetimeArithmetic.time_subtract_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   16.29μs    14.54μs      0.89  offset.OffestDatetimeArithmetic.time_add_10(<BusinessQuarterEnd: startingMonth=3>)\r\n-   22.46μs    20.01μs      0.89  offset.OffestDatetimeArithmetic.time_add(<Day>)\r\n-   20.80μs    18.41μs      0.89  offset.OffestDatetimeArithmetic.time_subtract_10(<SemiMonthEnd: day_of_month=15>)\r\n-   25.62ms    22.60ms      0.88  eval.Eval.time_mult('numexpr', 'all')\r\n-    7.48μs     6.60μs      0.88  timestamp.TimestampProperties.time_is_quarter_start(None, 'B')\r\n-    3.71ms     3.27ms      0.88  inference.NumericInferOps.time_modulo(<type 'numpy.int16'>)\r\n-    6.98μs     6.13μs      0.88  offset.OnOffset.time_on_offset(<BusinessMonthEnd>)\r\n-     6.22s      5.45s      0.88  join_merge.JoinIndex.time_left_outer_join_index\r\n-   12.21μs    10.69μs      0.88  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessMonthBegin>)\r\n-    2.39ms     2.09ms      0.88  inference.NumericInferOps.time_subtract(<type 'numpy.float64'>)\r\n-   12.82μs    11.22μs      0.88  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessQuarterBegin: startingMonth=3>)\r\n-    2.32ms     2.03ms      0.87  timeseries.ResampleSeries.time_resample('datetime', '1D', 'ohlc')\r\n-    2.47ms     2.16ms      0.87  stat_ops.FrameOps.time_op('prod', 'float', 1, False)\r\n-   47.86ms    41.78ms      0.87  sparse.SparseArrayConstructor.time_sparse_array(0.1, nan, <type 'object'>)\r\n-   13.04μs    11.37μs      0.87  timestamp.TimestampProperties.time_is_quarter_end(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-  114.83μs   100.13μs      0.87  offset.OffestDatetimeArithmetic.time_apply(<CustomBusinessMonthBegin>)\r\n-  319.92μs   278.77μs      0.87  inference.NumericInferOps.time_multiply(<type 'numpy.uint8'>)\r\n-    1.01μs   876.92ns      0.87  period.PeriodProperties.time_property('min', 'month')\r\n-    7.92μs     6.83μs      0.86  timestamp.TimestampProperties.time_is_month_end(None, 'B')\r\n-    4.22ms     3.62ms      0.86  stat_ops.SeriesOps.time_op('mad', 'int', True)\r\n-   55.33ms    47.24ms      0.85  eval.Eval.time_add('python', 'all')\r\n-   61.13ms    52.10ms      0.85  binary_ops.Ops.time_frame_multi_and(True, 'default')\r\n-    1.96ms     1.67ms      0.85  inference.NumericInferOps.time_divide(<type 'numpy.float64'>)\r\n-  356.00ns   302.73ns      0.85  timestamp.TimestampProperties.time_days_in_month(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-   15.31μs    12.99μs      0.85  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<BusinessDay>)\r\n-  992.13ns   831.87ns      0.84  period.PeriodProperties.time_property('M', 'hour')\r\n-   12.61ms    10.55ms      0.84  timeseries.Iteration.time_iter_preexit(<function period_range at 0x7fc0740391b8>)\r\n-  333.28μs   277.39μs      0.83  inference.NumericInferOps.time_multiply(<type 'numpy.int8'>)\r\n-    2.18ms     1.81ms      0.83  inference.NumericInferOps.time_multiply(<type 'numpy.int64'>)\r\n-   89.59ms    73.66ms      0.82  join_merge.ConcatDataFrames.time_c_ordered(1, False)\r\n-   12.63ms    10.33ms      0.82  stat_ops.Rank.time_average_old('DataFrame', False)\r\n-    3.91ms     3.18ms      0.81  timeseries.AsOf.time_asof('Series')\r\n-  332.24ns   269.41ns      0.81  timestamp.TimestampProperties.time_tz(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-   36.07ms    29.02ms      0.80  eval.Eval.time_chained_cmp('numexpr', 'all')\r\n-   13.62ms    10.92ms      0.80  frame_methods.MaskBool.time_frame_mask_floats\r\n-   48.17ms    38.61ms      0.80  eval.Eval.time_mult('python', 'all')\r\n-   13.07ms    10.44ms      0.80  stat_ops.Rank.time_average_old('DataFrame', True)\r\n-  201.23μs   159.71μs      0.79  groupby.GroupByMethods.time_method('int', 'max')\r\n-    8.24ms     6.53ms      0.79  binary_ops.Ops.time_frame_comparison(True, 'default')\r\n-   73.55μs    58.14μs      0.79  offset.OffestDatetimeArithmetic.time_add_10(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-    1.89ms     1.48ms      0.78  sparse.ArithmeticBlock.time_intersect(0)\r\n-    1.90ms     1.47ms      0.78  inference.NumericInferOps.time_subtract(<type 'numpy.float32'>)\r\n-  378.55ns   292.39ns      0.77  timestamp.TimestampProperties.time_is_quarter_start(None, None)\r\n-   39.21ms    29.41ms      0.75  eval.Eval.time_add('numexpr', 'all')\r\n-   21.54ms    15.28ms      0.71  frame_methods.ToString.time_to_string_floats\r\n-  395.38μs   280.43μs      0.71  inference.NumericInferOps.time_subtract(<type 'numpy.uint8'>)\r\n-   39.62μs    28.04μs      0.71  offset.OffestDatetimeArithmetic.time_subtract(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   16.94μs    11.86μs      0.70  offset.OffestDatetimeArithmetic.time_add(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-  292.06ns   201.08ns      0.69  timedelta.DatetimeAccessor.time_dt_accessor\r\n-   17.70μs    11.82μs      0.67  offset.OffestDatetimeArithmetic.time_apply_np_dt64(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   10.35ms     6.89ms      0.67  timeseries.Factorize.time_factorize('Asia/Tokyo')\r\n-   14.63μs     9.69μs      0.66  offset.OffestDatetimeArithmetic.time_apply(<DateOffset: kwds={'months': 2, 'days': 2}>)\r\n-   22.79ms    14.99ms      0.66  frame_methods.Apply.time_apply_ref_by_name\r\n-   12.73ms     8.17ms      0.64  binary_ops.Ops.time_frame_add(True, 'default')\r\n-    7.51μs     4.41μs      0.59  offset.OnOffset.time_on_offset(<SemiMonthBegin: day_of_month=15>)\r\n-    2.26ms     1.29ms      0.57  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '.', 'high')\r\n-    2.32ms     1.32ms      0.57  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', 'high')\r\n-   11.90ms     6.74ms      0.57  binary_ops.Ops.time_frame_mult(True, 'default')\r\n-    1.69ms   906.14μs      0.53  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(False, 'iso8601')\r\n-   10.15ms     5.41ms      0.53  io.csv.ToCSVDatetime.time_frame_date_formatting\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363836073",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19484#issuecomment-363836073",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19484",
    "id": 363836073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzgzNjA3Mw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T16:58:32Z",
    "updated_at": "2018-02-07T17:07:09Z",
    "author_association": "MEMBER",
    "body": "Going through looking for asv entries that show up repeatedly:\r\n\r\n`timeseries.DatetimeIndex.time_add_timedelta('dst')` is pretty consistently showing up around 1.4x \r\n`timeseries.AsOf.time_asof('Series')` 0.85x\r\n`timeseries.InferFreq.time_infer_freq(None)` 1.3x\r\n`timeseries.InferFreq.time_infer_freq('D')` 1.3x\r\n\r\nA whole mess of `time_add_offset(...)` in the 1.3-1.5x range\r\n\r\nstopping the search here.  This is more change than I'm comfortable with; I'll try to track down the source.  Let's stick a pin in this for now."
  }
]
