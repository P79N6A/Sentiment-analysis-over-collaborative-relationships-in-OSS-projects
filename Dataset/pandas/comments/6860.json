[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40080238",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6860#issuecomment-40080238",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6860",
    "id": 40080238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDgwMjM4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T13:24:17Z",
    "updated_at": "2014-04-10T13:25:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "IIRC we discussed this ad nauseum before. Its more 'correct' for the missing values to return `nan`, (so the resulting Series is not boolean but object), and thus requires filling before doing indexing. So we are effectively filling in `False` here (when their are nans).\n\nFurthermore, a reordered Series is really NOT equal.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40267186",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6860#issuecomment-40267186",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6860",
    "id": 40267186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjY3MTg2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-12T00:44:38Z",
    "updated_at": "2014-04-12T00:44:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @Komnomnomnom\n\nThis is from test_json/test_ujson/testSeries\n\nThis is a failing test with this PR, because before the values DO compare correctly if you didn't align the indexes. Aligning causes this to fail (as nothing matches up as 1 is Int64, the other object).\n\nThis DOES look correct though as deserializing does not guarantee that something that looks like a numerical index is actually numerical, right? (except for DatetimeIndex and we have a separate kw arg fo that).\n\nright?\n\n```\nIn [1]: s = Series([10, 20, 30, 40, 50, 60], name=\"series\", index=[6,7,8,9,10,15])\n\nIn [2]: s.sort()\n\nIn [3]: import pandas.json as ujson\n\nIn [4]: outp = Series(ujson.decode(ujson.encode(s)))\n\nIn [6]: outp.sort()\n\nIn [7]: outp\nOut[7]: \n6     10\n7     20\n8     30\n9     40\n10    50\n15    60\ndtype: int64\n\nIn [8]: outp.index\nOut[8]: Index([u'6', u'7', u'8', u'9', u'10', u'15'], dtype='object')\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40269642",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6860#issuecomment-40269642",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6860",
    "id": 40269642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjY5NjQy",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-12T02:35:57Z",
    "updated_at": "2014-04-12T02:35:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah the problem with JSON is keys _must_ be strings so when you read them back you really have no idea without doing some guesswork (which is what `read_json` does after calling `decode` / `loads`).\n\nThe lower level 'decode' method which this is testing gives you a string index back, which didn't matter during comparison before as there was no alignment happening. Your fix looks good, although it would work just as well I think to change the test Series to have a string index from the start e.g.\n\n``` python\nIn [20]: s = Series([10, 20, 30, 40, 50, 60], name=\"series\", index=[str(s) for s in [6,7,8,9,10,15]])\nIn [26]: Series(ujson.decode(ujson.encode(s))).index\nOut[26]: Index([u'10', u'15', u'6', u'7', u'8', u'9'], dtype='object')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40275793",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6860#issuecomment-40275793",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6860",
    "id": 40275793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjc1Nzkz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-12T09:14:27Z",
    "updated_at": "2014-04-12T09:14:27Z",
    "author_association": "MEMBER",
    "body": "@jreback Just wondering, but it would also be an option to only let `Series.eq` (and the other methods) do this flexible comparison with alignment, and let the `==` non-flexible. \n\nBecause with this change you have `df == df` being non-flexible (not aligning) and demanding identical indices, while `s == s` is flexible/does align. Which is also a confusing inconsistency? Or is there a good reason for that? \nBut it is also confusing that `s + s` does align and `s == s` does not (but the same holds for a dataframe, and I would rather keep consistency within one operator).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/40279729",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6860#issuecomment-40279729",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6860",
    "id": 40279729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjc5NzI5",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-12T12:58:52Z",
    "updated_at": "2014-04-12T12:58:52Z",
    "author_association": "MEMBER",
    "body": "+1 on @jorisvandenbossche's suggestion: named methods flexible, corresponding syntax is not. I personally find the unaligned error a useful sanity check. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/41515106",
    "html_url": "https://github.com/pandas-dev/pandas/pull/6860#issuecomment-41515106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6860",
    "id": 41515106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTE1MTA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-28T00:45:17Z",
    "updated_at": "2014-04-28T00:45:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "going to bump; can work on in next version\n"
  }
]
