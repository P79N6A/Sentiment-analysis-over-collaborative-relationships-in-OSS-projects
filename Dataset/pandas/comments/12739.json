[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203177679",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203177679",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203177679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzE3NzY3OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T01:05:26Z",
    "updated_at": "2016-03-30T01:05:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "could you add some tests specifically for this\n\nhow standard is the dunder json tag? other libraries use? can u give some examples?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203618754",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203618754",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203618754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzYxODc1NA==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T20:26:57Z",
    "updated_at": "2016-03-30T20:26:57Z",
    "author_association": "NONE",
    "body": "Added some tests. I don't think `__json__` is used anywhere except ujson.\nI am building some restful API and using pandas dataframe heavily. So I would like to skip python loops as much as possible.\nPrimary use cases for me:\n- put raw json dump of another dataframe to DataFrame, so that it is not double encoded.\n- create nested json from df skipping python looping.\n- different parts of nested structure might require different decimal places & datetime formatting.\n\nI can write a small section in io.html#json with example of how I am going to use it in rest api, like:\n\n```\ndf_long = pd.DataFrame(... ,index = [1,1,1,2,2,2])\ndf_result = pd.DataFrame(columns = [\"result\", \"rest_api_code\"], index=[1,2,3])\n\ndf_result[\"rest_api_code\"] = \"not_found\"\ndf_result.loc[df_long.index.unique(),\"rest_api_code\"] = \"ok\"\n\nfor idx, grp in df_long.groupby(level=0):\n    df_result.loc[idx, \"result\"] = grp.to_json(orient='records')\n\ndf_result.to_json(orient='records')\n```\n\nI am actually using multiple levels of such dataframe json nesting.\n\nDo you think its worth noting in docs? It's not like typical use case and not related to core functionality.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203677830",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203677830",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203677830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzY3NzgzMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T23:14:39Z",
    "updated_at": "2016-03-30T23:14:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TurnaevEvgeny I think what people want is an easy way to do this (then we would expose `pd.to_json(...)` as a top-level general serializingfunction\n\n```\nIn [2]: pd.io.json.to_json(None, df)\nOut[2]: '{\"A\":{\"0\":1,\"1\":2,\"2\":3},\"B\":{\"0\":\"a\",\"1\":\"b\",\"2\":\"c\"}}'\n\nIn [3]: pd.io.json.to_json(None, {'foo' : df})\nNotImplementedError: 'obj' should be a Series or a DataFrame\n```\n\nIIRC this was a very easy fix \ncc @cpcloud \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203677977",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203677977",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203677977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzY3Nzk3Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T23:15:33Z",
    "updated_at": "2016-03-30T23:15:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "xref to #9166 \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203691704",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203691704",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203691704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzY5MTcwNA==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T00:10:01Z",
    "updated_at": "2016-03-31T00:10:01Z",
    "author_association": "NONE",
    "body": "@jreback Sorry, I didn't get why #9166 is referenced, seems irrelevant. I didn't completely get your reply that people want to `pd.to_json()`, although that aligns with my point that `__json__` has nothing to do with dataframe serialization in general. Its just a way to allow to store pre-dumped json in df and then output without double/triple encoding. Well and ujson compatibility also. So whats the status of this pull? I can add docs if needed.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203693420",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203693420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203693420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzY5MzQyMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T00:21:19Z",
    "updated_at": "2016-03-31T00:21:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "serializaing nested structures that include pandas objects can almost be done now \n\nI would rather fix to_json than add a dunder method\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203700419",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203700419",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203700419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzcwMDQxOQ==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T01:00:13Z",
    "updated_at": "2016-03-31T01:00:13Z",
    "author_association": "NONE",
    "body": "I would argue that `__json__`  helps in different scenarios than serializing df with nested structures.\nWith `__json__` one can store json dumps in arbitrary format in DataFrame `df.loc[...] = ujson_as_is(df.to_json(orient='records'))` and have different orientation, float formatting, and just store anything even not another dataframe dump, but arbitrary json dump. It also helps to store instances of objects that knows how to dump themselfs and have a cached dump representation in hands.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203700937",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203700937",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203700937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzcwMDkzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T01:04:29Z",
    "updated_at": "2016-03-31T01:04:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "can u post a short compelling example (with output) \nas if u were writing docs \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/203724770",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-203724770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 203724770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzcyNDc3MA==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T02:42:26Z",
    "updated_at": "2016-03-31T02:42:26Z",
    "author_association": "NONE",
    "body": "```\nIn [16]: class ujson_as_is(object):\n   ....:     def __init__(self, value):\n   ....:         self.value = value\n   ....:     def __json__(self):\n   ....:         return self.value\n   ....:     __repr__ = __json__\n   ....:\n\nIn [17]: df_company_info = pd.DataFrame([{'name': 'Google', 'est': '1998-09-04'}, {'name': 'Microsoft', 'est': '1975-04-04'}, {'name': 'Apple', 'est': '1976-04-01'}],index = ['goog', 'msft', 'aapl'])\n\nIn [18]: df_company_info\nOut[18]:\n             est       name\ngoog  1998-09-04     Google\nmsft  1975-04-04  Microsoft\naapl  1976-04-01      Apple\n\nIn [19]: names = np.random.choice(['aapl', 'goog', 'msft'], 10)\n\nIn [20]: dates = pd.date_range('1/1/2000', periods=10, freq='D')\n\nIn [21]: df = pd.DataFrame({'date': dates, 'price': np.random.random(10)}, index = names)\n\nIn [22]: df\nOut[22]:\n           date     price\nmsft 2000-01-01  0.280379\naapl 2000-01-02  0.120819\naapl 2000-01-03  0.471827\naapl 2000-01-04  0.789162\naapl 2000-01-05  0.649434\nmsft 2000-01-06  0.858836\ngoog 2000-01-07  0.440876\naapl 2000-01-08  0.523965\naapl 2000-01-09  0.860230\nmsft 2000-01-10  0.215722\n\nIn [23]: for company,grp in df.groupby(level=0):\n   ....:     df_company_info.loc[company, \"stock_history\"] = ujson_as_is(grp.to_json(orient='records', double_precision = 3, date_format = 'iso'))\n   ....:\n\nIn [24]: df_company_info\nOut[24]:\n             est       name                                      stock_history\ngoog  1998-09-04     Google  [{\"date\":\"2000-01-07T00:00:00.000Z\",\"price\":0....\nmsft  1975-04-04  Microsoft  [{\"date\":\"2000-01-01T00:00:00.000Z\",\"price\":0....\naapl  1976-04-01      Apple  [{\"date\":\"2000-01-02T00:00:00.000Z\",\"price\":0....\n\nIn [25]: df_company_info.to_json(orient='records')\nOut[25]: '[{\"est\":\"1998-09-04\",\"name\":\"Google\",\"stock_history\":[{\"date\":\"2000-01-07T00:00:00.000Z\",\"price\":0.441}]},{\"est\":\"1975-04-04\",\"name\":\"Microsoft\",\"stock_history\":[{\"date\":\"2000-01-01T00:00:00.000Z\",\"price\":0.28},{\"date\":\"2000-01-06T00:00:00.000Z\",\"price\":0.859},{\"date\":\"2000-01-10T00:00:00.000Z\",\"price\":0.216}]},{\"est\":\"1976-04-01\",\"name\":\"Apple\",\"stock_history\":[{\"date\":\"2000-01-02T00:00:00.000Z\",\"price\":0.121},{\"date\":\"2000-01-03T00:00:00.000Z\",\"price\":0.472},{\"date\":\"2000-01-04T00:00:00.000Z\",\"price\":0.789},{\"date\":\"2000-01-05T00:00:00.000Z\",\"price\":0.649},{\"date\":\"2000-01-08T00:00:00.000Z\",\"price\":0.524},{\"date\":\"2000-01-09T00:00:00.000Z\",\"price\":0.86}]}]'\n\nIn [26]:\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/204171254",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-204171254",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 204171254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDE3MTI1NA==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T23:21:58Z",
    "updated_at": "2016-03-31T23:21:58Z",
    "author_association": "NONE",
    "body": "Is there anything I can help further?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/204172632",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-204172632",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 204172632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDE3MjYzMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T23:24:53Z",
    "updated_at": "2016-03-31T23:24:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am still confused what problem does this solve\nin the example above, why wouldn't you simply df.to_json(...)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/204175671",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-204175671",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 204175671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDE3NTY3MQ==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T23:37:46Z",
    "updated_at": "2016-03-31T23:44:19Z",
    "author_association": "NONE",
    "body": "In the example above if I do the same without `__json__` support in pandas the output will be\n\n```\nOut[194]: '[{\"est\":\"1998-09-04\",\"name\":\"Google\",\"stock_history\":{\"value\":\"[{\\\\\"date\\\\\":\\\\\"2000-01-03T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.294},{\\\\\"date\\\\\":\\\\\"2000-01-06T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.472}]\"}},{\"est\":\"1975-04-04\",\"name\":\"Microsoft\",\"stock_history\":{\"value\":\"[{\\\\\"date\\\\\":\\\\\"2000-01-01T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.489},{\\\\\"date\\\\\":\\\\\"2000-01-04T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.739},{\\\\\"date\\\\\":\\\\\"2000-01-08T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.057}]\"}},{\"est\":\"1976-04-01\",\"name\":\"Microsoft\",\"stock_history\":{\"value\":\"[{\\\\\"date\\\\\":\\\\\"2000-01-02T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.718},{\\\\\"date\\\\\":\\\\\"2000-01-05T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.074},{\\\\\"date\\\\\":\\\\\"2000-01-07T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.517},{\\\\\"date\\\\\":\\\\\"2000-01-09T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.902},{\\\\\"date\\\\\":\\\\\"2000-01-10T00:00:00.000Z\\\\\",\\\\\"price\\\\\":0.245}]\"}}]'\n```\n\nif I decode this back:\n\n```\ntmp[0]['stock_history']\nOut[10]: {u'value': u'[{\"date\":\"2000-01-03T00:00:00.000Z\",\"price\":0.294},{\"date\":\"2000-01-06T00:00:00.000Z\",\"price\":0.472}]'}\n```\n\nstock_history columns becomes double json encoded , like `json.dump(json.dump({'foo': 'bar'}))`. It also gets put into aritificial {'value': sales_history_str} dict that didn't exist in df.\nto_dict() partially solves this in the example above, but to_dict() doesn't help with different representation formats. Also I bet to_dict() will be slower because of python object creation while to_json() can convert pretty wide frames to string skipping intermediate python object creation. Besides with `__json__` its just more handy to build final json dump gradually. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/204227710",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-204227710",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 204227710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDIyNzcxMA==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T03:17:41Z",
    "updated_at": "2016-04-01T03:17:41Z",
    "author_association": "NONE",
    "body": "Does that explains the problem & motivation?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/204389314",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-204389314",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 204389314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDM4OTMxNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T12:58:09Z",
    "updated_at": "2016-04-01T12:58:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "I still don't see any utility in doing that. You can simply construct the frame as you like, then serialize the entire thing.\n\n```\nIn [21]: df_company_info['history'] = df.groupby(level=0).apply(lambda x: x.to_dict())\n\nIn [22]: df_company_info\nOut[22]: \n             est       name                                            history\ngoog  1998-09-04     Google  {u'date': {u'goog': 2000-01-10 00:00:00}, u'pr...\nmsft  1975-04-04  Microsoft  {u'date': {u'msft': 2000-01-08 00:00:00}, u'pr...\naapl  1976-04-01      Apple  {u'date': {u'aapl': 2000-01-09 00:00:00}, u'pr...\n\nIn [23]: df_company_info.to_json(orient='records')\nOut[23]: '[{\"est\":\"1998-09-04\",\"name\":\"Google\",\"history\":{\"date\":{\"goog\":947462400000},\"price\":{\"goog\":0.4752710922}}},{\"est\":\"1975-04-04\",\"name\":\"Microsoft\",\"history\":{\"date\":{\"msft\":947289600000},\"price\":{\"msft\":0.1898955714}}},{\"est\":\"1976-04-01\",\"name\":\"Apple\",\"history\":{\"date\":{\"aapl\":947376000000},\"price\":{\"aapl\":0.7407572394}}}]'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/204480334",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-204480334",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 204480334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDQ4MDMzNA==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T17:30:38Z",
    "updated_at": "2016-04-01T17:30:38Z",
    "author_association": "NONE",
    "body": "See in your example `\"date\":{\"goog\":947462400000}`, thats my first point - different formatting at the different levels.\nMy second point is performance:\n\n```\nIn [26]: %timeit -n 100 df.groupby(level=0).apply(lambda x: x.to_dict())\n100 loops, best of 3: 21.8 ms per loop\n\nIn [27]: %timeit -n 100 df.groupby(level=0).apply(lambda x: ujson_as_is(x.to_json(orient='records')))\n100 loops, best of 3: 8.21 ms per loop\n```\n\nNot a big deal, but not a big df also, and no futher to_dict() higher in call stack.\nIn the above examples its just one level nesting, but for the api I am building I am going to have: `{'a': {'b': [ {'c': {'d': df_slice_dump_here}, 'e': other_df_slice_dump_here } ] }, 'z':  other_dump_here }`. So suppose I have a function that prepares `'e': other_df_slice_dump_here` part of output, what I really want to do in that function is to finalize work as intermediate json. If I go to_dict() in that function - I am going to have troubles with formatting later up in stack and also that will impact performance. Also I want to be able to put arbitrary json dumps in that function that prepares `'e': other_df_slice_dump_here` not only other dataframe. See its like gradually building final json bottom up. I think that was exactly the intention why ujson added `__json__`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/204524397",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-204524397",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 204524397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDUyNDM5Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T19:00:53Z",
    "updated_at": "2016-04-01T19:00:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "why are you putting arbitrary json in dataframes? this is not useful or performant at all \n\nyou are just adding an artifice which doesn't enable much of anything, and will cause user confusion\n\nI still don't see how his is actually useful - where are you exporting this json to? and what are you doing with it?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/204541603",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-204541603",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 204541603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDU0MTYwMw==",
    "user": {
      "login": "TurnaevEvgeny",
      "id": 1086932,
      "node_id": "MDQ6VXNlcjEwODY5MzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TurnaevEvgeny",
      "html_url": "https://github.com/TurnaevEvgeny",
      "followers_url": "https://api.github.com/users/TurnaevEvgeny/followers",
      "following_url": "https://api.github.com/users/TurnaevEvgeny/following{/other_user}",
      "gists_url": "https://api.github.com/users/TurnaevEvgeny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TurnaevEvgeny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TurnaevEvgeny/subscriptions",
      "organizations_url": "https://api.github.com/users/TurnaevEvgeny/orgs",
      "repos_url": "https://api.github.com/users/TurnaevEvgeny/repos",
      "events_url": "https://api.github.com/users/TurnaevEvgeny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TurnaevEvgeny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T19:50:51Z",
    "updated_at": "2016-04-01T19:50:51Z",
    "author_association": "NONE",
    "body": "Ok, let me start from beginning. I am building REST api (flask application) that supposed to return json. Internally I am working with dataframes fetched from different sources or cached in memory. During processing api calls I often have 2-3 dataframe that somehow related (often not a straigthforward merge way). The options for me to output final json: 1) Loop though those 2-3 dataframes and construct giant dict and then json.dump it. 2) Use pandas dataframes, df.to_json() and build json gradually.\nThe first option is a mix of .apply(), to_dict(), .iterrows(), which I would like to skip for performance and readability reasons.\nI understand this all is not a pandas problem at all, and this was my original doubt that this functionality should not be put into docs because it is specific of json dumping. But I've found ujson `__json__` implementaiton and idea. The code is much simpler, smoother, and more performant with the second approach.\nI understand your concern of bringing unneeded complexity into codebase, on the other hand from my perspective this is just ujson compliance that potentially opens new way to prepare json output with pandas dataframes for the cases like rest api.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/207804665",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-207804665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 207804665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzgwNDY2NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-09T15:07:09Z",
    "updated_at": "2016-04-09T15:07:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @Komnomnomnom any thoughts here\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/208882164",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-208882164",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 208882164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODg4MjE2NA==",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T12:35:46Z",
    "updated_at": "2016-04-12T12:35:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd be more in favour of supporting a default handler which can return encoded / raw json, similiar to the `cls` arg in the built-in `json.dumps` e.g. something like\n\n``` python\ndf.to_json(default_enc=lambda obj: json.dumps(obj))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/208893448",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-208893448",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 208893448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODg5MzQ0OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T13:01:31Z",
    "updated_at": "2016-04-12T13:01:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Komnomnomnom isn't that what `default_handler` is doing?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/208904867",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-208904867",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 208904867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODkwNDg2Nw==",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T13:29:03Z",
    "updated_at": "2016-04-12T13:29:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "No it converts an unsupported object into one that _can_ be JSON serialised i.e. by converting to a `dict` or a `string`. \n\n`default_enc` would be expected to return valid JSON.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/208905727",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-208905727",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 208905727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODkwNTcyNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T13:30:42Z",
    "updated_at": "2016-04-12T13:30:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "why 2 different ways? couldn't `default_handler` just return valid JSON? (and if its not it would be an error)?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/214761708",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-214761708",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 214761708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDc2MTcwOA==",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-26T14:22:46Z",
    "updated_at": "2016-04-26T14:22:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "If `default_handler` returned JSON it would just be treated as a regular string and thus end up double encoded. `default_handler` must convert the object into a different JSON-serializable object i.e. `MyClass` -> `dict representation of MyClass`.\n\nThe idea is that \n- `default_handler` allows you to easily serialize objects that are not natively supported by the JSON serializer, but you must return a new, supported object to the encoder and it will encode the new object using the params you invoked it with (`iso dates`, `fast numpy` and so on).\n- `default_enc` would be required to return valid JSON and would allow allow you to override the encoder for a subset of your data. So you could change encoder params or use a different encoder entirely, along with supporting the use case above and avoiding double encoding. The caveat is it would only get invoked for objects that the regular encoder doesn't support.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/219183894",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12739#issuecomment-219183894",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12739",
    "id": 219183894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTE4Mzg5NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T23:37:18Z",
    "updated_at": "2016-05-13T23:37:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing as won't fix.\n\n`default_handler` covers these cases\n"
  }
]
