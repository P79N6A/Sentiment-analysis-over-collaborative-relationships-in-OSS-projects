[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/361563436",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-361563436",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 361563436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTU2MzQzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T11:20:35Z",
    "updated_at": "2018-01-30T11:20:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "these don't leak. the 'leaky_af' continually creates and destroys objects. When a new column is added to the frame, the original index is reindexed, which causes a copy, while in the first one it is simply set with the added index. Since python doesn't release the actual memory, your usage grows. \r\n\r\nsubsequent indices are equal to the first so no reindexing happens.\r\n\r\nxref https://github.com/pandas-dev/pandas/issues/6046"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/361568849",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-361568849",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 361568849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTU2ODg0OQ==",
    "user": {
      "login": "ace-e4s",
      "id": 18338679,
      "node_id": "MDQ6VXNlcjE4MzM4Njc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18338679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ace-e4s",
      "html_url": "https://github.com/ace-e4s",
      "followers_url": "https://api.github.com/users/ace-e4s/followers",
      "following_url": "https://api.github.com/users/ace-e4s/following{/other_user}",
      "gists_url": "https://api.github.com/users/ace-e4s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ace-e4s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ace-e4s/subscriptions",
      "organizations_url": "https://api.github.com/users/ace-e4s/orgs",
      "repos_url": "https://api.github.com/users/ace-e4s/repos",
      "events_url": "https://api.github.com/users/ace-e4s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ace-e4s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T11:44:05Z",
    "updated_at": "2018-01-30T11:46:31Z",
    "author_association": "NONE",
    "body": "@jreback maybe I'm missing something here but, note that the leaky_af function is ran in a loop inside the main function; for every increment in the loop, leaky_af is ran only once (which may trigger copying, and that's fine).  However, when data_df is re-created in the next increment, all references to the old one are gone, so Python should release them from the memory. Instead, you see a steady increase in memory usage. \r\n\r\nThe two plots show main ran with tight() and leaky_af(). The only difference between them is the initial empty dataframe."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362607570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362607570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362607570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjYwNzU3MA==",
    "user": {
      "login": "ace-e4s",
      "id": 18338679,
      "node_id": "MDQ6VXNlcjE4MzM4Njc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18338679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ace-e4s",
      "html_url": "https://github.com/ace-e4s",
      "followers_url": "https://api.github.com/users/ace-e4s/followers",
      "following_url": "https://api.github.com/users/ace-e4s/following{/other_user}",
      "gists_url": "https://api.github.com/users/ace-e4s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ace-e4s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ace-e4s/subscriptions",
      "organizations_url": "https://api.github.com/users/ace-e4s/orgs",
      "repos_url": "https://api.github.com/users/ace-e4s/repos",
      "events_url": "https://api.github.com/users/ace-e4s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ace-e4s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T14:53:13Z",
    "updated_at": "2018-02-02T14:53:13Z",
    "author_association": "NONE",
    "body": "@jreback I don't want to be a nuisance, but I urge you to take a second look at this case. I have altered the sample  code and description to clarify the issue. Furthermore, the i did exactly what you suggest in xref #6046, and ran the code inside a loop. The memory used increases steadily for every increment.\r\n\r\nAgain, thank you for your time and effort! Love Pandas, and just want to contribute. Cheers :)  "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362641481",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362641481",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362641481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY0MTQ4MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T16:53:57Z",
    "updated_at": "2018-02-02T16:53:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ace-e4s can you try on Py3? Here's my plot w/ your leaky version.\r\n\r\n![figure_1](https://user-images.githubusercontent.com/1312546/35744949-5664dda0-0807-11e8-8ad3-62fabd9fd3f4.png)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362646026",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362646026",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362646026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY0NjAyNg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T17:12:02Z",
    "updated_at": "2018-02-02T17:12:02Z",
    "author_association": "MEMBER",
    "body": "I did that as well a few days ago and got a similar plot as @TomAugspurger (forgot to comment about it).\r\n\r\nBut that said, there is something strange in those plots about the timings. I don't see why the 'leaky_af' version would be so *much* slower."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362648394",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362648394",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362648394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY0ODM5NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T17:21:21Z",
    "updated_at": "2018-02-02T17:21:21Z",
    "author_association": "MEMBER",
    "body": "OK, apparently adding a column to empty frame with already the correct type of index is much faster:\r\n\r\n```\r\nIn [54]: %%timeit\r\n    ...: data_df = pd.DataFrame(index=pd.DatetimeIndex([]))\r\n    ...: data_df['channel'] = data\r\n    ...: \r\n1.93 ms ± 122 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\r\n\r\nIn [55]: %%timeit\r\n    ...: data_df = pd.DataFrame()\r\n    ...: data_df['channel'] = data\r\n    ...: \r\n110 ms ± 1.9 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\r\n```\r\n\r\nand since you repeat that many times in the memory profiler, that's a reason for the one taking a lot more time (I find it still strange that it is such a big difference though)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362649091",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362649091",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362649091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY0OTA5MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T17:24:05Z",
    "updated_at": "2018-02-02T17:24:05Z",
    "author_association": "MEMBER",
    "body": "> @jreback: When a new column is added to the frame, the original index is reindexed, which causes a copy\r\n\r\nThat doesn't seem to be the case though (at least not on python 3):\r\n\r\n```\r\nIn [65]: data = pd.Series(data=np.random.random(50000), index=pd.DatetimeIndex(np.arange(0, 50000)))\r\n\r\nIn [66]: data_df = pd.DataFrame()\r\n\r\nIn [67]: data_df['channel'] = data\r\n\r\nIn [68]: data.index.base is data_df.index.base\r\nOut[68]: True\r\n\r\nIn [71]: data.index.base[0] = 5\r\n\r\nIn [72]: data_df.index[:5]\r\nOut[72]: \r\nDatetimeIndex(['1970-01-01 00:00:00.000000005',\r\n               '1970-01-01 00:00:00.000000001',\r\n               '1970-01-01 00:00:00.000000002',\r\n               '1970-01-01 00:00:00.000000003',\r\n               '1970-01-01 00:00:00.000000004'],\r\n              dtype='datetime64[ns]', freq=None)\r\n```\r\n\r\n@ace-e4s can you try to run the same in python 2 to see if you see any difference?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362720381",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362720381",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362720381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjcyMDM4MQ==",
    "user": {
      "login": "ace-e4s",
      "id": 18338679,
      "node_id": "MDQ6VXNlcjE4MzM4Njc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18338679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ace-e4s",
      "html_url": "https://github.com/ace-e4s",
      "followers_url": "https://api.github.com/users/ace-e4s/followers",
      "following_url": "https://api.github.com/users/ace-e4s/following{/other_user}",
      "gists_url": "https://api.github.com/users/ace-e4s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ace-e4s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ace-e4s/subscriptions",
      "organizations_url": "https://api.github.com/users/ace-e4s/orgs",
      "repos_url": "https://api.github.com/users/ace-e4s/repos",
      "events_url": "https://api.github.com/users/ace-e4s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ace-e4s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T22:01:19Z",
    "updated_at": "2018-02-02T22:01:19Z",
    "author_association": "NONE",
    "body": "@TomAugspurger I tried to run it with Python 3.6 and got similar results as you; memory usage is comparable between leaky_af and tight, but tight runs much faster.\r\n\r\nMay this be a case of circular referencing somewhere, and Python 2 garbage collector is failing to collect? (If I'm not wrong, Python 3.4 improved significantly in that respect.)\r\n\r\n#### Python 3.6 leaky_af()\r\n![pandas leaky_af - py36](https://user-images.githubusercontent.com/18338679/35756803-ebec0c4e-086c-11e8-918f-63d9c8c7e930.png)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362721127",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362721127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362721127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjcyMTEyNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T22:04:43Z",
    "updated_at": "2018-02-02T22:04:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "That seems most likely.\n\nSince it's python 2 only, I suspect we would gladly take a patch fixing the\nbehavior you're seeing, but I personally don't have any plans to look into\nit :)\n\nOn Fri, Feb 2, 2018 at 10:01 PM, ace-e4s <notifications@github.com> wrote:\n\n> @TomAugspurger <https://github.com/tomaugspurger> I tried to run it with\n> Python 3.6 and got similar results as you; memory usage is comparable\n> between leaky_af and tight, but tight runs much faster.\n>\n> May this be a case of circular referencing somewhere, and Python 2 garbage\n> collector is failing to collect? (If I'm not wrong, Python 3.4 improved\n> significantly in that respect.)\n> Python 3.6 leaky_af()\n>\n> [image: pandas leaky_af - py36]\n> <https://user-images.githubusercontent.com/18338679/35756803-ebec0c4e-086c-11e8-918f-63d9c8c7e930.png>\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362720381>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIuFGVQ3rUqvB20csaD21rJ5IjaZZks5tQ4W0gaJpZM4RyGGZ>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362722360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362722360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362722360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjcyMjM2MA==",
    "user": {
      "login": "ace-e4s",
      "id": 18338679,
      "node_id": "MDQ6VXNlcjE4MzM4Njc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18338679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ace-e4s",
      "html_url": "https://github.com/ace-e4s",
      "followers_url": "https://api.github.com/users/ace-e4s/followers",
      "following_url": "https://api.github.com/users/ace-e4s/following{/other_user}",
      "gists_url": "https://api.github.com/users/ace-e4s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ace-e4s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ace-e4s/subscriptions",
      "organizations_url": "https://api.github.com/users/ace-e4s/orgs",
      "repos_url": "https://api.github.com/users/ace-e4s/repos",
      "events_url": "https://api.github.com/users/ace-e4s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ace-e4s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T22:09:52Z",
    "updated_at": "2018-02-02T22:09:52Z",
    "author_association": "NONE",
    "body": "@jorisvandenbossche , yes same behavior in python 2.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362724070",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362724070",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362724070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjcyNDA3MA==",
    "user": {
      "login": "ace-e4s",
      "id": 18338679,
      "node_id": "MDQ6VXNlcjE4MzM4Njc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18338679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ace-e4s",
      "html_url": "https://github.com/ace-e4s",
      "followers_url": "https://api.github.com/users/ace-e4s/followers",
      "following_url": "https://api.github.com/users/ace-e4s/following{/other_user}",
      "gists_url": "https://api.github.com/users/ace-e4s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ace-e4s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ace-e4s/subscriptions",
      "organizations_url": "https://api.github.com/users/ace-e4s/orgs",
      "repos_url": "https://api.github.com/users/ace-e4s/repos",
      "events_url": "https://api.github.com/users/ace-e4s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ace-e4s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T22:16:35Z",
    "updated_at": "2018-02-02T22:16:52Z",
    "author_association": "NONE",
    "body": "Although the memory issue may be limited to Python 2, the poor performance may be a symptom of the same underlying issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/362800624",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19459#issuecomment-362800624",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19459",
    "id": 362800624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjgwMDYyNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T11:52:28Z",
    "updated_at": "2018-02-03T11:52:28Z",
    "author_association": "MEMBER",
    "body": "Likewise as @TomAugspurger but regarding the poor performance which also affects python 3: we gladly take a patch to solve it, but it isn't the most pressing issue as this usage pattern is not a typical way to do things if you care about performance."
  }
]
