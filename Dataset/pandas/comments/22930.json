[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426071046",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22930#issuecomment-426071046",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22930",
    "id": 426071046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjA3MTA0Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T21:34:26Z",
    "updated_at": "2018-10-01T21:34:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "So in https://github.com/pandas-dev/pandas/blob/5ce06b5bdb8c44043c6463bf8ce3da758800a189/pandas/core/arrays/base.py#L777-L782 we catch a TypeError. I suppose that's necessary, because the ops we're implementing may not be an algebra (the array may not be able to hold the return type).\r\n\r\n@Dr-Irv unreatalted to this issue, we allocate an `len(self)` list in https://github.com/pandas-dev/pandas/blob/5ce06b5bdb8c44043c6463bf8ce3da758800a189/pandas/core/arrays/base.py#L768. Could that just be `itertools.cycle(param)`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426071401",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22930#issuecomment-426071401",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22930",
    "id": 426071401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjA3MTQwMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T21:35:52Z",
    "updated_at": "2018-10-01T21:35:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are there any other operators that return a tuple? `rdivmod` I suppose."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426447949",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22930#issuecomment-426447949",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22930",
    "id": 426447949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjQ0Nzk0OQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-02T22:12:01Z",
    "updated_at": "2018-10-02T22:12:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger Been on vacation, so just seeing this.\r\n\r\nIn the first one, the idea is that we are allowing the result to be a *different* EA type, which may not be the EA type of the caller.\r\n\r\nWith respect to using `itertools.cycle`, I think that would work.  I was unaware that existed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426450065",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22930#issuecomment-426450065",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22930",
    "id": 426450065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjQ1MDA2NQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-02T22:20:59Z",
    "updated_at": "2018-10-02T22:20:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, with respect to the `divmod` issue reported here, in `pandas/tests/extension/decimal/test_decimal.py`, I explicitly skipped the test for divmod because things like `divmod(Decimal(5.2), Decimal(3.3))` are not necessarily well defined. (or at least that is what I remember concluding way back when)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/426864638",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22930#issuecomment-426864638",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22930",
    "id": 426864638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjg2NDYzOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T02:26:51Z",
    "updated_at": "2018-10-04T02:26:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks. divmod between two decimals seems to work fine, so we'll re-enable that test with the implementation.\r\n\r\n> In the first one, the idea is that we are allowing the result to be a different EA type, which may not be the EA type of the caller.\r\n\r\nI'm not sure I follow. The expected result of a divmod(array, Any) should be a tuple of arrays\r\n\r\n```python\r\nIn [15]: divmod(np.array([1, 2, 3]), 2)\r\nOut[15]: (array([0, 1, 1]), array([1, 0, 1]))\r\n```\r\n\r\nright now we're returning an array (list) of tuples."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427019334",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22930#issuecomment-427019334",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22930",
    "id": 427019334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzAxOTMzNA==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T13:31:00Z",
    "updated_at": "2018-10-04T13:31:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "In terms of `divmod` between two decimals working fine, I think the issue is how the \"infinite\" precision of `Decimal` should handle it.  Here's an example:\r\n```\r\nIn [1]: from decimal import Decimal\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [3]: r=np.random.randn(2)\r\n\r\nIn [4]: r\r\nOut[4]: array([-1.42964197, -0.4781252 ])\r\n\r\nIn [5]: divmod(r[0], r[1])\r\nOut[5]: (2.0, -0.47339156548270145)\r\n\r\nIn [6]: divmod(Decimal(r[0]), Decimal(r[1]))\r\nOut[6]: (Decimal('2'), Decimal('-0.4733915654827014485306335700'))\r\n```\r\n\r\nAnd then there is this example:\r\n```\r\nIn [8]: divmod(Decimal(1.0), Decimal(1.0)/Decimal(3.0))\r\nOut[8]: (Decimal('3'), Decimal('1E-28'))\r\n```\r\n\r\nI think the result of that should be `(Decimal('3'), Decimal('0.0'))`\r\n\r\nSo it is not clear what the expected result should be when the input values are \"infinite\" decimal numbers.  But maybe the test will work now if enabled.\r\n\r\nWhen I wrote:\r\n\r\n> In the first one, the idea is that we are allowing the result to be a different EA type, which may not be the EA type of the caller.\r\n\r\nI meant the following.  Suppose the EA holds elements of scalar type A.  Suppose that the result of the binop for the two scalars of type A is of scalar type B.  Then the someone might have a different EA type holding scalars of type B.  With the current try/except logic, this case is then covered.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427021895",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22930#issuecomment-427021895",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22930",
    "id": 427021895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzAyMTg5NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T13:38:19Z",
    "updated_at": "2018-10-04T13:38:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think the result of that should be (Decimal('3'), Decimal('0.0'))\r\n\r\nYou think that's a bug in Python?\r\n\r\nRegardless, the array version should be matching what the scalar version does.\r\n\r\n> Then the someone might have a different EA type holding scalars of type B. With the current try/except logic, this case is then covered\r\n\r\nI don't see that. On master, we return a list if the `self._from_sequence` fails, not a different extension array."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427042804",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22930#issuecomment-427042804",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22930",
    "id": 427042804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzA0MjgwNA==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T14:35:06Z",
    "updated_at": "2018-10-04T14:35:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure if it is a bug in Python, but it makes writing a test for `divmod` in `DecimalArray` a challenge, so I punted.\r\n\r\nI agree that the array version should do what the scalar version does.\r\n\r\n> I don't see that. On master, we return a list if the self._from_sequence fails, not a different extension array.\r\n\r\nYes, and that was intentional. \r\n\r\nI was responding to your comment here:\r\nhttps://github.com/pandas-dev/pandas/issues/22930#issuecomment-426071046\r\nwhere you wrote:\r\n\r\n> we catch a TypeError. I suppose that's necessary, because the ops we're implementing may not be an algebra (the array may not be able to hold the return type).\r\n\r\nSo I think we're all good in terms of understanding this."
  }
]
