[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461639630",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-461639630",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 461639630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTYzOTYzMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-07T23:51:23Z",
    "updated_at": "2019-02-07T23:51:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "pls reference the issue where this was deprecated\r\n\r\nalso you might want to highlite and rebut some arguments there"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461730644",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-461730644",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 461730644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTczMDY0NA==",
    "user": {
      "login": "st-bender",
      "id": 28786187,
      "node_id": "MDQ6VXNlcjI4Nzg2MTg3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28786187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/st-bender",
      "html_url": "https://github.com/st-bender",
      "followers_url": "https://api.github.com/users/st-bender/followers",
      "following_url": "https://api.github.com/users/st-bender/following{/other_user}",
      "gists_url": "https://api.github.com/users/st-bender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/st-bender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/st-bender/subscriptions",
      "organizations_url": "https://api.github.com/users/st-bender/orgs",
      "repos_url": "https://api.github.com/users/st-bender/repos",
      "events_url": "https://api.github.com/users/st-bender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/st-bender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T08:44:18Z",
    "updated_at": "2019-02-08T08:44:18Z",
    "author_association": "NONE",
    "body": "Thanks,\r\nrelevant issues are: #18262, #21948 and PR #21954\r\nTried to add some discussion there, but so far no reaction that's why I opened a new issue."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461773436",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-461773436",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 461773436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTc3MzQzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T11:26:45Z",
    "updated_at": "2019-02-08T11:26:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "my point is to summarize the arguments in this issue (for and against)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/463133518",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-463133518",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 463133518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzEzMzUxOA==",
    "user": {
      "login": "st-bender",
      "id": 28786187,
      "node_id": "MDQ6VXNlcjI4Nzg2MTg3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28786187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/st-bender",
      "html_url": "https://github.com/st-bender",
      "followers_url": "https://api.github.com/users/st-bender/followers",
      "following_url": "https://api.github.com/users/st-bender/following{/other_user}",
      "gists_url": "https://api.github.com/users/st-bender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/st-bender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/st-bender/subscriptions",
      "organizations_url": "https://api.github.com/users/st-bender/orgs",
      "repos_url": "https://api.github.com/users/st-bender/repos",
      "events_url": "https://api.github.com/users/st-bender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/st-bender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T09:54:18Z",
    "updated_at": "2019-02-13T09:54:18Z",
    "author_association": "NONE",
    "body": "Hi,\r\nThank you for your input and setting the labels and sorry for getting back to you so late.\r\nI am not really sure that I understood correctly, my point is that #18262 only lists a number of API functions to be deprecated, i.e. to be removed in the future, without further reasoning. In my opinion any change to the official and documented API should be justified. After all, `pandas` calls itself stable.\r\n\r\nNote that I am not really opposed to keeping both functions, so the title may be a little provocative and could be adjusted.\r\n\r\nMy points pro keeping `read_table()`:\r\n* First of all to keep the API stable and to not break existing code.\r\n* Keep the function with the more general name (IMHO) over the special case, i.e. `read_table()` to read ascii files with any delimiter/separator over `read_csv()` with the connotation of a fixed delimiter, the comma. Renaming that function to `read_txt()` may be worthwhile considering, although it contradicts the first point above.\r\n* Two lines of additional code, please correct me if I am mistaken.\r\n\r\nContra (as far as I can see):\r\n* Two lines of extra code.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/468570287",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-468570287",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 468570287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODU3MDI4Nw==",
    "user": {
      "login": "tpall",
      "id": 4815910,
      "node_id": "MDQ6VXNlcjQ4MTU5MTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4815910?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tpall",
      "html_url": "https://github.com/tpall",
      "followers_url": "https://api.github.com/users/tpall/followers",
      "following_url": "https://api.github.com/users/tpall/following{/other_user}",
      "gists_url": "https://api.github.com/users/tpall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tpall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tpall/subscriptions",
      "organizations_url": "https://api.github.com/users/tpall/orgs",
      "repos_url": "https://api.github.com/users/tpall/repos",
      "events_url": "https://api.github.com/users/tpall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tpall/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T07:26:37Z",
    "updated_at": "2019-03-01T07:26:37Z",
    "author_association": "NONE",
    "body": "Using `read_csv()` to import files with any delimiter seems confusing. Regarding naming, `read_delim()` (as in R **readr** package) is good alternative to `read_table()` or `read_txt()`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470083213",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470083213",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470083213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDA4MzIxMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T12:05:45Z",
    "updated_at": "2019-03-06T12:06:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Keep the function with the more general name (IMHO) over the special case\r\n\r\nKeep in mind that the stdlib provides this under the `csv` module. Shouldn't we be consistent with the stdlib? If you're coming from a Python backgound, wouldn't you look there first?\r\n\r\n> Two lines of extra code.\r\n\r\nAll else equal, we prefer not to keep around aliases. They tend to make the library harder to learn and use.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470278569",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470278569",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470278569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDI3ODU2OQ==",
    "user": {
      "login": "st-bender",
      "id": 28786187,
      "node_id": "MDQ6VXNlcjI4Nzg2MTg3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28786187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/st-bender",
      "html_url": "https://github.com/st-bender",
      "followers_url": "https://api.github.com/users/st-bender/followers",
      "following_url": "https://api.github.com/users/st-bender/following{/other_user}",
      "gists_url": "https://api.github.com/users/st-bender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/st-bender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/st-bender/subscriptions",
      "organizations_url": "https://api.github.com/users/st-bender/orgs",
      "repos_url": "https://api.github.com/users/st-bender/repos",
      "events_url": "https://api.github.com/users/st-bender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/st-bender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T21:12:26Z",
    "updated_at": "2019-03-06T21:12:26Z",
    "author_association": "NONE",
    "body": "> > Keep the function with the more general name (IMHO) over the special case\r\n> \r\n> Keep in mind that the stdlib provides this under the `csv` module. Shouldn't we be consistent with the stdlib? If you're coming from a Python backgound, wouldn't you look there first?\r\n\r\nGood point, I was actually used to numpy's `genfromtxt()`, so I was looking for something like that. I am not used to `csv` (files and module) that much. So in my case that's probably why I missed that connection.\r\n \r\n> > Two lines of extra code.\r\n> \r\n> All else equal, we prefer not to keep around aliases. They tend to make the library harder to learn and use.\r\n\r\nFair enough, and I would agree as a developer. However, you could still refer one to the other and state that they are kept for backwards compatibility. Keep in mind that any part of a *stable* API that is removed will break code. Not everybody may keep track of changes in the underlying libraries and modules. Imaging someone updates his or her setup at some point in the future for bugfixes and new or improved features. Then he or she notices that one or more of the packages in the setup uses that function (or any other that you are going to remove) which then breaks that package and in turn his own code. Those bugs are nasty to track down, and may lead to people not updating packages or rolling back updates."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470289985",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470289985",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470289985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDI4OTk4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T21:46:01Z",
    "updated_at": "2019-03-06T21:46:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is just deprecated right now, and will be for some time, to give the\ncommunity time to catch up.\n\nPandas is still evolving rapidly enough that I'd be pleasantly surprised if\n`read_table` being dropped was\nthe hardest part of upgrading between two distant versions.\n\nOn Wed, Mar 6, 2019 at 3:12 PM Stefan Bender <notifications@github.com>\nwrote:\n\n> Keep the function with the more general name (IMHO) over the special case\n>\n> Keep in mind that the stdlib provides this under the csv module.\n> Shouldn't we be consistent with the stdlib? If you're coming from a Python\n> backgound, wouldn't you look there first?\n>\n> Good point, I was actually used to numpy's genfromtxt(), so I was looking\n> for something like that. I am not used to csv (files and module) that\n> much. So in my case that's probably why I missed that connection.\n>\n> Two lines of extra code.\n>\n> All else equal, we prefer not to keep around aliases. They tend to make\n> the library harder to learn and use.\n>\n> Fair enough, and I would agree as a developer. However, you could still\n> refer one to the other and state that they are kept for backwards\n> compatibility. Keep in mind that any part of a *stable* API that is\n> removed will break code. Not everybody may keep track of changes in the\n> underlying libraries and modules. Imaging someone updates his or her setup\n> at some point in the future for bugfixes and new or improved features. Then\n> he or she notices that one or more of the packages in the setup uses that\n> function (or any other that you are going to remove) which then breaks that\n> package and in turn his own code. Those bugs are nasty to track down, and\n> may lead to people not updating packages or rolling back updates.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470278569>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHInsAqlRmYxqEv8mLZ9jr11yxUBn-ks5vUC8_gaJpZM4aqRXG>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470295982",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470295982",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470295982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDI5NTk4Mg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T22:05:02Z",
    "updated_at": "2019-03-06T22:05:02Z",
    "author_association": "MEMBER",
    "body": "I know we've had some discussions around read_table which is fine to keep ongoing, but I would be a HUGE -1 on this. I would be inclined to believe that the VAST majority of users use `read_csv` instead of `read_table` so doing this would be a nightmare for the sake of semantics. \r\n\r\nHere's the top 5 search results for me for \"pandas tutorial\" excluding pandas own documentation (this is by no means an endorsement of any of these just sharing as reference):\r\n\r\n1. https://www.dataquest.io/blog/pandas-python-tutorial/\r\n2. https://www.datacamp.com/community/tutorials/pandas-tutorial-dataframe-python\r\n3. https://data36.com/pandas-tutorial-1-basics-reading-data-files-dataframes-data-selection/\r\n4. https://data-flair.training/blogs/pandas-tutorial/\r\n5. https://www.learnpython.org/en/Pandas_Basics\r\n\r\nAll use read_csv, none use read_table. Again I understand the merits of cleaning up semantics here, but from a pure usage analysis and effort trade-off I would be very against doing this"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470450921",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470450921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470450921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDQ1MDkyMQ==",
    "user": {
      "login": "st-bender",
      "id": 28786187,
      "node_id": "MDQ6VXNlcjI4Nzg2MTg3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28786187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/st-bender",
      "html_url": "https://github.com/st-bender",
      "followers_url": "https://api.github.com/users/st-bender/followers",
      "following_url": "https://api.github.com/users/st-bender/following{/other_user}",
      "gists_url": "https://api.github.com/users/st-bender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/st-bender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/st-bender/subscriptions",
      "organizations_url": "https://api.github.com/users/st-bender/orgs",
      "repos_url": "https://api.github.com/users/st-bender/repos",
      "events_url": "https://api.github.com/users/st-bender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/st-bender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T09:28:18Z",
    "updated_at": "2019-03-07T09:28:18Z",
    "author_association": "NONE",
    "body": "> This is just deprecated right now, and will be for some time, to give the community time to catch up.\r\n\r\nIsn't the whole point to remove it in the future? Unless I misunderstood the point of deprecating something. So anybody who missed the deprecation warning for whatever reason will be surprised.\r\n\r\n> Pandas is still evolving rapidly enough that I'd be pleasantly surprised if `read_table` being dropped was the hardest part of upgrading between two distant versions.\r\n\r\nI understand that, but I am tempted to take that bet. I was actually not talking only about `read_table()` but also about all those other functions that got deprecated recently.\r\nApparently we have different opinions on ['Development Status :: 5 - Production/Stable'](https://github.com/pandas-dev/pandas/blob/74a9ae309d057d5da50717ffb18fd3dd9212fad7/setup.py#L207)\r\nFor me it means that it's save to use and will be compatible for a long time into the future without breaking things. I am thinking about 10 to 20 years or even more."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470455510",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470455510",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470455510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDQ1NTUxMA==",
    "user": {
      "login": "st-bender",
      "id": 28786187,
      "node_id": "MDQ6VXNlcjI4Nzg2MTg3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28786187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/st-bender",
      "html_url": "https://github.com/st-bender",
      "followers_url": "https://api.github.com/users/st-bender/followers",
      "following_url": "https://api.github.com/users/st-bender/following{/other_user}",
      "gists_url": "https://api.github.com/users/st-bender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/st-bender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/st-bender/subscriptions",
      "organizations_url": "https://api.github.com/users/st-bender/orgs",
      "repos_url": "https://api.github.com/users/st-bender/repos",
      "events_url": "https://api.github.com/users/st-bender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/st-bender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T09:41:45Z",
    "updated_at": "2019-03-07T09:41:45Z",
    "author_association": "NONE",
    "body": "> I know we've had some discussions around read_table which is fine to keep ongoing, but I would be a HUGE -1 on this. I would be inclined to believe that the VAST majority of users use `read_csv` instead of `read_table` so doing this would be a nightmare for the sake of semantics.\r\n> \r\n> Here's the top 5 search results for me for \"pandas tutorial\" excluding pandas own documentation (this is by no means an endorsement of any of these just sharing as reference):\r\n> \r\n> 1. https://www.dataquest.io/blog/pandas-python-tutorial/\r\n> 2. https://www.datacamp.com/community/tutorials/pandas-tutorial-dataframe-python\r\n> 3. https://data36.com/pandas-tutorial-1-basics-reading-data-files-dataframes-data-selection/\r\n> 4. https://data-flair.training/blogs/pandas-tutorial/\r\n> 5. https://www.learnpython.org/en/Pandas_Basics\r\n> \r\n> All use read_csv, none use read_table. Again I understand the merits of cleaning up semantics here, but from a pure usage analysis and effort trade-off I would be very against doing this\r\n\r\nThey use `read_csv` for reading `.csv` which is what it is designed for and named after. I am talking about reading space/tab delimited files, for which `read_csv()` is misnamed and not the first place I would look for (and didn't look). The title was meant to provoke discussion, otherwise you may not have stepped in. ;)\r\nThe only issue I actually have is changing the API in a backwards-incompatible way, i.e. removing an actually used function from it, which will break other people's code. Granted it may not be the vast majority but it's not negligible either. Yet on the other hand you introduce new interfaces like `read_fmf()` which does essentially the same, all three cases are handled by numpy's `genfromtxt()`.\r\n\r\nBut I realize that we are fighting over two lines of code instead of fixing the almost 3000 real bugs. And I can't help you with that unless you really keep your API stable and backwards compatible."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470505061",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470505061",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470505061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDUwNTA2MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T12:21:05Z",
    "updated_at": "2019-03-07T12:21:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the feedback. I think we have different opinions on this, which\nis fine.\n\nOn Thu, Mar 7, 2019 at 3:41 AM Stefan Bender <notifications@github.com>\nwrote:\n\n> I know we've had some discussions around read_table which is fine to keep\n> ongoing, but I would be a HUGE -1 on this. I would be inclined to believe\n> that the VAST majority of users use read_csv instead of read_table so\n> doing this would be a nightmare for the sake of semantics.\n>\n> Here's the top 5 search results for me for \"pandas tutorial\" excluding\n> pandas own documentation (this is by no means an endorsement of any of\n> these just sharing as reference):\n>\n>    1. https://www.dataquest.io/blog/pandas-python-tutorial/\n>    2.\n>    https://www.datacamp.com/community/tutorials/pandas-tutorial-dataframe-python\n>    3.\n>    https://data36.com/pandas-tutorial-1-basics-reading-data-files-dataframes-data-selection/\n>    4. https://data-flair.training/blogs/pandas-tutorial/\n>    5. https://www.learnpython.org/en/Pandas_Basics\n>\n> All use read_csv, none use read_table. Again I understand the merits of\n> cleaning up semantics here, but from a pure usage analysis and effort\n> trade-off I would be very against doing this\n>\n> They use read_csv for reading .csv which is what it is designed for and\n> named after. I am talking about reading space/tab delimited files, for\n> which read_csv() is misnamed and not the first place I would look for\n> (and didn't look). The title was meant to provoke discussion, otherwise you\n> may not have stepped in. ;)\n> The only issue I actually have is changing the API in a\n> backwards-incompatible way, i.e. removing an actually used function from\n> it, which will break other people's code. Granted it may not be the vast\n> majority but it's not negligible either. Yet on the other hand you\n> introduce new interfaces like read_fmf() which does essentially the same,\n> all three cases are handled by numpy's genfromtxt().\n>\n> But I realize that we are fighting over two lines of code instead of\n> fixing the almost 3000 real bugs. And I can't help you with that unless you\n> really keep your API stable and backwards compatible.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470455510>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHItOvF37K6ZXbwSjbKjUTsOBpoPQ2ks5vUN7egaJpZM4aqRXG>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470697994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470697994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470697994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDY5Nzk5NA==",
    "user": {
      "login": "jimmywan",
      "id": 10406673,
      "node_id": "MDQ6VXNlcjEwNDA2Njcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10406673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmywan",
      "html_url": "https://github.com/jimmywan",
      "followers_url": "https://api.github.com/users/jimmywan/followers",
      "following_url": "https://api.github.com/users/jimmywan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmywan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmywan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmywan/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmywan/orgs",
      "repos_url": "https://api.github.com/users/jimmywan/repos",
      "events_url": "https://api.github.com/users/jimmywan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmywan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T21:17:44Z",
    "updated_at": "2019-03-07T21:17:44Z",
    "author_association": "NONE",
    "body": ">All else equal, we prefer not to keep around aliases. They tend to make the library harder to learn and use.\r\n\r\nThis makes sense if the aliases are all superfluous and the base function has a reasonable name. You can't reasonably make that argument here. \r\n\r\n>This is just deprecated right now, and will be for some time, to give the community time to catch up.\r\n\r\nSo deprecate `read_csv` and give them a healthy window to catch up. Giving general functions specific names is bad design. If you care at all about having a clean API, the decision to choose `read_csv` over `read_table` was absolutely backwards.\r\n\r\n>I would be inclined to believe that the VAST majority of users use read_csv instead of read_table so doing this would be a nightmare for the sake of semantics.\r\n\r\nArguments like those are akin to saying progress should never be made for the sake of stability. At the very least `read_table` should be un-deprecated."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470698640",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470698640",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470698640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDY5ODY0MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T21:19:41Z",
    "updated_at": "2019-03-07T21:19:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> You can't reasonably make that argument here.\n\nWhy do you say that? The stdlib uses the \"csv\" module for reading delimited\nfiles.\n\n\nOn Thu, Mar 7, 2019 at 3:17 PM Jimmy Wan <notifications@github.com> wrote:\n\n> All else equal, we prefer not to keep around aliases. They tend to make\n> the library harder to learn and use.\n>\n> This makes sense if the aliases are all superfluous and the base function\n> has a reasonable name. You can't reasonably make that argument here.\n>\n> This is just deprecated right now, and will be for some time, to give the\n> community time to catch up.\n>\n> So deprecate read_csv and give them a healthy window to catch up. Giving\n> general functions specific names is bad design. If you care at all about\n> having a clean API, the decision to choose read_csv over read_table was\n> absolutely backwards.\n>\n> I would be inclined to believe that the VAST majority of users use\n> read_csv instead of read_table so doing this would be a nightmare for the\n> sake of semantics.\n>\n> Arguments like those are akin to saying progress should never be made for\n> the sake of stability. At the very least read_table should be\n> un-deprecated.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470697994>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIgLoOEgvvGDo8_M_Xkxk_WviesImks5vUYIAgaJpZM4aqRXG>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470717407",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470717407",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470717407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDcxNzQwNw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T22:13:46Z",
    "updated_at": "2019-03-07T22:13:46Z",
    "author_association": "MEMBER",
    "body": "> Note that I am not really opposed to keeping both functions, so the title may be a little provocative and could be adjusted.\r\n\r\n> The title was meant to provoke discussion, otherwise you may not have stepped in. ;)\r\n\r\nI understand there are some frustrations with the deprecation of `read_table` and that conversation can certainly continue. However, if the request to deprecate `read_csv` is frivolous than I would at least ask that you update the title to reflect what you are actually asking for (ex: \"Undeprecate read_table\") instead of what it currently is, as otherwise we'll continue down tangential paths that aren't helpful regardless of anyone's viewpoint on read_table.\r\n\r\n> But I realize that we are fighting over two lines of code instead of fixing the almost 3000 real bugs. And I can't help you with that unless you really keep your API stable and backwards compatible.\r\n\r\nPandas is an open source tool built off of volunteer hours. We would gladly welcome contributions from you to improve the tool. Otherwise I'd just like to call out that incendiary and insulting comments don't contribute anything to the tool or the community surrounding it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470733337",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470733337",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470733337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDczMzMzNw==",
    "user": {
      "login": "jimmywan",
      "id": 10406673,
      "node_id": "MDQ6VXNlcjEwNDA2Njcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10406673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmywan",
      "html_url": "https://github.com/jimmywan",
      "followers_url": "https://api.github.com/users/jimmywan/followers",
      "following_url": "https://api.github.com/users/jimmywan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmywan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmywan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmywan/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmywan/orgs",
      "repos_url": "https://api.github.com/users/jimmywan/repos",
      "events_url": "https://api.github.com/users/jimmywan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmywan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T22:54:53Z",
    "updated_at": "2019-03-07T22:54:53Z",
    "author_association": "NONE",
    "body": "> > Note that I am not really opposed to keeping both functions, so the title may be a little provocative and could be adjusted.\r\n> \r\n> I understand there are some frustrations with the deprecation of `read_table` and that conversation can certainly continue. However, if the request to deprecate `read_csv` is frivolous than I would at least ask that you update the title to reflect what you are actually asking for (ex: \"Undeprecate read_table\") instead of what it currently is, as otherwise we'll continue down tangential paths that aren't helpful regardless of anyone's viewpoint on read_table.\r\n\r\nI'm not the OP, but I think some of us are trying to say that deprecating `read_csv` in favor of `read_table` is defensible in terms of API clarity/readability with the side effect of some end-user pain.\r\nDeprecating `read_table` in favor of `read_csv` just seems misguided and wrong.\r\n\r\n> > You can't reasonably make that argument here.\r\n>\r\n> Why do you say that? The stdlib uses the \"csv\" module for reading delimited files.\r\n\r\nThat's more of a historical artifact and/or implementation detail. It's highly unlikely that a pandas end user  knows and/or cares about it. No reason to propagate that decision any further.\r\n\r\nSidenote: The API choices by readr from the tidyverse to make `read_csv`/`read_tsv` convenience aliases for the more general read_delim (\"delimited\") seems like a more consistent choice.\r\nhttps://readr.tidyverse.org/reference/read_delim.html"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470741182",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470741182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470741182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDc0MTE4Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T23:20:28Z",
    "updated_at": "2019-03-07T23:20:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "\n\n> On Mar 7, 2019, at 16:54, Jimmy Wan <notifications@github.com> wrote:\n> \n> That's more of a historical artifact and/or implementation detail. It's highly unlikely that a pandas end user knows and/or cares about it.\n\nDo you have a source for that?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470759552",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470759552",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470759552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDc1OTU1Mg==",
    "user": {
      "login": "jimmywan",
      "id": 10406673,
      "node_id": "MDQ6VXNlcjEwNDA2Njcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10406673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmywan",
      "html_url": "https://github.com/jimmywan",
      "followers_url": "https://api.github.com/users/jimmywan/followers",
      "following_url": "https://api.github.com/users/jimmywan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmywan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmywan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmywan/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmywan/orgs",
      "repos_url": "https://api.github.com/users/jimmywan/repos",
      "events_url": "https://api.github.com/users/jimmywan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmywan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-08T00:44:23Z",
    "updated_at": "2019-03-08T00:44:23Z",
    "author_association": "NONE",
    "body": "> > That's more of a historical artifact and/or implementation detail. It's highly unlikely that a pandas end user knows and/or cares about it.\r\n>\r\n> Do you have a source for that?\r\n\r\nI'm not sure that I understand your question or the motivation behind it, but...\r\n\r\nThe original PEP was written > 15 years ago and it's fairly clear that the specific problem they were trying to solve is handling all of the annoying corner cases involved with a poorly defined file format that is ill conceived. Using a delimiter that shows up all over the place in every day life and real world content is just begging to generate corner cases, and that it has, with all of the crazy rules you have to put in place to deal with commas or single/double quotes. There is a passing reference to trying to make it be something slightly more general in support of Excel and excel-generated content, because that's been a tool of choice of real world users for decades. There's really no mention of trying to specifically \"name\" it to reflect being a general purpose parser building block or anything of that sort.\r\nhttps://www.python.org/dev/peps/pep-0305/#id13\r\n\r\nAs mentioned in the PEP, it was largely based upon a library named `csv` specifically built to parse CSV files:\r\nhttp://www.object-craft.com.au/projects/csv/\r\n\r\nMaybe we just agree to disagree ¯\\\\_(ツ)_/¯, but none of that really has anything to do with whether we, the \"royal\" we ;), in 2019, should be following a naming convention created in 2003 for an entirely different problem.\r\n\r\nP.S. huge fan of your work with dask/dask-ml!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470774534",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470774534",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470774534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDc3NDUzNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-08T01:58:25Z",
    "updated_at": "2019-03-08T01:58:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for linking to that PEP. I hadn’t seen it before. \n\n> On Mar 7, 2019, at 18:44, Jimmy Wan <notifications@github.com> wrote:\n> \n> That's more of a historical artifact and/or implementation detail. It's highly unlikely that a pandas end user knows and/or cares about it.\n> \n> Do you have a source for that?\n> \n> I'm not sure that I understand your question or the motivation behind it, but...\n> \n> The original PEP was written > 15 years ago and it's fairly clear that the specific problem they were trying to solve is handling all of the annoying corner cases involved with a poorly defined file format that is ill conceived. Using a delimiter that shows up all over the place in every day life and real world content is just begging to generate corner cases, and that it has, with all of the crazy rules you have to put in place to deal with commas or single/double quotes. There is a passing reference to trying to make it be something slightly more general in support of Excel and excel-generated content, because that's been a tool of choice of real world users for decades. There's really no mention of trying to specifically \"name\" it to reflect being a general purpose parser building block or anything of that sort.\n> https://www.python.org/dev/peps/pep-0305/#id13\n> \n> As mentioned in the PEP, it was largely based upon a library named csv specifically built to parse CSV files:\n> http://www.object-craft.com.au/projects/csv/\n> \n> Maybe we just agree to disagree ¯\\(ツ)/¯, but none of that really has anything to do with whether we, the \"royal\" we ;), in 2019, should be following a naming convention created in 2003 for an entirely different problem.\n> \n> P.S. huge fan of your work with dask/dask-ml!\n> \n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/470873787",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-470873787",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 470873787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDg3Mzc4Nw==",
    "user": {
      "login": "st-bender",
      "id": 28786187,
      "node_id": "MDQ6VXNlcjI4Nzg2MTg3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28786187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/st-bender",
      "html_url": "https://github.com/st-bender",
      "followers_url": "https://api.github.com/users/st-bender/followers",
      "following_url": "https://api.github.com/users/st-bender/following{/other_user}",
      "gists_url": "https://api.github.com/users/st-bender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/st-bender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/st-bender/subscriptions",
      "organizations_url": "https://api.github.com/users/st-bender/orgs",
      "repos_url": "https://api.github.com/users/st-bender/repos",
      "events_url": "https://api.github.com/users/st-bender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/st-bender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-08T10:03:32Z",
    "updated_at": "2019-03-08T10:03:32Z",
    "author_association": "NONE",
    "body": "> > Note that I am not really opposed to keeping both functions, so the title may be a little provocative and could be adjusted.\r\n> \r\n> > The title was meant to provoke discussion, otherwise you may not have stepped in. ;)\r\n> \r\n> I understand there are some frustrations with the deprecation of `read_table` and that conversation can certainly continue. However, if the request to deprecate `read_csv` is frivolous than I would at least ask that you update the title to reflect what you are actually asking for (ex: \"Undeprecate read_table\") instead of what it currently is, as otherwise we'll continue down tangential paths that aren't helpful regardless of anyone's viewpoint on read_table.\r\n\r\nDid that, is it better now?\r\n\r\n> > But I realize that we are fighting over two lines of code instead of fixing the almost 3000 real bugs. And I can't help you with that unless you really keep your API stable and backwards compatible.\r\n> \r\n> Pandas is an open source tool built off of volunteer hours. We would gladly welcome contributions from you to improve the tool. Otherwise I'd just like to call out that incendiary and insulting comments don't contribute anything to the tool or the community surrounding it.\r\n\r\nSorry, I didn't mean to insult anybody. My problem is that I write code to do my my work and want to make sure that it still works in a few years from now when maybe someone else takes it over, or wants to reproduce my results. I can't do that if the API is constantly changing, or I would have to cap the max versions on the dependencies. So I am looking for solutions that are --- hopefully --- future proof."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/472587753",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-472587753",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 472587753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjU4Nzc1Mw==",
    "user": {
      "login": "nspies",
      "id": 156719,
      "node_id": "MDQ6VXNlcjE1NjcxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/156719?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nspies",
      "html_url": "https://github.com/nspies",
      "followers_url": "https://api.github.com/users/nspies/followers",
      "following_url": "https://api.github.com/users/nspies/following{/other_user}",
      "gists_url": "https://api.github.com/users/nspies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nspies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nspies/subscriptions",
      "organizations_url": "https://api.github.com/users/nspies/orgs",
      "repos_url": "https://api.github.com/users/nspies/repos",
      "events_url": "https://api.github.com/users/nspies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nspies/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T20:15:50Z",
    "updated_at": "2019-03-13T20:15:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Add my vote to keeping `read_table` around!\r\n\r\nI've been a pandas user for 7+ years and have used `read_table(...,sep=\"\\t\")` where necessary. I agree with OP that I far prefer the `read_table` form as it sounds more general.\r\n\r\nI will note that the documentation supports this interpretation: `read_table` is a function to \"Read general delimited file into DataFrame.\" while `read_csv` is to \"Read a comma-separated values (csv) file into DataFrame.\"\r\n\r\nI have to say in my corner of datasciences, no one has touched the standard csv module, while everyone uses pandas, so I think it should decide for itself what's right. (A better point of comparison is probably R, which has both a `read.csv` and `read.table` function, where `read.csv` is an alias for the more general-purpose`read.table`.)\r\n\r\nI generally agree with minimizing aliases, but this is at the core of what pandas does and is a very widespread alias. While \"pd.read_csv\" is clearly more commonly used -- I wouldn't suggest getting rid of it! -- a quick unscientific github search yields 50k+ results for \"pd.read_table\"."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/479140622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25220#issuecomment-479140622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25220",
    "id": 479140622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTE0MDYyMg==",
    "user": {
      "login": "tzuni",
      "id": 12897774,
      "node_id": "MDQ6VXNlcjEyODk3Nzc0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12897774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tzuni",
      "html_url": "https://github.com/tzuni",
      "followers_url": "https://api.github.com/users/tzuni/followers",
      "following_url": "https://api.github.com/users/tzuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/tzuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tzuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tzuni/subscriptions",
      "organizations_url": "https://api.github.com/users/tzuni/orgs",
      "repos_url": "https://api.github.com/users/tzuni/repos",
      "events_url": "https://api.github.com/users/tzuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tzuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-02T18:40:48Z",
    "updated_at": "2019-04-02T18:40:48Z",
    "author_association": "NONE",
    "body": "In bioinformatics I have to deal with a LOT of tab-delimited data formats and almost never encounter comma-delimited data so this change has made a very prominent impact in my daily use. I too would like to see `read_table` stick around.\r\n\r\nIn my view implementing a general case `read_delim` function would make sense with `read_csv` and `read_table` becoming convenience functions to it. This would simplify code maintenance while providing a convenient, more readable, and stable API for two common use-cases."
  }
]
