[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/395699905",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21379#issuecomment-395699905",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21379",
    "id": 395699905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTY5OTkwNQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T09:08:01Z",
    "updated_at": "2018-06-08T09:09:00Z",
    "author_association": "MEMBER",
    "body": "> Thank you a lot in advance, please let me know if it's reasonable to attach examples.\r\n\r\nActually, examples would be very much appreciated.\r\n\r\nMy first guess is that you should be able to specify `dtype` for the column containing that value, but let's see when you post examples."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/397020362",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21379#issuecomment-397020362",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21379",
    "id": 397020362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzAyMDM2Mg==",
    "user": {
      "login": "pleaded",
      "id": 9338989,
      "node_id": "MDQ6VXNlcjkzMzg5ODk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9338989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pleaded",
      "html_url": "https://github.com/pleaded",
      "followers_url": "https://api.github.com/users/pleaded/followers",
      "following_url": "https://api.github.com/users/pleaded/following{/other_user}",
      "gists_url": "https://api.github.com/users/pleaded/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pleaded/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pleaded/subscriptions",
      "organizations_url": "https://api.github.com/users/pleaded/orgs",
      "repos_url": "https://api.github.com/users/pleaded/repos",
      "events_url": "https://api.github.com/users/pleaded/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pleaded/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T17:28:35Z",
    "updated_at": "2018-06-13T17:44:28Z",
    "author_association": "NONE",
    "body": "@gfyoung  sure, sorry for the delay with the responce, please find the example attached below.\r\n\r\nBasically the table is the following:\r\n\r\n   Number in double-quotes (like a string)  \\\r\n 0                                  \"1234\"   \r\n 1                                \"1234.0\"   \r\n 2                               \"1234.00\"   \r\n 3                                 \"1,234\"   \r\n 4                               \"1,234.0\"   \r\n 5                              \"1,234.00\"   \r\n 6                                \"1234,0\"   \r\n 7                                 \"1.234\"   \r\n 8                               \"1.234,0\"   \r\n 9                              \"1.234,00\"\r\n\r\n\r\nAccording to my understanding, suggested approach to process numeric values is based on the manipulations with \"thousands\" and \"decimal\" fields.\r\nI'm iterating on all possible combinations of these keywords with values \",\" and \".\" (including empty case) an extracting the last column from the attached table:\r\n\r\n```\r\n{} --> [1234.0, 1234.0, 1234.0, 1234.0, 1234.0, 1234.0, 12340.0, 1.234, 1.234, 1.234]\r\n{'thousands': '.'} --> ['1234', '12340', '123400', '1,234', '1,234.0', '1,234.00', '1234,0', '1234', '1.234,0', '1.234,00']\r\n{'thousands': ','} --> [1234.0, 1234.0, 1234.0, 1234.0, 1234.0, 1234.0, 12340.0, 1.234, 1.234, 1.234]\r\n{'decimal': '.'} --> [1234.0, 1234.0, 1234.0, 1234.0, 1234.0, 1234.0, 12340.0, 1.234, 1.234, 1.234]\r\n{'decimal': ','} --> ['1234', '1234.0', '1234.00', '1234', '1,234.0', '1,234.00', '12340', '1.234', '1.234,0', '1.234,00']\r\n{'decimal': '.', 'thousands': ','} --> [1234.0, 1234.0, 1234.0, 1234.0, 1234.0, 1234.0, 12340.0, 1.234, 1.234, 1.234]\r\n{'decimal': ',', 'thousands': '.'} --> [1234.0, 12340.0, 123400.0, 1.234, 1.234, 1.234, 1234.0, 1234.0, 1234.0, 1234.0]\r\n```\r\nIn this workaround, only few cases leads to \"prevention\" of numeric conversion:\r\n- 'thousands': '.'\r\n- 'decimal': ','\r\n\r\nBut obviously, such method could fail on some other datasets.\r\n\r\nSo problem statement: is it possible to extract (with read_html) the content of a table as it is, so the result will be stored as strings **without** conversions / casting of **any** columns by pandas?\r\n\r\n### Example\r\n\r\n<body>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th class=\"tabHead\" x:autofilter=\"all\">Thousands sep</th>\r\n<th class=\"tabHead\" x:autofilter=\"all\">Floats sep</th>\r\n<th class=\"tabHead\" x:autofilter=\"all\">Number of zeros at the end</th>\r\n<th class=\"tabHead\" x:autofilter=\"all\">Number in double-quotes (like a string)</th>\r\n<th class=\"tabHead\" x:autofilter=\"all\">Parsed number (different forms of number 1234.0)</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td class=\"tDetail\">Nothing</td>\r\n<td class=\"tDetail\">Nothing</td>\r\n<td class=\"tDetail\">0</td>\r\n<td class=\"tDetail\">\"1234\"</td>\r\n<td class=\"tDetail\">1234</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">Nothing</td>\r\n<td class=\"tDetail\">.</td>\r\n<td class=\"tDetail\">1</td>\r\n<td class=\"tDetail\">\"1234.0\"</td>\r\n<td class=\"tDetail\">1234.0</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">Nothing</td>\r\n<td class=\"tDetail\">.</td>\r\n<td class=\"tDetail\">2</td>\r\n<td class=\"tDetail\">\"1234.00\"</td>\r\n<td class=\"tDetail\">1234.00</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">\",\"</td>\r\n<td class=\"tDetail\">Nothing</td>\r\n<td class=\"tDetail\">0</td>\r\n<td class=\"tDetail\">\"1,234\"</td>\r\n<td class=\"tDetail\">1,234</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">\",\"</td>\r\n<td class=\"tDetail\">.</td>\r\n<td class=\"tDetail\">1</td>\r\n<td class=\"tDetail\">\"1,234.0\"</td>\r\n<td class=\"tDetail\">1,234.0</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">\",\"</td>\r\n<td class=\"tDetail\">.</td>\r\n<td class=\"tDetail\">2</td>\r\n<td class=\"tDetail\">\"1,234.00\"</td>\r\n<td class=\"tDetail\">1,234.00</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">Nothing</td>\r\n<td class=\"tDetail\">\",\"</td>\r\n<td class=\"tDetail\">1</td>\r\n<td class=\"tDetail\">\"1234,0\"</td>\r\n<td class=\"tDetail\">1234,0</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">.</td>\r\n<td class=\"tDetail\">\",\"</td>\r\n<td class=\"tDetail\">0</td>\r\n<td class=\"tDetail\">\"1.234\"</td>\r\n<td class=\"tDetail\">1.234</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">.</td>\r\n<td class=\"tDetail\">\",\"</td>\r\n<td class=\"tDetail\">1</td>\r\n<td class=\"tDetail\">\"1.234,0\"</td>\r\n<td class=\"tDetail\">1.234,0</td>\r\n</tr>\r\n<tr>\r\n<td class=\"tDetail\">.</td>\r\n<td class=\"tDetail\">\",\"</td>\r\n<td class=\"tDetail\">2</td>\r\n<td class=\"tDetail\">\"1.234,00\"</td>\r\n<td class=\"tDetail\">1.234,00</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</body>\r\n</html>\r\n\r\nI'm referering and reminding you guys, that this example is not artificial. There could be files with numbers in both UK / US format or at least an algorithm that have to handle both types.\r\n\r\n### Converters\r\n\r\nSpecification of the \"converters\" keyword with the mapping from a column name to a string leads to the following: \r\n\r\n```\r\nconverters = {\r\n 'Floats sep': str,\r\n 'Number in double-quotes (like a string)': str,\r\n 'Number of zeros at the end': str,\r\n 'Parsed number (different forms of number 1234.0)': str,\r\n 'Thousands sep': str\r\n}\r\n{} --> ['1234', '1234.0', '1234.00', '1234', '1234.0', '1234.00', '12340', '1.234', '1.2340', '1.23400']\r\n{'thousands': '.'} --> ['1234', '12340', '123400', '1,234', '1,234.0', '1,234.00', '1234,0', '1234', '1.234,0', '1.234,00']\r\n{'thousands': ','} --> ['1234', '1234.0', '1234.00', '1234', '1234.0', '1234.00', '12340', '1.234', '1.2340', '1.23400']\r\n{'decimal': '.'} --> ['1234', '1234.0', '1234.00', '1234', '1234.0', '1234.00', '12340', '1.234', '1.2340', '1.23400']\r\n{'decimal': ','} --> ['1234', '1234.0', '1234.00', '1234', '1,234.0', '1,234.00', '12340', '1.234', '1.234,0', '1.234,00']\r\n{'decimal': '.', 'thousands': ','} --> ['1234', '1234.0', '1234.00', '1234', '1234.0', '1234.00', '12340', '1.234', '1.2340', '1.23400']\r\n{'decimal': ',', 'thousands': '.'} --> ['1234', '12340', '123400', '1.234', '1.2340', '1.23400', '1234.0', '1234', '1234.0', '1234.00']\r\n```\r\nAs I see, the results are all string now, but it looks like the content was still converted.\r\n\r\n### dtype\r\n@gfyoung, you've mentioned specification of dtypes. As I see it's available in [read_csv function](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html), but unfortunately not in [read_html](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_html.html?highlight=pandas%20io%20read_html). In case \"converters\" is equivalent to \"dtype\", please see the section above.\r\n\r\n### Another problem - date formatting\r\nI'm reminding you guys that you may want to take a look at the stackoverflow question I've mentioned in the first message of this issue. This numeric converter that I've just described also attempts to convert date values like \"01.12.2017\" to numbers like 1122017, which is also pretty important point."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/397123789",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21379#issuecomment-397123789",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21379",
    "id": 397123789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzEyMzc4OQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T23:54:00Z",
    "updated_at": "2018-06-13T23:54:00Z",
    "author_association": "MEMBER",
    "body": "Have you tried `thousands=None`?\r\n\r\n```python\r\nIn [22]: html = \"<html><body><table><tr><th>foo</th></tr><tr><td>60,00</td></tr></table></body></html>\"\r\n\r\nIn [23]: pd.read_html(html, thousands=None)[0]\r\nOut[23]: \r\n       0\r\n0    foo\r\n1  60,00\r\n```\r\n\r\nIf that works for you then would certainly take a PR to update documentation and add as an example. \r\n\r\nAlternately adding `dtype` as a keyword argument could work, but `read_html` operates differently from other read functions if only for the fact that it returns a list instead of a single DataFrame. Implementing that in a way that is clear and consistent *may* be complicated, though a PR for that would be welcome as well"
  }
]
