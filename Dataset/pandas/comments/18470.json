[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346948480",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18470#issuecomment-346948480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18470",
    "id": 346948480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njk0ODQ4MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T15:48:16Z",
    "updated_at": "2017-11-25T15:48:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\nIn [50]: pd.MultiIndex.from_tuples([(name, l) for name, levels in hierarchy.items() for l in levels])\r\nOut[50]: \r\nMultiIndex(levels=[['g0', 'g1'], ['c0', 'c1', 'c2', 'c3', 'c4']],\r\n           labels=[[0, 0, 1, 1, 1], [0, 1, 2, 3, 4]])\r\n```\r\n\r\nThe issue here is that a dictionary has an arbitrary ordering, so construction of the above is not deterministic. Sure you can do it, but I don't think this solves anything for the general case.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346960206",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18470#issuecomment-346960206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18470",
    "id": 346960206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njk2MDIwNg==",
    "user": {
      "login": "mefergus",
      "id": 32277181,
      "node_id": "MDQ6VXNlcjMyMjc3MTgx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/32277181?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mefergus",
      "html_url": "https://github.com/mefergus",
      "followers_url": "https://api.github.com/users/mefergus/followers",
      "following_url": "https://api.github.com/users/mefergus/following{/other_user}",
      "gists_url": "https://api.github.com/users/mefergus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mefergus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mefergus/subscriptions",
      "organizations_url": "https://api.github.com/users/mefergus/orgs",
      "repos_url": "https://api.github.com/users/mefergus/repos",
      "events_url": "https://api.github.com/users/mefergus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mefergus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T19:16:31Z",
    "updated_at": "2017-11-25T19:16:31Z",
    "author_association": "NONE",
    "body": "I have been using `OrderedDict` to preserve ordering when constructing just the `MultiIndex`.  I've since decided it probably makes more sense to create a new `DataFrame` with columns selected from an existing one using the relationship I describe in the `OrderedDict`, and `concat`-ing them with the new labels as the keys. It's more flexible that way, too, since I don't need to grab all the columns, or I can put columns in multiple groups if that makes sense (which it does in some instances, for me).\r\n\r\nI've got hundreds of columns that I want to group for summaries and needed a safe way to get the `labels` right (i.e. trying to avoid `labels` altogether) - I've got a relatively simple helper function doing that for me now, but I can see how it might not be a common need. I looked to working with the `MultiIndex` since that seemed to be where I needed the new information and I could modify in-place.\r\n\r\nI still like to think about my hierarchy in a a dict-like fashion :)"
  }
]
