[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461305916",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25162#issuecomment-461305916",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25162",
    "id": 461305916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTMwNTkxNg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-07T06:46:17Z",
    "updated_at": "2019-02-07T06:46:24Z",
    "author_association": "MEMBER",
    "body": "Making the codebase DAG-like is not necessarily the same as separating out pieces of the codebase from one another.  That being said if DAG and increased modularity happen to go hand-in-hand, by all means.\r\n\r\nAlso, is `_libs` actually a DAG now?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461487295",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25162#issuecomment-461487295",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25162",
    "id": 461487295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTQ4NzI5NQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-07T16:05:09Z",
    "updated_at": "2019-02-07T16:05:09Z",
    "author_association": "MEMBER",
    "body": "> Making the codebase DAG-like is not necessarily the same as separating out pieces of the codebase from one another.\r\n\r\nTrue.  In the case of `core.config`, if we want to avoid runtime imports in `_libs` (and I for one do), that does need to be moved outside of `core`.\r\n\r\n> Also, is `_libs` actually a DAG now?\r\n\r\nNo, but a subset of `_libs` modules satisfy the criterion, and I think it is worthwhile trying to gradually expand that subset.\r\n\r\n- `tslibs` has no outside `_libs` dependencies, does have runtime imports for `to_offset`, `pd.get_option`, and `tm.set_locale`\r\n  - `to_offset` is eventually going to wind up directly in `tslibs`.  Getting there will take a while.\r\n  - `get_option`, as discussed, I'd like to make upstream.\r\n  - `tm` is a weird place for `set_locale`.  It could easily go in a zero-dependency module.  If `get_option` were made upstream, then a bunch of locale-specific functions could go with `set_locale`.\r\n  - within `tslibs` there are some unavoidable dependencies since `Timestamp` and `Timedelta` require each other.  Other than that, a lot of effort has gone into making it as DAG-like as possible.\r\n- `tslib` depends only on `tslibs`, eventually will likely be made part of `tslibs`.\r\n- `writers`, `sparse`, `reshape`, `properties`, `indexing` have zero pandas dependencies\r\n- `khash` is essentially vendored IIUC\r\n- `skiplist` depends only on a C file in _libs/src (also pseudo-vendored?)\r\n- `window` depends only on `skiplist`, `util`, and src/\r\n- `missing` depends only on `tslibs` and `util`\r\n- `hashing` depends only on `util`\r\n- `hashtable` depends on `util`, `khash`, and `missing`\r\n- `interval` depends on `util`, `hashtable`, and `tslibs`\r\n- `ops` depends only on `util` and `missing`\r\n\r\nThat leaves:\r\n\r\n- `lib`: has runtime imports of `DatetimeIndex`, `construct_1d_object_array_from_listlike` (otherwise just depends on `tslibs`, `util`, and `missing`; many functions in `lib` are stand-alone)\r\n- `algos`: has a runtime import from `lib`\r\n- `groupby`, `index`: imports from `algos`\r\n- `internals`: import from `algos`, runtime import of `Int64Index`\r\n- `join`: imports from `algos` and `core.algorithms`\r\n- `parsers`: many imports from outside of `_libs`, also `lib`\r\n- `reduction`: imports from `lib`\r\n- `testing`: imports from outside of `_libs`\r\n\r\nSome of these (`parsers`, `testing`) aren't worth trying to make DAG.  Looking at it, moving `arrmap` (the function with the runtime `lib` import) out of `algos` would let us add `algos`, `groupby`, and `index` to the DAG pile, which may be worthwhile."
  }
]
