[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285034706",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15613#issuecomment-285034706",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15613",
    "id": 285034706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTAzNDcwNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T13:02:34Z",
    "updated_at": "2017-03-08T13:02:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "here's a copy-pastable example\r\n\r\n```\r\nIn [13]: df = pd.DataFrame({'A':[pd.Timestamp('20130101'),pd.NaT,pd.Timestamp('20130103')],'B':[1,2,np.nan]})\r\n\r\nIn [14]: df\r\nOut[14]: \r\n           A    B\r\n0 2013-01-01  1.0\r\n1        NaT  2.0\r\n2 2013-01-03  NaN\r\n\r\nIn [15]: df[~df.isnull()] = None\r\nTypeError: Cannot do inplace boolean setting on mixed-types with a non np.nan value\r\n\r\nIn [16]: df.where(df.notnull(), None)\r\nOut[16]: \r\n           A     B\r\n0 2013-01-01     1\r\n1        NaT     2\r\n2 2013-01-03  None\r\n```\r\n\r\nnote that [15] we don't allow; [16] is not in-place but the same operation.\r\n\r\nThe issue is that when you reconstruct A we *alway* infer to datetimes, IOW, we don't allow np.nan, None or any null value to exist in a datetime dtype; instead these are coerced to ``NaT``.\r\n\r\n@grechut why exactly are you doing this and what is the utility? \r\nNote I even find [16].B odd, where we actually replace with a ``None``, even though ``np.nan`` is our numeric missing value marker.\r\n\r\nThe entire issue is that setting things to ``None`` forces ``object`` dtype, which is rarely what one wants."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285136547",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15613#issuecomment-285136547",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15613",
    "id": 285136547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTEzNjU0Nw==",
    "user": {
      "login": "grechut",
      "id": 1018985,
      "node_id": "MDQ6VXNlcjEwMTg5ODU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1018985?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grechut",
      "html_url": "https://github.com/grechut",
      "followers_url": "https://api.github.com/users/grechut/followers",
      "following_url": "https://api.github.com/users/grechut/following{/other_user}",
      "gists_url": "https://api.github.com/users/grechut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grechut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grechut/subscriptions",
      "organizations_url": "https://api.github.com/users/grechut/orgs",
      "repos_url": "https://api.github.com/users/grechut/repos",
      "events_url": "https://api.github.com/users/grechut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grechut/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T19:07:32Z",
    "updated_at": "2017-03-08T19:07:32Z",
    "author_association": "NONE",
    "body": "Thanks for the response! :)\r\n\r\nSorry for not copy-pastable example. (`pd.read_clipboard` would handle it but that's not convenient way :) )\r\n\r\nOur use case: We have a very brutal method that sanitizes all `None-like` values (`np.nan` etc) to `None`. It is being run before sending data to database or before exposing data in the API endpoints. We need it because SQLAlchemy is not extra handling `None-like` values.\r\n\r\nSo what is unclear/confusing is that `float64` series is changed to `object` and gets `None`, while series of type `datetime64[ns]` is silently handled in a different way.\r\n\r\n`Note I even find [16].B odd,` I can assume that dropping this pattern would be a very breaking change where people would get lots of weird bugs.\r\n\r\n\r\nI thought that maybe for our case, we should serialize before sending values to the database:\r\n```\r\nIn [29]: json.loads(df.to_json(orient='records'))\r\nOut[29]: \r\n[{u'A': 1356998400000, u'B': 1.0},\r\n {u'A': None, u'B': 2.0},\r\n {u'A': 1357171200000, u'B': None}]\r\n```\r\nBut that's an extra step to perform. With large datasets, it can be significant step.\r\n\r\nAlso though about using `to_dict`, but it does not convert to `None`:\r\n```\r\nIn [32]: df.to_dict('r')\r\nOut[32]: \r\n[{'A': Timestamp('2013-01-01 00:00:00'), 'B': 1.0},\r\n {'A': NaT, 'B': 2.0},\r\n {'A': Timestamp('2013-01-03 00:00:00'), 'B': nan}]\r\n```\r\n..and I felt that it would be more intuitive to return here `None` instead of `NaT` and `nan`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285448064",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15613#issuecomment-285448064",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15613",
    "id": 285448064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQ0ODA2NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T19:05:45Z",
    "updated_at": "2017-03-09T19:05:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@grechut the way IIRC this is handled in ``to_sql`` is you first cast to ``object`` the entire frame, then use where to replace things.\r\n\r\n```\r\nIn [1]: df = pd.DataFrame({'A':[pd.Timestamp('20130101'),pd.NaT,pd.Timestamp('20130103')],'B':[1,2,np.nan]})\r\n   ...: \r\n\r\nIn [2]: df\r\nOut[2]: \r\n           A    B\r\n0 2013-01-01  1.0\r\n1        NaT  2.0\r\n2 2013-01-03  NaN\r\n\r\nIn [3]: df.dtypes\r\nOut[3]: \r\nA    datetime64[ns]\r\nB           float64\r\ndtype: object\r\n\r\nIn [4]: df.astype(object)\r\nOut[4]: \r\n                     A    B\r\n0  2013-01-01 00:00:00    1\r\n1                  NaT    2\r\n2  2013-01-03 00:00:00  NaN\r\n\r\nIn [5]: df2 = df.astype(object)\r\n\r\nIn [8]: df2.where(df2.notnull(), None)\r\nOut[8]: \r\n                     A     B\r\n0  2013-01-01 00:00:00     1\r\n1                 None     2\r\n2  2013-01-03 00:00:00  None\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285448437",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15613#issuecomment-285448437",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15613",
    "id": 285448437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQ0ODQzNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T19:07:05Z",
    "updated_at": "2017-03-09T19:07:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "see also this comment: https://github.com/pandas-dev/pandas/issues/15533#issuecomment-285442956 which is a similar issue. we have to come up with a good API for this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/289012042",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15613#issuecomment-289012042",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15613",
    "id": 289012042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTAxMjA0Mg==",
    "user": {
      "login": "grechut",
      "id": 1018985,
      "node_id": "MDQ6VXNlcjEwMTg5ODU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1018985?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grechut",
      "html_url": "https://github.com/grechut",
      "followers_url": "https://api.github.com/users/grechut/followers",
      "following_url": "https://api.github.com/users/grechut/following{/other_user}",
      "gists_url": "https://api.github.com/users/grechut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grechut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grechut/subscriptions",
      "organizations_url": "https://api.github.com/users/grechut/orgs",
      "repos_url": "https://api.github.com/users/grechut/repos",
      "events_url": "https://api.github.com/users/grechut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grechut/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T12:39:11Z",
    "updated_at": "2017-03-24T12:41:24Z",
    "author_association": "NONE",
    "body": "So maybe `pandas.DataFrame.where.raise_on_error` should inform that you're trying to perform operation that would results with result that might be different from what you'd expect.\r\n\r\nAccording to the docs `raise_on_error : Whether to raise on invalid data types (e.g. trying to where on strings)`. So in this case it's `trying to where on DateTime column where type implies that null-like values are forced to be NaTs`.\r\n\r\nAnother note, after reading docs, I thought that `pandas.DataFrame.where.try_cast=False` should allow for implicit conversion of type. So my thoughts were:\r\n- `try_cast == True` : cast back to DateTime\r\n- `try_cast == False` : cast to type implied by `other` values.\r\n\r\nBut it didn't work this way.\r\n\r\nAll those remarks are API-wise. Implementation-wise they might be hard and having little trade-off. So maybe just raise warning/error (partially pseudocode):\r\n```Python\r\nif column.dtype == 'datetime' and column_has_NaTs\r\n    and other is not pd.NaT and pd.isnull(other):\r\n    raise ValueError(\r\n        \"Trying to replace NaT with {other} would require changing of {column.name} type.\"\r\n    )\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/289028720",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15613#issuecomment-289028720",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15613",
    "id": 289028720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTAyODcyMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T13:54:47Z",
    "updated_at": "2017-03-24T13:54:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "note #14968 .\r\n\r\nSo this is coerce here:\r\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/core/internals.py#L2277\r\n\r\nThis is correct, though I understand you want a different result. You *can* disambiguating ``None`` and other nulls here. A solution would be to if you detect exactly an ``None`` null, then you can change the block to ``object`` and repeat.\r\n\r\nThis would work in this case, but likely will break other things. You can see what breaks and we can go from there.\r\n\r\nNote this *same* thinking would also change in a ``TimedeltaBlock``."
  }
]
