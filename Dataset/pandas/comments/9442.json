[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73384908",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9442#issuecomment-73384908",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9442",
    "id": 73384908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMzg0OTA4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-07T21:51:11Z",
    "updated_at": "2015-02-07T21:51:11Z",
    "author_association": "MEMBER",
    "body": "@tjcrone please add an example of the output you see from a command and what exactly you expected.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73385609",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9442#issuecomment-73385609",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9442",
    "id": 73385609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMzg1NjA5",
    "user": {
      "login": "tjcrone",
      "id": 5667194,
      "node_id": "MDQ6VXNlcjU2NjcxOTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5667194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjcrone",
      "html_url": "https://github.com/tjcrone",
      "followers_url": "https://api.github.com/users/tjcrone/followers",
      "following_url": "https://api.github.com/users/tjcrone/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjcrone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjcrone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjcrone/subscriptions",
      "organizations_url": "https://api.github.com/users/tjcrone/orgs",
      "repos_url": "https://api.github.com/users/tjcrone/repos",
      "events_url": "https://api.github.com/users/tjcrone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjcrone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-07T22:09:40Z",
    "updated_at": "2015-04-04T19:04:53Z",
    "author_association": "NONE",
    "body": "When the dataframe is very large, in the case of the first example, the output is:\n\n```\nIn [8]: df.describe()\nOut[8]: \n| tdiff | fdiff\ncount | 131520 | 131520.000000\nmean | 0 days 03:14:29.151921 | 5.005132\nstd | 2 days 21:21:04.522906 | 2.889636\nmin | 0 days 00:00:03.949751 | 0.000046\n25% | 2 days 12:09:09.231888 | 2.506357\n50%  | 5 days 00:27:26.602058  | 5.019058\n75% | 7 days 12:12:39.632537 | 7.508792\nmax | 9 days 23:59:55.066284 | 9.999943\n```\n\nI expect the mean in tdiff to mirror fdiff. When the dataframe is not large we get:\n\n```\nOut[15]: \n |  tdiff  |  fdiff\ncount | 8784 | 8784.000000\nmean | 4 days 22:56:31.430177 | 4.955919\nstd | 2 days 21:47:46.782711 | 2.908180\nmin | 0 days 00:00:01.128115 | 0.000013\n25%  | 2 days 10:26:07.091579 | 2.434804\n50% | 4 days 21:41:41.835346 | 4.903956\n75% | 7 days 11:48:15.255344 | 7.491843\nmax  | 9 days 23:57:21.197158 |  9.998162\n```\n\nWhich is the expected result. The second column is calculated by taking the seconds and converting them to floats. I believe that the timedelta64 object being used in the mean function may be overflowing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73386332",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9442#issuecomment-73386332",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9442",
    "id": 73386332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMzg2MzMy",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-07T22:27:27Z",
    "updated_at": "2015-02-07T22:27:27Z",
    "author_association": "MEMBER",
    "body": "Ah, yes. This does look like an overflow issue.\n\nIn fact, we do not allow aggregations like mean for datetime64 objects for exactly these sort of reasons:\n\n```\nIn [19]: df.dates1.mean()\nTypeError: reduction operation 'mean' not allowed for this dtype\n```\n\nIn this case, it looks like we have only inconsistently disabled it for timedelta64. Compare:\n\n```\nIn [21]: df.describe()\nOut[21]:\n                        tdiff          fdiff\ncount                  131520  131520.000000\nmean   0 days 02:46:03.645599       4.985393\nstd    2 days 21:10:21.517002       2.882193\nmin    0 days 00:00:12.732912       0.000147\n25%    2 days 11:41:42.032980       2.487292\n50%    4 days 23:23:59.916127       4.974999\n75%    7 days 11:28:44.708439       7.478295\nmax    9 days 23:59:52.538085       9.999914\n\nIn [22]: df.mean()\nOut[22]:\nfdiff    4.985393\ndtype: float64\n```\n\nSo the immediate consistency fix would be to make aggregation on timedelta64 objects always raises an error/skips. In the long term, it would be nice to fully support appropriate aggregation operations for datetime and timedelta types. Let me if you're interested in working on that...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73411182",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9442#issuecomment-73411182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9442",
    "id": 73411182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDExMTgy",
    "user": {
      "login": "tjcrone",
      "id": 5667194,
      "node_id": "MDQ6VXNlcjU2NjcxOTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5667194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjcrone",
      "html_url": "https://github.com/tjcrone",
      "followers_url": "https://api.github.com/users/tjcrone/followers",
      "following_url": "https://api.github.com/users/tjcrone/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjcrone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjcrone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjcrone/subscriptions",
      "organizations_url": "https://api.github.com/users/tjcrone/orgs",
      "repos_url": "https://api.github.com/users/tjcrone/repos",
      "events_url": "https://api.github.com/users/tjcrone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjcrone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-08T13:40:46Z",
    "updated_at": "2015-02-08T13:40:46Z",
    "author_association": "NONE",
    "body": "You showed that the mean of a datetime64 object is not returned. That seems appropriate. With timedelta64 objects, an incorrect value is returned when calling mean directly. I don't see any inconsistencies, just incorrect values:\n\n``` python\nIn [2]: df.tdiff.mean()\nOut[2]:\nTimedelta('0 days 02:40:53.248336')\n```\n\nWhat is especially strange is that std() returns the correct value, because std() should require the correct mean value:\n\n``` python\nIn [4]: df.tdiff.std()\nOut[4]:\nTimedelta('2 days 21:06:29.824063')\n```\n\nA correct calculation of the mean for timedeltas is a one-liner. Please feel free to incorporate:\n\n``` python\nIn [12]: pd.to_timedelta(df.tdiff.apply(lambda x: float(x.item())).sum()/len(df.tdiff.index))\nOut[12]:\nTimedelta('4 days 23:33:47.520090')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73411670",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9442#issuecomment-73411670",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9442",
    "id": 73411670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDExNjcw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-08T13:53:43Z",
    "updated_at": "2015-02-08T13:53:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "the `std` is a marginal algo that will not overflow, mean however is simpy `sum()/n`, and `sum()` does overflow.\n\nThis is because precision is at the ns level. and when summing these overflow is pretty easy. To work-around you can change the precision and it will work. \n\n```\npd.Timedelta(df['tdiff'].astype('timedelta64[ms]').mean(),unit='ms')\nOut[21]: Timedelta('5 days 00:15:58.979021')\n```\n\n@tjcrone you generally do not want to use `.apply` if there are vectorized operations available. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73411739",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9442#issuecomment-73411739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9442",
    "id": 73411739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDExNzM5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-08T13:55:45Z",
    "updated_at": "2015-02-08T13:55:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tjcrone if you are interested in doing a pull-request. Would be ok with doing something like the above (its actually easy as you don't have to worry about conversions, just divide the i8 by say 1e6 before and after mean), in `core.internals.nansum` only for the i8 (maybe look at the other functions to see if they need this fix)\n"
  }
]
