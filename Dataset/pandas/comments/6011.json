[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32779911",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-32779911",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 32779911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzc5OTEx",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-20T17:31:06Z",
    "updated_at": "2014-01-20T17:31:06Z",
    "author_association": "NONE",
    "body": "cannot reproduce this with '0.13.0-246-g1e1907c':\n\n``` python\nIn [1]: x=[dict(a=1,b=2),dict(a=2,b=2)]\n   ...: pd.DataFrame.from_records(x)\n\nOut[1]: \n   a  b\n0  1  2\n1  2  2\n```\n\nCan you provide a self contained example that demonstrates this issue? preferably using\nless exclamation marks in the process.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32793741",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-32793741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 32793741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzkzNzQx",
    "user": {
      "login": "tinproject",
      "id": 3742174,
      "node_id": "MDQ6VXNlcjM3NDIxNzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3742174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tinproject",
      "html_url": "https://github.com/tinproject",
      "followers_url": "https://api.github.com/users/tinproject/followers",
      "following_url": "https://api.github.com/users/tinproject/following{/other_user}",
      "gists_url": "https://api.github.com/users/tinproject/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tinproject/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tinproject/subscriptions",
      "organizations_url": "https://api.github.com/users/tinproject/orgs",
      "repos_url": "https://api.github.com/users/tinproject/repos",
      "events_url": "https://api.github.com/users/tinproject/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tinproject/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-20T20:22:48Z",
    "updated_at": "2014-01-20T20:22:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "You only get to that part of code if your data container it's an iterator type (have `__next__()` method). Which kind of object are you passing to the DataFrame.from_records() funcion? With whitch pameters?\nAre you sure that you container only yields 100 values?\n\nYou can test:\n\n```\nfor i in range(200):\n    print(i, next(data_container))\n```\n\nYou should get an StopIteration exception after the 99 (100th) value if its ok.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33056093",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33056093",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33056093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDU2MDkz",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-22T19:09:37Z",
    "updated_at": "2014-01-22T19:09:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could you post a minimal example that reproduces this issue?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33138803",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33138803",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33138803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTM4ODAz",
    "user": {
      "login": "museghost",
      "id": 6452452,
      "node_id": "MDQ6VXNlcjY0NTI0NTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6452452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/museghost",
      "html_url": "https://github.com/museghost",
      "followers_url": "https://api.github.com/users/museghost/followers",
      "following_url": "https://api.github.com/users/museghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/museghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/museghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/museghost/subscriptions",
      "organizations_url": "https://api.github.com/users/museghost/orgs",
      "repos_url": "https://api.github.com/users/museghost/repos",
      "events_url": "https://api.github.com/users/museghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/museghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T16:15:24Z",
    "updated_at": "2014-01-23T16:26:27Z",
    "author_association": "NONE",
    "body": "For completing my project, I am afraid to response delayed.\n\nHere is an procedure how to find this behavior.  Before starting analysis, it is not simple to reproduce with a simple code because this issue is occurred with an special condition as below.\n\nAssumption : PEEWEE (2.1.7) as an ORM for MySQL / CPython 3.3.3 \n1. retrieving data from MySQL and then making them as a tuple.\n   \n   executions = Execution() # this is a model by PEEWEE\n   items = executions.select().where((Execution.Trading Server == \"1\")).tuples()\n   qr = items.execute() \n\nPlease do not suspect the PEEWEE get a wrong records. PEEWEE is working fine.\n1. Converting the tuple to DataFrame. (*\\* important part **) \n   \n   df = pd.DataFrame.from_records(qr, columns=Executions._meta.get_field_names())\n\nNow, let's jump into the code \"frame.py\" of Pandas.\n\n1) In the above line, DataFrame recognized the \"qr\" object as \"iterator\". So, it runs 738 line as below.\n2) And then, the code goes to 744 or 746 line. Due to this code, \"first_row\" object gets the first record from PEEWEE result.\n3) (**) At 754 line, \"values\" object get the result of \"first_row\", that is, the first record of the PEEWEE result.\n4) (**) If nrows is None, the line 759 is excuted. At this point, you need to think this code more logical.\n    Before excuting \"values += list(data)\", values has already the \"first_row\".  So, when executing the line 759, the \"values\" object finally faces the situation that is the first and second row are duplicated as below.\n\n```\n   before 759 line, \n   values = [\"1st record\"],\n\n   after 759 line,\n   values = [\"1st record\", \"1st record\", \"2nd record\",....etc...]\n```\n\n5) Even the codes between 761 and 766 makes the same result as above because of the line \"763\" values.append(row)\n\n![2014-01-24 01 05 31](https://f.cloud.github.com/assets/6452452/1986103/318ad1b6-8448-11e3-9240-c660ac54c207.png)\n1. Conclusion : To avoid this issue, \n   - at 754 line should be \"values = []\"\n   - at 761 line should be \"i=0\".\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33139482",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33139482",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33139482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTM5NDgy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T16:21:15Z",
    "updated_at": "2014-01-23T16:21:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost w/o a minimal reproducible example this cannot even be tested.\n\nTake the tuples that are generated from your SQL process and try to create an example from them (obfuscate the date if necessary if its not showable)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33142206",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33142206",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33142206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQyMjA2",
    "user": {
      "login": "museghost",
      "id": 6452452,
      "node_id": "MDQ6VXNlcjY0NTI0NTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6452452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/museghost",
      "html_url": "https://github.com/museghost",
      "followers_url": "https://api.github.com/users/museghost/followers",
      "following_url": "https://api.github.com/users/museghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/museghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/museghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/museghost/subscriptions",
      "organizations_url": "https://api.github.com/users/museghost/orgs",
      "repos_url": "https://api.github.com/users/museghost/repos",
      "events_url": "https://api.github.com/users/museghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/museghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T16:44:32Z",
    "updated_at": "2014-01-23T16:48:19Z",
    "author_association": "NONE",
    "body": "@jreback here is the sample and please think the above part of 'frame.py' logically.  This is not a technical bug. It is a logical thing as emphased !\n\n```\nexecutions = Executions()\nitems = executions.select().where(\n    (Executions.TradingServer == \"1\")).tuples()\nqr = items.execute()\nprint(qr)\n\ncnt = Counter(item[0] for item in qr)\nprint(\"len(cnt) : %d\" % len(cnt))\n\nitemsCount = 0\nfor item in qr:\n    itemsCount = itemsCount + 1\nprint(\"itemCount %d\" % itemsCount)\n\ndf = pd.DataFrame.from_records(qr, columns=CME.CMEExecution._meta.get_field_names())\nprint(df.Id.size)\nprint(df)\n```\n\n----- << result >> -------------------------------------------------------------------------------------------------------------\n\n<peewee.TuplesQueryResultWrapper object at 0x7f6479a48dd0>\nlen(cnt) : 8204\nitemCount 8204\n8205\n[8205 rows x 13 columns]\n8205\n    Id  ExecId    Side OrderType  \\\n0    1     641     B         L  \n1    1     641     B         L  \n2    2     652     S         L   \n\nas you see, the DataFrame makes one more rows as metioned.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33142483",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33142483",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33142483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQyNDgz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T16:46:59Z",
    "updated_at": "2014-01-23T16:46:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost I suspect the problem is that qr is NOT a list of tuples, but some other type of object (like a list of Row objects or something). Try this w/o the sql in the mix and it works just fine. That's why we have tests.\n\nTry using `pd.read_sql` and see\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33143672",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33143672",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33143672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQzNjcy",
    "user": {
      "login": "museghost",
      "id": 6452452,
      "node_id": "MDQ6VXNlcjY0NTI0NTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6452452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/museghost",
      "html_url": "https://github.com/museghost",
      "followers_url": "https://api.github.com/users/museghost/followers",
      "following_url": "https://api.github.com/users/museghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/museghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/museghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/museghost/subscriptions",
      "organizations_url": "https://api.github.com/users/museghost/orgs",
      "repos_url": "https://api.github.com/users/museghost/repos",
      "events_url": "https://api.github.com/users/museghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/museghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T16:58:00Z",
    "updated_at": "2014-01-23T16:58:57Z",
    "author_association": "NONE",
    "body": "@jreback Before posting this issue, I expected how this issue was going on. You know, this is \"logical\" thing, not a technical or simple bug.\nThe result is not matter of problem.  The problem is that the logicial procedure how to manage \"values\" object in the frame.py code.\n\nAs mentioned in my previous post, whatever the qr object is tuple or not, please look at around 754 line and 759 line. Those lines can make the duplicated rows like that.\n\n   before 759 line, \n   values = [\"1st record\"],\n\n   after 759 line,\n   values = [\"1st record\", \"1st record\", \"2nd record\",....etc...]\n\nThat's the problem\n\nyes, I understand that if the qr object is original and simple dictionary or tuples, the total counts might be same because Python gurantees that.\nHowever, if not, frame.py copies all data from user's ojbect to their internal \"values\" object. that's the problem. what I want to fix in frame.py's logic.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33145240",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33145240",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33145240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ1MjQw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:13:15Z",
    "updated_at": "2014-01-23T17:13:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost \n\ntheir may be a bug. but unless we have a reproducible test, then how does this help?\n\nsomeone may change the code in the future and may change whatever code is changed now.\n\nthat does noone any good.\n\nand if it cannot be reproduced w/o the SQL embeded then I highly doubt it is a bug in that part of the code.\n\ncode inspection only goes so far.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33146169",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33146169",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33146169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2MTY5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:22:16Z",
    "updated_at": "2014-01-23T17:22:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost if you look a little higher in the code, the first of the values are explicity popped off of the iterator (`next(data)`; so don't think your duplicates are causes by this part of the code\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33146438",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33146438",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33146438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2NDM4",
    "user": {
      "login": "museghost",
      "id": 6452452,
      "node_id": "MDQ6VXNlcjY0NTI0NTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6452452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/museghost",
      "html_url": "https://github.com/museghost",
      "followers_url": "https://api.github.com/users/museghost/followers",
      "following_url": "https://api.github.com/users/museghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/museghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/museghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/museghost/subscriptions",
      "organizations_url": "https://api.github.com/users/museghost/orgs",
      "repos_url": "https://api.github.com/users/museghost/repos",
      "events_url": "https://api.github.com/users/museghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/museghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:24:57Z",
    "updated_at": "2014-01-23T17:24:57Z",
    "author_association": "NONE",
    "body": "@jreback SQL is not a part of problem.  The root cause is that when any iterator object passes to from_records() in frame.py, this duplicated issue is always happened becasue of the lines around 754 ~ 766.\n\nIt is a logical thing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33146558",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33146558",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33146558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2NTU4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:26:08Z",
    "updated_at": "2014-01-23T17:26:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost prove it by making an example which duplicates this w/o the SQL\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33146682",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33146682",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33146682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2Njgy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:27:14Z",
    "updated_at": "2014-01-23T17:27:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost I'll be the first to admit to a bug, but w/o a definitive test case this is impossible to tell\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33146699",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33146699",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33146699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2Njk5",
    "user": {
      "login": "museghost",
      "id": 6452452,
      "node_id": "MDQ6VXNlcjY0NTI0NTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6452452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/museghost",
      "html_url": "https://github.com/museghost",
      "followers_url": "https://api.github.com/users/museghost/followers",
      "following_url": "https://api.github.com/users/museghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/museghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/museghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/museghost/subscriptions",
      "organizations_url": "https://api.github.com/users/museghost/orgs",
      "repos_url": "https://api.github.com/users/museghost/repos",
      "events_url": "https://api.github.com/users/museghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/museghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:27:22Z",
    "updated_at": "2014-01-23T17:27:22Z",
    "author_association": "NONE",
    "body": "@jreback yes. you are almost closed to the root cause. In the line 754, value=[first_row] is the root of this problem. that line shoudl be value = [].\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33146879",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33146879",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33146879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2ODc5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:29:07Z",
    "updated_at": "2014-01-23T17:29:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost pls put up a test case to support your 'view' that this is a bug\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33146960",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33146960",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33146960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2OTYw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:29:55Z",
    "updated_at": "2014-01-23T17:29:55Z",
    "author_association": "NONE",
    "body": "@jreback , I suggest we close pending a self-contained example. enough is enough.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33147136",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33147136",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33147136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ3MTM2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T17:31:35Z",
    "updated_at": "2014-01-23T17:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost \n\nif you have a self-contained example, pls open a new issue\n\nthank you\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33169962",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33169962",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33169962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTY5OTYy",
    "user": {
      "login": "tinproject",
      "id": 3742174,
      "node_id": "MDQ6VXNlcjM3NDIxNzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3742174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tinproject",
      "html_url": "https://github.com/tinproject",
      "followers_url": "https://api.github.com/users/tinproject/followers",
      "following_url": "https://api.github.com/users/tinproject/following{/other_user}",
      "gists_url": "https://api.github.com/users/tinproject/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tinproject/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tinproject/subscriptions",
      "organizations_url": "https://api.github.com/users/tinproject/orgs",
      "repos_url": "https://api.github.com/users/tinproject/repos",
      "events_url": "https://api.github.com/users/tinproject/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tinproject/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T21:22:22Z",
    "updated_at": "2014-01-23T21:22:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@museghost you are wrong on what are happening. Pandas code, even it's not the best code, works well, at least with generators.\n\nThe fault it's your PEEWEE _qr_ object that it's an iterator object and an iterable object at the same time.\nBoth things are not the same, an iterator have a `__next__()` method that returns the current value and steps for the next one. An iterable have a `__iter__()` method that returns an iterator.\n\nGenerators have both protocols, they are iterator and iterable at the same time, but they track the position of the next value.\n\nI thought the problem it's the implementation of the iterator protocol on the _qr_ PEEWEE object. Firtsly pandas detects the object as an iterator and read the first value, then read the rest of the values using `list()` that use the iterable protocol. When you call `iter(qr)` surely the _qr_ object returns an iterator to the whole container, starting at the first position. If you previously call `next(qr)` the iterator returned with `iter(qr)` should point to the second element, not the first one, hence the duplicated values.\n\nCounter class works with the iterable protocol, not the iterator, so it's not valid for count.\n\nYou can test the behaviour of your _qr_ object:\n\n```\n# obtain qr object\nprint(next(qr))\n>>> First value printed\nprint(next(qr))\n>>> Second value printed\nprint(next(iter(qr)))\n>>> Should be the third value the printed.\n```\n\n@y-p, @jreback if you want this weekend I could make some refactor and clean to the from_records method to ensure that only the iterator protocol is used, and add some test to that kind of mixed type objects.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33170976",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33170976",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33170976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTcwOTc2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-23T21:33:20Z",
    "updated_at": "2014-01-23T21:33:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tinproject go for it!\n\npls create a separate issue as well\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33188598",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33188598",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33188598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTg4NTk4",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-24T01:12:55Z",
    "updated_at": "2014-01-24T01:12:55Z",
    "author_association": "MEMBER",
    "body": "@museghost please behave yourself in the future. your treatment of the lead pandas developers (which I see has already been redacted from history) is unacceptable. these are highly technical, experienced developers who are working to make Python a better data language for no compensation; if you would bother looking at the statistics for the project (https://github.com/pydata/pandas/graphs/contributors) you would see that. thank you\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33281882",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33281882",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33281882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjgxODgy",
    "user": {
      "login": "museghost",
      "id": 6452452,
      "node_id": "MDQ6VXNlcjY0NTI0NTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6452452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/museghost",
      "html_url": "https://github.com/museghost",
      "followers_url": "https://api.github.com/users/museghost/followers",
      "following_url": "https://api.github.com/users/museghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/museghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/museghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/museghost/subscriptions",
      "organizations_url": "https://api.github.com/users/museghost/orgs",
      "repos_url": "https://api.github.com/users/museghost/repos",
      "events_url": "https://api.github.com/users/museghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/museghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-25T05:45:11Z",
    "updated_at": "2014-01-25T05:45:11Z",
    "author_association": "NONE",
    "body": "First of all, especially for jreback and y-p,  I deeply apologize my rude attitude for you.  There is no execue, It was my fault.\nI know how hard you contribute this project for everyone, and I always have appreciated you and your team.\nIn the future, I am sure I am going to discuss any issue with the good manner.\n\n@tinproject @y-p @jreback :\nFor technical side, yes, tinproject's saying is right.  When analyzing qr object in PEEWEE, the below line is found.\nIt is about \"**iter**\" function and self.**idx sets 0 everytime when __iter** is called. That's the main root cause of the duplicated issue.\nIn fact, when qr object is called in \"for\" loop or list(), \"for\" loop or list() called the **iter** of the object (in the case, \"qr\"), and then qr always returns the first items.\n\n1282   def **iter**(self):\n1283         print(\"**iter**\")\n1284         self.__idx = 0\n1285 \n1286         if not self._populated:\n1287             return self\n1288         else:\n1289             return iter(self._result_cache)\n\nSo, my query is the following:\nif any user of PANDAS uses their own object with customized iterator or generator, how does PANDAS handle such complated or customized case ?\n\nThank you all\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/33427024",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6011#issuecomment-33427024",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6011",
    "id": 33427024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDI3MDI0",
    "user": {
      "login": "tinproject",
      "id": 3742174,
      "node_id": "MDQ6VXNlcjM3NDIxNzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3742174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tinproject",
      "html_url": "https://github.com/tinproject",
      "followers_url": "https://api.github.com/users/tinproject/followers",
      "following_url": "https://api.github.com/users/tinproject/following{/other_user}",
      "gists_url": "https://api.github.com/users/tinproject/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tinproject/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tinproject/subscriptions",
      "organizations_url": "https://api.github.com/users/tinproject/orgs",
      "repos_url": "https://api.github.com/users/tinproject/repos",
      "events_url": "https://api.github.com/users/tinproject/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tinproject/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-27T21:49:51Z",
    "updated_at": "2014-01-27T21:49:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't know if this is stablished on Python PEPs but if your object have to comply generator behaviour track the position of the iterator.\n\nFor your case to skip the duplicates values:\n\n```\ndf = pd.DataFrame.from_records(list(qr))\n```\n\nUntil there is a better way to load internally from an iterator, the result preformance will be the same. \n\nI'm still owe a PR to ensure that only the iterator protocol is used, I'm looking for time.\n"
  }
]
