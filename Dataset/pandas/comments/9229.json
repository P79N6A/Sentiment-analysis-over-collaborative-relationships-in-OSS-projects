[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69577540",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69577540",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69577540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTc3NTQw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T14:32:20Z",
    "updated_at": "2015-01-12T14:32:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "If this syntax were supported (and not that difficult), IOW, a multi-assignment.\nThen `.mutate` would be just sugar.\n\n```\nIn [1]: df = DataFrame(np.random.randn(5,3),columns=list('abc'))\n\nIn [2]: df\nOut[2]: \n          a         b         c\n0 -1.818219 -0.550046  0.705300\n1  0.865112  0.130718 -0.117105\n2 -0.914553  0.575054 -0.881258\n3 -1.417902  1.925067 -2.121546\n4  0.604826 -0.461150  0.994271\n\nIn [3]: df[['d','e']] = df['a'] + 1, df['b'] + 1\nKeyError: \"['d' 'e'] not in index\"\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69577696",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69577696",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69577696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTc3Njk2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T14:33:27Z",
    "updated_at": "2015-01-12T14:33:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger can you add a mini example (of split-apply-combine), showing how current (and potentially new) syntax would work?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69580642",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69580642",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69580642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTgwNjQy",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T14:52:48Z",
    "updated_at": "2015-01-12T14:52:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added an example to the end of the original post.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69581210",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69581210",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69581210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTgxMjEw",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T14:56:38Z",
    "updated_at": "2015-01-12T14:56:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Allowing multiple new columns to be added shouldn't be too hard. dplyr does allow calculations to refer to new columns within the _same_ mutate, e.g.\n\n``` R\nmutate(flights,\n   gain = arr_delay - dep_delay,\n   gain_per_hour = gain / (air_time / 60)\n)\n```\n\nThe way I'm seeing the function signature right now is `df.mutate(**kwargs)`, which may make that example a bit tricky since dicts aren't ordered. We might be able to workaround that though, but for now it could be split into two mutates.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69648607",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69648607",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69648607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQ4NjA3",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:23:24Z",
    "updated_at": "2015-01-12T21:23:24Z",
    "author_association": "MEMBER",
    "body": "I really like this idea. `mutate` is much better than dataframes with actual mutable state (as encouraged by Python's syntax).\n\n@TomAugspurger  I'm not sure what to make of this example:\n\n```\n(iris.query('sepal_length > 4.5')\n     .mutate(ratio=iris.sepal_length / iris.sepal_width)  # new part\n     .groupby(pd.cut(iris.ratio)).mean()\n)\n```\n\nIn particular, are you suggesting that `iris.sepal_length` on the second line should somehow refer to the queried version of the iris dataset?\n\nNote that @mrocklin added similar dplyr like syntax to blaze: https://github.com/ContinuumIO/blaze/pull/484\n\nThis is definitely a place where Python's syntax (and limited magic, which is usually a good thing) makes things a little trickier than in R.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69652150",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69652150",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69652150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjUyMTUw",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:45:03Z",
    "updated_at": "2015-01-12T21:45:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW, the semantics of `plyr`'s `transform`, mutate's predecessor, might be a better fit.\n\nTransform does not allow one new column in a mutate to depend on another new column in mutate.  It also doesn't have the word `mutate` in it, which is good if you want the operation to make a new `DataFrame`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69652250",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69652250",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69652250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjUyMjUw",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:45:43Z",
    "updated_at": "2015-01-12T21:46:38Z",
    "author_association": "MEMBER",
    "body": "I had the same question as @shoyer: \nIn your example, `iris` in `mutate` refers to the original `iris`, so the result of `iris.sepal_length / iris.sepal_width` cannot be added just like that to the frame. But this is also what `iris['ratio'] =  iris.sepal_length / iris.sepal_width` would do -> automatic label alignment, and only adding the values of the right hand side at the labels of the left-hand side. \nBut, if you do this after a query (what the chaining allows), you of course will calculate more than necessary.\n\nFurther, I was also thinking this looks very much like `append` (if you would have an `axis=1` argument, now `append` is just for rows). With as small hack to have it add columns:\n\n```\nIn [41]: (iris.query('sepal_length > 4.5')\n    ...:      .T.append(pd.Series(iris.sepal_length / iris.sepal_width, name='ratio')).T\n    ...:      .head())\n    ...: \nOut[41]: \n  sepal_length sepal_width petal_length petal_width species     ratio\n0          5.1         3.5          1.4         0.2  setosa  1.457143\n1          4.9           3          1.4         0.2  setosa  1.633333\n2          4.7         3.2          1.3         0.2  setosa   1.46875\n3          4.6         3.1          1.5         0.2  setosa  1.483871\n4            5         3.6          1.4         0.2  setosa  1.388889\n```\n\nThere are some things to work out, but I also certainly think such a feature would be a nice addition! I am not fully sure on the `mutate` name (but maybe it is because I am not a native speaker)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69653123",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69653123",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69653123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjUzMTIz",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:50:58Z",
    "updated_at": "2015-01-12T21:50:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry about the tricky example, but I guess it's a good one since it exposes a difficulty.\n\nIn my head I was thinking that it should refer to just the ones that meet the query of > 4.5, though obviously that's not how I wrote it. Maybe we have to go down the path of `eval`ing strings and have\n\n```\niris.query('sepal_length > 4.5').mutate('ratio=sepal_length / sepal_width')\n```\n\nbut I was wanting to avoid that.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69654039",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69654039",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69654039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjU0MDM5",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:56:17Z",
    "updated_at": "2015-01-12T21:56:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "The following is something like what Blaze does.  It's less dplyr-ish and not as well chained, but there are things that one just can't do in Python without macros\n\n```\ndf = iris[iris.sepal_length > 4.5]\ndf.transform(sepal_ratio = df.sepal_length / df.sepal_width, \n             petal_ratio = df.petal_length / df.petal_width)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69687238",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69687238",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69687238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5Njg3MjM4",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-13T02:45:43Z",
    "updated_at": "2015-01-13T02:45:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "A bit of a summary,\n- For now I think we should ignore the `query` bit of my original example.\n- Joris' point about this being similar to `append` is good. Should we just add  `axis` and `name` arguments to append (I don't think so)?\n- `transform` seems to be favored over `mutate`. We do already have a `transform` on GroupBy objects. `Groupby.transform`'s defining feature is that the returned DataFrame will be like-indexed. Whatever we have here will _not_ be like-indexed, is that potentially confusing? I'd be ok with `transform`\n\nI think @mrocklin's example in his last post strikes a good balance. I'll put together a PR.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69691738",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69691738",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69691738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjkxNzM4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-13T03:49:28Z",
    "updated_at": "2015-01-13T03:49:28Z",
    "author_association": "MEMBER",
    "body": "I was just talking about this with my co-worker and came up with another idea to try to replace the R's macros.\n\nWhat about doing an automatic `inject` to insert local variables when the argument is a function with no arguments? Basically, we can have macros as long as we insert `lambda:` first.\n\nFor example: `iris.mutate(ratio = lambda: sepal_length / sepal_width)`\n\nWith some black magic, we could even extend this other methods to make something very dplyr like:\n\n``` python\n(iris[lambda: sepal_length > 4.5]\n     .mutate(ratio = lambda: sepal_length / sepal_width)\n     .groupby(lambda: pd.cut(ratio))\n     .apply(lambda: ratio - ratio.mean()))\n```\n\nI'm not entirely sure this is a good idea! But it does make me less jealous of R users :).\n\nPersonally, I don't find the groupby `transform` method very useful (see #9235) and wouldn't mind deprecating it -- I always use `apply`. That said, new names are less confusing, especially since we might even want to allow `mutate` to act on groupby objects.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69692391",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69692391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69692391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjkyMzkx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-13T04:00:51Z",
    "updated_at": "2015-01-13T04:00:51Z",
    "author_association": "MEMBER",
    "body": "@jhorowitz-coursera wrote the very similar `ply_select` in [pandas-ply](https://github.com/coursera/pandas-ply). He uses a nice trick with `X` to automatically generate functions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69692719",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69692719",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69692719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjkyNzE5",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-13T04:06:20Z",
    "updated_at": "2015-01-13T04:06:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer that's kinda-awesome / evil.\n\n[mailing list](https://groups.google.com/forum/#!searchin/pydata/pandas-ply/pydata/zCpSnQ5r13s/_dDajwp43nYJ) discussion about pandas-ply.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69743295",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69743295",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69743295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NzQzMjk1",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-13T13:25:24Z",
    "updated_at": "2015-01-13T13:25:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm settling on a relatively simple implementation.\n\nsignature: `DataFrame.transform(**kwargs)`\n- the keyword is the name of the new column (existing columns are overwritten if there's a name conflict, as in dplyr)\n- the value is either\n  - called on self if it's callable. The callable should be a function of 1 argument, the DataFrame being called on.\n  - inserted otherwise\n\n``` python\nIn [7]: df.head()\nOut[7]: \n   sepal_length  sepal_width  petal_length  petal_width species\n0           5.1          3.5           1.4          0.2  setosa\n1           4.9          3.0           1.4          0.2  setosa\n2           4.7          3.2           1.3          0.2  setosa\n3           4.6          3.1           1.5          0.2  setosa\n4           5.0          3.6           1.4          0.2  setosa\n\nIn [8]: (df.query('species == \"virginica\"')\n           .transform(sepal_ratio=lambda x: x.sepal_length / x.sepal_width)\n           .head())\nOut[8]: \n     sepal_length  sepal_width  petal_length  petal_width    species  \\\n100           6.3          3.3           6.0          2.5  virginica   \n101           5.8          2.7           5.1          1.9  virginica   \n102           7.1          3.0           5.9          2.1  virginica   \n103           6.3          2.9           5.6          1.8  virginica   \n104           6.5          3.0           5.8          2.2  virginica   \n\n     sepal_ratio  \n100     1.909091  \n101     2.148148  \n102     2.366667  \n103     2.172414  \n104     2.166667  \n```\n\nThis way we can handle the query case, where you don't have a reference to the DataFrame being passed in and it's not _too_ magical (and it's easier to implement).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69744111",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69744111",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69744111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NzQ0MTEx",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-13T13:33:03Z",
    "updated_at": "2015-01-13T13:33:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Submitted a [PR](https://github.com/pydata/pandas/pull/9239) if you want to move the discussion there.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69846475",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69846475",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69846475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODQ2NDc1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-14T00:02:31Z",
    "updated_at": "2015-01-14T00:05:31Z",
    "author_association": "MEMBER",
    "body": "Just FYI, I think I'm going to put my separate \"thunk\" based proposal (with argument-less lambdas) into a separate package -- I already have a working [proof of concept](https://gist.github.com/shoyer/340cd362c8a4bd65645e).\n\nThe most annoying thing is ensure that new dataframes remain macro friendly... that requires writing a lot of wrappers (probably unavoidable).\n\nAlso, I haven't been able to come up with a way to write [hygentic macros](https://en.wikipedia.org/wiki/Hygienic_macro). Probably not possible in Python.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69853864",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69853864",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69853864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODUzODY0",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-14T01:20:48Z",
    "updated_at": "2015-01-14T01:20:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "You think a heavy handed approach to DSLs would gain traction? I've been experimenting with taking over evaluation completely via import hooks and IPython input transformers. \n\nhttps://github.com/dalejung/naginpy. \n\nIt's kind of all over the map as I have multiple use-cases in mind and figuring out how to support all of them cleanly. \n\nI had tried to get what I wanted via just AST transforms and fun stuff like contextmanagers that introduce temporary scopes. But they were always lacking the synatx I wanted.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69855391",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69855391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69855391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODU1Mzkx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-14T01:37:22Z",
    "updated_at": "2015-01-14T01:37:22Z",
    "author_association": "MEMBER",
    "body": "@dalejung What does it look like to enable your DSLs in a script? My gut is that full DSLs are probably too painful for me to integrate them into my workflows.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69857714",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-69857714",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 69857714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODU3NzE0",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-14T02:03:19Z",
    "updated_at": "2015-01-14T02:03:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer depends I suppose. The only hard requirement is that the Import machinery is installed. I generally run scripts via `%run` which works with my IPython profile. I don't think a straight `python script.py` will ever work, it would have to be a `python -m naginpy script.py`.\n\nHaven't decided how I want to signal modules on/off. I use a sentinel value for `datamodule` to tell it whether to use the custom loader. Might do the same with `naginpy`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70193507",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-70193507",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 70193507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTkzNTA3",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-16T01:14:34Z",
    "updated_at": "2015-01-16T01:14:34Z",
    "author_association": "NONE",
    "body": "@shoyer  @dalejung  there is also this: https://github.com/lihaoyi/macropy\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72708001",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-72708001",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 72708001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzA4MDAx",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T18:39:11Z",
    "updated_at": "2015-02-03T18:39:11Z",
    "author_association": "NONE",
    "body": "@TomAugspurger @jreback @shoyer  Have you guys seen this library? Has an interesting take on the situation https://github.com/coursera/pandas-ply \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72708409",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-72708409",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 72708409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzA4NDA5",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T18:41:21Z",
    "updated_at": "2015-02-03T18:41:21Z",
    "author_association": "MEMBER",
    "body": "@datnamer Yes, we have, see my comment above :).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/72731172",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9229#issuecomment-72731172",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9229",
    "id": 72731172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzMxMTcy",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-03T20:47:01Z",
    "updated_at": "2015-02-03T20:47:01Z",
    "author_association": "NONE",
    "body": "@shoyer  oops missed that, sorry for the noise\n"
  }
]
