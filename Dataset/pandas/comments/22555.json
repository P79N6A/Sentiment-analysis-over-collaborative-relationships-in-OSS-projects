[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/417892733",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-417892733",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 417892733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzg5MjczMw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-01T22:51:32Z",
    "updated_at": "2018-09-06T04:22:55Z",
    "author_association": "MEMBER",
    "body": "Interesting proposal!  As a (temporary) workaround, could you not save to disk and then read into memory by any chance?\r\n\r\nBTW, if you have ideas on how to implement in-memory compression, go for it!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418958420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-418958420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 418958420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODk1ODQyMA==",
    "user": {
      "login": "ZaxR",
      "id": 19669890,
      "node_id": "MDQ6VXNlcjE5NjY5ODkw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19669890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZaxR",
      "html_url": "https://github.com/ZaxR",
      "followers_url": "https://api.github.com/users/ZaxR/followers",
      "following_url": "https://api.github.com/users/ZaxR/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZaxR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZaxR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZaxR/subscriptions",
      "organizations_url": "https://api.github.com/users/ZaxR/orgs",
      "repos_url": "https://api.github.com/users/ZaxR/repos",
      "events_url": "https://api.github.com/users/ZaxR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZaxR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-06T04:09:34Z",
    "updated_at": "2018-09-06T04:09:34Z",
    "author_association": "NONE",
    "body": "Hey - thanks for the reply @gfyoung , and sorry for my delay in replying. The functions where I use this are part of a library, so temporarily saving to disk isn't ideal (can't be sure what the end-user's local environment will look like).\r\n\r\nMy thought was something like this as a workaround:\r\n\r\n```\r\nimport gzip\r\nfrom io import BytesIO\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [5, 6, 7, 8], \"C\": [9, 10, 11, 12]})\r\nb_buf = BytesIO()\r\nwith gzip.open(b_buf, 'wb') as f:\r\n    f.write(df.to_string().encode())\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418960315",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-418960315",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 418960315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODk2MDMxNQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-06T04:24:21Z",
    "updated_at": "2018-09-06T04:24:21Z",
    "author_association": "MEMBER",
    "body": "@ZaxR : Gotcha.  Interesting...I think it would be a solid enhancement nonetheless.  Would be open to proposals for implementation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/423399265",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-423399265",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 423399265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzM5OTI2NQ==",
    "user": {
      "login": "dhimmel",
      "id": 1117703,
      "node_id": "MDQ6VXNlcjExMTc3MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1117703?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhimmel",
      "html_url": "https://github.com/dhimmel",
      "followers_url": "https://api.github.com/users/dhimmel/followers",
      "following_url": "https://api.github.com/users/dhimmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhimmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhimmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhimmel/subscriptions",
      "organizations_url": "https://api.github.com/users/dhimmel/orgs",
      "repos_url": "https://api.github.com/users/dhimmel/repos",
      "events_url": "https://api.github.com/users/dhimmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhimmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-21T03:05:48Z",
    "updated_at": "2018-09-21T03:05:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that the compression argument should take effect when a file-like object is passed. This enhancement would likely include implementing zip writing support in _get_handle, which would address the frustration I had in https://github.com/pandas-dev/pandas/pull/22011#issuecomment-406831478."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429516271",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-429516271",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 429516271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTUxNjI3MQ==",
    "user": {
      "login": "silverdrake11",
      "id": 1569932,
      "node_id": "MDQ6VXNlcjE1Njk5MzI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1569932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/silverdrake11",
      "html_url": "https://github.com/silverdrake11",
      "followers_url": "https://api.github.com/users/silverdrake11/followers",
      "following_url": "https://api.github.com/users/silverdrake11/following{/other_user}",
      "gists_url": "https://api.github.com/users/silverdrake11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/silverdrake11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/silverdrake11/subscriptions",
      "organizations_url": "https://api.github.com/users/silverdrake11/orgs",
      "repos_url": "https://api.github.com/users/silverdrake11/repos",
      "events_url": "https://api.github.com/users/silverdrake11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/silverdrake11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T06:43:32Z",
    "updated_at": "2018-10-13T06:51:11Z",
    "author_association": "NONE",
    "body": "For the 'gzip' compression, `_get_handle()` is not being called when `BytesIO()` is passed. This causes it to fail at `csv.writer(gzip.GzipFile(fileobj=BytesIO()))` in csvs.py\r\n\r\nIf `_get_handle()` is called on `BytesIO()` then what happens is `csv.writer(TextIOWrapper(gzip.GzipFile(fileobj=BytesIO())))` which fails b/c GzipFile opens it as read only. Setting the mode will work `csv.writer(TextIOWrapper(gzip.GzipFile(fileobj=BytesIO(), mode=mode)))`\r\n\r\nThe 'bz2' compression fix is the same. 'xz' will not compress `BytesIO()` unless LZMACompressor is used. 'zip' has the custom workflow referenced by dhimmel, which complicates it further.\r\n\r\nThere is too much logic in _get_handle, and it is called many times for reading and for writing. One idea is for it to call _get_read_handle and _get_write_handle to split the logic. Or _get_handle_python2 and _get_handle_python3 could be an option.\r\n\r\nIn order to actually call `_get_handle()`on `BytesIO()`, the `elif hasattr(self.path_or_buf, 'write')` in csvs.py has to be changed so that `BytesIO()` doesn't end up there but `StringIO()` does. For Python 3 this is enough to fix it.\r\n\r\nFor Python 2, the exception about not supporting a custom encoding gets raised in _get_handle. This is b/c `CSVFormater()` sets `encoding='ascii'` while _get_handle expects it to be `None` which is actually 'ascii'.\r\n\r\nThis is the test code I was using:\r\n```python\r\nhello = BytesIO()\r\ntest = df.to_csv(hello, compression='gzip')\r\nprint(hello.getvalue())\r\n\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429912813",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-429912813",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 429912813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTkxMjgxMw==",
    "user": {
      "login": "dhimmel",
      "id": 1117703,
      "node_id": "MDQ6VXNlcjExMTc3MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1117703?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhimmel",
      "html_url": "https://github.com/dhimmel",
      "followers_url": "https://api.github.com/users/dhimmel/followers",
      "following_url": "https://api.github.com/users/dhimmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhimmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhimmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhimmel/subscriptions",
      "organizations_url": "https://api.github.com/users/dhimmel/orgs",
      "repos_url": "https://api.github.com/users/dhimmel/repos",
      "events_url": "https://api.github.com/users/dhimmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhimmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T16:00:37Z",
    "updated_at": "2018-10-15T16:00:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There is too much logic in _get_handle, and it is called many times for reading and for writing.\r\n\r\nI agree. Especially since there is no docstring to define what the function intends to support. \r\n\r\n> One idea is for it to call _get_read_handle and _get_write_handle to split the logic. Or _get_handle_python2 and _get_handle_python3 could be an option.\r\n\r\nI agree it may be helpful to split read/write and 2/3. However, with 2019 only a couple months away, the purging of 2 from pandas is just around the corner. It seems like any major changes should plan for a 3-only codebase (and hence benefit from the great simplification)?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429922627",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-429922627",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 429922627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTkyMjYyNw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T16:29:10Z",
    "updated_at": "2018-10-15T16:29:10Z",
    "author_association": "MEMBER",
    "body": "@dhimmel : I agree that the implementation should be 3-oriented.  If it's 2-oriented as well, great!  If not, I would still write it out but just hold off on the PR until the turn of the calendar year."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461927715",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-461927715",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 461927715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTkyNzcxNQ==",
    "user": {
      "login": "ZaxR",
      "id": 19669890,
      "node_id": "MDQ6VXNlcjE5NjY5ODkw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19669890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZaxR",
      "html_url": "https://github.com/ZaxR",
      "followers_url": "https://api.github.com/users/ZaxR/followers",
      "following_url": "https://api.github.com/users/ZaxR/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZaxR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZaxR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZaxR/subscriptions",
      "organizations_url": "https://api.github.com/users/ZaxR/orgs",
      "repos_url": "https://api.github.com/users/ZaxR/repos",
      "events_url": "https://api.github.com/users/ZaxR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZaxR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T19:58:14Z",
    "updated_at": "2019-02-08T19:58:14Z",
    "author_association": "NONE",
    "body": "@dhimmel and @gfyoung - Now that we've reached the new year/pandas release, any update on this enhancement? Would really love this capability :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/461936029",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22555#issuecomment-461936029",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22555",
    "id": 461936029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTkzNjAyOQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T20:27:01Z",
    "updated_at": "2019-02-08T20:27:01Z",
    "author_association": "MEMBER",
    "body": "@ZaxR : Thanks for the ping!  We're still in the process of releasing versions that are Python-2-compatible, so we might want to hold on this a little longer.  That being said, proposals are a pure Python-3-compatible implementation would be great 👍 "
  }
]
