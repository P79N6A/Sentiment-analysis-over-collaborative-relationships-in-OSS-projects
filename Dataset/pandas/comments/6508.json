[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36378395",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-36378395",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 36378395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mzc4Mzk1",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-28T18:14:39Z",
    "updated_at": "2014-02-28T18:14:39Z",
    "author_association": "MEMBER",
    "body": "Hm. Many datasets _do_ have this issue, but consider the amount of code needed to rename columns versus the amount of code needed to parse that new syntax (or something similar).\n\nRenaming columns is straightforward:\n\n``` python\ncols = df.columns\ncols = cols.map(lambda x: x.replace(' ', '_') if isinstance(x, (str, unicode)) else x)\ndf.columns = cols\n```\n\nThis is well tested and easy to debug. For more complicated replacement you can use regular expressions.\n\nThe things that go into parsing are markedly less straightforward:\n1. How would this tokenize? (This isn't so straightforward to me, there might be an easy way to do it, but it seems like you'd have to create a new token to disambiguate a syntax error from list construction and then map the whole thing to a valid Python identifier).\n2. How would this parse? (not too hard, it parses as a `ColumnNode` or some such object which gets looked up as a column in the frame)\n\nSomething that might be useful as a happy medium is a `df = pd.clean_columns(df)` function that will rename your columns to be valid Python identifiers so that you don't have to think too hard about it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36383107",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-36383107",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 36383107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzgzMTA3",
    "user": {
      "login": "socheon",
      "id": 5693301,
      "node_id": "MDQ6VXNlcjU2OTMzMDE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5693301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/socheon",
      "html_url": "https://github.com/socheon",
      "followers_url": "https://api.github.com/users/socheon/followers",
      "following_url": "https://api.github.com/users/socheon/following{/other_user}",
      "gists_url": "https://api.github.com/users/socheon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/socheon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/socheon/subscriptions",
      "organizations_url": "https://api.github.com/users/socheon/orgs",
      "repos_url": "https://api.github.com/users/socheon/repos",
      "events_url": "https://api.github.com/users/socheon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/socheon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-28T19:02:54Z",
    "updated_at": "2014-02-28T19:02:54Z",
    "author_association": "NONE",
    "body": "I am not sure about the implementation. Maybe we can use normal brackets instead like\n\n```\ndf.query('(col with space) < col')\n```\n\nAnyway, the `clean_columns` method sounds like a good idea to me. Maybe it could also be a keyword argument in the `read_csv` function.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36383668",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-36383668",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 36383668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzgzNjY4",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-28T19:08:34Z",
    "updated_at": "2014-02-28T19:08:34Z",
    "author_association": "MEMBER",
    "body": "@socheon Let's try to keep our discussion to a single issue (I tend to get off topic too!). If you think there should be a `clean_columns` argument to `read_csv`, please open another issue. \n\n@jreback What do you think about a top-level `clean_columns` function?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36383889",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-36383889",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 36383889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzgzODg5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-28T19:10:35Z",
    "updated_at": "2014-02-28T19:10:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think if u put quotes around the column name it might work on master\n\nthe fix for allowing & and | makes these be treAted like single tokens\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36383998",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-36383998",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 36383998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzgzOTk4",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-28T19:11:38Z",
    "updated_at": "2014-02-28T19:11:38Z",
    "author_association": "MEMBER",
    "body": "It will be treated as a string, which is then turned into an internal temporary so that won't work.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36384212",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-36384212",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 36384212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mzg0MjEy",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-28T19:13:50Z",
    "updated_at": "2014-02-28T19:13:50Z",
    "author_association": "MEMBER",
    "body": "`df.query(\"'a column with a space' > 2\") -> df.query(\"tmp_var_str_some_hex_value > 2\")`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/36392575",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-36392575",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 36392575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzkyNTc1",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-28T20:45:37Z",
    "updated_at": "2014-02-28T20:45:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe allowing the column to be referenced by its clean version? \n\n`df.query(\"column_with_space > 2\")`\n\nI do this cleanup for autocompletion whenever it makes sense. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91301081",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-91301081",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 91301081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxMzAxMDgx",
    "user": {
      "login": "denfromufa",
      "id": 7870949,
      "node_id": "MDQ6VXNlcjc4NzA5NDk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7870949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/denfromufa",
      "html_url": "https://github.com/denfromufa",
      "followers_url": "https://api.github.com/users/denfromufa/followers",
      "following_url": "https://api.github.com/users/denfromufa/following{/other_user}",
      "gists_url": "https://api.github.com/users/denfromufa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/denfromufa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/denfromufa/subscriptions",
      "organizations_url": "https://api.github.com/users/denfromufa/orgs",
      "repos_url": "https://api.github.com/users/denfromufa/repos",
      "events_url": "https://api.github.com/users/denfromufa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/denfromufa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-09T17:27:32Z",
    "updated_at": "2015-04-09T17:27:32Z",
    "author_association": "NONE",
    "body": "Column names with spaces, dots, brackets and other invalid characters may be optionally auto-replaced by equivalent valid characters, such as underscore. This is also very handy for accessing columns as members of dataframe with dot syntax.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283169176",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-283169176",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 283169176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE2OTE3Ng==",
    "user": {
      "login": "dgua",
      "id": 3887028,
      "node_id": "MDQ6VXNlcjM4ODcwMjg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3887028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgua",
      "html_url": "https://github.com/dgua",
      "followers_url": "https://api.github.com/users/dgua/followers",
      "following_url": "https://api.github.com/users/dgua/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgua/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgua/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgua/subscriptions",
      "organizations_url": "https://api.github.com/users/dgua/orgs",
      "repos_url": "https://api.github.com/users/dgua/repos",
      "events_url": "https://api.github.com/users/dgua/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgua/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T21:43:48Z",
    "updated_at": "2017-02-28T21:43:48Z",
    "author_association": "NONE",
    "body": "Hello,\r\n         I want to make a pledge for a resolution of this issue. \r\n\r\nIt is a very important issue for us. There are cases where we cannot change the column names because they need to be preserved. \r\n\r\nThat pandas puts an arbitrary requirement on column names is, IMHO, a bad design decision and bad programming practice. \r\n\r\nSorry for complaining, but I really think that pandas should fix this issue properly. Please consider it. Thank you."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283181667",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-283181667",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 283181667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE4MTY2Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T22:28:05Z",
    "updated_at": "2017-02-28T22:28:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dgua you are welcome to submit a pull-request to fix. Note that  in reality ``.query``is just a nice-to-have interface, in fact it has very specific guarantees, meaning its *meant* to parse like a query language, and not a fully general interface.\r\n\r\nIn any event, the recommended 'main' way of indexing has always been:\r\n\r\n```\r\nIn [10]: df = DataFrame({'foo bar': [1, 2, 3, 4]})\r\n\r\nIn [11]: df[df['foo bar'] > 2]\r\nOut[11]: \r\n   foo bar\r\n2        3\r\n3        4\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283182635",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-283182635",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 283182635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE4MjYzNQ==",
    "user": {
      "login": "dgua",
      "id": 3887028,
      "node_id": "MDQ6VXNlcjM4ODcwMjg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3887028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgua",
      "html_url": "https://github.com/dgua",
      "followers_url": "https://api.github.com/users/dgua/followers",
      "following_url": "https://api.github.com/users/dgua/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgua/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgua/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgua/subscriptions",
      "organizations_url": "https://api.github.com/users/dgua/orgs",
      "repos_url": "https://api.github.com/users/dgua/repos",
      "events_url": "https://api.github.com/users/dgua/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgua/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T22:32:06Z",
    "updated_at": "2017-02-28T22:32:06Z",
    "author_association": "NONE",
    "body": "jreback, I agree with you. However, we do have people who use `.query` extensively in their code because it's easier/more readable, so now we are in a conundrum to either change all that code or rename the columns, neither of which is desirable..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283185772",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-283185772",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 283185772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE4NTc3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T22:44:51Z",
    "updated_at": "2017-02-28T22:44:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dgua as I said, a pull-request from the community would get this done. I simply don't have time."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/399236148",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-399236148",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 399236148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTIzNjE0OA==",
    "user": {
      "login": "zhiruiwang",
      "id": 17771320,
      "node_id": "MDQ6VXNlcjE3NzcxMzIw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/17771320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zhiruiwang",
      "html_url": "https://github.com/zhiruiwang",
      "followers_url": "https://api.github.com/users/zhiruiwang/followers",
      "following_url": "https://api.github.com/users/zhiruiwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/zhiruiwang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zhiruiwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zhiruiwang/subscriptions",
      "organizations_url": "https://api.github.com/users/zhiruiwang/orgs",
      "repos_url": "https://api.github.com/users/zhiruiwang/repos",
      "events_url": "https://api.github.com/users/zhiruiwang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zhiruiwang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T20:40:07Z",
    "updated_at": "2018-06-21T20:40:07Z",
    "author_association": "NONE",
    "body": "R and dplyr use backtick( `` ) to quote column names with space and special characters. For example:\r\n```\r\ndf$`column with space`\r\ndf %>%\r\n    mutate(`column with space` = 1)\r\n```\r\nI wonder how hard it is to incorporate this into the pandas parser, so that functions like `query`, `eval` or even `df.` dot syntax can deal with more general column names?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433389426",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-433389426",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 433389426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzM4OTQyNg==",
    "user": {
      "login": "hwalinga",
      "id": 13176356,
      "node_id": "MDQ6VXNlcjEzMTc2MzU2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13176356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwalinga",
      "html_url": "https://github.com/hwalinga",
      "followers_url": "https://api.github.com/users/hwalinga/followers",
      "following_url": "https://api.github.com/users/hwalinga/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwalinga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwalinga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwalinga/subscriptions",
      "organizations_url": "https://api.github.com/users/hwalinga/orgs",
      "repos_url": "https://api.github.com/users/hwalinga/repos",
      "events_url": "https://api.github.com/users/hwalinga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwalinga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T12:22:00Z",
    "updated_at": "2018-10-26T14:47:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like the proposal of zhiruiwang and looking at his upvotes others do to. \r\n\r\nSo I have looked into the code a bit and basically pandas does some preprocessing on the expression and passes it to numexpr. Next to that a localdict containing among others the names of the dataframe columns is passed with it. \r\n\r\nI was thinking to just alter the expression by replacing every space within backticks to something else (like \"_\" or something less used to prevent name clashes) and remove the backticks. This creates a valid expression for numexpr. Next to that do the same to spaces in the names of columns when they are passed to the resolvers which eventually make up the localdict, so that the correct names can still be found by numexpr.\r\n\r\nMaybe the code that will do this can look like this, but I have not tested it. I first like to hear what others think of the idea. \r\n\r\n```python\r\n\r\n# Don't know if \"_\" is a good choice and don't know where to place this variable, \r\n# since it has to be constant in two different files and ideally is only defined once.\r\nSEPERATOR_REPLACING_SPACES = \"_\"\r\n\r\n# Replace spaces in variables surrounded by backticks:\r\n# pandas/pandas/core/computation/expr.py \r\n\r\nimport re\r\n\r\n...\r\n\r\n# new function\r\ndef _replace_spaces_backtickvariables(source):\r\n    return re.sub(r'`(.*?)`', \r\n                  lambda m: m.group(1).replace(\" \", SEPERATOR_REPLACING_SPACES), \r\n                  source)\r\n\r\n...\r\n\r\n# adjusted function\r\ndef _preparse(source, f=compose(_replace_locals, _replace_booleans,\r\n                                _rewrite_assign), g=lambda x: x):\r\n    ...\r\n    g : callable\r\n        This takes a source string and returns an altered one\r\n    ...\r\n    assert callable(g), 'g must be callable'\r\n    source = g(source)\r\n\r\n...\r\n\r\n# adjusted class\r\nclass PandasExprVisitor(BaseExprVisitor):\r\n    \r\n    def __init__(self, env, engine, parser,\r\n                 preparser=partial(_preparse, \r\n                                   f=compose(_replace_locals, _replace_booleans)\r\n                                   g=_replace_spaces_backtickvariables)):\r\n\r\n# Replace spaces in column names when passed to the localdict:\r\n# pandas/pandas/core/frame.py\r\n\r\n# adjusted function\r\ndef eval(self, expr, inplace=False, **kwargs):\r\n    ...\r\n    # line 3076\r\n    resolvers = dict((k.replace(\" \", SEPERATOR_REPLACING_SPACES), v) \r\n                     for k, v in self.iteritems()), index_resolvers\r\n```\r\n\r\nEDIT: fixed `_replace_spaces_backtickvariables` (regex should've been lazy)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437026650",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-437026650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 437026650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzAyNjY1MA==",
    "user": {
      "login": "beojan",
      "id": 3727925,
      "node_id": "MDQ6VXNlcjM3Mjc5MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/beojan",
      "html_url": "https://github.com/beojan",
      "followers_url": "https://api.github.com/users/beojan/followers",
      "following_url": "https://api.github.com/users/beojan/following{/other_user}",
      "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/beojan/subscriptions",
      "organizations_url": "https://api.github.com/users/beojan/orgs",
      "repos_url": "https://api.github.com/users/beojan/repos",
      "events_url": "https://api.github.com/users/beojan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/beojan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T15:02:42Z",
    "updated_at": "2018-11-08T15:02:42Z",
    "author_association": "NONE",
    "body": "@zhiruiwang The `df.` syntax won't be able to use this since it's parsed by Python, but `query` and `eval` would work."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438373404",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-438373404",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 438373404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODM3MzQwNA==",
    "user": {
      "login": "hwalinga",
      "id": 13176356,
      "node_id": "MDQ6VXNlcjEzMTc2MzU2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13176356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwalinga",
      "html_url": "https://github.com/hwalinga",
      "followers_url": "https://api.github.com/users/hwalinga/followers",
      "following_url": "https://api.github.com/users/hwalinga/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwalinga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwalinga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwalinga/subscriptions",
      "organizations_url": "https://api.github.com/users/hwalinga/orgs",
      "repos_url": "https://api.github.com/users/hwalinga/repos",
      "events_url": "https://api.github.com/users/hwalinga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwalinga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T17:57:53Z",
    "updated_at": "2018-11-13T17:57:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback You seem the one knowing most about this. \r\n\r\nWhat do you think of my approach as explained in the previous comment?\r\n\r\nInstead, we could also decide to solve it as dalelung proposed. So allow \"dirty\" names to referred to by their \"clean\" names (\"this column name\" can be referred to by \"this_column_name\" without the column actually changing the name) and don't use the `` encapsulation at all. \r\n\r\nThis would than only require this single line to be changed. (If I understand the code correctly, not tested.)\r\n\r\n```python\r\n# Replace spaces in column names when passed to the localdict:\r\n# pandas/pandas/core/frame.py\r\n\r\n# adjusted function\r\ndef eval(self, expr, inplace=False, **kwargs):\r\n    ...\r\n    # line 3076\r\n    resolvers = dict((k.replace(\" \", SEPERATOR_REPLACING_SPACES), v) \r\n                     for k, v in self.iteritems()), index_resolvers\r\n```\r\n\r\nWhat do you think? Which approach do you think is best? \r\n\r\nThan I can try to make a pull request for it. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/455809809",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-455809809",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 455809809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTgwOTgwOQ==",
    "user": {
      "login": "bscully27",
      "id": 43458305,
      "node_id": "MDQ6VXNlcjQzNDU4MzA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/43458305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bscully27",
      "html_url": "https://github.com/bscully27",
      "followers_url": "https://api.github.com/users/bscully27/followers",
      "following_url": "https://api.github.com/users/bscully27/following{/other_user}",
      "gists_url": "https://api.github.com/users/bscully27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bscully27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bscully27/subscriptions",
      "organizations_url": "https://api.github.com/users/bscully27/orgs",
      "repos_url": "https://api.github.com/users/bscully27/repos",
      "events_url": "https://api.github.com/users/bscully27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bscully27/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-19T19:48:55Z",
    "updated_at": "2019-01-19T19:48:55Z",
    "author_association": "NONE",
    "body": "This feature would be nice but I resolve with commands like these:\r\n\r\n##   Replace White Space\r\ndf.rename(columns={k: k.replace(' ','_')  for k in df.columns if k.count(' ')>0}, inplace=1)\r\n\r\n\r\n##   Starts with Numeric Value \r\ndf.rename(columns={k: '_'+k  for k in df.columns if k[0].isdigit()}, inplace=1)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/455831653",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-455831653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 455831653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTgzMTY1Mw==",
    "user": {
      "login": "dgua",
      "id": 3887028,
      "node_id": "MDQ6VXNlcjM4ODcwMjg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3887028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgua",
      "html_url": "https://github.com/dgua",
      "followers_url": "https://api.github.com/users/dgua/followers",
      "following_url": "https://api.github.com/users/dgua/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgua/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgua/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgua/subscriptions",
      "organizations_url": "https://api.github.com/users/dgua/orgs",
      "repos_url": "https://api.github.com/users/dgua/repos",
      "events_url": "https://api.github.com/users/dgua/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgua/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-20T02:18:19Z",
    "updated_at": "2019-01-20T02:18:19Z",
    "author_association": "NONE",
    "body": "Sorry, but that’s unsatisfactory. How do I get back to the original columns? What if ‘_’ is also used as part of a column name?\n\nUsers shouldn’t have to do this and it’s a serious problem of pandas. \n\nDG\n\n\n\n\n> On Jan 19, 2019, at 11:49, bscully27 <notifications@github.com> wrote:\n> \n> This feature would be nice but I resolve with commands like these:\n> \n> Replace White Space\n> \n> df.rename(columns={k: k.replace(' ','_') for k in df.columns if k.count(' ')>0}, inplace=1)\n> \n> Starts with Numeric Value\n> \n> df.rename(columns={k: '_'+k for k in df.columns if k[0].isdigit()}, inplace=1)\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/pandas-dev/pandas/issues/6508#issuecomment-455809809>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ADtPtKBTb6T5ErsqMrQYFSVblj8eYOTKks5vE3a3gaJpZM4Bl2In>.\n> \n\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456578353",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456578353",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456578353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjU3ODM1Mw==",
    "user": {
      "login": "polidore",
      "id": 153969,
      "node_id": "MDQ6VXNlcjE1Mzk2OQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/153969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/polidore",
      "html_url": "https://github.com/polidore",
      "followers_url": "https://api.github.com/users/polidore/followers",
      "following_url": "https://api.github.com/users/polidore/following{/other_user}",
      "gists_url": "https://api.github.com/users/polidore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/polidore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/polidore/subscriptions",
      "organizations_url": "https://api.github.com/users/polidore/orgs",
      "repos_url": "https://api.github.com/users/polidore/repos",
      "events_url": "https://api.github.com/users/polidore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/polidore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T21:55:20Z",
    "updated_at": "2019-01-22T21:55:20Z",
    "author_association": "NONE",
    "body": "in sql, you just use square brackets and that's nice. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456660411",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456660411",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456660411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjY2MDQxMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T03:53:20Z",
    "updated_at": "2019-01-23T03:53:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dgua do you have time to submit a PR? @zhiruiwang's suggestion of using backticks seems reasonable, if it can be implemented (we couldn't use them before, since they already have a meaning in Python 2)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456752223",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456752223",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456752223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njc1MjIyMw==",
    "user": {
      "login": "hwalinga",
      "id": 13176356,
      "node_id": "MDQ6VXNlcjEzMTc2MzU2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13176356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwalinga",
      "html_url": "https://github.com/hwalinga",
      "followers_url": "https://api.github.com/users/hwalinga/followers",
      "following_url": "https://api.github.com/users/hwalinga/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwalinga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwalinga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwalinga/subscriptions",
      "organizations_url": "https://api.github.com/users/hwalinga/orgs",
      "repos_url": "https://api.github.com/users/hwalinga/repos",
      "events_url": "https://api.github.com/users/hwalinga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwalinga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T10:34:59Z",
    "updated_at": "2019-01-23T14:16:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger I would have some time after my exams, and already took a look into the code for the implementation (see my previous comments). I still have some questions:\r\n\r\n * What should `SEPERATOR_REPLACING_SPACES` be? If we pick just \"\\_\", instead of a more complex replacement string, it might interfere with already existing other columns, but if we choose \"_\" it has the extra feature that you can refer to `this column name` by `` `this column name` `` _and_ `this_column_name`. (We could even drop the backticks feature.) \r\n\r\n * `SEPERATOR_REPLACING_SPACES` has to be consistent over two files. So, should it be declared somewhere else and imported into these files to make sure they are the same, or would a simple comment mentioning this suffice?\r\n\r\n * In the code I will alter, `callable()` is used. `callable()` is not available in 3.0-3.2, so should I also fix this at the same time?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456776310",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456776310",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456776310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njc3NjMxMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T12:01:24Z",
    "updated_at": "2019-01-23T12:01:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not familiar with this code, so you may be the expert here :)\r\n\r\n> In the code I will alter, callable() is used. callable() is not available in 3.0-3.2\r\n\r\nPython 3.0 - 3.2? We require 3.5+"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456778263",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456778263",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456778263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njc3ODI2Mw==",
    "user": {
      "login": "beojan",
      "id": 3727925,
      "node_id": "MDQ6VXNlcjM3Mjc5MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/beojan",
      "html_url": "https://github.com/beojan",
      "followers_url": "https://api.github.com/users/beojan/followers",
      "following_url": "https://api.github.com/users/beojan/following{/other_user}",
      "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/beojan/subscriptions",
      "organizations_url": "https://api.github.com/users/beojan/orgs",
      "repos_url": "https://api.github.com/users/beojan/repos",
      "events_url": "https://api.github.com/users/beojan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/beojan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T12:08:11Z",
    "updated_at": "2019-01-23T12:09:14Z",
    "author_association": "NONE",
    "body": "I think the backtick idea is rather good now, since in the `eval` or `query` context you wouldn't need to worry about how things are implemented. I wouldn't want to drop it.\r\n\r\nFor the plain Python context, the new names could have a prefix or suffix to prevent collisions (e.g. they all end with an underscore)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456817765",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456817765",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456817765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjgxNzc2NQ==",
    "user": {
      "login": "hwalinga",
      "id": 13176356,
      "node_id": "MDQ6VXNlcjEzMTc2MzU2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13176356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwalinga",
      "html_url": "https://github.com/hwalinga",
      "followers_url": "https://api.github.com/users/hwalinga/followers",
      "following_url": "https://api.github.com/users/hwalinga/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwalinga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwalinga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwalinga/subscriptions",
      "organizations_url": "https://api.github.com/users/hwalinga/orgs",
      "repos_url": "https://api.github.com/users/hwalinga/repos",
      "events_url": "https://api.github.com/users/hwalinga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwalinga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T14:19:17Z",
    "updated_at": "2019-01-23T14:19:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> have a prefix or suffix to prevent collisions\r\n\r\n@beojan yes, but maybe you can see those \"collisions\" as a feature. So you can refer to `this column name` by `` `this column name` `` _and_ `this_column_name`. I also think it is a bit silly if you have two columns names `this column name` and `this_column_name`, but you never know. \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456819084",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456819084",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456819084,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjgxOTA4NA==",
    "user": {
      "login": "beojan",
      "id": 3727925,
      "node_id": "MDQ6VXNlcjM3Mjc5MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/beojan",
      "html_url": "https://github.com/beojan",
      "followers_url": "https://api.github.com/users/beojan/followers",
      "following_url": "https://api.github.com/users/beojan/following{/other_user}",
      "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/beojan/subscriptions",
      "organizations_url": "https://api.github.com/users/beojan/orgs",
      "repos_url": "https://api.github.com/users/beojan/repos",
      "events_url": "https://api.github.com/users/beojan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/beojan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T14:22:45Z",
    "updated_at": "2019-01-23T14:23:27Z",
    "author_association": "NONE",
    "body": "You can use `this_column_name_`.\r\n\r\nIf you really have two colliding columns, I don't see how that's a feature though."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456880863",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456880863",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456880863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg4MDg2Mw==",
    "user": {
      "login": "hwalinga",
      "id": 13176356,
      "node_id": "MDQ6VXNlcjEzMTc2MzU2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13176356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwalinga",
      "html_url": "https://github.com/hwalinga",
      "followers_url": "https://api.github.com/users/hwalinga/followers",
      "following_url": "https://api.github.com/users/hwalinga/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwalinga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwalinga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwalinga/subscriptions",
      "organizations_url": "https://api.github.com/users/hwalinga/orgs",
      "repos_url": "https://api.github.com/users/hwalinga/repos",
      "events_url": "https://api.github.com/users/hwalinga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwalinga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T16:56:21Z",
    "updated_at": "2019-01-23T16:56:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, if I have a dataframe:\r\n\r\n```\r\n    \"column name\" \"name\"\r\n1   4              5\r\n2   2              1\r\n```\r\n\r\nWith the feature implemented, without measures for colliding, I can now say:\r\n```\r\ndf.query(column_name > 3)\r\n```\r\nAnd pandas would automatically refer to \"column name\" in this query. This is also earlier suggested by dalejung. You can now also leave the support for backticks out.\r\n\r\nI also don't think you would see any dataframes _in the wild_ that looks like:\r\n```\r\n    \"column name\" \"name\" \"column_name\"\r\n1   3              5     6\r\n2   2              1     9\r\n```\r\nIn which the collisions would cause a problem. \r\n\r\nSo, in my view, it won't cause any collisions and gives an extra way to refer to the column. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456882660",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456882660",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456882660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg4MjY2MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T17:00:53Z",
    "updated_at": "2019-01-23T17:00:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think we'd be interested in partially supporting this. The point of\nthe PR would be to completely avoid ambiguity,\nso the last example should work.\n\nOn Wed, Jan 23, 2019 at 10:56 AM hwalinga <notifications@github.com> wrote:\n\n> Well, if I have a dataframe:\n>\n>     \"column name\" \"name\"\n> 1   4              5\n> 2   2              1\n>\n> With the feature implemented, without measures for colliding, I can now\n> say:\n>\n> df.query(column_name > 3)\n>\n> And pandas would automatically refer to \"column name\" in this query. This\n> is also earlier suggested by dalejung. You can now also leave the support\n> for backticks out.\n>\n> I also don't think you would see any dataframes *in the wild* that looks\n> like:\n>\n>     \"column name\" \"name\" \"column_name\"\n> 1   3              5     6\n> 2   2              1     9\n>\n> In which the collisions would cause a problem.\n>\n> So, in my view, it won't cause any collisions and gives an extra way to\n> refer to the column.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456880863>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIkl6f9IgUGBKlzranZpsOe3atH3Aks5vGJQ7gaJpZM4Bl2In>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456903386",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456903386",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456903386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjkwMzM4Ng==",
    "user": {
      "login": "hwalinga",
      "id": 13176356,
      "node_id": "MDQ6VXNlcjEzMTc2MzU2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13176356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwalinga",
      "html_url": "https://github.com/hwalinga",
      "followers_url": "https://api.github.com/users/hwalinga/followers",
      "following_url": "https://api.github.com/users/hwalinga/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwalinga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwalinga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwalinga/subscriptions",
      "organizations_url": "https://api.github.com/users/hwalinga/orgs",
      "repos_url": "https://api.github.com/users/hwalinga/repos",
      "events_url": "https://api.github.com/users/hwalinga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwalinga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T17:58:47Z",
    "updated_at": "2019-01-23T17:58:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger Okay, that is clear. \r\n\r\nDo we than go with a suffix like \"\\_\" to prevent collisions, or do we go with replacing the space between the column names with a complex string, so we can rule out even more accidental collisions."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456904349",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-456904349",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 456904349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjkwNDM0OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T18:01:19Z",
    "updated_at": "2019-01-23T18:01:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "this might work directly in the AST\r\nI think these actually parse correctly but we don’t handle the reassembly correctly "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/480305294",
    "html_url": "https://github.com/pandas-dev/pandas/issues/6508#issuecomment-480305294",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/6508",
    "id": 480305294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDMwNTI5NA==",
    "user": {
      "login": "palnabarun",
      "id": 10010419,
      "node_id": "MDQ6VXNlcjEwMDEwNDE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10010419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/palnabarun",
      "html_url": "https://github.com/palnabarun",
      "followers_url": "https://api.github.com/users/palnabarun/followers",
      "following_url": "https://api.github.com/users/palnabarun/following{/other_user}",
      "gists_url": "https://api.github.com/users/palnabarun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/palnabarun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/palnabarun/subscriptions",
      "organizations_url": "https://api.github.com/users/palnabarun/orgs",
      "repos_url": "https://api.github.com/users/palnabarun/repos",
      "events_url": "https://api.github.com/users/palnabarun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/palnabarun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T14:52:39Z",
    "updated_at": "2019-04-05T14:52:39Z",
    "author_association": "NONE",
    "body": "Hi everyone,\r\n\r\nIs there a timeline when will this feature be released?"
  }
]
