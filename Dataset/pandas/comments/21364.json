[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/395641298",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21364#issuecomment-395641298",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21364",
    "id": 395641298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTY0MTI5OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T04:13:43Z",
    "updated_at": "2018-06-08T04:13:43Z",
    "author_association": "MEMBER",
    "body": "Hmm...the `dtypes` should reflect the schema.  Could you provide a representative example, if possible?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/395745987",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21364#issuecomment-395745987",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21364",
    "id": 395745987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTc0NTk4Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T12:29:38Z",
    "updated_at": "2018-06-08T12:29:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "With `read_sql` though, we don't have a schema. The SQL expression can change the types at will.\r\n\r\n@MagnetarAlex can you make a self-contained example (using `sqlite3`) where you create an empty table and read the types, and then run it on 0.22.0 and 0.23.0 and post the results?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/397405659",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21364#issuecomment-397405659",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21364",
    "id": 397405659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzQwNTY1OQ==",
    "user": {
      "login": "MagnetarAlex",
      "id": 37808988,
      "node_id": "MDQ6VXNlcjM3ODA4OTg4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/37808988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MagnetarAlex",
      "html_url": "https://github.com/MagnetarAlex",
      "followers_url": "https://api.github.com/users/MagnetarAlex/followers",
      "following_url": "https://api.github.com/users/MagnetarAlex/following{/other_user}",
      "gists_url": "https://api.github.com/users/MagnetarAlex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MagnetarAlex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MagnetarAlex/subscriptions",
      "organizations_url": "https://api.github.com/users/MagnetarAlex/orgs",
      "repos_url": "https://api.github.com/users/MagnetarAlex/repos",
      "events_url": "https://api.github.com/users/MagnetarAlex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MagnetarAlex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-14T19:07:39Z",
    "updated_at": "2018-06-14T19:07:50Z",
    "author_association": "NONE",
    "body": "@gfyoung @TomAugspurger \r\nHey guys, here is a simple example, in the first query, the dtypes on id/userid are int64, while on the second query, the dtypes are object.\r\n\r\nimport sqlite3\r\nimport pandas as pd\r\n\r\ndb = sqlite3.connect(':memory:')\r\ncursor = db.cursor()\r\ncursor.execute('''CREATE TABLE users(id INTEGER PRIMARY KEY, userid INTEGER, username TEXT)''')\r\ndb.commit()\r\n\r\ncursor = db.cursor()\r\ncursor.execute('''INSERT INTO users(userid, username)\r\n                  VALUES(?,?)''', (123, 'John'))\r\n\r\nquery = 'select * from users'\r\ndf = pd.read_sql(query, db)\r\nprint(df.dtypes)\r\n\r\nquery = 'select * from users where userid=0'\r\ndf = pd.read_sql(query, db)\r\nprint(df.dtypes)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/397423024",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21364#issuecomment-397423024",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21364",
    "id": 397423024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzQyMzAyNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-14T20:10:26Z",
    "updated_at": "2018-06-14T20:10:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the example.\r\n\r\n> In pandas 0.23, if the result is empty, then all the columns dtypes in result are object.\r\n\r\nI read that as \"starting in pandas 0.23\", but it was never the case that the empty query had non-object dtypes, right? I get the same result for 0.23 and 0.22.\r\n\r\nIn the first case, you get ints since that's what pandas inferred. pandas has to infer types here, since `query` can be any sql query, including ones that change types:\r\n\r\n```python\r\nIn [7]: pd.read_sql(\"select cast(userid as text) as userid from users\", db).dtypes\r\nOut[7]:\r\nuserid    object\r\ndtype: object\r\n```\r\n\r\nIn the second case, pandas just gets and empty dataframe and has to infer \"object\" dtype for everything.\r\n\r\nIt would be *great* to have a note in the docs and docstrings explaining this. Could you do that @MagnetarAlex?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/397451851",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21364#issuecomment-397451851",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21364",
    "id": 397451851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzQ1MTg1MQ==",
    "user": {
      "login": "MagnetarAlex",
      "id": 37808988,
      "node_id": "MDQ6VXNlcjM3ODA4OTg4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/37808988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MagnetarAlex",
      "html_url": "https://github.com/MagnetarAlex",
      "followers_url": "https://api.github.com/users/MagnetarAlex/followers",
      "following_url": "https://api.github.com/users/MagnetarAlex/following{/other_user}",
      "gists_url": "https://api.github.com/users/MagnetarAlex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MagnetarAlex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MagnetarAlex/subscriptions",
      "organizations_url": "https://api.github.com/users/MagnetarAlex/orgs",
      "repos_url": "https://api.github.com/users/MagnetarAlex/repos",
      "events_url": "https://api.github.com/users/MagnetarAlex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MagnetarAlex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-14T22:01:17Z",
    "updated_at": "2018-06-14T22:01:17Z",
    "author_association": "NONE",
    "body": "I see. Also tried with 0.21.1 and it's the same result. \r\nI had a whole package update a few weeks ago so I guess it's probably related to other db packages change (sqlalchemy or pyodbc). Apologize for the confusion.\r\n\r\nIt's a pleasure to contribute to the doc notes, my friend LB helped me to polish the sentences. Hope it will help.\r\n\r\n> Note that pandas infers column dtypes from query outputs, and not by looking up data types in the physical database schema.\r\n> \r\n> For example, assume ‘userid’ is an integer column in a table. Then, intuitively, “select userid …” will return integer-valued series, while “select cast(userid as text) …” will return object-valued (str) series.\r\n> \r\n> Accordingly, if the query output is empty, then all resulting columns will be returned as object-valued (since they are most general). If you foresee that your query will sometimes generate an empty result, you may want to explicitly typecast afterwards to ensure dtype integrity.\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/398876019",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21364#issuecomment-398876019",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21364",
    "id": 398876019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODg3NjAxOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T19:54:55Z",
    "updated_at": "2018-06-20T19:54:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks. Mind making a pull request adding that to the prose docs in\ndoc/source/io.rst?\n\nOn Thu, Jun 14, 2018 at 5:01 PM, MagnetarAlex <notifications@github.com>\nwrote:\n\n> I see. Also tried with 0.21.1 and it's the same result.\n> I had a whole package update a few weeks ago so I guess it's probably\n> related to other db packages change (sqlalchemy or pyodbc). Apologize for\n> the confusion.\n>\n> It's a pleasure to contribute to the doc notes, my friend LB helped me to\n> polish the sentences. Hope it will help.\n>\n> Note that pandas infers column dtypes from query outputs, and not by\n> looking up data types in the physical database schema.\n>\n> For example, assume ‘userid’ is an integer column in a table. Then,\n> intuitively, “select userid …” will return integer-valued series, while\n> “select cast(userid as text) …” will return object-valued (str) series.\n>\n> Accordingly, if the query output is empty, then all resulting columns will\n> be returned as object-valued (since they are most general). If you foresee\n> that your query will sometimes generate an empty result, you may want to\n> explicitly typecast afterwards to ensure dtype integrity.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/21364#issuecomment-397451851>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIilFrsQiwuj46GfDg1oVVQwgip20ks5t8t00gaJpZM4Ue6Br>\n> .\n>\n"
  }
]
