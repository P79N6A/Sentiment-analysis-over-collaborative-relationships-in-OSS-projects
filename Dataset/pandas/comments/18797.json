[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352114655",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18797#issuecomment-352114655",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18797",
    "id": 352114655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjExNDY1NQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T21:21:02Z",
    "updated_at": "2017-12-15T21:21:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "In my opinion, a cleaner solution to this would be #14207 (taking advantage of dict ordered-ness in 3.6+)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352115000",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18797#issuecomment-352115000",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18797",
    "id": 352115000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjExNTAwMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T21:22:47Z",
    "updated_at": "2017-12-15T21:22:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agreed with @chris-b1.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352121139",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18797#issuecomment-352121139",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18797",
    "id": 352121139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjEyMTEzOQ==",
    "user": {
      "login": "datajanko",
      "id": 11876547,
      "node_id": "MDQ6VXNlcjExODc2NTQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11876547?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datajanko",
      "html_url": "https://github.com/datajanko",
      "followers_url": "https://api.github.com/users/datajanko/followers",
      "following_url": "https://api.github.com/users/datajanko/following{/other_user}",
      "gists_url": "https://api.github.com/users/datajanko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datajanko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datajanko/subscriptions",
      "organizations_url": "https://api.github.com/users/datajanko/orgs",
      "repos_url": "https://api.github.com/users/datajanko/repos",
      "events_url": "https://api.github.com/users/datajanko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datajanko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T21:52:28Z",
    "updated_at": "2017-12-15T21:55:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually, one of the first things I checked was if the dict-orderedness can be used for this task. Unfortunately, this is not the case. \r\n\r\nHowever, if I understand the current source code correct, the naive implementation to use the dict-orderedness must perform a full data frame copy after each added keyword. In fact, in the worst case (e.g. as described above), this will inevitably be necessary. So for this case, we keep the notation simple and there is no speed tradeoff. \r\nBut what if we have lots of assign statements that only depend on the already existing columns? Then, it seems, that we must perform a copy after each computed column.This could degrade performance in many (major) use cases. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352133197",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18797#issuecomment-352133197",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18797",
    "id": 352133197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjEzMzE5Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T23:01:06Z",
    "updated_at": "2017-12-15T23:01:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "> However, if I understand the current source code correct, the naive implementation to use the dict-orderedness must perform a full data frame copy after each added keyword.\r\n\r\nNot sure what you mean here, but `df.assign(a=1)` and `df.assign(a=1, b=2)`  each perform one copy.\r\n\r\nThe current implementation does two steps:\r\n\r\n1. all the computation into an intermediate dictionary\r\n2. all the assignments from that intermediate dictionary\r\n\r\nIf we allowed dependent assignment, we would interleave those two, compute and assign for each key - value pair. There would still be a single copy per `.assign`, but you won't have to break up assignments into multiple as often (thus saving copies)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352169530",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18797#issuecomment-352169530",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18797",
    "id": 352169530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjE2OTUzMA==",
    "user": {
      "login": "datajanko",
      "id": 11876547,
      "node_id": "MDQ6VXNlcjExODc2NTQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11876547?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datajanko",
      "html_url": "https://github.com/datajanko",
      "followers_url": "https://api.github.com/users/datajanko/followers",
      "following_url": "https://api.github.com/users/datajanko/following{/other_user}",
      "gists_url": "https://api.github.com/users/datajanko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datajanko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datajanko/subscriptions",
      "organizations_url": "https://api.github.com/users/datajanko/orgs",
      "repos_url": "https://api.github.com/users/datajanko/repos",
      "events_url": "https://api.github.com/users/datajanko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datajanko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-16T08:30:36Z",
    "updated_at": "2017-12-16T08:30:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for not being precise enough:\r\n\r\nmy original idea was to wrap a for loop around\r\nhttps://github.com/pandas-dev/pandas/blob/c28b6249471ffddfed51d62437a65ca97766fb7f/pandas/core/frame.py#L2700-L2715\r\nthis would result in only a copy for each \"list entry\" of my suggestion.\r\n\r\nAnyway, the \"do all calculations first\" section, will not be \"valid\" anymore for python 3.6, right?\r\nfor python 3.6, this could look like\r\n```{python}\r\nfor k, v in kwargs.items():\r\n    data[k] = = com._apply_if_callable(v, data)\r\n```\r\n\r\nfor older versions of python, everything should remain the same. So the version distinction should be made directly after the copy statement, right?\r\nMind, if I make a pull request for that in the next couple of days?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352178503",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18797#issuecomment-352178503",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18797",
    "id": 352178503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjE3ODUwMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-16T11:46:37Z",
    "updated_at": "2017-12-16T11:47:19Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  this would result in only a copy for each \"list entry\" of my suggestion.\r\n\r\nThanks for the clarification, sorry I didn't get that sooner.\r\n\r\n>  So the version distinction should be made directly after the copy statement, right?  Mind, if I make a pull request for that in the next couple of days?\r\n\r\nYeah, that sounds about right. Please do!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352285659",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18797#issuecomment-352285659",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18797",
    "id": 352285659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjI4NTY1OQ==",
    "user": {
      "login": "datajanko",
      "id": 11876547,
      "node_id": "MDQ6VXNlcjExODc2NTQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11876547?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datajanko",
      "html_url": "https://github.com/datajanko",
      "followers_url": "https://api.github.com/users/datajanko/followers",
      "following_url": "https://api.github.com/users/datajanko/following{/other_user}",
      "gists_url": "https://api.github.com/users/datajanko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datajanko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datajanko/subscriptions",
      "organizations_url": "https://api.github.com/users/datajanko/orgs",
      "repos_url": "https://api.github.com/users/datajanko/repos",
      "events_url": "https://api.github.com/users/datajanko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datajanko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-17T21:08:32Z",
    "updated_at": "2017-12-17T21:08:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm also sorry, for not explaining my thought process better. You couldn't know what I know/knew about this issues, specifically since my contribution track record is almost non existing ;)\r\n\r\nSo, I just rearranged some of the tests and also some of the code.\r\nIt works fine if the arguments are callables. However, the shortened notation we used (df.assign(a=1, b=2)) can turn out to be df.assign(b=df.a, c=df.b), then of course df.b is not defined at the moment of the definition of the kwargs dictionary. Using callables has simply the advantage of evaluating the column names lazily.\r\n\r\nWould it be okay, to only work well with callables?"
  }
]
