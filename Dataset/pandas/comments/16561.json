[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305312819",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16561#issuecomment-305312819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16561",
    "id": 305312819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTMxMjgxOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T20:48:43Z",
    "updated_at": "2017-05-31T20:48:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you show an actual example (construct a dataframe, and then what you'd like to be able to do)?\r\n\r\n>  I would like to have a view on internal data already stored by dataframes as a numpy array.\r\n\r\nNot sure how much you've looked into the internals, but there won't necessarily be a numpy array, as in a single numpy array, backing a DataFrame. The data model is a bit more complex than that.\r\n\r\nCould you also say a bit more about your use-case?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305330936",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16561#issuecomment-305330936",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16561",
    "id": 305330936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTMzMDkzNg==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T22:03:12Z",
    "updated_at": "2017-05-31T22:03:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am using Pandas to read multiple CSV files, make sure indexes across the match and are in same order (using `.loc`), especially to match samples and targets which are split into two files. Some of columns are categorical, so I can use Pandas to automatically encode them for me. And then I want to convert them to a numpy array because the rest of the pipeline expects that.\r\n\r\nAn example would be something like:\r\n\r\n```python\r\n>>> import pandas as pd\r\n>>> import numpy as np\r\n>>> from io import StringIO\r\n>>> data = \"\"\"col1,col2,col3\r\n1,a,3.4\r\n1,a,3.4\r\n2,b,4.5\"\"\"\r\n>>> frame = pd.read_csv(StringIO(data), dtype={0: 'int', 1: 'category', 2: 'float64'})\r\n>>> >>> frame.dtypes\r\ncol1       int64\r\ncol2    category\r\ncol3     float64\r\ndtype: object\r\n```\r\n\r\nWhat I would like is to convert this to:\r\n\r\n```python\r\n>>> np.array([(1, 0, 3.4), (1, 0, 3.4), (2, 1, 4.5)], dtype=[('col1', np.int64), ('col2', np.int8), ('col3', np.float64)])\r\narray([(1, 0,  3.4), (1, 0,  3.4), (2, 1,  4.5)], dtype=[('col1', '<i8'), ('col2', 'i1'), ('col3', '<f8')])\r\n```\r\n\r\nI see that I can do the first thing of converting categorical attributes to coded ones with:\r\n\r\n```python\r\ncategorical_columns = frame.select_dtypes(('category',)).columns\r\nframe[categorical_columns] = frame[categorical_columns].apply(lambda c: c.cat.codes)\r\n```\r\n\r\nBut not how to do the next step.\r\n\r\nAlthough, I am realizing now that numpy does not support 2d matrix with different types for different columns, and not with labels for different columns. The above is just a 1d array of tuples. So `as_matrix` or `values` seem to be the best way to do so."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305340323",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16561#issuecomment-305340323",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16561",
    "id": 305340323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM0MDMyMw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T22:49:39Z",
    "updated_at": "2017-05-31T22:49:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Isn't your desired output what `to_records(index=False)` produces? \r\n\r\n```python\r\nIn [7]: frame.to_records(index=False)\r\nOut[7]:\r\nrec.array([(1, 0, 3.4), (1, 0, 3.4), (2, 1, 4.5)],\r\n          dtype=[('col1', '<i4'), ('col2', 'i1'), ('col3', '<f8')])\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305340944",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16561#issuecomment-305340944",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16561",
    "id": 305340944,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM0MDk0NA==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T22:52:50Z",
    "updated_at": "2017-05-31T22:53:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "But that is `np.recarray` and not `np.array`? Is `np.recarray` a strict extension of `np.array`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305341009",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16561#issuecomment-305341009",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16561",
    "id": 305341009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM0MTAwOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T22:53:08Z",
    "updated_at": "2017-05-31T22:53:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mitar \r\n\r\nusing multi-dtype ndarrays is *only* supported via rec-arrays (as @chris-b1 shows how to convert).\r\n\r\nYou certainly can select out columns or do a ``.values`` conversion. But the target function needs to potentially deal with an ``object`` dtype array. So this is not efficient at all. You need to segregate dtypes; it is simply a lot of work to do with numpy arrays. pandas does this with ease. So you can certainly use some of the pointed to solutions. But I suspect you have other issues if the conversion to an ndarray is your bottleneck."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305341273",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16561#issuecomment-305341273",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16561",
    "id": 305341273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM0MTI3Mw==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T22:54:23Z",
    "updated_at": "2017-05-31T22:54:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank for the input. I will look more into this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/305341693",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16561#issuecomment-305341693",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16561",
    "id": 305341693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM0MTY5Mw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T22:56:38Z",
    "updated_at": "2017-05-31T22:56:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "From what I recall `recarray` is very thin subclass, something like this probably works if you have a strict ndarray requirement downstream.\r\n\r\n```\r\nIn [14]: ra = frame.to_records(index=False)\r\n\r\nIn [15]: np.asarray(ra)\r\nOut[15]: \r\narray([(1, 0, 3.4), (1, 0, 3.4), (2, 1, 4.5)], \r\n      dtype=(numpy.record, [('col1', '<i4'), ('col2', 'i1'), ('col3', '<f8')]))\r\n```"
  }
]
