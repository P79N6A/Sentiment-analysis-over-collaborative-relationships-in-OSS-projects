[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/279820387",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15400#issuecomment-279820387",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15400",
    "id": 279820387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTgyMDM4Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-14T20:06:45Z",
    "updated_at": "2017-02-14T20:06:45Z",
    "author_association": "MEMBER",
    "body": "I wondered where this huge difference came from. Not that I want to say that this big difference is not a problem, but this seems a consequence of its implemention / several slower functions that are used under the hood. \r\nThe clip is done in two separate steps for clip_upper and clip_lower. Each of those clips does a comparison to create a mask and then uses `where`; in `where` an `align` is done, etc:\r\n\r\n```\r\nIn [89]: %timeit s.clip(0, 1)\r\n100 loops, best of 3: 1.91 ms per loop\r\n\r\nIn [91]: %timeit s.clip_lower(0)\r\n1000 loops, best of 3: 958 µs per loop\r\n\r\nIn [92]: %timeit s < 0\r\n10000 loops, best of 3: 118 µs per loop\r\n\r\nIn [93]: mask = s < 0\r\n\r\nIn [94]: %timeit s.where(mask, 0)\r\n1000 loops, best of 3: 395 µs per loop\r\n\r\nIn [100]: %timeit s.align(mask)\r\n10000 loops, best of 3: 98.6 µs per loop\r\n```\r\n\r\nSo it seems that several individual steps in the current implementation (creation of the mask, the alignment, ..) already take way longer than the actual `clip` in numpy. Probably each of those steps can be optimized, but you won't get a big speed-up with that I think. To get a big speed-up in pandas' `clip`, we should probably need a more low-level implementation.\r\n\r\nWhen you look at a larger series, the difference is not that huge anymore:\r\n\r\n```\r\nIn [32]: s = pd.Series(np.random.randn(100000))\r\n\r\nIn [33]: %timeit s.clip(0,1)\r\nThe slowest run took 8.48 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100 loops, best of 3: 4.27 ms per loop\r\n\r\nIn [34]: arr = s.values\r\n\r\nIn [35]: %timeit np.clip(arr,0,1)\r\nThe slowest run took 4.41 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n1000 loops, best of 3: 558 µs per loop\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/280980204",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15400#issuecomment-280980204",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15400",
    "id": 280980204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDk4MDIwNA==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-20T03:32:11Z",
    "updated_at": "2017-02-20T03:32:11Z",
    "author_association": "MEMBER",
    "body": "Profile results of 100 runs\r\n\r\n```\r\n         301103 function calls (300903 primitive calls) in 0.220 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.220    0.220 {built-in method builtins.exec}\r\n        1    0.000    0.000    0.220    0.220 <string>:1(<module>)\r\n      100    0.001    0.000    0.220    0.002 generic.py:3825(clip)\r\n      100    0.001    0.000    0.109    0.001 generic.py:3913(clip_lower)\r\n      100    0.001    0.000    0.109    0.001 generic.py:3889(clip_upper)\r\n      200    0.001    0.000    0.092    0.000 generic.py:4806(where)\r\n      200    0.002    0.000    0.092    0.000 generic.py:4547(_where)\r\n2000/1800    0.013    0.000    0.074    0.000 internals.py:2978(apply)\r\n     2800    0.012    0.000    0.065    0.000 series.py:135(__init__)\r\n      200    0.001    0.000    0.062    0.000 ops.py:903(wrapper)\r\n      400    0.001    0.000    0.050    0.000 ops.py:907(<lambda>)\r\n      200    0.001    0.000    0.047    0.000 ops.py:1039(flex_wrapper)\r\n      600    0.002    0.000    0.040    0.000 series.py:2364(fillna)\r\n      600    0.005    0.000    0.039    0.000 generic.py:3200(fillna)\r\n      200    0.002    0.000    0.036    0.000 ops.py:803(wrapper)\r\n      200    0.001    0.000    0.034    0.000 internals.py:3158(where)\r\n      600    0.002    0.000    0.032    0.000 generic.py:3007(astype)\r\n      600    0.002    0.000    0.031    0.000 generic.py:3057(copy)\r\n      200    0.000    0.000    0.027    0.000 series.py:2342(align)\r\n      200    0.001    0.000    0.027    0.000 generic.py:4379(align)\r\n      200    0.001    0.000    0.026    0.000 generic.py:4470(_align_series)\r\n      400    0.001    0.000    0.022    0.000 series.py:2360(reindex)\r\n      400    0.002    0.000    0.022    0.000 generic.py:2224(reindex)\r\n      400    0.000    0.000    0.021    0.000 series.py:2326(_reindex_inde\r\n```\r\n\r\nA single call to `clip` calls the Series constructor 28 times. Not good. I will try to look more deeply into fixing this if no one beats me to it"
  }
]
