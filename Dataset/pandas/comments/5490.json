[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/28196034",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-28196034",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 28196034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTk2MDM0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-11T12:43:16Z",
    "updated_at": "2013-11-11T12:43:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "you could allow `format='infer'` to support this, keeping in mind that some dayfirst/yearfirst will then matter (and potentially could ambiguously interpret theformat)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32072689",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32072689",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32072689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDcyNjg5",
    "user": {
      "login": "danbirken",
      "id": 91798,
      "node_id": "MDQ6VXNlcjkxNzk4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/91798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danbirken",
      "html_url": "https://github.com/danbirken",
      "followers_url": "https://api.github.com/users/danbirken/followers",
      "following_url": "https://api.github.com/users/danbirken/following{/other_user}",
      "gists_url": "https://api.github.com/users/danbirken/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danbirken/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danbirken/subscriptions",
      "organizations_url": "https://api.github.com/users/danbirken/orgs",
      "repos_url": "https://api.github.com/users/danbirken/repos",
      "events_url": "https://api.github.com/users/danbirken/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danbirken/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-10T22:24:58Z",
    "updated_at": "2014-01-10T22:24:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is a really smart idea, and I think this is a huge speed-up for a common use case. +1\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32077701",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32077701",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32077701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDc3NzAx",
    "user": {
      "login": "cancan101",
      "id": 51059,
      "node_id": "MDQ6VXNlcjUxMDU5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cancan101",
      "html_url": "https://github.com/cancan101",
      "followers_url": "https://api.github.com/users/cancan101/followers",
      "following_url": "https://api.github.com/users/cancan101/following{/other_user}",
      "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions",
      "organizations_url": "https://api.github.com/users/cancan101/orgs",
      "repos_url": "https://api.github.com/users/cancan101/repos",
      "events_url": "https://api.github.com/users/cancan101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cancan101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-10T23:31:31Z",
    "updated_at": "2014-01-10T23:31:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "You do want to deal with the first entry being NaT / None.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32144458",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32144458",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32144458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTQ0NDU4",
    "user": {
      "login": "lexual",
      "id": 410907,
      "node_id": "MDQ6VXNlcjQxMDkwNw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/410907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lexual",
      "html_url": "https://github.com/lexual",
      "followers_url": "https://api.github.com/users/lexual/followers",
      "following_url": "https://api.github.com/users/lexual/following{/other_user}",
      "gists_url": "https://api.github.com/users/lexual/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lexual/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lexual/subscriptions",
      "organizations_url": "https://api.github.com/users/lexual/orgs",
      "repos_url": "https://api.github.com/users/lexual/repos",
      "events_url": "https://api.github.com/users/lexual/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lexual/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-13T04:07:31Z",
    "updated_at": "2014-01-13T04:07:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Perhaps the way to do would it would be a \"format\" parameter (better name suggestions welcome) that is either set to \"heterogenous\" or \"homogenous\" (i.e. different date formats, all date formats the same).\n\nIf heterogenous, then current behaviour occurs, if homogenous use speedy algorithm from above where once you infer the date of the first date, you use that for all datetime entries.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32691775",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32691775",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32691775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjkxNzc1",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T20:12:46Z",
    "updated_at": "2014-01-18T20:15:53Z",
    "author_association": "NONE",
    "body": "This a promising idea, worth persuing. So I did, in the context of pd.read_csv\nwhich helpfuly supports a `date_parser` argument that let's you pass in a \ntailored parser in the form of a call to strptime with a hardwired format string.\n\nDisregarding the <del>stealth</del> (#5993) fast-path for is8601 strings, measuring show\na potential a 4x speedup for large data.\n\ndateutil's parser is not amenable to producing a format string, as it consumes\nand backtracks through the string, but it does provide a handy lexer function \n(`_timelex.split(tzstr)`) for dt strings which could, by reverse-mapping the fields of the \ndatetime object returned onto the tokens, be used to reconstruct a format string which \ncan then be used to speed up the rest of the process, at least for a good-sized\nchunk of cases.\n\nPRs welcome.\n\n```\nN=10000\nr=pd.date_range(\"2000-01-01\",\"2013-01-01\",freq=\"H\")[:N]\ndf=pd.DataFrame(range(N),index=r)\ndf.to_csv(\"/tmp/1.csv\")\ndef f1(s):\n    return dt.datetime.strptime(s,\"%Y-%m-%d %H:%M:%S\")\ndef f2(s):\n    return dateutil.parser.parse(s)\nprint \"Measuring iso8601\"\n%timeit f1(\"2000-01-01 00:01:02\")\n%timeit f2(\"2000-01-01 00:01:02\")\n%timeit x1=pd.read_csv(\"/tmp/1.csv\",parse_dates=True,index_col=0)\n%timeit x2=pd.read_csv(\"/tmp/1.csv\",parse_dates=True,index_col=0,date_parser=f1)\n%timeit x3=pd.read_csv(\"/tmp/1.csv\",parse_dates=True,index_col=0,date_parser=f2)\n#assert x1==x2==x3\n# now try with non-iso-8601\n\nwith open(\"/tmp/1.csv\",\"wb\") as f:\n    f.write(\"12/1/2013 00:01:02,1\\n\"*N)\n\ndef f1a(s):\n    return dt.datetime.strptime(s,\"%d/%m/%Y %H:%M:%S\")\n\nprint \"\\nMeasuring an innovative dt format string\"\n%timeit f1a(\"12/1/2013 00:01:02\")\n%timeit f2(\"12/1/2013 00:01:02\")\n%timeit x1=pd.read_csv(\"/tmp/1.csv\",parse_dates=True,index_col=0)\n%timeit x2=pd.read_csv(\"/tmp/1.csv\",parse_dates=True,index_col=0,date_parser=f1a)\n%timeit x3=pd.read_csv(\"/tmp/1.csv\",parse_dates=True,index_col=0,date_parser=f2)\n#assert x1==x2==x3\n\n10000 loops, best of 3: 24.2 µs per loop # strptime is faster then\n10000 loops, best of 3: 95.2 µs per loop # dateutil.parse by 4x\n100 loops, best of 3: 14.1 ms per loop # but read_csv has a fastpath for iso8601\n1 loops, best of 3: 259 ms per loop\n1 loops, best of 3: 956 ms per loop\n\nMeasuring an innovative dt format string\n10000 loops, best of 3: 24 µs per loop # in the general case\n10000 loops, best of 3: 96.8 µs per loop # 4x\n1 loops, best of 3: 1.1 s per loop # and read_csv falls back to dateutil.parse() (*)\n1 loops, best of 3: 256 ms per loop # in which case strptime, yields a nice 3-4x speedup.\n1 loops, best of 3: 1.17 s per loop #(*)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32693471",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32693471",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32693471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjkzNDcx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T21:20:02Z",
    "updated_at": "2014-01-18T21:23:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI their is also a stealth fast-path for format of '%Y%m%d', e.g. '20130101', as can be converted directly to an int64 and procssed that way (their is a commit for it but don't remember)\n\n```\nIn [4]: s = Series(date_range('20000101',periods=10000)).apply(lambda x: x.strftime('%Y%m%d'))\n\nIn [5]: %timeit pd.to_datetime(s)\n1 loops, best of 3: 518 ms per loop\n\nIn [6]: %timeit pd.to_datetime(s,format='%Y%m%d')\n100 loops, best of 3: 10.5 ms per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32693650",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32693650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32693650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjkzNjUw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T21:27:28Z",
    "updated_at": "2014-01-18T21:27:28Z",
    "author_association": "NONE",
    "body": "Code reference? can't see it in tslib.pyx,inference.pyx nor datetime.pxd, nor grep the string anywhere.\nShow me where and I'll update the docs again. Users can't optimize to fastpaths without knowing \nwhat they are.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32693736",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32693736",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32693736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjkzNzM2",
    "user": {
      "login": "danbirken",
      "id": 91798,
      "node_id": "MDQ6VXNlcjkxNzk4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/91798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danbirken",
      "html_url": "https://github.com/danbirken",
      "followers_url": "https://api.github.com/users/danbirken/followers",
      "following_url": "https://api.github.com/users/danbirken/following{/other_user}",
      "gists_url": "https://api.github.com/users/danbirken/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danbirken/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danbirken/subscriptions",
      "organizations_url": "https://api.github.com/users/danbirken/orgs",
      "repos_url": "https://api.github.com/users/danbirken/repos",
      "events_url": "https://api.github.com/users/danbirken/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danbirken/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T21:31:19Z",
    "updated_at": "2014-01-18T21:31:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "My guess is that if you can get the datetime string format, you could write a heavily optimized c/cython code path that would provide a healthy speed-up over the simple solution (similar to the iso8601 path).  In fact this might already exist in `tslib.array_strptime`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32693761",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32693761",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32693761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjkzNzYx",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T21:32:21Z",
    "updated_at": "2014-01-18T21:32:21Z",
    "author_association": "NONE",
    "body": "@danbirken... you know what I'm about to say. :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32694280",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32694280",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32694280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjk0Mjgw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T21:54:34Z",
    "updated_at": "2014-01-18T22:31:43Z",
    "author_association": "NONE",
    "body": "I'll get the ball rolling. Let's start small.\n\n```\ndef infer_df_format(s):\n    import dateutil\n    from  datetime import datetime as dt\n\n    def maybe_int(v):\n        try:\n           return int(v)\n        except:\n           return v \n\n    dmap={'day':'%d',\n          'month':'%m',\n          'year':'%Y',\n          'hour':'%H',\n          'minute':'%M',\n          'second':'%S'}\n\n    tokens=map(maybe_int,dateutil.parser._timelex(s))       \n    token_dict=dict([(v,i) for i,v in enumerate(tokens)])\n\n    dt=dateutil.parser.parse(s)\n    for k,fmt in dmap.items():\n        val = getattr(dt,k)\n        pos = token_dict.get(val)\n        if pos is not None:\n            tokens[pos]=fmt\n\n    try:\n        fmt = \"\".join(tokens)\n        if  dt.strftime(fmt) == s:\n            return fmt    \n    except:\n        pass\n\ns=\"2013-12-01T11:58:59\"\ninfer_df_format(s)\n\nOut[15]: '%Y-%m-%dT%H:%M:%S'\n```\n\nyour move.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32694304",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32694304",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32694304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjk0MzA0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T21:55:38Z",
    "updated_at": "2014-01-18T21:55:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/pydata/pandas/pull/4826\n\nThis applies to `%Y%m%d` for strings or int types\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32695706",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32695706",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32695706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjk1NzA2",
    "user": {
      "login": "danbirken",
      "id": 91798,
      "node_id": "MDQ6VXNlcjkxNzk4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/91798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danbirken",
      "html_url": "https://github.com/danbirken",
      "followers_url": "https://api.github.com/users/danbirken/followers",
      "following_url": "https://api.github.com/users/danbirken/following{/other_user}",
      "gists_url": "https://api.github.com/users/danbirken/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danbirken/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danbirken/subscriptions",
      "organizations_url": "https://api.github.com/users/danbirken/orgs",
      "repos_url": "https://api.github.com/users/danbirken/repos",
      "events_url": "https://api.github.com/users/danbirken/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danbirken/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T22:53:16Z",
    "updated_at": "2014-01-18T22:53:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I feel a little worried about depending on a non-public interface for dateutil.  At the same time getting the change into dateutil itself (where it theoretically belongs), seems pretty unsatisfactory as well.\n\nOut of left field suggestion: What about a function that just tries 10 or 20 common datetime string formats, and then if one of them works it uses a fast code path to parse them all.  If they all fail it just falls back to the slow method.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32695772",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32695772",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32695772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjk1Nzcy",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-18T22:57:02Z",
    "updated_at": "2014-01-18T22:57:44Z",
    "author_association": "NONE",
    "body": "re non public interface, very true but we can always fallback if something raises, or\nduplicate the lexer code inline. it's not that much code.\n\nFor now, assume that you have a function that reliably returns a format string or None.\nThe specifics we can sort out later and expand over time.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32698807",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5490#issuecomment-32698807",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5490",
    "id": 32698807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjk4ODA3",
    "user": {
      "login": "danbirken",
      "id": 91798,
      "node_id": "MDQ6VXNlcjkxNzk4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/91798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danbirken",
      "html_url": "https://github.com/danbirken",
      "followers_url": "https://api.github.com/users/danbirken/followers",
      "following_url": "https://api.github.com/users/danbirken/following{/other_user}",
      "gists_url": "https://api.github.com/users/danbirken/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danbirken/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danbirken/subscriptions",
      "organizations_url": "https://api.github.com/users/danbirken/orgs",
      "repos_url": "https://api.github.com/users/danbirken/repos",
      "events_url": "https://api.github.com/users/danbirken/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danbirken/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-19T01:44:58Z",
    "updated_at": "2014-01-19T01:44:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well I'm pretty familiar with this section of the code, so I'll take a stab at this on Monday provided nobody else does it between now and then :)\n"
  }
]
