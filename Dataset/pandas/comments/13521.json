[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/228883811",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13521#issuecomment-228883811",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13521",
    "id": 228883811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODg4MzgxMQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-27T21:38:48Z",
    "updated_at": "2016-06-27T21:38:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is already a good degree of sanitation to the inputs, in general you can't run arbitrary python, e.g. something like this:\n\n```\nIn [17]: df.query('del a')\nNotImplementedError                       Traceback (most recent call last)\n<ipython-input-17-17a3d89bb7a9> in <module>()\n----> 1 df.query('del a')\n<snip>\nNotImplementedError: 'Delete' nodes are not implemented\n```\n\nWhat would be an example \"injection?\"\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/229109794",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13521#issuecomment-229109794",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13521",
    "id": 229109794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTEwOTc5NA==",
    "user": {
      "login": "ChristianKleineidam",
      "id": 5765379,
      "node_id": "MDQ6VXNlcjU3NjUzNzk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5765379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChristianKleineidam",
      "html_url": "https://github.com/ChristianKleineidam",
      "followers_url": "https://api.github.com/users/ChristianKleineidam/followers",
      "following_url": "https://api.github.com/users/ChristianKleineidam/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChristianKleineidam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChristianKleineidam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChristianKleineidam/subscriptions",
      "organizations_url": "https://api.github.com/users/ChristianKleineidam/orgs",
      "repos_url": "https://api.github.com/users/ChristianKleineidam/repos",
      "events_url": "https://api.github.com/users/ChristianKleineidam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChristianKleineidam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T16:48:43Z",
    "updated_at": "2016-06-28T17:07:45Z",
    "author_association": "NONE",
    "body": "Example code:\n\n```\nimport pandas as pd\n\nids = (1,2,3)\nname = (\"alice\", \"bob\", \"carol\")\npassword = (\"secret\", \"very secret\", \"uber-secret\")\nemail_address = (\"alice@gmail.com\", \"bob@gmail.com\", \"carol@gmail.com\")\nage = (21, 24, 23)\n\ndata = pd.DataFrame({\n    \"ids\": ids, \n    \"name\" : name, \n    \"password\": password,\n    \"email_address\": email_address,\n    \"age\":  age})\n\ndef login_get_id(name:str, password:str):\n    return data.query(\"name == '%s' and password == '%s'\" %(name,password))[[\"ids\"]]\n\nlogin_get_id(\"alice\", \"secret\")\nlogin_get_id(\"alice\", \"X'  or name == 'alice\")\nlogin_get_id(\"X\", \"X'  or email_address == 'alice@gmail.com\")\n```\n\nAll three of those queries give the same result but a naive user of pandas could think that `login_get_id()` only returns an id of an user when it's given a correct password. The naive user also wouldn't think that `login_get_id()` allows accessing information about the email address.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/229113308",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13521#issuecomment-229113308",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13521",
    "id": 229113308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTExMzMwOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T17:00:58Z",
    "updated_at": "2016-06-28T17:00:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe I'm missing something, but I don't see how this could cause some kind of injection. That just looks like a poorly defined function :)\n\nYou would need to show how something like `DataFrame.query/eval(string)` executes arbitrary code. Something like remove all the files in the current directory. It might be possible, but imports & call nodes aren't allowed in query strings (at the moment) so it'll be difficult.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/229117458",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13521#issuecomment-229117458",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13521",
    "id": 229117458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTExNzQ1OA==",
    "user": {
      "login": "ChristianKleineidam",
      "id": 5765379,
      "node_id": "MDQ6VXNlcjU3NjUzNzk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5765379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChristianKleineidam",
      "html_url": "https://github.com/ChristianKleineidam",
      "followers_url": "https://api.github.com/users/ChristianKleineidam/followers",
      "following_url": "https://api.github.com/users/ChristianKleineidam/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChristianKleineidam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChristianKleineidam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChristianKleineidam/subscriptions",
      "organizations_url": "https://api.github.com/users/ChristianKleineidam/orgs",
      "repos_url": "https://api.github.com/users/ChristianKleineidam/repos",
      "events_url": "https://api.github.com/users/ChristianKleineidam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChristianKleineidam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T17:16:21Z",
    "updated_at": "2016-06-28T17:16:21Z",
    "author_association": "NONE",
    "body": "It doesn't execute arbitary code but, if an attacker can control the input he can access all the information in the dataframe. \n\nIf the user wants to know the age in this case he can also run queries like\n\n```\nlogin_get_id(\"X\", \"X'  or age>20 and name == 'alice\")\nlogin_get_id(\"X\", \"X'  or age>25 and name == 'alice\")\n```\n\nDo you think that nobody is going to use DataFrame.query() with string replace with user submitted data, where they don't want the user to know all the data that's contained in a given DataFrame?\n\nI think in common usage of the term SQL injection, it's called a SQL injection if a website loses it's user data to an attacker even if the attacker isn't able to alter any data.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/229210034",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13521#issuecomment-229210034",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13521",
    "id": 229210034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTIxMDAzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T23:02:33Z",
    "updated_at": "2016-06-28T23:02:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ChristianKleineidam \n\nI suppose you could add some docs but this is really out of scope for pandas\n"
  }
]
