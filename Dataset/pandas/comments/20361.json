[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373358024",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373358024",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373358024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzM1ODAyNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T12:23:06Z",
    "updated_at": "2018-03-15T12:23:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Marking this as a WIP for now. For JSONArray, the `value_counts` test is failing. I'd like to see if we can reuse `factorize` in `value_counts`. In principal, a counting the labels and doing a `uniques.take` on the index of the counts should work."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373383413",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373383413",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373383413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzM4MzQxMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T13:54:49Z",
    "updated_at": "2018-03-15T13:54:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "The failures are caused by a \"bug\" in `is_extension_array_dtype`. https://github.com/pandas-dev/pandas/pull/20363"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373726425",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373726425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373726425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzcyNjQyNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T14:15:55Z",
    "updated_at": "2018-03-16T14:15:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "This should pass now."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373820053",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373820053",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373820053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzgyMDA1Mw==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-03-16T19:25:24Z",
    "updated_at": "2018-03-27T12:52:07Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20361?src=pr&el=h1) Report\n> Merging [#20361](https://codecov.io/gh/pandas-dev/pandas/pull/20361?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/1b1b99b3ffa1080dc86f9074ce0e78e0fc92dd38?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `96.55%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/20361/graphs/tree.svg?width=650&height=150&src=pr&token=eZ4WkYLtcO)](https://codecov.io/gh/pandas-dev/pandas/pull/20361?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #20361      +/-   ##\n==========================================\n- Coverage   91.82%   91.82%   -0.01%     \n==========================================\n  Files         152      152              \n  Lines       49232    49249      +17     \n==========================================\n+ Hits        45209    45223      +14     \n- Misses       4023     4026       +3\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.21% <96.55%> (-0.01%)` | :arrow_down: |\n| #single | `41.89% <62.06%> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/20361?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/arrays/categorical.py](https://codecov.io/gh/pandas-dev/pandas/pull/20361/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL2NhdGVnb3JpY2FsLnB5) | `96.19% <100%> (-0.01%)` | :arrow_down: |\n| [pandas/core/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/20361/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYmFzZS5weQ==) | `96.8% <100%> (+0.01%)` | :arrow_up: |\n| [pandas/core/algorithms.py](https://codecov.io/gh/pandas-dev/pandas/pull/20361/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYWxnb3JpdGhtcy5weQ==) | `94.36% <100%> (+0.04%)` | :arrow_up: |\n| [pandas/core/arrays/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/20361/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL2Jhc2UucHk=) | `84.14% <90%> (+0.81%)` | :arrow_up: |\n| [pandas/util/testing.py](https://codecov.io/gh/pandas-dev/pandas/pull/20361/diff?src=pr&el=tree#diff-cGFuZGFzL3V0aWwvdGVzdGluZy5weQ==) | `84.52% <0%> (-0.21%)` | :arrow_down: |\n| [pandas/core/generic.py](https://codecov.io/gh/pandas-dev/pandas/pull/20361/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZ2VuZXJpYy5weQ==) | `95.85% <0%> (ø)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20361?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20361?src=pr&el=footer). Last update [1b1b99b...c06da3a](https://codecov.io/gh/pandas-dev/pandas/pull/20361?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373820885",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373820885",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373820885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzgyMDg4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T19:28:46Z",
    "updated_at": "2018-03-16T19:28:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry about the tangentially related changes refactoring the docstring. I can revert if needed, but I don't think it complicates review too much since the only non-doc change to `algos.py` is replacing an `is_categorical` with an `is_extension_array_dtype`.\r\n\r\nTracking down a py-2 failure now."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373825022",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373825022",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373825022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzgyNTAyMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T19:45:33Z",
    "updated_at": "2018-03-16T19:45:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's the new docstring for pandas.factorize\r\n\r\n![fireshot capture 005 - pandas factorize pandas 0 23 0 dev0_ - file____users_taugspurger_sandbox_](https://user-images.githubusercontent.com/1312546/37541452-ad85b388-2928-11e8-8b71-e300ff9544af.png)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373853940",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373853940",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373853940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg1Mzk0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T21:47:11Z",
    "updated_at": "2018-03-16T21:47:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, ``order`` is still there I thought we removed that? (or maybe we just deprecated it, can you add back as a deprecated parm)?\r\n\r\nalso, as a public interface, may not really need ``size_hint`` (as now have ``_factorize_array`` which can be an internal interface, but this is small potatoes)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373854103",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373854103",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373854103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg1NDEwMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T21:47:57Z",
    "updated_at": "2018-03-16T21:47:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "maybe link to ``pd.unique`` as well"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373854248",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373854248",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373854248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg1NDI0OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T21:48:35Z",
    "updated_at": "2018-03-16T21:48:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> can you add back as a deprecated parm\r\n\r\nyeah, lost that in the shuffle.\r\n\r\n> also, as a public interface, may not really need size_hint\r\n\r\nAgreed.\r\n\r\n> maybe link to pd.unique as well\r\n\r\n👍 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373854621",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-373854621",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 373854621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg1NDYyMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T21:50:33Z",
    "updated_at": "2018-03-16T21:50:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "needs a rebase"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374214164",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-374214164",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 374214164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDIxNDE2NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T13:38:22Z",
    "updated_at": "2018-03-19T13:38:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do we want to have `ExtensionArray.factorize` use the shared docstring as well? There's an import order issue, I've tried to keep `arrays/base.py` from importing much from pandas (just `AbstractMethodError` so far. If we do a shared doc I would have to move the docstring to a file on it's own, and then import it from `algorithms.py`, `arrays/base.py`, `core/base.py` and `categorical.py`.\r\n\r\nI also haven't really thought through if that would break anything for EA implementers. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375295966",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375295966",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375295966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTI5NTk2Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T12:59:44Z",
    "updated_at": "2018-03-22T13:06:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ugh I mixed up my branches and merged https://github.com/pandas-dev/pandas/pull/19957 into here... Fixing now.\r\n\r\nOK hopefully fixed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375488402",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375488402",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375488402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTQ4ODQwMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T23:16:01Z",
    "updated_at": "2018-03-22T23:16:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "this looks fine. I am still concerned about the API expansion for implementors here, IOW you have both ``_values_for_factorize`` and now ``_from_factorize``."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375605145",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375605145",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375605145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYwNTE0NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T10:10:46Z",
    "updated_at": "2018-03-23T10:10:46Z",
    "author_association": "MEMBER",
    "body": "> I dislike how this opens up the internals of pandas' factorization algorithms to the public more. Is it publicly documented anywhere that iNaT is the minimum integer? How would an EA author know to do something like what we do for Categorical (and PeriodArray when we get there)?\r\n\r\nBut is it needed that the extension author specifies this value? \r\nBecause what are the options? If the array has integer-like dtype, it is iNaT, otherwise it is np.nan ? \r\n(if that is the case, I think we could deduce that?)\r\n\r\n\r\nIn general, I am wondering if we couldn't make this simpler. If we could somehow extend `factorize` to specify a mask or a na_value, then the `factorize` method on EA could be something like:\r\n\r\n```\r\ndef factorize(self, na_sentinel=-1):\r\n    mask = self.isna()\r\n    values = ... # this is the part to fill in by the extension array author (equivalent _values_for_factorize)\r\n    labels, uniques = pd.factorize(values, na_sentinel=na_sentinel, mask=mask)\r\n    uniques = ... # coerce back to extension array (_from_factorized)\r\n    return labels, uniques\r\n```\r\n\r\nThis is of course *very* similar to the current `factorize` implementation, but with the difference that it does not use internal APIs. And actually, overriding this does not take more lines of code than overriding both `_values_for_factorize` and `_from_factorized`. So I am not fully sure of the advantage of providing both ways to do it.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375627850",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375627850",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375627850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYyNzg1MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T11:19:30Z",
    "updated_at": "2018-03-23T11:19:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So I am not fully sure of the advantage of providing both ways to do it.\r\n\r\n\"both\" being\r\n\r\n1. `EA.factorize`\r\n2. `EA._values_for_factorize`, and `EA._from_factorized`\r\n\r\ncorrect?\r\n\r\nLet me see if I can make `mask` as an argument to `factorize` work. That would indeed be cleaner."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375637664",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375637664",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375637664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYzNzY2NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T11:57:11Z",
    "updated_at": "2018-03-23T11:57:59Z",
    "author_association": "MEMBER",
    "body": "> \"both\" being\r\n>\r\n>   EA.factorize\r\n>   EA._values_for_factorize, and EA._from_factorized\r\n\r\nYes. Looking at the diff now, it seems to me that overwriting `EA._values_for_factorize` and `EA._from_factorized` will actually need as much as custom code as just overwriting `EA.factorize`. So then the argument of providing `_values_for_factorize` to reduce duplication of the actual `factorize` implementation (like we had for `argsort`) does not fully hold in this case (assuming that we can use the public `pd.factorize` instead of `_factorize_arrays`).\r\n\r\n> Let me see if I can make mask as an argument to factorize work. That would indeed be cleaner.\r\n\r\nThen of course we need to be OK with exposing this in the public `factorize` API. But from an extension author point of view this seems rather clean. \r\nAn alternative would be to specify a `na_value` and then calculate the mask, but I am not sure if that has any advantage over a mask.\r\n\r\n@jreback what are your thoughts on such a `mask` keyword for `pd.factorize`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375647020",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375647020",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375647020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY0NzAyMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T12:15:19Z",
    "updated_at": "2018-03-23T12:15:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm having some trouble making the `mask` approach work. It seems like pandas' factorization methods do the right thing for some missing values, like `Decimal(NaN)`.\r\n\r\n\r\n```python\r\nIn [2]: from decimal import Decimal\r\n\r\nIn [3]: pd.factorize([Decimal('0.0'), Decimal('NaN'), Decimal('0.0')])\r\nOut[3]: (array([ 0, -1,  0]), array([Decimal('0.0')], dtype=object))\r\n```\r\n\r\nSo in that situation we would have to choose to ignore the mask argument (side-note, `pd.isna` does not consider `Decimal('NaN')` to be NA, so detecting this seems fragile)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375647609",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375647609",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375647609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY0NzYwOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T12:18:06Z",
    "updated_at": "2018-03-23T12:18:06Z",
    "author_association": "MEMBER",
    "body": "But for those object arrays, we can always use `np.nan` or `None` I think if a mask is specified? That will always work, regardless of whether the actual NA value is recognized by `factorize` ?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375648689",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375648689",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375648689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY0ODY4OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T12:22:50Z",
    "updated_at": "2018-03-23T12:22:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> But for those object arrays, we can always use np.nan or None I think if a mask is specified? \r\n\r\nSo you think modify `values[mask] = np.nan`? I think we assumed different meanings for `mask`. I was thinking of it as \"factorize anything, and fixup the missing values later.\" Your were thinking of it as \"fixup missing values before factorization\"?\r\n\r\nBut with my way of interpreting `mask` there could be a conflict between what `pd.factorize` considers missing, and what `mask` says is missing.\r\n\r\nFTR, here's my change.\r\n\r\n```python\r\ndef _refactorize(values, labels, uniques, na_sentinel, mask=None):\r\n    \"\"\"Fixup missing value handling according to a mask.\r\n\r\n    This modifies labels and uniques inplace.\r\n\r\n    Parameters\r\n    ----------\r\n    values : ndarray\r\n    labels : ndarray\r\n        Integer labels. Missing values may be improperly coded as\r\n        values and not `na_sentinel` going in.\r\n    uniques : ndarray\r\n        Unique set of `values`. Missing values may be improperly\r\n        included in `uniques`, and will be removed.\r\n    na_sentinel : int\r\n        The value to use for marking missing values in `labels`.\r\n    mask : ndarray, optional\r\n        Boolean mask. If specified, this will be used to find the missing\r\n        value sentinel from `values`.\r\n    \"\"\"\r\n    from pandas import isna\r\n\r\n    if mask is not None and mask.any():\r\n        # fixup\r\n        idx = mask.argmax()\r\n        na_code = labels[idx]\r\n        # fixup labels\r\n        labels[labels == na_code] = na_sentinel\r\n        labels[labels > na_code] -= 1\r\n\r\n        # fixup uniques\r\n        na_value = values[idx]\r\n        uniques_mask = np.ones_like(uniques, dtype='bool')\r\n        uniques_mask[uniques == na_value] = False\r\n        uniques = uniques[uniques_mask]\r\n\r\n    return labels, uniques\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375650668",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375650668",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375650668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY1MDY2OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T12:31:49Z",
    "updated_at": "2018-03-23T12:31:49Z",
    "author_association": "MEMBER",
    "body": "Ah, yes, I was thinking of the \"change `values` before passing to `factorize`\". \r\nThe problem with that is of course that we then should take a copy of `values`, which might be an unnecessary copy in case the `values` were constructed specifically for `factorize`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375674883",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375674883",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375674883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY3NDg4Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T14:03:11Z",
    "updated_at": "2018-03-23T14:03:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here are the cases I see. I put quotes around the ExtensionArray's definition of missing, which may differ from pandas'.\r\n\r\n1. float/object values with \"NA\" values as NA (Decimal)\r\n2. float/object values with \"NA\" values as something else (IPArray)\r\n3. integer values with \"NA\" values as iNaT (DatetimeTZ)\r\n4. integer values with \"NA\" values as something else (Categorical)\r\n\r\nYou could add a 5/6 for our uint64 hashtable. I don't think that changes anything.\r\n\r\nSo for cases where the NA values align (1, 3), things will just work, no `mask` required.\r\n\r\nFor cases where they don't align (2, 4), we'll need to either modify the values going into the hashtable, so that `values[mask] = pandas_na_for_hashtable`, or modify that labels / uniques coming out.\r\n\r\nDetecting which case where in should be possible. Will try that now..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375677677",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375677677",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375677677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY3NzY3Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T14:12:04Z",
    "updated_at": "2018-03-23T14:12:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Though it occurs to me that a mask with NA values goes against https://github.com/pandas-dev/pandas/issues/20328 a bit... Implementing https://github.com/pandas-dev/pandas/issues/20328 would also make this cleaner, as the EX author need only pass through an `na_value`, and everything should be OK. I'll see if doing that is simple."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375685848",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375685848",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375685848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY4NTg0OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T14:37:58Z",
    "updated_at": "2018-03-23T14:37:58Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger Alternative is to just document that if you have float/object data, we expect np.nan, if you have integer data, we expect iNaT as missing value. And that extension authors then apply the mask themselves. \r\nThat brings us back to the original implementation of the PR I think .. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375701901",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375701901",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375701901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTcwMTkwMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T15:24:58Z",
    "updated_at": "2018-03-23T15:24:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "#20328 doesn't look trivial, so I've abandoned it for now.\r\n\r\n> Alternative is to just document that if you have float/object data, we expect np.nan, if you have integer data, we expect iNaT as missing value.\r\n\r\nYes, we'll need to do this regardless, as extension-array authors may have to take precautions if they use iNaT (int min) as a valid value. But I think we'll have to make it clear that this is an implementation detail at the moment.\r\n\r\n>  That brings us back to the original implementation of the PR I think ..\r\n\r\nClose. The main difference is that in c288d67, we mask the values going *into* the hashtable.\r\n\r\nIf this approach looks OK, I will add sufficiently scary warnings that the default implementation is using features private to pandas (`_factorize_array`, the missing value markers for each type of hashtable, etc.).\r\n\r\nTangent, I noticed that the UInt64Hashtable doesn't have a missing value marker. Was that intentional (ping @gfyoung I think).\r\n\r\n```python\r\nIn [9]: from pandas.core.algorithms import _factorize_array\r\n\r\nIn [10]: _factorize_array(arr, check_nulls=True)\r\nOut[10]:\r\n(array([0, 0, 1, 2]),\r\n array([                   0,                    1, 18446744073709551615],\r\n       dtype=uint64))\r\n```\r\n\r\nIn hashtable_helper, the null condition seems to be the string `'False'`.\r\n\r\n```\r\n# name, dtype, null_condition, float_group\r\ndtypes = [('Float64', 'float64', 'val != val', True),\r\n          ('UInt64', 'uint64', 'False', False),\r\n          ('Int64', 'int64', 'val == iNaT', False)]\r\n```\r\n\r\nAnyway, changing this probably isn't desired, but thought I'd mention it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375718103",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375718103",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375718103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTcxODEwMw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T16:13:35Z",
    "updated_at": "2018-03-23T16:13:35Z",
    "author_association": "MEMBER",
    "body": "> Tangent, I noticed that the UInt64Hashtable doesn't have a missing value marker.\r\n\r\n@TomAugspurger : Unfortunately, there is no well-defined missing value marker for `uint` AFAIK."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375879909",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375879909",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375879909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTg3OTkwOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-24T11:59:45Z",
    "updated_at": "2018-03-24T11:59:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback you can ignore all the back and forth between Joris and I yesterday about `mask`. I think https://github.com/pandas-dev/pandas/pull/20473 will make things nice for EA authors. They'll just need to specify\r\n\r\n- The array to be used for factorization\r\n- The scalar in their array to be considered NA.\r\n\r\nSome examples:\r\n\r\n- defualt: `self.astype(object), np.nan`\r\n- Categorical: `self.codes.astype(int64), -1`\r\n- MACArray: `self.data, 0` (this is in cyberpandas. A uint64 array, where 0 is NA)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375929154",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-375929154",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 375929154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTkyOTE1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-24T22:22:33Z",
    "updated_at": "2018-03-24T22:22:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok let's work on #20473 first then, that is exactly the kind of things would like to see. e.g. moving around pandas internals to make more friendly by essentially pushing things down rather than doing them solely in the EA."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376489515",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-376489515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 376489515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjQ4OTUxNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T11:23:17Z",
    "updated_at": "2018-03-27T11:23:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated on top of the parametrized NA value. Things look relatively clean now I think (most of the diff is due to moving docstrings to a shared spot). In terms of API:\r\n\r\n```python\r\ndef _values_for_argsort(): -> Tuple[ndarray, Any]\r\n    # array to factorize and na_value\r\n\r\n@classmethod\r\n@abstractmethod\r\ndef _from_factorized(cls, values, original): -> ExtensionArray\r\n    # Reconstruct uniques from values & original\r\n```\r\n\r\nThis is adequate for all our examples in pandas, including `JSONArray` which isn't otherwise factorizable (non-hashable). It also works well for IPArray and MACArray (Uint64 with 0 as the NA value).\r\n\r\n@jorisvandenbossche do you think this will work well for geopandas? Can you have missing geometries?\r\n\r\nThe categorical tests are an example of using `original` in `_from_factorized`, as we copy over the unobserved categories to the `uniques` dtype."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376498103",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-376498103",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 376498103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjQ5ODEwMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T11:56:51Z",
    "updated_at": "2018-03-27T11:56:51Z",
    "author_association": "MEMBER",
    "body": "> @jorisvandenbossche do you think this will work well for geopandas? Can you have missing geometries?\r\n\r\nYes, that should be fine. I am not fully sure yet, but I think I will use a binary blob for each geometry (\"well known binary\" format), which will give an object array of bytes, and with eg None as missing value. So this should work (that should already work with `pd.factorize` itself without the new infrastructure I think). \r\nI will also need the `original` to add back metadata about the coordinate reference system.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376498809",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20361#issuecomment-376498809",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20361",
    "id": 376498809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjQ5ODgwOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T11:59:38Z",
    "updated_at": "2018-03-27T11:59:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "From Python your array of pointers look like Int64s, right? Could those be factorized? I *think* it should work, though I haven't thought it through fully."
  }
]
