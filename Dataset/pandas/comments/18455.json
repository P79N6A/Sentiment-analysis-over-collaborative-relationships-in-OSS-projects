[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346700425",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346700425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346700425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjcwMDQyNQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-23T21:36:48Z",
    "updated_at": "2017-11-23T21:36:48Z",
    "author_association": "MEMBER",
    "body": "By the way: it works with ``MultiIndex`` columns:\r\n\r\n```\r\nIn [2]: s = pd.DataFrame(-1, index=[1, np.nan, 2,],\r\n   ...:                  columns=pd.MultiIndex.from_product([[2, np.nan], [3, np.nan]]))\r\n   ...:                  \r\n\r\nIn [3]: s == s\r\nOut[3]: \r\n         2         NaN      \r\n         3   NaN     3   NaN\r\n 1.0  True  True  True  True\r\nNaN   True  True  True  True\r\n 2.0  True  True  True  True\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346700652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346700652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346700652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjcwMDY1Mg==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-23T21:39:32Z",
    "updated_at": "2017-11-23T21:50:10Z",
    "author_association": "MEMBER",
    "body": "I spoke too soon:\r\n\r\n```\r\nIn [3]: s == s.copy()\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-3-d24aa33f67ac> in <module>()\r\n----> 1 s == s.copy()\r\n\r\n/home/nobackup/repo/pandas/pandas/core/ops.py in f(self, other)\r\n   1324     def f(self, other):\r\n   1325         if isinstance(other, ABCDataFrame):  # Another DataFrame\r\n-> 1326             return self._compare_frame(other, func, str_rep)\r\n   1327         elif isinstance(other, ABCSeries):\r\n   1328             return self._combine_series_infer(other, func, try_cast=False)\r\n\r\n/home/nobackup/repo/pandas/pandas/core/frame.py in _compare_frame(self, other, func, str_rep, try_cast)\r\n   4008                              'DataFrame objects')\r\n   4009         return self._compare_frame_evaluate(other, func, str_rep,\r\n-> 4010                                             try_cast=try_cast)\r\n   4011 \r\n   4012     def _flex_compare_frame(self, other, func, str_rep, level, try_cast=True):\r\n\r\n/home/nobackup/repo/pandas/pandas/core/frame.py in _compare_frame_evaluate(self, other, func, str_rep, try_cast)\r\n   3987                 return dict((col, func(a[col], b[col])) for col in a.columns)\r\n   3988 \r\n-> 3989             new_data = expressions.evaluate(_compare, str_rep, self, other)\r\n   3990             return self._constructor(data=new_data, index=self.index,\r\n   3991                                      columns=self.columns, copy=False)\r\n\r\n/home/nobackup/repo/pandas/pandas/core/computation/expressions.py in evaluate(op, op_str, a, b, use_numexpr, **eval_kwargs)\r\n    202     use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\r\n    203     if use_numexpr:\r\n--> 204         return _evaluate(op, op_str, a, b, **eval_kwargs)\r\n    205     return _evaluate_standard(op, op_str, a, b)\r\n    206 \r\n\r\n/home/nobackup/repo/pandas/pandas/core/computation/expressions.py in _evaluate_numexpr(op, op_str, a, b, truediv, reversed, **eval_kwargs)\r\n    117 \r\n    118     if result is None:\r\n--> 119         result = _evaluate_standard(op, op_str, a, b)\r\n    120 \r\n    121     return result\r\n\r\n/home/nobackup/repo/pandas/pandas/core/computation/expressions.py in _evaluate_standard(op, op_str, a, b, **eval_kwargs)\r\n     62         _store_test_result(False)\r\n     63     with np.errstate(all='ignore'):\r\n---> 64         return op(a, b)\r\n     65 \r\n     66 \r\n\r\n/home/nobackup/repo/pandas/pandas/core/frame.py in _compare(a, b)\r\n   3985 \r\n   3986             def _compare(a, b):\r\n-> 3987                 return dict((col, func(a[col], b[col])) for col in a.columns)\r\n   3988 \r\n   3989             new_data = expressions.evaluate(_compare, str_rep, self, other)\r\n\r\n/home/nobackup/repo/pandas/pandas/core/frame.py in <genexpr>(.0)\r\n   3985 \r\n   3986             def _compare(a, b):\r\n-> 3987                 return dict((col, func(a[col], b[col])) for col in a.columns)\r\n   3988 \r\n   3989             new_data = expressions.evaluate(_compare, str_rep, self, other)\r\n\r\n/home/nobackup/repo/pandas/pandas/core/frame.py in __getitem__(self, key)\r\n   2130             return self._getitem_frame(key)\r\n   2131         elif is_mi_columns:\r\n-> 2132             return self._getitem_multilevel(key)\r\n   2133         else:\r\n   2134             return self._getitem_column(key)\r\n\r\n/home/nobackup/repo/pandas/pandas/core/frame.py in _getitem_multilevel(self, key)\r\n   2174 \r\n   2175     def _getitem_multilevel(self, key):\r\n-> 2176         loc = self.columns.get_loc(key)\r\n   2177         if isinstance(loc, (slice, Series, np.ndarray, Index)):\r\n   2178             new_columns = self.columns[loc]\r\n\r\n/home/nobackup/repo/pandas/pandas/core/indexes/multi.py in get_loc(self, key, method)\r\n   2119             key = _values_from_object(key)\r\n   2120             key = tuple(map(_maybe_str_to_time_stamp, key, self.levels))\r\n-> 2121             return self._engine.get_loc(key)\r\n   2122 \r\n   2123         # -- partial selection or non-unique index\r\n\r\n/home/nobackup/repo/pandas/pandas/_libs/index.pyx in pandas._libs.index.MultiIndexObjectEngine.get_loc (pandas/_libs/index.c:14965)()\r\n    616         return super(MultiIndexObjectEngine, self).get_indexer(values)\r\n    617 \r\n--> 618     cpdef get_loc(self, object val):\r\n    619 \r\n    620         # convert a MI to an ndarray\r\n\r\n/home/nobackup/repo/pandas/pandas/_libs/index.pyx in pandas._libs.index.MultiIndexObjectEngine.get_loc (pandas/_libs/index.c:14886)()\r\n    621         if hasattr(val, 'values'):\r\n    622             val = val.values\r\n--> 623         return super(MultiIndexObjectEngine, self).get_loc(val)\r\n    624 \r\n    625 \r\n\r\n/home/nobackup/repo/pandas/pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas/_libs/index.c:5832)()\r\n    137             util.set_value_at(arr, loc, value)\r\n    138 \r\n--> 139     cpdef get_loc(self, object val):\r\n    140         if is_definitely_invalid_key(val):\r\n    141             raise TypeError(\"'{val}' is an invalid key\".format(val=val))\r\n\r\n/home/nobackup/repo/pandas/pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas/_libs/index.c:5678)()\r\n    159 \r\n    160         try:\r\n--> 161             return self.mapping.get_item(val)\r\n    162         except (TypeError, ValueError):\r\n    163             raise KeyError(val)\r\n\r\n/home/nobackup/repo/pandas/pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas/_libs/hashtable.c:21018)()\r\n   1263                                        sizeof(uint32_t)) # flags\r\n   1264 \r\n-> 1265     cpdef get_item(self, object val):\r\n   1266         cdef khiter_t k\r\n   1267         if val != val or val is None:\r\n\r\n/home/nobackup/repo/pandas/pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas/_libs/hashtable.c:20972)()\r\n   1271             return self.table.vals[k]\r\n   1272         else:\r\n-> 1273             raise KeyError(val)\r\n   1274 \r\n   1275     cpdef set_item(self, object key, Py_ssize_t val):\r\n\r\nKeyError: (2.0, nan)\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346889982",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346889982",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346889982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njg4OTk4Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T20:00:56Z",
    "updated_at": "2017-11-24T20:00:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm this should work, we already use ``array_equivalent`` to compare (inside ``Index.equals``).\r\n\r\n```\r\nIn [1]: from pandas.core.dtypes.missing import array_equivalent\r\n\r\nIn [2]: i = pd.Index([1.0, np.nan, 3])\r\n\r\nIn [3]: i\r\nOut[3]: Float64Index([1.0, nan, 3.0], dtype='float64')\r\n\r\nIn [4]: array_equivalent(i.values, i.values)\r\nOut[4]: True\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346891637",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346891637",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346891637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njg5MTYzNw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T20:18:31Z",
    "updated_at": "2017-11-24T20:18:31Z",
    "author_association": "MEMBER",
    "body": "More general question: is it a desired feature or a limitation that equality works only on objects with similarly ordered ``index``/``columns``? E.g. compare ``Series(index=[1,2]) + Series(index=[2,1])`` (works) with ``Series(index=[1,2]) == Series(index=[2,1])`` (``ValueError``): the latter could in principle get an indexer, find out the index actually contains the same elements, and hence compare values (clearly at a cost, which however could be easily avoided in those cases in which the index is indeed the same - that is, the change wouldn't hinder performance for current correct use)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346902360",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346902360",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346902360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkwMjM2MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T22:27:01Z",
    "updated_at": "2017-11-24T22:27:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "see long discussion here: https://github.com/pandas-dev/pandas/issues/1134"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346906535",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346906535",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346906535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkwNjUzNQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T23:37:47Z",
    "updated_at": "2017-11-24T23:37:47Z",
    "author_association": "MEMBER",
    "body": "> see long discussion here: #1134\r\n\r\nInteresting, but my understanding is that it does not consider the specific issue of having the same labels but in a different order. I understand the reason not to support comparison between different indexes is to avoid ``NaN``s (or dropping elements/rows). What I suggest instead is just to check if labels are equal after sorting."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346908354",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346908354",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346908354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkwODM1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T00:13:58Z",
    "updated_at": "2017-11-25T00:13:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "how could different orderings be considered equal? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346909067",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346909067",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346909067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkwOTA2Nw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T00:29:07Z",
    "updated_at": "2017-11-25T00:29:07Z",
    "author_association": "MEMBER",
    "body": "> how could different orderings be considered equal?\r\n\r\n\r\nMy idea would be something like\r\n```\r\nif (self.index == oth.index).all():\r\n    # compare self and oth, return result\r\nif len(self.index.intersection(oth.index)) == len(self.index):\r\n    # compare self and oth.loc[self.index], return result\r\nraise ValueError\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346909981",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346909981",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346909981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkwOTk4MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T00:50:55Z",
    "updated_at": "2017-11-25T00:50:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "i am asking why you think this is a good idea to ignore ordering in an ordered array"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346927374",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346927374",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346927374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkyNzM3NA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T08:45:00Z",
    "updated_at": "2017-11-25T08:45:00Z",
    "author_association": "MEMBER",
    "body": "Just because aligning is what pandas always does (with arithmetic and logic operations), and hence what users expect.\r\n\r\nOr in other words: if our ``bool``s had ``NaN``s, I'm pretty sure that equality would have behaved like other operations since the beginning (allowing comparison of any two objects, aligning, keeping the left index, filling with ``NaN``s). Now, I understand the desire to not have ``==`` return an ``object`` dtype. So what I suggest is just to fix those cases in which we can mimic the standard behavior by still keeping ``bool`` dtype: that is, those cases in which set of labels on the left is (a subset of) the set of labels on the right. So:\r\n- what currently works would work the same\r\n- the cases I'm talking about would be supported at a computational cost which is already borne inside any standard operation (e.g. ``s1 + s2``)\r\n- the cases which would still be unsupported would bear this cost too, but they raise an error anyway..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346927930",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346927930",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346927930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkyNzkzMA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T08:56:14Z",
    "updated_at": "2017-11-25T08:56:14Z",
    "author_association": "MEMBER",
    "body": "> Interesting, but my understanding is that it does not consider the specific issue of having the same labels but in a different order. I understand the reason not to support comparison between different indexes is to avoid NaNs (or dropping elements/rows). What I suggest instead is just to check if labels are equal after sorting.\r\n\r\nI don't think this is a good idea. Most pandas operations already either (1) align arguments or (2) require identical labels. This would add a third type: (3) require same labels, in any order."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346928340",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346928340",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346928340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkyODM0MA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T09:05:02Z",
    "updated_at": "2017-11-25T09:05:16Z",
    "author_association": "MEMBER",
    "body": "> I don't think this is a good idea. Most pandas operations already either (1) align arguments or (2) require identical labels. This would add a third type: (3) require same labels, in any order.\r\n\r\nWhat kind of operations would be left in category ``(2)``?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346928595",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346928595",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346928595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkyODU5NQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T09:09:34Z",
    "updated_at": "2017-11-25T09:09:34Z",
    "author_association": "MEMBER",
    "body": "`.identical()` and `.equals()` check identical labels, in order. I guess that's not quite an operation that requires identical labels, but it's a convenient way to check them."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/346929404",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-346929404",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 346929404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkyOTQwNA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-25T09:27:20Z",
    "updated_at": "2017-11-25T09:28:12Z",
    "author_association": "MEMBER",
    "body": "> .identical() and .equals() check identical labels, in order.\r\n\r\nSure... but these are at the object level. In the same way, ``+`` (element-wise) aligns, but ``pd.concat`` (object-wise) doesn't (I mean: on the non-concatenated axis). The thing is: ``==`` is element-wise, and I have in mind the general rule: \"all element-wise operations always realign objects with any labels\", which following my proposal would keep the only exception \"arguments to comparison operators/functions must include in their indexes all labels of ``self``\".\r\n\r\nBy the way, I'm not at all against having equality in your category ``(1)`` (dropping the exception I just described), and inserting ``NaN``s... I didn't propose it just because the change would be bigger and casting bools to objects is sad (unless we use ``bool`` categoricals, not sure if @jreback 's idea was purely theoretical), but I would prefer it to the current state (and again, it would not have any impact on currently correct uses)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357853770",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-357853770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 357853770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzg1Mzc3MA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T04:55:47Z",
    "updated_at": "2018-01-16T04:55:47Z",
    "author_association": "MEMBER",
    "body": "Reminder: when this is fixed, remove [workaround in test](https://github.com/pandas-dev/pandas/commit/72086101327c584d2b6f515ffacbaa062e6279bc#diff-79e0785420ae1c686623848c4d561486R606)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357914332",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-357914332",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 357914332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzkxNDMzMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T10:14:36Z",
    "updated_at": "2018-01-16T10:14:36Z",
    "author_association": "MEMBER",
    "body": "> By the way, I'm not at all against having equality in your category (1) (dropping the exception I just described), and inserting NaNs... I didn't propose it just because the change would be bigger and casting bools to objects is sad\r\n\r\nI am not sure this was the reason. Because if comparison operations would align, you would 1) align introducing NaNs in the values and 2) compare and where there are NaNs you just get `False` (just as you would now get with already aligned objects that contains NaNs). \r\nSo even if comparisons do alignment you can still get a normal functioning boolean result.\r\n\r\nI think one of the reasons to *not* let the comparisons align was 1) make series behaviour consistent with dataframe (but of course, we could also have changed the dataframe behaviour to align as well) and 2) people liked the error as a sanity check (as often, when doing a comparison you want to use it for boolean indexing, and then if you get alignment, that might give unexpected results). One example use case that Wes gave: `s1[1:] == s2[:1]`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/357919379",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18455#issuecomment-357919379",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18455",
    "id": 357919379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzkxOTM3OQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T10:34:04Z",
    "updated_at": "2018-01-16T10:34:04Z",
    "author_association": "MEMBER",
    "body": "> So even if comparisons do alignment you can still get a normal functioning boolean result.\r\n\r\nGood point: comparison of NaNs is well defined.\r\n\r\n> make series behaviour consistent with dataframe (but of course, we could also have changed the dataframe behaviour to align as well)\r\n\r\nExactly\r\n\r\n> people liked the error as a sanity check\r\n\r\nTrue. My idea of introducing NaNs would have provided this sanity check... but it's just too inconsistent. And while I would rather _not_ have this sanity check, changing it now would be too disruptive.\r\n\r\nI still think we could just allow for different _order_ of indexes, in unique indexes with _same_ elements, not to matter."
  }
]
