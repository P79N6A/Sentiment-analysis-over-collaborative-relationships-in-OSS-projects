[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12909446",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2758#issuecomment-12909446",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2758",
    "id": 12909446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTA5NDQ2",
    "user": {
      "login": "nehalecky",
      "id": 1455590,
      "node_id": "MDQ6VXNlcjE0NTU1OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1455590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nehalecky",
      "html_url": "https://github.com/nehalecky",
      "followers_url": "https://api.github.com/users/nehalecky/followers",
      "following_url": "https://api.github.com/users/nehalecky/following{/other_user}",
      "gists_url": "https://api.github.com/users/nehalecky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nehalecky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nehalecky/subscriptions",
      "organizations_url": "https://api.github.com/users/nehalecky/orgs",
      "repos_url": "https://api.github.com/users/nehalecky/repos",
      "events_url": "https://api.github.com/users/nehalecky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nehalecky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-30T20:04:59Z",
    "updated_at": "2013-01-30T21:34:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @spencerlyon2 , nice work! I am looking forward to this pull request being accepted. \n\nIn the meantime, I am also working on a few incremental advances to functionality with the Yahoo! Finance API (I haven't yet submitted a PR). I wanted to see if anyone else was working in this area, came across your PR, and had a few questions, if you don't mind. :)\n1. In your updates to `pandas.io.data.Options`, line 531, you call `get_quote_yahoo` as:\n\n``` python\nprice = float(get_quote_yahoo([self.symbol])['last'])\n```\n\nAny plans to change the returned parameter from this function soon? I ask because, along with expanding type checking capabilities to input parameter, `symbols`, I'd like to include some additional data in the returned DataFrame. \n1. Are you working on expanding any test coverage of the yahoo finance api methods (found in file `/io/test/test_yahoo.py`)? If so, I'd be interested to know because I also had a few ideas. \n\nThanks!\n\n**Edit:** Reworded question for clarity.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12918473",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2758#issuecomment-12918473",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2758",
    "id": 12918473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTE4NDcz",
    "user": {
      "login": "sglyon",
      "id": 1001948,
      "node_id": "MDQ6VXNlcjEwMDE5NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1001948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sglyon",
      "html_url": "https://github.com/sglyon",
      "followers_url": "https://api.github.com/users/sglyon/followers",
      "following_url": "https://api.github.com/users/sglyon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sglyon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sglyon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sglyon/subscriptions",
      "organizations_url": "https://api.github.com/users/sglyon/orgs",
      "repos_url": "https://api.github.com/users/sglyon/repos",
      "events_url": "https://api.github.com/users/sglyon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sglyon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-30T23:20:24Z",
    "updated_at": "2013-01-30T23:20:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I actually have been thinking about creating a Yahoo class that would be able to get any information easily downloadable from yahoo using one of the `char + int` codes attached to the url:\n\n```\nurl = 'http://finance.yahoo.com/d/quotes.csv?s=%s&f=%s' % (self.symbol, code)\n```\n\nI was thinking of having the docstrings inform the user of what items they could request and then we could use a dictionary to pull the codes out and return the data they asked for.\n\nIn response to your comments:\n\n1.) I am not sure I understand your question about line 531, but I just call `get_quote_yahoo` in that way because that is how the current API works.\n\n2.) I would be happy to include some test coverage in test_yahoo. I haven't written nosetest modules before so if you have or would like to learn how feel free to do it. If not, let me know and I will dig around until I figure it out.\n\nWhat are you working on as far as the yahoo finance API is concerned?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12964474",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2758#issuecomment-12964474",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2758",
    "id": 12964474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTY0NDc0",
    "user": {
      "login": "nehalecky",
      "id": 1455590,
      "node_id": "MDQ6VXNlcjE0NTU1OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1455590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nehalecky",
      "html_url": "https://github.com/nehalecky",
      "followers_url": "https://api.github.com/users/nehalecky/followers",
      "following_url": "https://api.github.com/users/nehalecky/following{/other_user}",
      "gists_url": "https://api.github.com/users/nehalecky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nehalecky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nehalecky/subscriptions",
      "organizations_url": "https://api.github.com/users/nehalecky/orgs",
      "repos_url": "https://api.github.com/users/nehalecky/repos",
      "events_url": "https://api.github.com/users/nehalecky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nehalecky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-31T20:40:11Z",
    "updated_at": "2013-01-31T21:41:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @spencerlyon2, thanks for the reply. I am working on a few features and throwing in some convenience functions, namely to easily retrieve stock index components and allow for easier retrieval and creation of df with multiple stocks. Also, I'll back it all up with a few tests. I'll hope to getting around to pushing to my fork later today and later a PR, so you can see what I am doing.\n\nWhile implementing these features, I also found that there was a whole lot more that can be improved on. Namely, the namespace of the `pandas.io.data` is getting a little too crowded. I feel it's just a matter of time before an elbow is thrown and someone gets hurt... :)  Just like you, I think we could provide more structure via a Yahoo class that could house all functionality with the yahoo finance API. I am not working with options now, but like what you're doing and already see we have a few features we could streamline together. I asked about if you're planning to change your call to `get_quote_yahoo`, because I wished to expand on it a bit. Apologies for the confusion. Also, I like your idea of docstrings tied to dicts— improving the docstring for understanding options is something I am all about.\n\n**Conclusion:** we should team up and make this happen! \n\nIf you like, let's just do one more iteration of hashing out our ideas, and after I'll submit a feature request, which we can work on. I think this feedback—from repo maintainers and the pandas community at large in giving a little insight as to how they envision development around this area advancing—would be beneficial before we get _too_ crazy in development. For instance, I know that there isn't too much love for `DataReader` (see https://github.com/pydata/pandas/pull/2246#issuecomment-10372137), and I understand that. I also like maintaining `get_data_yahoo`, which is now referenced in @wesm's [Python for Data Analysis](http://www.amazon.com/Python-Data-Analysis-Wes-McKinney/dp/1449319793), and this could easily be done via a simple reference to the Yahoo class method which performs the same.\n\nLet me know what you think!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12983039",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2758#issuecomment-12983039",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2758",
    "id": 12983039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTgzMDM5",
    "user": {
      "login": "sglyon",
      "id": 1001948,
      "node_id": "MDQ6VXNlcjEwMDE5NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1001948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sglyon",
      "html_url": "https://github.com/sglyon",
      "followers_url": "https://api.github.com/users/sglyon/followers",
      "following_url": "https://api.github.com/users/sglyon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sglyon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sglyon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sglyon/subscriptions",
      "organizations_url": "https://api.github.com/users/sglyon/orgs",
      "repos_url": "https://api.github.com/users/sglyon/repos",
      "events_url": "https://api.github.com/users/sglyon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sglyon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T06:59:49Z",
    "updated_at": "2013-02-01T07:00:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nehalecky It would be great to see what you have done.\n\nI'm happy to work with you on enhancing this. I think the first step would be for me to see what you are doing. Then I think we can have a better idea for the design of the Yahoo class.\n\nI will try to consolidate my ideas in a concise list here:\n- create Yahoo class that can retrieve the following data\n  - options data (just move code from the current `Options` into the class, or point the Yahoo class to `Options`)\n  - Any of the items from this [table](http://code.google.com/p/yahoo-finance-managed/wiki/enumQuoteProperty) (this is where I was planning on having the dictionary where users could enter strings, or partial strings, for what they want and we could lookup the code and retrieve the data)\n  - Historical equity data for any number of tickers. Have this return a hierarchically  indexed df with ticker and date as the index levels.\n  - Potentially scrape the html from the Key Statistics page for a given stock to provide some things that aren't accessible with any of the codes from the [link](http://code.google.com/p/yahoo-finance-managed/wiki/enumQuoteProperty) above. For example, I needed dividend per share the other day and I couldn't find it with any of the codes (tried them all), so build some functions to parse the html for that data. This could easily be extended to anything else on that page.\n- Better organization of returned df objects, especially when called with multiple tickers. My question here is, do we instantiate the Yahoo object as a singleton-esque object that has useful methods for retrieving/organizing all this data for any ticker supplied by the user upon calling the method, or do we have each instance of the class retain a specific list of tickers that the data collection/organizing methods act upon in a batch-like fashion? As I typed the ideas out the second one sounded better to me, but we could take either approach. It sounds like you have been working on something like this already so I'd be interested in hearing what you have to say about it.\n\nAnyway, those are some of my ideas. What would you add/take away from this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/13070924",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2758#issuecomment-13070924",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2758",
    "id": 13070924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDcwOTI0",
    "user": {
      "login": "nehalecky",
      "id": 1455590,
      "node_id": "MDQ6VXNlcjE0NTU1OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1455590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nehalecky",
      "html_url": "https://github.com/nehalecky",
      "followers_url": "https://api.github.com/users/nehalecky/followers",
      "following_url": "https://api.github.com/users/nehalecky/following{/other_user}",
      "gists_url": "https://api.github.com/users/nehalecky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nehalecky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nehalecky/subscriptions",
      "organizations_url": "https://api.github.com/users/nehalecky/orgs",
      "repos_url": "https://api.github.com/users/nehalecky/repos",
      "events_url": "https://api.github.com/users/nehalecky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nehalecky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-04T10:57:26Z",
    "updated_at": "2013-02-04T10:57:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @spencerlyon2!\n\nSorry for the delay in the reply, busy weekend. I finally was able to get my code pushed and already submitted a PR here: https://github.com/pydata/pandas/pull/2795.\n\nPretty basic, most of the changes, but I think it's a start and we can use it later in the Yahoo class. I do really like your ideas regarding this class, and you can see that some of that functionality of multiple tickers I was already working towards. Right now it returns a panel, but we can change that to whatever we feel best.\n\nAlso, looking over a lot of the nice work being done with database connectivity in `sql.py`, (see disscussion https://github.com/pydata/pandas/pull/2482), and really liked how they're tackling many different db flavors. I was thinking it could be useful to consider for our class the possibility of future integration with different data streams beyond Yahoo (e.g.Bloomberg, TR)—a more general approach.\n\nI don't work with either data service directly, but suspect the types of queries for financial applications are similar across the board, just as is the case with databases. This might allow someone then to simply instantiate the finance data class with whatever data _flavor_ and behind the scenes, all is configured for interaction with the data flavor service. This could be quite a bit of work, and perhaps not even useful. I'll hope that others will comment on this.\n\nLet me know what you think of this and when you get a moment, take at look at the code! Any suggestions are appreciated!\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/13361314",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2758#issuecomment-13361314",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2758",
    "id": 13361314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzYxMzE0",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-10T21:17:32Z",
    "updated_at": "2013-02-10T21:17:32Z",
    "author_association": "MEMBER",
    "body": "Merged. If you could make a PR to the release notes and/or documentation (including the \"what's new\" page) that would be great. thanks\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/13524771",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2758#issuecomment-13524771",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2758",
    "id": 13524771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTI0Nzcx",
    "user": {
      "login": "sglyon",
      "id": 1001948,
      "node_id": "MDQ6VXNlcjEwMDE5NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1001948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sglyon",
      "html_url": "https://github.com/sglyon",
      "followers_url": "https://api.github.com/users/sglyon/followers",
      "following_url": "https://api.github.com/users/sglyon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sglyon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sglyon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sglyon/subscriptions",
      "organizations_url": "https://api.github.com/users/sglyon/orgs",
      "repos_url": "https://api.github.com/users/sglyon/repos",
      "events_url": "https://api.github.com/users/sglyon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sglyon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-13T23:28:13Z",
    "updated_at": "2013-02-13T23:28:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have written a quick summary in the \"what's new\" document. I'll attach to a pull request today.\n\nThe source is documented well enough that we could create class documentation directly from data.py. I know this is possible, but haven't done it before. I could spend some time looking it up, or if someone else already knows how to do this, and is up for it, I'd appreciate them doing it. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/13525308",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2758#issuecomment-13525308",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2758",
    "id": 13525308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTI1MzA4",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-13T23:42:33Z",
    "updated_at": "2013-02-13T23:42:33Z",
    "author_association": "NONE",
    "body": "pretty sure `automethod` type docs are generated automatically for the entire package, \nlook under `doc/source/generated` after running doc/make.py. \nBut that's available in a different part of the documentation, intended more as a reference.\n\nThe rest of the docs have a tutorial style, with embedded usage examples, and is \nmeant to be friendler.\n\nSphinx Is very copy-paste friendly, you can copy and adapt an existing\npiece of documentation.\n\nFeel free to yell if you hit a snag.\n"
  }
]
