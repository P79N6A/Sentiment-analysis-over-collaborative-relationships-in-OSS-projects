[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433610130",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-433610130",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 433610130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzYxMDEzMA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-27T10:46:20Z",
    "updated_at": "2018-10-27T10:46:20Z",
    "author_association": "MEMBER",
    "body": "@headdab : Thanks for the report!  Just to double check, is round-trip being respected when you do the read / write to / from HDF5?  Perhaps something in the internals is causing the representation to be less efficient or compact."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433856745",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-433856745",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 433856745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzg1Njc0NQ==",
    "user": {
      "login": "headdab",
      "id": 1169194,
      "node_id": "MDQ6VXNlcjExNjkxOTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1169194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/headdab",
      "html_url": "https://github.com/headdab",
      "followers_url": "https://api.github.com/users/headdab/followers",
      "following_url": "https://api.github.com/users/headdab/following{/other_user}",
      "gists_url": "https://api.github.com/users/headdab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/headdab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/headdab/subscriptions",
      "organizations_url": "https://api.github.com/users/headdab/orgs",
      "repos_url": "https://api.github.com/users/headdab/repos",
      "events_url": "https://api.github.com/users/headdab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/headdab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-29T10:16:32Z",
    "updated_at": "2018-10-29T10:16:32Z",
    "author_association": "NONE",
    "body": "I'm not sure what you mean by round-trip?\r\nDo you mean is the data correct?\r\n\r\nThe output shows that the number of size of the underlying data elements in the same ...\r\n "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433903873",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-433903873",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 433903873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzkwMzg3Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-29T13:11:00Z",
    "updated_at": "2018-10-29T13:11:19Z",
    "author_association": "MEMBER",
    "body": "Yes, i.e.:\r\n\r\n~~~python\r\nsdf1 = df.sample(1000)  # original DataFrame\r\n...\r\nsdf2 = pd.read_hdf('test.h5', 'sdf')  # read-in DataFrame\r\n\r\n# Now test equivalence.\r\nimport pandas.util.testing as tm\r\ntm.assert_frame_equal(sdf1, sdf2)\r\n~~~\r\n\r\nI also wonder if it has to deal with the fact that you're using `int16` (our support for that data type is deliberately pretty thin).  What happens if you use `int32` or `int64` instead?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434020829",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-434020829",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 434020829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDAyMDgyOQ==",
    "user": {
      "login": "headdab",
      "id": 1169194,
      "node_id": "MDQ6VXNlcjExNjkxOTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1169194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/headdab",
      "html_url": "https://github.com/headdab",
      "followers_url": "https://api.github.com/users/headdab/followers",
      "following_url": "https://api.github.com/users/headdab/following{/other_user}",
      "gists_url": "https://api.github.com/users/headdab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/headdab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/headdab/subscriptions",
      "organizations_url": "https://api.github.com/users/headdab/orgs",
      "repos_url": "https://api.github.com/users/headdab/repos",
      "events_url": "https://api.github.com/users/headdab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/headdab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-29T18:13:49Z",
    "updated_at": "2018-10-29T18:13:49Z",
    "author_association": "NONE",
    "body": "It appears that this has nothing to do with the data type.  Consider the slightly simplified version of the code above, with a round-trip check.\r\n\r\n```\r\n#!/usr/bin/env python\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nindex = pd.MultiIndex.from_product([list(range(10000)), list(range(10))])\r\ndf = pd.DataFrame(np.random.rand(100000, 10), index=index, columns=list(range(10)))\r\n\r\nsdf1 = df.sample(1000).astype(np.int8)\r\nwith pd.HDFStore('test.h5') as h5:\r\n    h5['sdf'] = sdf1\r\nsdf2 = pd.read_hdf('test.h5', 'sdf')\r\n\r\nsdf1.info()\r\nsdf2.info()\r\n\r\nimport pandas.util.testing as tm\r\ntm.assert_frame_equal(sdf1, sdf2)\r\n```\r\nwhere I tried many different data types instead of int16 for sdf1.  I got the following results:\r\n\r\n```\r\ntype    before after data\r\n--------------------------------\r\nint8    90.9   411.2 10\r\nint16   100.7  421.0 20\r\nint32   120.2  440.5 40\r\nint64   159.3  479.6 80\r\nfloat64 159.3  479.6 80\r\n```\r\n- `before` is the size of sdf1\r\n- `after` is the size of sdf2\r\n- `data` is the storage required for the data itself\r\n\r\nIf you subtract `data` from `before` and `after`, you get a fixed value of about 80k for before and 400k for after, so the expansion is not in the data itself, its likely in the data structures used internally for hdf5 data.  I think this is important.  There appears to be lots of support for sparse vectors, to minimize the memory footprint, but then much of this appears to be squandered away.\r\n\r\nWriting the same data to a csv and reading it back only  consumes 93.8kB (it infers int64 so it doesn't matter what format its stored as."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434030409",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-434030409",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 434030409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDAzMDQwOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-29T18:38:18Z",
    "updated_at": "2018-10-29T18:39:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is correct. before you are saving it, the indexing tables are NOT created. When you read it back, they are on the read-back (mainly because a reindex is done internally). This is basically lazy creating of the indexes.\r\n\r\nso here's your example\r\n```\r\n(pandas) bash-3.2$ ipython\r\nPython 3.6.3 |Anaconda, Inc.| (default, Dec  5 2017, 17:30:25) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import numpy as np\r\n   ...: import pandas as pd\r\n   ...: \r\n   ...: index = pd.MultiIndex.from_product([list(range(10000)), list(range(10))])\r\n   ...: df = pd.DataFrame(np.random.rand(100000, 10), index=index, columns=list(range(10)))\r\n   ...: df = (df * 3840).astype(np.int16)\r\n   ...: df.info()\r\n   ...: \r\n   ...: sdf = df.sample(1000)\r\n   ...: sdf.info()\r\n   ...: \r\n   ...: with pd.HDFStore('test.h5') as h5:\r\n   ...:     h5['sdf'] = sdf\r\n   ...: \r\n   ...: sdf2 = pd.read_hdf('test.h5', 'sdf')\r\n   ...: sdf2.info()\r\n   ...: \r\n<class 'pandas.core.frame.DataFrame'>\r\nMultiIndex: 100000 entries, (0, 0) to (9999, 9)\r\nData columns (total 10 columns):\r\n0    100000 non-null int16\r\n1    100000 non-null int16\r\n2    100000 non-null int16\r\n3    100000 non-null int16\r\n4    100000 non-null int16\r\n5    100000 non-null int16\r\n6    100000 non-null int16\r\n7    100000 non-null int16\r\n8    100000 non-null int16\r\n9    100000 non-null int16\r\ndtypes: int16(10)\r\nmemory usage: 2.6 MB<class 'pandas.core.frame.DataFrame'>\r\nMultiIndex: 1000 entries, (2671, 4) to (3612, 5)\r\nData columns (total 10 columns):\r\n0    1000 non-null int16\r\n1    1000 non-null int16\r\n2    1000 non-null int16\r\n3    1000 non-null int16\r\n4    1000 non-null int16\r\n5    1000 non-null int16\r\n6    1000 non-null int16\r\n7    1000 non-null int16\r\n8    1000 non-null int16\r\n9    1000 non-null int16\r\ndtypes: int16(10)\r\nmemory usage: 100.7 KB\r\n<class 'pandas.core.frame.DataFrame'>\r\nMultiIndex: 1000 entries, (2671, 4) to (3612, 5)\r\nData columns (total 10 columns):\r\n0    1000 non-null int16\r\n1    1000 non-null int16\r\n2    1000 non-null int16\r\n3    1000 non-null int16\r\n4    1000 non-null int16\r\n5    1000 non-null int16\r\n6    1000 non-null int16\r\n7    1000 non-null int16\r\n8    1000 non-null int16\r\n9    1000 non-null int16\r\ndtypes: int16(10)\r\nmemory usage: 421.0 KB\r\n```\r\n\r\nbefore writing to disk\r\n```\r\nIn [2]: sdf.info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nMultiIndex: 1000 entries, (2671, 4) to (3612, 5)\r\nData columns (total 10 columns):\r\n0    1000 non-null int16\r\n1    1000 non-null int16\r\n2    1000 non-null int16\r\n3    1000 non-null int16\r\n4    1000 non-null int16\r\n5    1000 non-null int16\r\n6    1000 non-null int16\r\n7    1000 non-null int16\r\n8    1000 non-null int16\r\n9    1000 non-null int16\r\ndtypes: int16(10)\r\nmemory usage: 100.7 KB\r\n\r\nIn [3]: sdf2.info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nMultiIndex: 1000 entries, (2671, 4) to (3612, 5)\r\nData columns (total 10 columns):\r\n0    1000 non-null int16\r\n1    1000 non-null int16\r\n2    1000 non-null int16\r\n3    1000 non-null int16\r\n4    1000 non-null int16\r\n5    1000 non-null int16\r\n6    1000 non-null int16\r\n7    1000 non-null int16\r\n8    1000 non-null int16\r\n9    1000 non-null int16\r\ndtypes: int16(10)\r\nmemory usage: 421.0 KB\r\n```\r\n\r\n```\r\nIn [4]: sdf[0]\r\n```\r\ndo *any* indexing, this creates the c-structures underlying MI\r\n\r\nafter read\r\n```\r\nIn [5]: sdf.info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nMultiIndex: 1000 entries, (2671, 4) to (3612, 5)\r\nData columns (total 10 columns):\r\n0    1000 non-null int16\r\n1    1000 non-null int16\r\n2    1000 non-null int16\r\n3    1000 non-null int16\r\n4    1000 non-null int16\r\n5    1000 non-null int16\r\n6    1000 non-null int16\r\n7    1000 non-null int16\r\n8    1000 non-null int16\r\n9    1000 non-null int16\r\ndtypes: int16(10)\r\nmemory usage: 420.7 KB\r\n\r\nIn [6]: sdf2.info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nMultiIndex: 1000 entries, (2671, 4) to (3612, 5)\r\nData columns (total 10 columns):\r\n0    1000 non-null int16\r\n1    1000 non-null int16\r\n2    1000 non-null int16\r\n3    1000 non-null int16\r\n4    1000 non-null int16\r\n5    1000 non-null int16\r\n6    1000 non-null int16\r\n7    1000 non-null int16\r\n8    1000 non-null int16\r\n9    1000 non-null int16\r\ndtypes: int16(10)\r\nmemory usage: 421.0 KB\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434387686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-434387686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 434387686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDM4NzY4Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-30T17:06:47Z",
    "updated_at": "2018-10-30T17:06:47Z",
    "author_association": "MEMBER",
    "body": "@jreback : Ah, interesting...to what extent is this behavior documented?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434414925",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-434414925",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 434414925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDQxNDkyNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-30T18:21:12Z",
    "updated_at": "2018-10-30T18:21:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "i am not sure what needs to be documented here; this is actually an implementation detaik"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/434423899",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-434423899",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 434423899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDQyMzg5OQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-30T18:47:00Z",
    "updated_at": "2018-10-30T18:47:00Z",
    "author_association": "MEMBER",
    "body": "Ah, okay, fair enough.  Just checking."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435097480",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23369#issuecomment-435097480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23369",
    "id": 435097480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTA5NzQ4MA==",
    "user": {
      "login": "headdab",
      "id": 1169194,
      "node_id": "MDQ6VXNlcjExNjkxOTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1169194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/headdab",
      "html_url": "https://github.com/headdab",
      "followers_url": "https://api.github.com/users/headdab/followers",
      "following_url": "https://api.github.com/users/headdab/following{/other_user}",
      "gists_url": "https://api.github.com/users/headdab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/headdab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/headdab/subscriptions",
      "organizations_url": "https://api.github.com/users/headdab/orgs",
      "repos_url": "https://api.github.com/users/headdab/repos",
      "events_url": "https://api.github.com/users/headdab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/headdab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T16:23:51Z",
    "updated_at": "2018-11-01T16:23:51Z",
    "author_association": "NONE",
    "body": "I would love to know how the indexing works.   Pandas appears to introduce a lot of overhead for sparsity.  It looks like the size of the index increases as M * N, where M and N are the range of a pair of row indices,  for a 2-D multi-index, that is, it looks like it generates a fully populated multi-index.  "
  }
]
