[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442262220",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23959#issuecomment-442262220",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23959",
    "id": 442262220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI2MjIyMA==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T23:46:25Z",
    "updated_at": "2018-11-27T23:46:25Z",
    "author_association": "MEMBER",
    "body": "This slipped through the cracks when I did some UTC refactoring. We don't rely on `\"UTC\"` as a string internally anymore but this may as well work since `\"US/Eastern\"`. I think this is not getting cast by pytz. I'll put up a PR tonight."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442321789",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23959#issuecomment-442321789",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23959",
    "id": 442321789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjMyMTc4OQ==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T05:09:14Z",
    "updated_at": "2018-11-28T05:09:14Z",
    "author_association": "MEMBER",
    "body": "QQ: Would we expect `tz_compare(\"UTC\", dateutil.tz.UTC)` to return `True`? How about `tz_compare(pytz.timezone(\"UTC\"), dateutil.tz.UTC)`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442871962",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23959#issuecomment-442871962",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23959",
    "id": 442871962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjg3MTk2Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T15:20:21Z",
    "updated_at": "2018-11-29T15:20:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure, but it probably depends on exactly how we're using `tz_compare`. I was thinking of it as \"are these two timezones the same?\" which is a fuzzy concept, but in this case I would say that they're the same.\r\n\r\nThe docs say we compare \"string representations\", and they're clearly different\r\n\r\n```python\r\nIn [10]: str(dateutil.tz.UTC)\r\nOut[10]: 'tzutc()'\r\n\r\nIn [11]: str(pytz.timezone(\"UTC\"))\r\nOut[11]: 'UTC'\r\n```\r\n\r\ncc @pganssle if you have thoughts."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443776403",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23959#issuecomment-443776403",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23959",
    "id": 443776403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzc3NjQwMw==",
    "user": {
      "login": "pganssle",
      "id": 1377457,
      "node_id": "MDQ6VXNlcjEzNzc0NTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pganssle",
      "html_url": "https://github.com/pganssle",
      "followers_url": "https://api.github.com/users/pganssle/followers",
      "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
      "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
      "organizations_url": "https://api.github.com/users/pganssle/orgs",
      "repos_url": "https://api.github.com/users/pganssle/repos",
      "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pganssle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T16:37:19Z",
    "updated_at": "2018-12-03T16:37:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, I have somewhat let this fall by the wayside.\r\n\r\nUnfortunately, I don't know of any reasonably generic way to compare time zones, and the semantics of timezone aware datetime comparison [unfortunately use `is` rather than `__eq__`](https://blog.ganssle.io/articles/2018/02/a-curious-case-datetimes.html).\r\n\r\nThe reason for `tz_compare` is because `pandas` is working around `pytz`'s workaround for a lack of PEP 495. [`pytz` works by assigning fixed offsets when the tzinfo is attached](https://blog.ganssle.io/articles/2018/03/pytz-fastest-footgun.html), which means that you have this:\r\n\r\n```python\r\nNYC = pytz.timezone('America/New_York')\r\ndt1 = NYC.localize(datetime(2018, 1, 1))\r\ndt2 = NYC.localize(datetime(2018, 6, 1))\r\nprint(dt1.tzinfo is dt2.tzinfo)\r\n# False\r\n```\r\n\r\nI am not aware of whether `pytz` defines `__eq__` for its time zones, but I think there is some reason you cannot just check direct equality of `pytz` time zones. In any case, the reason why `tz_compare` exists is that `str(dt.tzinfo)` for a `pytz` zone will always return the IANA key for IANA zones independent of which offset is applied, so this is a proxy for for what you really want, which is \"Does this offset represent the same time zone\".\r\n\r\nIn any case, you may be able to special-case some logic related to UTC, but unfortunately the semantics are already messed up and you may in fact be creating more weird edge cases and inconsistencies by trying to patch in compatibility between time zone providers, or to try to support string-to-timezone comparisons directly. Hopefully we will be making the `str` representations of `dateutil` time zones nicer at some time in the future, but I wouldn't count on it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443777922",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23959#issuecomment-443777922",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23959",
    "id": 443777922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzc3NzkyMg==",
    "user": {
      "login": "pganssle",
      "id": 1377457,
      "node_id": "MDQ6VXNlcjEzNzc0NTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pganssle",
      "html_url": "https://github.com/pganssle",
      "followers_url": "https://api.github.com/users/pganssle/followers",
      "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
      "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
      "organizations_url": "https://api.github.com/users/pganssle/orgs",
      "repos_url": "https://api.github.com/users/pganssle/repos",
      "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pganssle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T16:41:21Z",
    "updated_at": "2018-12-03T16:41:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "By the way, my solution to this that should unravel most of the complicated stuff you are doing around time zones is to create your own IANA time zone implementation. The two representations you are relying on are not designed for your use case, and as a result you make ample use of private methods, which is a much higher maintenance burden than just creating your own time zone implementation.\r\n\r\nI think you should somewhat reliably be able to create a mapping between input time zones and the IANA zones they map to, so the extent of your support for third party time zones would be to immediately convert them to an internal pandas TZ representation. This would allow you to drop `pytz` as a dependency as well."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443807115",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23959#issuecomment-443807115",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23959",
    "id": 443807115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzgwNzExNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T18:02:12Z",
    "updated_at": "2018-12-03T18:02:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pganssle \r\n\r\n> to the extent of your support for third party time zones would be to immediately convert them to an internal pandas TZ representation. This would allow you to drop pytz as a dependency as well.\r\n\r\nwhat would this look like?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443886222",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23959#issuecomment-443886222",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23959",
    "id": 443886222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzg4NjIyMg==",
    "user": {
      "login": "pganssle",
      "id": 1377457,
      "node_id": "MDQ6VXNlcjEzNzc0NTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pganssle",
      "html_url": "https://github.com/pganssle",
      "followers_url": "https://api.github.com/users/pganssle/followers",
      "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
      "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
      "organizations_url": "https://api.github.com/users/pganssle/orgs",
      "repos_url": "https://api.github.com/users/pganssle/repos",
      "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pganssle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T21:59:02Z",
    "updated_at": "2018-12-03T21:59:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> what would this look like?\r\n\r\nTaking some time to sketch out some sort of prototype is on my list, but unfortunately it's not *high* on my list. I think the high level overview is:\r\n\r\n1. I resolve dateutil/dateutil#701, so that the `dateutil` zoneinfo file can be a separate dependency of `pandas` (I think `pendulum` has a package that's just the tz data, too, but I don't know if it's suitable for general use).\r\n2. `pandas` adds a parser for zoneinfo files (this is not terribly difficult to do, especially in Cython\r\n3. `pandas` adds a class equivalent to `tzinfo` (doesn't necessarily have to be `tzinfo`) that expects to operate on datetime array types, and a function mapping IANA keys to the relevant `PandasTzInfo`\r\n\r\nFor strings, the support is built in already. For `pytz` you can already get the IANA key from any `pytz` zone by calling `str` on it, for `dateutil` it's not possible yet, but that will change soon (PR welcome).\r\n\r\nThere will be time zones that cannot be translated in this way, but I don't see that this is a big deal, because this is \"fast path\" time zone handling code. You can have two levels of support. UTC, fixed offset time zones and IANA zones represented as strings, `pytz` or `dateutil` types get translated automatically into the internal types when applied to a TZ-aware column. Everything else goes down the \"slow path\", which is the equivalent of having an `object` column - time zone handling code just calls the underlying `datetime` object's time zone functions in a for loop.\r\n\r\nIf done right, this doesn't actually require a dependency on `pytz`, because you can either use heuristics to detect `pytz` zones (or other clever methods to avoid unnecessary imports of `pytz`).\r\n\r\nMost of this does not have to be a breaking change, though dropping `pytz` will likely need to be a breaking change. That is not a huge part of it, and depending on how strongly you feel about a notice period, I have a few strategies you can employ that would maintain API compatibility but slowly transition over to `dateutil`."
  }
]
