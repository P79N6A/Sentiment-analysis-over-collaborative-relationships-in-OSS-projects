[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/236769049",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-236769049",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 236769049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjc2OTA0OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-02T01:49:58Z",
    "updated_at": "2016-08-02T01:50:40Z",
    "author_association": "MEMBER",
    "body": "My immediate inclination is that we should only have a \"production\" mode in the hypothetical pandas 2.0, and features suitable only for \"interactive\" mode should be dropped or changed to be unambiguous by only depending on types rather than values. I'd love to see some examples of important \"interactive only\" features, though.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/237222572",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-237222572",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 237222572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzIyMjU3Mg==",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-03T12:24:46Z",
    "updated_at": "2016-08-03T12:24:46Z",
    "author_association": "NONE",
    "body": "You are right, probably the best way to move forward is to figure out what features would be \"production\" and what others would be \"interactive-only\".\n\nIn my opinion the most important features when doing interactive work is indexing, especially with Dates (which was the main point with #13548 ). Being able to use these with the least amount of additional function calls would be great.\n\n> features suitable only for \"interactive\" mode should be dropped or changed to be unambiguous by only depending on types rather than values\n\nWhat do you mean by depending on types? Similar to the way the \"Grouper\" object is used, for instance?\n\n```\ndf.groupby([pd.Grouper(freq='1M',key='Date'),'Buyer']).sum()\n```\n\nAs a side note, having this kind of discussion may actually be beneficial in creating new \"interactive-only\" features that perhaps were not considered in the API by virtue of being unsafe. First thing that comes to mind are single-letter shortcuts, similar to numpy's `r_` and `c_` for replacing frequently used longer functions (maybe like `pd.date_range()`).\n\nAnother example would be features that are implemented in external libraries, for instance:\nhttp://pythonhosted.org/pandas-ply/\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/237423291",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-237423291",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 237423291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzQyMzI5MQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T01:17:36Z",
    "updated_at": "2016-08-04T01:17:36Z",
    "author_association": "MEMBER",
    "body": "> What do you mean by depending on types? \n\nI want methods that produce an output with a predictable type/dtype that depends only on the types/dtypes of the input, i.e., with a sane type signature that we could (and perhaps _should_) specify with [PEP 484](https://www.python.org/dev/peps/pep-0484/).\n\nIndexing is a prime example of violating this principle of good software design. Depending on whether the indexing value matches multiple items in the index or not, the result of indexing a DataFrame is either another DataFrame (multiple rows) or a Series (single row). We might fix this in either of two ways:\n1. Require that all indexes have unique values.\n2. Change indexing methods to always return a DataFrame, even when the result is currently a Series representing a single row.\n\nI'm somewhat partial to (2), as a Series with dtype=object for representing a single row is not very useful. But obviously this would be a major break in backwards compatibility.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239614914",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-239614914",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 239614914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTYxNDkxNA==",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-13T10:46:50Z",
    "updated_at": "2016-08-13T10:46:50Z",
    "author_association": "NONE",
    "body": "Yes, I certainly see the benefits of having a more consistent API. And most definitely having a consistent return type that is predictable would be extremely helpful. Between the two options you give, I'd also prefer (2)..\n\nBut if we get back to this issue; making certain things explicit means writing longer statements. It means one needs to use the specific indexing methods (that ideally don't have the types of surprises that you define). It also means using functions to create objects (using functions like `daterange`) to that are passed on two these more methods. All in all, these are great for having a safe, deterministic environment. But it also makes it that much more painful to write and harder to read.\n\nFor interactive environments, some \"magic\" should be acceptable. For instance, when doing date manipulations, giving a string of \"2015/12:2016/2\" as a single string value could do the correct slicing.\n\nA configuration option can decide whether these magic commands should be allowed or not. Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239619299",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-239619299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 239619299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTYxOTI5OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-13T12:50:14Z",
    "updated_at": "2016-08-13T12:50:14Z",
    "author_association": "MEMBER",
    "body": "I agree with @shoyer that there should only be one mode. Every feature in pandas _should_ have well defined behaviour IMO (note the 'should', it should be our aim, but there are certainly areas for improvement).\n\nBut that does not mean that some features can be convenient. For example datetime indexing with string is very convenient for interactive usage (eg `df['2012-01':'2012-03']`, but still it should have a well defined behaviour.\n\nI would still like to see an example of something specific for an 'interactive mode' that would not have well defined behaviour (so you would want to be able to turn this off).\n\nIf something is painful to write and hard to read, we should try to do something about that, looking for solutions to make it easier while still keeping a sane API. But that can still be done in 'one mode' IMO.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239619345",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-239619345",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 239619345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTYxOTM0NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-13T12:51:31Z",
    "updated_at": "2016-08-13T12:51:31Z",
    "author_association": "MEMBER",
    "body": "Regarding your specific example of\n\n> For instance, when doing date manipulations, giving a string of \"2015/12:2016/2\" as a single string value could do the correct slicing.\n\nI personally don't find it problematic to write it as two strings instead of one (`\"2015/12\":\"2016/2\"`, it's only two characters difference)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239633041",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-239633041",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 239633041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTYzMzA0MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-13T17:48:32Z",
    "updated_at": "2016-08-13T17:48:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "The only example I could think of is assigning a column using `.`\n\n``` python\nIn [1]: df = pd.DataFrame({'a': [1, 2]})\n\nIn [2]: df.b = [3, 4]\n\nIn [3]: df\nOut[3]:\n   a\n0  1\n1  2\n\nIn [4]: df.a = [3, 4]\n\nIn [5]: df\nOut[5]:\n   a\n0  3\n1  4\n```\n\nEven then, I don't know what the \"production\" mode would be. Just disallowing all `__setattr__` doesn't feel all that pythonic.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239639822",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-239639822",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 239639822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTYzOTgyMg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-13T20:24:45Z",
    "updated_at": "2016-08-13T20:24:45Z",
    "author_association": "MEMBER",
    "body": "> Even then, I don't know what the \"production\" mode would be. Just disallowing all `__setattr__` doesn't feel all that pythonic.\n\nI would be happy with this. We made this choice in xarray and I have heard few complaints about it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/239644320",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13862#issuecomment-239644320",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13862",
    "id": 239644320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTY0NDMyMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-13T22:16:40Z",
    "updated_at": "2016-08-13T22:16:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's a useful datapoint. In that case, I'd be tempted to just disallow it altogether. At least then we can raise a helpful error message 😄. \n"
  }
]
