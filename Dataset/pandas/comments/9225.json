[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69495662",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-69495662",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 69495662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDk1NjYy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T14:10:14Z",
    "updated_at": "2015-01-11T14:10:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I concur\n\ncc @behzadnouri look right to you?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69499533",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-69499533",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 69499533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDk5NTMz",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T16:08:14Z",
    "updated_at": "2015-01-11T16:42:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "the whole resulting index (the _combination_ of the first 3 columns) should be unique, not a single level. see test example below. (the probability of non-unique would then be lower)\n\nI would recommend to change the PR to this: ([git diff here](https://gist.github.com/behzadnouri/378fc808d8799ccafaa2))\n\n```\nwhile True:\n    df = DataFrame({'jim':['mid'] * 5 + ['btm'] * 8 + ['top'] * 7,\n                    'joe':['3rd'] * 2 + ['1st'] * 3 + ['2nd'] * 3 +\n                          ['1st'] * 2 + ['3rd'] * 3 + ['1st'] * 2 +\n                          ['3rd'] * 3 + ['2nd'] * 2,\n                    'jolie':np.random.randint(0, 1000, 20),\n                    'joline': np.random.randn(20).round(3) * 10})\n\n    if not df.duplicated(subset=icol).any():\n        break\n\nfor _ in range(2):\n    for idx in permutations(df['jim'].unique()):\n        for i in range(3):\n            verify_first_level(df, 'jim', idx[:i+1])\n\n    i = [2,3,4,0,1,8,9,5,6,7,10,11,12,13,14,18,19,15,16,17]\n    verify(df, 'joe', ['1st', '2nd', '3rd'], i)\n\n    i = [0,1,2,3,4,10,11,12,5,6,7,8,9,15,16,17,18,19,13,14]\n    verify(df, 'joe', ['3rd', '2nd', '1st'], i)\n\n    i = [0,1,5,6,7,10,11,12,18,19,15,16,17]\n    verify(df, 'joe', ['2nd', '3rd'], i)\n\n    i = [0,1,2,3,4,10,11,12,8,9,15,16,17,13,14]\n    verify(df, 'joe', ['3rd', '1st'], i)\n\n    # re-do the tests with deliberate duplicates @ last level\n    df['jolie'] = np.arange(len(df)) % 3\n```\n\nthis way it would be a more general test than forcing a single level to be all unique.\n\n---\n\nexample that the tests pass as long as `df.set_index(['jim', 'joe', 'jolie']).index.is_unique`:\n\n```\nIn [51]: df\nOut[51]: \n    jim  joe  jolie  joline\n0   mid  3rd      0    2.25\n1   mid  3rd      1   -6.73\n2   mid  1st      2  -16.37\n3   mid  1st      0   -7.11\n4   mid  1st      1    5.45\n5   btm  2nd      2  -10.76\n6   btm  2nd      0   -1.02\n7   btm  2nd      1    6.10\n8   btm  1st      2    3.21\n9   btm  1st      0   19.98\n10  btm  3rd      1   16.15\n11  btm  3rd      2    8.90\n12  btm  3rd      0    1.39\n13  top  1st      1   -4.39\n14  top  1st      2   14.37\n15  top  3rd      0  -18.69\n16  top  3rd      1  -22.98\n17  top  3rd      2    2.39\n18  top  2nd      0   -5.13\n19  top  2nd      1  -12.82\n\nIn [52]: for idx in permutations(df['jim'].unique()):\n   ....:         for i in range(3):\n   ....:                 verify_first_level(df, 'jim', idx[:i+1])\n   ....:                                                                 \n\nIn [53]: i = [2,3,4,0,1,8,9,5,6,7,10,11,12,13,14,18,19,15,16,17]\n\nIn [54]: verify(df, 'joe', ['1st', '2nd', '3rd'], i)\n\nIn [55]: i = [0,1,2,3,4,10,11,12,5,6,7,8,9,15,16,17,18,19,13,14]\n\nIn [56]: verify(df, 'joe', ['3rd', '2nd', '1st'], i)\n\nIn [57]: i = [0,1,5,6,7,10,11,12,18,19,15,16,17]\n\nIn [58]: verify(df, 'joe', ['2nd', '3rd'], i)\n\nIn [59]: i = [0,1,2,3,4,10,11,12,8,9,15,16,17,13,14]\n\nIn [60]: verify(df, 'joe', ['3rd', '1st'], i)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69507852",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-69507852",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 69507852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTA3ODUy",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T19:40:05Z",
    "updated_at": "2015-01-11T19:40:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri I'd prefer to more explicitly fix this rather than just add a `while True:` block. Also, it appears that the deliberate duplicates case is already handled in the previous batch of checks in this test https://github.com/pydata/pandas/pull/9225/files#diff-e4d49868a05be9ee2167607d80eb699dL1918\n\nMy new version of the patch enforces the uniqueness constraint by just doing multiple `np.random.choice` samples of the appropriate size.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69523325",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-69523325",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 69523325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTIzMzI1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T02:04:54Z",
    "updated_at": "2015-01-12T02:04:54Z",
    "author_association": "MEMBER",
    "body": "I agree with @qwhelan. Using `while True:` to avoid problematic random numbers for a unit test feels pretty hacky to me.\n\nA simpler fix (probably worth doing in any case) would be do set the random number seed for the test. I usually recommend using `np.random.RandomState` objects instead of the global functions for precisely this reason. Note that numpy guarantees consistency in the random numbers produced for a particular seed as part of their API (even between versions).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69525568",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-69525568",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 69525568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTI1NTY4",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T02:58:25Z",
    "updated_at": "2015-01-12T02:58:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer the point of randomized tests is to discover corner cases that one may not think of. other-wise one would just provide a hand-written test case. by pre-fixing the random seed you lose that advantage.\n\n`while True:` in python, is the same as `do { ... } while( condition )` in C, C++.  current pandas source code uses `while True:` in many places.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/69526208",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-69526208",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 69526208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTI2MjA4",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T03:13:20Z",
    "updated_at": "2015-01-12T03:13:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer Normally I'd agree but we're only sampling 20 integers here - might as well hardcode that rather than set a seed.\n\n@behzadnouri The issue is not the notation but the lack of clarity into the what the acceptable data state is when the block is exited (and not having an upper-bound on runtime). My current patch directly produces your desired data.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70033072",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-70033072",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 70033072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMDMzMDcy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-15T03:00:54Z",
    "updated_at": "2015-01-15T03:00:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@qwhelan this looks good. ready to go?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70034302",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-70034302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 70034302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMDM0MzAy",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-15T03:19:31Z",
    "updated_at": "2015-01-15T03:19:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Yep.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70034654",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9225#issuecomment-70034654",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9225",
    "id": 70034654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMDM0NjU0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-15T03:25:21Z",
    "updated_at": "2015-01-15T03:25:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks!\n"
  }
]
