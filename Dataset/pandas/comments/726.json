[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3763312",
    "html_url": "https://github.com/pandas-dev/pandas/issues/726#issuecomment-3763312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/726",
    "id": 3763312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjMzMTI=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T17:42:20Z",
    "updated_at": "2012-02-01T17:42:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is the behavior as designed. Is it problematic for you? \"746.\" is a valid python floating point representation.\n\nIn [1]: 746.\nOut[1]: 746.0\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3763502",
    "html_url": "https://github.com/pandas-dev/pandas/issues/726#issuecomment-3763502",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/726",
    "id": 3763502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjM1MDI=",
    "user": {
      "login": "lodagro",
      "id": 1094464,
      "node_id": "MDQ6VXNlcjEwOTQ0NjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1094464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lodagro",
      "html_url": "https://github.com/lodagro",
      "followers_url": "https://api.github.com/users/lodagro/followers",
      "following_url": "https://api.github.com/users/lodagro/following{/other_user}",
      "gists_url": "https://api.github.com/users/lodagro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lodagro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lodagro/subscriptions",
      "organizations_url": "https://api.github.com/users/lodagro/orgs",
      "repos_url": "https://api.github.com/users/lodagro/repos",
      "events_url": "https://api.github.com/users/lodagro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lodagro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T17:51:25Z",
    "updated_at": "2012-02-01T17:51:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "When doing a read_clipboard from a DataFrame on the mailing list i noticed the above behavior, it felt weird (probably because i'm too used to engineering float formatting).\nIf this is intended, no problem.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3784603",
    "html_url": "https://github.com/pandas-dev/pandas/issues/726#issuecomment-3784603",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/726",
    "id": 3784603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQ2MDM=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-02T19:33:31Z",
    "updated_at": "2012-02-02T19:33:31Z",
    "author_association": "MEMBER",
    "body": "I might have a further look at this. R for example is a bit cleverer about this kinda stuff:\n\n```\n> data.frame(a=c(746.03, 0.00, 5620.00, 1592.36))\n        a\n1  746.03\n2    0.00\n3 5620.00\n4 1592.36\n> data.frame(a=c(746.03, 0.00, 5620.00, 1592.36), b=rnorm(4))\n        a          b\n1  746.03 -1.3561377\n2    0.00 -0.8483049\n3 5620.00 -0.4424412\n4 1592.36 -0.6585460\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3841039",
    "html_url": "https://github.com/pandas-dev/pandas/issues/726#issuecomment-3841039",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/726",
    "id": 3841039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEwMzk=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-07T02:00:02Z",
    "updated_at": "2012-02-07T02:00:02Z",
    "author_association": "MEMBER",
    "body": "OK I undertook a pretty major refactor of all the formatting code which is now quite a lot simpler and better. In the case above:\n\n```\n\nIn [1]: In [3]: df = pandas.DataFrame({'A': [746.03, 0.00, 5620.00, 1592.36]})\n\nIn [2]: \n\nIn [2]: In [4]: df\nOut[2]: \n         A\n0   746.03\n1     0.00\n2  5620.00\n3  1592.36\n```\n\nI also changed the default number of decimal places (plus the first digit to the left of the decimal point) to 7, which is really just a suggestion as in R. There are a few kinks yet even though the test suite passes, can you @lodagro have a whirl? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3844765",
    "html_url": "https://github.com/pandas-dev/pandas/issues/726#issuecomment-3844765",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/726",
    "id": 3844765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQ3NjU=",
    "user": {
      "login": "lodagro",
      "id": 1094464,
      "node_id": "MDQ6VXNlcjEwOTQ0NjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1094464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lodagro",
      "html_url": "https://github.com/lodagro",
      "followers_url": "https://api.github.com/users/lodagro/followers",
      "following_url": "https://api.github.com/users/lodagro/following{/other_user}",
      "gists_url": "https://api.github.com/users/lodagro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lodagro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lodagro/subscriptions",
      "organizations_url": "https://api.github.com/users/lodagro/orgs",
      "repos_url": "https://api.github.com/users/lodagro/repos",
      "events_url": "https://api.github.com/users/lodagro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lodagro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-07T09:14:56Z",
    "updated_at": "2012-02-07T09:14:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, i did some shaking -- looks very good.\n- while shaking noticed that `reset_index()` returned dtype column iso float one (i added a comment on #440, details also below)\n- I wonder how decision is made if exponent notation will be used or not (not so important i can rtfs :-) ).\n- Index does not use the float formatting, it never did.\n- pandas.set_eng_float_format() is broken. Concerning the engineering float formatter, i added plenty of unittests validating if the engineering float formatter works correclty. That is the EngFormatter class. But there is no unittest that validates if the EngFormatter is actually used when enabling it with pandas.set_eng_float_format. There are tests that do repr(df) after set_eng_float_format, but the tests do not check if the strings are as expected. OK, i know what to do here.\n\n``` python\ndf1 = pandas.DataFrame(\\\n        [(t, (9.81 * t ** 2) /2) for t in np.arange(0.0, 10, np.sqrt(2)/2)],\n        columns=['time', 'speed'])\nprint df1\n\n        time     speed\n0   0.000000    0.0000\n1   0.707107    2.4525\n2   1.414214    9.8100\n3   2.121320   22.0725\n4   2.828427   39.2400\n5   3.535534   61.3125\n6   4.242641   88.2900\n7   4.949747  120.1725\n8   5.656854  156.9600\n9   6.363961  198.6525\n10  7.071068  245.2500\n11  7.778175  296.7525\n12  8.485281  353.1600\n13  9.192388  414.4725\n14  9.899495  480.6900\n```\n\n---> a nice start\n\n---\n\n``` python\ntime = np.arange(0.0, 10, np.sqrt(2)/2)\ns1 = pandas.Series((9.81 * time ** 2) /2,\n                   index=pandas.Index(time, name='time'),\n                   name='speed')\nprint s1\ntime\n0.0                 0.0000\n0.707106781187      2.4525\n1.41421356237       9.8100\n2.12132034356      22.0725\n2.82842712475      39.2400\n3.53553390593      61.3125\n4.24264068712      88.2900\n4.94974746831     120.1725\n5.65685424949     156.9600\n6.36396103068     198.6525\n7.07106781187     245.2500\n7.77817459305     296.7525\n8.48528137424     353.1600\n9.19238815543     414.4725\n9.89949493661     480.6900\nName: speed\n\ndf2 = s1.reset_index()\nprint df2\n         time     speed\n0           0    0.0000\n1   0.7071068    2.4525\n2    1.414214    9.8100\n3     2.12132   22.0725\n4    2.828427   39.2400\n5    3.535534   61.3125\n6    4.242641   88.2900\n7    4.949747  120.1725\n8    5.656854  156.9600\n9    6.363961  198.6525\n10   7.071068  245.2500\n11   7.778175  296.7525\n12   8.485281  353.1600\n13   9.192388  414.4725\n14   9.899495  480.6900\n```\n\nIndex does not use the float formatting, it never did.\nHere df2 was a surprise. But it is related to `reset_index()`, which makes df2['time'].dtype object (i added this as comment to #440)\n\n---\n\n``` python\ndf3 = pandas.DataFrame(\\\n        [(exp,\n          np.pi * (10 ** exp),\n          np.random.randint(-1000000, 1000000),\n          np.random.randn() * (10 ** exp)) \\\n                for exp in range(0, 15)],\n        columns=['exponent', 'pi*(10^exp)', 'rand int', 'floats'])\nprint df3\n\n    exponent   pi*(10^exp)  rand int        floats\n0          0  3.141593e+00     -2960 -7.215871e-01\n1          1  3.141593e+01    444548  8.557070e+00\n2          2  3.141593e+02   -984243 -2.774372e+01\n3          3  3.141593e+03    661649 -3.249025e+02\n4          4  3.141593e+04   -767947  8.474823e+03\n5          5  3.141593e+05   -807672 -1.554962e+04\n6          6  3.141593e+06   -842952 -3.450536e+05\n7          7  3.141593e+07    811900 -3.746092e+05\n8          8  3.141593e+08    -69090  1.773727e+08\n9          9  3.141593e+09    394125  1.565224e+09\n10        10  3.141593e+10   -229127 -1.030427e+10\n11        11  3.141593e+11   -426117 -1.538240e+11\n12        12  3.141593e+12   -630881 -1.526913e+12\n13        13  3.141593e+13     24427  8.449833e+12\n14        14  3.141593e+14   -197911  4.752335e+13\n\nprint df3.head(8)\n\n   exponent      pi*(10^exp)  rand int         floats\n0         0         3.141593     -2960      -0.721587\n1         1        31.415927    444548       8.557070\n2         2       314.159265   -984243     -27.743721\n3         3      3141.592654    661649    -324.902472\n4         4     31415.926536   -767947    8474.823490\n5         5    314159.265359   -807672  -15549.620804\n6         6   3141592.653590   -842952 -345053.577693\n7         7  31415926.535898    811900 -374609.236675\n```\n\nHow is the decision between using exponent or not done?\n\n---\n\n``` python\ndf4 = pandas.DataFrame({'A': [746.03, 0.00, 5620.00, 1592.36]})\nprint df4\n         A\n0   746.03\n1     0.00\n2  5620.00\n3  1592.36\n\n\ndf5 = pandas.DataFrame({'A': [np.pi, np.sqrt(2), 12345.36, -1000, 1]})\nprint df5\n\n              A\n0      3.141593\n1      1.414214\n2  12345.360000\n3  -1000.000000\n4      1.000000\n\ndf6 = pandas.DataFrame({'A': [np.pi, np.sqrt(2), 12345.36, -1000, 1, 1e9]})\nprint df6\n\n              A\n0  3.141593e+00\n1  1.414214e+00\n2  1.234536e+04\n3 -1.000000e+03\n4  1.000000e+00\n5  1.000000e+09\n\npandas.set_printoptions(precision=20)\n\nprint df6\n0  3.1415926535897931160e+00\n1  1.4142135623730951455e+00\n2  1.2345360000000000582e+04\n3 -1.0000000000000000000e+03\n4  1.0000000000000000000e+00\n5  1.0000000000000000000e+09\n\nlen('3.1415926535897931160e+00')\n25\n\nprint df3\n    exponent                pi*(10^exp)  rand int                     floats\n0          0  3.1415926535897931160e+00     -2960 -7.2158713307242039470e-01\n1          1  3.1415926535897931160e+01    444548  8.5570701721458934941e+00\n2          2  3.1415926535897932581e+02   -984243 -2.7743721467131731373e+01\n3          3  3.1415926535897929170e+03    661649 -3.2490247228284766834e+02\n4          4  3.1415926535897931899e+04   -767947  8.4748234895174573467e+03\n5          5  3.1415926535897928989e+05   -807672 -1.5549620804074344051e+04\n6          6  3.1415926535897930153e+06   -842952 -3.4505357769299164647e+05\n7          7  3.1415926535897932947e+07    811900 -3.7460923667523823678e+05\n8          8  3.1415926535897928476e+08    -69090  1.7737270685067045689e+08\n9          9  3.1415926535897932053e+09    394125  1.5652238372316517830e+09\n10        10  3.1415926535897930145e+10   -229127 -1.0304274723894351959e+10\n11        11  3.1415926535897930908e+11   -426117 -1.5382395723947625732e+11\n12        12  3.1415926535897929688e+12   -630881 -1.5269131337086157227e+12\n13        13  3.1415926535897929688e+13     24427  8.4498331051793642578e+12\n14        14  3.1415926535897931250e+14   -197911  4.7523352185897289062e+13\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3853151",
    "html_url": "https://github.com/pandas-dev/pandas/issues/726#issuecomment-3853151",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/726",
    "id": 3853151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTMxNTE=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-07T18:21:04Z",
    "updated_at": "2012-02-07T18:21:04Z",
    "author_association": "MEMBER",
    "body": "OK I'll take a look through these issues and fix the set_eng_float_format problem (really ought to have been a test!)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3855529",
    "html_url": "https://github.com/pandas-dev/pandas/issues/726#issuecomment-3855529",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/726",
    "id": 3855529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTU1Mjk=",
    "user": {
      "login": "lodagro",
      "id": 1094464,
      "node_id": "MDQ6VXNlcjEwOTQ0NjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1094464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lodagro",
      "html_url": "https://github.com/lodagro",
      "followers_url": "https://api.github.com/users/lodagro/followers",
      "following_url": "https://api.github.com/users/lodagro/following{/other_user}",
      "gists_url": "https://api.github.com/users/lodagro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lodagro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lodagro/subscriptions",
      "organizations_url": "https://api.github.com/users/lodagro/orgs",
      "repos_url": "https://api.github.com/users/lodagro/repos",
      "events_url": "https://api.github.com/users/lodagro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lodagro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-07T20:33:14Z",
    "updated_at": "2012-02-07T20:33:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "aha, set_eng_float_format running fine again and tests already added, was just about to write one -- but already done.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3858523",
    "html_url": "https://github.com/pandas-dev/pandas/issues/726#issuecomment-3858523",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/726",
    "id": 3858523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTg1MjM=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-07T22:46:06Z",
    "updated_at": "2012-02-07T22:46:06Z",
    "author_association": "MEMBER",
    "body": "OK, I fixed the reset_index issue. I also have floats in Index formatting using the same formatter as everything else. \n\nRE: how scientific notation is determined, it's roughly whenever values meet some arbitrary definition of \"big\". See for example R behavior:\n\n```\n> data.frame(a=c(pi * 1e3, pi * 1e6, pi * 1e9, pi * 1e12, pi * 1e14))\n             a\n1 3.141593e+03\n2 3.141593e+06\n3 3.141593e+09\n4 3.141593e+12\n5 3.141593e+14\n> options(digits=10)\n> data.frame(a=c(pi * 1e3, pi * 1e6, pi * 1e9, pi * 1e12, pi * 1e14))\n                a\n1 3.141592654e+03\n2 3.141592654e+06\n3 3.141592654e+09\n4 3.141592654e+12\n5 3.141592654e+14\n> options(digits=15)\n> data.frame(a=c(pi * 1e3, pi * 1e6, pi * 1e9, pi * 1e12, pi * 1e14))\n                     a\n1 3.14159265358979e+03\n2 3.14159265358979e+06\n3 3.14159265358979e+09\n4 3.14159265358979e+12\n5 3.14159265358979e+14\n> options(digits=20)\n> data.frame(a=c(pi * 1e3, pi * 1e6, pi * 1e9, pi * 1e12, pi * 1e14))\n                          a\n1 3.1415926535897929170e+03\n2 3.1415926535897930153e+06\n3 3.1415926535897932053e+09\n4 3.1415926535897929688e+12\n5 3.1415926535897931250e+14\n```\n\nI guess it makes sense that if one values must be formatted in scientific notation that the whole column should be. If the precision / # digits is sufficiently high not clear to me that R has it wrong. I'm just going to leave it be for now\n"
  }
]
