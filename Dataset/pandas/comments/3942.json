[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91895618",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91895618",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91895618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxODk1NjE4",
    "user": {
      "login": "SethMMorton",
      "id": 1596189,
      "node_id": "MDQ6VXNlcjE1OTYxODk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SethMMorton",
      "html_url": "https://github.com/SethMMorton",
      "followers_url": "https://api.github.com/users/SethMMorton/followers",
      "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions",
      "organizations_url": "https://api.github.com/users/SethMMorton/orgs",
      "repos_url": "https://api.github.com/users/SethMMorton/repos",
      "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SethMMorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-11T18:24:14Z",
    "updated_at": "2015-04-11T18:25:27Z",
    "author_association": "NONE",
    "body": "Here's a specific use case that came up on [StackOverflow](http://stackoverflow.com/questions/29580978/naturally-sorting-pandas-dataframe-indices) recently.\n\n``` python\nfrom pandas import DataFrame\ndf = DataFrame({'a':range(5)},index=['0hr', '128hr', '72hr', '48hr', '96hr'])\nprint(df.sort())\n```\n\nThis returns\n\n```\n       a\n0hr    0\n128hr  1\n48hr   3\n72hr   2\n96hr   4\n```\n\nThe user would have liked to sort the index \"naturally\" using [natsort](https://github.com/SethMMorton/natsort), i.e.:\n\n``` python\nfrom natsort import natsort_keygen\nprint(df.sort(key=natsort_geygen()))\n```\n\nwhich would have returned\n\n```\n       a\n0hr    0\n48hr   3\n72hr   2\n96hr   4\n128hr  1\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91896321",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91896321",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91896321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxODk2MzIx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-11T18:31:41Z",
    "updated_at": "2015-04-11T18:31:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's the way to do this (further you _could_ use a `CateogricalIndex` to have custom sorting).\n\n```\nIn [67]: df = DataFrame({'a':range(5)},index=pd.to_timedelta(['0h', '128h', '72h', '48h', '96h']))\n\nIn [68]: df\nOut[68]: \n                 a\n0 days 00:00:00  0\n5 days 08:00:00  1\n3 days 00:00:00  2\n2 days 00:00:00  3\n4 days 00:00:00  4\n\nIn [69]: df.sort_index()\nOut[69]: \n                 a\n0 days 00:00:00  0\n2 days 00:00:00  3\n3 days 00:00:00  2\n4 days 00:00:00  4\n5 days 08:00:00  1\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91897516",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91897516",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91897516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxODk3NTE2",
    "user": {
      "login": "SethMMorton",
      "id": 1596189,
      "node_id": "MDQ6VXNlcjE1OTYxODk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SethMMorton",
      "html_url": "https://github.com/SethMMorton",
      "followers_url": "https://api.github.com/users/SethMMorton/followers",
      "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions",
      "organizations_url": "https://api.github.com/users/SethMMorton/orgs",
      "repos_url": "https://api.github.com/users/SethMMorton/repos",
      "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SethMMorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-11T18:44:33Z",
    "updated_at": "2015-04-11T18:44:33Z",
    "author_association": "NONE",
    "body": "Agreed, in this specific example they could use `timedeltas`.  But what if the index labels were something like \"version1\", \"version2\" ... \"version10\", etc. or something else that does not directly correspond with a builtin, sortable datatype?  I think I'm looking for a more general solution.\n\nI'm not really sure how to use `CategoricalIndex` to do custom sorting... I'm getting a bit lost in the docs. Is that considered by the pandas community to be the correct way to do custom sorting?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91898643",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91898643",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91898643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxODk4NjQz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-11T18:47:27Z",
    "updated_at": "2015-04-11T18:47:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "see #9741 (big, long), but short answer is yes.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91903714",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91903714",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91903714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxOTAzNzE0",
    "user": {
      "login": "SethMMorton",
      "id": 1596189,
      "node_id": "MDQ6VXNlcjE1OTYxODk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SethMMorton",
      "html_url": "https://github.com/SethMMorton",
      "followers_url": "https://api.github.com/users/SethMMorton/followers",
      "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions",
      "organizations_url": "https://api.github.com/users/SethMMorton/orgs",
      "repos_url": "https://api.github.com/users/SethMMorton/repos",
      "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SethMMorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-11T18:55:56Z",
    "updated_at": "2015-04-11T18:55:56Z",
    "author_association": "NONE",
    "body": "If I understand properly, in order for `Categorical` to work properly the sorting order for all elements must be defined at the time of creation of the `DataFrame`.  What if additional elements are added that were not present in the initial definition?\n\nBased on your suggestions, I am getting the impression that `key` will not be added to `sort`.  Am I reading  between the lines correctly?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91921150",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91921150",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91921150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxOTIxMTUw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-11T20:17:56Z",
    "updated_at": "2015-04-11T20:17:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@SethMMorton I think we _could_ add key to `.sorted` (pro the name of the new method to handle all sorting). Just takes some work.\n\nIn categoricals, you _can_ add things later if you want.(and reorder to change the sorting order).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91921242",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91921242",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91921242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxOTIxMjQy",
    "user": {
      "login": "SethMMorton",
      "id": 1596189,
      "node_id": "MDQ6VXNlcjE1OTYxODk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SethMMorton",
      "html_url": "https://github.com/SethMMorton",
      "followers_url": "https://api.github.com/users/SethMMorton/followers",
      "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions",
      "organizations_url": "https://api.github.com/users/SethMMorton/orgs",
      "repos_url": "https://api.github.com/users/SethMMorton/repos",
      "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SethMMorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-11T20:19:15Z",
    "updated_at": "2015-04-11T20:19:15Z",
    "author_association": "NONE",
    "body": "Ok.  Thanks for your time.  I'll take a good, deep look at categoricals.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91933266",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91933266",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91933266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxOTMzMjY2",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-11T21:55:36Z",
    "updated_at": "2015-04-11T21:55:36Z",
    "author_association": "MEMBER",
    "body": "An issue with the key argument is that it encourages writing non-vectorized code. I would rather support supplying an array to sort by instead, e.g., something like `df.sort(order=[natsort_geygen(x) for x in df.index])`. Categoricals are also a nice way to handle this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/91985656",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-91985656",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 91985656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxOTg1NjU2",
    "user": {
      "login": "SethMMorton",
      "id": 1596189,
      "node_id": "MDQ6VXNlcjE1OTYxODk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SethMMorton",
      "html_url": "https://github.com/SethMMorton",
      "followers_url": "https://api.github.com/users/SethMMorton/followers",
      "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions",
      "organizations_url": "https://api.github.com/users/SethMMorton/orgs",
      "repos_url": "https://api.github.com/users/SethMMorton/repos",
      "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SethMMorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-12T04:28:09Z",
    "updated_at": "2015-04-12T04:28:09Z",
    "author_association": "NONE",
    "body": "True.  Maybe it would be nice if the `Categoricals` could provide a `key` argument that would be an alternative to the `categories` argument, to define a functional way that the categories would be sorted rather than a pre-defined way.  Unless I am mistaken, this would still keep the power of the `Categoricals` while allowing the flexibility provided by the `key` argument.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92056535",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-92056535",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 92056535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMDU2NTM1",
    "user": {
      "login": "kay1793",
      "id": 9023555,
      "node_id": "MDQ6VXNlcjkwMjM1NTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9023555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kay1793",
      "html_url": "https://github.com/kay1793",
      "followers_url": "https://api.github.com/users/kay1793/followers",
      "following_url": "https://api.github.com/users/kay1793/following{/other_user}",
      "gists_url": "https://api.github.com/users/kay1793/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kay1793/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kay1793/subscriptions",
      "organizations_url": "https://api.github.com/users/kay1793/orgs",
      "repos_url": "https://api.github.com/users/kay1793/repos",
      "events_url": "https://api.github.com/users/kay1793/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kay1793/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-12T12:59:33Z",
    "updated_at": "2015-04-12T12:59:33Z",
    "author_association": "NONE",
    "body": "first, sort by key is a universally known operation, why drag categories into it?\n\n> An issue with the key argument is that it encourages writing non-vectorized code.\n> <...> I would rather support supplying an array to sort by **instead** \n\n[adding `sorted`](https://github.com/pydata/pandas/issues/9816) was suggested as a way to get a consistent API for sorting within pandas and with. it looks like the first thing you'd like to do is to have its `key` behave differently from **both** python (which accepts lambdas) **and** pandas (which accepts either lambda/ufuncs/arrays in such cases).\n\npandas already usefully accepts lambdas in many many places, you can always optimize later **if** you need to. why decide for _every_ user and  _every_ problem that this specific boilerplate/performance tradeoff is worth it? the array you'd like to require is just as likely to be computed with the lambda you'd like to ban only with added inconvenience for users. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92058860",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-92058860",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 92058860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMDU4ODYw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-12T13:24:10Z",
    "updated_at": "2015-04-12T13:24:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "With `Categoricals` you get custom sorting for free. Thinking about if there is utility in allowing `categories=` to accept a callable to provide a progamatic way to compute the ordering rather than passing in the values. Would be useful I suppose if you `.set_categories` with NEW categories (which would preserve the ordering).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92077918",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-92077918",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 92077918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMDc3OTE4",
    "user": {
      "login": "kay1793",
      "id": 9023555,
      "node_id": "MDQ6VXNlcjkwMjM1NTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9023555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kay1793",
      "html_url": "https://github.com/kay1793",
      "followers_url": "https://api.github.com/users/kay1793/followers",
      "following_url": "https://api.github.com/users/kay1793/following{/other_user}",
      "gists_url": "https://api.github.com/users/kay1793/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kay1793/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kay1793/subscriptions",
      "organizations_url": "https://api.github.com/users/kay1793/orgs",
      "repos_url": "https://api.github.com/users/kay1793/repos",
      "events_url": "https://api.github.com/users/kay1793/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kay1793/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-12T15:11:11Z",
    "updated_at": "2015-04-12T15:11:22Z",
    "author_association": "NONE",
    "body": "> With Categoricals you get custom sorting for free.\n\nyou wouldn't tell users to use category ordering when they want to sort the index lexically, and keyed sorting is no different. wanting to sort by a key function doesn't imply that the index is or should be categorical.  categories are irrelevant unless the index data is categorical in nature to begin with.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92112838",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-92112838",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 92112838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMTEyODM4",
    "user": {
      "login": "SethMMorton",
      "id": 1596189,
      "node_id": "MDQ6VXNlcjE1OTYxODk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SethMMorton",
      "html_url": "https://github.com/SethMMorton",
      "followers_url": "https://api.github.com/users/SethMMorton/followers",
      "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions",
      "organizations_url": "https://api.github.com/users/SethMMorton/orgs",
      "repos_url": "https://api.github.com/users/SethMMorton/repos",
      "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SethMMorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-12T20:02:08Z",
    "updated_at": "2015-04-12T20:31:10Z",
    "author_association": "NONE",
    "body": "Let me add a more concrete example of when having a `key` option to sort would be easier to use from a user's perspective, and may possibly be more efficient than `Categoricals`.  \n\nSuppose that a user had data in text files, and one of the columns contains distances _with associated units_, i.e. \"45.232m\" or \"0.59472km\".  Let's say there are ~500,000 rows, and each has a different distance.  Now, suppose the user wanted to sort based the data in this column.  Obviously, they will have to do some sort of transformation of this data to make it sortable, since a purely ordinal sort will not work.  As far as I can tell, currently the two most obvious results are to a) make a new column of the transformation result and use that column for sorting, or b) make the column a category, and then sort the data in the list, and make the categories the sorted data. \n\n``` python\nimport re\nfrom pandas import read_csv\n\ndef transform_distance(x):\n    \"\"\"Convert string of value and unit to a float.\n    Since this is just an example, skip error checking.\"\"\"\n    m = re.match(r'(.*)([mkc]?m)', x)\n    units = {'m': 1, 'cm': 0.01, 'mm': 0.001, 'km': 1000}\n    return float(m.group(1)) * units[m.group(2)]\n\ndf = read_csv('myfile.data')\n\n# Sort method 1: Make a new column and sort on that.\ndf['distances_sort'] = df.distances.map(transform_distance)\ndf.sort('distances_sort')\n\n# Sort method 2: Use categoricals\ndf.distances = df.distances.astype('category')\ndf.distances.cat.reorder_categories(sorted(df.distances, key=transform_distance), inplace=True, ordered=True)\ndf.sort('distances')\n```\n\nTo me, neither seem entirely preferable because method 1 adds extra data to the DataFrame, which will take up space and require me to filter out later if I want to write out to file, and method 2 requires sorting all the data in my column before I can sort the data in my DataFrame, which unless I am mistaken is not incredibly efficient.\n\nThings would be made worse if I then wanted to read in a second file and append that data to the DataFrame I already had, or if I wanted to modify the existing data in the \"distances\" column.  I would then need to re-update my \"distances_sort\" column, or re-perform the `reorder_categories` call before I could sort again.\n\nIf a `key` method were added to `sort`, all the boilerplate goes away as well as the extra processing. Sorting would just become\n\n``` python\n# Proposed sort method: Use a key argument\ndf.sort('distances', key=transform_distances)\n```\n\nNow, no matter how I update or modify my distances column, I do not need to do any additional pre-processing before sorting.\n\nThe `key` argument could be flexible and support either a function, or a `dict` of functions. This second input type would be used if you wanted to provide a key for only a few columns, or different keys for different columns; for example:\n\n``` python\n# Supporting multi-column sorting with a key.\n# In this case, only columns 'a' and 'c' would use the key for sorting,\n# and 'b' and 'd' would sort in the standard way.\ndf.sort(['a', 'b', 'c', 'd'], key={'a': lambda x: x.lower(), 'c': transform_distances})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92137155",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-92137155",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 92137155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMTM3MTU1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-12T21:41:04Z",
    "updated_at": "2015-04-12T21:41:04Z",
    "author_association": "MEMBER",
    "body": "OK, I can see `key` as a useful option.\n\nInstead of allow key to accept dicts, what about sorting multiple columns -> the key function gets a tuple?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/92150460",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-92150460",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 92150460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMTUwNDYw",
    "user": {
      "login": "SethMMorton",
      "id": 1596189,
      "node_id": "MDQ6VXNlcjE1OTYxODk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SethMMorton",
      "html_url": "https://github.com/SethMMorton",
      "followers_url": "https://api.github.com/users/SethMMorton/followers",
      "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions",
      "organizations_url": "https://api.github.com/users/SethMMorton/orgs",
      "repos_url": "https://api.github.com/users/SethMMorton/repos",
      "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SethMMorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-12T23:17:12Z",
    "updated_at": "2015-04-12T23:17:12Z",
    "author_association": "NONE",
    "body": "As long as it is well documented how to use the key on multiple columns, I don't much care. Just having the key option would be a huge step in the right direction. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/308655994",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-308655994",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 308655994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODY1NTk5NA==",
    "user": {
      "login": "gepcel",
      "id": 4179106,
      "node_id": "MDQ6VXNlcjQxNzkxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4179106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gepcel",
      "html_url": "https://github.com/gepcel",
      "followers_url": "https://api.github.com/users/gepcel/followers",
      "following_url": "https://api.github.com/users/gepcel/following{/other_user}",
      "gists_url": "https://api.github.com/users/gepcel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gepcel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gepcel/subscriptions",
      "organizations_url": "https://api.github.com/users/gepcel/orgs",
      "repos_url": "https://api.github.com/users/gepcel/repos",
      "events_url": "https://api.github.com/users/gepcel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gepcel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-15T07:48:29Z",
    "updated_at": "2017-06-15T07:48:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I found this while searching these kinds of usages. I really like @SethMMorton 's idea. Really wish this will happen. Under many circumstances, this makes more sense than catogeries."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/308694126",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3942#issuecomment-308694126",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3942",
    "id": 308694126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODY5NDEyNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-15T10:34:46Z",
    "updated_at": "2017-06-15T10:34:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "as indicated above, if someone wants to step up and add this functionality in a proper / tested way, then it is likely to be accepted."
  }
]
