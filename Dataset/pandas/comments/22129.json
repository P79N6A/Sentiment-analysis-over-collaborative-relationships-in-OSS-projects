[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409451499",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409451499",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409451499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTQ1MTQ5OQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T05:11:32Z",
    "updated_at": "2018-08-01T05:11:32Z",
    "author_association": "MEMBER",
    "body": "May be a very platform-specific issue (I cannot reproduce). Which one matches just running `locale -a` on your system?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409453970",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409453970",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409453970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTQ1Mzk3MA==",
    "user": {
      "login": "ginggs",
      "id": 1970404,
      "node_id": "MDQ6VXNlcjE5NzA0MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1970404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ginggs",
      "html_url": "https://github.com/ginggs",
      "followers_url": "https://api.github.com/users/ginggs/followers",
      "following_url": "https://api.github.com/users/ginggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions",
      "organizations_url": "https://api.github.com/users/ginggs/orgs",
      "repos_url": "https://api.github.com/users/ginggs/repos",
      "events_url": "https://api.github.com/users/ginggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ginggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T05:29:10Z",
    "updated_at": "2018-08-01T05:29:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, neither is an exact match.  The output of `locale -a` contains some lines with no suffix, and some with `.utf8`.\r\n\r\nI am able to reproduce in Ubuntu with the `locales` package installed, and in Debian with the `locales-all` package installed.\r\n\r\nI can post the output of `locale -a` from the same machine as above in a little while."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409523959",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409523959",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409523959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTUyMzk1OQ==",
    "user": {
      "login": "ginggs",
      "id": 1970404,
      "node_id": "MDQ6VXNlcjE5NzA0MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1970404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ginggs",
      "html_url": "https://github.com/ginggs",
      "followers_url": "https://api.github.com/users/ginggs/followers",
      "following_url": "https://api.github.com/users/ginggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions",
      "organizations_url": "https://api.github.com/users/ginggs/orgs",
      "repos_url": "https://api.github.com/users/ginggs/repos",
      "events_url": "https://api.github.com/users/ginggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ginggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T10:08:35Z",
    "updated_at": "2018-08-01T10:09:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Output of `locale -a`:\r\n<details>\r\n\r\naf_ZA.utf8\r\nC\r\nC.UTF-8\r\nde_AT.utf8\r\nde_BE.utf8\r\nde_CH.utf8\r\nde_DE.utf8\r\nde_IT.utf8\r\nde_LI.utf8\r\nde_LU.utf8\r\nen_AG\r\nen_AG.utf8\r\nen_AU.utf8\r\nen_BW.utf8\r\nen_CA.utf8\r\nen_DK.utf8\r\nen_GB.utf8\r\nen_HK.utf8\r\nen_IE.utf8\r\nen_IL\r\nen_IL.utf8\r\nen_IN\r\nen_IN.utf8\r\nen_NG\r\nen_NG.utf8\r\nen_NZ.utf8\r\nen_PH.utf8\r\nen_SG.utf8\r\nen_US.utf8\r\nen_ZA.utf8\r\nen_ZM\r\nen_ZM.utf8\r\nen_ZW.utf8\r\nfr_CH.utf8\r\nfrench\r\nfr_FR\r\nfr_FR.iso88591\r\nfr_FR.utf8\r\nPOSIX\r\n</details>"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409622328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409622328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409622328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTYyMjMyOA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T15:51:21Z",
    "updated_at": "2018-08-01T15:51:21Z",
    "author_association": "MEMBER",
    "body": "The code in that module by default defers to `locale -a:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/9c118668256d2e36d2d310d46e604392a92bbee7/pandas/util/testing.py#L419\r\n\r\nSo not sure what is changing the name on Python3. If you want to debug in that module and can find something to fix then PRs are certainly welcome"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409632001",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409632001",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409632001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTYzMjAwMQ==",
    "user": {
      "login": "ginggs",
      "id": 1970404,
      "node_id": "MDQ6VXNlcjE5NzA0MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1970404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ginggs",
      "html_url": "https://github.com/ginggs",
      "followers_url": "https://api.github.com/users/ginggs/followers",
      "following_url": "https://api.github.com/users/ginggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions",
      "organizations_url": "https://api.github.com/users/ginggs/orgs",
      "repos_url": "https://api.github.com/users/ginggs/repos",
      "events_url": "https://api.github.com/users/ginggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ginggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T16:16:56Z",
    "updated_at": "2018-08-01T16:16:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, thanks!\r\n\r\nSo in Python2:\r\n```\r\n>>> import locale; locale.normalize('en_IL.utf8')\r\n'en_IL.utf8'\r\n```\r\n\r\n...and in Python3:\r\n```\r\n>>> import locale; locale.normalize('en_IL.utf8')\r\n'en_IL.UTF-8'\r\n```\r\n\r\nFrom the `locale` module's documentation:\r\n`locale.`**normalize**(_localename_)\r\n\r\n> Returns a normalized locale code for the given locale name. The returned locale code is formatted for use with setlocale(). If normalization fails, the original name is returned unchanged.\r\n\r\nSo this looks like a bug in Python2, but perhaps we should skip the locale if `locale.normalize()` returns the original locale name."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409658534",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409658534",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409658534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY1ODUzNA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T17:37:03Z",
    "updated_at": "2018-08-01T17:37:03Z",
    "author_association": "MEMBER",
    "body": "Can you post the actual traceback of the test failure? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409680202",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409680202",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409680202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY4MDIwMg==",
    "user": {
      "login": "ginggs",
      "id": 1970404,
      "node_id": "MDQ6VXNlcjE5NzA0MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1970404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ginggs",
      "html_url": "https://github.com/ginggs",
      "followers_url": "https://api.github.com/users/ginggs/followers",
      "following_url": "https://api.github.com/users/ginggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions",
      "organizations_url": "https://api.github.com/users/ginggs/orgs",
      "repos_url": "https://api.github.com/users/ginggs/repos",
      "events_url": "https://api.github.com/users/ginggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ginggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T18:42:32Z",
    "updated_at": "2018-08-01T18:42:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\n=================================== FAILURES ===================================\r\n______________ TestDatetime64.test_datetime_name_accessors[en_IL] ______________\r\n\r\nself = <pandas.tests.indexes.datetimes.test_misc.TestDatetime64 object at 0xe3039150>\r\ntime_locale = 'en_IL'\r\n\r\n    @pytest.mark.parametrize('time_locale', [\r\n        None] if tm.get_locales() is None else [None] + tm.get_locales())\r\n    def test_datetime_name_accessors(self, time_locale):\r\n        # Test Monday -> Sunday and January -> December, in that sequence\r\n        if time_locale is None:\r\n            # If the time_locale is None, day-name and month_name should\r\n            # return the english attributes\r\n            expected_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday',\r\n                             'Friday', 'Saturday', 'Sunday']\r\n            expected_months = ['January', 'February', 'March', 'April', 'May',\r\n                               'June', 'July', 'August', 'September',\r\n                               'October', 'November', 'December']\r\n        else:\r\n            with tm.set_locale(time_locale, locale.LC_TIME):\r\n                expected_days = calendar.day_name[:]\r\n                expected_months = calendar.month_name[1:]\r\n    \r\n        # GH 11128\r\n        dti = DatetimeIndex(freq='D', start=datetime(1998, 1, 1),\r\n                            periods=365)\r\n        english_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday',\r\n                        'Friday', 'Saturday', 'Sunday']\r\n        for day, name, eng_name in zip(range(4, 11),\r\n                                       expected_days,\r\n                                       english_days):\r\n            name = name.capitalize()\r\n            assert dti.weekday_name[day] == eng_name\r\n>           assert dti.day_name(locale=time_locale)[day] == name\r\n\r\n/usr/lib/python2.7/dist-packages/pandas/tests/indexes/datetimes/test_misc.py:272: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = DatetimeIndex(['1998-01-01', '1998-01-02', '1998-01-03', '1998-01-04',\r\n       ...30', '1998-12-31'],\r\n              dtype='datetime64[ns]', length=365, freq='D')\r\nlocale = 'en_IL'\r\n\r\n    def day_name(self, locale=None):\r\n        \"\"\"\r\n            Return the day names of the DateTimeIndex with specified locale.\r\n    \r\n            Parameters\r\n            ----------\r\n            locale : string, default None (English locale)\r\n                locale determining the language in which to return the day name\r\n    \r\n            Returns\r\n            -------\r\n            month_names : Index\r\n                Index of day names\r\n    \r\n            .. versionadded:: 0.23.0\r\n            \"\"\"\r\n        values = self.asi8\r\n        if self.tz is not None:\r\n            if self.tz is not utc:\r\n                values = self._local_timestamps()\r\n    \r\n        result = fields.get_date_name_field(values, 'day_name',\r\n>                                           locale=locale)\r\n\r\n/usr/lib/python2.7/dist-packages/pandas/core/indexes/datetimes.py:2553: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/fields.pyx:107: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:213: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:229: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:230: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/strptime.pyx:396: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/strptime.pyx:354: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncategory = 2\r\n\r\n    def getlocale(category=LC_CTYPE):\r\n    \r\n        \"\"\" Returns the current setting for the given locale category as\r\n            tuple (language code, encoding).\r\n    \r\n            category may be one of the LC_* value except LC_ALL. It\r\n            defaults to LC_CTYPE.\r\n    \r\n            Except for the code 'C', the language code corresponds to RFC\r\n            1766.  code and encoding can be None in case the values cannot\r\n            be determined.\r\n    \r\n        \"\"\"\r\n        localename = _setlocale(category)\r\n        if category == LC_ALL and ';' in localename:\r\n            raise TypeError, 'category LC_ALL is not supported'\r\n>       return _parse_localename(localename)\r\n\r\n/usr/lib/python2.7/locale.py:564: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nlocalename = 'en_IL'\r\n\r\n    def _parse_localename(localename):\r\n    \r\n        \"\"\" Parses the locale code for localename and returns the\r\n            result as tuple (language code, encoding).\r\n    \r\n            The localename is normalized and passed through the locale\r\n            alias engine. A ValueError is raised in case the locale name\r\n            cannot be parsed.\r\n    \r\n            The language code corresponds to RFC 1766.  code and encoding\r\n            can be None in case the values cannot be determined or are\r\n            unknown to this implementation.\r\n    \r\n        \"\"\"\r\n        code = normalize(localename)\r\n        if '@' in code:\r\n            # Deal with locale modifiers\r\n            code, modifier = code.split('@', 1)\r\n            if modifier == 'euro' and '.' not in code:\r\n                # Assume Latin-9 for @euro locales. This is bogus,\r\n                # since some systems may use other encodings for these\r\n                # locales. Also, we ignore other modifiers.\r\n                return code, 'iso-8859-15'\r\n    \r\n        if '.' in code:\r\n            return tuple(code.split('.')[:2])\r\n        elif code == 'C':\r\n            return None, None\r\n>       raise ValueError, 'unknown locale: %s' % localename\r\nE       ValueError: unknown locale: en_IL\r\n\r\n/usr/lib/python2.7/locale.py:477: ValueError\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409680630",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409680630",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409680630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY4MDYzMA==",
    "user": {
      "login": "ginggs",
      "id": 1970404,
      "node_id": "MDQ6VXNlcjE5NzA0MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1970404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ginggs",
      "html_url": "https://github.com/ginggs",
      "followers_url": "https://api.github.com/users/ginggs/followers",
      "following_url": "https://api.github.com/users/ginggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions",
      "organizations_url": "https://api.github.com/users/ginggs/orgs",
      "repos_url": "https://api.github.com/users/ginggs/repos",
      "events_url": "https://api.github.com/users/ginggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ginggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T18:43:46Z",
    "updated_at": "2018-08-01T18:43:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\n_______________ TestTimestampProperties.test_names[en_IL-data1] ________________\r\n\r\nself = <pandas.tests.scalar.timestamp.test_timestamp.TestTimestampProperties object at 0xda6b99d0>\r\ndata = Timestamp('2017-08-28 23:00:00-0500', tz='EST'), time_locale = 'en_IL'\r\n\r\n    @pytest.mark.parametrize('data',\r\n                             [Timestamp('2017-08-28 23:00:00'),\r\n                              Timestamp('2017-08-28 23:00:00', tz='EST')])\r\n    @pytest.mark.parametrize('time_locale', [\r\n        None] if tm.get_locales() is None else [None] + tm.get_locales())\r\n    def test_names(self, data, time_locale):\r\n        # GH 17354\r\n        # Test .weekday_name, .day_name(), .month_name\r\n        with tm.assert_produces_warning(FutureWarning,\r\n                                        check_stacklevel=False):\r\n            assert data.weekday_name == 'Monday'\r\n        if time_locale is None:\r\n            expected_day = 'Monday'\r\n            expected_month = 'August'\r\n        else:\r\n            with tm.set_locale(time_locale, locale.LC_TIME):\r\n                expected_day = calendar.day_name[0].capitalize()\r\n                expected_month = calendar.month_name[8].capitalize()\r\n    \r\n>       assert data.day_name(time_locale) == expected_day\r\n\r\n/usr/lib/python2.7/dist-packages/pandas/tests/scalar/timestamp/test_timestamp.py:119: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/timestamps.pyx:760: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/timestamps.pyx:364: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/timestamps.pyx:370: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/fields.pyx:107: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:213: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:229: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:230: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/strptime.pyx:396: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/strptime.pyx:354: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncategory = 2\r\n\r\n    def getlocale(category=LC_CTYPE):\r\n    \r\n        \"\"\" Returns the current setting for the given locale category as\r\n            tuple (language code, encoding).\r\n    \r\n            category may be one of the LC_* value except LC_ALL. It\r\n            defaults to LC_CTYPE.\r\n    \r\n            Except for the code 'C', the language code corresponds to RFC\r\n            1766.  code and encoding can be None in case the values cannot\r\n            be determined.\r\n    \r\n        \"\"\"\r\n        localename = _setlocale(category)\r\n        if category == LC_ALL and ';' in localename:\r\n            raise TypeError, 'category LC_ALL is not supported'\r\n>       return _parse_localename(localename)\r\n\r\n/usr/lib/python2.7/locale.py:564: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nlocalename = 'en_IL'\r\n\r\n    def _parse_localename(localename):\r\n    \r\n        \"\"\" Parses the locale code for localename and returns the\r\n            result as tuple (language code, encoding).\r\n    \r\n            The localename is normalized and passed through the locale\r\n            alias engine. A ValueError is raised in case the locale name\r\n            cannot be parsed.\r\n    \r\n            The language code corresponds to RFC 1766.  code and encoding\r\n            can be None in case the values cannot be determined or are\r\n            unknown to this implementation.\r\n    \r\n        \"\"\"\r\n        code = normalize(localename)\r\n        if '@' in code:\r\n            # Deal with locale modifiers\r\n            code, modifier = code.split('@', 1)\r\n            if modifier == 'euro' and '.' not in code:\r\n                # Assume Latin-9 for @euro locales. This is bogus,\r\n                # since some systems may use other encodings for these\r\n                # locales. Also, we ignore other modifiers.\r\n                return code, 'iso-8859-15'\r\n    \r\n        if '.' in code:\r\n            return tuple(code.split('.')[:2])\r\n        elif code == 'C':\r\n            return None, None\r\n>       raise ValueError, 'unknown locale: %s' % localename\r\nE       ValueError: unknown locale: en_IL\r\n\r\n/usr/lib/python2.7/locale.py:477: ValueError\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409680870",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409680870",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409680870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY4MDg3MA==",
    "user": {
      "login": "ginggs",
      "id": 1970404,
      "node_id": "MDQ6VXNlcjE5NzA0MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1970404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ginggs",
      "html_url": "https://github.com/ginggs",
      "followers_url": "https://api.github.com/users/ginggs/followers",
      "following_url": "https://api.github.com/users/ginggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions",
      "organizations_url": "https://api.github.com/users/ginggs/orgs",
      "repos_url": "https://api.github.com/users/ginggs/repos",
      "events_url": "https://api.github.com/users/ginggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ginggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T18:44:29Z",
    "updated_at": "2018-08-01T18:44:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\n___ TestSeriesDatetimeValues.test_dt_accessor_datetime_name_accessors[en_IL] ___\r\n\r\nself = <pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues object at 0xda334b70>\r\ntime_locale = 'en_IL'\r\n\r\n    @pytest.mark.parametrize('time_locale', [\r\n        None] if tm.get_locales() is None else [None] + tm.get_locales())\r\n    def test_dt_accessor_datetime_name_accessors(self, time_locale):\r\n        # Test Monday -> Sunday and January -> December, in that sequence\r\n        if time_locale is None:\r\n            # If the time_locale is None, day-name and month_name should\r\n            # return the english attributes\r\n            expected_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday',\r\n                             'Friday', 'Saturday', 'Sunday']\r\n            expected_months = ['January', 'February', 'March', 'April', 'May',\r\n                               'June', 'July', 'August', 'September',\r\n                               'October', 'November', 'December']\r\n        else:\r\n            with tm.set_locale(time_locale, locale.LC_TIME):\r\n                expected_days = calendar.day_name[:]\r\n                expected_months = calendar.month_name[1:]\r\n    \r\n        s = Series(DatetimeIndex(freq='D', start=datetime(1998, 1, 1),\r\n                                 periods=365))\r\n        english_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday',\r\n                        'Friday', 'Saturday', 'Sunday']\r\n        for day, name, eng_name in zip(range(4, 11),\r\n                                       expected_days,\r\n                                       english_days):\r\n            name = name.capitalize()\r\n            assert s.dt.weekday_name[day] == eng_name\r\n>           assert s.dt.day_name(locale=time_locale)[day] == name\r\n\r\n/usr/lib/python2.7/dist-packages/pandas/tests/series/test_datetime_values.py:305: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <pandas.core.indexes.accessors.DatetimeProperties object at 0xda158490>\r\nargs = (), kwargs = {'locale': 'en_IL'}\r\n\r\n    def f(self, *args, **kwargs):\r\n>       return self._delegate_method(name, *args, **kwargs)\r\n\r\n/usr/lib/python2.7/dist-packages/pandas/core/accessor.py:89: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <pandas.core.indexes.accessors.DatetimeProperties object at 0xda158490>\r\nname = 'day_name', args = (), kwargs = {'locale': 'en_IL'}\r\nSeries = <class 'pandas.core.series.Series'>\r\nvalues = DatetimeIndex(['1998-01-01', '1998-01-02', '1998-01-03', '1998-01-04',\r\n       ...0', '1998-12-31'],\r\n              dtype='datetime64[ns]', length=365, freq=None)\r\nmethod = <bound method DatetimeIndex.day_name of DatetimeIndex(['1998-01-01', '1998-01-...', '1998-12-31'],\r\n              dtype='datetime64[ns]', length=365, freq=None)>\r\n\r\n    def _delegate_method(self, name, *args, **kwargs):\r\n        from pandas import Series\r\n        values = self._get_values()\r\n    \r\n        method = getattr(values, name)\r\n>       result = method(*args, **kwargs)\r\n\r\n/usr/lib/python2.7/dist-packages/pandas/core/indexes/accessors.py:99: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = DatetimeIndex(['1998-01-01', '1998-01-02', '1998-01-03', '1998-01-04',\r\n       ...0', '1998-12-31'],\r\n              dtype='datetime64[ns]', length=365, freq=None)\r\nlocale = 'en_IL'\r\n\r\n    def day_name(self, locale=None):\r\n        \"\"\"\r\n            Return the day names of the DateTimeIndex with specified locale.\r\n    \r\n            Parameters\r\n            ----------\r\n            locale : string, default None (English locale)\r\n                locale determining the language in which to return the day name\r\n    \r\n            Returns\r\n            -------\r\n            month_names : Index\r\n                Index of day names\r\n    \r\n            .. versionadded:: 0.23.0\r\n            \"\"\"\r\n        values = self.asi8\r\n        if self.tz is not None:\r\n            if self.tz is not utc:\r\n                values = self._local_timestamps()\r\n    \r\n        result = fields.get_date_name_field(values, 'day_name',\r\n>                                           locale=locale)\r\n\r\n/usr/lib/python2.7/dist-packages/pandas/core/indexes/datetimes.py:2553: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/fields.pyx:107: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:213: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:229: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/ccalendar.pyx:230: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/strptime.pyx:396: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\n\r\npandas/_libs/tslibs/strptime.pyx:354: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncategory = 2\r\n\r\n    def getlocale(category=LC_CTYPE):\r\n    \r\n        \"\"\" Returns the current setting for the given locale category as\r\n            tuple (language code, encoding).\r\n    \r\n            category may be one of the LC_* value except LC_ALL. It\r\n            defaults to LC_CTYPE.\r\n    \r\n            Except for the code 'C', the language code corresponds to RFC\r\n            1766.  code and encoding can be None in case the values cannot\r\n            be determined.\r\n    \r\n        \"\"\"\r\n        localename = _setlocale(category)\r\n        if category == LC_ALL and ';' in localename:\r\n            raise TypeError, 'category LC_ALL is not supported'\r\n>       return _parse_localename(localename)\r\n\r\n/usr/lib/python2.7/locale.py:564: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nlocalename = 'en_IL'\r\n\r\n    def _parse_localename(localename):\r\n    \r\n        \"\"\" Parses the locale code for localename and returns the\r\n            result as tuple (language code, encoding).\r\n    \r\n            The localename is normalized and passed through the locale\r\n            alias engine. A ValueError is raised in case the locale name\r\n            cannot be parsed.\r\n    \r\n            The language code corresponds to RFC 1766.  code and encoding\r\n            can be None in case the values cannot be determined or are\r\n            unknown to this implementation.\r\n    \r\n        \"\"\"\r\n        code = normalize(localename)\r\n        if '@' in code:\r\n            # Deal with locale modifiers\r\n            code, modifier = code.split('@', 1)\r\n            if modifier == 'euro' and '.' not in code:\r\n                # Assume Latin-9 for @euro locales. This is bogus,\r\n                # since some systems may use other encodings for these\r\n                # locales. Also, we ignore other modifiers.\r\n                return code, 'iso-8859-15'\r\n    \r\n        if '.' in code:\r\n            return tuple(code.split('.')[:2])\r\n        elif code == 'C':\r\n            return None, None\r\n>       raise ValueError, 'unknown locale: %s' % localename\r\nE       ValueError: unknown locale: en_IL\r\n\r\n/usr/lib/python2.7/locale.py:477: ValueError\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409681479",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409681479",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409681479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY4MTQ3OQ==",
    "user": {
      "login": "ginggs",
      "id": 1970404,
      "node_id": "MDQ6VXNlcjE5NzA0MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1970404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ginggs",
      "html_url": "https://github.com/ginggs",
      "followers_url": "https://api.github.com/users/ginggs/followers",
      "following_url": "https://api.github.com/users/ginggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions",
      "organizations_url": "https://api.github.com/users/ginggs/orgs",
      "repos_url": "https://api.github.com/users/ginggs/repos",
      "events_url": "https://api.github.com/users/ginggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ginggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T18:46:26Z",
    "updated_at": "2018-08-01T18:46:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are actually three different tests that fail.\r\n\r\nFull test logs are here:\r\nhttps://objectstorage.prodstack4-5.canonical.com/v1/AUTH_77e2ada1e7a84929a74ba3b87153c0ac/autopkgtest-cosmic/cosmic/armhf/p/pandas/20180730_074249_58050@/log.gz\r\nThe Python2 tests are run first, then Python3.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/409919330",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22129#issuecomment-409919330",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22129",
    "id": 409919330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTkxOTMzMA==",
    "user": {
      "login": "ginggs",
      "id": 1970404,
      "node_id": "MDQ6VXNlcjE5NzA0MDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1970404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ginggs",
      "html_url": "https://github.com/ginggs",
      "followers_url": "https://api.github.com/users/ginggs/followers",
      "following_url": "https://api.github.com/users/ginggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions",
      "organizations_url": "https://api.github.com/users/ginggs/orgs",
      "repos_url": "https://api.github.com/users/ginggs/repos",
      "events_url": "https://api.github.com/users/ginggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ginggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-02T13:06:29Z",
    "updated_at": "2018-08-02T13:06:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems `en_IL` is only available in recent versions of Ubuntu.  I can reproduce this behaviour with `ak_GH`, which is available after installing the `locales-all` package.\r\n\r\nPython2:\r\n```\r\nPython 2.7.15 (default, May  1 2018, 05:55:50)\r\n[GCC 7.3.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pandas.util.testing as tm\r\n>>> tm._can_set_locale('ak_GH')\r\nTrue\r\n>>> import locale\r\n>>> locale.setlocale(locale.LC_ALL, 'ak_GH')\r\n'ak_GH'\r\n>>> locale.getlocale()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/locale.py\", line 564, in getlocale\r\n    return _parse_localename(localename)\r\n  File \"/usr/lib/python2.7/locale.py\", line 477, in _parse_localename\r\n    raise ValueError, 'unknown locale: %s' % localename\r\nValueError: unknown locale: ak_GH\r\n```\r\n\r\nPython3:\r\n```\r\nPython 3.6.6 (default, Jun 27 2018, 14:44:17)\r\n[GCC 8.1.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pandas.util.testing as tm\r\n>>> tm._can_set_locale('ak_GH')\r\nTrue\r\n>>> import locale\r\n>>> locale.setlocale(locale.LC_ALL, 'ak_GH')\r\n'ak_GH'\r\n>>> locale.getlocale()\r\n('ak_GH', 'UTF-8')\r\n```\r\n\r\nI was also able to reproduce this in Ubuntu 16.04 LTS, with pandas 0.17.1 and Python2 2.7.12."
  }
]
