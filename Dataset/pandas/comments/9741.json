[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87104474",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87104474",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87104474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTA0NDc0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T22:04:28Z",
    "updated_at": "2015-03-27T22:04:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @TomAugspurger \ncc @jorisvandenbossche \ncc @JanSchulz\ncc @shoyer \ncc @mrocklin\n\nSo the main point to note here is that we don't have the concept of `ordered` in a `CategoricalIndex`. (if you pass it its a `ValueError`), because by-definition an `Index` IS ordered.\n\nThis is actually a good thing, it makes the entire discussion we had w.r.t. to the groupby sort issue moot (well if you are grouping by a `CategoricalIndex` anyhow)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87105316",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87105316",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87105316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTA1MzE2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T22:11:04Z",
    "updated_at": "2015-03-27T22:11:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "are there operations that currently return say an `Index` that really should return a `CategoricalIndex`. e.g. similary to how say `pd.cut` should return a `IntervalIndex` (when @shoyer finishes :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87106193",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87106193",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87106193,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTA2MTkz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T22:17:06Z",
    "updated_at": "2015-03-27T22:17:06Z",
    "author_association": "MEMBER",
    "body": "@jreback  What happens if I try to insert new values into a categorical index that aren't already in the categories?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87107517",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87107517",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87107517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTA3NTE3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T22:24:43Z",
    "updated_at": "2015-03-27T22:24:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer \n\nhmm, I think \n\n`df2.loc['d'] = 6` should raise (broken now)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87107820",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87107820",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87107820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTA3ODIw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T22:26:37Z",
    "updated_at": "2015-03-27T22:26:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nIn [24]: pd.concat([df2,df2])\nOut[24]: \n   A\nB   \na  0\na  1\nb  2\nb  3\nc  4\na  6\na  0\na  1\nb  2\nb  3\nc  4\na  6\n\nIn [25]: pd.concat([df2,df2]).index\nOut[25]: Index([u'a', u'a', u'b', u'b', u'c', u'a', u'a', u'a', u'b', u'b', u'c', u'a'], dtype='object')\n```\n\nThis I could make work, but IIRC we decided to have this merge the categories (though in this case they are the same)....hmmm\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87114674",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87114674",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87114674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTE0Njc0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T22:57:48Z",
    "updated_at": "2015-03-27T22:57:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nIn [8]: df2 = DataFrame({'A' : np.arange(6,dtype='int64'),\n   ...:                         'B' : Series(list('aabbca')).astype('category',categories=list('cab')) }).set_index('B')\n\nIn [9]: df2\nOut[9]: \n   A\nB   \na  0\na  1\nb  2\nb  3\nc  4\na  5\n\nIn [10]: df2.index        \nOut[10]: CategoricalIndex([u'a', u'a', u'b', u'b', u'c', u'a'], dtype='category')\n\nIn [11]: df2.loc['d'] = 10\n\nIn [12]: df2\nOut[12]: \n    A\na   0\na   1\nb   2\nb   3\nc   4\na   5\nd  10\n\nIn [13]: df2.index\nOut[13]: Index([u'a', u'a', u'b', u'b', u'c', u'a', u'd'], dtype='object')\n\nIn [14]: df2.index = pd.CategoricalIndex(df2.index)\n\nIn [15]: df2.index\nOut[15]: CategoricalIndex([u'a', u'a', u'b', u'b', u'c', u'a', u'd'], dtype='category')\n\nIn [16]: df2.index.categories\nOut[16]: Index([u'a', u'b', u'c', u'd'], dtype='object')\n```\n\nso the appending operation works, but converts you to a `Index` (and you lose the ordering by-definition)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87273244",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87273244",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87273244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjczMjQ0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-28T17:46:53Z",
    "updated_at": "2015-03-28T17:46:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger \n\nI now dispatch to Categorical for comparisons, providing conversions for Index and Categorical, but they must match in categories/ordered\n\n```\nIn [4]: ci1 = CategoricalIndex(['a', 'b'], categories=['a', 'b'])\n\nIn [5]: ci2 = CategoricalIndex(['a', 'b'], categories=['a', 'b', 'c'])\n\nIn [6]: ci1.equals(ci1)\nOut[6]: True\n\n# this is always safe (e.g. it returns boolean)\nIn [7]: ci1.equals(ci2)\nOut[7]: False\n\nIn [8]: ci1==ci1\nOut[8]: array([ True,  True], dtype=bool)\n\n# not the same categories\nIn [9]: ci1==ci2\nTypeError: categorical index comparisions must have the same categories\n\n# scalar comparison\nIn [10]: ci1=='a'\nOut[10]: array([ True, False], dtype=bool)\n\n# ok as all values are in the categories\nIn [11]: ci1==Index(['a','b'])\nOut[11]: array([ True,  True], dtype=bool)\n\n# cannot compare vs unordered\nIn [13]: ci1 == pd.Categorical(ci1.values, ordered=False)\nTypeError: categorical index comparisions must be ordered\n\n# this is not allowed because 'c' is not a category\nIn [14]: ci1==Index(['a','b','c'])\nTypeError: cannot compare versus non-convertible Index type\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87273852",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87273852",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87273852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjczODUy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-28T17:52:54Z",
    "updated_at": "2015-03-28T18:34:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I fixed the concat issues to be the same as concating columns (e.g. non-matching categories make this raise).\n\n```\nIn [15]:  a = Series(np.arange(6,dtype='int64'))\n\nIn [16]:  b = Series(list('aabbca'))\n\nIn [17]: df2 = DataFrame({'A' : a, 'B' : b.astype('category',categories=list('cab')) }).set_index('B')\n\n# concat of same-categories is good\nIn [22]: df2.index\nOut[22]: CategoricalIndex([u'a', u'a', u'b', u'b', u'c', u'a'], dtype='category')\n\nIn [24]: pd.concat([df2,df2]).index\nOut[24]: CategoricalIndex([u'a', u'a', u'b', u'b', u'c', u'a', u'a', u'a', u'b', u'b', u'c', u'a'], dtype='category')\n\n# concat of not-same categories is an error\nIn [25]: df3 = DataFrame({'A' : a, 'B' : b.astype('category',categories=list('abc')) }).set_index('B')\n\nIn [26]: df3.index.categories\nOut[26]: Index([u'a', u'b', u'c'], dtype='object')\n\nIn [27]: df2.index.categories\nOut[27]: Index([u'c', u'a', u'b'], dtype='object')\n\nIn [28]: pd.concat([df2,df3])\nTypeError: categories must match existing categories when appending\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87325343",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87325343",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87325343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzI1MzQz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-28T23:03:30Z",
    "updated_at": "2015-03-28T23:03:30Z",
    "author_association": "MEMBER",
    "body": "What about Categorical levels in a MultiIndex?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87334719",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87334719",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87334719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzM0NzE5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-29T00:34:22Z",
    "updated_at": "2015-03-29T00:34:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "good repr?\nremeniscent of a MultiIndex repr\n\n```\nIn [1]: pd.Index(pd.Categorical(list('aabca'),categories=list('cab')))\nOut[1]: \nCategoricalIndex(categories=[u'c', u'a', u'b'],\n                 codes=[1, 1, 2, 0, 1],\n                 ordered=False)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87335496",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87335496",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87335496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzM1NDk2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-29T00:49:00Z",
    "updated_at": "2015-03-29T00:49:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nIn [9]: df = DataFrame({'A' : np.arange(6), 'B' : Series(['foo']*3 + ['bar'] *3).astype('category'), 'C' : Series([1]*6).astype('category',categories=[1,2,3],ordered=True) })\n\nIn [10]: df\nOut[10]: \n   A    B  C\n0  0  foo  1\n1  1  foo  1\n2  2  foo  1\n3  3  bar  1\n4  4  bar  1\n5  5  bar  1\n\nIn [15]: df.dtypes\nOut[15]: \nA       int64\nB    category\nC    category\ndtype: object\n\nIn [11]: df.set_index(['B','C'])\nOut[11]: \n       A\nB   C   \nfoo 1  0\n    1  1\n    1  2\nbar 1  3\n    1  4\n    1  5\n\nIn [12]: df.set_index(['B','C']).index\nOut[12]: \nMultiIndex(levels=[[u'bar', u'foo'], [1, 2, 3]],\n           labels=[[1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0]],\n           names=[u'B', u'C'])\n```\n\n```\nIn [13]: df.set_index(['B','C']).index.levels[0]\nOut[13]: Index([u'bar', u'foo'], dtype='object')\n\nIn [14]: df.set_index(['B','C']).index.levels[1]\nOut[14]: Int64Index([1, 2, 3], dtype='int64')\n```\n\nSo setting a `Categorical` into a level of a `MultiIndex` coerces them ATM. A multi-index is really just a Categorical of the levels (categories) and labels (codes), with an array of these, basically an array of 1-d Categoricals, but they are not represented this way internally (they ARE created this way then separated, I imagine as the Categorical was not fully fleshed out at the time).\n\nWhat _could_ be interesting is to set the sortorder (of that level?) via a passed in `Categorical/CategoricalIndex`, which would sort in the defined order (rather than lexically).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87486143",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87486143",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87486143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDg2MTQz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-29T21:54:12Z",
    "updated_at": "2015-03-29T21:54:12Z",
    "author_association": "MEMBER",
    "body": "Would it be a good idea to implement  `slice_locs` for the subclass? I guess that should work for an ordered categorical, but not an unordered one?\n\nWhat happens when you do `.loc` indexing on a frame with a categorical index...\n1. with a list of existing labels?\n2. with a list mixing existing and new labels?\n3. for assignment to new labels?\n\nAre the results a categorical index with the same categories? New categories? A normal index? Or an exception (for case 2)?\n\nMy vote (for what it's worth) is for the strict approach -- either preserve the same categories or raise an error (no reindexing like behavior).  But this is not entirely consistent with what pandas already does.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87497482",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87497482",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87497482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDk3NDgy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-29T23:32:12Z",
    "updated_at": "2015-03-29T23:32:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "1) works\n2) all labels must be in the categories or it will raise\n3) assignment is ok, but must be in the categories\n\n```\nIn [4]: df = DataFrame({'A' : np.arange(6,dtype='int64'),\n   ...:                 'B' : Series(list('aabbca')).astype('category',categories=list('cabe')) }).set_index('B')\n\nIn [5]: df\nOut[5]: \n   A\nB   \na  0\na  1\nb  2\nb  3\nc  4\na  5\n\nIn [6]: df.index\nOut[6]: \nCategoricalIndex(categories=[u'c', u'a', u'b', u'e'],\n                 codes=[1, 1, 2, 2, 0, 1],\n                 ordered=False)\n\nIn [7]: df.loc[['a','b','e']]\nOut[7]: \n    A\nB    \na   0\na   1\na   5\nb   2\nb   3\ne NaN\n\nIn [8]: df.loc[['a','b','e','g']]\nKeyError: 'a list-indexer must only include values that are in the categories'\n```\n\nAssignment (we lose the index here, and its not trivial to fix). I'll make an issue about it.\n\n```\nIn [3]: df.loc['e'] = 20\n\nIn [4]: df\nOut[4]: \n    A\na   0\na   1\nb   2\nb   3\nc   4\na   5\ne  20\n```\n\nyes I think we need to allow slice semantics, will put in a follow up issue\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/87498519",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-87498519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 87498519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDk4NTE5",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-29T23:48:06Z",
    "updated_at": "2015-03-29T23:48:06Z",
    "author_association": "MEMBER",
    "body": "@jreback  OK, I think you've covered the bases here. Nice work!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/88421668",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-88421668",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 88421668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NDIxNjY4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T09:57:37Z",
    "updated_at": "2015-04-01T09:57:37Z",
    "author_association": "MEMBER",
    "body": "Finally took some time to look at this. Some feedback!\n\nSome things about the repr:\n- I am not fully sure about the repr. Now you have repr vs str:\n  \n  ```\n  In [19]: catidx = df2.index\n  \n  In [20]: catidx\n  Out[20]:\n  CategoricalIndex(categories=[u'c', u'a', u'b'],\n               codes=[1, 1, 2, 2, 0, 1],\n               ordered=False)\n  \n  In [21]: print catidx\n  CategoricalIndex([u'a', u'a', u'b', u'b', u'c', u'a'], dtype='category')\n  ```\n  \n  And I think I actually like the second more (in one view, it is more clear to me how my index looks like. But some information is missing there (the categories, the ordered)\n- Furthermore, the current repr is not eval-able. Which is kind of odd because it looks like this is the case (it is written as a code expression). This is because `CategoricalIndex` does not take a `codes` keyword. Of course the repr does not need to be eval-able, but it would be nice if it is I think (it is the case for eg MultiIndex and Int64Index)\n\nSome other things:\n- What with the other methods we have on a Categorical? Do we want to support them for a CategoricalIndex? (the `as_ordered`, 'rename_categories', ...)\n- I definitely think contains should check the values and not the categories, which is now not the case:\n  \n  ```\n  In [66]: catidx[0:3]\n  Out[66]:\n  CategoricalIndex(categories=[u'c', u'a', u'b'],\n               codes=[1, 1, 2],\n               ordered=False)\n  \n  In [67]: print catidx[0:3]\n  CategoricalIndex([u'a', u'a', u'b'], dtype='category')\n  \n  In [68]: 'c' in catidx[0:3]\n  Out[68]: True\n  ```\n- grouping on a categorical column, should this give a CategoricalIndex in the result? This is not the case at the moment:\n  \n  ```\n  In [82]: df.dtypes\n  Out[82]:\n  A       int64\n  B    category\n  dtype: object\n  \n  In [83]: df.groupby('B').mean()\n  Out[83]:\n   A\n  B\n  c  4.0\n  a  2.0\n  b  2.5\n  \n  In [84]: df.groupby('B').mean().index\n  Out[84]: Index([u'c', u'a', u'b'], dtype='object')\n  ```\n  \n  But with the categorical already in the index, it is:\n  \n  ```\n  In [88]: df2.groupby(level=0).mean()\n  Out[88]:\n   A\n  B\n  a  2.0\n  b  2.5\n  c  4.0\n  \n  In [89]: df2.groupby(level=0).mean().index\n  Out[89]:\n  CategoricalIndex(categories=[u'c', u'a', u'b'],\n               codes=[1, 2, 0],\n               ordered=False)\n  ```\n  \n  Notice this also gives another order of the result.\n- Trying to add an element with a non-existing category raises (which is indeed logical!), but it raises some different errors depending on the case:\n  \n  ```\n  In [114]: df2.loc['e'] = 6\n  TypeError: cannot append a non-category item to a CategoricalIndex\n  \n  In [115]: df2.loc['e', 'A'] = 6\n  ValueError: unsafe appending to index of type CategoricalIndex with a key e\n  ```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/88447883",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-88447883",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 88447883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NDQ3ODgz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T11:40:51Z",
    "updated_at": "2015-04-01T11:40:51Z",
    "author_association": "MEMBER",
    "body": "Some more:\n- The default for the CategoricalIndex is `ordered=False` (just the same as categorical itself), but min/max seems to work:\n  \n  ```\n  In [165]: catidx = pd.CategoricalIndex(list('aabbca'), categories=['c', 'a', 'b'\n  ])\n  \n  In [166]: catidx\n  Out[166]:\n  CategoricalIndex(categories=[u'c', u'a', u'b'],\n               codes=[1, 1, 2, 2, 0, 1],\n               ordered=False)\n  \n  In [167]: catidx.min()\n  Out[167]: 'a'\n  \n  In [168]: catidx.values.min()\n  TypeError: Categorical is not ordered for operation min\n  you can use .as_ordered() to change the Categorical to an ordered one\n  ```\n  \n  Should this follow the behaviour of Categorical itself?\n- I get that when slicing with a list of which one of the elements is not included in the index, the most logical thing is to raise, as you did now:\n  \n  ```\n  In [198]: df2 = DataFrame({'A' : np.arange(6,dtype='int64'),'B' : Series(list('aabbca')).astype('category',categories=list('cab')) }).set_index('B')\n  \n  In [200]: df2.loc[['a','e']]\n  KeyError: 'a list-indexer must only include values that are in the categories'\n  ```\n  \n  Only, this creates yet another exception in the indexing rules. As for other types the rule as: at least one element of the list should be included in the index values, and the rest are added with NaN values. For string indices with the same frame:\n  \n  ```\n  In [201]: df3 = df2.copy()\n  In [202]: df3.index = df2.index.astype(object)\n  \n  In [203]: df3.loc[['a','e']]\n  Out[203]:\n  A\n  a   0\n  a   1\n  a   5\n  e NaN\n  ```\n  \n  The problem of course is that this would need to alter the categories of the CategoricalIndex. I see this is a problem, but I also do not really like the exception on the indexing rules.\n- Should `equals` only check for the containing elements (as the docstring says), or also check if the dtype/categories match? E.g. FloatIndex and IntIndex with equal values will return True. But for a CategoricalIndex, it also checks the categories.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/88457918",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-88457918",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 88457918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NDU3OTE4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T12:24:09Z",
    "updated_at": "2015-04-01T12:28:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche added your list to the top section.\n\nnon-controversial:\n- `min/max` are implemented at a lower level and just need some addtl checking\n- adding methods of `Categorical`, easy, just need to add a small wrapper\n- repr / make evalable, easy - I have to refactor a bit to make MultiIndex / Categorical have a Mixin I think; was avoiding this but more and more things becoming common\n- contains - yeh was on my list\n\nquestions:\n- groupby, I think the groupby as I have it is right, in that the ordering is based on the index values (and not the categories); it should of work with a cat column (have to fix that). This should be in the same order as the index (which may or not be a categorical), irrespective of the grouping column (with `level=0` of course they are the same). I think since we default `sort=True` then it should be by category order here? (as that is the order of the index, e.g. `cab`)\n- raising on a non-included list indexer `e.g. df.loc[['a','z']]`. I think it IS correct to raise. The fact that it works differently is correct. I agree this might be a bit odd to a user, but the point is that `Categoricals` are quite strict. Its like trying to index something with another type, which shouldn't work and silently just pass the error. maybe @shoyer has some commentary here.\n- `equals` has to be strict, otherwise defeats the purpose of `Categoricals`.\n\nother:\n- `is_dtype_equals`, should really be just a comparison between the `CategoricalDtype` object, but haven't really set that up / done that. Everything not in the API is by definition private, so I think its ok.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/88629153",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-88629153",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 88629153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NjI5MTUz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T20:56:40Z",
    "updated_at": "2015-04-01T20:56:40Z",
    "author_association": "MEMBER",
    "body": "I'm also not happy with the inconsistent behavior for non-included list indexers.\n\nI'm sure \"automatic reindexing\" seemed like a convenient feature at the time it was implemented, and it does make some sense, if there is only one index type. The problem is that now we have or want multiple types of indexes, some of which act very differently from a plain Index (like MultiIndex, CategoricalIndex or IntervalIndex), so automatically coercing to a new index type no longer seems like such a good idea.\n\nI do think we should keep the existing behavior in this PR for CategoricalIndex, because it's the only sane approach. Going forward, we might further deprecate and eventually remove all indexing operations that would expand the index type, breaking operations like this:\n\n```\nIn [6]: s = pd.Series(range(5))\n\nIn [7]: s.loc[[0, 2, 2.5]]\nOut[7]:\n0.0     0\n2.0     2\n2.5   NaN\ndtype: float64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89493399",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89493399",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89493399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NDkzMzk5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-04T03:26:51Z",
    "updated_at": "2015-04-04T03:26:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "repr is now consistent with other Index types.\n\nbut, the truncation is really really tricky so not there for now (I see why it hasn't been done).\n\n```\nIn [1]: df3 = DataFrame({'A' : np.arange(6),\n   ...:                                 'B' : Series(list('aabbca')).astype('category',\n   ...:                                                                     categories=list('abc'))\n   ...:                                }).set_index('B')\n\nIn [2]: df3\nOut[2]: \n   A\nB   \na  0\na  1\nb  2\nb  3\nc  4\na  5\n\nIn [3]: df3.index\nOut[3]: CategoricalIndex([u'a', u'a', u'b', u'b', u'c', u'a'], categories=[u'a', u'b', u'c'], ordered=False)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89867790",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89867790",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89867790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODY3Nzkw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-05T22:58:14Z",
    "updated_at": "2015-04-05T22:58:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, all points addressed as discussed above, here are the highlites:\n\n```\nIn [2]: df = DataFrame({'A' : np.arange(6),\n   ...:                 'B' : Series(list('aabbca')).astype('category',categories=list('cabe'))})    \n\nIn [3]: df\nOut[3]: \n   A  B\n0  0  a\n1  1  a\n2  2  b\n3  3  b\n4  4  c\n5  5  a\n\nIn [4]: df.dtypes\nOut[4]: \nA       int64\nB    category\ndtype: object\n\n# groupby does the same for a category column / index\nIn [5]: df.groupby('B').sum()\nOut[5]: \n    A\nB    \nc   4\na   6\nb   5\ne NaN\n\n# new string output (and repr)\nIn [6]: df.groupby('B').sum().index\nOut[6]: \nCategoricalIndex([u'c', u'a', u'b', u'e'],\n                 categories=[u'c', u'a', u'b', u'e'],\n                 ordered=False)\n\nIn [7]: df.set_index('B').groupby(level=0).sum()\nOut[7]: \n    A\nB    \nc   4\na   6\nb   5\ne NaN\n```\n\nIndexing operations\n\n```\nIn [15]: df2 = df.set_index('B')\n\nIn [16]: df2\nOut[16]: \n   A\nB   \na  0\na  1\nb  2\nb  3\nc  4\na  5\n\nIn [17]: df2.loc[['a','b']]\nOut[17]: \n   A\nB   \na  0\na  1\na  5\nb  2\nb  3\n\nIn [19]: df2.reindex(['a','b'])\nOut[19]: \n   A\nB   \na  0\na  1\na  5\nb  2\nb  3\n\nIn [20]: df2.reindex(['a','e'])\nOut[20]: \n    A\nB    \na   0\na   1\na   5\ne NaN\n```\n\nSelecting non-categories in indexing operations (The different messages are because they are in different parts of the code); trying to be helpful here. I _could_ fix the single-indexer case to have a more Categorical specific message (its 'generic' atm).\n\n```\nIn [21]: df2.reindex(['a','d'])\nKeyError: 'a reindexing must only include values that are in the categories'\n\nIn [22]: df2.loc[['a','d']]\nKeyError: 'a list-indexer must only include values that are in the categories'\n\nIn [23]: df2.loc[['d']]\nKeyError: \"None of [['d']] are in the [index]\"\n```\n\nBig thing in wading thru some indexing code is that `df.loc[listlike]` and `df.reinde(listlike)` are de-factor equivalent, BUT, they are actually somewhat independently implemented (there is a difference though, e.g. `.reindex` would give you all-NaNs if nothing matches, while `.loc` will raise an exception).\n\nSo it of course makes sense to combine more of this (don't get me wrong they are not completely independent, but could use more code sharing).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89867998",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89867998",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89867998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODY3OTk4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-05T23:04:30Z",
    "updated_at": "2015-04-05T23:04:30Z",
    "author_association": "MEMBER",
    "body": "@jreback what is the type of `df2.reindex(['a','b']).index`? My vote is for plain `Index`, unless you're reindexing with another categorical.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89868262",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89868262",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89868262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODY4MjYy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-05T23:09:10Z",
    "updated_at": "2015-04-05T23:09:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "no, `CategoricalIndex` types are preserved always (well as much as we have tests coverage for!)\n\nWe don't normally coerce to lower? `Index` unless there is a really compelling reason (e.g. concat of a Index and a DatetimeIndex) or something.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89868789",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89868789",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89868789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODY4Nzg5",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-05T23:22:35Z",
    "updated_at": "2015-04-05T23:22:35Z",
    "author_association": "MEMBER",
    "body": "From a consistency perspective, it would be nice to ensure the following invariants:\n1. `type(df.reindex(labels).index) is type(Index(labels))`\n2. `type(df.loc[labels].index) is type(df.index)`\n\nWith the current implementation, I believe the type of the index from reindex depends on whether or not all labels were found. That sort of runtime value specific behavior leads to all sorts of hard to catch bugs.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89868986",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89868986",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89868986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODY4OTg2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-05T23:27:58Z",
    "updated_at": "2015-04-05T23:27:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "point 1: `.reindex` of a `CategoricalIndex` will be a `CategoricalIndex`, or raise.\npoint 2: is the same (e.g. as point 1)\n\n```\nIn [1]: df2 = DataFrame({'A' : np.arange(6,dtype='int64'),\n   ...:                               'B' : Series(list('aabbca')).astype('category',categories=list('cabe')) }).set_index('B')\n\nIn [3]: df2.reindex(['a','b','e'])\nOut[3]: \n    A\nB    \na   0\na   1\na   5\nb   2\nb   3\ne NaN\n\nIn [4]: df2.reindex(['a','b','e']).index\nOut[4]: \nCategoricalIndex([u'a', u'a', u'a', u'b', u'b', u'e'],\n                 categories=[u'c', u'a', u'b', u'e'],\n                 ordered=False)\n\nIn [5]: df2.reindex(['a','b','e','d']).index\nKeyError: 'a reindexing must only include values that are in the categories'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89869048",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89869048",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89869048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODY5MDQ4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-05T23:30:01Z",
    "updated_at": "2015-04-05T23:30:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it should be quite explicit that `.reindex(CategoricalIndex)` -> `Index(set_categories_with_new_labels)` and this should not be an accident, that is the point of a `Categorical` after all, very explicity categories.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89869135",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89869135",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89869135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODY5MTM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-05T23:33:15Z",
    "updated_at": "2015-04-05T23:33:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer sorry, have a bug, hold on\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/89880492",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-89880492",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 89880492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODgwNDky",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-06T01:29:27Z",
    "updated_at": "2015-04-06T01:29:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer ok, reorged the non-unique with a non-unique keyarr section (its now in Index) where it should really go, so slightly more self-contained. This allows categorical to override it in a trivial way as all indexing in Categorical is non-unique.\n\nlmk if you have additional issues.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/90899142",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-90899142",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 90899142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwODk5MTQy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-08T12:27:25Z",
    "updated_at": "2015-04-08T12:27:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok I put back to make `.reindex` always work. It will return an `Index` if needed (e.g. in the case where you are reindexing by a value not in the categories).\n\n```\nIn [2]: df = DataFrame({'A' : [20,20,2,3,4,20],\n                              'B' : Series(list('aabbca')).astype('category',categories=list('cab')) }).set_index('B')\n\nIn [3]: df\nOut[3]: \n    A\nB    \na  20\na  20\nb   2\nb   3\nc   4\na  20\n\nIn [4]: df.reindex(['a','c']).index\nOut[4]: \nCategoricalIndex([u'a', u'a', u'a', u'c'],\n                 categories=[u'c', u'a', u'b'],\n                 ordered=False)\n\nIn [5]: df.reindex(['a','d']).index\nOut[5]: Index([u'a', u'a', u'a', u'd'], dtype='object')\n\nIn [6]: df.reindex(['a','d'])      \nOut[6]: \n    A\nB    \na  20\na  20\na  20\nd NaN\n\nIn [7]: df.loc[['a','b']]\nOut[7]: \n    A\nB    \na  20\na  20\na  20\nb   2\nb   3\n\nIn [8]: df.loc[['a','d']]\nKeyError: 'a list-indexer must only include values that are in the categories'\n```\n\nKeep in mind that in general you will be getting a non-unique index, so not very useful, but will work. The `.loc` remains the same (as strict).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/90984661",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-90984661",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 90984661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwOTg0NjYx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-08T17:41:24Z",
    "updated_at": "2015-04-08T17:41:24Z",
    "author_association": "MEMBER",
    "body": "Still not really happy with this (see my comment about invariants above):\n\n```\nIn [4]: df.reindex(['a','c']).index\nOut[4]: \nCategoricalIndex([u'a', u'a', u'a', u'c'],\n                 categories=[u'c', u'a', u'b'],\n                 ordered=False)\n\nIn [5]: df.reindex(['a','d']).index\nOut[5]: Index([u'a', u'a', u'a', u'd'], dtype='object')\n```\n\nNumPy does a really nice job of ensuring that the type/dtype of results only depends on the dtype of the input variables, never runtime values. It would be nice to emulate that in pandas when practical.\n\nany thoughts from @jorisvandenbossche or anyone else reading?\n\nWhat happens if you reindex with another categorical? `df.reindex(pd.Categorical(['a','c']).index` and `df.reindex(pd.Categorical(['a','d']).index`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/90987558",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9741#issuecomment-90987558",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9741",
    "id": 90987558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwOTg3NTU4",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-08T17:54:12Z",
    "updated_at": "2015-04-08T17:54:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "What are the reasons for not raising on a `reindex` with categories outside of the original set? Is it just for consistency with  `.reindex` on other Index flavors?\n"
  }
]
