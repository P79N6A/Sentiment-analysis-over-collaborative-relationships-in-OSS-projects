[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3753497",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3753497",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3753497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTM0OTc=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T04:26:00Z",
    "updated_at": "2012-02-01T04:33:43Z",
    "author_association": "MEMBER",
    "body": "Boo. it's actually slower now. after:\n\n```\n\nIn [12]: a = np.repeat(np.arange(100), 1000)\n\nIn [13]: b = np.tile(np.arange(1000), 100)\n\nIn [14]: mindex = MultiIndex.from_arrays([a, b])\n\nIn [15]: m\nma                   matrix               merge                mlab\n%macro               matrix_power         meshgrid             mod\nmafromtxt            matrix_rank          mgrid                modf\n%magic               matshow              min                  more\nman                  max                  mindex               movavg\nmap                  maximum              minimum              mpl\nmargins              maximum_sctype       minorticks_off       msort\nmarino.py            may_share_memory     minorticks_on        multinomial\nmask_indices         mean                 min_scalar_type      multiply\nmat                  median               mintypecode          multivariate_normal\nmath                 memmap               mirr                 mv\nmatplotlib           memoryview           mkdir                mx2num\n\nIn [15]: mindex = mindex.take(np.random.permutation(np.arange(100000)))\n\nIn [16]: timeit mindex.sortlevel(0)\n10 loops, best of 3: 44 ms per loop\n```\n\nbefore:\n\n```\n\nIn [1]: a = np.repeat(np.arange(100), 1000)\n\nIn [2]: b = np.tile(np.arange(1000), 100)\n\nIn [3]: mindex = MultiIndex.from_arrays([a, b])\n\nIn [4]: mindex = mindex.take(np.random.permutation(np.arange(100000)))\n\nIn [5]: timeit mindex.sortlevel(0)\n10 loops, best of 3: 23.9 ms per loop\n```\n\nhere's the line timing:\n\nbefore (faster):\n\n```\nTimer unit: 1e-06 s\n\nFile: pandas/core/index.py\nFunction: sortlevel at line 1507\nTotal time: 0.478246 s\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n  1507                                               def sortlevel(self, level=0, ascending=True):\n  1508                                                   \"\"\"\n  1509                                                   Sort MultiIndex lexicographically by requested level\n  1510                                           \n  1511                                                   Parameters\n  1512                                                   ----------\n  1513                                                   level : int or str, default 0\n  1514                                                       If a string is given, must be a name of the level\n  1515                                                   ascending : boolean, default True\n  1516                                                       False to sort in descending order\n  1517                                           \n  1518                                                   Returns\n  1519                                                   -------\n  1520                                                   sorted_index : MultiIndex\n  1521                                                   \"\"\"\n  1522                                                   # TODO: check if lexsorted when level=0\n  1523                                           \n  1524        10           81      8.1      0.0          labels = list(self.labels)\n  1525        10          319     31.9      0.1          level = self._get_level_number(level)\n  1526        10           34      3.4      0.0          primary = labels.pop(level)\n  1527                                           \n  1528                                                   # Lexsort starts from END\n  1529        10       156646  15664.6     32.8          indexer = np.lexsort(tuple(labels[::-1]) + (primary,))\n  1530                                           \n  1531        10           22      2.2      0.0          if not ascending:\n  1532                                                       indexer = indexer[::-1]\n  1533                                           \n  1534        30         4524    150.8      0.9          new_labels = [lab.take(indexer) for lab in self.labels]\n  1535        10           14      1.4      0.0          new_index = MultiIndex(levels=self.levels, labels=new_labels,\n  1536        10       316586  31658.6     66.2                                 names=self.names, sortorder=level)\n  1537                                           \n  1538        10           20      2.0      0.0          return new_index, indexer\n```\n\nafter (slower)\n\n```\nIn [5]: %lprun -f MultiIndex.sortlevel for _ in xrange(10): mindex.sortlevel(0)\nTimer unit: 1e-06 s\n\nFile: pandas/core/index.py\nFunction: sortlevel at line 1507\nTotal time: 0.64143 s\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n  1507                                               def sortlevel(self, level=0, ascending=True):\n  1508                                                   \"\"\"\n  1509                                                   Sort MultiIndex at the requested level. The result will respect the\n  1510                                                   original ordering of the associated factor at that level.\n  1511                                           \n  1512                                                   Parameters\n  1513                                                   ----------\n  1514                                                   level : int or str, default 0\n  1515                                                       If a string is given, must be a name of the level\n  1516                                                   ascending : boolean, default True\n  1517                                                       False to sort in descending order\n  1518                                           \n  1519                                                   Returns\n  1520                                                   -------\n  1521                                                   sorted_index : MultiIndex\n  1522                                                   \"\"\"\n  1523        10          192     19.2      0.0          from pandas.core.frame import _indexer_from_factorized\n  1524                                           \n  1525        10           53      5.3      0.0          labels = list(self.labels)\n  1526                                           \n  1527        10          283     28.3      0.0          level = self._get_level_number(level)\n  1528        10           33      3.3      0.0          primary = labels.pop(level)\n  1529        10           36      3.6      0.0          indexer = _indexer_from_factorized((primary,) + tuple(labels),\n  1530        10       316850  31685.0     49.4                                             self.levshape)\n  1531        10           27      2.7      0.0          if not ascending:\n  1532                                                       indexer = indexer[::-1]\n  1533                                           \n  1534        30         8472    282.4      1.3          new_labels = [lab.take(indexer) for lab in self.labels]\n  1535                                           \n  1536        10           23      2.3      0.0          new_index = MultiIndex(levels=self.levels, labels=new_labels,\n  1537        10       315437  31543.7     49.2                                 names=self.names, sortorder=level)\n  1538                                           \n  1539        10           24      2.4      0.0          return new_index, indexer\n```\n\nhmm. most perplexing. deeper down the rabbit hole:\n\n```\n\nIn [7]: %lprun -f _indexer_from_factorized for _ in xrange(10): mindex.sortlevel(0)\nTimer unit: 1e-06 s\n\nFile: pandas/core/frame.py\nFunction: _indexer_from_factorized at line 4058\nTotal time: 0.313475 s\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n  4058                                           def _indexer_from_factorized(labels, shape):\n  4059        10           74      7.4      0.0      from pandas.core.groupby import get_group_index, _compress_group_index\n  4060                                           \n  4061        10        13780   1378.0      4.4      group_index = get_group_index(labels, shape)\n  4062        10       281747  28174.7     89.9      comp_ids, obs_ids = _compress_group_index(group_index)\n  4063        10           39      3.9      0.0      max_group = len(obs_ids)\n  4064        10        17818   1781.8      5.7      indexer, _ = lib.groupsort_indexer(comp_ids.astype('i4'), max_group)\n  4065                                           \n  4066        10           17      1.7      0.0      return indexer\n```\n\ni think the answer here is not to compress the group labels in the `sortlevel` case because they're \"more likely\" to be dense\n\nsecondly, i'm questioning again my decision to store the tuples in the MultiIndex. The take operation on the values themselves is not all that fast:\n\n```\nIn [14]: timeit mindex.values.take(indexer)\n100 loops, best of 3: 4 ms per loop\n```\n\nbut faster than the multiindex construction\n\n```\nIn [16]: timeit MultiIndex(levels=mindex.levels, labels=mindex.labels)\n100 loops, best of 3: 9.34 ms per loop\n```\n\nthus, can you please make the following modifications\n- add option to indexer method to not compress. do it in the DataFrame.sort_index case but _not_ this case. Note that you'll have to compute the `max_group` value from the SHAPE (`np.prod`)! \n- add alternate private constructor for MultiIndex-- something that takes an `'O'` array of tuples, labels, and levels. it should look like\n\n```\nindex = values.view(MultiIndex)\nindex.levels = levels\nindex.labels = labels\nindex.names = names\nreturn names\n```\n\nthen you can call\n\n```\nnew_tuples = self.values.take(indexer)\n```\n\ninside `sortlevel`\n\nrun the above benchmarks to ensure faster and then i'll merge this\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3758788",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3758788",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3758788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTg3ODg=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T13:36:23Z",
    "updated_at": "2012-02-01T13:36:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Got it. Awesome analysis.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3759528",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3759528",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3759528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTk1Mjg=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T14:29:38Z",
    "updated_at": "2012-02-01T14:29:38Z",
    "author_association": "MEMBER",
    "body": "Did the vbench catch this btw? If not maybe use my example for the vbench instead\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3759634",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3759634",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3759634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTk2MzQ=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T14:36:24Z",
    "updated_at": "2012-02-01T14:36:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Something broke in the vbench running before, results were empty. Will make sure vbench does catch it, if not existing test, then one above.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3760742",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3760742",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3760742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjA3NDI=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T15:40:30Z",
    "updated_at": "2012-02-01T15:40:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I thought I was going crazy, but i'm not: there is a failure in test_sortlevel in test_index, that fails only sometimes, probably due to the random.shuffle(tuples) producing different permutations. I'll isolate the failure; but this is not related to changes you outlined above.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3761020",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3761020",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3761020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjEwMjA=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T15:54:43Z",
    "updated_at": "2012-02-01T15:54:43Z",
    "author_association": "MEMBER",
    "body": "before or after the changes above?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3761037",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3761037",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3761037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjEwMzc=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T15:55:40Z",
    "updated_at": "2012-02-01T15:55:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Before. I think it's because         \n\nindexer = _indexer_from_factorized((primary,) + tuple(labels),\n                                           self.levshape, compress=False)\n\nif we have a permutation of the labels, we don't permute levshape accordingly\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3761069",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3761069",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3761069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjEwNjk=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T15:57:01Z",
    "updated_at": "2012-02-01T15:57:01Z",
    "author_association": "MEMBER",
    "body": "oh sorry i meant before those commits. \n\nyes that is definitely the problem. just have to do the same reordering song and dance with self.levshape as self.labels\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3761090",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3761090",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3761090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjEwOTA=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T15:58:07Z",
    "updated_at": "2012-02-01T15:58:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cool. B/c of randomness of test, it wasn't always caught. Wild goose chase. Should be closing this out soon.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3761106",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3761106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3761106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjExMDY=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T15:59:06Z",
    "updated_at": "2012-02-01T15:59:06Z",
    "author_association": "MEMBER",
    "body": "Yeah-- if the index being used were made bigger it would probably fail every time\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3761312",
    "html_url": "https://github.com/pandas-dev/pandas/pull/725#issuecomment-3761312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/725",
    "id": 3761312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjEzMTI=",
    "user": {
      "login": "adamklein",
      "id": 869232,
      "node_id": "MDQ6VXNlcjg2OTIzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamklein",
      "html_url": "https://github.com/adamklein",
      "followers_url": "https://api.github.com/users/adamklein/followers",
      "following_url": "https://api.github.com/users/adamklein/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions",
      "organizations_url": "https://api.github.com/users/adamklein/orgs",
      "repos_url": "https://api.github.com/users/adamklein/repos",
      "events_url": "https://api.github.com/users/adamklein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamklein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-01T16:08:33Z",
    "updated_at": "2012-02-01T16:08:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "still need to make sure vbench catches improvement, will let you know in a few mins\n"
  }
]
