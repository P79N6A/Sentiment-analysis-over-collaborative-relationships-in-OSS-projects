[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/31239576",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5776#issuecomment-31239576",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5776",
    "id": 31239576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjM5NTc2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-26T23:05:10Z",
    "updated_at": "2013-12-26T23:05:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\nIn [8]: np.random.seed(1234)\n\nIn [9]: x = np.random.randn(30)\n\nIn [10]: mask = pd.Series(np.random.rand(30) > .5)\n\nIn [11]: x\nOut[11]: \narray([  4.71435164e-01,  -1.19097569e+00,   1.43270697e+00,\n        -3.12651896e-01,  -7.20588733e-01,   8.87162940e-01,\n         8.59588414e-01,  -6.36523504e-01,   1.56963721e-02,\n        -2.24268495e+00,   1.15003572e+00,   9.91946022e-01,\n         9.53324128e-01,  -2.02125482e+00,  -3.34077366e-01,\n         2.11836468e-03,   4.05453412e-01,   2.89091941e-01,\n         1.32115819e+00,  -1.54690555e+00,  -2.02646325e-01,\n        -6.55969344e-01,   1.93421376e-01,   5.53438911e-01,\n         1.31815155e+00,  -4.69305285e-01,   6.75554085e-01,\n        -1.81702723e+00,  -1.83108540e-01,   1.05896919e+00])\n\nIn [12]: mask\nOut[12]: \n0      True\n1     False\n2      True\n3      True\n4     False\n5      True\n6     False\n7      True\n8     False\n9     False\n10    False\n11     True\n12     True\n13     True\n14    False\n15     True\n16    False\n17     True\n18    False\n19     True\n20     True\n21    False\n22     True\n23     True\n24     True\n25     True\n26     True\n27     True\n28    False\n29     True\ndtype: bool\n```\n\nHere are 2 workarounds\n\n```\nIn [13]: Series(x)[mask].mean()\nOut[13]: 0.095842422790904033\n\nIn [14]: x[mask.values].mean()\nOut[14]: 0.095842422790904033\n```\n\nThis doesn't work because of how numpy treats 'foreign' arrays; it basically calls getitem on each element (a) this is quite slow, (b) this _might_ work depending exactly which values are True.\n\nThis is actually a pretty odd thing to do; why is x not simply a Series as well? (I know it works in 0.12, but that is because Series is a direct sub-class of ndarray and so numpy treats it differently).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/31242678",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5776#issuecomment-31242678",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5776",
    "id": 31242678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQyNjc4",
    "user": {
      "login": "mwaskom",
      "id": 315810,
      "node_id": "MDQ6VXNlcjMxNTgxMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/315810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwaskom",
      "html_url": "https://github.com/mwaskom",
      "followers_url": "https://api.github.com/users/mwaskom/followers",
      "following_url": "https://api.github.com/users/mwaskom/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwaskom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwaskom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwaskom/subscriptions",
      "organizations_url": "https://api.github.com/users/mwaskom/orgs",
      "repos_url": "https://api.github.com/users/mwaskom/repos",
      "events_url": "https://api.github.com/users/mwaskom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwaskom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-27T01:16:33Z",
    "updated_at": "2013-12-27T01:16:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Because there are lots of way of initializing some new data (`np.zeros`, random sampling, etc.) that don't return Series objects, and sometimes it's easier to start from there and then transform the values conditional on data that is in a DataFrame before being added to it. \n\nI realize the workaround is simple, I'm just annoyed because it's going to have to be applied on an ad hoc basis each time I run into this pattern and have broken code. But I understand if it's an unavoidable/a problem on the numpy side.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/31242770",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5776#issuecomment-31242770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5776",
    "id": 31242770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQyNzcw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-27T01:20:47Z",
    "updated_at": "2013-12-27T01:20:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I always use series/data frames as it makes things simpler\nIMHO\n\nsometimes it's tricky to know how numpy treats foreign arrays as much of its access is c code so not so so easy to step thru\n\ngoing to take a look at this some more as I think it should work (could be a bug on numpy side or possibly need some access method on a series)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/31243788",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5776#issuecomment-31243788",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5776",
    "id": 31243788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQzNzg4",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-27T02:06:31Z",
    "updated_at": "2013-12-27T02:06:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the full set we need to implement are:\n\n***array_interface**\n***array_struct**\n***array**\n\nAnd I think most can just be delegated\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/31243810",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5776#issuecomment-31243810",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5776",
    "id": 31243810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQzODEw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-27T02:07:43Z",
    "updated_at": "2013-12-27T02:07:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "these r just tried in turn\nand not this particular issue\nu only need to define 1\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/31262854",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5776#issuecomment-31262854",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5776",
    "id": 31262854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjYyODU0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-27T14:49:32Z",
    "updated_at": "2013-12-27T14:49:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "so numpy does `PyArray_Check`, which ultimately calls `PyObject_TypeCheck` a python c-api on the object to determine whether the object is a subclass of the passed type (e.g. `ndarray`). I don't think this can be intercepted as it pretty much ignores any attempt to override with `__instancecheck__` and `__subclasscheck__` via a Series metaclass (though it intercepts other base types, so I know it 'works' in theory). Must be directly checking a variable defined in the c-api.\n\nI would actually say this is an interface issue from numpy side. It should just see if its duck typed (after doing the current checks), because Series certainly emulates all aspects of the array. (e.g. if should just check if `__array__` is available), not sure why it does not.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/31273333",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5776#issuecomment-31273333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5776",
    "id": 31273333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjczMzMz",
    "user": {
      "login": "mwaskom",
      "id": 315810,
      "node_id": "MDQ6VXNlcjMxNTgxMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/315810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwaskom",
      "html_url": "https://github.com/mwaskom",
      "followers_url": "https://api.github.com/users/mwaskom/followers",
      "following_url": "https://api.github.com/users/mwaskom/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwaskom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwaskom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwaskom/subscriptions",
      "organizations_url": "https://api.github.com/users/mwaskom/orgs",
      "repos_url": "https://api.github.com/users/mwaskom/repos",
      "events_url": "https://api.github.com/users/mwaskom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwaskom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-27T18:09:58Z",
    "updated_at": "2013-12-27T18:09:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok sounds very reasonable, thanks for looking into it and feel free to close \n"
  }
]
