[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/242230045",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14084#issuecomment-242230045",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14084",
    "id": 242230045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjIzMDA0NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-24T22:36:49Z",
    "updated_at": "2016-08-24T22:36:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "xref #12537 \n\nfor upsampling this would work, but how would you do downsampling? you _could_ maybe do `max/min/first/last`, but other functions like `sum/mean/var` won't work at all because its impossible to select a correct row for the non-numerics. So better to simply exclude. groupby does the same (except for `sum` which is weird because it works on strings).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/243932324",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14084#issuecomment-243932324",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14084",
    "id": 243932324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzkzMjMyNA==",
    "user": {
      "login": "rcyeh",
      "id": 149817,
      "node_id": "MDQ6VXNlcjE0OTgxNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/149817?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcyeh",
      "html_url": "https://github.com/rcyeh",
      "followers_url": "https://api.github.com/users/rcyeh/followers",
      "following_url": "https://api.github.com/users/rcyeh/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcyeh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcyeh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcyeh/subscriptions",
      "organizations_url": "https://api.github.com/users/rcyeh/orgs",
      "repos_url": "https://api.github.com/users/rcyeh/repos",
      "events_url": "https://api.github.com/users/rcyeh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcyeh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-31T23:23:29Z",
    "updated_at": "2016-08-31T23:25:09Z",
    "author_association": "NONE",
    "body": "Wow, thanks for your quick reply. I'm not sure I understand it all, but I think I will after I read it a few more times.\n\nAs a newbie, I am very surprised that a DataFrame method could ever return a different result than an index-based `DataFrame.join` of `[df[x].method() for x in df]`, where the identically-named Series method has been applied to each column of the DataFrame. I haven't used pandas enough to understand why this should be. Based on the cross-referenced issue #12537 and comment about `groupby`, I am guessing that `resample` is not the only case that will exhibit this. Is there a way I can guess when that might occur?\n\nI'd rather have an explicit NaN or a `ValueError` exception due to unsupported data type instead of a silent drop. This may be related to issues of control over the treatment of NaN. The pandas default (exclude/ignore) is usually pleasantly convenient, but there are times when I really do want NaN to propagate (and I am fine with saying to go away and use numpy). I can always explicitly drop non-numeric columns.\n\nRe-reading the documentation, I see that you're careful _not_ to encourage users to think of DataFrame as just an aligned list of Series. I need to think more about that.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/243934292",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14084#issuecomment-243934292",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14084",
    "id": 243934292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzkzNDI5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-31T23:34:57Z",
    "updated_at": "2016-08-31T23:34:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "http://pandas.pydata.org/pandas-docs/stable/groupby.html#automatic-exclusion-of-nuisance-columns\n\nthis is standard practice on groupby as well (resample is just a time based grouper)\n\nyour view is incorrect and actually non obvious\n\njoin of op on Series only makes sense if he shape of the result is consistent\n\nthink about what a resample / groupby is actually doing when reducing and it will become clear\n"
  }
]
