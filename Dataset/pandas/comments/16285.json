[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/299891551",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16285#issuecomment-299891551",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16285",
    "id": 299891551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTg5MTU1MQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-08T14:59:54Z",
    "updated_at": "2017-05-08T14:59:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, this is slow.  Note that it is much faster if the keys are wrapped in an array.\r\n```python\r\nIn [11]: %timeit [dct[k] for k in keys]\r\n10 loops, best of 3: 79.5 ms per loop\r\n\r\nIn [12]: %timeit sdct[keys]\r\n1 loop, best of 3: 645 ms per loop\r\n\r\nIn [13]: %timeit sdct[np.array(keys)]\r\n10 loops, best of 3: 65.1 ms per loop\r\n```\r\nBottleneck seems to be in [`clean_index_list`](https://github.com/pandas-dev/pandas/blob/9e57d915744623bef31170629bd1996eda3352cf/pandas/_libs/lib.pyx#L948)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/299955252",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16285#issuecomment-299955252",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16285",
    "id": 299955252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTk1NTI1Mg==",
    "user": {
      "login": "jhrmnn",
      "id": 940353,
      "node_id": "MDQ6VXNlcjk0MDM1Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jhrmnn",
      "html_url": "https://github.com/jhrmnn",
      "followers_url": "https://api.github.com/users/jhrmnn/followers",
      "following_url": "https://api.github.com/users/jhrmnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhrmnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jhrmnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhrmnn/subscriptions",
      "organizations_url": "https://api.github.com/users/jhrmnn/orgs",
      "repos_url": "https://api.github.com/users/jhrmnn/repos",
      "events_url": "https://api.github.com/users/jhrmnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jhrmnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-08T18:45:05Z",
    "updated_at": "2017-05-08T18:45:05Z",
    "author_association": "NONE",
    "body": "Ah, I see, good catch, could have tried that.\r\n\r\nThis makes it comparably faster to the comprehension. Shouldn't it be significantly faster though? I assume the comprehension is interpreted, whereas the Series lookup is one call to the C extension. Or does it boil down to efficiencies of Pandas's and C Python's hash tables?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/299996591",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16285#issuecomment-299996591",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16285",
    "id": 299996591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTk5NjU5MQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-08T21:29:53Z",
    "updated_at": "2017-05-08T21:29:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "The bulk of the time in this operation is actually in placing the new values, not the hash table lookups.  Below I skip the hash table in both cases\r\n```\r\nIn [154]: vals = list(dct.values())\r\n\r\n# python\r\nIn [157]: %timeit [vals[x] for x in keys]\r\n10 loops, best of 3: 64.4 ms per loop\r\n\r\nIn [158]: %timeit [dct[k] for k in keys]\r\n10 loops, best of 3: 80.5 ms per loop\r\n# 16.1 ms of \"overhead\"\r\n\r\n# pandas / numpy\r\nIn [160]: %timeit sdct.values.take(keys)\r\n10 loops, best of 3: 52.2 ms per loop\r\n\r\nIn [159]: In [13]: %timeit sdct[np.array(keys)]\r\n10 loops, best of 3: 62.3 ms per loop\r\n# 10.1 ms of \"overhead\"\r\n```\r\nYou are are right that these are C operations that avoid python overhead, but they are also basic python ops on optimized data structures, so not as much pickup as you might guess.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300005351",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16285#issuecomment-300005351",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16285",
    "id": 300005351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDAwNTM1MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-08T22:10:31Z",
    "updated_at": "2017-05-08T22:10:31Z",
    "author_association": "MEMBER",
    "body": "> Bottleneck seems to be in clean_index_list\r\n\r\nThis is indeed the case: \r\n\r\n```\r\nIn [29]: %timeit pd._libs.lib.clean_index_list(keys)\r\n1 loop, best of 3: 532 ms per loop\r\n```\r\n\r\n@chris-b1 do you understand the purpose of `_ensure_index` / `clean_index_list` in this case? (or @jreback ?) \r\nI mean, why is it for each item in the list checking whether it is a list? \r\nThis notion seems introduced in https://github.com/pandas-dev/pandas/commit/27e34a4daab82e51312714794db78d2b860327f8 (by then still in python), but this is for setting as axis, not gettting. If that is the only use-case, we could certainly split this off of the current `_ensure_index` so it is not used for getting.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300042353",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16285#issuecomment-300042353",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16285",
    "id": 300042353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDA0MjM1Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-09T02:16:15Z",
    "updated_at": "2017-05-09T02:16:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "so you can look at #16295, but this is actually quite subtle. you cannot simply ``np.asarray`` things, otherwise numpy converts things oddly in *some* cases. this is why ``np.array`` works above, its exactly what we do when we *can* convert it cleanly (e.g. a list of integers). "
  }
]
