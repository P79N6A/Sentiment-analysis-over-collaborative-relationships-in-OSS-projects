[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375488801",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20452#issuecomment-375488801",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20452",
    "id": 375488801,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTQ4ODgwMQ==",
    "user": {
      "login": "jonmmease",
      "id": 15064365,
      "node_id": "MDQ6VXNlcjE1MDY0MzY1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/15064365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonmmease",
      "html_url": "https://github.com/jonmmease",
      "followers_url": "https://api.github.com/users/jonmmease/followers",
      "following_url": "https://api.github.com/users/jonmmease/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonmmease/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonmmease/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonmmease/subscriptions",
      "organizations_url": "https://api.github.com/users/jonmmease/orgs",
      "repos_url": "https://api.github.com/users/jonmmease/repos",
      "events_url": "https://api.github.com/users/jonmmease/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonmmease/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T23:17:58Z",
    "updated_at": "2018-03-22T23:17:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is the expected behavior.\r\n### Rationale\r\nWhen index levels are *not* included as `on` params to `merge`, the `merge` operation drops all index levels (this is true of 0.23 and earlier).  For example, if we reset `abc` into a column in both `df1` and `df2`, and then merge on the common `abc` column, the `xy` and `num` index levels are dropped in the result.\r\n\r\n```python\r\nIn [1]: df1.reset_index('abc').merge(df2.reset_index('abc'), on='abc')\r\nOut[1]: \r\n   abc  v1   v2\r\n0    a   0  100\r\n1    a   0  200\r\n2    a   1  100\r\n3    a   1  200\r\n4    a   2  100\r\n5    a   2  200\r\n6    a   3  100\r\n7    a   3  200\r\n8    b   4  300\r\n9    b   4  400\r\n10   b   5  300\r\n11   b   5  400\r\n12   b   6  300\r\n13   b   6  400\r\n14   b   7  300\r\n15   b   7  400\r\n16   c   8  500\r\n17   c   8  600\r\n18   c   9  500\r\n19   c   9  600\r\n20   c  10  500\r\n21   c  10  600\r\n22   c  11  500\r\n23   c  11  600\r\n```\r\nNow (in 0.23), when index levels *are* included as `on` params to `merge`, the `merge` operation preserves these index levels (and only these levels) in the output. For example:\r\n\r\n```python\r\nIn[2]: df1.merge(df2, on='abc')\r\nOut[2]: \r\n     v1   v2\r\nabc         \r\na     0  100\r\na     0  200\r\na     1  100\r\na     1  200\r\na     2  100\r\na     2  200\r\na     3  100\r\na     3  200\r\nb     4  300\r\nb     4  400\r\nb     5  300\r\nb     5  400\r\nb     6  300\r\nb     6  400\r\nb     7  300\r\nb     7  400\r\nc     8  500\r\nc     8  600\r\nc     9  500\r\nc     9  600\r\nc    10  500\r\nc    10  600\r\nc    11  500\r\nc    11  600\r\n```\r\nPreserving all index levels (even those not referenced as `on` params) would be a reasonable thing to do, but doing so consistently would require a change to the legacy behavior of `merge`.\r\n\r\n### Documentation\r\nIn terms of documentation, there is a note in the sphinx docs for [Merging on a combination of columns and index levels](https://pandas-docs.github.io/pandas-docs-travis/merging.html#merging-merge-on-columns-and-levels) that says:\r\n> Note: When DataFrames are merged on a string that matches an index level in both frames, the index level is preserved as an index level in the resulting DataFrame.\r\n\r\nI think this is accurate, but it could be more explicit regarding the fate of the remaining index levels.\r\n\r\nThanks for pointing out the errant *New in version* version in the documentation! I guess this one was missed when 0.22 turned into 0.23.  \r\n\r\nCare to [contribute some changes to the documentation](https://pandas-docs.github.io/pandas-docs-travis/contributing.html#contributing-to-the-documentation) that would have helped clarify the expected behavior for you?\r\n\r\ncc @TomAugspurger @jorisvandenbossche @jreback "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375609535",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20452#issuecomment-375609535",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20452",
    "id": 375609535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYwOTUzNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T10:25:49Z",
    "updated_at": "2018-03-23T10:25:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree here with @jmmease here. ``merge`` is an SQL style merge that happens to allow level merging. What to do with a non-merged level is to drop it. I suppose you could add it as an additional level in the result, but this would not be normally very useful / intuitive. We *might* consider warning if levels are dropped though."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375684182",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20452#issuecomment-375684182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20452",
    "id": 375684182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY4NDE4Mg==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T14:32:42Z",
    "updated_at": "2018-03-23T14:45:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I think this is about whether levels of the row axis `MultiIndex` are thought of as columns or not. To me, I think of a `MultiIndex` as just another set of columns that is used as a primary key. Using `reset_index` or `set_index`, I can make levels into columns and vice-versa.  And in SQL, if I have a set of columns, and do a merge, all of the columns are preserved.  My view relates to the ideas presented in #8162.\r\n\r\nSo would we consider an option to `merge` that preserves the index columns not directly involved in the `join`? \r\n\r\nWhat @jmmease is saying is that when you do a `merge` with a `MultiIndex`, levels not included in the merge keys are dropped.  I'll attempt to make this clear in the docs."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375740803",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20452#issuecomment-375740803",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20452",
    "id": 375740803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTc0MDgwMw==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T17:25:04Z",
    "updated_at": "2018-03-23T17:25:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "So with 0.23 development, here is an interesting behavior for `join`.  \r\n```python\r\nIn [7]: df1.join(df2, on=['abc','xy'], how='inner')\r\nOut[7]:\r\n         v1   v2\r\n    num\r\na x 1     0  100\r\n    2     1  100\r\n  y 1     2  200\r\n    2     3  200\r\nb x 1     4  300\r\n    2     5  300\r\n  y 1     6  400\r\n    2     7  400\r\nc x 1     8  500\r\n    2     9  500\r\n  y 1    10  600\r\n    2    11  600\r\n\r\nIn [8]: df1.join(df2, on='xy', how='inner')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n#### Traceback omitted\r\n\r\nValueError: len(left_on) must equal the number of levels in the index of \"right\"\r\n\r\nIn [9]: df2.join(df1, on=['abc','xy'], how='inner')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n### Traceback omitted\r\n\r\nValueError: len(left_on) must equal the number of levels in the index of \"right\"\r\n\r\n```\r\nSo the first `join` (which does not work in v0.22) gives the \"correct\" result, except that the names of the index have been lost.  Isn't that a bug?\r\n\r\nThe second `join` and third join both fail.  The third one is just a reversal of which `DataFrame` is on the left versus right.\r\n\r\nSo explaining all of this behavior in the docs is a bit of a challenge.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375809075",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20452#issuecomment-375809075",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20452",
    "id": 375809075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTgwOTA3NQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T21:56:49Z",
    "updated_at": "2018-03-23T21:56:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a fix for the bug I reported in the previous comment about `join` dropping the names"
  }
]
