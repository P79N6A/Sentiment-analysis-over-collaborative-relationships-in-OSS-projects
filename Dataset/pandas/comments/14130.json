[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/243812012",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-243812012",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 243812012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzgxMjAxMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-31T16:00:00Z",
    "updated_at": "2016-08-31T16:00:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \n@sinhrks \n@wesm \n@TomAugspurger \n@shoyer \ncc @ellisonbg \ncc @tacaswell \ncc @mdboom \ncc @mwaskom\ncc @pzwang \ncc @bryevdv\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/244019231",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-244019231",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 244019231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDAxOTIzMQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-01T09:00:50Z",
    "updated_at": "2016-09-01T09:00:50Z",
    "author_association": "MEMBER",
    "body": "The way that `chartpy` does this is by having multiple implementations of their plotting method for each engine (like pandas now has for matplotlib, but less extensive).\n\nSo, AFAIK, to have something like this work, we would either have to implement in pandas also the other engines (which means: having _more_ plotting related code, not something we want?), or either expect from each engine to implement some kind of `plot_dataframe` handling the different chart types that pandas can delegate to. And I am not sure this is something that the different engines would like to do?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/244258842",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-244258842",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 244258842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDI1ODg0Mg==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-02T01:21:04Z",
    "updated_at": "2016-09-02T01:21:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "With mpl we have been working to better support pandas input natively to all of our plotting routines (the `data` kwarg, automatic index extraction, automatic label extraction).  \n\nIt is not too hard now to write dataframe aware functions that do mostly sensible things ([ex](https://stackoverflow.com/questions/39262630/pandas-plot-sharex-false-does-not-behave-as-expected/39275085#39275085))  with matplotlib.  I have a suspicion that if you started from scratch and mpl 1.5+ the mpl version of the pandas plotting code would be much shorter and clearer.\n\nMy suggestion would be to pull the current pandas plotting code out into it's own project and refactor it into functions that look like\n\n``` python\ndef some_chart_type(df, optional=backend, independent=input, *, backend=dependent, keyword=args):\n```\n\nand use that as a reference implementation of the plotting API that backends need to expose to pandas for use in the plot accessor.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/332364706",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-332364706",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 332364706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjM2NDcwNg==",
    "user": {
      "login": "dhirschfeld",
      "id": 881019,
      "node_id": "MDQ6VXNlcjg4MTAxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/881019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhirschfeld",
      "html_url": "https://github.com/dhirschfeld",
      "followers_url": "https://api.github.com/users/dhirschfeld/followers",
      "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions",
      "organizations_url": "https://api.github.com/users/dhirschfeld/orgs",
      "repos_url": "https://api.github.com/users/dhirschfeld/repos",
      "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhirschfeld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-26T23:27:52Z",
    "updated_at": "2017-09-26T23:27:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "This may also be of interest to @santosjorge"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/332882700",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-332882700",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 332882700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg4MjcwMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T15:59:10Z",
    "updated_at": "2017-09-28T15:59:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "some quick thoughts follow. Curious to hear other's.\r\n\r\n# Pandas Plotting\r\n\r\nGoal: define a system for multiple backends (matplotlib, Bokeh, Plotly, Altair\r\netc.) to take over `DataFrame.plot`.\r\n\r\n*Note* libraries can already achive this end, to an extent, with\r\n`DataFrame.pipe(func, **kwargs)`. `func` gets the `DataFrame` as the first\r\nargument and all kwargs. It's completely up to `func` what happens then. This\r\nis about the main `.plot` method, which is implemented around charts.\r\n\r\n## Overview of the implementation\r\n\r\n``DataFrame`` implements ``.plot`` as a ``AccessorProperty``. This makes `.plot`\r\ninto a namespace with various plot methods. Currently, we define\r\n\r\n    ['area', 'bar', 'barh', 'box', 'density', 'hexbin', 'hist', 'line',\r\n     'pie', 'scatter']\r\n\r\n(scatter and hexbin are DataFrame-only; the rest are also defined on `Series.plot`).\r\nFor backwards compatibility, `plot` is *also* callable, and is equivalent to `.plot.line`.\r\nThese methods call `matplotlib` axes plotting methods.\r\n\r\n## User API\r\n\r\nA user-configurable\r\n\r\n    pandas.options.plotting.backend = {'matplotlib', 'bokeh', 'altair', 'plotly', ... }\r\n    \r\nWould be the main point for users. Users would set this globally\r\n\r\n    pd.options.plotting.backend = 'bokeh'\r\n    \r\nOr use a context manager\r\n\r\n    with pd.options_context('plotting.backend', 'bokeh'):\r\n        df.plot(...)\r\n        \r\n## Backend API\r\n\r\nNow for the tough part.\r\n\r\n## Changes to Pandas\r\n\r\nWe'll refactor the current ``FramePlotMethods`` to ``MatplotlibFramePlotMethods``.\r\nWe'll make the actual  ``FramePlotMethods`` a simple shell that\r\n\r\n1. looks up the currently active backend\r\n2. calls the appropriate method on the active backend\r\n\r\nSo\r\n\r\n\r\n```python\r\nclass FramePlotMethods:\r\n    def line(self, x=None, y=None, **kwds):\r\n        backend = self.get_backend()\r\n        # _data is the DataFrame calling .plot.line\r\n        backend.line(self._data, x=x, y=y, **kwds)\r\n```\r\n\r\nAt that point, things are entirely up to the backend. The various backends would\r\nimplement their own ``FramePlotMethods`` (probably inherit from a base class in\r\npandas that raises `NotImplementedError` with a nice error message saying that\r\nthis method isn't available with this backend).\r\n\r\n## Challenges\r\n\r\n**API consistency**\r\n\r\nHow much should pandas care that backends accept similar keywords, behavior\r\nsimilarly, etc? I'm not sure. For the most part, we've simply adopted\r\nmatplotlib's terminology for everything. That's probably not appropriate for\r\neveryone. Certain methods *do* have \"recommended\" (somewhere between required\r\nand optional) keyword arguments. For example `.line` takes an `x` and `y`. It'd\r\nbe nice if backends could agree on those.\r\n\r\n**Global State**\r\n\r\nMatplotlib has the notion of a \"currently active figure\", and some plotting\r\nmethods will add to that. Is there any difference between\r\n\r\n```python\r\nwith pd.options_context('plotting.backend', 'bokeh'):\r\n    df.plot()\r\n```\r\n\r\n```python\r\nwith pd.options_context('plotting.backend', 'matplotlib'):\r\n    df.plot()\r\n    \r\n# Any difference here?\r\nwith pd.options_context('plotting.backend', 'bokeh'):\r\n    df.plot()\r\n```\r\n\r\nI don't think so (aside from the extra matplotlib plot; the bokeh plots would be\r\nidentical). It's completely up to the backend how to handle global state between\r\ncalls.\r\n\r\nFortunately for us, pandas messed this up terribly at some point, so that\r\n``Series.plot`` goes onto the currently active axes, while ``DataFrame.plot``\r\ncreates a new one. Users are used to diverging behavior in this area I guess :)\r\n\r\n**registration**\r\n\r\nI've been trying to improve pandas import time recently. Part of that involved\r\nremoving a\r\n\r\n```\r\ntry: import matplotlib\r\nexcpet ImportError: pass\r\n```\r\n\r\nPandas doesn't want to try / except each of the backends known to have an\r\nimplementation. Do we require users to ``import bokeh.pandas``, which calls a\r\n``register_backend``? That seems not great from the user's standpoint, but maybe\r\nnecessary?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/332883080",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-332883080",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 332883080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg4MzA4MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T16:00:24Z",
    "updated_at": "2017-09-28T16:00:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agreed with @tacaswell [here](https://github.com/pandas-dev/pandas/issues/14130#issuecomment-244258842) that the current implementation should be moved to the plugin system I outlined above. That would be a good test case for what other backends would need."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/332884197",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-332884197",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 332884197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg4NDE5Nw==",
    "user": {
      "login": "mwaskom",
      "id": 315810,
      "node_id": "MDQ6VXNlcjMxNTgxMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/315810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwaskom",
      "html_url": "https://github.com/mwaskom",
      "followers_url": "https://api.github.com/users/mwaskom/followers",
      "following_url": "https://api.github.com/users/mwaskom/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwaskom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwaskom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwaskom/subscriptions",
      "organizations_url": "https://api.github.com/users/mwaskom/orgs",
      "repos_url": "https://api.github.com/users/mwaskom/repos",
      "events_url": "https://api.github.com/users/mwaskom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwaskom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T16:04:07Z",
    "updated_at": "2017-09-28T16:04:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Missing from here is when to re-direct to seaborn\r\n\r\nPersonally I don't think it really makes sense to consider seaborn a \"backend\" for pandas plotting. Seaborn seems higher in the stack than pandas, relative to the other backends. Are there particular plotting functions you had in mind for delegating to?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/332886967",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-332886967",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 332886967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg4Njk2Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T16:13:53Z",
    "updated_at": "2017-09-28T16:13:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Personally I don't think it really makes sense to consider seaborn a \"backend\" for pandas plotting.\r\n\r\nAgreed for the most part. We could implement `df.plot(x, y, hue, ...)`, as an alternative to `Facetgrid(x, y, hue, data, ...)`, but not sure how worthwhile that would be.\r\n\r\n---\r\n\r\nThat brings up another point, we would want to allow backends to implement additional methods, e.g. `regplot`. We can probably support that with some getattribute magic on `FramePlotMethods`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/332888345",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-332888345",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 332888345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg4ODM0NQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T16:19:05Z",
    "updated_at": "2017-09-28T18:55:15Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger great summary! I agree with pretty much everything you write.\r\n\r\n> Pandas doesn't want to try / except each of the backends known to have an\r\nimplementation. Do we require users to import bokeh.pandas, which calls a\r\nregister_backend? That seems not great from the user's standpoint, but maybe\r\nnecessary?\r\n\r\nThere are basically three options:\r\n1. pandas tries importing other packages\r\n2. other packages import pandas, and register a plotting method\r\n3. pandas is aware of other packages, so it can define a lazy importing stub. The actual implementation can be somewhere else.\r\n\r\n1 is off the table for the reason you mention, and 2 is not attractive for the same reason (matplotlib doesn't want to import pandas, either, and needing to explicitly write `import matplotlib.pandas` is annoying).\r\n\r\nMy suggesting is that we do some variant of option 3. Some backends, e.g., matplotlib, might remain bundled in pandas for now, but in general it would be nice for backends to de-coupled. So let's define a protocol of some sort based on the value of `pandas.options.plotting.backend`.\r\n\r\nFor example, we could try importing the module giving by the string value of the backend, and then call `backend._pandas_plot_(pandas_obj)` as the equivalent to `pandas_obj.plot`. If the backend doesn't want a hard dependency on pandas, they can put their `PandasPlotMethods` subclass in a separate module that is imported inside their `_pandas_plot_` function.\r\n\r\n@mwaskom Agreed, I don't see Seaborn as a \"backend\" (and I don't think Tom does either, based on his post)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333019626",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333019626",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333019626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzAxOTYyNg==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T03:07:40Z",
    "updated_at": "2017-09-29T03:07:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Honestly, I would probably prefer to have pandas plotting retired, unless\nthere are particular plots that other libraries (Altair, seaborn, bokeh,\nMatplotlib). If there are still some special things that these other\nlibraries can't do, then it would probably be easier to just implement\nthose things in those other libraries. But it totally depends on your\nphilosophy about breaking APIs. I tend to lean towards breaking things to\ninnovate, but I understand that not all libraries can do that...\n\nOn Thu, Sep 28, 2017 at 9:19 AM, Stephan Hoyer <notifications@github.com>\nwrote:\n\n> @TomAugspurger <https://github.com/tomaugspurger> great summary! I agree\n> with pretty much everything you write.\n>\n> Pandas doesn't want to try / except each of the backends known to have an\n> implementation. Do we require users to import bokeh.pandas, which calls a\n> register_backend? That seems not great from the user's standpoint, but\n> maybe\n> necessary?\n>\n> There are basically three options:\n>\n>    1. pandas tries importing other packages\n>    2. other packages import pandas, and register a plotting method\n>    3. pandas is aware of other packages, so it can define a lazy\n>    importing stub. The actual implementation can be somewhere else.\n>\n> 1 is off the table for the reason you mention, and 2 is not attractive for\n> the same reason (matplotlib doesn't want to import pandas, either, and\n> needing to explicitly write import matplotlib.pandas is annoying).\n>\n> My suggesting is that we do some variant of option 3. Some backends, e.g.,\n> matplotlib, might remain bundled in pandas for now, but in general it would\n> be nice for backends to de-coupled. So let's define protocol of some sort\n> based on the value of pandas.options.plotting.backend.\n>\n> For example, we could try importing the module giving by the string value\n> of the backend, and then call backend._pandas_plot_(pandas_obj) as the\n> equivalent to pandas_obj.plot. If the backend doesn't want a hard\n> dependency on pandas, they can put their PandasPlotMethods subclass in a\n> separate module that is imported inside their _pandas_plot_ function.\n>\n> @mwaskom <https://github.com/mwaskom> Agreed, I don't see Seaborn as a\n> \"backend\" (and I don't Tom does either, based on his post).\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/14130#issuecomment-332888345>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABr0BpNjovscYpvKPlIu8cGuFsBSkPzks5sm8cMgaJpZM4Jxxtq>\n> .\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333029375",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333029375",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333029375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzAyOTM3NQ==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T04:41:35Z",
    "updated_at": "2017-09-29T04:41:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "The two biggest attractions to dataframe plot accessors is a) discoverability b) easy swapping of backends (if you really want them to be interchangeable, you need someone (pandas) to own the API)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333205752",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333205752",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333205752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzIwNTc1Mg==",
    "user": {
      "login": "mwaskom",
      "id": 315810,
      "node_id": "MDQ6VXNlcjMxNTgxMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/315810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwaskom",
      "html_url": "https://github.com/mwaskom",
      "followers_url": "https://api.github.com/users/mwaskom/followers",
      "following_url": "https://api.github.com/users/mwaskom/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwaskom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwaskom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwaskom/subscriptions",
      "organizations_url": "https://api.github.com/users/mwaskom/orgs",
      "repos_url": "https://api.github.com/users/mwaskom/repos",
      "events_url": "https://api.github.com/users/mwaskom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwaskom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T18:39:45Z",
    "updated_at": "2017-09-29T18:39:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If there are still some special things that these other libraries can't do, then it would probably be easier to just implement those things in those other libraries.\r\n\r\nFWIW I have been working on adding a few more \"basic\" plots to seaborn (https://github.com/mwaskom/seaborn/pull/1285), which would help fill to a \"higher-level, matplotlib-based\" hole that would otherwise open up if pandas dropped plotting altogether."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333207299",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333207299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333207299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzIwNzI5OQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T18:46:06Z",
    "updated_at": "2017-09-29T18:46:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "nice!\n\nOn Fri, Sep 29, 2017 at 11:40 AM, Michael Waskom <notifications@github.com>\nwrote:\n\n> If there are still some special things that these other libraries can't\n> do, then it would probably be easier to just implement those things in\n> those other libraries.\n>\n> FWIW I have been working on adding a few more \"basic\" plots to seaborn (\n> mwaskom/seaborn#1285 <https://github.com/mwaskom/seaborn/pull/1285>),\n> which would help fill to a \"higher-level, matplotlib-based\" hole that would\n> otherwise open up if pandas dropped plotting altogether.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333205752>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABr0OTayoQZuDCsXKr2rlBvzhZej3koks5snTmMgaJpZM4Jxxtq>\n> .\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333249480",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333249480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333249480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzI0OTQ4MA==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T22:02:32Z",
    "updated_at": "2017-09-29T22:02:32Z",
    "author_association": "NONE",
    "body": "Re: retiring pandas plotting, I definitely disagree. I am personally excited and engaged by innovation, but some conversations last week at Strata reminded me that one tool, or style, will never suit all users and use cases. Some people prioritize absolute immediacy, simple expectations, and lack of friction. They just want to do `df.plot()` and get on with their day. That's why I definitely support this idea. \r\n\r\nRegarding the decoupling: I think pandas should own the API, and if people want to do something beyond that, they should look to using the native plotting APIs. That comports with my observation that people who most want `df.plot` want it because it is frictionless and has simple, clear expectations. The value in multiple backends is that they all do the same *general* things, but offer a path to exploiting specific benefits inherent in the *returned object*s. Along those lines, (and without knowing anything yet about actual Pandas internals) I'd propose a decoupling along these lines as a starting point for discussion:\r\n\r\n```\r\n_registerers = {\r\n   \"mpl\"   : _register_mpl,\r\n   \"bokeh\" : _register_bokeh,\r\n}\r\n\r\n_registered = {}\r\n\r\ndef _register_bokeh():\r\n    try: \r\n        # Bokeh defines where its \"real\" register func lives, commits to keeping it there\r\n        from bokeh.compat import register_pandas\r\n        return register_pandas()\r\n    except Exception as e:\r\n        return None\r\n\r\ndef plot(self, *args, **kw, backend_name=\"mpl\"):\r\n    # maybe backend_name comes from global settings, or whatever, just an illustration\r\n\r\n    if backend_name not in _registerers: \r\n        raise RuntimeError(\"Unknown backend %r\" % backend_name)\r\n\r\n     backend = _registered.set_default(backend_name, _registerers[backend_name]()):\r\n     if backend is None:\r\n        raise RuntimeError(\"Error loading %r backend\" % backend_name)\r\n\r\n    backend.plot(self, *args, **kw)\r\n```\r\n\r\nPandas would own all of that. It requires a commitment from known backends to maintain the \"real\" registration function (that lives in the respective projects) in a stable place so that `register_foo` always functions, and that the object returned implements the \"Pandas plotting API\", but otherwise puts the burden of defining that function and how  it does what it does, on the individual projects. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333930565",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333930565",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333930565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzkzMDU2NQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T18:10:14Z",
    "updated_at": "2017-10-03T18:10:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "In general, it is brittle and painful to standardize architecture and extensibility around Python APIs. We have seen this many, many times in building different parts of Jupyter. The right way to do this is to build a declarative formal JSON schema that serves as the common exchange format and contract between pandas and different libraries which render visualizations. I would advocate for using Vega-Lite as that JSON schema, but that point is much less important than the bigger idea of using a JSON schema for this. Some of the benefits of this approach:\r\n\r\n* The pandas and renderer python APIs are free to evolve as needed, while keeping the JSON schema fixed.\r\n* Natural serialization format.\r\n* Opens the door for other languages to interoperate\r\n* Can build generic tools which transform that JSON data to other JSON data (vega, vega-lite, bohek, plotly)\r\n* In principle, with Jupyter's MIME-type based rendering, you could even build a completely frontend based renderer for that data.\r\n\r\nping @rgbkrk who is an advocate of \"JSON schema all the things\""
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333943893",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333943893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333943893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzk0Mzg5Mw==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T18:57:17Z",
    "updated_at": "2017-10-03T18:57:17Z",
    "author_association": "NONE",
    "body": "> The right way to do this is to build a declarative formal JSON schema that serves as the common exchange format and contract between pandas and different libraries which render visualizations.\r\n\r\nAs we have found out and finally rectified after a long time with Bokeh, \"JSON for everything\" is inordinately slow for many use cases. I'm definitely not personally interested in expending very-limited bandwidth on a JSON-only solution.  WRT to difficulties around standardizing APIs, I am not certain the specific issues with Jupyter history generalize everywhere."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333973951",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333973951",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333973951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzk3Mzk1MQ==",
    "user": {
      "login": "pzwang",
      "id": 543576,
      "node_id": "MDQ6VXNlcjU0MzU3Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/543576?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pzwang",
      "html_url": "https://github.com/pzwang",
      "followers_url": "https://api.github.com/users/pzwang/followers",
      "following_url": "https://api.github.com/users/pzwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/pzwang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pzwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pzwang/subscriptions",
      "organizations_url": "https://api.github.com/users/pzwang/orgs",
      "repos_url": "https://api.github.com/users/pzwang/repos",
      "events_url": "https://api.github.com/users/pzwang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pzwang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T20:49:36Z",
    "updated_at": "2017-10-03T20:49:36Z",
    "author_association": "NONE",
    "body": "@ellisonbg you bring up an interesting point, that if the Pandas devs want to \"own plotting\", then outputting a JSON-based visualization spec would be the most flexible and accurate approach to doing that.  However, the roundtrip through JSON-land is nontrivial - not merely from a logical mapping perspective, but also from the perspective of performance.  In the most common case, directly calling matplotlib on a large dataframe is extremely fast.  Similarly, there's no reason why Datashader or Bokeh server can't also be similarly fast on large dataframes.  However, round-tripping those datasets through an encode/decode process to JSON would be quite painful.  (And that's not even considering the use cases of e.g. GeoPandas, with tons of shape geometry data.)\r\n\r\nMy understanding is that the Pandas devs already have a plotting API on the `plot` object, namely, the `['area', 'bar', 'barh', 'box', 'density', 'hexbin', 'hist', 'line',\r\n 'pie', 'scatter']` methods, which defines their expectations of the API that the plotting backends must adhere to.  At that point, it's on the viz library developers to properly implement those functions.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333976251",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333976251",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333976251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzk3NjI1MQ==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T20:57:49Z",
    "updated_at": "2017-10-03T20:57:49Z",
    "author_association": "MEMBER",
    "body": "> However, round-tripping those datasets through an encode/decode process to JSON would be quite painful. (And that's not even considering the use cases of e.g. GeoPandas, with tons of shape geometry data.)\r\n\r\nI spoke with @bryevdv about this at some length during the Strata conference. There would be a great benefit to standardizing on a flexible binary zero-copy protocol for moving data (and column types) from pandas to JS libraries. Apache Arrow is the obvious candidate for this task, as we can already emit Arrow binary streams from Python and receive them in JavaScript (though what's been implemented on the JS side as far as glue with other frameworks is very limited at the moment). We have some other invested parties who may be able to assist with some of the development work to make this easy for us to do (@trxcllnt, @lmeyerov, and others)\r\n\r\nThe Arrow metadata is designed to accommodate user-defined types, so we could conceivably (with a bit of elbow grease) embed the geo data in an Arrow table column and send that as a first-class citizen.\r\n\r\nI am not sure what all would be required from here to make this work seamlessly, but to have a list of requirements and next steps would be useful and give the community a chance to get to work."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333976420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333976420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333976420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzk3NjQyMA==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T20:58:22Z",
    "updated_at": "2017-10-03T20:58:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry I wasn't clear - I would keep the data separate and only specify the\nvisual encodings, marks, etc in the JSON. The actual data transfer could be\ndone with either arrow or full pandas data frames. The rendering libraries\ncould deal with the combination of JSON viz spec + DataFrame\n\nOn Tue, Oct 3, 2017 at 1:50 PM, Peter Wang <notifications@github.com> wrote:\n\n> @ellisonbg <https://github.com/ellisonbg> you bring up an interesting\n> point, that if the Pandas devs want to \"own plotting\", then outputting a\n> JSON-based visualization spec would be the most flexible and accurate\n> approach to doing that. However, the roundtrip through JSON-land is\n> nontrivial - not merely from a logical mapping perspective, but also from\n> the perspective of performance. In the most common case, directly calling\n> matplotlib on a large dataframe is extremely fast. Similarly, there's no\n> reason why Datashader or Bokeh server can't also be similarly fast on large\n> dataframes. However, round-tripping those datasets through an encode/decode\n> process to JSON would be quite painful. (And that's not even considering\n> the use cases of e.g. GeoPandas, with tons of shape geometry data.)\n>\n> My understanding is that the Pandas devs already have a plotting API on\n> the plot object, namely, the ['area', 'bar', 'barh', 'box', 'density',\n> 'hexbin', 'hist', 'line', 'pie', 'scatter'] methods, which defines their\n> expectations of the API that the plotting backends must adhere to. At that\n> point, it's on the viz library developers to properly implement those\n> functions.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333973951>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABr0FhD7EDH8cy1FmxfII3mpXZ_zcwnks5sop37gaJpZM4Jxxtq>\n> .\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333976639",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333976639",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333976639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzk3NjYzOQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T20:59:12Z",
    "updated_at": "2017-10-03T21:01:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "To both Brians -- I may surprise you. I'd generally say that I'm a fan of format specifications. Versioned, specified in a manner that someone could write an implementation of the spec and convert it to other formats. At least in Jupyter, we need to be able to work solely with JSON because of the notebook format and messaging spec being a JSON based protocol (\\*). My primary care for specifications is to be able to support more than one language, which means being able to plot in non-python environments. I'd be more than happy if there were agreed upon binary format (even with [arrow](https://github.com/graphistry/arrow) we can work with it on a web based frontend or serverside with node). \r\n\r\n(\\*) Caveat: kernels can send arbitrary binary blobs with messages, they're not well specced for use on the protocol though (they do get used by ipywidgets, since they intercept messages and send their own).\r\n\r\nPandas luckily can return a standardized table schema thanks to @TomAugspurger and others, so I'm pretty happy in this regard for having something interoperable that isn't tied to a particular visualization. It ticks some basic boxes for the small cases that JSON formats are totally fine for."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333984990",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333984990",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333984990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzk4NDk5MA==",
    "user": {
      "login": "trxcllnt",
      "id": 178183,
      "node_id": "MDQ6VXNlcjE3ODE4Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/178183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trxcllnt",
      "html_url": "https://github.com/trxcllnt",
      "followers_url": "https://api.github.com/users/trxcllnt/followers",
      "following_url": "https://api.github.com/users/trxcllnt/following{/other_user}",
      "gists_url": "https://api.github.com/users/trxcllnt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trxcllnt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trxcllnt/subscriptions",
      "organizations_url": "https://api.github.com/users/trxcllnt/orgs",
      "repos_url": "https://api.github.com/users/trxcllnt/repos",
      "events_url": "https://api.github.com/users/trxcllnt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trxcllnt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T21:31:58Z",
    "updated_at": "2017-10-03T21:31:58Z",
    "author_association": "NONE",
    "body": "@rgbkrk heads up, our Arrow lib is now part of the official [Apache/Arrow](https://github.com/apache/arrow/tree/master/js) project. The package name on npm will stay the same, intending to release 0.1.3 in the next few days 🎉 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/333985598",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-333985598",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 333985598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzk4NTU5OA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T21:34:40Z",
    "updated_at": "2017-10-03T21:34:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "niiiiice"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/334231486",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-334231486",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 334231486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDIzMTQ4Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-04T17:34:21Z",
    "updated_at": "2017-10-04T17:34:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've started a (super hacky) version of this over at https://github.com/pandas-dev/pandas/compare/master...TomAugspurger:plotting-plugin\r\n\r\nFor engine authors, there's a base class where you can override the various `.line`, `.scatter`, etc, and a function `register_engine` to make pandas aware of your implementation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/334283702",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-334283702",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 334283702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDI4MzcwMg==",
    "user": {
      "login": "rs2",
      "id": 4407787,
      "node_id": "MDQ6VXNlcjQ0MDc3ODc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4407787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rs2",
      "html_url": "https://github.com/rs2",
      "followers_url": "https://api.github.com/users/rs2/followers",
      "following_url": "https://api.github.com/users/rs2/following{/other_user}",
      "gists_url": "https://api.github.com/users/rs2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rs2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rs2/subscriptions",
      "organizations_url": "https://api.github.com/users/rs2/orgs",
      "repos_url": "https://api.github.com/users/rs2/repos",
      "events_url": "https://api.github.com/users/rs2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rs2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-04T20:44:17Z",
    "updated_at": "2017-10-04T20:45:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger:\r\nGiven there is `DataFrame.pipe(func, **kwargs)`, are you suggesting that each plotting library implements callbacks to produce _line_, _bar_, _scatter_ etc. plots for a given dataframe and a set of `kwargs`? This could be optimal for a number of reasons:\r\n\r\n* Keep majority of plotting code outside of `pandas`;\r\n* Core developers of each plotting library are probably more familiar with best practices of translating kwargs into plots;\r\n* `pandas` developers don't have to worry about changes in plotting libraries' APIs (e.g. there have been significant changes between `bokeh` 0.11.1 and 0.12.9).\r\n\r\nChallenges:\r\n* Get core developers' time to actually implement the callbacks."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/334286045",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-334286045",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 334286045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDI4NjA0NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-04T20:53:15Z",
    "updated_at": "2017-10-04T20:53:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rs2 yeah that sounds about right (I wouldn't call them callbacks though, and it won't be using `.pipe`).\r\n\r\nAny library wishing to take over `.plot` can subclass the `BasePlotMethods` class in https://github.com/pandas-dev/pandas/compare/master...TomAugspurger:plotting-plugin and register their implementation with pandas. When the user configures pandas to use that backend, pandas will ensure that the `.plot` call is passed through to the correct implementation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/334948314",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-334948314",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 334948314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDk0ODMxNA==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-07T16:41:49Z",
    "updated_at": "2017-10-07T16:41:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could pandas also provide some helper functions for down-selecting the data frames to just the columns of interest / doing aggregations?\r\n\r\nI think it would also make sense for the API to provide a semantic set of inputs (ex `x` and `y_list` to `plot`) to guide the implementations.\r\n\r\nCan this be py3 only so we can use required keyword arguments?\r\n\r\n@ellisonbg I don't see a big difference an python api with fixed kwargs and a json schema which embeds the function name as one of the keys.  If you need it is json format, it should be up to the plotting library to do that translation and export as json if required."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/334951764",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-334951764",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 334951764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDk1MTc2NA==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-07T17:21:10Z",
    "updated_at": "2017-10-07T17:21:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tacaswell - great question. A few things we have observed in building things like this:\r\n\r\n* Imperative Python APIs tend to be leaky and end up with edge cases that are implicitly defined by behavior of a particular implementation or documentation (or lack thereof).\r\n* Because Python doesn't have things such as public/private, interfaces and static typing (unless you are willing to jump to python 3 only!), the contracts made by Python APIs are hard to enforce and end up relying on those informal contracts of documentation and behavior. This is very different from a JSON schema which is formal and can be validated at run time (structure and types).\r\n* A Python API is a stronger constraint on both Pandas and rendering libraries from the versioning perspective. A JSON schema allows both Pandas and the underlying renderers to evolve their public API to best serve users, while still following the contract of the JSON schema. A well versioned JSON schema allows a renderer to support multiple versions of that schema in a single Python package.\r\n* Serialization. With a JSON schema, serialization is a solved problem and users can instantly serialize their visualizations to files and send them over the network - all while allowing different renderers to be used as needed. It also makes it possible to build frontend based renderers with ease.\r\n* It is easy to build a set of declarative tests and examples that renderers should be able to run. With little bit of work, tests can even be autogenerated to make it easy to follow the JSON schema.\r\n\r\nHowever, if there isn't support for a JSON schema based approach, I would love to see this be python3 only so at least the python api can be strongly typed and required kw args."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/335690279",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14130#issuecomment-335690279",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14130",
    "id": 335690279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTY5MDI3OQ==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-11T05:49:50Z",
    "updated_at": "2017-10-11T05:49:50Z",
    "author_association": "CONTRIBUTOR",
    "body": " - It is not clear to me that JSON schema based communication will be any better.  The hard part is still the semantics, names, and intentions.  We can end up with implementation specific behavior that leaks across a `boxplot` json schema just as easily as across a normal function call.  The weirdest bits of leaky API tend to be when the meaning of a value is one parameter depends on the value of another which is something that JSON can not help us with\r\n - using explicit kwargs at least gets us checks that the keys are spelled correctly.  It is not clear that we want these APIs to be deeply nested (that is the top level inputs to these should not be dicts).  The places where I would expect the most pain would be things like \"the user asked us to aggregate on a column which is not in the dataframe\" which I do not think schemas can help us with (and maybe should be a basic check that pandas does for us).  I am not sure I am ready to throw the duck-typing baby out with the bath water....\r\n - The renderer's are going to have to register with pandas, keeping around different versions and registering the correct ones based on the version of pandas installed in not hard to manage (I have managed this at my day job, it is not so bad) or to provide a version key with the registration function to pandas.\r\n - This is very specific to JSON based plotting libraries,  what you register with pandas looks something like\r\n\r\n```python\r\ndef do_boxplot(data, **kwargs):\r\n    json = build_my_json_of_boxplot_and_validate(kwargs)\r\n    return data, json\r\n```\r\n\r\n  For those of us with native python plotting libraries (well, fine me ;) ), this seems natural to restrict the json related things to the json libraries.  It also lets you deal with any schema differences between different JSON based plotting libraries in python and give libraries a chance to do any data-preprocessing before exporting.\r\n\r\n - It is not clear to me how you could do better than smoke tests without a human in the loop.\r\n\r\nFundamentally I think the two approaches are functionally equivalent (I'm less worried about static typing because I render in the same process in python so I get nice error messages rather than it rendering who knows where is a browser that happily eats all exceptions :smiling_imp: ).   Expressing the API with a schema is reasonable (and auto-generating the pandas side of the API?), but I am not convinced that the value add is worth the effort of just writing the API to begin with.\r\n\r\nIf this goes the JSON route mpl will just write functions that look like\r\n\r\n```python\r\ndef do_boxplot(data, json_kwargs):\r\n    json_kwargs = json.loads(json_kwargs)  # ok, I may be being pedantic here\r\n    return realy_do_boxplot(data, **json_kwargs)\r\n```\r\n\r\nbut it seems odd to me to run an API for python libraries to talk to each other through JSON.\r\n\r\nI am 100% on board with this being python3 only :+1: \r\n\r\nI should also be clear, I very much like JSON / JSON schema in general, I am just not convinced that it is the right thing to do in this case.\r\n\r\n@TomAugspurger Have you considered using a `SimpleNamespace` containing functions that look like `sig(data, *, k1, k2, ...)` ?  Seems nicer from the implementer side to not have to subclass something from pandas and keeps us from ever seeing any of the pandas internals of how the plot accessor is implemented."
  }
]
