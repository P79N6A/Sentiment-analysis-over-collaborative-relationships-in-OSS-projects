[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7647880",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7647880",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7647880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NDc4ODA=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T15:28:08Z",
    "updated_at": "2012-08-10T15:28:08Z",
    "author_association": "MEMBER",
    "body": "Well, the solution is not to persist the array of tuples (it is cached the first time it's constructed). I would like to improve the internals of MultiIndex-- for example the hash table footprint could be significantly improved by using a custom C tuple of ints to represent each value. If you write me the relevant data structure code and hash function I'll see what I can do in a future release (or I'll eventually do it myself)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7647893",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7647893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7647893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NDc4OTM=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T15:28:32Z",
    "updated_at": "2012-08-10T15:28:32Z",
    "author_association": "MEMBER",
    "body": "It'd also be nice to make the hashtable cutoff for large sorted indexes configurable\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7651097",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7651097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7651097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTEwOTc=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T17:24:34Z",
    "updated_at": "2012-08-10T17:30:51Z",
    "author_association": "NONE",
    "body": "I'm not worrying about persistence overhead, I'm worried about memory overhead. Obviously my computers do have more than 500 megabytes of RAM, but every experiment involves dozens of these data sets, and right now using pandas ~halves the number that I can load simultaneously (and many data sets are larger to start with). I already run out of memory before I run out of CPUs.\n\nWhat is this giant array of tuples for? Is it possible to avoid it entirely?\n\n[sorry for the truncated notification, firefox somehow decided that I was done with the comment after one sentence.]\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7651377",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7651377",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7651377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTEzNzc=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T17:34:25Z",
    "updated_at": "2012-08-10T17:34:25Z",
    "author_association": "MEMBER",
    "body": "The array of tuples is for reindexing. It's actually the PyTuple objects that are the problem-- they are keys in the hash table. What I'm saying is that if you want a hash table, it needs to contain data structures that are not python objects. I'll investigate some options to fix it; I could spend a whole 'nother year on pandas's internals improving these things, but it's hard when I have no funding and lots of other priorities\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7651408",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7651408",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7651408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTE0MDg=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T17:35:32Z",
    "updated_at": "2012-08-10T17:35:48Z",
    "author_association": "MEMBER",
    "body": "I think if you store the labels in a single C-contiguous 2D array and use `int64_t*` as the hash table key type, you'd be in business\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7652810",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7652810",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7652810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTI4MTA=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T18:30:18Z",
    "updated_at": "2012-08-10T18:30:18Z",
    "author_association": "NONE",
    "body": "Okay, right, that makes it clearer what's going on :-).\n\nI think the right abstraction here might be numpy structured dtypes, which just represent several arbitrary C objects concatenated into a single buffer? Basically the same idea as your 2D array, but it would make it easy to work with mixed-length integers if desired. (This is what I was thinking of when I mentioned in the original email that a single 64-bit array could suffice -- if you intern the labels in this case to int8, int8, int32, then each \"tuple\" is only 6 bytes.) For that matter it might be possible to pretty much generalize the Int64Index code to efficiently handle any such dtypes -- a fixed-size chunk of raw memory is a fixed-size chunk of raw memory. You'd just have to check arr.dtype.itemsize once on the way in and then everything else is the same.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7652917",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7652917",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7652917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTI5MTc=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T18:34:18Z",
    "updated_at": "2012-08-10T18:34:18Z",
    "author_association": "MEMBER",
    "body": "Yeah, I agree that's the \"right\" solution. It would be a very painful change to make just thinking about it-- for hashing I imagine you would just want to hash the bytes\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7653168",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7653168",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7653168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTMxNjg=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T18:43:29Z",
    "updated_at": "2012-08-10T18:43:29Z",
    "author_association": "NONE",
    "body": "Yeah, just a string hash. Easier than writing a new hash function for int64_t[]'s, I guess.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7655564",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7655564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7655564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTU1NjQ=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T20:21:31Z",
    "updated_at": "2012-08-10T20:21:31Z",
    "author_association": "NONE",
    "body": "...I missed the part where khash API doesn't have any way to pass ancillary data to the hash/equality functions. Like data structure size. Suck. Could use length-prefixed (pascal) strings I guess, though it would be an ugly kluge.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7655897",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7655897",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7655897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTU4OTc=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T20:36:54Z",
    "updated_at": "2012-08-10T20:36:54Z",
    "author_association": "MEMBER",
    "body": "You could make a modified version of the khash-table that does the right thing. I haven't tried yet, though\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7660189",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7660189",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7660189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NjAxODk=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T22:02:03Z",
    "updated_at": "2012-08-10T22:02:03Z",
    "author_association": "NONE",
    "body": "Well, here's a hacked khash that support hash tables of fixed-size memory buffers:\nhttps://github.com/njsmith/pandas/commits/smaller-multi-index\n\n```\ncdef kh_fixstr_t *h = kh_init_fixstr(<void *>item_size);\nkh_get_fixstr(h, <char*>&buf)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7682851",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7682851",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7682851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODI4NTE=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T03:28:42Z",
    "updated_at": "2012-08-13T03:28:42Z",
    "author_association": "MEMBER",
    "body": "Alright, very good. This work won't make upcoming 0.8.2 (which contains a load of bugfixes) but I'd like to get it done soon\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/7687447",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-7687447",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 7687447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODc0NDc=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T09:48:33Z",
    "updated_at": "2012-08-13T09:48:33Z",
    "author_association": "NONE",
    "body": "Cool. For reference, here's a thread on how to work with the \"raw memory\" behind structured dtypes in Cython:\n  https://groups.google.com/group/cython-users/browse_thread/thread/eac959af1a11dbc3\n\nSo far it sounds like you just have to use PyArray_DATA directly, but it's not too bad.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8715662",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-8715662",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 8715662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTU2NjI=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-20T03:23:47Z",
    "updated_at": "2012-09-20T03:23:47Z",
    "author_association": "MEMBER",
    "body": "Any sense of the performance impact of the user_data addition on the other hash tables?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8742017",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-8742017",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 8742017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDIwMTc=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-20T19:09:09Z",
    "updated_at": "2012-09-20T19:09:09Z",
    "author_association": "NONE",
    "body": "It should be extraordinarily small.\n\nAnalysis: memory-wise, we're adding a single pointer to each hash table. This is negligible. Speed-wise, we're passing this pointer into a number of functions, of which probably the hashing function is called most often. So, worst case, this requires for each hash that we have to (1) look up the value of the pointer, (2) push it to the stack. However, the pointer is probably already in the cache, since it's stored right next to the root pointer for the hash table, it's a trivially predictable memory access, etc. (Note that we are not _dereferencing_ the pointer, we're just reading its value from hash struct.) And pushing it to the stack is also absurdly cheap, like a few cycles. But, even this is probably too pessimistic an analysis, because for khash, all of these functions that are now taking an extra argument are short, inlineable, and the compiler can see that they never actually use this extra argument. So in practice it probably gets optimized out altogether.\n\nSo my bet is that it is literally indistinguishable from zero.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8742190",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-8742190",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 8742190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDIxOTA=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-20T19:15:08Z",
    "updated_at": "2012-09-20T19:15:08Z",
    "author_association": "NONE",
    "body": "Actually, I'm being silly -- looking at the code again, the vast majority of your hash/comparison functions are defined as macros, which literally throw away the user_data argument before the compiler even sees the code. So the performance impact really should be nil. (If you really want to be sure you could just make sure that all of the hash/comparison functions are defined as macros like this.)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61417039",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1752#issuecomment-61417039",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1752",
    "id": 61417039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDE3MDM5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T18:16:30Z",
    "updated_at": "2014-11-02T18:16:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@njsmith just noticed this issue (this is not really the same issue, but relevant). Since the indexing code as change significantly I am going to close this. Pls reopen if you have a nice example that involves memory overhead after indexing (a new issue will put it back on the radar).\n\nSee here https://github.com/pydata/pandas/issues/8456\n\nSo in 0.15.1 (releasing bug-fix next week).\n\nI was able to use this really old pickle.\n\nThe reported memory usage was completely wrong for a MultiIndex. Here's approx the usage.\n\n```\n# 0.15.0\nIn [15]: sum([ l.nbytes for l in df.index.labels ])/(1024*1024.0)\nOut[15]: 22.46484375\n\n# 0.15.1/master\nIn [2]: sum([ l.nbytes for l in df.index.labels ])/(1024*1024.0)\nOut[2]: 5.6162109375\n```\n\nand here's the reported usage (which is correct - this includes the actual by the levels as well)\n\n```\nIn [6]: df.memory_usage(index=True)\nOut[6]: \nIndex    7486690\nlle      7852032\nlhz      7852032\nMiPf     7852032\nLLPf     7852032\nRLPf     7852032\nLMPf     7852032\nRMPf     7852032\nLDFr     7852032\nRDFr     7852032\nLLFr     7852032\nRLFr     7852032\nLMFr     7852032\nRMFr     7852032\nLMCe     7852032\nRMCe     7852032\nMiCe     7852032\nMiPa     7852032\nLDCe     7852032\nRDCe     7852032\nLDPa     7852032\nRDPa     7852032\nLMOc     7852032\nRMOc     7852032\nLLTe     7852032\nRLTe     7852032\nLLOc     7852032\nRLOc     7852032\nMiOc     7852032\nA2       7852032\nHEOG     7852032\nrle      7852032\nrhz      7852032\ndtype: int64\n```\n"
  }
]
