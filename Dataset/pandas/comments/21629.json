[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400136302",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21629#issuecomment-400136302",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21629",
    "id": 400136302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzNjMwMg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T00:21:46Z",
    "updated_at": "2018-06-26T00:21:46Z",
    "author_association": "MEMBER",
    "body": "I think there's a typo in your first example. That said, what is the use case for this? Seems kind of counter-intuitive to me to have two different Index objects with the same name. You could just as easily assign that name after the concat"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400214542",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21629#issuecomment-400214542",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21629",
    "id": 400214542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDIxNDU0Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T07:51:34Z",
    "updated_at": "2018-06-26T07:51:34Z",
    "author_association": "MEMBER",
    "body": "Fixed the typo. \r\n\r\n>  what is the use case for this? Seems kind of counter-intuitive to me to have two different Index objects with the same name.\r\n\r\nThe use case can be to keep the name, if you have an identical name. There can be many reasons that for some reason the dataframes you want to concat got somehow mis-aligned.\r\n\r\nHowever, I don't know to what extent we have prior art in pandas with regard to keeping the name or not if the indexes are not identical. \r\n\r\nAt least `union` seems to keep it:\r\n\r\n```\r\nIn [24]: pd.Index(['a', 'b'], name='ID').union(pd.Index(['a', 'c'], name='ID'))\r\nOut[24]: Index(['a', 'b', 'c'], dtype='object', name='ID')\r\n```\r\n\r\nwhich seems an indication to me that `concat` could also keep the name ?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400344750",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21629#issuecomment-400344750",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21629",
    "id": 400344750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDM0NDc1MA==",
    "user": {
      "login": "pdemarti",
      "id": 3476312,
      "node_id": "MDQ6VXNlcjM0NzYzMTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3476312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pdemarti",
      "html_url": "https://github.com/pdemarti",
      "followers_url": "https://api.github.com/users/pdemarti/followers",
      "following_url": "https://api.github.com/users/pdemarti/following{/other_user}",
      "gists_url": "https://api.github.com/users/pdemarti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pdemarti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pdemarti/subscriptions",
      "organizations_url": "https://api.github.com/users/pdemarti/orgs",
      "repos_url": "https://api.github.com/users/pdemarti/repos",
      "events_url": "https://api.github.com/users/pdemarti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pdemarti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T15:07:57Z",
    "updated_at": "2018-06-26T15:07:57Z",
    "author_association": "NONE",
    "body": "Thanks for fixing the typo.\r\n\r\nThere are many use cases. For us, the most prevalent one is when we deal with large multivariate time-series.  We split them by time (the Index) for easier storage and update (typically the last few slices are most frequently updated). The columns are in the thousands, and typically their intersection is at least 99% of their union. When we concatenate these frames, we would like the name of the axis to remain.\r\n\r\nThat said, I was under the false impression that the behavior had changed in 0.23, but it is not the case (I checked many versions from 0.15.0 to 0.22.0). The reason I thought that was, in previous versions, our code was different and just building the index union by itself, then reindex all frames and then only concat (this was faster).  As @jorisvandenbossche pointed out, `index.union()` keeps the index name.\r\n\r\nWe had to change that part in response to the way 0.23 concat now handles mis-aligned non-concatenating index.  I still believe the behavior should be to retain the name of the index during concat. Either take the first one (as `index0.union(index1).union(index2)...` does) or by taking the majority name (or the single name if they are all the same and None otherwise)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/415951983",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21629#issuecomment-415951983",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21629",
    "id": 415951983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTk1MTk4Mw==",
    "user": {
      "login": "FANGOD",
      "id": 21952721,
      "node_id": "MDQ6VXNlcjIxOTUyNzIx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/21952721?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FANGOD",
      "html_url": "https://github.com/FANGOD",
      "followers_url": "https://api.github.com/users/FANGOD/followers",
      "following_url": "https://api.github.com/users/FANGOD/following{/other_user}",
      "gists_url": "https://api.github.com/users/FANGOD/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FANGOD/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FANGOD/subscriptions",
      "organizations_url": "https://api.github.com/users/FANGOD/orgs",
      "repos_url": "https://api.github.com/users/FANGOD/repos",
      "events_url": "https://api.github.com/users/FANGOD/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FANGOD/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-25T08:08:36Z",
    "updated_at": "2018-08-25T08:08:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "If the index of multiple df is different, copy the index name of the first df to the df after concat, no matter whether the index of multiple df is different or the index name is different, it is feasible.Of course, it doesn't solve the problem fundamentally. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438441110",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21629#issuecomment-438441110",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21629",
    "id": 438441110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ0MTExMA==",
    "user": {
      "login": "dsm054",
      "id": 980054,
      "node_id": "MDQ6VXNlcjk4MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/980054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsm054",
      "html_url": "https://github.com/dsm054",
      "followers_url": "https://api.github.com/users/dsm054/followers",
      "following_url": "https://api.github.com/users/dsm054/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsm054/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsm054/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsm054/subscriptions",
      "organizations_url": "https://api.github.com/users/dsm054/orgs",
      "repos_url": "https://api.github.com/users/dsm054/repos",
      "events_url": "https://api.github.com/users/dsm054/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsm054/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T21:20:06Z",
    "updated_at": "2018-11-13T21:21:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is this the same as #13475?  I was working on a PR for that one and it seems to handle this case as well."
  }
]
