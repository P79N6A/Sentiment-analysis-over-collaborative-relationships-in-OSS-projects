[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63062572",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63062572",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63062572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDYyNTcy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T13:13:10Z",
    "updated_at": "2014-11-14T13:13:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @bashtage\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63068406",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63068406",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63068406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDY4NDA2",
    "user": {
      "login": "hmgaudecker",
      "id": 158456,
      "node_id": "MDQ6VXNlcjE1ODQ1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/158456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmgaudecker",
      "html_url": "https://github.com/hmgaudecker",
      "followers_url": "https://api.github.com/users/hmgaudecker/followers",
      "following_url": "https://api.github.com/users/hmgaudecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmgaudecker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmgaudecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmgaudecker/subscriptions",
      "organizations_url": "https://api.github.com/users/hmgaudecker/orgs",
      "repos_url": "https://api.github.com/users/hmgaudecker/repos",
      "events_url": "https://api.github.com/users/hmgaudecker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmgaudecker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:06:02Z",
    "updated_at": "2014-11-14T14:06:02Z",
    "author_association": "NONE",
    "body": "There is no notion of this in Stata. You simply have numeric codes that Stata works with, if there are labels attached to them, read_stata assumes they are Categoricals. So we just have to pick a sensible default.\n\nThe current implementation of read_stata leads to an ordered categorical where the order is based on the labels (=alphabetical). This does not make any sense.\n\nTwo reasons why I think that picking and ordered categorical as the default makes sense. \n1. In my experience, the vast majority of variables in the fields Stata is most used in will be ordered.\n2. More compelling, if assuming unordered the underlying numeric codes will be lost, it is pretty clumsy to go back and find out what they are in the Stata dataset. But it should be easy to turn an ordered variable into an unordered one. [Related to this, it should also be easy to reverse the order, are there methods for these two cases or would it be easy to add them? This should pop up all the time when reading in data automatically rather than constructing it from scratch]\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63071166",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63071166",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63071166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDcxMTY2",
    "user": {
      "login": "hmgaudecker",
      "id": 158456,
      "node_id": "MDQ6VXNlcjE1ODQ1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/158456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmgaudecker",
      "html_url": "https://github.com/hmgaudecker",
      "followers_url": "https://api.github.com/users/hmgaudecker/followers",
      "following_url": "https://api.github.com/users/hmgaudecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmgaudecker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmgaudecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmgaudecker/subscriptions",
      "organizations_url": "https://api.github.com/users/hmgaudecker/orgs",
      "repos_url": "https://api.github.com/users/hmgaudecker/repos",
      "events_url": "https://api.github.com/users/hmgaudecker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmgaudecker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:28:05Z",
    "updated_at": "2014-11-14T14:28:05Z",
    "author_association": "NONE",
    "body": "Good point. You wouldn't think of labelled floats, but I guess if you call \"compress\" in Stata it can easily happen.\n\nAdd a check whether labels are exhaustive (excluding missing data), if not, just use the underlying values and emit a warning?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63071611",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63071611",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63071611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDcxNjEx",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:31:39Z",
    "updated_at": "2014-11-14T14:31:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "The current version does the correct thing IMO - return a partially labeled array, with labels `\"one\"`, `1.5`, `\"two\"`, and `2.5` (where the #s are floats).  Of course, the `codes` are always int, but this is probably the best approximation to the underlying data.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63072104",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63072104",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63072104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDcyMTA0",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:35:09Z",
    "updated_at": "2014-11-14T14:36:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The current implementation of read_stata leads to an ordered categorical where the order is based on the labels (=alphabetical). This does not make any sense.\n\nAgree that alphabetical is certainly a bad choice for a \"guessed\" order. \n\nI would think the best \"guess\" would be to use the underlying values in the Stata dta, so that a label with value 1 would be < a label with a value 2, and so on.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63072491",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63072491",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63072491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDcyNDkx",
    "user": {
      "login": "hmgaudecker",
      "id": 158456,
      "node_id": "MDQ6VXNlcjE1ODQ1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/158456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmgaudecker",
      "html_url": "https://github.com/hmgaudecker",
      "followers_url": "https://api.github.com/users/hmgaudecker/followers",
      "following_url": "https://api.github.com/users/hmgaudecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmgaudecker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmgaudecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmgaudecker/subscriptions",
      "organizations_url": "https://api.github.com/users/hmgaudecker/orgs",
      "repos_url": "https://api.github.com/users/hmgaudecker/repos",
      "events_url": "https://api.github.com/users/hmgaudecker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmgaudecker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:38:05Z",
    "updated_at": "2014-11-14T14:38:05Z",
    "author_association": "NONE",
    "body": "I don't think people would want to work with a partially labelled variable. Can you think of a use case? In Stata, you use the numeric codes anyhow and the labels are purely for display, so that would be the natural thing IMO.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63073344",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63073344",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63073344,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDczMzQ0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:43:58Z",
    "updated_at": "2014-11-14T14:43:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, so the current impl does not order Categorical, I assume let's preserve that. as its easy enough to have a user transform to an ordered Categorical if needed.\n\n```\nIn [6]: s = pd.Categorical(list('aabbcdedfab'),ordered=False)     \n\nIn [7]: s\nOut[7]: \n[a, a, b, b, c, ..., e, d, f, a, b]\nLength: 11\nCategories (6, object): [a, b, c, d, e, f]\n\nIn [8]: s.ordered\nOut[8]: False\n\nIn [9]: s = pd.Categorical(s,ordered=True)\n\nIn [10]: s\nOut[10]: \n[a, a, b, b, c, ..., e, d, f, a, b]\nLength: 11\nCategories (6, object): [a < b < c < d < e < f]\n\nIn [11]: s.ordered\nOut[11]: True\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63073397",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63073397",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63073397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDczMzk3",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:44:19Z",
    "updated_at": "2014-11-14T14:49:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't think people would want to work with a partially labelled variable. Can you think of a use case? In Stata, you use the numeric codes anyhow and the labels are purely for display, so that would be the natural thing IMO.\n\n`StataReader` and `StataWriter` have historically avoided uncommon edge cases.  \n\nThis has produced a lot of errors across a wide userbase and IMO as much as possible the code should follow the pretty well documented dta format, including strange but still (unambiguously) technically correct values.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63073494",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63073494",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63073494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDczNDk0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:44:56Z",
    "updated_at": "2014-11-14T14:44:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bashtage unless you _want_ to offer this an option when reading? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63073826",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63073826",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63073826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDczODI2",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:47:23Z",
    "updated_at": "2014-11-14T14:55:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> unless you want to offer this an option when reading?\n\nThis is how I would imagine it to be implemented\n\n``` python\npd.read_stata('my_ordered_data.dta', convert_categoricals=True, order_categoricals=True)\n```\n\nThis said, I think @hmgaudecker raised a valid point and that the information encoded in the rank of the Stata data should always be preserved in the rank of the `cat.codes` irrespective of whether the categoricals are returned with ordered or not.  \n\nPreserving this ordinal information would also allow for edge case matching where the Stata file has labeled floats so that all information -- including both the underlying float values and the value labels -- could be imported with two reads:\n\n``` python\ndf_labeled = pd.read_stata('my_labeled_floats.dta', convert_categoricals=True)\ndf_values = pd.read_stata('my_labeled_floats.dta', convert_categoricals=False)\n```\n\nI would describe the current implementation as incorrect (buggy) since it loses this ordinal information.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63075115",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63075115",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63075115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc1MTE1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:56:09Z",
    "updated_at": "2014-11-14T14:56:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "how about `order_categoricals=False` as the default. As what I gain from the above conversation is the order is 'undefined'?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63075659",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63075659",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63075659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc1NjU5",
    "user": {
      "login": "hmgaudecker",
      "id": 158456,
      "node_id": "MDQ6VXNlcjE1ODQ1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/158456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmgaudecker",
      "html_url": "https://github.com/hmgaudecker",
      "followers_url": "https://api.github.com/users/hmgaudecker/followers",
      "following_url": "https://api.github.com/users/hmgaudecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmgaudecker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmgaudecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmgaudecker/subscriptions",
      "organizations_url": "https://api.github.com/users/hmgaudecker/orgs",
      "repos_url": "https://api.github.com/users/hmgaudecker/repos",
      "events_url": "https://api.github.com/users/hmgaudecker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmgaudecker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T14:59:42Z",
    "updated_at": "2014-11-14T14:59:42Z",
    "author_association": "NONE",
    "body": "@bashtage on the partially labelled variables: I just don't think that this is a useful thing to work with in Pandas then. In Stata, you only work with numeric codes, you won't feel that they are only partially labelled except for the output. Rather then ending up with a mix of both as the default, I would leave it to the user to construct it by hand from StataReader.\n\n@jreback As long as the bijection is there, I am happy. Order is often implicit in Stata datasets.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63077682",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63077682",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63077682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc3Njgy",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:14:02Z",
    "updated_at": "2014-11-14T15:14:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Rather then ending up with a mix of both as the default, I would leave it to the user to construct it by hand from StataReader.\n\nI think the reader has to produce _something_ from a call to `read_stata` for this case - I honestly believe the highest fidelity default is to use the label for the category where there is a label, and use the Stata value when it is unlabeled.  What options are there?\n- `raise`ing, which is not a good choice since this is a valid dta file\n- refusing to convert mixed data, which is OK\n- Return a categorical with labels where available, and values where not\n\nA correct implementation of this method should be simple by augmenting the value label dictionary\n\n```\nfor value in np.setdiff1d(np.unique(stata_values), list(label_dict.keys()):\n    label_dict[value]=value\n```\n\nand then the same code can be used for fully labeled or partially labeled. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63077741",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63077741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63077741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc3NzQx",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:14:31Z",
    "updated_at": "2014-11-14T15:15:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @jreback As long as the bijection is there, I am happy. Order is often implicit in Stata datasets.\n\nI agree. \n\nI think this should get a bug label too, since I discarding ordinal information is lossy.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63078586",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63078586",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63078586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc4NTg2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:20:12Z",
    "updated_at": "2014-11-14T15:20:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bashtage @hmgaudecker are you saying that effectively stata has categories like `[1,'foo']` are possible? e.g. mixed which actually don't mean anything?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63078903",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63078903",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63078903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc4OTAz",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:22:10Z",
    "updated_at": "2014-11-14T15:22:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> are you saying that effectively stata has categories like [1,'foo'] are possible? e.g. mixed which actually don't mean anything?\n\nYou can have a Stata data file that looks like\n\n```\n1\n2\nthree\nfour\n5\nsix\n```\n\nwhich is applying three labels , `6->six`, `3->three` and `4->four`.  A \"partially\" labeled series.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63078973",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63078973",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63078973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc4OTcz",
    "user": {
      "login": "hmgaudecker",
      "id": 158456,
      "node_id": "MDQ6VXNlcjE1ODQ1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/158456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmgaudecker",
      "html_url": "https://github.com/hmgaudecker",
      "followers_url": "https://api.github.com/users/hmgaudecker/followers",
      "following_url": "https://api.github.com/users/hmgaudecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmgaudecker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmgaudecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmgaudecker/subscriptions",
      "organizations_url": "https://api.github.com/users/hmgaudecker/orgs",
      "repos_url": "https://api.github.com/users/hmgaudecker/repos",
      "events_url": "https://api.github.com/users/hmgaudecker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmgaudecker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:22:37Z",
    "updated_at": "2014-11-14T15:22:37Z",
    "author_association": "NONE",
    "body": "Stata has numeric values, which are the unit of operation for any code.\n\nThen it has labels that it uses purely for displaying output.\n\nOn Fri, Nov 14, 2014 at 9:20 AM, jreback notifications@github.com wrote:\n\n> @bashtage https://github.com/bashtage @hmgaudecker\n> https://github.com/hmgaudecker are you saying that effectively stata\n> has categories like [1,'foo'] are possible? e.g. mixed which actually\n> don't mean anything?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/pull/8816#issuecomment-63078586.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63079137",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63079137",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63079137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc5MTM3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:23:48Z",
    "updated_at": "2014-11-14T15:23:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "that seems insane. Is that actually useful? partially labels? how then do you know '1' is not a label?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63079391",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63079391",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63079391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc5Mzkx",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:25:33Z",
    "updated_at": "2014-11-14T15:27:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "> that seems insane. Is that actually useful? partially labels? how then do you know '1' is not a label?\n\nIf is is a string then it is a label, it is a number it is not.\n\nI am not claiming that these are useful - I am only claiming that they are supported and documented in the dta specification. As a result, they should be handled on a best-effort basis.\n\nThe current test suite explicitly tests this case.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63079581",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63079581",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63079581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc5NTgx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:26:43Z",
    "updated_at": "2014-11-14T15:26:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "seems \"intuitive\" to me. ok np. you can handle a partially labelled categorical however seems clear then.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63079714",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63079714",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63079714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc5NzE0",
    "user": {
      "login": "hmgaudecker",
      "id": 158456,
      "node_id": "MDQ6VXNlcjE1ODQ1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/158456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmgaudecker",
      "html_url": "https://github.com/hmgaudecker",
      "followers_url": "https://api.github.com/users/hmgaudecker/followers",
      "following_url": "https://api.github.com/users/hmgaudecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmgaudecker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmgaudecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmgaudecker/subscriptions",
      "organizations_url": "https://api.github.com/users/hmgaudecker/orgs",
      "repos_url": "https://api.github.com/users/hmgaudecker/repos",
      "events_url": "https://api.github.com/users/hmgaudecker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmgaudecker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-14T15:27:32Z",
    "updated_at": "2014-11-14T15:27:32Z",
    "author_association": "NONE",
    "body": "Well, as I said - labels are purely used for producing views, they do not\ncarry any meaning for Stata itself. Very different model, but that's how\nthings worked in the 80's, I guess.\n\nOn Fri, Nov 14, 2014 at 9:23 AM, jreback notifications@github.com wrote:\n\n> that seems insane. Is that actually useful? partially labels? how then do\n> you know '1' is not a label?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/pull/8816#issuecomment-63079137.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63234406",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63234406",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63234406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjM0NDA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-16T19:29:39Z",
    "updated_at": "2014-11-16T19:29:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think from this TL;DR thread the conclusion was to add:\n\n`pd.read_stata('my_ordered_data.dta', convert_categoricals=True, order_categoricals=True)`\n\nas addtl arguments (debate over whether the ordering should be true or false by default though).\n\nwhomever wants to do this: @PKEuS , @bashtage , @hmgaudecker  go ahead\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63244006",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63244006",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63244006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjQ0MDA2",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-16T23:01:54Z",
    "updated_at": "2014-11-16T23:01:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I took a stab but am not totally sure of how a Category works.  Does a category assign `codes` to a numeric array in ascending order (except `np.nan` which is -1)?  Or is `ordered` required for this to happen?\n\n``` python\n        if convert_categoricals and self.value_label_dict:\n            value_labels = list(compat.iterkeys(self.value_label_dict))\n            cat_converted_data = []\n            for col, label in zip(data, self.lbllist):\n                if label in value_labels:\n                    cat_data = data[col].copy().astype('category')\n                    value_label_dict = self.value_label_dict[label]\n                    categories = []\n                    for category in cat_data.cat.categories:\n                        if category in value_label_dict:\n                            categories.append(value_label_dict[category])\n                        else:\n                            categories.append(category)  # Partially labeled\n                    cat_data.cat.categories = categories\n                    cat_converted_data.append((col, cat_data))\n                else:\n                    cat_converted_data.append((col, data[col]))\n            data = DataFrame.from_items(cat_converted_data)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63250264",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63250264",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63250264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjUwMjY0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-17T01:32:12Z",
    "updated_at": "2014-11-17T01:33:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "they are both 'assigned' using `pd.factorize` (whether ordered or not)\nThis all assumes that the user does not pass in the codes.\n\n```\nIn [2]: pd.factorize(list('ddbcab'),sort=True)\nOut[2]: (array([3, 3, 1, 2, 0, 1]), array(['a', 'b', 'c', 'd'], dtype=object))\n\nIn [3]: pd.factorize(list('ddbcab'),sort=False)\nOut[3]: (array([0, 0, 1, 2, 3, 1]), array(['d', 'b', 'c', 'a'], dtype=object))\n```\n\nThe sort has to do with the codes and not the lexical order of the categories.\nnotice that they are assign in the passed order.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63469769",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8816#issuecomment-63469769",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8816",
    "id": 63469769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDY5NzY5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-18T13:23:22Z",
    "updated_at": "2014-11-18T13:23:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing in favor or #8836 \n"
  }
]
