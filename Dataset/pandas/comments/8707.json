[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61398201",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61398201",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61398201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzk4MjAx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T09:32:54Z",
    "updated_at": "2014-11-02T09:32:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "so one of the big use cases here is as the index in a series coming out of cut/qcut\neg it returns an IntervalIndex\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61399398",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61399398",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61399398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzk5Mzk4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T09:30:39Z",
    "updated_at": "2014-11-02T09:30:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "so the whole notion of boxing - eg having an underlying impl then getting s boxed scalar type out is inherent in what u r doing\n\nyou get this for free - see here \nhttps://github.com/pydata/pandas/blob/master/pandas/tseries/base.py\n\nthough prob need to strip out the box/iter stuff (and maybe some other stuff - contains)\n\ncan put in another mixin that u can use (it could live in index.py maybe BoxMixIn)\nand as long as update tseries/base.py should be good to go\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61409469",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61409469",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61409469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDA5NDY5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T14:49:24Z",
    "updated_at": "2014-11-02T14:49:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer \n\nlooks really good!\n\nInstead of cythonizing `Interval`, you can prob get away with just creating a fastpath constructor lke this: https://github.com/pydata/pandas/blob/master/pandas/tseries/period.py#L68\n\nYou are using an `_engine` of `ObjectEngine` (the default) in `IntervalIndex`. You might need to create a `IntervalIndexEngine` to handle the indexing (but not necessary for first version).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61417299",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61417299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61417299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDE3Mjk5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T18:23:34Z",
    "updated_at": "2014-11-02T18:23:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer sort of confused why `_data` materialis Intervals at ALL.\n\nyou don't need it for indexing (e.g you have left/right for that purpose).\n\nONLY on boxing do you need to do this (e.g. you need to implement the `format` methods I think).\ne.g. so displaying a frame with this as an index would materialze only a small subset of the values\n\nThink of this like `DatetimeIndex`. You have an underlying imple (e.g. an array of i8). Where you do virtually all computations. ONLY when asked (e.g. could be a selection or iteration), do you actually materialize the values. (which can be expensive I agree).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61420973",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61420973",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61420973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDIwOTcz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T19:59:24Z",
    "updated_at": "2014-11-02T19:59:24Z",
    "author_association": "MEMBER",
    "body": "@jreback Yes, not including _data at all and skipping all the standard index machinery was my original idea.\n\nBut, there are actually a few advantages to keeping that representation around (the object index):\n1. It gives us default implementations for miscellaneous index methods like is_unique (not entirely sure this is worth the trouble, though).\n2. It gives us the possibility of doing fast O(1) lookups for `Interval` objects in the index. This could make a significant difference for operations like reindexing/`get_indexer` (although, again, `np.searchsorted` is already quite fast).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61421811",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61421811",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61421811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDIxODEx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T20:20:18Z",
    "updated_at": "2014-11-02T20:23:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I disagree entirely. The whole point is that you don't need the object representation. You already have the impl in `_left/_right` which is very fast to lookup. \n\n```\nIn [18]: def f1():\n   ....:     i = pd.IntervalIndex.from_breaks(np.arange(1000))\n   ....:     iv = pd.Interval(50,51)\n   ....:     return i.get_loc(iv)\n   ....: \n\nIn [19]: %timeit f1()\n100 loops, best of 3: 6.19 ms per loop\n\nIn [20]: def f2():\n   ....:     i = pd.IntervalIndex.from_breaks(np.arange(1000))\n   ....:     iv = pd.Interval(50,51)\n   ....:     return i._left.get_loc(iv.left), i._right.get_loc(iv.right)\n   ....: \n\nIn [21]: f2()\nOut[21]: (50, 50)\n\nIn [22]: f1()    \nOut[22]: 50\n\nIn [23]: %timeit f2()\n10000 loops, best of 3: 72.3 us per loop\n```\n\ncaveat:\n\nwhat I did is naive. And not sure of the exact lookup semantics for IN an interval, but easy enough to maybe keep a 'freq' for left/right, (or can just do right-left), e.g. to find the 'natural' interval of the Index. Then you can take a number and find the left and right of it (WITHOUT using searchsorted, but indexing which is O(1)) then do a simple comparison.\n\nyou ONLY need to use search sorted I think if their is no freq. E.g. you have a bunch of non-regular intervals (but since you have left and right you can prob do a pretty good job, e.g. if you find where it is on the lft, then you know about where it is on the right). You may need a custom searchsorted type of this 'irregular' intervals.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61422107",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61422107",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61422107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDIyMTA3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T20:27:48Z",
    "updated_at": "2014-11-02T20:27:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "`unique` is easy too, something like\n\n(this is w/o boxing)\n\n```\nIn [26]: %timeit Index(zip(i._left,i._right)).unique()\n1000 loops, best of 3: 1.27 ms per loop\n```\n\nWith Boxing\n\n```\nIn [32]: %timeit [ pd.Interval(*x) for x in Index(zip(i._left,i._right)).unique() ]\n100 loops, best of 3: 2.18 ms per loop\n```\n\nremember these still bee the original construction + ._data \n\nand keeping it around has memory overhead (much more than 2x the original)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61422573",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61422573",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61422573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDIyNTcz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T20:39:24Z",
    "updated_at": "2014-11-02T20:39:24Z",
    "author_association": "MEMBER",
    "body": "@jreback OK, I will give this a try without using `_data` at all. Using a natural interval \"frequency\" is indeed an appealing idea for facilitating O(1) lookups (this is similar to the \"grid index\" I discussed in the original proposal).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61422874",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61422874",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61422874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDIyODc0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T20:47:43Z",
    "updated_at": "2014-11-02T20:51:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "haha, ok.\n\nso the freq I am talking about is between 2 Intervals and not the distance in a single interval (which is a value like the left/right). Hmm do they have to be the same? I guess for a regular interval series they do.\n\n```\nIn [40]: x = pd.IntervalIndex.from_breaks(pd.timedelta_range('1s',periods=1000,freq='s'))\n\nIn [41]: pd.Interval(pd.Timedelta('1s'),pd.Timedelta('3s'))\nOut[41]: Interval(Timedelta('0 days 00:00:01'), Timedelta('0 days 00:00:03'), closed='right')\n```\n\nhave a look at tseries.frequency.FrequencyInferer, though it this case its almost trivial\n\ne.g. `(i._right-i.left).unique()` if you have 1 value only then that s the freq\n\n```\nIn [44]: (x._right-x._left).unique()[0]\nOut[44]: Timedelta('0 days 00:00:01')\n```\n\nBTW, my point of this example is to have tests for the possible types of interval operands:\n\ninteger, float, Timedeltas come to mind, though I suppose Timestamps/Periods make sense too.\n\nhmm, then their is:\n\n`Interval('a','b')`\n\nWhich i suppose 'works', but not sure how searching this would work. Maybe only allow certain types (and the left/right of an Interval should be the same).\n\nI think CategoricalIndex is the way to the above.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61423480",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61423480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61423480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDIzNDgw",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T21:03:28Z",
    "updated_at": "2014-11-02T21:03:28Z",
    "author_association": "MEMBER",
    "body": "I think you do need both the space between intervals and the distance for single intervals to be at a constant frequency in order to be able to do fast lookups. Everything needs to be able to map to a `Int64Index` under the hood (not unlike `PeriodIndex`).\n\nI may try to get things working first for the general case and then add the optimized `freq` later, though I agree that this is a important as intervals with a constant frequency are extremely common.\n\nAlso agreed that we need tests for many types. Strings can't have a well-defined frequency, but I don't much harm in allowing their use.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61423599",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61423599",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61423599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDIzNTk5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-02T21:06:38Z",
    "updated_at": "2014-11-02T21:06:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "yup\n\nthough you don't need it to map to `Int64Index` per-se, more like you need to have the Index support certain operations, e.g. `get_loc` and subtraction (which all of the indexes do).\n\nThis Index is just a dispatcher really to the combination of the underlying indexes. Much like MultiIndex is a collection of Index objects (that is well-ordered).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61799789",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61799789",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61799789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzk5Nzg5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-05T12:26:31Z",
    "updated_at": "2014-11-05T12:26:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just do this to subtract the 2 dti's (and not so set difference). bti I would for now not allow tz's in any passed in left/right (may work though)\n\n```\nIn [8]: rng = date_range('20130101',periods=5)\n\nIn [9]: rng2 = rng+pd.to_timedelta(np.arange(5),unit='s')\n\nIn [10]: rng\nOut[10]: \n<class 'pandas.tseries.index.DatetimeIndex'>\n[2013-01-01, ..., 2013-01-05]\nLength: 5, Freq: D, Timezone: None\n\nIn [11]: rng2\nOut[11]: \n<class 'pandas.tseries.index.DatetimeIndex'>\n[2013-01-01 00:00:00, ..., 2013-01-05 00:00:04]\nLength: 5, Freq: 86401S, Timezone: None\n\nIn [12]: pd.TimedeltaIndex(rng2.values-rng.values)\nOut[12]: \n<class 'pandas.tseries.tdi.TimedeltaIndex'>\n['00:00:00', ..., '00:00:04']\nLength: 5, Freq: None\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61850038",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61850038",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61850038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxODUwMDM4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-05T17:45:49Z",
    "updated_at": "2014-11-05T17:45:49Z",
    "author_association": "MEMBER",
    "body": "@jreback you're not worried about NaT screwing things up? I suppose we might as well insist that left and right cannot have missing values, anyways.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61853925",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61853925",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61853925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxODUzOTI1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-05T18:10:37Z",
    "updated_at": "2014-11-05T18:10:37Z",
    "author_association": "MEMBER",
    "body": "Actually, turns out subtracting  `NaT` is _not_ entirely broken in numpy:\n\n```\n# wtf\nIn [9]: pd.to_datetime(['NaT']).values - pd.to_datetime(['2000-01-01']).values\nOut[9]: array([-9223372036854775808], dtype='timedelta64[ns]')\n\n# but put it in an index, and it's still NaT!\nIn [10]: pd.Index(pd.to_datetime(['NaT']).values - pd.to_datetime(['2000-01-01']).values)\nOut[10]:\n<class 'pandas.tseries.tdi.TimedeltaIndex'>\n[NaT]\nLength: 1, Freq: None\n```\n\nI am shocked!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/61869665",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-61869665",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 61869665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxODY5NjY1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-05T19:49:10Z",
    "updated_at": "2014-11-05T21:09:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "hahha\n\ntheir is a simple routine to do this\nmaybe I need a `dti.sub(dti2)`\n\nthough let me see about making this not do set difference and do subtraction on - it does make more sense\n\nmaybe\n\n`dti - dti2.values` works now \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62291853",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62291853",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62291853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjkxODUz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T05:12:30Z",
    "updated_at": "2014-11-09T05:12:30Z",
    "author_association": "MEMBER",
    "body": "OK, tests finally pass (with a few commented out) but there is still plenty more work to do. The basic indexing functionality works, at least in a series object.\n\nThe fact that array indexing with `.loc` does reindexing makes things a little awkward with `IntervalIndex` -- it means that doing array indexing will give you back a result with a different type of index:\n\n```\nIn [10]: s = pd.Series(range(4), pd.IntervalIndex.from_breaks(range(5)))\n\nIn [11]: s\nOut[11]:\n(0, 1]    0\n(1, 2]    1\n(2, 3]    2\n(3, 4]    3\ndtype: int64\n\nIn [12]: s.loc[[0.5, 1.5, 2.5, 3.5]]\nOut[12]:\n0.5    0\n1.5    1\n2.5    2\n3.5    3\ndtype: int64\n```\n\nI expect users will find this surprising, but I don't see any easy way around it short of making `.loc` no longer do reindexing (which I wouldn't be opposed to in theory, but for which the ship has long sailed).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62303416",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62303416",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62303416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzAzNDE2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T13:27:58Z",
    "updated_at": "2014-11-09T13:31:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/shoyer/pandas/commit/e881cb55f2348b0faeab86c5ce71512ec6f15202\n\nYou just need to override the methods (and implement in IntervalIndex), e.g. the `_convert_*` ones\n\nThese are dispatched by `core/indexing` \n\nYou basically do whatever you want based on the key type (e.g. scalar, list, mixed list, etc.) and then if you return not-None it will do a `.take` on what you have returned. So it unambiguous and dependent on the index type. (e.g this is how `Float64Index` and `Int64Index` can interpret floats differently (well `Int64Index`` can warn on them)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62321835",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62321835",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62321835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzIxODM1",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T22:00:47Z",
    "updated_at": "2014-11-09T22:00:47Z",
    "author_association": "MEMBER",
    "body": "@jreback Thanks for the example and PR to my fork! But wow, `_convert_list_indexer_for_mixed` is quite a kludge. I see that you introduced it for a bug fix (#6548; reminds me that I need to test `__setitem__`). I could certainly (ab)use that method, but is that really a good idea? IMO the existing behavior is more consistent with the reindexing nature of `.loc`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62322203",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62322203",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62322203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzIyMjAz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T22:09:50Z",
    "updated_at": "2014-11-09T22:09:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer Prob better to simply define `IntervalIndex.reindex` where you can directly deal with the passed values. You never want to actually return a different type of index when you are doing an indexing operation (at least I can't think of any off hand).\n\nWhen you do `s.loc[[0.5,1.5]]` (on a Series with an IntervalIndex) what are you trying to get? e.g. what is natural/logical here?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62323156",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62323156",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62323156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzIzMTU2",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T22:34:42Z",
    "updated_at": "2014-11-09T22:35:23Z",
    "author_association": "MEMBER",
    "body": "@jreback Generally I do agree. But I think it is even worse for the type of the index returned from `.loc` to depend on whether a requested value is found.\n\nTo continue my example, consider also what should happen with `s.loc[[0.5, 4.5]]`. 4.5 is not found in the index, so we will need to insert a new value. This leaves us with a few options:\n1. always return a series with a `Float64Index`\n2. always return a series with an `IntervalIndex` -- raise an exception instead of doing reindexing.\n3. return a series with an object index with mixed intervals / floats, depending on whether values are found\n4. return an `IntervalIndex`, or, if that is not possible, fall back to returning a float index.\n\nStarting from scratch, 2 would be my preferred option, but it's quite inconsistent with current (re)indexing behavior. 3 is terrible from a usability perspective, so we can reject it. I think you are suggesting 4, but that is also pretty bad, because it means user code needs a check for the type of the returned object (users won't bother until necessary, so they'll end up with bugs). This leaves option 1.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62323609",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62323609",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62323609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzIzNjA5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T22:45:58Z",
    "updated_at": "2014-11-09T22:45:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe a use-case example would help. By the way `MultiIndex` DOES currently raise when you ask for a value that doesn't exist. So I wouldn't think its a problem to raise a `KeyError`. Or you could have a concept of a 'point' Interval (that is that value), but not sure if that makes sense. \n\n(this is from 0.15.0 whatsnew, breaking changes section).\n\n```\nIn [89]: s = Series(np.arange(3,dtype='int64'),\n   ....:            index=MultiIndex.from_product([['A'],['foo','bar','baz']],\n   ....:                                          names=['one','two'])\n   ....:           ).sortlevel()\n   ....: \n\nIn [90]: s\nOut[90]: \none  two\nA    bar    1\n     baz    2\n     foo    0\ndtype: int64\n\nIn [91]: try:\n   ....:    s.loc[['D']]\n   ....: except KeyError as e:\n   ....:    print(\"KeyError: \" + str(e))\n   ....: \nKeyError: 'cannot index a multi-index axis with these keys'\n```\n\nIMHO the point of different index types is to have DIFFERENT behavior for certain use-cases (which make senses). E.g. Datetimetindex can do string lookup at partial frequencies for example. Or FloatIndex always doing slice like lookups. It makes sense. We want perfect consistency but not gonna happen :)\n\nSo I would err on the side of what makes sense (2) is just fine. The users have to be able to handle a `KeyError` when looking up in your index if the index type doesn't support it. Anything else is just too kludgy.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62324522",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62324522",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62324522,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzI0NTIy",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T23:08:05Z",
    "updated_at": "2014-11-10T00:57:03Z",
    "author_association": "MEMBER",
    "body": "@jreback Interesting that MultiIndex does not support looking up missing values with `.loc`. I think I can get behind this for IntervalIndex, too.\n\nIt would be nice to figure out how to do that in a way that does not add more special cases to `pandas.core.indexing`, though. Ideally, adding a new index type to pandas _should not_ require any indexing fixes (but obviously some scenarios are hard to anticipate).\n\nMaybe a new method like `reindex_safe` that only succeeds if the type of the index can be preserved? I suppose index types are not so important with `Index`/`Int64Index`/`Float64Index` since they have basically the same API but `IntervalIndex` is pretty different.\n\nPoint intervals do make sense, but only if `closed='both'`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62324647",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62324647",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62324647,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzI0NjQ3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T23:11:23Z",
    "updated_at": "2014-11-09T23:11:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep, their is some _special case_ support already in the indexing code (mostly I have tried to move it out the actual index classes, but some does remain esp for `MultiIndex`). So its not the `reindex` operation that 'fails' here, but before, e.g. really `get_loc` raises (or returns -1) ,then THAT signals an error.\n\nWorth having a `Point()` sub-class of `Interval`? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62324983",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62324983",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62324983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzI0OTgz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-09T23:20:43Z",
    "updated_at": "2014-11-09T23:20:43Z",
    "author_association": "MEMBER",
    "body": "> Worth having a Point() sub-class of Interval?\n\nI don't think so? Interval and IntervalIndex already need to support duck typed \"points\" aka scalar values. I don't think adding explicit points would simplify anything.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/62334678",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-62334678",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 62334678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzM0Njc4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-10T02:49:26Z",
    "updated_at": "2014-11-10T02:49:26Z",
    "author_association": "MEMBER",
    "body": "Spent some time today playing around with Cython extension types. The syntax is really not bad and these things are very fast! Initialization and comparison operations for my Cython `Interval` are roughly 5-10x faster than the Python version, so I think the trouble will be worth it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63978901",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-63978901",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 63978901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTc4OTAx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-21T14:45:06Z",
    "updated_at": "2014-11-21T14:45:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer need to have a number of test cases for sorting/ordering, as its a primary usecase (like Categoricals are), see some of the linked issues.\n\nthxs.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64002974",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-64002974",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 64002974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDAyOTc0",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-21T17:04:38Z",
    "updated_at": "2014-11-21T17:04:38Z",
    "author_association": "MEMBER",
    "body": "Yep, totally agreed. This has been on my back burner recently but I'll get back to it soon.\n\nOn Fri, Nov 21, 2014 at 6:45 AM, jreback notifications@github.com wrote:\n\n> @shoyer need to have a number of test cases for sorting/ordering, as its a primary usecase (like Categoricals are), see some of the linked issues.\n> \n> ## thxs.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/pydata/pandas/pull/8707#issuecomment-63978901\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64003327",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-64003327",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 64003327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDAzMzI3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-21T17:06:48Z",
    "updated_at": "2014-11-21T17:06:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer gr8!\n\nfyi, will get a cameo at my on on sunday at PyDataNYC:http://nbviewer.ipython.org/github/jreback/pydata2014-pandas/blob/master/notebooks/Intervals.ipynb\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64067536",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-64067536",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 64067536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDY3NTM2",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-22T03:53:09Z",
    "updated_at": "2014-11-22T03:53:09Z",
    "author_association": "MEMBER",
    "body": "I guess I'm committed then! :)\n\nOn Fri, Nov 21, 2014 at 9:07 AM, jreback notifications@github.com wrote:\n\n> @shoyer gr8!\n> \n> ## fyi, will get a cameo at my on on sunday at PyDataNYC:http://nbviewer.ipython.org/github/jreback/pydata2014-pandas/blob/master/notebooks/Intervals.ipynb\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/pydata/pandas/pull/8707#issuecomment-64003327\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/66852334",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8707#issuecomment-66852334",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8707",
    "id": 66852334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODUyMzM0",
    "user": {
      "login": "skellys",
      "id": 10122262,
      "node_id": "MDQ6VXNlcjEwMTIyMjYy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10122262?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skellys",
      "html_url": "https://github.com/skellys",
      "followers_url": "https://api.github.com/users/skellys/followers",
      "following_url": "https://api.github.com/users/skellys/following{/other_user}",
      "gists_url": "https://api.github.com/users/skellys/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skellys/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skellys/subscriptions",
      "organizations_url": "https://api.github.com/users/skellys/orgs",
      "repos_url": "https://api.github.com/users/skellys/repos",
      "events_url": "https://api.github.com/users/skellys/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skellys/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-12T23:41:18Z",
    "updated_at": "2014-12-12T23:41:18Z",
    "author_association": "NONE",
    "body": "Hi @shoyer! I built something similar to this earlier this year, and I heard about your IntervalIndex implementation from @jreback's PyData talk. I reviewed your code and played around with it for a bit and I think it's very promising! My implementation is limited to datetime intervals (tz-naive and tz-aware), but it has well-tested outer join, intersection, and union operations between IntervalIndex objects containing overlapping Intervals. In the coming weeks I'd like to contribute the features and tests I already have and ultimately adopt your implementation once it's merged. Would it be okay for me to submit PRs to your fork as I work through this?\n\nBest,\nSean\n"
  }
]
