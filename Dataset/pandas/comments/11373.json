[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149300103",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149300103",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149300103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTMwMDEwMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-19T18:06:33Z",
    "updated_at": "2015-10-19T18:06:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "we've had discussions #4036 and #11267 \n\nHere is an example which is pretty straightforward to do:\n\n```\nmi = pd.MultiIndex.from_product([list('ab'),list('AB')],names=['foo','bar'])\n\nIn [5]: s = Series(range(4),index=mi)\n\nIn [6]: s\nOut[6]: \nfoo  bar\na    A      0\n     B      1\nb    A      2\n     B      3\ndtype: int64\n```\n\nxray calls this `.sel`, see [here](http://xray.readthedocs.org/en/stable/indexing.html)\n\nHere's a quick and dirty impl\n\n```\nIn [8]: MultiIndex.__call__ = lambda self, **kwargs: tuple([ (kwargs.get(n,slice(None))) for n in self.names ])\n\nIn [9]: s.loc[s.index(foo='b',bar='B')]\nOut[9]: 3\n\nIn [10]: s.loc[s.index(foo='b')]\nOut[10]: \nfoo  bar\nb    A      2\n     B      3\ndtype: int64\n\nIn [11]: s.loc[s.index(bar='B')]\nOut[11]: \nfoo\na    1\nb    3\ndtype: int64\n\nIn [12]: s.loc[s.index(bar=['B'])]\nOut[12]: \nfoo  bar\na    B      1\nb    B      3\ndtype: int64\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149306497",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149306497",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149306497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTMwNjQ5Nw==",
    "user": {
      "login": "szaiser",
      "id": 2716511,
      "node_id": "MDQ6VXNlcjI3MTY1MTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2716511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/szaiser",
      "html_url": "https://github.com/szaiser",
      "followers_url": "https://api.github.com/users/szaiser/followers",
      "following_url": "https://api.github.com/users/szaiser/following{/other_user}",
      "gists_url": "https://api.github.com/users/szaiser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/szaiser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/szaiser/subscriptions",
      "organizations_url": "https://api.github.com/users/szaiser/orgs",
      "repos_url": "https://api.github.com/users/szaiser/repos",
      "events_url": "https://api.github.com/users/szaiser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/szaiser/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-19T18:32:40Z",
    "updated_at": "2015-10-19T18:33:09Z",
    "author_association": "NONE",
    "body": "Thank you for the quick reply. The `MultiIndex` solution you present, is a nice and quick workaround. However it has its flaws, which is why I want to thank you even more for pointing me towards xray. I might use that, however `.sel` - like functionality would be really great in Pandas, which is much more mature than xray.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149644971",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149644971",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149644971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTY0NDk3MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-20T17:46:30Z",
    "updated_at": "2015-10-20T17:46:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@BigSkylie the issues with actually using a function, and the reason am not a big fan of `.sel` (though of @shoyer !)\n\nis that this is a function call, and therefor cannot be used as an lvalue. So the second we add:\n\n`value = df.sel(....)`\n\npeople will want\n\n`df.sel() = value`\nwhich is not allowed in python.\n\nThe alternatives are allow dictionaries in `df.loc`\n\neg.\n\n`df.loc[('x' = 10, 'y' = 5}]`\n\nand/or the syntax I described above\n\n`df.loc[df.index(x=....), df.columns(y=...)]`\n\nhaving pandas 'figure out' which axis you mean via the index name is laudable and would be sovled by dict access\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149654315",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149654315",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149654315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTY1NDMxNQ==",
    "user": {
      "login": "szaiser",
      "id": 2716511,
      "node_id": "MDQ6VXNlcjI3MTY1MTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2716511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/szaiser",
      "html_url": "https://github.com/szaiser",
      "followers_url": "https://api.github.com/users/szaiser/followers",
      "following_url": "https://api.github.com/users/szaiser/following{/other_user}",
      "gists_url": "https://api.github.com/users/szaiser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/szaiser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/szaiser/subscriptions",
      "organizations_url": "https://api.github.com/users/szaiser/orgs",
      "repos_url": "https://api.github.com/users/szaiser/repos",
      "events_url": "https://api.github.com/users/szaiser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/szaiser/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-20T18:21:41Z",
    "updated_at": "2015-10-20T18:21:41Z",
    "author_association": "NONE",
    "body": "@jreback Only some minutes after my previous post, I joined the group of disappointed people who want \n\n`df.sel() = value`\n\nI now must completely agree with you, `.sel()`is not the holy grail I first thought it to be. \n\nThe syntax `df.loc[dict(x = 10, y = 5)]` (I assume that's what you meant) is as close to my request as possible. At least in Python. Is this planned for the future?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149658035",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149658035",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149658035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTY1ODAzNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-20T18:31:39Z",
    "updated_at": "2015-10-20T18:31:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@BigSkylie yes It think accepting a dict is on the roadmap, interested in implementing? (not too hard actually), as it is just a pre-processing transformation step\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149659531",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149659531",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149659531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTY1OTUzMQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-20T18:37:33Z",
    "updated_at": "2015-10-20T18:37:33Z",
    "author_association": "MEMBER",
    "body": "Well, one thing we'll need to figure out here is whether dictionary indexing refers to levels of the multi-index or column/index names. Does `df.loc[dict(x=10, y=5)]` refer to levels `x` and `y` of the multi-index along the rows, or column `x` and row `y`? Handling both cases could get messy.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149721625",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149721625",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149721625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTcyMTYyNQ==",
    "user": {
      "login": "szaiser",
      "id": 2716511,
      "node_id": "MDQ6VXNlcjI3MTY1MTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2716511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/szaiser",
      "html_url": "https://github.com/szaiser",
      "followers_url": "https://api.github.com/users/szaiser/followers",
      "following_url": "https://api.github.com/users/szaiser/following{/other_user}",
      "gists_url": "https://api.github.com/users/szaiser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/szaiser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/szaiser/subscriptions",
      "organizations_url": "https://api.github.com/users/szaiser/orgs",
      "repos_url": "https://api.github.com/users/szaiser/repos",
      "events_url": "https://api.github.com/users/szaiser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/szaiser/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-20T22:32:15Z",
    "updated_at": "2015-10-20T22:32:15Z",
    "author_association": "NONE",
    "body": "@jreback As soon as I see a Pandas conform solution, I at least will give it a try. Is making changes to `_LocationIndexer` and `_LocIndexer` in `Pandas.core.Indexing` the way to go?\n@shoyer The issue you mention seems very serious to me. The only solution I see right now is handing over a 2-tuple containing dictionaries in case of a `DataFrame` with a `MultiIndex`. Not a very clean solution, one might say.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149725844",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149725844",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149725844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTcyNTg0NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-20T22:58:10Z",
    "updated_at": "2015-10-20T22:58:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "what is a 'Pandas conform solution'?\n\nfollow how `.loc` works and and you should be able to intercept it near the top-level (yes in `_LocIndexer` or its super-class)\n\npart of the challenge is ironing out the API to make it clean semantically. So need some tests cases for  as much as possible.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/149744770",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-149744770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 149744770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTc0NDc3MA==",
    "user": {
      "login": "szaiser",
      "id": 2716511,
      "node_id": "MDQ6VXNlcjI3MTY1MTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2716511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/szaiser",
      "html_url": "https://github.com/szaiser",
      "followers_url": "https://api.github.com/users/szaiser/followers",
      "following_url": "https://api.github.com/users/szaiser/following{/other_user}",
      "gists_url": "https://api.github.com/users/szaiser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/szaiser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/szaiser/subscriptions",
      "organizations_url": "https://api.github.com/users/szaiser/orgs",
      "repos_url": "https://api.github.com/users/szaiser/repos",
      "events_url": "https://api.github.com/users/szaiser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/szaiser/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-21T00:42:56Z",
    "updated_at": "2015-10-21T00:42:56Z",
    "author_association": "NONE",
    "body": "@jreback 'Pandas conform' was meant to be related to Pandas similarly to how 'Pythonic' is related to Python. A clean solution, which keeps the user experience coherent all over Pandas.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/152376931",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-152376931",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 152376931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjM3NjkzMQ==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-30T01:37:44Z",
    "updated_at": "2015-10-30T01:37:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1, FWIW\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/321972351",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11373#issuecomment-321972351",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11373",
    "id": 321972351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTk3MjM1MQ==",
    "user": {
      "login": "LindyBalboa",
      "id": 20605205,
      "node_id": "MDQ6VXNlcjIwNjA1MjA1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20605205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LindyBalboa",
      "html_url": "https://github.com/LindyBalboa",
      "followers_url": "https://api.github.com/users/LindyBalboa/followers",
      "following_url": "https://api.github.com/users/LindyBalboa/following{/other_user}",
      "gists_url": "https://api.github.com/users/LindyBalboa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LindyBalboa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LindyBalboa/subscriptions",
      "organizations_url": "https://api.github.com/users/LindyBalboa/orgs",
      "repos_url": "https://api.github.com/users/LindyBalboa/repos",
      "events_url": "https://api.github.com/users/LindyBalboa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LindyBalboa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-12T10:22:09Z",
    "updated_at": "2017-08-12T10:22:18Z",
    "author_association": "NONE",
    "body": "+1 on interest for such a feature\r\nI believe issue #4036 is also related to this. \r\n\r\nThe index/column question came up. Why not just handle it in the standard .loc way?\r\n\r\ndf.loc[{index1:'A', index2: slice(None), index3: [1,3,5], index4: range(1,10,2)}, :]\r\n\r\nI tried taking a look at the code to see how .loc[] actually works, but it is above my head. If anyone would care to give me a roadmap about the inner workings, I would be more than willing to take another look.\r\n\r\n---\r\n\r\nHere is my current solution, by way of chance. It is a bit hacky, but it works perfectly for my needs. My experimental data has files with titles of the form `\"Material_seriesX_measurementY_parmZ\"`. I import a single column from each file. Basically all of the index information is stored in the one column name. I then use an expression like \r\n\r\n```\r\ndf.filter(regex=\"(Matx|Maty)_series{2,5}_measurement.*_ParmZ\", axis=1)\r\n```\r\n"
  }
]
