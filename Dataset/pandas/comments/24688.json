[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/452867366",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-452867366",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 452867366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjg2NzM2Ng==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T21:25:04Z",
    "updated_at": "2019-01-09T21:25:04Z",
    "author_association": "MEMBER",
    "body": "Worth a discussion for sure. Taking into consideration my own workflow as a bias I've never intentionally found a use case for tuples as a label, though we get a surprising amount of issues pop up as a result so I suspect others do have workflows where this is valid\r\n\r\nWe just added a `.flatten` method to MultiIndex recently which intentionally collapses the levels into tuples which would need consideration here"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/452881595",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-452881595",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 452881595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjg4MTU5NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T21:50:41Z",
    "updated_at": "2019-01-09T21:50:41Z",
    "author_association": "MEMBER",
    "body": "As long as we have MultiIndex, I am not sure it is possible to get rid of all cases where you might end up with tuples.\r\n\r\nFirst, when referring to a MultiIndex key, you need to use a tuple. Eg the `set_index` you mentioned. Even when disallowing tuples as column names, you would still need to use a tuple to refer to a column in case of MultiIndexed columns. So disallowing tuples will not solve the ambiguity problem here I think.\r\n\r\nAnother aspect is that some operations will give you tuples. `flatten` is one (recent) example that @WillAyd gave. But eg setting a column as the index (again with MultiIndexed columns), will give you an index level with a tuple as the name:\r\n\r\n```\r\nIn [2]: df = pd.DataFrame(np.random.randn(5, 4), columns=pd.MultiIndex.from_product([['A', 'B'], ['a', 'b']]))                                                                  \r\n\r\nIn [3]: df                                                                                                                                                                      \r\nOut[3]: \r\n          A                   B          \r\n          a         b         a         b\r\n0 -0.659414  0.898374  1.378103  0.144247\r\n1  0.167956  0.625324  2.122758  0.346808\r\n2  1.282092  0.640114  0.668349 -1.614398\r\n3  1.683959  0.347517 -2.566367  0.326387\r\n4 -0.862953  0.608134 -0.405303 -0.145457\r\n\r\nIn [4]: df.set_index(('A', 'a'))                                                                                                                                                \r\nOut[4]: \r\n                  A         B          \r\n                  b         a         b\r\n(A, a)                                 \r\n-0.659414  0.898374  1.378103  0.144247\r\n 0.167956  0.625324  2.122758  0.346808\r\n 1.282092  0.640114  0.668349 -1.614398\r\n 1.683959  0.347517 -2.566367  0.326387\r\n-0.862953  0.608134 -0.405303 -0.145457\r\n```\r\n\r\nIn a simplified data model where there would be no multi-indexed columns possible, it would make sense to restrict column names eg to only strings (and disallow tuples), but in the current pandas data model, I am not sure it is possible / desirable."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/452883644",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-452883644",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 452883644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjg4MzY0NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T21:56:40Z",
    "updated_at": "2019-01-09T21:56:40Z",
    "author_association": "MEMBER",
    "body": "> Even when disallowing tuples as column names, you would still need to use a tuple to refer to a column in case of MultiIndexed columns. So disallowing tuples will not solve the ambiguity problem here I think.\r\n\r\nWouldn't this exactly solve that? Today it's potentially unclear whether a tuple used as an indexer refers to a location in a MultiIndex or one particular label that happens to be a tuple. If we disallow the latter, the ambiguity is gone, no?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/452884745",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-452884745",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 452884745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjg4NDc0NQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T22:00:15Z",
    "updated_at": "2019-01-09T22:00:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @jorisvandenbossche: First, when referring to a MultiIndex key, you need to use a tuple. Eg the set_index you mentioned. Even when disallowing tuples as column names, you would still need to use a tuple to refer to a column in case of MultiIndexed columns. So disallowing tuples will not solve the ambiguity problem here I think.\r\n\r\nThis was badly formulated on my part. Of course, the tuples would be necessary for accessing a `MultiIndex`. I was talking about the (say:) atomic unit of labels within `Index/MultiIndex`. [just saw that @WillAyd posted essentially the same while I'm writing]\r\n\r\nYour second example is intriguing and more relevant. Because with `reset_index()` it'd be back in the columns. Another thing (i.e. setting with MultiColumns) to consider deprecating for `df.set_index`, haha. ;-)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/452885844",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-452885844",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 452885844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjg4NTg0NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T22:04:04Z",
    "updated_at": "2019-01-09T22:04:04Z",
    "author_association": "MEMBER",
    "body": "The ambiguity I referred to was the one between a tuple as values vs a tuple as a single label (but indeed, for sure, the amount of ambiguous cases decreases a bit :-))\r\n\r\nWhether the tuple label is referring to a tuple key in a flat index or to a single key of multi-level columns, it is still this tuple that is conflicting with tuple as array-like (that is how I interpreted \"because one needs to check if a tuple is a valid key (both for the frame and the MI.names), and interpret it as a list-like otherwise\")"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/452886945",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-452886945",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 452886945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjg4Njk0NQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T22:07:31Z",
    "updated_at": "2019-01-09T22:07:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\n> @hvetinari: Your second example is intriguing and more relevant. Because with reset_index() it'd be back in the columns.\r\n\r\nOn second thought, it may be sufficient to allow tuples in `MultiIndex.names` (which is not an `Index`), and when doing something like `.reset_index` the tuple would only be allowed to be inserted back into the columns if those are (as in your example) *already a `MultiIndex`* (with the right number of levels)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/452888453",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-452888453",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 452888453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjg4ODQ1Mw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T22:12:33Z",
    "updated_at": "2019-01-09T22:13:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @jorisvandenbossche: Whether the tuple label is referring to a tuple key in a flat index or to a single key of multi-level columns, it is still this tuple that is conflicting with tuple as array-like (that is how I interpreted \"because one needs to check if a tuple is a valid key (both for the frame and the MI.names), and interpret it as a list-like otherwise\")\r\n\r\nYou're right there as well, those cases would still need extra logic (for a good reason, as you showed in the example).\r\n\r\nBut I'm guessing the vast majority of bugs are due to your first point (i.e. using \"tuple-as-single-label\"), so that would still be a substantial improvement/simplification (considering the complexity that would be needed to not just crash and burn as the OP illustrated)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/452889672",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-452889672",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 452889672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjg4OTY3Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T22:16:31Z",
    "updated_at": "2019-01-09T22:16:58Z",
    "author_association": "MEMBER",
    "body": "> But I'm guessing the vast majority of bugs are due to your first point (i.e. using \"tuple-as-single-label\"),\r\n\r\nYes, if we are speaking about bugs and not ambiguities/complexities in the API, you are probably right. \r\nAlthough I think the example bugs you showed is a quite esoteric use case (a MultiIndex where one level contains tuples). I think a more common case is a single flat index / columns that contains tuples (i.e. flattened MI), which might be a bit less buggy (just a guess)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/453764132",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-453764132",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 453764132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzc2NDEzMg==",
    "user": {
      "login": "summonholmes",
      "id": 17303881,
      "node_id": "MDQ6VXNlcjE3MzAzODgx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17303881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/summonholmes",
      "html_url": "https://github.com/summonholmes",
      "followers_url": "https://api.github.com/users/summonholmes/followers",
      "following_url": "https://api.github.com/users/summonholmes/following{/other_user}",
      "gists_url": "https://api.github.com/users/summonholmes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/summonholmes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/summonholmes/subscriptions",
      "organizations_url": "https://api.github.com/users/summonholmes/orgs",
      "repos_url": "https://api.github.com/users/summonholmes/repos",
      "events_url": "https://api.github.com/users/summonholmes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/summonholmes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-12T17:11:34Z",
    "updated_at": "2019-01-12T17:22:17Z",
    "author_association": "NONE",
    "body": "> > But I'm guessing the vast majority of bugs are due to your first point (i.e. using \"tuple-as-single-label\"),\r\n> \r\n> Yes, if we are speaking about bugs and not ambiguities/complexities in the API, you are probably right.\r\n> Although I think the example bugs you showed is a quite esoteric use case (a MultiIndex where one level contains tuples). I think a more common case is a single flat index / columns that contains tuples (i.e. flattened MI), which might be a bit less buggy (just a guess).\r\n\r\nThat's exactly what I have in my bug report and PR.  I'd welcome this suggestion.\r\n\r\nSee the following code:\r\n```python\r\nfrom pandas._libs import lib\r\n\r\nlib.clean_index_list([(('Turtle', 'Chicken'), (('Man', 'Monkey'), 'Dog'))])[0]\r\n```\r\nOutput:\r\n`\r\narray([[['Turtle', 'Chicken'],\r\n        [('Man', 'Monkey'), 'Dog']]], dtype=object)\r\n`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/454592301",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-454592301",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 454592301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDU5MjMwMQ==",
    "user": {
      "login": "simonjayhawkins",
      "id": 13159005,
      "node_id": "MDQ6VXNlcjEzMTU5MDA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13159005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simonjayhawkins",
      "html_url": "https://github.com/simonjayhawkins",
      "followers_url": "https://api.github.com/users/simonjayhawkins/followers",
      "following_url": "https://api.github.com/users/simonjayhawkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonjayhawkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonjayhawkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonjayhawkins/subscriptions",
      "organizations_url": "https://api.github.com/users/simonjayhawkins/orgs",
      "repos_url": "https://api.github.com/users/simonjayhawkins/repos",
      "events_url": "https://api.github.com/users/simonjayhawkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonjayhawkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T23:31:37Z",
    "updated_at": "2019-01-15T23:31:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "`.iloc` sets the label to a tuple when returning a series from a multi-level indexed `DataFrame`..\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/f160c7d7c63c11f8807ddd1e653a95821e82269d/pandas/tests/indexing/multiindex/test_iloc.py#L23-L37"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/460172955",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24688#issuecomment-460172955",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24688",
    "id": 460172955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDE3Mjk1NQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-04T08:59:42Z",
    "updated_at": "2019-02-04T08:59:42Z",
    "author_association": "MEMBER",
    "body": "Seeing this now only. I'm against suppressing tuples as values.\r\n\r\nI think @h-vetinari 's strongest point is\r\n\r\n> Tuples are also notoriously hard to _get_ into an array, because numpy will often change the semantics if it's not `is_scalar`.\r\n\r\n... but even that is simply solved by recurring to stuff like ``construct_1d_object_array_from_listlike``. And things will be even better when/if numpy [will support](https://github.com/numpy/numpy/issues/5933#issuecomment-348930690) ``ndmax``.\r\n\r\nMoreover, there is huge evidence of people using tuples as labels in their code. And even evidence of people who have no reasons to stop. And [cases we can't provide better solutions](https://github.com/pandas-dev/pandas/issues/19497#issuecomment-378631266).\r\n\r\nThen, there is the more general argument of what exactly we would be forbidding. What about types which subclass tuples? Other hashable iterables? As in #24984 , in order to find not properly rewrite some internal code which should definitely be rewrite, we plan to complicate the (description) of the API.\r\n\r\nBy the way, disallowing tuples would mean at the very minimum showing a warning for every usage, for some time. _That's_ much more annoying for me to implement than a couple of refactorings which we should do anyway.\r\n\r\nThe one argument that could convince me is that there are many cases of API ambiguity due to accepting tuples. However I can't find any. And on this topic,\r\n\r\n> and it's a hassle to get all the corner cases right, because one needs to check if a tuple is a valid key (both for the frame and the MI.names), and interpret it as a list-like otherwise (or whatever the precedence might be within the method).\r\n\r\nThis is wrong, or just backwards-compatible code to be removed. Tuples are _not_ list-likes, and this is orthogonal to having them as atomic labels. And they can't be list-likes because they are ``MultiIndex`` keys. This was discussed several times. And yes, must be documented."
  }
]
