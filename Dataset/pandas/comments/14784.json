[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/282778630",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14784#issuecomment-282778630",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14784",
    "id": 282778630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mjc3ODYzMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-27T16:52:26Z",
    "updated_at": "2017-02-27T16:52:26Z",
    "author_association": "MEMBER",
    "body": "So basically sorting a multi-index always puts NaNs first, which can be quite annoying.\r\n\r\nIf someone wants to try to tackle this, it should be rather easy I think. `na_position` is already passed to `lexsort_indexer`, there is only a bug in its implementation where `mask = c.codes == -1` does not work because the `-1` values in the labels were turned into a a category '-1', not into a code value of '-1'."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/287357002",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14784#issuecomment-287357002",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14784",
    "id": 287357002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzM1NzAwMg==",
    "user": {
      "login": "linebp",
      "id": 263118,
      "node_id": "MDQ6VXNlcjI2MzExOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/linebp",
      "html_url": "https://github.com/linebp",
      "followers_url": "https://api.github.com/users/linebp/followers",
      "following_url": "https://api.github.com/users/linebp/following{/other_user}",
      "gists_url": "https://api.github.com/users/linebp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/linebp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/linebp/subscriptions",
      "organizations_url": "https://api.github.com/users/linebp/orgs",
      "repos_url": "https://api.github.com/users/linebp/repos",
      "events_url": "https://api.github.com/users/linebp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/linebp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-17T13:43:56Z",
    "updated_at": "2017-03-17T13:43:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to give this a try!\r\n\r\nI have been looking at the code and when sorting the multi-index, the labels are passed to the `lexsort_indexer` function. This does not go well, because they are not the original values, but have been renamed, specifically the `NaN` values have been renamed to `-1`, so it no longer has special meaning in `Categories`.\r\n\r\nAfter a quick look I see several ways of fixing the  `mask = c.codes == -1`\r\n- Figure out which code has been assigned to the categorical value -1 and check for that instead. \r\n- Replace the -1 in the labels with `NaN` so that the code assigned will be -1 and the mask statement will work as intended\r\n- After creating the `Categories` object  from the labels, remove the -1 category if it exists, so that the mask statement will work as intended\r\n\r\nIs the check best left as is and should I fix data to make it work or should I fix the check to match the data? That bit where the `key` is checked if it is already `Categorical` worries me.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/287362444",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14784#issuecomment-287362444",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14784",
    "id": 287362444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzM2MjQ0NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-17T14:05:15Z",
    "updated_at": "2017-03-17T14:05:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can do something like this right about [here](https://github.com/pandas-dev/pandas/blob/master/pandas/core/sorting.py#L177)\r\n\r\nThere are 2 cases when this is called. \r\n\r\n1) from MultiIndex, when you get the ``labels`` passed in, these are *already* factorized (IOW they are *almost* but not quite a categorical).\r\n\r\n2) from sorting (e.g. ``DataFrame.sort_values()`` where these are NOT factorized and must be turned into a proper categorical (this is already handled correctly).\r\n\r\nThis will correctly handle case 1), case 2) is handled by the existing code. \r\n```\r\ndiff --git a/pandas/core/sorting.py b/pandas/core/sorting.py\r\nindex 205d0d9..c62b4e2 100644\r\n--- a/pandas/core/sorting.py\r\n+++ b/pandas/core/sorting.py\r\n@@ -174,7 +174,8 @@ def lexsort_indexer(keys, orders=None, na_position='last'):\r\n \r\n         # create the Categorical\r\n         else:\r\n-            c = Categorical(key, ordered=True)\r\n+            cats = algorithms.unique(key)\r\n+            c = Categorical.from_codes(key, cats[cats != -1], ordered=True)\r\n \r\n         if na_position not in ['last', 'first']:\r\n             raise ValueError('invalid na_position: {!r}'.format(na_position))\r\n```\r\n\r\nSimply do the above in the MultiIndex code before passing to ``_lexsort_indexer``; if its a categorical it will just work. (don't actually do this in ``_lexsort_indexer`` as I did (that was just a test)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/290028697",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14784#issuecomment-290028697",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14784",
    "id": 290028697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDAyODY5Nw==",
    "user": {
      "login": "linebp",
      "id": 263118,
      "node_id": "MDQ6VXNlcjI2MzExOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/linebp",
      "html_url": "https://github.com/linebp",
      "followers_url": "https://api.github.com/users/linebp/followers",
      "following_url": "https://api.github.com/users/linebp/following{/other_user}",
      "gists_url": "https://api.github.com/users/linebp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/linebp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/linebp/subscriptions",
      "organizations_url": "https://api.github.com/users/linebp/orgs",
      "repos_url": "https://api.github.com/users/linebp/repos",
      "events_url": "https://api.github.com/users/linebp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/linebp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-29T09:03:19Z",
    "updated_at": "2017-03-29T09:03:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Like so:\r\n```\r\n--- i/pandas/core/frame.py\r\n+++ w/pandas/core/frame.py\r\n@@ -3392,7 +3392,12 @@ it is assumed to be aliases for the column names.')\r\n             if not labels.is_lexsorted():\r\n                 labels = MultiIndex.from_tuples(labels.values)\r\n \r\n-            indexer = lexsort_indexer(labels.labels, orders=ascending,\r\n+            keys = []\r\n+            for label in labels.labels:\r\n+                cats = algorithms.unique(labels)\r\n+                keys.append(Categorical.from_codes(label, cats[cats != -1], ordered=True))\r\n+\r\n+            indexer = lexsort_indexer(keys, orders=ascending,\r\n                                       na_position=na_position)\r\n         else:\r\n             from pandas.core.sorting import nargsort\r\n```\r\nI figured the for loop was better than using either map or a list comprehension, since that is what was suggested and for loops are what is used elsewhere.\r\n\r\nI also did a few tests:\r\n```\r\n--- i/pandas/tests/frame/test_sorting.py\r\n+++ w/pandas/tests/frame/test_sorting.py\r\n@@ -58,6 +58,20 @@ class TestDataFrameSorting(tm.TestCase, TestData):\r\n         expected = df.sort_index()\r\n         assert_frame_equal(result, expected)\r\n \r\n+        # Setting up data for NaN sorting\r\n+        mi = MultiIndex.from_tuples([[1, 2], [np.nan, np.nan], [np.nan, 3], [12, 13]])\r\n+        frame = DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD'))\r\n+\r\n+        # MI sort with NaN's first\r\n+        result = frame.sort_index(na_position='first')\r\n+        expected = frame.iloc[[1, 2, 0, 3], :]\r\n+        assert_frame_equal(result, expected)\r\n+\r\n+        # MI sort with NaN's last\r\n+        result = frame.sort_index(na_position='last')\r\n+        expected = frame.iloc[[0, 3, 2, 1], :]\r\n+        assert_frame_equal(result, expected)\r\n+\r\n     def test_sort(self):\r\n         frame = DataFrame(np.arange(16).reshape(4, 4), index=[1, 2, 3, 4],\r\n                           columns=['A', 'B', 'C', 'D'])\r\n```\r\n\r\n### When sorting on levels\r\nWhen sorting the index with the level option set, the na_position option is ignored. Is this working as intended or should the option be passed along?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/290032484",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14784#issuecomment-290032484",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14784",
    "id": 290032484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDAzMjQ4NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-29T09:18:50Z",
    "updated_at": "2017-03-29T09:18:50Z",
    "author_association": "MEMBER",
    "body": "@linebp It is probably easier if you open a PR with the above changes (even if you are not sure of the approach, or if it is not yet finished, just indicate so in the PR), that will make discussing it easier.\r\n\r\n> When sorting the index with the level option set, the na_position option is ignored. Is this working as intended or should the option be passed along?\r\n\r\nI think ideally this should also work (so pass na_option along)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295473988",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14784#issuecomment-295473988",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14784",
    "id": 295473988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTQ3Mzk4OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-19T22:30:42Z",
    "updated_at": "2017-04-19T22:30:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks @linebp "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295632868",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14784#issuecomment-295632868",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14784",
    "id": 295632868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTYzMjg2OA==",
    "user": {
      "login": "linebp",
      "id": 263118,
      "node_id": "MDQ6VXNlcjI2MzExOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/263118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/linebp",
      "html_url": "https://github.com/linebp",
      "followers_url": "https://api.github.com/users/linebp/followers",
      "following_url": "https://api.github.com/users/linebp/following{/other_user}",
      "gists_url": "https://api.github.com/users/linebp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/linebp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/linebp/subscriptions",
      "organizations_url": "https://api.github.com/users/linebp/orgs",
      "repos_url": "https://api.github.com/users/linebp/repos",
      "events_url": "https://api.github.com/users/linebp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/linebp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T08:30:48Z",
    "updated_at": "2017-04-20T08:30:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks, @jreback , for your patience with all the overthinking "
  }
]
