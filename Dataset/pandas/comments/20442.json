[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375116149",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375116149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375116149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTExNjE0OQ==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T22:26:00Z",
    "updated_at": "2018-03-21T22:26:00Z",
    "author_association": "MEMBER",
    "body": "Also a bit strange that `==` is inconsistent with the `eq` method in this case:\r\n\r\n```python\r\nIn [2]: pd.__version__\r\nOut[2]: '0.23.0.dev0+658.g17c1fad'\r\n\r\nIn [3]: s = pd.Series([None]*3)\r\n\r\nIn [4]: s\r\nOut[4]:\r\n0    None\r\n1    None\r\n2    None\r\ndtype: object\r\n\r\nIn [5]: s == s\r\nOut[5]:\r\n0    False\r\n1    False\r\n2    False\r\ndtype: bool\r\n\r\nIn [6]: s.eq(s)\r\nOut[6]:\r\n0    True\r\n1    True\r\n2    True\r\ndtype: bool\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375125042",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375125042",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375125042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTEyNTA0Mg==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T23:07:14Z",
    "updated_at": "2018-03-21T23:09:25Z",
    "author_association": "MEMBER",
    "body": "I believe this occurs because this comparison hits this block:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/17c1fadb06bc8f48828e17e603a4d6228a02d73c/pandas/_libs/ops.pyx#L162-L163\r\n\r\nAnd the `checknull` function resolves down this path which considers None as null:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/17c1fadb06bc8f48828e17e603a4d6228a02d73c/pandas/_libs/src/util.pxd#L156-L158"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375247173",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375247173",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375247173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTI0NzE3Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T10:20:19Z",
    "updated_at": "2018-03-22T10:20:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "see the warnings box: http://pandas.pydata.org/pandas-docs/stable/missing_data.html\r\n\r\nThis was done quite a while ago to make the behavior of nulls consistent, in that they *don't* compare equal. This puts ``None`` and ``np.nan`` on an equal (though not-consistent with python, BUT consistent with numpy) footing.\r\n\r\nSo this is not a bug, rather a consequence of stradling 2 conventions.\r\n\r\nI suppose the documentation could be slightly enhanced."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375247686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375247686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375247686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTI0NzY4Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T10:22:17Z",
    "updated_at": "2018-03-22T10:22:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "however this *should* be consistent with this:In [7]: s = pd.Series([np.nan]*3)\r\n\r\n```\r\nIn [8]: s == s\r\nOut[8]: \r\n0    False\r\n1    False\r\n2    False\r\ndtype: bool\r\n\r\nIn [9]: s.eq(s)\r\nOut[9]: \r\n0    False\r\n1    False\r\n2    False\r\ndtype: bool\r\n```\r\n\r\nso [6] form @jschendel  should match [9] here. The incorrect case is actually ``.eq``"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375247974",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375247974",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375247974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTI0Nzk3NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T10:23:24Z",
    "updated_at": "2018-03-22T10:23:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "here's the dichotomy in scalars\r\n```\r\nIn [11]: None == None\r\nOut[11]: True\r\n\r\nIn [12]: np.nan == np.nan\r\nOut[12]: False\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375261829",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375261829",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375261829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTI2MTgyOQ==",
    "user": {
      "login": "mapio",
      "id": 612826,
      "node_id": "MDQ6VXNlcjYxMjgyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/612826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mapio",
      "html_url": "https://github.com/mapio",
      "followers_url": "https://api.github.com/users/mapio/followers",
      "following_url": "https://api.github.com/users/mapio/following{/other_user}",
      "gists_url": "https://api.github.com/users/mapio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mapio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mapio/subscriptions",
      "organizations_url": "https://api.github.com/users/mapio/orgs",
      "repos_url": "https://api.github.com/users/mapio/repos",
      "events_url": "https://api.github.com/users/mapio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mapio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T10:52:14Z",
    "updated_at": "2018-03-22T10:52:14Z",
    "author_association": "NONE",
    "body": "I do not agree with @jreback and the current status of equality for `None` in pandas. \r\n\r\nI've seen the warning box and I completely agree that, according to IEEE floating-point standard,  \"a NaN is never equal to any other number (including another NaN)\" (cited from [What Every Computer Scientist Should Know About Floating-Point Arithmetic](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)).\r\n\r\nI've no problems, if a data type of a series is numeric, to accept that NaNs are not equal and even that `None` get converted to NaNs.\r\n\r\nBut it a series contains objects (let them be string, list, or whatever), the equality should be consistent with Python equality for such objects.\r\n\r\nIt's a basic application of the [principle of least astonishment](https://en.wikipedia.org/wiki/Principle_of_least_astonishment). I don't see any benefit in mangling `None` if the data type is non numeric."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375269163",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375269163",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375269163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTI2OTE2Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T11:19:32Z",
    "updated_at": "2018-03-22T11:19:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mapio you are missing the point. ``None`` is NOT the default missing indicator for anything. ``np.nan`` IS. ``None`` is accepted for compatibility."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375306506",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375306506",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375306506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTMwNjUwNg==",
    "user": {
      "login": "mapio",
      "id": 612826,
      "node_id": "MDQ6VXNlcjYxMjgyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/612826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mapio",
      "html_url": "https://github.com/mapio",
      "followers_url": "https://api.github.com/users/mapio/followers",
      "following_url": "https://api.github.com/users/mapio/following{/other_user}",
      "gists_url": "https://api.github.com/users/mapio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mapio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mapio/subscriptions",
      "organizations_url": "https://api.github.com/users/mapio/orgs",
      "repos_url": "https://api.github.com/users/mapio/repos",
      "events_url": "https://api.github.com/users/mapio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mapio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T13:31:52Z",
    "updated_at": "2018-03-22T13:36:14Z",
    "author_association": "NONE",
    "body": "Where in the documentation is stated that `None` is the \"missing indicator\"? And, if this is the case, I find incredibly confusing that\r\n\r\n```python\r\n>>> pd.Series([1,None,2])\r\n0    1.0\r\n1    NaN\r\n2    2.0\r\ndtype: float64\r\n```\r\nbut\r\n\r\n```python\r\n>>> pd.Series(['a', None, 'b'])\r\n0       a\r\n1    None\r\n2       b\r\ndtype: object\r\n```\r\n\r\nIf you pick `na.nan` as a missing data indicator, than you *must* convert every `None` in a series to it, not only in numeric series, but also in series of objects. To be clear, I expect the second example to look\r\n\r\n```python\r\n>>> pd.Series(['a', None, 'b'])\r\n0       a\r\n1    NaN\r\n2       b\r\ndtype: object\r\n```\r\nGiven such a convention I would have probably still asked why you decide to translate a `None` to a NaN, but I would have not been surprised at all to have a `False` comparing the second entry of the two series.\r\n\r\nProbably I'm missing the point, but the current situation is, at best, inconsistent (and as such, is very confusing)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375325181",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375325181",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375325181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTMyNTE4MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T14:26:38Z",
    "updated_at": "2018-03-22T14:26:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "http://pandas-docs.github.io/pandas-docs-travis/missing_data.html#values-considered-missing\r\n\r\n@mapio how familiar are you with NumPy / pandas type system? When you do `Series([1, None, 2])`, we infer it as floats. If you want python objects, specify that.\r\n\r\n```python\r\nIn [5]: s = pd.Series([1, None, 2], dtype=object)\r\n\r\nIn [6]: s\r\nOut[6]:\r\n0       1\r\n1    None\r\n2       2\r\ndtype: object\r\n```\r\n\r\nBut as you've seen, many places in pandas, especially in ops like `==`, treat None as missing."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375347921",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375347921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375347921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTM0NzkyMQ==",
    "user": {
      "login": "mapio",
      "id": 612826,
      "node_id": "MDQ6VXNlcjYxMjgyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/612826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mapio",
      "html_url": "https://github.com/mapio",
      "followers_url": "https://api.github.com/users/mapio/followers",
      "following_url": "https://api.github.com/users/mapio/following{/other_user}",
      "gists_url": "https://api.github.com/users/mapio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mapio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mapio/subscriptions",
      "organizations_url": "https://api.github.com/users/mapio/orgs",
      "repos_url": "https://api.github.com/users/mapio/repos",
      "events_url": "https://api.github.com/users/mapio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mapio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T15:28:04Z",
    "updated_at": "2018-03-22T15:28:04Z",
    "author_association": "NONE",
    "body": "I'm quite familiar with NumPy. My point is the exact opposite of what you say. \r\n\r\nSince when you build a series from object in Pandas it will correctly infer the `object` data type, `None` are left as such. But when you compare them (and only then), they are *silently* translated to NaNs and (due to IEEE way of handling equality among NaNs) they result to be different.\r\n\r\nIt makes complete sense in numeric series, where `None` are *clearly* converted to NaNs.\r\n\r\nMy point is:\r\n\r\n* it's ok to convert to NaNs if you want to have NaN the only way to represent missing values,\r\n* it's ok to compare NaNs as different (of course),\r\n* you must perform such conversion *visibly* every time you set a series element to `None`!\r\n\r\nIf you keep `None` as element of `object`  series and convert them *silently* to NaNs before comparing them (with `==` or `eq`) you are surprising your users (and also your developers, given that this is reported as a bug with regard to ` eq`).\r\n\r\nNo *implicit* conversion to NaN should happen. If you store objects, you should compare them as Python does."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375614277",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375614277",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375614277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYxNDI3Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T10:36:50Z",
    "updated_at": "2018-03-23T10:36:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is a long ago argument. ``np.nan`` is the missing value indicator for ALL dtypes, including ``object``. This is not going to change. Yes we allow ``None`` to be explicity passed for ``object`` dtypes and be preserved (but only in this case), as ``object`` can essentially hold anything. \r\n\r\nSo comparisons *must* follow the convention that ``np.nan`` behavior is what we do.'\r\nleaving this issue open for the sole purpose of fixing [9] above."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375620746",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375620746",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375620746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYyMDc0Ng==",
    "user": {
      "login": "mapio",
      "id": 612826,
      "node_id": "MDQ6VXNlcjYxMjgyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/612826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mapio",
      "html_url": "https://github.com/mapio",
      "followers_url": "https://api.github.com/users/mapio/followers",
      "following_url": "https://api.github.com/users/mapio/following{/other_user}",
      "gists_url": "https://api.github.com/users/mapio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mapio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mapio/subscriptions",
      "organizations_url": "https://api.github.com/users/mapio/orgs",
      "repos_url": "https://api.github.com/users/mapio/repos",
      "events_url": "https://api.github.com/users/mapio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mapio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T10:48:22Z",
    "updated_at": "2018-03-23T10:48:22Z",
    "author_association": "NONE",
    "body": "If you choose to convert *missing values* to NaNs for ALL (allcaps your) dtypes, a decision I can understand and second), I still miss why this does not hold for object dtype!\r\n\r\nPlease, consider converting `None` to NaN also for object series, this will make *missing values* handling consistent and *equality* consistent. I can't see any drawback…\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375623517",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375623517",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375623517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYyMzUxNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T11:00:31Z",
    "updated_at": "2018-03-23T11:00:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this will be hard to change as pandas is currently structured. We allow both None and NaN as the missing value indicator in object columns.\r\n\r\n\r\n```python\r\nIn [14]: a = pd.Series(['a', None, float('nan')])\r\n\r\nIn [15]: a\r\nOut[15]:\r\n0       a\r\n1    None\r\n2     NaN\r\ndtype: object\r\n\r\nIn [16]: a == a\r\nOut[16]:\r\n0     True\r\n1    False\r\n2    False\r\ndtype: bool\r\n```\r\n\r\n> I can't see any drawback…\r\n\r\nIIRC, people found it useful to *not* immediately convert `None` to `NaN` there. They wanted to keep their python scalars. I don't recall details though.\r\n\r\nIf we wanted to change this, which I'm not sure we do, I don't see a deprecation path to changing `None` to compare equal to itself, though perhaps you do.\r\n\r\nHow is this affecting you negatively?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375628761",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375628761",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375628761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYyODc2MQ==",
    "user": {
      "login": "mapio",
      "id": 612826,
      "node_id": "MDQ6VXNlcjYxMjgyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/612826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mapio",
      "html_url": "https://github.com/mapio",
      "followers_url": "https://api.github.com/users/mapio/followers",
      "following_url": "https://api.github.com/users/mapio/following{/other_user}",
      "gists_url": "https://api.github.com/users/mapio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mapio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mapio/subscriptions",
      "organizations_url": "https://api.github.com/users/mapio/orgs",
      "repos_url": "https://api.github.com/users/mapio/repos",
      "events_url": "https://api.github.com/users/mapio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mapio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T11:23:39Z",
    "updated_at": "2018-03-23T11:24:09Z",
    "author_association": "NONE",
    "body": "I think that people finds useful to not immediately convert to NaN and keep their Python types because they want the objects they put in the series to *behave like Python objects*. This benefit is lost if you change the way equality works for *some* of the Python types (like `None`)!\r\n\r\nConsider this piece of code:\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\nIn [2]: A = pd.Series(['a', None, 2])\r\nIn [3]: B = pd.Series(['a', None, 2])\r\n\r\nIn [4]: all(A == B)\r\nOut[4]: False\r\nIn [5]: all(lambda a, b: a == b for a, b in zip(A, B))\r\nOut[5]: True\r\n\r\nIn [5]: all(A.values == B.values)\r\nOut[5]: True\r\nIn [6]: all(lambda a, b: a == b for a, b in zip(A.values, B.values))\r\nOut[6]: True\r\n```\r\n\r\nI expect that `In [4]` should tell me if the two series are equal *member by member*, vectorizing in some sense the equality. Currently they turn out not to be! But if I do test equality member by member as in `In[5]` instead I get (as expected) that the series are equal *member by member* .\r\n\r\nNow, if I turn the series to `numpy.array`s  as in `In[5]` I got the expected result.  Here NumPy is consistent with the vectorization in `In[6]`.\r\n\r\nAs you can clearly see there is an inconsistency that is very hard to understand (you have to know, and there is no place in the docs where this is clearly stated) that:\r\n\r\n* pandas coverts all missing values *except for* `None` to NaN,\r\n* pandas (according to IEEE) treats NaN as different from themselves.\r\n\r\nHaving an inconsistent behaviour and leaving `None` being as such but comparing them as different violates the principle of least astonishment.\r\n\r\nI spent quite some time (with two dataframes of tens of thousands of elements of different dtypes) to get why there was a difference when, looking at the corresponding rows, all the values where equal!\r\n\r\nI don't think anyone can really think that an inconsistent behaviour is a good thing…\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375631843",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375631843",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375631843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYzMTg0Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T11:35:29Z",
    "updated_at": "2018-03-23T11:35:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do you see a way to deprecate this cleanly (along with the behavior of isna\n/ notna, groupby, etc.)?\n\nOn Fri, Mar 23, 2018 at 6:23 AM, Massimo Santini <notifications@github.com>\nwrote:\n\n> I think that people finds useful to not immediately convert to NaN and\n> keep their Python types because they want the objects they put in the\n> series to *behave like Python objects*. This benefit is lost if you\n> change the way equality works for *some* of the Python types (like None)!\n>\n> Consider this piece of code:\n>\n> In [1]: import pandas as pd\n> In [2]: A = pd.Series(['a', None, 2])\n> In [3]: B = pd.Series(['a', None, 2])\n>\n> In [4]: all(A == B)\n> Out[4]: False\n> In [5]: all(lambda a, b: a == b for a, b in zip(A, B))\n> Out[5]: True\n>\n> In [5]: all(A.values == B.values)\n> Out[5]: True\n> In [6]: all(lambda a, b: a == b for a, b in zip(A.values, B.values))\n> Out[6]: True\n> ´´´\n>\n> I expect that `In [4]` should tell me if the two series are equal *member by member*, vectorizing in some sense the equality. Currently they turn out not to be! But if I do test equality member by member as in `In[5]` instead I get (as expected) that the series are equal *member by member* .\n>\n> Now, if I turn the series to `numpy.array`s  as in `In[5]` I got the expected result.  Here NumPy is consistent with the vectorization in `In[6]`.\n>\n> As you can clearly see there is an inconsistency that is very hard to understand (you have to know, and there is no place in the docs where this is clearly stated) that:\n> * pandas coverts all missing values *except for* ´None´ to NaN,* pandas (according to IEEE) treats NaN as different from themselves.\n>\n> Having an inconsistent behaviour and leaving `None` being as such but comparing them as different violates the principle of least astonishment.\n>\n> I spent quite some time (with two dataframes of tens of thousands of elements of different dtypes) to get why there was a difference when, looking at the corresponding rows, all the values where equal!\n>\n> I don't think anyone can really think that an inconsistent behaviour is a good thing…\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375628761>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIi3CLCGdGyp5eaOvh7P8bjWEmLzEks5thNtEgaJpZM4S1qvp>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375746498",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-375746498",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 375746498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTc0NjQ5OA==",
    "user": {
      "login": "mapio",
      "id": 612826,
      "node_id": "MDQ6VXNlcjYxMjgyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/612826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mapio",
      "html_url": "https://github.com/mapio",
      "followers_url": "https://api.github.com/users/mapio/followers",
      "following_url": "https://api.github.com/users/mapio/following{/other_user}",
      "gists_url": "https://api.github.com/users/mapio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mapio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mapio/subscriptions",
      "organizations_url": "https://api.github.com/users/mapio/orgs",
      "repos_url": "https://api.github.com/users/mapio/repos",
      "events_url": "https://api.github.com/users/mapio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mapio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T17:42:53Z",
    "updated_at": "2018-03-23T17:45:01Z",
    "author_association": "NONE",
    "body": "I am just a Pandas user, not a developer. What I can suggest is to look for the code that converts `None` to NaN in numeric series constructors and copy it to object series constructors. And document it in the session of the documentation where the handling of missing values.\r\n\r\nObserve that this is not likely to cause any particular harm. If one puts a `None` in a series it's not likely to invoke methods on it, so that changing it to `np.nan` will not make much of a difference. Especially since `Series.isnull` is (as stated in the documentation) an alias of `Series.isna`, so that code that was looking for `None` will still find it, whatever method it will call to test for it.\r\n\r\nIf some developer offers to fix the code, I volunteer to fix the docs 😄 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/379810480",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20442#issuecomment-379810480",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20442",
    "id": 379810480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTgxMDQ4MA==",
    "user": {
      "login": "walkerh",
      "id": 70297,
      "node_id": "MDQ6VXNlcjcwMjk3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/70297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/walkerh",
      "html_url": "https://github.com/walkerh",
      "followers_url": "https://api.github.com/users/walkerh/followers",
      "following_url": "https://api.github.com/users/walkerh/following{/other_user}",
      "gists_url": "https://api.github.com/users/walkerh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/walkerh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/walkerh/subscriptions",
      "organizations_url": "https://api.github.com/users/walkerh/orgs",
      "repos_url": "https://api.github.com/users/walkerh/repos",
      "events_url": "https://api.github.com/users/walkerh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/walkerh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T16:22:56Z",
    "updated_at": "2018-04-09T16:22:56Z",
    "author_association": "NONE",
    "body": "There is no way to address this without a major point release, since any change here will break backwards compatibility.\r\n\r\nNevertheless, this issue does imply the clear need for documentation improvement: `None`s selectively behave as `nan`s."
  }
]
