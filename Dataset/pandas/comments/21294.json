[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396663756",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-396663756",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 396663756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjY2Mzc1Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-12T17:06:18Z",
    "updated_at": "2018-06-12T17:06:18Z",
    "author_association": "MEMBER",
    "body": "> I don't see why dicts and dict keys shouldn't be just considered list-likes as it happens with Series.\r\n\r\nNote that in many place we see Series and dicts as equivalents (in many method parameters that expect a mapping, eg fillna, astype, ..), but in those cases they are interpreted the same (I mean passing `dict` or `pd.Series(dict)` will do the same). \r\nIn this case they are *not* the same, as the Series' values are used, but the dict's keys. \r\n\r\nPersonally I don't really see a good reason to allow this (and for allowing this complexity). Do you have a practical use case? \r\nPeople who want this can always explicitly do `dict.keys()` or `list(dict)` to be explicit about using the keys here.\r\n\r\n(if we want to fix the inconsistency, I would rather disable using dicts in other places in indexing)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396697828",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-396697828",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 396697828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjY5NzgyOA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-12T18:59:14Z",
    "updated_at": "2018-06-12T18:59:14Z",
    "author_association": "MEMBER",
    "body": "> Personally I don't really see a good reason to allow this (and for allowing this complexity). Do you have a practical use case?\r\n\r\nWell, yes, but...\r\n\r\n> People who want this can always explicitly do dict.keys() or list(dict) to be explicit about using the keys here.\r\n\r\n... sure\r\n\r\n> (if we want to fix the inconsistency, I would rather disable using dicts in other places in indexing)\r\n\r\nI wouldn't have major objections if we were doing it from scratch. But:\r\n- there is no real \"complexity\" issue. The diff is large just because I refactored code. Deciding whether to consider dicts and dict keys as list-like or not is a matter of two trivial lines of code inside ``is_list_like``\r\n- we should try to be as coherent as possible on what is a \"list-like\" for pandas, and have ``is_list_like`` reflect that. So implementation wise, your suggestion basically reflects to \"change this PR just by editing ``is_list_like``\".\r\n- This would disable dicts and dict keys as list-likes _everywhere_. It's my turn to ask: what is a good reason to do so? Python users know that ``list({1:2})`` results in ``[1]``, so it's not so mysterious that a  ``list`` can be replaced with a ``dict`` and that this means looking at its values. (What _might_ be mysterious is that a ``list`` can't be replaced with a ``str``, but they learn this soon)\r\n- My main issue is then that of backward compatibility.\r\n\r\nI think it's way simpler to tell users that every iterable is a possible list-like, with the exception of strings (because they are scalar) and tuples (because they are ``MultiIndex`` keys), and have this rule apply to all the API (with the obvious exception of places where we expect a mapping, as in the initialization of a ``Series``)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396741942",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-396741942",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 396741942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njc0MTk0Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-12T21:33:48Z",
    "updated_at": "2018-06-12T21:33:48Z",
    "author_association": "MEMBER",
    "body": "> there is no real \"complexity\" issue. \r\n\r\nI understand that the actual fix might be two lines of code in `is_list_like` (and that it might actually gives simpler code to just coerce it to list than to explicitly disallow it), but with \"added complexity\" I also mean: 1) complexity for the user: the more possibilities we provide, the more complex it becomes (if you code written that indexes with a dict, then you need to know whether it uses the values or the keys to understand the code) and 2) maintenance overhead: regardless of the tiny code change, this gives rise to extra tests, extra questions if we should do it in other places as well to keep consistency, extra usage questions on the issue tracker, ...\r\n\r\n> so it's not so mysterious that a list can be replaced with a dict and that this means looking at its values.\r\n\r\nyou mean its \"keys\" .. :-)\r\n\r\n> I think it's way simpler to tell users that every iterable is a possible list-like ... and have this rule apply to all the API (with the obvious exception of places where we expect a mapping ..)\r\n\r\nTo get more concrete, what would be examples of usage cases that get changed by taking on this rule? (as I completely agree consistent rules how things are interpreted are good).\r\n\r\nFor example, `to_numeric` accepts list-likes (list, array, series (which is seen here as list-like and not mapping), ... but does it also need to accept dicts? (btw, it also does not accept a generator, while `Series` does)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396746160",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-396746160",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 396746160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njc0NjE2MA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-12T21:50:28Z",
    "updated_at": "2018-06-13T05:15:28Z",
    "author_association": "MEMBER",
    "body": "> you mean its \"keys\" .. :-)\r\n\r\n:-)\r\n\r\n> To get more concrete, what would be examples of usage cases that get changed by taking on this rule? (as I completely agree consistent rules how things are interpreted are good).\r\n\r\nHard to answer, because they are not particularly related to pandas itself, but to the code surrounding pandas calls.\r\n\r\nIn my case, I was working with a df of which I wanted to select columns _and_ change their appearance. So I had a dict ```translation = {old_name1 : new_name1, old_name2 : new_name2 ...}``` and wanted to do ``my_df[translation].rename(translation, axis=1)``.\r\n\r\nAgain, I could certainly use ``my_df[list(translation)].rename(translation, axis=1)``, it's just that I had got used to the ``Series`` behavior.\r\n\r\n> For example, to_numeric accepts list-likes (list, array, series (which is seen here as list-like and not mapping), ... but does it also need to accept dicts? (btw, it also does not accept a generator, while Series does)\r\n\r\n... and it accepts tuples. I do see this as a discrepancy, but a minor one, compared to consistency in the same type of indexer across different objects."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396748185",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-396748185",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 396748185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njc0ODE4NQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-12T21:58:41Z",
    "updated_at": "2018-06-12T21:58:41Z",
    "author_association": "MEMBER",
    "body": "I also think - but I will be happy to be proven wrong - that in Python libraries accepting any iterable wherever lists are expected is the norm."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396864438",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-396864438",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 396864438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njg2NDQzOA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T08:52:01Z",
    "updated_at": "2018-06-13T10:02:46Z",
    "author_association": "MEMBER",
    "body": "> complexity for the user: the more possibilities we provide, the more complex it becomes (if you code written that indexes with a dict, then you need to know whether it uses the values or the keys to understand the code)\r\n\r\nJust thinking out loud: this does not apply to e.g. ``dict.keys()`` or ``dict.values()`` (which currently exhibit the same behavior). So another solution would be to exclude mappings in general, but accept these (implemented as \"things that have ``__iter__`` but do not have ``keys()``\").\r\n\r\n(I don't necessarily mean this is a better solution - my main worry, of breaking existing code, stays mostly unchanged)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396913307",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-396913307",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 396913307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjkxMzMwNw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T12:02:42Z",
    "updated_at": "2018-06-13T12:02:42Z",
    "author_association": "MEMBER",
    "body": "> I also think - but I will be happy to be proven wrong - that in Python libraries accepting any iterable wherever lists are expected is the norm.\r\n\r\nYep, that is true and a good point. Eg looking at the \"built-in functions\", they use consistent terminology of \"iterable\" in some of the functions, and they all accept a dict, eg:\r\n\r\n```\r\nIn [50]: d = {1: 2, 2: 3}\r\n\r\nIn [51]: sum(d)\r\nOut[51]: 3\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/396914023",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-396914023",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 396914023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjkxNDAyMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T12:05:36Z",
    "updated_at": "2018-06-13T12:05:36Z",
    "author_association": "MEMBER",
    "body": "I see the point of \"allowing dicts actually creates less special cases\". Which is a good one (only of course that we already make an exception on the rule for tuples in certain cases, as you mentioned)\r\n\r\nIt's only that I would personally never want to see such usage in code I review or maintain. I think I would always ask to change to be more explicit on it :-)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/397090719",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-397090719",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 397090719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzA5MDcxOQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T21:20:39Z",
    "updated_at": "2018-06-13T21:20:39Z",
    "author_association": "MEMBER",
    "body": "> we already make an exception on the rule for tuples in certain cases\r\n\r\nBy the way: I think over time it should become \"in all cases\" (in which we declare to accept \"list-likes\", which might not necessarily be all cases in which we accept lists)\r\n\r\nAnother thing: the obvious alternative to \"accept anything which can be casted to a list and is not a tuple or string\" is \"accept only lists\". But in principle there can be good reasons to pass generators to save RAM (e.g. indexing a ``RangeIndex`` with a ``range`` in Python 3 could already avoids casting to list).\r\n\r\n> I see the point of \"allowing dicts actually creates less special cases\".\r\n\r\nSo would you say #21313 is OK?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/398800916",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-398800916",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 398800916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODgwMDkxNg==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T15:52:20Z",
    "updated_at": "2018-06-20T15:52:20Z",
    "author_association": "MEMBER",
    "body": "@jorisvandenbossche if you think we need more time to decide, I will change #21313 so that it temporarily keeps the actual behavior"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/401345052",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21294#issuecomment-401345052",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21294",
    "id": 401345052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTM0NTA1Mg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-29T12:52:21Z",
    "updated_at": "2018-06-29T12:52:21Z",
    "author_association": "MEMBER",
    "body": "Given the discussion above, I am fine with going forward and handling dict here not as a special case but just as any other iterable."
  }
]
