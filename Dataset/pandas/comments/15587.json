[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284301591",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284301591",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284301591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDMwMTU5MQ==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-06T04:42:32Z",
    "updated_at": "2017-03-06T04:42:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is a starting point for #15533. Right now I've only added `_is_fillable_values` and `validate_fill_value` methods to the bottom of `common.py`.\r\n\r\nThere's way too much magic ATM. Some specific questions:\r\n* Is there a method for detecting `pandas` (non-`numpy`) time dtypes: `Timestamp`, `Period`, `Timedelta`? AFAIK all of the `common.py` ops are w.r.t. `numpy` dtypes (`datetime64` etc.).\r\n* `common.py` ops accept individual objects *or* arrays and look at the `dtype` thereof, so we have to catch `numpy` and `pandas` data structs separately. What's a good way of tackling this? Just import all of the names and test them all?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284608710",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284608710",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284608710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDYwODcxMA==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T03:12:09Z",
    "updated_at": "2017-03-07T03:13:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "So with date stuff, we can catch `numpy`/stdlib `datetime`/`Timestamp` using `is_datetime64_any_dtype`. We can catch `Timedelta` using `is_timedelta64_dtype`. \r\n\r\nBut how do we catch `Period`? When fed to `is_datetime64_any_dtype` it returns `False`. Additionally, the following evaluates to `False` as well:\r\n\r\n    is_period_dtype(pd.Series([pd.Period('2015-01-01')]).dtype)\r\n\r\nIs this supposed to happen? The `Period` `numpy` `dtype` is just `'O'`..."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284746794",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284746794",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284746794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDc0Njc5NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T15:04:21Z",
    "updated_at": "2017-03-07T15:04:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Periods are object type when in a Series ATM. They have a specific dtype only in an Index.\r\nThere is an ``is_period_arraylike`` if you really need inference on an array."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284746949",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284746949",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284746949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDc0Njk0OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T15:04:49Z",
    "updated_at": "2017-03-07T15:04:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "numpy has pretty much nothing to do with dtypes anymore in pandas (except for some basic types)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284836830",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284836830",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284836830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDgzNjgzMA==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T19:44:28Z",
    "updated_at": "2017-03-07T19:44:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "See the method in the new commit.\r\n\r\nHow it works right now:\r\n* `list_like`, `dict_like`, and `callable` fill values will always raise a `TypeError`.\r\n* `isnull` fill values will always pass.\r\n* If the unified `dtype` (the `dtype` you get when you cast to a `numpy` array) of a `Series` or `DataFrame` is `Object`, any object excepting the ones in the first bullet point will be accepted.\r\n* The above includes `Period` dtype columns. Theoretically `Period` dtype columns should only accept `Period` fill values. However, because of the way periods are implemented, with an `O` `dtype`, there doesn't seem to be an easy way of conforming to this behavior without changing the method signature somehow. Periods just fall through to the general object case right now.\r\n* If the unified `dtype` is `datetime64`, only `datetime` types will work.\r\n* If the unified `dtype` is `timedelta64`, only `timedelta` types will work.\r\n\r\nIs this behavior OK?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284837789",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284837789",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284837789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDgzNzc4OQ==",
    "user": {
      "login": "codecov-io",
      "id": 8655789,
      "node_id": "MDQ6VXNlcjg2NTU3ODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8655789?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov-io",
      "html_url": "https://github.com/codecov-io",
      "followers_url": "https://api.github.com/users/codecov-io/followers",
      "following_url": "https://api.github.com/users/codecov-io/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov-io/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov-io/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov-io/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov-io/orgs",
      "repos_url": "https://api.github.com/users/codecov-io/repos",
      "events_url": "https://api.github.com/users/codecov-io/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov-io/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T19:48:02Z",
    "updated_at": "2017-03-07T22:36:25Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/15587?src=pr&el=h1) Report\n> Merging [#15587](https://codecov.io/gh/pandas-dev/pandas/pull/15587?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/09360d80da730008a6a89f38f3780bb1d55f9e25?src=pr&el=desc) will **decrease** coverage by `-0.03%`.\n> The diff coverage is `75%`.\n\n\n```diff\n@@            Coverage Diff             @@\n##           master   #15587      +/-   ##\n==========================================\n- Coverage   91.06%   91.03%   -0.03%     \n==========================================\n  Files         137      137              \n  Lines       49307    49330      +23     \n==========================================\n+ Hits        44899    44908       +9     \n- Misses       4408     4422      +14\n```\n\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/15587?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/reshape.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvcmVzaGFwZS5weQ==) | `99.28% <100%> (ø)` | :white_check_mark: |\n| [pandas/core/missing.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvbWlzc2luZy5weQ==) | `84.38% <71.42%> (-0.57%)` | :x: |\n| [pandas/io/gbq.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL2lvL2dicS5weQ==) | `25% <0%> (-58.34%)` | :x: |\n| [pandas/tools/merge.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL3Rvb2xzL21lcmdlLnB5) | `91.78% <0%> (-0.35%)` | :x: |\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `97.87% <0%> (-0.06%)` | :x: |\n| [pandas/formats/format.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL2Zvcm1hdHMvZm9ybWF0LnB5) | `95.33% <0%> (-0.01%)` | :x: |\n| [pandas/io/excel.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL2lvL2V4Y2VsLnB5) | `79.67% <0%> (+0.03%)` | :white_check_mark: |\n| [pandas/tseries/base.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL3RzZXJpZXMvYmFzZS5weQ==) | `96.65% <0%> (+0.06%)` | :white_check_mark: |\n| [pandas/core/common.py](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...1efdc4aca5d21949bcd091a24ed4e2c0b0907653?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvY29tbW9uLnB5) | `91.36% <0%> (+0.33%)` | :white_check_mark: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/15587?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/15587?src=pr&el=footer). Last update [09360d8...9eaa0f2](https://codecov.io/gh/pandas-dev/pandas/compare/09360d80da730008a6a89f38f3780bb1d55f9e25...9eaa0f241388ff7e5110d3396fefc1d8c3c4bab4?el=footer&src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284899812",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284899812",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284899812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDg5OTgxMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T23:53:29Z",
    "updated_at": "2017-03-07T23:53:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "that's not right\r\n\r\na fill value will be applied per individual dtype \r\nso best to simply validate at a lower level then\r\n\r\nlook in internals and put this check in the fillna method"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284903035",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284903035",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284903035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDkwMzAzNQ==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T00:09:59Z",
    "updated_at": "2017-03-08T00:09:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about iterating through the sub-series column-by-column? Do `isinstance(obj, ABCFrame)` and if`True` do a `[_validate(col, dtype) for col in obj.columns]`.\r\n\r\nOn the design side. Suppose I have a mixed dtype DataFrame, let's say with a `str` column and a `bool` column. After some operation I now have a null value in each. `fill_value` doesn't implement columnar `dict` input like `fillna` does, so there's no way of handling these columns separately.\r\n\r\nIf `fill_value` is supposed to be a quick substitute for `fillna`, then this should be OK. If on the other hand the idea is that we want it there strictly to cover cases when we don't upcast the column `dtype` (which was the original motivation), then validation should be by-column, yeah."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284903935",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284903935",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284903935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDkwMzkzNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T00:15:16Z",
    "updated_at": "2017-03-08T00:15:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ResidentMario you can also do columnar. Keep in mind though that we generally will simply skip a non-compat fill-value. \r\n\r\n```\r\nIn [1]: df = DataFrame({'A':[1,2,3],'B':pd.date_range('20130101',periods=3)})\r\n\r\nIn [2]: df\r\nOut[2]: \r\n   A          B\r\n0  1 2013-01-01\r\n1  2 2013-01-02\r\n2  3 2013-01-03\r\n\r\nIn [3]: df.iloc[1] = np.nan\r\n\r\nIn [4]: df\r\nOut[4]: \r\n     A          B\r\n0  1.0 2013-01-01\r\n1  NaN        NaT\r\n2  3.0 2013-01-03\r\n\r\nIn [5]: df.fillna(0)\r\nOut[5]: \r\n     A          B\r\n0  1.0 2013-01-01\r\n1  0.0 1970-01-01\r\n2  3.0 2013-01-03\r\n\r\nIn [6]: df.fillna(Timestamp('20130201'))\r\nOut[6]: \r\n                     A          B\r\n0                    1 2013-01-01\r\n1  2013-02-01 00:00:00 2013-02-01\r\n2                    3 2013-01-03\r\n```\r\n\r\nso one could argue that both [5] and [6] are wrong or right. We generally leave this up to the user when having mixed dtypes. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284931947",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-284931947",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 284931947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDkzMTk0Nw==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T02:58:46Z",
    "updated_at": "2017-03-08T02:58:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Exactly, leave it to the user&mdash;that's what the current implementation would do. So, do you think `fill_value` should follow the [5] & [6] case, the (current) \"lossy\" implementation, or a stricter (suggested) check-each-column implementation? I can do whichever."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285883277",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-285883277",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 285883277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTg4MzI3Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-11T17:38:27Z",
    "updated_at": "2017-03-11T17:38:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing in favor of #15563 \r\n\r\nnormally pls don't create *new* PR's for the same issue, just push to the same one."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285885289",
    "html_url": "https://github.com/pandas-dev/pandas/pull/15587#issuecomment-285885289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15587",
    "id": 285885289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTg4NTI4OQ==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-11T17:48:07Z",
    "updated_at": "2017-03-11T17:48:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is a different PR, though. The goal here is to implement error handling for `fill_value` parameters to various methods; the goal of PR#15563 is to implement error handing for `fillna`. Presumably I'd then rebase from there and work the feature out here.\r\n\r\nThat being said I cherry-picked some of the commits here for that PR. So a totally new PR might just be cleaner anyway.\r\n\r\nSorry, took a while to get to the bottom of this particular molehill."
  }
]
