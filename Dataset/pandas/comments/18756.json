[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351399934",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18756#issuecomment-351399934",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18756",
    "id": 351399934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM5OTkzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T14:03:31Z",
    "updated_at": "2017-12-13T14:03:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm I don't really know why we have this method, its not semantically correct because you lose the ``closed`` value. I think ``.values`` (or ``list(IntervalIndex)`` is enough here). I would just deprecate this.\r\n\r\ncc @shoyer "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351450851",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18756#issuecomment-351450851",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18756",
    "id": 351450851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ1MDg1MQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T16:48:57Z",
    "updated_at": "2017-12-13T16:48:57Z",
    "author_association": "MEMBER",
    "body": "My original reasoning for this method was to make it easier to use other APIs that need tuples, e.g., to convert an IntervalIndex into levels of a MultiIndex with `pd.MultiIndex(interval_index.to_tuples())` or put it in a (NumPy) structured array. Including `closed` would be redundant for most such representations.\r\n\r\nPart of the need for this is that it surprisingly difficult to create a NumPy array of tuples, and this method makes that easy. For example, consider:\r\n```\r\nIn [7]: np.array([(1.0, 2.0), (3.0, 4.0)], dtype=object)\r\nOut[7]:\r\narray([[1.0, 2.0],\r\n       [3.0, 4.0]], dtype=object)\r\n```\r\nThat said, this doesn't come up *that* often and the `pandas.Series()` constructor does the right thing.\r\n\r\nGiven that the behavior is marginally useful, unambiguous (aside from handling missing values) and self-contained, I think we should lean towards keeping it around.\r\n\r\nWith regards to the handling of NaN, I did choose this existing behavior intentionally. This ensures that the result has a homogeneous type (a list of all tuples), with values given by tuples of length 2. On the other hand, I do see why returning scalars could make more sense in some cases. Maybe a keyword argument `na_tuple=False` could be used request `NaN` instead of `(NaN, NaN)` for missing values?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351881410",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18756#issuecomment-351881410",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18756",
    "id": 351881410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg4MTQxMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T00:53:30Z",
    "updated_at": "2017-12-15T00:53:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok @shoyer makes sense about the rationale for this method."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351881631",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18756#issuecomment-351881631",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18756",
    "id": 351881631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg4MTYzMQ==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T00:55:06Z",
    "updated_at": "2017-12-15T00:58:47Z",
    "author_association": "MEMBER",
    "body": "@shoyer : Thanks, that makes sense.\r\n\r\nI like the `na_tuple` keyword argument idea and implemented it, but I'm having some trouble testing it due to the NA tuples.  Consider the following setup:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport pandas.util.testing as tm\r\nfrom pandas.core.common import _asarray_tuplesafe\r\n\r\ndata1 = zip(np.array([1, 3, np.nan]), np.array([2, 4, np.nan]))\r\ndata2 = zip(np.array([1, 3, np.nan]), np.array([2, 4, np.nan]))\r\n\r\nidx1 = pd.Index(_asarray_tuplesafe(data1))\r\nidx2 = pd.Index(_asarray_tuplesafe(data2))\r\n```\r\n\r\nThen `==` returns `False` for the position with the NA tuples (not especially surprising due to the nature of NA):\r\n```python\r\nIn [2]: idx1\r\nOut[2]: Index([(1.0, 2.0), (3.0, 4.0), (nan, nan)], dtype='object')\r\n\r\nIn [3]: idx2\r\nOut[3]: Index([(1.0, 2.0), (3.0, 4.0), (nan, nan)], dtype='object')\r\n\r\nIn [4]: idx1 == idx2\r\nOut[4]: array([ True,  True, False], dtype=bool)\r\n```\r\nBut the problem is `equals` returns `False`, and `tm.assert_index_equals` raises:\r\n\r\n```python\r\nIn [5]: idx1.equals(idx2)\r\nOut[5]: False\r\n\r\nIn [6]: tm.assert_index_equal(idx1, idx2)\r\n---------------------------------------------------------------------------\r\nAssertionError: Index are different\r\n\r\nIndex values are different (33.33333 %)\r\n[left]:  Index([(1.0, 2.0), (3.0, 4.0), (nan, nan)], dtype='object')\r\n[right]: Index([(1.0, 2.0), (3.0, 4.0), (nan, nan)], dtype='object')\r\n```\r\n\r\nSo I'm not quite sure what should be done for testing.  Looks like fixing `tm.assert_index_equal` would involve writing a special case in `Index.equals` to handle tuples with NA, which feels like a very bad idea.  \r\n\r\nI guess the other workaround would be to use `tm.assert_index_equal` on the non-NA portion of the index, then use some assertions on the NA portion to make sure they match what `na_tuple` specifies?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351887182",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18756#issuecomment-351887182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18756",
    "id": 351887182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg4NzE4Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T01:30:01Z",
    "updated_at": "2017-12-15T01:30:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "this might be a shortcoming of ``array_equivalent`` which does this heavy lifting; IOW it might need to detect tuples and compare them directly (rather than rely on ``np.array_equal`` which prob borks)"
  }
]
