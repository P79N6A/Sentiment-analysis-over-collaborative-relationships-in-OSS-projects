[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14472721",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2966#issuecomment-14472721",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2966",
    "id": 14472721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDcyNzIx",
    "user": {
      "login": "lesteve",
      "id": 1680079,
      "node_id": "MDQ6VXNlcjE2ODAwNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1680079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lesteve",
      "html_url": "https://github.com/lesteve",
      "followers_url": "https://api.github.com/users/lesteve/followers",
      "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
      "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
      "organizations_url": "https://api.github.com/users/lesteve/orgs",
      "repos_url": "https://api.github.com/users/lesteve/repos",
      "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lesteve/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-05T23:29:29Z",
    "updated_at": "2013-03-05T23:29:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "To be perfectly honest, I was hoping to tackle the issue in a slightly more generic way. What I had in mind was something similar to pandas.tseries.converter.PandasAutoDateFormatter so that the format of the timestamp would vary when you zoom in or at least would depend on the frequency of the regular timeseries. For example for a daily timeseries you probably don't want to print the timestamp with a micro-second resolution.\n\nI have to admit I never got around to find a proper solution, although knowing that others have noticed the problem and care about it may help to gather some momentum.\n\nFor an ad-hoc solution, it seems like using `fmt_xdata` is better suited e.g. something like:\n\n``` python\nax.fmt_xdata = lambda x: pd.Period(ordinal=int(x), freq=ax.freq)\n```\n\nI am actually not sure you get the right timestamp with your method, I get something in 1970 whereas my timeseries start in 2000, unless I missed something. Here is what I did:\n\n``` python\nimport datetime\nimport pandas as pd\nts = pd.util.testing.makeTimeSeries(1000)\nax = ts.cumsum().plot()\nax.fmt_xdata = lambda x: datetime.datetime.fromtimestamp(x)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16148234",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2966#issuecomment-16148234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2966",
    "id": 16148234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTQ4MjM0",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-10T00:10:10Z",
    "updated_at": "2013-04-10T00:10:10Z",
    "author_association": "MEMBER",
    "body": "I cherry-picked these commits\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20406382",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2966#issuecomment-20406382",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2966",
    "id": 20406382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDA2Mzgy",
    "user": {
      "login": "atedstone",
      "id": 2922144,
      "node_id": "MDQ6VXNlcjI5MjIxNDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2922144?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atedstone",
      "html_url": "https://github.com/atedstone",
      "followers_url": "https://api.github.com/users/atedstone/followers",
      "following_url": "https://api.github.com/users/atedstone/following{/other_user}",
      "gists_url": "https://api.github.com/users/atedstone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atedstone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atedstone/subscriptions",
      "organizations_url": "https://api.github.com/users/atedstone/orgs",
      "repos_url": "https://api.github.com/users/atedstone/repos",
      "events_url": "https://api.github.com/users/atedstone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atedstone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-03T10:10:04Z",
    "updated_at": "2013-07-03T10:10:04Z",
    "author_association": "NONE",
    "body": "As identified by @lesteve, the method suggested by @WillFurnass doesn't return the correct timestamp. However, the following solution seems to work:\n\n```\nax.format_coord = lambda t, y : \"t = {}    y = {:8f}\".format(Period(ordinal=int(t), freq=ax.freq).to_timestamp().to_datetime(), y)\n```\n\nin pandas.tseries.plotting.tsplot.\n\nThe formatting doesn't automatically scale according to zoom extent (like matplotlib plots automatically do), but I'm not sure how to do this (and personally, find it hinders rather than helps). Instead it just outputs the default format YYYY-MM-DD hh:mm:ss.\n\nSolution inspired from http://stackoverflow.com/questions/13421947/getting-usable-dates-from-axes-get-xlim-in-a-pandas-time-series-plot.\n"
  }
]
