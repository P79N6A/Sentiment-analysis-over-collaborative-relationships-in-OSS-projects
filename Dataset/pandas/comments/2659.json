[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12019400",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-12019400",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 12019400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDE5NDAw",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-08T21:52:27Z",
    "updated_at": "2013-01-08T21:52:27Z",
    "author_association": "MEMBER",
    "body": "Ok, this is, in a word, f*cked up. If I add gc.collect to that for loop it stops leaking memory:\n\n```\nimport pandas as pd\nimport numpy as np\nimport gc\n\narr = np.random.randn(100000, 5)\n\ndef leak():\n    pd.util.testing.set_trace()\n    for i in xrange(10000):\n        df = pd.DataFrame(arr.copy())\n        result = df.xs(1000)\n        gc.collect()\n        # result = df.ix[5000]\n\nif __name__ == '__main__':\n    leak()\n```\n\nThere are objects here that only get garbage collected when the cyclic GC runs. What's the solution here, break cycle explicitly in `__del__` so the Python memory allocator stops screwing us?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12021083",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-12021083",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 12021083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDIxMDgz",
    "user": {
      "login": "cournape",
      "id": 25111,
      "node_id": "MDQ6VXNlcjI1MTEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25111?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cournape",
      "html_url": "https://github.com/cournape",
      "followers_url": "https://api.github.com/users/cournape/followers",
      "following_url": "https://api.github.com/users/cournape/following{/other_user}",
      "gists_url": "https://api.github.com/users/cournape/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cournape/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cournape/subscriptions",
      "organizations_url": "https://api.github.com/users/cournape/orgs",
      "repos_url": "https://api.github.com/users/cournape/repos",
      "events_url": "https://api.github.com/users/cournape/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cournape/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-08T22:31:21Z",
    "updated_at": "2013-01-08T22:31:21Z",
    "author_association": "NONE",
    "body": "Can you try this:\n\n``` python\nfrom ctypes import cdll, CDLL\n\nimport pandas as pd\nimport numpy as np\n\narr = np.random.randn(100000, 5)\n\ncdll.LoadLibrary(\"libc.so.6\")\nlibc = CDLL(\"libc.so.6\")\n\ndef leak():\n    for i in xrange(10000):\n        libc.malloc_trim(0)\n        df = pd.DataFrame(arr.copy())\n        result = df.xs(1000)\n        # result = df.ix[5000]\n\nif __name__ == '__main__':\n    leak()\n```\n\nI suspect this has nothing to do with python, but that would confirm it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12021612",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-12021612",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 12021612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDIxNjEy",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-08T22:44:04Z",
    "updated_at": "2013-01-08T22:44:04Z",
    "author_association": "MEMBER",
    "body": "Yeah, that seemed to do the trick. Memory usage 450MB after running that in IPython, then malloc_trim freed 400MB. Very pernicious\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15039241",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-15039241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 15039241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDM5MjQx",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-18T04:53:35Z",
    "updated_at": "2013-03-18T04:53:35Z",
    "author_association": "NONE",
    "body": "Following the `malloc_trim` lead upstream, this looks like a glibc optimization gone awry.\nxref:\nhttp://sourceware.org/bugzilla/show_bug.cgi?id=14827\n\nsee \"fastbins\" comment.\n\n``` python\nIn [1]: from ctypes import Structure,c_int,cdll,CDLL\n   ...: class MallInfo(Structure):   \n   ...:     _fields_ =[\n   ...:               ( 'arena',c_int ),  #  /* Non-mmapped space allocated (bytes) */\n   ...:            ('ordblks',c_int  ),# /* Number of free chunks */\n   ...:            (    'smblks',c_int ),  # /* Number of free fastbin blocks */\n   ...:            (    'hblks',c_int  ),  #/* Number of mmapped regions */\n   ...:            (    'hblkhd' ,c_int ), #/* Space allocated in mmapped regions (bytes) */\n   ...:            (    'usmblks' ,c_int), # /* Maximum total allocated space (bytes) */\n   ...:            (    'fsmblks' ,c_int) ,#/* Space in freed fastbin blocks (bytes) */\n   ...:            (    'uordblks' ,c_int),# /* Total allocated space (bytes) */\n   ...:            (    'fordblks',c_int ),# /* Total free space (bytes) */\n   ...:            (    'keepcost',c_int )# /* Top-most, releasable space (bytes) */\n   ...:          ]\n   ...:     def __repr__(self):\n   ...:         return \"\\n\".join([\"%s:%d\" % (k,getattr(self,k)) for k,v in self._fields_])\n   ...: \n   ...: cdll.LoadLibrary(\"libc.so.6\")\n   ...: libc = CDLL(\"libc.so.6\")\n   ...: mallinfo=libc.mallinfo\n   ...: mallinfo.restype=MallInfo\n   ...: libc.malloc_trim(0)\n   ...: mallinfo().fsmblks\nOut[1]: 0\n\nIn [2]: import numpy as np\n   ...: import pandas as pd\n   ...: arr = np.random.randn(100000, 5)\n   ...: def leak():\n   ...:     for i in xrange(10000):\n   ...:         df = pd.DataFrame(arr.copy())\n   ...:         result = df.xs(1000)\n   ...: leak()\n   ...: mallinfo().fsmblks\nOut[2]: 128\n\nIn [3]: libc.malloc_trim(0)\n   ...: mallinfo().fsmblks\nOut[3]: 0\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15569037",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-15569037",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 15569037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NTY5MDM3",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-28T05:09:16Z",
    "updated_at": "2013-03-28T05:09:16Z",
    "author_association": "MEMBER",
    "body": "Won't fix then. Maybe we should add some helper functions to pandas someday to do the malloc trimming\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/397629958",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-397629958",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 397629958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzYyOTk1OA==",
    "user": {
      "login": "kuraga",
      "id": 1063219,
      "node_id": "MDQ6VXNlcjEwNjMyMTk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1063219?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kuraga",
      "html_url": "https://github.com/kuraga",
      "followers_url": "https://api.github.com/users/kuraga/followers",
      "following_url": "https://api.github.com/users/kuraga/following{/other_user}",
      "gists_url": "https://api.github.com/users/kuraga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kuraga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kuraga/subscriptions",
      "organizations_url": "https://api.github.com/users/kuraga/orgs",
      "repos_url": "https://api.github.com/users/kuraga/repos",
      "events_url": "https://api.github.com/users/kuraga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kuraga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-15T13:59:20Z",
    "updated_at": "2018-06-15T13:59:20Z",
    "author_association": "NONE",
    "body": "Entry in FAQ, maybe?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/415177442",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-415177442",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 415177442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTE3NzQ0Mg==",
    "user": {
      "login": "alanjds",
      "id": 155623,
      "node_id": "MDQ6VXNlcjE1NTYyMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/155623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alanjds",
      "html_url": "https://github.com/alanjds",
      "followers_url": "https://api.github.com/users/alanjds/followers",
      "following_url": "https://api.github.com/users/alanjds/following{/other_user}",
      "gists_url": "https://api.github.com/users/alanjds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alanjds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alanjds/subscriptions",
      "organizations_url": "https://api.github.com/users/alanjds/orgs",
      "repos_url": "https://api.github.com/users/alanjds/repos",
      "events_url": "https://api.github.com/users/alanjds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alanjds/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-22T20:58:19Z",
    "updated_at": "2018-08-22T20:58:19Z",
    "author_association": "NONE",
    "body": "For the record, we (+@sbneto) are using this in preduction for a bit of time, and is doing very good:\r\n```python\r\n# monkeypatches.py\r\n\r\n# Solving memory leak problem in pandas\r\n# https://github.com/pandas-dev/pandas/issues/2659#issuecomment-12021083\r\nimport pandas as pd\r\nfrom ctypes import cdll, CDLL\r\ntry:\r\n    cdll.LoadLibrary(\"libc.so.6\")\r\n    libc = CDLL(\"libc.so.6\")\r\n    libc.malloc_trim(0)\r\nexcept (OSError, AttributeError):\r\n    libc = None\r\n\r\n__old_del = getattr(pd.DataFrame, '__del__', None)\r\n\r\ndef __new_del(self):\r\n    if __old_del:\r\n        __old_del(self)\r\n    libc.malloc_trim(0)\r\n\r\nif libc:\r\n    print('Applying monkeypatch for pd.DataFrame.__del__', file=sys.stderr)\r\n    pd.DataFrame.__del__ = __new_del\r\nelse:\r\n    print('Skipping monkeypatch for pd.DataFrame.__del__: libc or malloc_trim() not found', file=sys.stderr)\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427878075",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-427878075",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 427878075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg3ODA3NQ==",
    "user": {
      "login": "kuraga",
      "id": 1063219,
      "node_id": "MDQ6VXNlcjEwNjMyMTk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1063219?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kuraga",
      "html_url": "https://github.com/kuraga",
      "followers_url": "https://api.github.com/users/kuraga/followers",
      "following_url": "https://api.github.com/users/kuraga/following{/other_user}",
      "gists_url": "https://api.github.com/users/kuraga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kuraga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kuraga/subscriptions",
      "organizations_url": "https://api.github.com/users/kuraga/orgs",
      "repos_url": "https://api.github.com/users/kuraga/repos",
      "events_url": "https://api.github.com/users/kuraga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kuraga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-08T15:27:18Z",
    "updated_at": "2018-10-08T16:44:22Z",
    "author_association": "NONE",
    "body": "@alanjds thanks very much!\r\n\r\nBut there are other affected operations :-(\r\n\r\nIt's VERY strange that's issue above (issue of  glibc) doesn't have any reactions. It affects ALL the environment of Linux PCs and servers. And... Nothing!!!\r\n\r\nI know, you'll say me: ok, write a patch! I'll do it (UPD: but it'll be strange cause I know nothing about glibc code). But even nobody knows it.\r\n\r\nEverybody say: KDE leaks. Who know - why?! Nobody!\r\n\r\nOpen source? For shame! Sorry but it's true for this situation.\r\n\r\nP.S. http://sourceware.org/bugzilla/show_bug.cgi?id=14827"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427887701",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-427887701",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 427887701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg4NzcwMQ==",
    "user": {
      "login": "alanjds",
      "id": 155623,
      "node_id": "MDQ6VXNlcjE1NTYyMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/155623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alanjds",
      "html_url": "https://github.com/alanjds",
      "followers_url": "https://api.github.com/users/alanjds/followers",
      "following_url": "https://api.github.com/users/alanjds/following{/other_user}",
      "gists_url": "https://api.github.com/users/alanjds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alanjds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alanjds/subscriptions",
      "organizations_url": "https://api.github.com/users/alanjds/orgs",
      "repos_url": "https://api.github.com/users/alanjds/repos",
      "events_url": "https://api.github.com/users/alanjds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alanjds/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-08T15:55:52Z",
    "updated_at": "2018-10-08T15:55:52Z",
    "author_association": "NONE",
    "body": "I do believe in you. 2 years and no move on that side :/\r\n\r\nI say to fix on this side and put a huge comment of blame, because forking there looks unfeasible."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456696814",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-456696814",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 456696814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjY5NjgxNA==",
    "user": {
      "login": "tchristensenowlet",
      "id": 39919276,
      "node_id": "MDQ6VXNlcjM5OTE5Mjc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/39919276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tchristensenowlet",
      "html_url": "https://github.com/tchristensenowlet",
      "followers_url": "https://api.github.com/users/tchristensenowlet/followers",
      "following_url": "https://api.github.com/users/tchristensenowlet/following{/other_user}",
      "gists_url": "https://api.github.com/users/tchristensenowlet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tchristensenowlet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tchristensenowlet/subscriptions",
      "organizations_url": "https://api.github.com/users/tchristensenowlet/orgs",
      "repos_url": "https://api.github.com/users/tchristensenowlet/repos",
      "events_url": "https://api.github.com/users/tchristensenowlet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tchristensenowlet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T07:21:09Z",
    "updated_at": "2019-01-23T07:21:09Z",
    "author_association": "NONE",
    "body": "@alanjds Your code fixed a problem for me that was causing a major headache. Would you be willing to explain what the default pandas behavior is and how your code fixes it?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/457193523",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-457193523",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 457193523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzE5MzUyMw==",
    "user": {
      "login": "xhochy",
      "id": 70274,
      "node_id": "MDQ6VXNlcjcwMjc0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/70274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xhochy",
      "html_url": "https://github.com/xhochy",
      "followers_url": "https://api.github.com/users/xhochy/followers",
      "following_url": "https://api.github.com/users/xhochy/following{/other_user}",
      "gists_url": "https://api.github.com/users/xhochy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xhochy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xhochy/subscriptions",
      "organizations_url": "https://api.github.com/users/xhochy/orgs",
      "repos_url": "https://api.github.com/users/xhochy/repos",
      "events_url": "https://api.github.com/users/xhochy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xhochy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-24T13:19:57Z",
    "updated_at": "2019-01-24T13:19:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "You can also work around this issue by switching to `jemalloc` as your default allocator. Instead of `python script.py`, run `LD_PRELOAD=/usr/lib/libjemalloc.so python script.py`. Note that the path to `libjemalloc.so` may be different on your system and that you first need to install it with your package manager."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/457358521",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2659#issuecomment-457358521",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2659",
    "id": 457358521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzM1ODUyMQ==",
    "user": {
      "login": "sbneto",
      "id": 7468093,
      "node_id": "MDQ6VXNlcjc0NjgwOTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7468093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sbneto",
      "html_url": "https://github.com/sbneto",
      "followers_url": "https://api.github.com/users/sbneto/followers",
      "following_url": "https://api.github.com/users/sbneto/following{/other_user}",
      "gists_url": "https://api.github.com/users/sbneto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sbneto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sbneto/subscriptions",
      "organizations_url": "https://api.github.com/users/sbneto/orgs",
      "repos_url": "https://api.github.com/users/sbneto/repos",
      "events_url": "https://api.github.com/users/sbneto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sbneto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-24T21:12:35Z",
    "updated_at": "2019-01-24T21:12:35Z",
    "author_association": "NONE",
    "body": "@tchristensenowlet The problem seems to be in the `malloc` code of `glibc`. Apparently, the `free` implementation there does not respect a flag that should issue `malloc_trim` after a certain threshold, as you can see in @ghost's link. Therefore, `malloc_trim` is never called and memory leaks. What we did was just to manually call `malloc_trim` if the lib is available in the system. We call it in the `__del__()` method, that is executed when the object is garbage collected."
  }
]
