[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366415185",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19585#issuecomment-366415185",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19585",
    "id": 366415185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjQxNTE4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-17T04:17:21Z",
    "updated_at": "2018-02-17T04:17:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Something like this may work, but it'd be nice to clean things up quite a bit.\r\n\r\n```diff\r\ndiff --git a/pandas/tests/io/test_parquet.py b/pandas/tests/io/test_parquet.py\r\nindex 11cbea8ce..69b651839 100644\r\n--- a/pandas/tests/io/test_parquet.py\r\n+++ b/pandas/tests/io/test_parquet.py\r\n@@ -154,10 +154,46 @@ def check_round_trip(df, engine=None, path=None,\r\n         write_kwargs['engine'] = engine\r\n         read_kwargs['engine'] = engine\r\n \r\n+    fastparquet_make_block_dtype = (\r\n+        # Use of deprecated `dtype` in `make_block` that's hit only for\r\n+        # bool dtypes with no Nones.\r\n+        engine == 'fastparquet' and\r\n+        LooseVersion(fastparquet.__version__) == LooseVersion(\"0.1.4\") and\r\n+        any(pd.api.types.is_bool_dtype(df[col]) for col in df.columns)\r\n+    )\r\n+\r\n+    if (engine == 'pyarrow' and\r\n+            LooseVersion(pyarrow.__version__) <= LooseVersion(\"0.8.0\") and\r\n+            any(pd.api.types.is_datetime64tz_dtype(dtype)\r\n+                for dtype in df.dtypes)):\r\n+        # Use of deprecated fastpath in make_block\r\n+        # Deprecated in pandas 0.23 and removed in pyarrow 0.9\r\n+        # Remove this when all pyarrow builds >= 0.9\r\n+        warning_type = DeprecationWarning\r\n+    # elif (engine == 'fastparquet' and\r\n+    #         LooseVersion(fastparquet.__version__) == LooseVersion('0.1.3')):\r\n+    #     warning_type = DeprecationWarning\r\n+    elif (engine == 'fastparquet' and\r\n+          LooseVersion(fastparquet.__version__) <= LooseVersion(\"0.1.4\") and\r\n+          LooseVersion(np.__version__) >= LooseVersion(\"1.14.0\") and\r\n+          df.select_dtypes(['bool', 'object'])\r\n+            .isin([True, False]).any().any()):\r\n+        # use of deprecated np.fromstring for boolean columns\r\n+        # Deprecated in numpy 1.14\r\n+        # Used in fastparquet <= 0.1.4\r\n+        # Remove when all fastparquet builds >= 0.1.5\r\n+        # https://github.com/dask/fastparquet/issues/302\r\n+        warning_type = DeprecationWarning\r\n+    elif fastparquet_make_block_dtype:\r\n+        warning_type = DeprecationWarning\r\n+    else:\r\n+        warning_type = None\r\n+\r\n     def compare(repeat):\r\n         for _ in range(repeat):\r\n             df.to_parquet(path, **write_kwargs)\r\n-            with catch_warnings(record=True):\r\n+            with tm.assert_produces_warning(warning_type,\r\n+                                            check_stacklevel=False):\r\n                 actual = read_parquet(path, **read_kwargs)\r\n             tm.assert_frame_equal(expected, actual,\r\n                                   check_names=check_names)\r\n@@ -224,7 +260,17 @@ def test_cross_engine_pa_fp(df_cross_compat, pa, fp):\r\n     with tm.ensure_clean() as path:\r\n         df.to_parquet(path, engine=pa, compression=None)\r\n \r\n-        result = read_parquet(path, engine=fp)\r\n+        if (LooseVersion(fastparquet.__version__) <= LooseVersion('0.1.4') and\r\n+                LooseVersion(np.__version__) >= LooseVersion('1.14.0')):\r\n+            # fastparquet used np.fromstring, deprecated in numpy 1.14.0\r\n+            expected_warning = DeprecationWarning\r\n+        else:\r\n+            expected_warning = None\r\n+\r\n+        with tm.assert_produces_warning(expected_warning,\r\n+                                        check_stacklevel=False):\r\n+            result = read_parquet(path, engine=fp)\r\n+\r\n         tm.assert_frame_equal(result, df)\r\n \r\n         result = read_parquet(path, engine=fp, columns=['a', 'd'])\r\n```"
  }
]
