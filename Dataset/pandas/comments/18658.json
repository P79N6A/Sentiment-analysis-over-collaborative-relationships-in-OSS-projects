[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349597487",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18658#issuecomment-349597487",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18658",
    "id": 349597487,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTU5NzQ4Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T10:25:18Z",
    "updated_at": "2017-12-06T10:25:18Z",
    "author_association": "MEMBER",
    "body": "A bit beside your point, but what version of pandas are you using? Because I do not get a dataframe for the first example:\r\n\r\n```\r\nIn [13]: test = pd.Series(range(10))\r\n\r\nIn [14]: result = test.apply(lambda x: (range(x)))\r\n\r\nIn [15]: result\r\nOut[15]: \r\n0                             ()\r\n1                            (0)\r\n2                         (0, 1)\r\n3                      (0, 1, 2)\r\n4                   (0, 1, 2, 3)\r\n5                (0, 1, 2, 3, 4)\r\n6             (0, 1, 2, 3, 4, 5)\r\n7          (0, 1, 2, 3, 4, 5, 6)\r\n8       (0, 1, 2, 3, 4, 5, 6, 7)\r\n9    (0, 1, 2, 3, 4, 5, 6, 7, 8)\r\ndtype: object\r\n\r\nIn [16]: type(result)\r\nOut[16]: pandas.core.series.Series\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349599340",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18658#issuecomment-349599340",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18658",
    "id": 349599340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTU5OTM0MA==",
    "user": {
      "login": "AKuederle",
      "id": 10776763,
      "node_id": "MDQ6VXNlcjEwNzc2NzYz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10776763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AKuederle",
      "html_url": "https://github.com/AKuederle",
      "followers_url": "https://api.github.com/users/AKuederle/followers",
      "following_url": "https://api.github.com/users/AKuederle/following{/other_user}",
      "gists_url": "https://api.github.com/users/AKuederle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AKuederle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AKuederle/subscriptions",
      "organizations_url": "https://api.github.com/users/AKuederle/orgs",
      "repos_url": "https://api.github.com/users/AKuederle/repos",
      "events_url": "https://api.github.com/users/AKuederle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AKuederle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T10:32:40Z",
    "updated_at": "2017-12-06T10:32:40Z",
    "author_association": "NONE",
    "body": "My bad.. I messed up the first example. Should work now as described"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349750033",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18658#issuecomment-349750033",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18658",
    "id": 349750033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTc1MDAzMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T19:34:22Z",
    "updated_at": "2017-12-06T19:34:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you say a bit more about why you want / would expect this? I'd think that for something like\r\n\r\n```python\r\nIn [19]: df = pd.DataFrame({\"A\": [pd.Series([0, 1])], 'B': [pd.Series([1, 1])]})\r\n```\r\n\r\npandas is currently doing the correct thing. Perhaps I misunderstand."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/349794946",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18658#issuecomment-349794946",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18658",
    "id": 349794946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTc5NDk0Ng==",
    "user": {
      "login": "AKuederle",
      "id": 10776763,
      "node_id": "MDQ6VXNlcjEwNzc2NzYz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10776763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AKuederle",
      "html_url": "https://github.com/AKuederle",
      "followers_url": "https://api.github.com/users/AKuederle/followers",
      "following_url": "https://api.github.com/users/AKuederle/following{/other_user}",
      "gists_url": "https://api.github.com/users/AKuederle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AKuederle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AKuederle/subscriptions",
      "organizations_url": "https://api.github.com/users/AKuederle/orgs",
      "repos_url": "https://api.github.com/users/AKuederle/repos",
      "events_url": "https://api.github.com/users/AKuederle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AKuederle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T22:23:52Z",
    "updated_at": "2017-12-06T22:23:52Z",
    "author_association": "NONE",
    "body": "I guess the main reason is that the behavior felt inconsistent to the behavior of Series. I found it quite useful that returning a Series from an apply on Series automatically returns a DataFrame. This felt very natural. Applying the same concept to a DataFrame I kind of expected it to also \"increase\" its dimension. So basically from a 2D object to a 3D object.\r\n\r\nGiven your example, I can see that a default behavior of just creating a MultiIndex object might not always be obvious. So maybe a better solution for the idea I have would be on the side of the apply functionalatiy. If e.g. the applymap method had an \"upcast\" parameter that would try to create a MultiIndex object based on the return value. Or a method on the DataFrame itself, that tries to convert it into a MultiIndex object by checking if its individual value could be converted in a Series.\r\n\r\nYou can currently do the same by converting the DataFrame to a Series with an Multiindex:\r\n```\r\ntest = pd.DataFrame([list(range(10))]*3)\r\nresult = test.unstack().apply(lambda x: pd.Series((range(x)))).unstack()\r\nresult\r\n```\r\n\r\nBut that is not really straight forward"
  }
]
