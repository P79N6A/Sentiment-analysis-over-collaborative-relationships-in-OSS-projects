[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6171366",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1412#issuecomment-6171366",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1412",
    "id": 6171366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzEzNjY=",
    "user": {
      "login": "grsr",
      "id": 1210462,
      "node_id": "MDQ6VXNlcjEyMTA0NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1210462?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grsr",
      "html_url": "https://github.com/grsr",
      "followers_url": "https://api.github.com/users/grsr/followers",
      "following_url": "https://api.github.com/users/grsr/following{/other_user}",
      "gists_url": "https://api.github.com/users/grsr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grsr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grsr/subscriptions",
      "organizations_url": "https://api.github.com/users/grsr/orgs",
      "repos_url": "https://api.github.com/users/grsr/repos",
      "events_url": "https://api.github.com/users/grsr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grsr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-07T08:55:22Z",
    "updated_at": "2012-06-07T08:55:22Z",
    "author_association": "NONE",
    "body": "I've been investigating this a bit further, and it looks like this bug isn't related to using a fill_value other than NaN (unlike the previous issue I found with SparseSeries), as I get a similar result using NaN as the fill_value:\n\n``` python\n\nIn [7]: sparse_df = DataFrame({'flag': [np.nan, 0, 1]}).to_sparse()\n\nIn [8]: sparse_df.flag.isin([1.])\nOut[8]: \n0    False\n1     True\n2    False\nName: flag\n```\n\nI think what's going on is that the logic checking if each value from the array is in the query set is only checking through the reduced array of non-sparse data and ignoring the sparse 'slots'. I am having trouble digging deeper because a lot of the logic appears to be implemented in cython or up in numpy somewhere (and this stuff is all rather new to me), so I can't trace through it with pdb. I wonder if isin (and possibly other similar methods) needs to be overridden in the SparseSeries class so that it can use the sparse index? Any pointers on where to look next would be very welcome. Using sparse data structures is giving me significant savings on memory and disk usage and is making some analyses possible that I couldn't do before, so it would be really good to get them working on a par with their dense counterparts.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6173559",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1412#issuecomment-6173559",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1412",
    "id": 6173559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzM1NTk=",
    "user": {
      "login": "grsr",
      "id": 1210462,
      "node_id": "MDQ6VXNlcjEyMTA0NjI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1210462?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grsr",
      "html_url": "https://github.com/grsr",
      "followers_url": "https://api.github.com/users/grsr/followers",
      "following_url": "https://api.github.com/users/grsr/following{/other_user}",
      "gists_url": "https://api.github.com/users/grsr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grsr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grsr/subscriptions",
      "organizations_url": "https://api.github.com/users/grsr/orgs",
      "repos_url": "https://api.github.com/users/grsr/repos",
      "events_url": "https://api.github.com/users/grsr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grsr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-07T11:17:20Z",
    "updated_at": "2012-06-07T11:17:20Z",
    "author_association": "NONE",
    "body": "Here is a straw man implementation of isin for the SparseSeries class which seems to work for my test data at least. The method returns a (dense) boolean Series just like the Series.isin method, but as per the inline comment, I wonder if it should be returning a boolean SparseSeries instead? Any comments welcome. I could submit a proper pull request for this, but I don't feel like I understand the code well enough yet, so I wonder if the developers could include it (or something along these lines) if this seems like a reasonable approach.\n\n``` python\ndef isin(self, values):\n    \"\"\"\n    Return boolean Series showing whether each element in the \n    SparseSeries is exactly contained in the passed sequence of \n    values\n\n    Parameters\n    ----------\n    values : sequence\n\n    Returns\n    -------\n    isin : Series (boolean dtype)\n    \"\"\"\n\n    value_set = set(values)\n\n    # call the superclass to get the result for the \n    # non-sparse values\n    non_sparse_result = super(SparseArray, self).isin(value_set)\n\n    # construct our result array, with default values\n    # set according to whether our fill_value is in \n    # values\n    result = np.empty(len(self), dtype=np.bool_)\n    result.fill(self.fill_value in value_set)\n\n    # and fill in the rest with the results from the\n    # non-sparse entries\n    int_index = self.sp_index.to_int_index()\n    result.put(int_index.indices, non_sparse_result)\n\n    # XXX: should we be returning a boolean SparseSeries \n    # with the fill_value set to \n    # (self.fill_value in value_set)?\n\n    return Series(result, self.index, name=self.name)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6193971",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1412#issuecomment-6193971",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1412",
    "id": 6193971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTM5NzE=",
    "user": {
      "login": "changhiskhan",
      "id": 759245,
      "node_id": "MDQ6VXNlcjc1OTI0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/759245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/changhiskhan",
      "html_url": "https://github.com/changhiskhan",
      "followers_url": "https://api.github.com/users/changhiskhan/followers",
      "following_url": "https://api.github.com/users/changhiskhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/changhiskhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/changhiskhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/changhiskhan/subscriptions",
      "organizations_url": "https://api.github.com/users/changhiskhan/orgs",
      "repos_url": "https://api.github.com/users/changhiskhan/repos",
      "events_url": "https://api.github.com/users/changhiskhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/changhiskhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-08T03:49:06Z",
    "updated_at": "2012-06-08T03:49:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "In [1]: sparse_df = DataFrame({'flag': [1., 0., 1.]}).to_sparse(fill_value=0.)\n\nIn [2]: sparse_df[sparse_df.flag.isin([1.])]\nOut[2]: \n   flag\n0     1\n2     1\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6193989",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1412#issuecomment-6193989",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1412",
    "id": 6193989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTM5ODk=",
    "user": {
      "login": "changhiskhan",
      "id": 759245,
      "node_id": "MDQ6VXNlcjc1OTI0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/759245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/changhiskhan",
      "html_url": "https://github.com/changhiskhan",
      "followers_url": "https://api.github.com/users/changhiskhan/followers",
      "following_url": "https://api.github.com/users/changhiskhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/changhiskhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/changhiskhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/changhiskhan/subscriptions",
      "organizations_url": "https://api.github.com/users/changhiskhan/orgs",
      "repos_url": "https://api.github.com/users/changhiskhan/repos",
      "events_url": "https://api.github.com/users/changhiskhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/changhiskhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-08T03:50:27Z",
    "updated_at": "2012-06-08T03:50:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the bug report!\n"
  }
]
