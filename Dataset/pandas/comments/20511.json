[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377015122",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20511#issuecomment-377015122",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20511",
    "id": 377015122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzAxNTEyMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T19:55:10Z",
    "updated_at": "2018-03-28T19:55:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's not entirely clear what you're trying to do. For\r\n\r\n> I want convert multiple columns to datetimes:\r\n\r\nyou can use `apply` and `to_datetime`\r\n\r\n```python\r\nIn [15]: df2 = df.apply(pd.to_datetime, errors='coerce')\r\n\r\nIn [16]: df2.dtypes\r\nOut[16]:\r\ndate0    datetime64[ns]\r\ndate1    datetime64[ns]\r\ndate2    datetime64[ns]\r\ndate3    datetime64[ns]\r\ndate4    datetime64[ns]\r\ndate5    datetime64[ns]\r\ndtype: object\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377128228",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20511#issuecomment-377128228",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20511",
    "id": 377128228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzEyODIyOA==",
    "user": {
      "login": "jesrael",
      "id": 10682573,
      "node_id": "MDQ6VXNlcjEwNjgyNTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10682573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesrael",
      "html_url": "https://github.com/jesrael",
      "followers_url": "https://api.github.com/users/jesrael/followers",
      "following_url": "https://api.github.com/users/jesrael/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesrael/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesrael/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesrael/subscriptions",
      "organizations_url": "https://api.github.com/users/jesrael/orgs",
      "repos_url": "https://api.github.com/users/jesrael/repos",
      "events_url": "https://api.github.com/users/jesrael/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesrael/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T05:43:56Z",
    "updated_at": "2018-03-29T05:43:56Z",
    "author_association": "NONE",
    "body": "@TomAugspurger - soory, maybe miss:\r\n\r\n    But assign back convert datetimes to unix dates. Also I test loc and same problem.\r\n\r\nIt converting nice if assign to new DataFrame, but failed if assign to subset, then datetimes columns are converting to unix datetime? Or something else? \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377195415",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20511#issuecomment-377195415",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20511",
    "id": 377195415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzE5NTQxNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T10:38:06Z",
    "updated_at": "2018-03-29T10:38:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure I understand. You might want to try searching stackoverflow\nunder the pandas tag: https://stackoverflow.com/questions/tagged/pandas\n\nOn Thu, Mar 29, 2018 at 12:44 AM, jesrael <notifications@github.com> wrote:\n\n> @TomAugspurger <https://github.com/TomAugspurger> - soory, maybe miss:\n>\n> But assign back convert datetimes to unix dates. Also I test loc and same problem.\n>\n> It converting nice if assign to new DataFrame, but failed if assign to\n> subset, then datetimes columns are converting to unix datetime? Or\n> something else?\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/20511#issuecomment-377128228>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIrIAYurh0yc7sJ_ykjEtqZzAP1q5ks5tjHShgaJpZM4S-GLA>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377215746",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20511#issuecomment-377215746",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20511",
    "id": 377215746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzIxNTc0Ng==",
    "user": {
      "login": "jesrael",
      "id": 10682573,
      "node_id": "MDQ6VXNlcjEwNjgyNTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10682573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesrael",
      "html_url": "https://github.com/jesrael",
      "followers_url": "https://api.github.com/users/jesrael/followers",
      "following_url": "https://api.github.com/users/jesrael/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesrael/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesrael/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesrael/subscriptions",
      "organizations_url": "https://api.github.com/users/jesrael/orgs",
      "repos_url": "https://api.github.com/users/jesrael/repos",
      "events_url": "https://api.github.com/users/jesrael/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesrael/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T12:12:24Z",
    "updated_at": "2018-03-29T12:12:24Z",
    "author_association": "NONE",
    "body": "@TomAugspurger  - Hmmm, I am user https://stackoverflow.com/users/2901002/jezrael\r\n\r\nI try explain more:\r\n\r\n    df = pd.DataFrame(np.random.choice(['2015-01-01','2016-01-01'], size=(5,6))).add_prefix('date')\r\n    print (df)\r\n            date0       date1       date2       date3       date4       date5\r\n    0  2015-01-01  2016-01-01  2015-01-01  2015-01-01  2016-01-01  2016-01-01\r\n    1  2016-01-01  2016-01-01  2016-01-01  2015-01-01  2016-01-01  2015-01-01\r\n    2  2015-01-01  2015-01-01  2016-01-01  2016-01-01  2016-01-01  2015-01-01\r\n    3  2016-01-01  2015-01-01  2015-01-01  2015-01-01  2015-01-01  2015-01-01\r\n    4  2015-01-01  2016-01-01  2015-01-01  2016-01-01  2016-01-01  2015-01-01\r\n    \r\n    i= range(0,6,2)\r\n    df.iloc[:,i] = df.iloc[:,i].apply(lambda x: pd.to_datetime(x, errors='coerce'))\r\n\r\nI get:\r\n\r\n    print (df.dtypes)\r\n    date0    object\r\n    date1    object\r\n    date2    object\r\n    date3    object\r\n    date4    object\r\n    date5    object\r\n    dtype: object\r\n\r\nand I expected:\r\n\r\n    print (df.dtypes)\r\n    date0    datetime64[ns]\r\n    date1    object\r\n    date2    datetime64[ns]\r\n    date3    object\r\n    date4    datetime64[ns]\r\n    date5    object\r\n    dtype: object\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442669003",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20511#issuecomment-442669003",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20511",
    "id": 442669003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjY2OTAwMw==",
    "user": {
      "login": "shippy",
      "id": 1340280,
      "node_id": "MDQ6VXNlcjEzNDAyODA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1340280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shippy",
      "html_url": "https://github.com/shippy",
      "followers_url": "https://api.github.com/users/shippy/followers",
      "following_url": "https://api.github.com/users/shippy/following{/other_user}",
      "gists_url": "https://api.github.com/users/shippy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shippy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shippy/subscriptions",
      "organizations_url": "https://api.github.com/users/shippy/orgs",
      "repos_url": "https://api.github.com/users/shippy/repos",
      "events_url": "https://api.github.com/users/shippy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shippy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T01:19:20Z",
    "updated_at": "2018-11-29T01:19:20Z",
    "author_association": "NONE",
    "body": "@TomAugspurger This really looks like a bug. Let's see if I can explain it more clearly.\r\n\r\nThe bug presents in two ways:\r\n\r\n1. `.apply(pd.to_datetime)` called on a multi-column slice converts the columns to `datetime64` after the call, but _not during the assignment to the same multi-column slice_.\r\n2.  Further, assignment of the result of multi-column `.apply(pd.to_datetime)` transforms the datetime string to a nanosecond timestamp.\r\n\r\nThis violates expectations in two ways:\r\n\r\n1. The column doesn't _look_ as expected, and there's no hint as to how to get the expected format back.\r\n2. The column doesn't _behave_ as expected, e.g. cannot be subtracted from other datetime columns,\r\n\r\nTo demonstrate, let's set up a six-column DataFrame. The leftmost column will stay as-is, for side-by-side comparison; the rest will have `pd.to_datetime` called upon them in various forms. All five rightmost columns should all be `datetime64` and equal to one another by the end of the exercise. Only the three rightmost will. \r\n\r\nWe'll recreate the bug in `apply_multislice1` and `apply_multislice2`.\r\n\r\n```python\r\ntest_df = (pd.DataFrame(np.random.choice(['2016-01-01'], size=(2, 6)))\r\n        .add_prefix('date')\r\n        .rename(columns={\r\n            'date0': 'original',\r\n            'date1': 'apply_multislice1',\r\n            'date2': 'apply_multislice2',\r\n            'date3': 'apply_unislice',\r\n            'date4': 'apply_noslice',\r\n            'date5': 'assigned'}))\r\n```\r\n```\r\n     original apply_multislice1 apply_multislice2 apply_unislice apply_noslice    assigned\r\n0  2016-01-01        2016-01-01        2016-01-01     2016-01-01    2016-01-01  2016-01-01\r\n1  2016-01-01        2016-01-01        2016-01-01     2016-01-01    2016-01-01  2016-01-01\r\n```\r\n\r\n## Bug demonstration\r\n\r\nI'll quickly demonstrate the case that succeeds without assignment:\r\n\r\n```python\r\nassert (test_df.loc[:, ['apply_multislice1', 'apply_multislice2']].apply(pd.to_datetime) == pd.to_datetime('2016-01-01')).all(axis=None)\r\n```\r\n\r\nIf it's assigned back to itself, however, it changes value to a nanosecond timestamp that still has dtype `object`:\r\n\r\n```python\r\n# Assignment\r\ntest_df.loc[:, ['apply_multislice1', 'apply_multislice2']] = test_df.loc[:, ['apply_multislice1', 'apply_multislice2']].apply(pd.to_datetime)\r\n\r\n# Succeeds, but shouldn't:\r\nassert (test_df.loc[:, ['apply_multislice1', 'apply_multislice2']] == 1451606400000000000).all(axis=None)\r\nassert test_df.loc[:, ['apply_multislice1', 'apply_multislice2']].dtypes.isin([object]).all()\r\n\r\n# Fails, but shouldn't:\r\nassert (test_df.loc[:, ['apply_multislice1', 'apply_multislice2']] == pd.to_datetime('2016-01-01')).all(axis=None)\r\nassert test_df.loc[:, ['apply_multislice1', 'apply_multislice2']].dtypes.isin(['datetime64']).all()\r\n```\r\n\r\n## Variations without bug\r\n\r\nI could think of three other ways to do the datetime conversion - directly, and through `.apply` with different slicing:\r\n\r\n```python\r\ntest_df.loc[:, 'apply_unislice'] = test_df.loc[:, ['apply_unislice']].apply(pd.to_datetime)\r\ntest_df.loc[:, 'apply_noslice'] = test_df.loc[:, 'apply_noslice'].apply(pd.to_datetime)\r\ntest_df.loc[:, 'assigned'] = pd.to_datetime(test_df.loc[:, 'assigned'])\r\n\r\n# Succeeds, as expected:\r\nassert (test_df.loc[:, ['apply_unislice', 'apply_noslice', 'assigned']] == pd.to_datetime('2016-01-01')).all(axis=None)\r\nassert not test_df.loc[:, ['apply_unislice', 'apply_noslice', 'assigned']].dtypes.isin([object]).any(axis=None)\r\n```\r\n\r\n## Final outcome\r\n\r\nAll five rightmost columns should have the same content and dtype, but by now we know they don't.\r\n\r\n```\r\n     original    apply_multislice1    apply_multislice2 apply_unislice apply_noslice   assigned\r\n0  2016-01-01  1451606400000000000  1451606400000000000     2016-01-01    2016-01-01 2016-01-01\r\n1  2016-01-01  1451606400000000000  1451606400000000000     2016-01-01    2016-01-01 2016-01-01\r\noriginal                     object\r\napply_multislice1            object\r\napply_multislice2            object\r\napply_unislice       datetime64[ns]\r\napply_noslice        datetime64[ns]\r\nassigned             datetime64[ns]\r\n```\r\n\r\n## Recovery from the bug\r\n\r\nIf the bugged outcome in `apply_multislice*` is converted _as nanoseconds_ and assigned, `pd.to_datetime` will change dtype correctly, so at least the value wasn't lost.\r\n\r\n```python\r\n# Continuing where we left off: Succeeds, but shouldn't:\r\nassert (test_df.loc[:, ['apply_multislice1', 'apply_multislice2']] == 1451606400000000000).all(axis=None)\r\n# Call pd.to_datetime(unit='ns')\r\ntest_df.loc[:, ['apply_multislice1', 'apply_multislice2']] = test_df.loc[:, ['apply_multislice1', 'apply_multislice2']].apply(pd.to_datetime, unit='ns')\r\n# Operates as expected\r\nassert (test_df.loc[:, ['apply_multislice1', 'apply_multislice2']] == pd.to_datetime('2016-01-01')).all(axis=None)\r\n```\r\n\r\n## Environment\r\n\r\n```\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 2.7.12.final.0\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 4.4.0-137-generic\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: None.None\r\n\r\npandas: 0.23.4\r\npytest: 4.0.0\r\npip: 18.1\r\nsetuptools: 40.6.2\r\nCython: None\r\nnumpy: 1.15.4\r\nscipy: 1.1.0\r\npyarrow: None\r\nxarray: None\r\nIPython: 5.8.0\r\nsphinx: None\r\npatsy: None\r\ndateutil: 2.7.5\r\npytz: 2018.7\r\nblosc: None\r\nbottleneck: None\r\ntables: None\r\nnumexpr: None\r\nfeather: None\r\nmatplotlib: 2.2.3\r\nopenpyxl: None\r\nxlrd: None\r\nxlwt: None\r\nxlsxwriter: None\r\nlxml: None\r\nbs4: None\r\nhtml5lib: None\r\nsqlalchemy: 1.2.14\r\npymysql: None\r\npsycopg2: None\r\njinja2: 2.10\r\ns3fs: None\r\nfastparquet: None\r\npandas_gbq: None\r\npandas_datareader: None\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442681251",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20511#issuecomment-442681251",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20511",
    "id": 442681251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjY4MTI1MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T02:19:31Z",
    "updated_at": "2018-11-29T02:19:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jesrael sorry I missed the fact that *assignment* was the buggy part.\r\n\r\n```python\r\nIn [48]: df = pd.DataFrame({\"A\": ['2015-01-01', '2015-01-02'], 'B': ['2015', '2016']})\r\n\r\nIn [49]: df2 = df.copy()\r\n\r\nIn [50]: df2.iloc[:, [0]] = pd.DataFrame({\"A\": pd.to_datetime(['2015', '2016'])})\r\n\r\nIn [51]: df2\r\nOut[51]:\r\n                     A     B\r\n0  1420070400000000000  2015\r\n1  1451606400000000000  2016\r\n```\r\n\r\nA few observations:\r\n\r\nThis doesn't occur when all of the columns are being updated:\r\n\r\n```python\r\nIn [64]: df2.iloc[:, [0, 1]] = pd.DataFrame({\"A\": pd.to_datetime(['2015', '2016']), 'B': pd.to_datetime(['2015', '2016'])})\r\n\r\nIn [65]: df2\r\nOut[65]:\r\n           A          B\r\n0 2015-01-01 2015-01-01\r\n1 2016-01-01 2016-01-01\r\n```\r\n\r\nThe internal blocks are unsurprisingly incorrect\r\n\r\n```python\r\nIn [69]: df2.iloc[:, [0]] = pd.DataFrame({\"A\": pd.to_datetime(['2015', '2016'])})\r\n\r\nIn [70]: df2._data\r\nOut[70]:\r\nBlockManager\r\nItems: Index(['A', 'B'], dtype='object')\r\nAxis 1: RangeIndex(start=0, stop=2, step=1)\r\nObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object\r\n```\r\n\r\nwe'd like to split that object block so that the newly assigned column becomes a DatetimeBlock."
  }
]
