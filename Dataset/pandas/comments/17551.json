[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330257331",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-330257331",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 330257331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDI1NzMzMQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T15:19:43Z",
    "updated_at": "2017-09-18T15:19:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Typed memorviews won't be helpful, this code operates on a generic ndarray in python-land, regardless of dtype.\r\n\r\nAs you note, this is potentially performance sensitive stuff - it looks like the naive cython solution still has at least one layer of python indirection, though you'd have to follow the macro expansions to check for sure.\r\n```\r\n%%cython -a\r\ncimport numpy as cnp\r\n\r\ndef get_1d(cnp.ndarray arr, Py_ssize_t i):\r\n    return arr[i]\r\n\r\n# generated code for\r\n# arr[i]\r\n__pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1);\r\n```\r\n\r\nSo your best bet (other than leaving it alone, which might be perfectly acceptable!) is probably to wrap the `PyArray_DESCR` macro in cython.  Must be something strange with the refcount semantics on it, it is commented out in the cython includes with a comment to that effect.\r\nhttps://github.com/cython/cython/blob/2c9641a749208dbc405209e367b8a23e1310564d/Cython/Includes/numpy/__init__.pxd#L411\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330267079",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-330267079",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 330267079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDI2NzA3OQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T15:51:48Z",
    "updated_at": "2017-09-18T15:51:48Z",
    "author_association": "MEMBER",
    "body": "Thanks for taking a look at this.  After diving into the numpy include files, I found a way to get at `PyArray_DESCR` and implement in cython:\r\n\r\n```\r\ncdef object get_value_1d(ndarray ap, Py_ssize_t i):\r\n    cdef:\r\n        char* item = <char*>PyArray_DATA(ap) + i * PyArray_STRIDE(ap, 0)\r\n    return PyArray_Scalar(item, PyArray_DESCR(<PyArrayObject*>ap), ap)\r\n```\r\n\r\nThe C code this generates is pretty verbose compared to the original:\r\n\r\n```\r\nstatic PyObject *__pyx_f_4pdsm_6tslibs_4util_get_value_1d(PyArrayObject *__pyx_v_ap, Py_ssize_t __pyx_v_i) {\r\n  char *__pyx_v_item;\r\n  PyObject *__pyx_r = NULL;\r\n  __Pyx_TraceDeclarations\r\n  __Pyx_RefNannyDeclarations\r\n  PyObject *__pyx_t_1 = NULL;\r\n  __Pyx_RefNannySetupContext(\"get_value_1d\", 0);\r\n  __Pyx_TraceCall(\"get_value_1d\", __pyx_f[0], 188, 0, __PYX_ERR(0, 188, __pyx_L1_error));\r\n\r\n  __Pyx_TraceLine(196,0,__PYX_ERR(0, 196, __pyx_L1_error))\r\n  __pyx_v_item = (((char *)PyArray_DATA(__pyx_v_ap)) + (__pyx_v_i * PyArray_STRIDE(__pyx_v_ap, 0)));\r\n\r\n  __Pyx_TraceLine(198,0,__PYX_ERR(0, 198, __pyx_L1_error))\r\n  __Pyx_XDECREF(__pyx_r);\r\n  __pyx_t_1 = PyArray_Scalar(__pyx_v_item, PyArray_DESCR(((PyArrayObject *)__pyx_v_ap)), ((PyObject *)__pyx_v_ap)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n  __pyx_r = __pyx_t_1;\r\n  __pyx_t_1 = 0;\r\n  goto __pyx_L0;\r\n```\r\n\r\nI'm kind of surprised that the verbatim version is so much more complicated than the version generated from `return arr[i]`.\r\n\r\n> So your best bet (other than leaving it alone, which might be perfectly acceptable!)\r\n\r\nLeaving it alone is likely the smart thing to do.  There have been a few recent threads regarding setup.py build dependencies.  I'm increasingly interested in minimizing the points of contact with non-.pyx files."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330276338",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-330276338",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 330276338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDI3NjMzOA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T16:22:48Z",
    "updated_at": "2017-09-18T16:22:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think most of that generated code is line-tracing / profiling stuff."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330307916",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-330307916",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 330307916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDMwNzkxNg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T18:06:03Z",
    "updated_at": "2017-09-18T18:06:03Z",
    "author_association": "MEMBER",
    "body": "src/headers/math.h looks like it exist to define `signbit` on Windows (really guessing here).  Is the version [baked in ](https://github.com/cython/cython/blob/master/Cython/Includes/libc/math.pxd)to cython not compatible?  That is accessible with `from libc.math cimport signbit`.\r\n\r\nSimilarly, if there is any chance that `compat_helper.h` or `helper.h` are no longer needed in this modern era of wonders, that would make my day."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/330318748",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-330318748",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 330318748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDMxODc0OA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T18:44:11Z",
    "updated_at": "2017-09-18T18:44:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, unfortunately that `math.h` shim and others are necessary to support Windows with python 2.7 - it is stuck using an old MSVC that has incomplete C99 support (e.g. no `stdint.h`).  The situation with modern MSVCs and  python 3 is much better, but nothing that can be done while we support 2.\r\nhttps://www.microsoft.com/en-us/download/details.aspx?id=44266\r\n\r\n```python\r\n%%cython\r\nfrom libc.math cimport signbit\r\ndef f(double v):\r\n    return signbit(v)\r\n\r\nerror LNK2019: unresolved external symbol signbit referenced in function  __pyx_...\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/331008077",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-331008077",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 331008077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTAwODA3Nw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-20T23:23:37Z",
    "updated_at": "2017-09-20T23:23:37Z",
    "author_association": "MEMBER",
    "body": "I'll run out of these before long...\r\n\r\n1) What about src/numpy.pxd?  That file appears to be a (slightly out of date) duplicate of the version baked into cython.  `np.get_include()` is added to the `include_dirs` arg in setup.py in a wasn't-obvious-to-me way; it would be nice to disambiguate the different numpy inclusions.\r\n\r\n2) Is the 3.6.1 issue described in compat_helper expected to be reverted at some point?\r\n\r\n3) Is the definition of PANDAS_INLINE in skiplist.h redundant with helper.h?\r\n\r\nBTW the reason I'm interested in reducing non-cython (aside from making the build less fragile) is the hopes of getting `Cython.Coverage` working."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/331009254",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-331009254",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 331009254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTAwOTI1NA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-20T23:31:19Z",
    "updated_at": "2017-09-20T23:31:19Z",
    "author_association": "MEMBER",
    "body": "From `_libs.window.pyx`:\r\n\r\n```\r\ncdef extern from \"../src/headers/math.h\":\r\n    double sqrt(double x) nogil\r\n    int signbit(double) nogil\r\n```\r\nIs that path right?  Is the \"..\" relative to the window.pyx file or something else?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/331009435",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-331009435",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 331009435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTAwOTQzNQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-20T23:32:21Z",
    "updated_at": "2017-09-20T23:32:21Z",
    "author_association": "MEMBER",
    "body": "Are the `libc.math` [bindings](https://github.com/cython/cython/blob/master/Cython/Includes/libc/math.pxd) provided by cython not portable?  (`signbit` is down at the bottom of that page.)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/331190165",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-331190165",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 331190165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTE5MDE2NQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-21T15:20:07Z",
    "updated_at": "2017-09-21T15:20:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Answering the ones I know offhand\r\n\r\n> Is the 3.6.1 issue described in compat_helper expected to be reverted at some point?\r\n\r\nWould have to ref back to the original issue, but I believe this is fixed in 3.7.  But as long as we support 3.6 I believe it has to stay in to keep ABI compat across minor versions - in other words the wheels we build will work in any variation of 3.6.\r\n\r\n> Are the libc.math bindings provided by cython not portable? (signbit is down at the bottom of that page.)\r\n\r\nThey are \"portable\" in the sense they work on any platform with a libc that provides those function, but entirely dependent on the libc.  C-extensions with Python 2.7 on Windows have a specific toolchain requirement (the MSVC 2008 I linked above) which doesn't provide that function.\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/331331313",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-331331313",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 331331313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTMzMTMxMw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T02:12:58Z",
    "updated_at": "2017-09-22T02:12:58Z",
    "author_association": "MEMBER",
    "body": "util.pxd \"imports\" (\"externs\"?) `floatify` from numpy_helper.h, but I don't think floatify exists there.  AFAICT it is defined in parse_helper.h, and is externed into inference.pyx.  Wouldn't this cause a segfault if someone tried to access util.floatify?  Is this OK for a reason I'm missing?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/331332486",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-331332486",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 331332486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTMzMjQ4Ng==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T02:21:27Z",
    "updated_at": "2017-09-22T02:21:27Z",
    "author_association": "MEMBER",
    "body": "Last one for today.  numpy_helper.h defines `get_timedelta64_value`:\r\n\r\n```\r\nPANDAS_INLINE npy_timedelta get_timedelta64_value(PyObject* obj) {\r\n    return ((PyTimedeltaScalarObject*)obj)->obval;\r\n}\r\n```\r\n\r\nAfter some tinkering, this function can be declared directly in cython:\r\n\r\n```\r\ncdef inline npy_timedelta get_timedelta64_value(PyObject* obj) nogil:\r\n    return (<PyTimedeltaScalarObject*>obj).obval\r\n```\r\n\r\nand cythonizing produces the following C:\r\n\r\n```\r\nstatic CYTHON_INLINE npy_timedelta __pyx_f_4pdsm_6tslibs_9npy_dtime_get_timedelta64_value(PyObject *__pyx_v_obj) {\r\n  npy_timedelta __pyx_r;\r\n  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;\r\n  goto __pyx_L0;\r\n  /* function exit code */\r\n  __pyx_L0:;\r\n  return __pyx_r;\r\n}\r\n```\r\n\r\nThe cython-produced C is clearly more verbose than the numpy_helper version.  But is that cruft meaningful or does the compiler render the two versions equivalent?  If there is literally zero performance hit, then there is some upside to using the cython implementation."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/331444392",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-331444392",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 331444392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ0NDM5Mg==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T13:19:45Z",
    "updated_at": "2017-09-22T13:19:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes that likely compiles identically.  That said, only a matter of taste, but I actually find the c version as or more clear - cython isn't being used to any of its strengths (handling refcounts, translating to c-api calls) so not sure there's much benefit in moving it?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/331528149",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17551#issuecomment-331528149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17551",
    "id": 331528149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTUyODE0OQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T18:38:53Z",
    "updated_at": "2017-09-22T18:39:22Z",
    "author_association": "MEMBER",
    "body": "You're almost certainly right that leaving it alone is the best option.  The upsides that I have/had in mind are:\r\n\r\n- cython handles dependencies and re-compiling internally, so the `depends`/`pxdfiles`/`sources`/`include` complexity/confusion in `setup.ext_data` could be reduced if pyx files had no non-pyx dependencies.\r\n\r\n- Suppose hypothetically you wanted to build/test part of `_libs` in isolation (in my case `_libs.tslibs`).  Right now its a hassle.  It would be much easier if all the deps were cython.\r\n\r\n- It would be really nice to get test coverage for `_libs`.  I haven't had much luck getting the Cython.Coverage plugin to work as advertised, but plan to put some time into it before long.\r\n\r\n- As cython's pure-python mode becomes more compatible, flake8 and other tooling become viable for cython modules.\r\n\r\nThe questions here have been pretty thoroughly answered.  I appreciate it.  Feel free to close."
  }
]
