[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383671640",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-383671640",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 383671640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzY3MTY0MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T18:14:25Z",
    "updated_at": "2018-04-23T18:14:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks like the 2.7 failures are relevant.\r\n\r\nThis would need a release note.\r\n\r\nHow's the performance when actually iterating? e.g.\r\n\r\n```python\r\ndf = pd.DataFrame({\"A\": np.arange(100000)})\r\nlist(iter(df.itertuples()))\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383673310",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-383673310",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 383673310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzY3MzMxMA==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T18:19:39Z",
    "updated_at": "2018-04-23T18:21:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Looks like the 2.7 failures are relevant.\r\n\r\nYea, I think I just managed to fix those. I had to import `map` from `pandas.compat`. Testing it locally and I will push once tests finish.\r\n\r\n> This would need a release note.\r\n\r\nWhere does this go? Any instructions anywhere?\r\n\r\n> How's the performance when actually iterating? e.g.\r\n\r\nMemory wise: great. It just has to have one row at a time in memory. CPU wise: it looks like around 2-3x slower than `tolist()`. So `list(series)` vs. `series.tolist()`. I think this is good. So semantics between `list(series)` and `series.tolist()` is preserved, but if you want an optimized version you should call `tolist()` so that it constructs a list in C, and not in Python. Not all uses of iteration is to construct a list.\r\n\r\nOh, and of course. This version immediately starts returning values while before you had to wait for everything to finish. So latency is much lower, while overall time is around 2-3x."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383678745",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-383678745",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 383678745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzY3ODc0NQ==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-04-23T18:38:02Z",
    "updated_at": "2018-12-24T02:21:21Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20796?src=pr&el=h1) Report\n> Merging [#20796](https://codecov.io/gh/pandas-dev/pandas/pull/20796?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/fc7bc3f74d1f5702bf66c519ad190126538a8f5b?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/20796/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/20796?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #20796      +/-   ##\n==========================================\n+ Coverage    92.3%    92.3%   +<.01%     \n==========================================\n  Files         163      163              \n  Lines       51943    51947       +4     \n==========================================\n+ Hits        47946    47951       +5     \n+ Misses       3997     3996       -1\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.71% <100%> (ø)` | :arrow_up: |\n| #single | `42.99% <55.55%> (-0.01%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/20796?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/20796/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `96.91% <100%> (ø)` | :arrow_up: |\n| [pandas/core/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/20796/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYmFzZS5weQ==) | `97.68% <100%> (+0.02%)` | :arrow_up: |\n| [pandas/util/testing.py](https://codecov.io/gh/pandas-dev/pandas/pull/20796/diff?src=pr&el=tree#diff-cGFuZGFzL3V0aWwvdGVzdGluZy5weQ==) | `87.84% <0%> (+0.09%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20796?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/20796?src=pr&el=footer). Last update [fc7bc3f...766ba8f](https://codecov.io/gh/pandas-dev/pandas/pull/20796?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383688415",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-383688415",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 383688415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzY4ODQxNQ==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T19:08:38Z",
    "updated_at": "2018-04-23T19:09:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Correction. I was testing before just iterating directly on `Series`. It seems making tuples has some overhead and underlying changes do not show through. I made more thorough performance evaluation now, averaging over 10 runs and there is not much impact on overall time for regular `itertuples`, but getting first element out is much faster.\r\n\r\nI used this to test both how long it takes to create a list of all tuples, how long it takes to get the first tuple, and how long it takes to get only simple tuples.\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport time\r\n\r\nprint(pd.__path__)\r\n\r\ndef perf(f):\r\n    start = time.perf_counter()\r\n    f()\r\n    end = time.perf_counter()\r\n    return end - start\r\n\r\ndef a(): \r\n    list(iter(df.itertuples()))\r\n\r\ndef b(): \r\n    next(iter(df.itertuples()))\r\n\r\ndef c(): \r\n    list(iter(df.itertuples(index=False, name=None)))\r\n\r\ndf = pd.DataFrame({\"A\": np.arange(10000000)})\r\nprint(sum(perf(a) for i in range(10)) / 10)\r\nprint(sum(perf(b) for i in range(10)) / 10)\r\nprint(sum(perf(c) for i in range(10)) / 10)\r\n```\r\n\r\nOld version:\r\n\r\n```\r\n11.947458256299797\r\n0.7665189374000875\r\n1.5786312711999018\r\n```\r\n\r\nNew version:\r\n\r\n```\r\n11.371349476900013\r\n0.0006540167998537072\r\n1.8471969083000659\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383692256",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-383692256",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 383692256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzY5MjI1Ng==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T19:22:06Z",
    "updated_at": "2018-04-23T19:22:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is interesting. It seems this even makes the regular (Series version) slightly faster, while simple-tuple version is slower a bit. I could repeat these results even after trying a bit more."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383711486",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-383711486",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 383711486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzcxMTQ4Ng==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T20:27:33Z",
    "updated_at": "2018-04-23T20:27:33Z",
    "author_association": "MEMBER",
    "body": "If you want to measure performance, we also have an asv performance benchmark for this method here: \r\n\r\nhttps://github.com/pandas-dev/pandas/blob/add3fbfbd1f3abb157398d0167bb31fa4aa00a22/asv_bench/benchmarks/frame_methods.py#L106-L108\r\n\r\nHere's a [guide](https://pandas.pydata.org/pandas-docs/stable/contributing.html#running-the-performance-test-suite) on how to run the asv benchmark to evaluate performance changes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383732655",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-383732655",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 383732655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzczMjY1NQ==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T21:42:39Z",
    "updated_at": "2018-04-23T21:42:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tests are failing for some unrelated reason."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/384029068",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-384029068",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 384029068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDAyOTA2OA==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-24T18:12:51Z",
    "updated_at": "2018-04-24T18:14:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I ran benchmarks, but changes are all over the place. Both positive and negative. For same kind of methods (like rolling) some go up and down. I am not sure how stable are those benchmarks. I have to leave it for few hours to run and could not assure complete idleness of the computer. Also, absolute times are just few ms for many of them. I think this is hard to measure well.\r\n\r\n<details>\r\n\r\n```\r\n     [0ae7e909]       [f2fbb39a]\r\n+        79.6±1ms         214±10ms     2.69  binary_ops.Ops.time_frame_comparison(False, 'default')\r\n+     1.11±0.02ms       2.97±0.7ms     2.68  inference.NumericInferOps.time_divide(<class 'numpy.uint32'>)\r\n+         169±6μs         440±50μs     2.60  inference.NumericInferOps.time_subtract(<class 'numpy.int8'>)\r\n+        83.6±4ms        203±0.7ms     2.43  binary_ops.Ops.time_frame_comparison(False, 1)\r\n+      5.62±0.1ms       13.6±0.1ms     2.43  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'min')\r\n+        190±30μs        459±100μs     2.41  inference.NumericInferOps.time_subtract(<class 'numpy.uint8'>)\r\n+     4.18±0.05ms       9.87±0.2ms     2.36  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'count')\r\n+      5.60±0.1ms       13.1±0.3ms     2.35  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'max')\r\n+         231±6μs         542±60μs     2.34  inference.NumericInferOps.time_add(<class 'numpy.int16'>)\r\n+     5.15±0.09ms       12.0±0.4ms     2.33  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'skew')\r\n+     5.35±0.08ms       12.4±0.2ms     2.31  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'kurt')\r\n+         498±9μs       1.13±0.1ms     2.26  groupby.GroupByMethods.time_dtype_as_field('float', 'sem', 'direct')\r\n+        679±10μs       1.48±0.2ms     2.19  groupby.GroupByMethods.time_dtype_as_group('float', 'pct_change', 'transformation')\r\n+     4.31±0.06ms       9.10±0.1ms     2.11  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'mean')\r\n+        592±20μs      1.22±0.05ms     2.06  groupby.GroupByMethods.time_dtype_as_group('float', 'sem', 'direct')\r\n+      4.08±0.3ms      8.31±0.02ms     2.04  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'sum')\r\n+     5.07±0.04ms       10.1±0.2ms     1.99  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'skew')\r\n+     5.44±0.04ms      10.8±0.09ms     1.98  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'std')\r\n+      3.89±0.4ms       7.69±0.3ms     1.98  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'sum')\r\n+        715±10μs       1.38±0.1ms     1.93  groupby.GroupByMethods.time_dtype_as_group('int', 'sem', 'direct')\r\n+      5.63±0.1ms       10.8±0.2ms     1.91  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'min')\r\n+      4.21±0.1ms       8.04±0.2ms     1.91  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'count')\r\n+      5.56±0.1ms       10.4±0.2ms     1.86  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'max')\r\n+      5.22±0.1ms       9.72±0.4ms     1.86  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'kurt')\r\n+         124±1ms          229±9ms     1.85  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'median')\r\n+      5.52±0.1ms       9.97±0.3ms     1.81  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'std')\r\n+     4.42±0.09ms       7.86±0.2ms     1.78  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'mean')\r\n+         106±2ms          182±3ms     1.72  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'int', 'median')\r\n+      40.5±0.5ms       66.4±0.9ms     1.64  frame_methods.Iteration.time_itertuples\r\n+         323±3ms         515±20ms     1.60  sparse.SparseDataFrameConstructor.time_from_scipy\r\n+     1.49±0.03μs       2.35±0.1μs     1.58  timestamp.TimestampConstruction.time_parse_iso8601_no_tz\r\n+         666±5μs      1.01±0.06ms     1.52  groupby.GroupByMethods.time_dtype_as_field('int', 'pct_change', 'direct')\r\n+         378±8μs         569±40μs     1.51  groupby.GroupByMethods.time_dtype_as_group('float', 'mean', 'transformation')\r\n+      26.7±0.3ms       39.5±0.6ms     1.48  sparse.ToCoo.time_sparse_series_to_coo\r\n+     3.82±0.08ms         5.65±1ms     1.48  inference.NumericInferOps.time_modulo(<class 'numpy.int32'>)\r\n+      2.82±0.3ms       4.15±0.4ms     1.47  rolling.Methods.time_rolling('DataFrame', 1000, 'int', 'skew')\r\n+           2.75s            4.04s     1.47  sparse.SparseDataFrameConstructor.time_constructor\r\n+        388±10μs         566±30μs     1.46  groupby.GroupByMethods.time_dtype_as_group('float', 'mean', 'direct')\r\n+      16.0±0.3μs         23.3±3μs     1.45  timestamp.TimestampProperties.time_weekday_name(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+      5.98±0.4ms       8.65±0.2ms     1.45  groupby.Categories.time_groupby_extra_cat_nosort\r\n+      5.43±0.2ms       7.82±0.2ms     1.44  rolling.VariableWindowMethods.time_rolling('Series', '1d', 'float', 'kurt')\r\n+      2.81±0.3ms       4.04±0.4ms     1.44  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'max')\r\n+      2.81±0.3ms       4.01±0.4ms     1.43  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'min')\r\n+         156±4ms          222±5ms     1.42  sparse.SparseArrayConstructor.time_sparse_array(0.01, nan, <class 'numpy.int64'>)\r\n+         113±2ms          161±3ms     1.42  sparse.SparseDataFrameConstructor.time_from_dict\r\n+     2.18±0.03ms       3.10±0.2ms     1.42  rolling.Methods.time_rolling('Series', 10, 'int', 'mean')\r\n+          10.8μs           15.2μs     1.41  ctors.SeriesDtypesConstructors.time_dtindex_from_series\r\n+     3.02±0.02ms       4.24±0.2ms     1.40  rolling.Methods.time_rolling('Series', 10, 'int', 'min')\r\n+         105±1ms          148±4ms     1.40  stat_ops.Correlation.time_corr('spearman')\r\n+     2.79±0.08ms       3.90±0.8ms     1.39  stat_ops.FrameMultiIndexOps.time_op(0, 'mean')\r\n+         432±5μs         602±50μs     1.39  indexing.MultiIndexing.time_frame_ix\r\n+      8.60±0.8ms       11.9±0.8ms     1.38  groupby.Categories.time_groupby_nosort\r\n+      25.8±0.3ms       35.6±0.4ms     1.38  sparse.SparseArrayConstructor.time_sparse_array(0.01, 0, <class 'object'>)\r\n+      3.19±0.1ms       4.37±0.3ms     1.37  rolling.Methods.time_rolling('Series', 1000, 'float', 'kurt')\r\n+      13.0±0.3ms       17.8±0.5ms     1.37  groupby.Nth.time_frame_nth('datetime')\r\n+         157±3ms          214±3ms     1.36  sparse.SparseSeriesToFrame.time_series_to_frame\r\n+         416±6μs         564±20μs     1.36  groupby.GroupByMethods.time_dtype_as_group('float', 'median', 'direct')\r\n+     3.68±0.06ms       4.99±0.6ms     1.36  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'mean')\r\n+         109±1μs         147±20μs     1.36  groupby.GroupByMethods.time_dtype_as_group('datetime', 'count', 'transformation')\r\n+     2.98±0.06ms       4.00±0.1ms     1.34  stat_ops.Correlation.time_corr('pearson')\r\n+        419±10μs         560±20μs     1.34  groupby.GroupByMethods.time_dtype_as_group('float', 'median', 'transformation')\r\n+         136±2μs         182±20μs     1.33  timestamp.TimestampConstruction.time_parse_dateutil\r\n+     3.33±0.04ms       4.44±0.2ms     1.33  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'count')\r\n+      24.6±0.5ms       32.7±0.5ms     1.33  sparse.SparseArrayConstructor.time_sparse_array(0.01, nan, <class 'object'>)\r\n+     3.07±0.03ms       4.06±0.2ms     1.32  rolling.Methods.time_rolling('Series', 10, 'int', 'max')\r\n+        1.06±0ms       1.40±0.1ms     1.32  inference.NumericInferOps.time_divide(<class 'numpy.uint8'>)\r\n+         988±8μs      1.30±0.07ms     1.32  groupby.GroupByMethods.time_dtype_as_group('float', 'value_counts', 'transformation')\r\n+     5.42±0.07ms       7.12±0.3ms     1.31  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'min')\r\n+         234±2ms          308±4ms     1.31  stat_ops.Correlation.time_corr('kendall')\r\n+     1.87±0.04ms       2.46±0.1ms     1.31  timeseries.ToDatetimeCache.time_dup_string_dates(False)\r\n+     3.71±0.08ms      4.84±0.02ms     1.31  sparse.SparseArrayConstructor.time_sparse_array(0.01, nan, <class 'numpy.float64'>)\r\n+        91.7±5μs          120±9μs     1.30  timeseries.SortIndex.time_sort_index(True)\r\n+      2.71±0.3ms       3.53±0.4ms     1.30  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'kurt')\r\n+     3.95±0.07ms       5.12±0.2ms     1.29  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'mean')\r\n+     2.13±0.02ms      2.76±0.06ms     1.29  rolling.Methods.time_rolling('Series', 10, 'float', 'mean')\r\n+     4.99±0.06ms       6.44±0.5ms     1.29  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'skew')\r\n+         318±1ms         410±40ms     1.29  sparse.Arithmetic.time_make_union(0.1, nan)\r\n+     1.15±0.01ms      1.48±0.01ms     1.29  index_object.Ops.time_subtract('float')\r\n+        576±10μs         736±90μs     1.28  frame_methods.Quantile.time_frame_quantile(0)\r\n+      9.37±0.2μs       12.0±0.4μs     1.28  timestamp.TimestampProperties.time_weekday_name(None, 'B')\r\n+     2.84±0.04ms       3.62±0.3ms     1.27  timeseries.ToDatetimeCache.time_dup_string_dates_and_format(True)\r\n+      3.92±0.4ms       4.98±0.3ms     1.27  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'count')\r\n+      20.8±0.6ms       26.4±0.8ms     1.27  frame_methods.Repr.time_html_repr_trunc_mi\r\n+      12.1±0.6ms       15.2±0.1ms     1.26  groupby.Categories.time_groupby_ordered_nosort\r\n+         521±3μs          658±2μs     1.26  frame_methods.Iteration.time_iteritems_cached\r\n+     3.63±0.06ms       4.56±0.4ms     1.26  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'sum')\r\n+         176±3μs         221±20μs     1.26  groupby.GroupByMethods.time_dtype_as_group('float', 'first', 'direct')\r\n+     1.97±0.04ms       2.46±0.1ms     1.25  rolling.Methods.time_rolling('Series', 10, 'float', 'sum')\r\n+     3.01±0.06ms       3.76±0.2ms     1.25  timeseries.ToDatetimeCache.time_dup_string_tzoffset_dates(True)\r\n+      9.35±0.3μs       11.7±0.2μs     1.25  timestamp.TimestampProperties.time_weekday_name(None, None)\r\n+     5.49±0.07ms       6.81±0.4ms     1.24  rolling.VariableWindowMethods.time_rolling('Series', '1h', 'float', 'std')\r\n+     3.49±0.08ms       4.32±0.4ms     1.24  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'float', 'count')\r\n+         169±3ms          209±2ms     1.24  groupby.MultiColumn.time_lambda_sum\r\n+      82.9±0.7μs          102±4μs     1.24  indexing.IntervalIndexing.time_loc_scalar\r\n+         113±2ms          139±3ms     1.23  gil.ParallelFactorize.time_loop(8)\r\n+     5.56±0.08ms       6.82±0.5ms     1.23  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'float', 'min')\r\n+        984±10μs      1.21±0.04ms     1.23  inference.NumericInferOps.time_divide(<class 'numpy.int16'>)\r\n+           1.10s            1.34s     1.22  groupby.GroupByMethods.time_dtype_as_group('float', 'mad', 'transformation')\r\n+     4.42±0.09ms       5.39±0.3ms     1.22  timeseries.ToDatetimeCache.time_dup_seconds_and_unit(True)\r\n+     4.85±0.06ms       5.91±0.3ms     1.22  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'max')\r\n+           1.13s            1.37s     1.22  groupby.GroupByMethods.time_dtype_as_group('float', 'mad', 'direct')\r\n+     3.34±0.04ms       4.06±0.2ms     1.22  rolling.Methods.time_rolling('DataFrame', 1000, 'int', 'count')\r\n+         201±3ms          243±6ms     1.21  frame_methods.SortValues.time_frame_sort_values(False)\r\n+     3.92±0.03ms       4.75±0.1ms     1.21  timeseries.ToDatetimeISO8601.time_iso8601_nosep\r\n+         182±2ms          221±5ms     1.21  panel_ctor.DifferentIndexes.time_from_dict\r\n+         147±4ms         178±10ms     1.21  indexing.NumericSeriesIndexing.time_getitem_list_like(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n+      78.0±0.8ms         93.6±3ms     1.20  rolling.Methods.time_rolling('DataFrame', 1000, 'float', 'median')\r\n+     1.75±0.03μs      2.10±0.03μs     1.20  timestamp.TimestampConstruction.time_parse_today\r\n+         237±6μs         284±30μs     1.20  reindex.Fillna.time_float_32('backfill')\r\n+      4.97±0.1ms       5.93±0.3ms     1.19  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'float', 'std')\r\n+           534ms            637ms     1.19  panel_methods.PanelMethods.time_pct_change('major')\r\n+        89.9±1ms          107±8ms     1.19  frame_methods.Repr.time_frame_repr_wide\r\n+         155±2μs          185±8μs     1.19  groupby.GroupByMethods.time_dtype_as_group('object', 'last', 'transformation')\r\n+     3.76±0.08ms       4.48±0.1ms     1.19  inference.NumericInferOps.time_add(<class 'numpy.float64'>)\r\n+     5.74±0.03ms       6.83±0.4ms     1.19  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'int', 'max')\r\n+     2.59±0.02ms       3.06±0.1ms     1.18  timeseries.ResampleSeries.time_resample('datetime', '5min', 'ohlc')\r\n+         383±3μs         452±20μs     1.18  indexing.MultiIndexing.time_series_ix\r\n+         118±3μs          138±4μs     1.18  panel_methods.PanelMethods.time_shift('major')\r\n+      5.97±0.1ms       7.02±0.2ms     1.18  groupby.Apply.time_scalar_function_single_col\r\n+         181±3μs         212±10μs     1.17  groupby.GroupByMethods.time_dtype_as_group('datetime', 'bfill', 'transformation')\r\n+         131±2μs          153±3μs     1.17  indexing.IntervalIndexing.time_loc_list\r\n+        51.3±1ms       60.0±0.9ms     1.17  gil.ParallelGroupbyMethods.time_loop(4, 'max')\r\n+      35.0±0.2ms         40.8±3ms     1.17  rolling.Methods.time_rolling('Series', 10, 'float', 'median')\r\n+      35.3±0.4ms         41.1±1ms     1.17  rolling.Methods.time_rolling('Series', 10, 'int', 'median')\r\n+      20.9±0.3ms       24.2±0.6ms     1.16  frame_methods.Repr.time_repr_tall\r\n+         347±3μs          403±6μs     1.16  groupby.GroupByMethods.time_dtype_as_group('float', 'head', 'transformation')\r\n+         120±2ms          139±6ms     1.16  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'median')\r\n+     5.59±0.07ms       6.47±0.3ms     1.16  rolling.VariableWindowMethods.time_rolling('Series', '50s', 'float', 'std')\r\n+      10.4±0.2ms       12.0±0.2ms     1.16  inference.DateInferOps.time_add_timedeltas\r\n+         381±8ns         440±10ns     1.16  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     39.3±0.08ms         45.4±3ms     1.16  sparse.Arithmetic.time_divide(0.1, 0)\r\n+     2.25±0.02ms       2.60±0.1ms     1.16  timeseries.ResampleSeries.time_resample('datetime', '5min', 'mean')\r\n+      11.4±0.3ms       13.1±0.2ms     1.15  algorithms.Hashing.time_series_string\r\n+         155±1μs         179±10μs     1.15  groupby.GroupByMethods.time_dtype_as_group('object', 'last', 'direct')\r\n+      19.2±0.3μs       22.1±0.4μs     1.15  timestamp.TimestampProperties.time_is_quarter_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+          17.0ms           19.6ms     1.15  index_object.Indexing.time_boolean_series('String')\r\n+      4.94±0.1ms       5.66±0.1ms     1.15  inference.NumericInferOps.time_modulo(<class 'numpy.float64'>)\r\n+         480±4ms          550±9ms     1.15  groupby.GroupByMethods.time_dtype_as_field('float', 'mad', 'transformation')\r\n+         152±3μs          174±3μs     1.14  indexing.IntervalIndexing.time_getitem_list\r\n+         258±4ms          295±2ms     1.14  reshape.WideToLong.time_wide_to_long_big\r\n+      34.7±0.8ms       39.8±0.7ms     1.14  sparse.Arithmetic.time_divide(0.01, nan)\r\n+     3.05±0.06ms      3.49±0.06ms     1.14  rolling.Methods.time_rolling('Series', 10, 'float', 'kurt')\r\n+         213±2μs         244±20μs     1.14  groupby.GroupByMethods.time_dtype_as_field('float', 'cumcount', 'transformation')\r\n+           1.02s            1.16s     1.14  groupby.Apply.time_copy_function_multi_col\r\n+     1.86±0.05ms      2.13±0.04ms     1.14  timeseries.ToDatetimeCache.time_dup_string_dates_and_format(False)\r\n+      4.87±0.4ms       5.55±0.2ms     1.14  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'float', 'max')\r\n+       105±0.9ms         120±10ms     1.14  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'int', 'median')\r\n+         169±2μs         192±10μs     1.14  groupby.GroupByMethods.time_dtype_as_field('float', 'median', 'direct')\r\n+      83.0±0.8μs         94.6±3μs     1.14  period.PeriodProperties.time_property('M', 'end_time')\r\n+        394±10ns          449±3ns     1.14  timestamp.TimestampProperties.time_week(None, None)\r\n+     6.91±0.09μs       7.88±0.2μs     1.14  offset.OnOffset.time_on_offset(<MonthBegin>)\r\n+     4.99±0.06μs       5.68±0.2μs     1.14  indexing.NonNumericSeriesIndexing.time_getitem_scalar('datetime')\r\n+         304±5ns          347±7ns     1.14  timestamp.TimestampProperties.time_tz(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+     2.77±0.06ms      3.15±0.05ms     1.14  sparse.Arithmetic.time_intersect(0.1, 0)\r\n+     4.03±0.05ms       4.58±0.3ms     1.14  groupby.GroupManyLabels.time_sum(1000)\r\n+         381±3ms         434±10ms     1.14  groupby.Groups.time_series_groups('object_large')\r\n+      32.3±0.4ms         36.7±1ms     1.14  sparse.Arithmetic.time_divide(0.1, nan)\r\n+     3.50±0.04ms       3.96±0.1ms     1.13  rolling.VariableWindowMethods.time_rolling('DataFrame', '1d', 'float', 'count')\r\n+     1.55±0.01μs      1.75±0.01μs     1.13  timestamp.TimestampConstruction.time_fromtimestamp\r\n+         399±6ms          450±2ms     1.13  groupby.Apply.time_copy_overhead_single_col\r\n+         128±1μs          145±8μs     1.13  groupby.GroupByMethods.time_dtype_as_field('datetime', 'shift', 'direct')\r\n+      14.7±0.2ms       16.5±0.7ms     1.13  frame_methods.Repr.time_html_repr_trunc_si\r\n+         132±2μs          149±4μs     1.13  groupby.GroupByMethods.time_dtype_as_field('float', 'min', 'transformation')\r\n+     3.94±0.08ms      4.44±0.08ms     1.12  timeseries.ToDatetimeISO8601.time_iso8601_format\r\n+         387±2ns          435±6ns     1.12  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n+     2.23±0.04ms      2.51±0.05ms     1.12  algorithms.Hashing.time_series_dates\r\n+           623ms            698ms     1.12  panel_methods.PanelMethods.time_pct_change('items')\r\n+        84.0±2μs         94.2±4μs     1.12  groupby.GroupByMethods.time_dtype_as_group('object', 'any', 'direct')\r\n+      42.2±0.9μs         47.3±1μs     1.12  timestamp.TimestampOps.time_replace_tz('US/Eastern')\r\n+          5.61μs           6.28μs     1.12  index_object.Indexing.time_slice_step('String')\r\n+         395±9ns         440±10ns     1.12  timestamp.TimestampProperties.time_week(None, 'B')\r\n+      13.7±0.4ms       15.2±0.3ms     1.11  groupby.MultiColumn.time_col_select_numpy_sum\r\n+         126±2μs          140±4μs     1.11  groupby.GroupByMethods.time_dtype_as_field('float', 'mean', 'direct')\r\n+     1.00±0.02μs      1.12±0.02μs     1.11  index_object.Range.time_min_trivial\r\n+      72.5±0.4μs         80.7±2μs     1.11  indexing.NonNumericSeriesIndexing.time_getitem_label_slice('string')\r\n+         315±2ns         350±10ns     1.11  timestamp.TimestampProperties.time_tz(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n+     2.24±0.03ms       2.49±0.1ms     1.11  algorithms.Hashing.time_series_timedeltas\r\n+      7.96±0.1ms       8.85±0.1ms     1.11  inference.NumericInferOps.time_modulo(<class 'numpy.uint64'>)\r\n+         274±5μs          305±9μs     1.11  groupby.GroupByMethods.time_dtype_as_group('float', 'ffill', 'direct')\r\n+     5.80±0.03μs       6.45±0.1μs     1.11  offset.OnOffset.time_on_offset(<SemiMonthBegin: day_of_month=15>)\r\n+      9.11±0.1ms       10.1±0.5ms     1.11  stat_ops.FrameOps.time_op('var', 'int', 1, True)\r\n+      16.7±0.2ms       18.5±0.4ms     1.11  groupby.MultiColumn.time_cython_sum\r\n+        83.0±2μs         92.0±2μs     1.11  groupby.GroupByMethods.time_dtype_as_group('datetime', 'size', 'direct')\r\n+         174±3μs          193±5μs     1.11  groupby.GroupByMethods.time_dtype_as_group('datetime', 'last', 'direct')\r\n+      5.40±0.1ms      5.98±0.07ms     1.11  groupby.CountMultiDtype.time_multi_count\r\n+        750±10ns         829±20ns     1.11  timestamp.TimestampOps.time_to_pydatetime('US/Eastern')\r\n+        87.2±2μs         96.4±3μs     1.11  groupby.GroupByMethods.time_dtype_as_group('datetime', 'any', 'transformation')\r\n+      13.3±0.3μs       14.7±0.2μs     1.11  timedelta.TimedeltaConstructor.time_from_components\r\n+      4.76±0.1ms       5.25±0.2ms     1.10  rolling.VariableWindowMethods.time_rolling('DataFrame', '1h', 'float', 'kurt')\r\n+         175±2μs         193±20μs     1.10  groupby.GroupByMethods.time_dtype_as_group('float', 'min', 'transformation')\r\n-        64.0±2ms       58.1±0.6ms     0.91  io.excel.Excel.time_read_excel('xlwt')\r\n-     1.06±0.03ms         961±10μs     0.91  groupby.GroupByMethods.time_dtype_as_group('int', 'value_counts', 'transformation')\r\n-         146±1ms          132±1ms     0.91  io.excel.Excel.time_read_excel('openpyxl')\r\n-      2.39±0.2ms      2.17±0.02ms     0.91  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', 'round_trip')\r\n-        169±10ms          154±2ms     0.91  io.json.ToJSON.time_delta_int_tstamp_lines('columns')\r\n-     10.6±0.06ms       9.61±0.2ms     0.91  io.hdf.HDFStoreDataFrame.time_query_store_table_wide\r\n-         296±4μs          268±3μs     0.91  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<QuarterEnd: startingMonth=3>)\r\n-       360±0.9ms          325±2ms     0.91  io.stata.Stata.time_read_stata('ty')\r\n-      28.9±0.4μs       26.2±0.3μs     0.90  offset.OffestDatetimeArithmetic.time_subtract(<BusinessDay>)\r\n-     2.20±0.09ms      1.99±0.04ms     0.90  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'high')\r\n-         176±6ms        159±0.9ms     0.90  inference.ToNumericDowncast.time_downcast('string-int', None)\r\n-     1.26±0.01ms      1.13±0.01ms     0.90  index_object.Ops.time_add('float')\r\n-        12.0±1ms      10.9±0.04ms     0.90  index_object.Ops.time_modulo('int')\r\n-      18.5±0.6μs       16.6±0.5μs     0.90  offset.OffestDatetimeArithmetic.time_apply(<BusinessQuarterBegin: startingMonth=3>)\r\n-         272±9μs          244±4μs     0.90  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthBegin>)\r\n-        632±30μs          569±3μs     0.90  groupby.GroupByMethods.time_dtype_as_group('int', 'cumsum', 'transformation')\r\n-         130±5ms          117±2ms     0.90  io.json.ToJSON.time_floats_with_dt_index_lines('split')\r\n-         184±8ms          166±3ms     0.90  join_merge.ConcatPanels.time_f_ordered(2, False)\r\n-          6.44μs           5.79μs     0.90  index_object.Indexing.time_slice_step('Float')\r\n-         607±3ms          546±2ms     0.90  join_merge.ConcatPanels.time_c_ordered(2, True)\r\n-         172±4ms          154±1ms     0.90  inference.ToNumericDowncast.time_downcast('string-nint', 'unsigned')\r\n-      44.8±0.8ms       40.2±0.2ms     0.90  io.csv.ReadCSVCategorical.time_convert_direct\r\n-         255±8ms          229±2ms     0.90  groupby.GroupByMethods.time_dtype_as_group('int', 'skew', 'transformation')\r\n-        26.4±1μs       23.6±0.3μs     0.89  offset.OffestDatetimeArithmetic.time_add_10(<MonthEnd>)\r\n-         107±2ms         95.9±2ms     0.89  io.json.ToJSON.time_delta_int_tstamp('columns')\r\n-           823ms            736ms     0.89  join_merge.MergeCategoricals.time_merge_object\r\n-      30.2±0.3ms       27.0±0.3ms     0.89  io.sql.SQL.time_read_sql_query('sqlite')\r\n-        394±10μs          351±2μs     0.89  groupby.GroupByMethods.time_dtype_as_field('object', 'ffill', 'transformation')\r\n-           144ms            128ms     0.89  index_object.IndexAppend.time_append_obj_list\r\n-      29.7±0.6μs       26.5±0.5μs     0.89  offset.OffestDatetimeArithmetic.time_subtract_10(<BusinessQuarterBegin: startingMonth=3>)\r\n-         171±6ms          152±2ms     0.89  io.json.ToJSON.time_float_int_str_lines('columns')\r\n-      33.7±0.8ms       29.9±0.3ms     0.89  inference.ToNumericDowncast.time_downcast('datetime64', 'integer')\r\n-      46.2±0.2ms         41.0±1ms     0.89  io.hdf.HDFStoreDataFrame.time_write_store_table\r\n-         287±1ms          255±3ms     0.89  io.stata.Stata.time_write_stata('td')\r\n-        371±10ms        329±0.4ms     0.89  io.excel.Excel.time_write_excel('xlsxwriter')\r\n-         145±8ms          129±2ms     0.89  io.csv.ToCSV.time_frame('wide')\r\n-        18.5±1μs       16.3±0.2μs     0.88  offset.OffestDatetimeArithmetic.time_apply(<BusinessQuarterEnd: startingMonth=3>)\r\n-       136±0.9ms        120±0.6ms     0.88  io.excel.Excel.time_read_excel('xlsxwriter')\r\n-        20.2±1ms      17.9±0.07ms     0.88  io.csv.ReadCSVThousands.time_thousands('|', None)\r\n-         184±7ms        163±0.7ms     0.88  inference.ToNumericDowncast.time_downcast('string-nint', 'signed')\r\n-           113ms            100ms     0.88  strings.Repeat.time_repeat('int')\r\n-        64.3±1ms       56.8±0.1ms     0.88  io.csv.ReadCSVCategorical.time_convert_post\r\n-        327±30μs          288±2μs     0.88  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthEnd>)\r\n-          11.4ms      10.0±0.02ms     0.88  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'float')\r\n-        20.2±1ms       17.7±0.3ms     0.88  reshape.PivotTable.time_pivot_table\r\n-     1.75±0.06ms      1.53±0.04ms     0.87  groupby.Categories.time_groupby_sort\r\n-         135±7ms        118±0.9ms     0.87  io.json.ToJSON.time_floats_with_int_idex_lines('index')\r\n-     2.46±0.04ms      2.14±0.08ms     0.87  groupby.Datelike.time_sum('date_range')\r\n-        32.9±1ms       28.7±0.8ms     0.87  io.csv.ToCSV.time_frame('mixed')\r\n-      1.44±0.2μs      1.26±0.01μs     0.87  period.PeriodProperties.time_property('M', 'qyear')\r\n-         373±6ms          323±1ms     0.87  io.json.ReadJSONLines.time_read_json_lines('datetime')\r\n-      1.78±0.1ms      1.55±0.03ms     0.87  io.csv.ReadUint64Integers.time_read_uint64_neg_values\r\n-     1.43±0.03μs      1.24±0.01μs     0.87  period.PeriodProperties.time_property('M', 'is_leap_year')\r\n-      18.5±0.9μs       16.0±0.4μs     0.86  offset.OffestDatetimeArithmetic.time_apply(<BusinessMonthEnd>)\r\n-           1.83s            1.58s     0.86  groupby.GroupByMethods.time_dtype_as_field('float', 'describe', 'transformation')\r\n-        960±50μs          829±5μs     0.86  groupby.GroupByMethods.time_dtype_as_field('float', 'rank', 'transformation')\r\n-         174±6ms          150±3ms     0.86  io.json.ToJSON.time_float_int_str_lines('index')\r\n-           290ms            250ms     0.86  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'string')\r\n-      28.8±0.9μs       24.8±0.5μs     0.86  offset.OffestDatetimeArithmetic.time_subtract(<QuarterEnd: startingMonth=3>)\r\n-     3.40±0.01ms      2.92±0.05ms     0.86  io.hdf.HDFStoreDataFrame.time_read_store_table\r\n-      2.34±0.1ms      2.00±0.04ms     0.85  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', 'high')\r\n-      13.2±0.3ms      11.3±0.02ms     0.85  index_object.SetOperations.time_operation('int', 'symmetric_difference')\r\n-      4.41±0.2ms      3.77±0.06ms     0.85  groupby.Datelike.time_sum('date_range_tz')\r\n-         196±4μs          168±5μs     0.85  groupby.GroupByMethods.time_dtype_as_group('int', 'last', 'transformation')\r\n-         133±5ms          113±1ms     0.85  io.json.ReadJSON.time_read_json('split', 'int')\r\n-      1.87±0.1ms      1.60±0.01ms     0.85  io.csv.ReadUint64Integers.time_read_uint64_na_values\r\n-     1.32±0.02ms      1.13±0.02ms     0.85  inference.NumericInferOps.time_add(<class 'numpy.int32'>)\r\n-        305±10ms          260±4ms     0.85  io.stata.Stata.time_write_stata('th')\r\n-        79.3±1μs         67.6±2μs     0.85  indexing.NumericSeriesIndexing.time_iloc_list_like(<class 'pandas.core.indexes.numeric.Int64Index'>)\r\n-        95.7±3ms         81.5±2ms     0.85  io.hdf.HDF.time_write_hdf('table')\r\n-          3.93ms           3.34ms     0.85  index_object.Indexing.time_boolean_series('Float')\r\n-          11.8ms           10.0ms     0.85  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'float_with_nan')\r\n-          15.7ms       13.3±0.1ms     0.85  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('float_with_nan')\r\n-      2.44±0.2ms      2.06±0.05ms     0.85  rolling.Quantile.time_quantile('Series', 1000, 'int', 1)\r\n-         139±7ms          117±1ms     0.84  io.json.ToJSON.time_floats_with_int_idex_lines('columns')\r\n-        90.9±2μs         76.8±1μs     0.84  groupby.GroupByMethods.time_dtype_as_field('datetime', 'size', 'transformation')\r\n-      2.55±0.1ms      2.15±0.01ms     0.84  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '.', 'round_trip')\r\n-        337±20μs          283±4μs     0.84  groupby.GroupByMethods.time_dtype_as_group('int', 'bfill', 'direct')\r\n-      12.3±0.3ms           10.3ms     0.84  io.sql.WriteSQLDtypes.time_read_sql_query_select_column('sqlalchemy', 'string')\r\n-        19.5±1ms       16.3±0.1ms     0.84  join_merge.Concat.time_concat_series(0)\r\n-        93.4±5ms       78.2±0.3ms     0.84  rolling.Methods.time_rolling('Series', 1000, 'float', 'median')\r\n-          16.0ms       13.4±0.1ms     0.84  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('bool')\r\n-        476±20μs          397±7μs     0.83  join_merge.Append.time_append_homogenous\r\n-        18.7±2μs       15.6±0.2μs     0.83  offset.OffestDatetimeArithmetic.time_apply(<BusinessMonthBegin>)\r\n-     2.43±0.07ms      2.02±0.03ms     0.83  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', None)\r\n-      2.61±0.1ms      2.17±0.04ms     0.83  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(',', '_', None)\r\n-        233±10μs          194±5μs     0.83  join_merge.Concat.time_concat_empty_right(1)\r\n-        34.4±3μs       28.6±0.6μs     0.83  offset.OffestDatetimeArithmetic.time_add_10(<SemiMonthBegin: day_of_month=15>)\r\n-          5.59μs           4.63μs     0.83  frame_methods.XS.time_frame_xs(1)\r\n-         330±7ms          273±3ms     0.83  io.excel.Excel.time_write_excel('xlwt')\r\n-        23.8±2ms       19.6±0.5ms     0.83  io.hdf.HDF.time_read_hdf('fixed')\r\n-          54.8ms           45.2ms     0.83  io.sql.ReadSQLTable.time_read_sql_table_all\r\n-         194±5μs          160±3μs     0.82  inference.ToNumericDowncast.time_downcast('int32', 'float')\r\n-        193±10ms          159±2ms     0.82  inference.ToNumericDowncast.time_downcast('string-int', 'float')\r\n-      2.46±0.1ms      2.02±0.02ms     0.82  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'round_trip')\r\n-        318±10μs          260±2μs     0.82  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<MonthEnd>)\r\n-          20.4ms           16.7ms     0.82  io.sql.ReadSQLTable.time_read_sql_table_parse_dates\r\n-      16.0±0.3ms       13.1±0.4ms     0.82  inference.ToNumericDowncast.time_downcast('int32', 'unsigned')\r\n-           542ms            443ms     0.82  io.stata.Stata.time_write_stata('tw')\r\n-      25.0±0.7ms       20.3±0.2ms     0.81  io.csv.ReadCSVThousands.time_thousands('|', ',')\r\n-      7.33±0.2ms      5.96±0.04ms     0.81  io.hdf.HDFStoreDataFrame.time_query_store_table\r\n-      2.74±0.1ms      2.22±0.06ms     0.81  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', None)\r\n-      4.01±0.2ms      3.24±0.05ms     0.81  rolling.Methods.time_rolling('Series', 1000, 'int', 'std')\r\n-        69.7±2ms         56.3±2ms     0.81  binary_ops.Ops.time_frame_multi_and(True, 'default')\r\n-      27.6±0.6ms       22.2±0.3ms     0.81  io.hdf.HDFStoreDataFrame.time_read_store_mixed\r\n-        19.0±2ms      15.3±0.06ms     0.81  join_merge.MergeAsof.time_on_int\r\n-      2.78±0.3ms      2.24±0.02ms     0.81  index_object.Ops.time_divide('int')\r\n-        30.8±1μs       24.8±0.7μs     0.81  offset.OffestDatetimeArithmetic.time_add_10(<YearBegin: month=1>)\r\n-     1.85±0.06ms      1.49±0.04ms     0.81  io.csv.ReadCSVDInferDatetimeFormat.time_read_csv(False, 'ymd')\r\n-         194±6ms          156±2ms     0.80  io.hdf.HDFStoreDataFrame.time_write_store_table_dc\r\n-         304±4ms          243±2ms     0.80  io.stata.Stata.time_write_stata('ty')\r\n-         316±5ms          253±2ms     0.80  io.stata.Stata.time_write_stata('tq')\r\n-      2.50±0.1ms      2.00±0.02ms     0.80  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '_', 'high')\r\n-         225±7μs          180±3μs     0.80  groupby.GroupByMethods.time_dtype_as_group('int', 'first', 'direct')\r\n-        296±10μs          236±1μs     0.80  groupby.GroupByMethods.time_dtype_as_field('float', 'ffill', 'direct')\r\n-        670±50μs         533±10μs     0.80  groupby.GroupByMethods.time_dtype_as_field('float', 'cumsum', 'direct')\r\n-         137±3ms          109±2ms     0.79  join_merge.Align.time_series_align_int64_index\r\n-     1.52±0.01ms      1.20±0.01ms     0.79  index_object.Ops.time_divide('float')\r\n-         187±2ms        147±0.9ms     0.79  io.json.ToJSON.time_float_int_lines('index')\r\n-           667ms            521ms     0.78  io.excel.Excel.time_write_excel('openpyxl')\r\n-       165±0.1ms          129±1ms     0.78  index_object.SetOperations.time_operation('strings', 'union')\r\n-           329ms            255ms     0.78  io.sql.WriteSQLDtypes.time_to_sql_dataframe_column('sqlalchemy', 'float_with_nan')\r\n-         114±7ms         88.1±2ms     0.77  io.sas.SAS.time_read_msgpack('sas7bdat')\r\n-        34.2±1ms       26.4±0.3ms     0.77  io.hdf.HDF.time_write_hdf('fixed')\r\n-        171±20μs          132±1μs     0.77  groupby.GroupByMethods.time_dtype_as_field('float', 'first', 'direct')\r\n-        220±10ms          169±2ms     0.77  inference.ToNumericDowncast.time_downcast('string-int', 'unsigned')\r\n-         353±8μs         269±10μs     0.76  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessMonthBegin>)\r\n-      5.94±0.2μs      4.51±0.06μs     0.76  io.hdf.HDFStoreDataFrame.time_store_repr\r\n-     4.10±0.06ms      3.10±0.01ms     0.75  io.hdf.HDFStoreDataFrame.time_store_info\r\n-        50.6±3ms       38.1±0.2ms     0.75  inference.ToNumericDowncast.time_downcast('int-list', 'integer')\r\n-         117±3ms       87.7±0.5ms     0.75  io.hdf.HDF.time_read_hdf('table')\r\n-        59.3±4ms       44.5±0.6ms     0.75  io.hdf.HDFStoreDataFrame.time_read_store_table_mixed\r\n-      1.22±0.2ms         914±10μs     0.75  inference.NumericInferOps.time_divide(<class 'numpy.int8'>)\r\n-      15.9±0.5μs       11.9±0.2μs     0.75  indexing.NumericSeriesIndexing.time_iloc_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n-      4.22±0.2ms      3.15±0.03ms     0.75  rolling.Methods.time_rolling('Series', 1000, 'int', 'kurt')\r\n-     1.51±0.07ms      1.13±0.01ms     0.75  inference.NumericInferOps.time_subtract(<class 'numpy.int32'>)\r\n-      2.96±0.2ms      2.17±0.03ms     0.73  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '.', None)\r\n-      20.6±0.9ms       15.1±0.6ms     0.73  io.msgpack.MSGPack.time_read_msgpack\r\n-     1.43±0.08ms      1.04±0.01ms     0.73  inference.ToNumericDowncast.time_downcast('datetime64', None)\r\n-      3.08±0.2ms      2.24±0.06ms     0.73  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', 'round_trip')\r\n-        740±20μs         537±20μs     0.73  groupby.GroupByMethods.time_dtype_as_field('float', 'cumprod', 'transformation')\r\n-        313±80μs          226±5μs     0.72  inference.NumericInferOps.time_multiply(<class 'numpy.int16'>)\r\n-      3.21±0.1ms       2.24±0.2ms     0.70  io.csv.ReadCSVFloatPrecision.time_read_csv_python_engine(';', '_', 'high')\r\n-      3.11±0.2ms       2.15±0.1ms     0.69  rolling.Methods.time_rolling('Series', 1000, 'int', 'sum')\r\n-      6.40±0.4ms      4.41±0.03ms     0.69  io.sas.SAS.time_read_msgpack('xport')\r\n-          20.4ms           13.8ms     0.68  io.sql.ReadSQLTableDtypes.time_read_sql_table_column('float')\r\n-      5.01±0.8ms      3.31±0.01ms     0.66  inference.NumericInferOps.time_modulo(<class 'numpy.int16'>)\r\n-       46.4±10μs       30.0±0.5μs     0.65  inference.ToNumeric.time_from_float('ignore')\r\n-        198±20μs          126±3μs     0.64  offset.OffestDatetimeArithmetic.time_add_10(<CustomBusinessMonthEnd>)\r\n-      2.74±0.1ms       1.54±0.2ms     0.56  inference.NumericInferOps.time_subtract(<class 'numpy.float32'>)\r\n-        53.4±3μs       29.4±0.8μs     0.55  inference.ToNumeric.time_from_float('coerce')\r\n-        61.4±8ms      31.7±0.08ms     0.52  index_object.SetOperations.time_operation('strings', 'intersection')\r\n-        503±30μs         258±10μs     0.51  inference.NumericInferOps.time_subtract(<class 'numpy.int16'>)\r\n-        710±60μs         338±10μs     0.48  join_merge.JoinNonUnique.time_join_non_unique_equal\r\n-      1.14±0.2ms          512±9μs     0.45  groupby.GroupByMethods.time_dtype_as_field('float', 'sem', 'transformation')\r\n-      2.59±0.1ms      1.14±0.03ms     0.44  inference.NumericInferOps.time_multiply(<class 'numpy.float32'>)\r\n-      7.09±0.7ms      2.99±0.08ms     0.42  inference.ToNumeric.time_from_numeric_str('ignore')\r\n-        532±50μs          172±2μs     0.32  inference.NumericInferOps.time_multiply(<class 'numpy.int8'>)\r\n-      1.57±0.3ms         388±10μs     0.25  inference.NumericInferOps.time_multiply(<class 'numpy.uint32'>)\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n```\r\n\r\n</details>"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/387299950",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-387299950",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 387299950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzI5OTk1MA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T06:36:24Z",
    "updated_at": "2018-05-08T06:36:24Z",
    "author_association": "MEMBER",
    "body": "> I ran benchmarks, but changes are all over the place. Both positive and negative. For same kind of methods (like rolling) some go up and down. I am not sure how stable are those benchmarks. I have to leave it for few hours to run and could not assure complete idleness of the computer.\r\n\r\nWhat you can do if you suspect a given result is a fluke is to rerun only that benchmarks file, as in:\r\n\r\n``asv continuous -f 1.1 master iterators   --bench groupby``\r\n\r\nthis should take just a couple of minutes (assuming you just ran another asv test on the same commits), during which you can probably leave your computer idle."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392657767",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-392657767",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 392657767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjY1Nzc2Nw==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T05:34:50Z",
    "updated_at": "2018-05-29T05:34:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I updated everything requested in the code. I am now running benchmarks once more on an idle machine."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392657986",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-392657986",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 392657986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjY1Nzk4Ng==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T05:36:23Z",
    "updated_at": "2018-05-29T05:36:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "There already seems to be an `itertuples` asv test in `frame_methods.py`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392658347",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-392658347",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 392658347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjY1ODM0Nw==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T05:39:15Z",
    "updated_at": "2018-05-29T05:39:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I added few more asv tests."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392716237",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-392716237",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 392716237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjcxNjIzNw==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T09:39:48Z",
    "updated_at": "2018-05-29T09:39:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated benchmarks:\r\n\r\n```\r\n       before           after         ratio\r\n     [1c2844ac]       [980403a3]\r\n+       140±0.9ms          370±2ms     2.65  binary_ops.Ops.time_frame_comparison(False, 'default')\r\n+         148±1ms          376±1ms     2.53  binary_ops.Ops.time_frame_comparison(False, 1)\r\n+          43.9ms           97.5ms     2.22  frame_methods.Iteration.time_itertuples_raw_tuples\r\n+          57.5ms            111ms     1.93  frame_methods.Iteration.time_itertuples_raw_tuples_to_list\r\n+           113ms            183ms     1.61  frame_methods.Iteration.time_itertuples_to_list\r\n+           104ms            162ms     1.56  frame_methods.Iteration.time_itertuples\r\n+           729ms            1.10s     1.50  join_merge.ConcatPanels.time_c_ordered(2, False)\r\n+      16.6±0.3ms       24.7±0.2ms     1.48  groupby.Categories.time_groupby_extra_cat_nosort\r\n+      19.9±0.5ms       28.7±0.4ms     1.44  groupby.Categories.time_groupby_ordered_nosort\r\n+      20.6±0.3ms       29.5±0.3ms     1.43  groupby.Categories.time_groupby_nosort\r\n+      31.1±0.7ms         44.0±2ms     1.42  eval.Eval.time_add('numexpr', 1)\r\n+     6.80±0.01ms         9.43±2ms     1.39  binary_ops.Timeseries.time_series_timestamp_compare('US/Eastern')\r\n+          1.75ms           2.37ms     1.35  frame_methods.Iteration.time_iteritems_cached\r\n+        32.5±1ms         42.9±2ms     1.32  eval.Eval.time_mult('numexpr', 1)\r\n+      77.4±0.4ms       98.0±0.3ms     1.27  rolling.VariableWindowMethods.time_rolling('DataFrame', '50s', 'float', 'median')\r\n+      32.0±0.6ms       40.1±0.1ms     1.25  join_merge.MergeAsof.time_on_int32\r\n+           535ms            646ms     1.21  reindex.Reindex.time_reindex_multiindex\r\n+       135±0.6ms          161±5ms     1.19  binary_ops.Ops.time_frame_multi_and(True, 'default')\r\n+           1.25s            1.45s     1.16  join_merge.I8Merge.time_i8merge('left')\r\n+      48.0±0.1ms       54.6±0.1ms     1.14  sparse.ToCoo.time_sparse_series_to_coo\r\n+          3.49ms           3.94ms     1.13  index_object.Indexing.time_get_loc_non_unique('Float')\r\n+     11.7±0.08μs      13.1±0.07μs     1.13  offset.OnOffset.time_on_offset(<BusinessYearBegin: month=1>)\r\n+           721ms            812ms     1.13  join_merge.ConcatPanels.time_c_ordered(2, True)\r\n+     6.64±0.02ms       7.40±0.2ms     1.12  categoricals.Concat.time_union\r\n+         916±9ns      1.02±0.02μs     1.11  timestamp.TimestampProperties.time_tz(None, None)\r\n+          20.0ms           22.3ms     1.11  eval.Query.time_query_datetime_column\r\n+        3.75±0ms         4.13±0ms     1.10  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', 'round_trip')\r\n-           1.21s            1.10s     0.91  join_merge.MergeCategoricals.time_merge_object\r\n-     1.32±0.04μs      1.19±0.02μs     0.90  timestamp.TimestampProperties.time_days_in_month(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-     1.10±0.02μs          992±5ns     0.90  timestamp.TimestampProperties.time_is_quarter_start(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, None)\r\n-     1.39±0.02μs      1.25±0.02μs     0.90  timestamp.TimestampProperties.time_week(<DstTzInfo 'Europe/Amsterdam' LMT+0:20:00 STD>, 'B')\r\n-     1.11±0.02μs         1.00±0μs     0.90  timestamp.TimestampProperties.time_is_quarter_start(None, None)\r\n-        4.09±0ms         3.68±0ms     0.90  io.csv.ReadCSVFloatPrecision.time_read_csv(',', '.', None)\r\n-     4.08±0.01ms      3.67±0.01ms     0.90  io.csv.ReadCSVFloatPrecision.time_read_csv(';', '_', None)\r\n-           102ms           90.9ms     0.90  frame_ctor.FromDicts.time_list_of_dict\r\n-           2.62s            2.30s     0.88  join_merge.JoinIndex.time_left_outer_join_index\r\n-      76.5±0.7ms       66.9±0.1ms     0.87  frame_methods.Isnull.time_isnull_strngs\r\n-     6.92±0.01ms      5.97±0.01ms     0.86  rolling.Methods.time_rolling('Series', 10, 'int', 'std')\r\n-     6.94±0.04ms      5.90±0.01ms     0.85  rolling.Methods.time_rolling('Series', 1000, 'int', 'std')\r\n-         116±3ms         96.9±1ms     0.83  io.csv.ReadCSVCategorical.time_convert_direct\r\n-        26.3±1ms       21.4±0.7ms     0.81  stat_ops.FrameOps.time_op('mad', 'int', 0, False)\r\n-        14.3±1ms       8.04±0.1ms     0.56  binary_ops.Ops.time_frame_comparison(True, 1)\r\n-     18.4±0.06ms      5.27±0.01ms     0.29  offset.OffsetSeriesArithmetic.time_add_offset(<SemiMonthEnd: day_of_month=15>)\r\n-     16.3±0.02ms         4.62±0ms     0.28  offset.OffsetSeriesArithmetic.time_add_offset(<BusinessDay>)\r\n-     18.1±0.01ms         4.87±0ms     0.27  offset.OffsetSeriesArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\r\n-     17.6±0.03ms         4.47±0ms     0.25  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<SemiMonthEnd: day_of_month=15>)\r\n-     15.5±0.04ms      3.81±0.02ms     0.25  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<BusinessDay>)\r\n-     17.1±0.03ms      4.07±0.01ms     0.24  offset.OffsetDatetimeIndexArithmetic.time_add_offset(<SemiMonthBegin: day_of_month=15>)\r\n-         129±1ms      11.0±0.08ms     0.08  offset.ApplyIndex.time_apply_index(<BusinessDay>)\r\n-         144±1ms      11.9±0.04ms     0.08  offset.ApplyIndex.time_apply_index(<SemiMonthEnd: day_of_month=15>)\r\n-       145±0.7ms      11.0±0.07ms     0.08  offset.ApplyIndex.time_apply_index(<SemiMonthBegin: day_of_month=15>)\r\n-        98.5±1ms          256±4μs     0.00  indexing.NumericSeriesIndexing.time_loc_scalar(<class 'pandas.core.indexes.numeric.Float64Index'>)\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392717834",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-392717834",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 392717834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjcxNzgzNA==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T09:45:18Z",
    "updated_at": "2018-05-29T09:45:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just iteration, ran again:\r\n\r\n```\r\n· Running 16 total benchmarks (2 commits * 1 environments * 8 benchmarks)\r\n[  0.00%] · For pandas commit hash 980403a3:\r\n[  0.00%] ·· Building for virtualenv-py3.5-Cython-matplotlib-numexpr-numpy-openpyxl-pytest-scipy-sqlalchemy-tables-xlrd-xlsxwriter-xlwt...\r\n[  0.00%] ·· Benchmarking virtualenv-py3.5-Cython-matplotlib-numexpr-numpy-openpyxl-pytest-scipy-sqlalchemy-tables-xlrd-xlsxwriter-xlwt\r\n[  6.25%] ··· Running frame_methods.Iteration.time_iteritems                                                                                                                             75.0ms\r\n[ 12.50%] ··· Running frame_methods.Iteration.time_iteritems_cached                                                                                                                      2.41ms\r\n[ 18.75%] ··· Running frame_methods.Iteration.time_iteritems_indexing                                                                                                                     385ms\r\n[ 25.00%] ··· Running frame_methods.Iteration.time_iterrows                                                                                                                               598ms\r\n[ 31.25%] ··· Running frame_methods.Iteration.time_itertuples                                                                                                                             154ms\r\n[ 37.50%] ··· Running frame_methods.Iteration.time_itertuples_raw_tuples                                                                                                                  101ms\r\n[ 43.75%] ··· Running frame_methods.Iteration.time_itertuples_raw_tuples_to_list                                                                                                          115ms\r\n[ 50.00%] ··· Running frame_methods.Iteration.time_itertuples_to_list                                                                                                                     187ms\r\n[ 50.00%] · For pandas commit hash 1c2844ac:\r\n[ 50.00%] ·· Building for virtualenv-py3.5-Cython-matplotlib-numexpr-numpy-openpyxl-pytest-scipy-sqlalchemy-tables-xlrd-xlsxwriter-xlwt...\r\n[ 50.00%] ·· Benchmarking virtualenv-py3.5-Cython-matplotlib-numexpr-numpy-openpyxl-pytest-scipy-sqlalchemy-tables-xlrd-xlsxwriter-xlwt\r\n[ 56.25%] ··· Running frame_methods.Iteration.time_iteritems                                                                                                                             73.9ms\r\n[ 62.50%] ··· Running frame_methods.Iteration.time_iteritems_cached                                                                                                                      1.90ms\r\n[ 68.75%] ··· Running frame_methods.Iteration.time_iteritems_indexing                                                                                                                     379ms\r\n[ 75.00%] ··· Running frame_methods.Iteration.time_iterrows                                                                                                                               600ms\r\n[ 81.25%] ··· Running frame_methods.Iteration.time_itertuples                                                                                                                             104ms\r\n[ 87.50%] ··· Running frame_methods.Iteration.time_itertuples_raw_tuples                                                                                                                 44.2ms\r\n[ 93.75%] ··· Running frame_methods.Iteration.time_itertuples_raw_tuples_to_list                                                                                                         58.5ms\r\n[100.00%] ··· Running frame_methods.Iteration.time_itertuples_to_list                                                                                                                     111ms       before           after         ratio\r\n     [1c2844ac]       [980403a3]\r\n+          44.2ms            101ms     2.28  frame_methods.Iteration.time_itertuples_raw_tuples\r\n+          58.5ms            115ms     1.96  frame_methods.Iteration.time_itertuples_raw_tuples_to_list\r\n+           111ms            187ms     1.69  frame_methods.Iteration.time_itertuples_to_list\r\n+           104ms            154ms     1.48  frame_methods.Iteration.time_itertuples\r\n+          1.90ms           2.41ms     1.27  frame_methods.Iteration.time_iteritems_cached\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392733445",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-392733445",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 392733445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjczMzQ0NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T10:44:43Z",
    "updated_at": "2018-05-29T10:44:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mitar did you run this backwards? those times have increased"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392734639",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-392734639",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 392734639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjczNDYzOQ==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T10:50:04Z",
    "updated_at": "2018-05-29T10:50:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @mitar did you run this backwards? those times have increased\r\n\r\nI ran `asv continuous -f 1.1 -E virtualenv upstream/master HEAD`. I think they increased indeed. I have no explanation for that. I think it might be that it is costly to keep many iterators around. It is using less memory, but it is having overhead, it seems. So my explanation is that it is traditional lazy vs. strict execution performance trade-off.\r\n\r\nI am not sure how to determine better what is happening."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407285770",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-407285770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 407285770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzI4NTc3MA==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-24T05:29:10Z",
    "updated_at": "2018-07-24T05:29:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have tested this again and yes, some things do increase. I think the reason is that conceptually iterators are more CPU expensive but less memory expensive. Here we just measure time. But the main motivation for moving to iterator is to lower memory usage.\r\n\r\nAnyway, what would be next steps here?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/407388461",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-407388461",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 407388461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzM4ODQ2MQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-24T12:27:02Z",
    "updated_at": "2018-07-24T12:27:02Z",
    "author_association": "MEMBER",
    "body": "> I have tested this again and yes, some things do increase. I think the reason is that conceptually iterators are more CPU expensive but less memory expensive. Here we just measure time. But the main motivation for moving to iterator is to lower memory usage.\r\n\r\nI agree worse performance per se is not a stopper. But I think the current PR can be improved a lot.\r\n\r\nIn principle, ``DataFrame.itertuples`` could be (I think) as simple as\r\n\r\n```\r\nitertuple = collections.nametuple([...])\r\ndef rows_gen(df):\r\n    for i in range(len(df)):\r\n        cont = [df.index[i]] if index else []\r\n        yield itertuple(cont + df.iloc[i].tolist())\r\n\r\nreturn rows_gen(self)\r\n```\r\n\r\nThe only plausible reason I see for the current use of ``zip`` and for storing the arrays is precisely that #20783 was actually _desired_, that is, that the following (happening in your branch) was undesired:\r\n\r\n```\r\nIn [2]: df = pd.DataFrame(-1, index=range(10), columns=range(10))\r\n\r\nIn [3]: it = df.itertuples()\r\n\r\nIn [4]: df[:] = 0\r\n\r\nIn [5]: next(it)\r\nOut[5]: Pandas(Index=0, _1=0, _2=0, _3=0, _4=0, _5=0, _6=0, _7=0, _8=0, _9=0, _10=0)\r\n```\r\n\r\nAs it is now, ``itertuples`` guarantees that the content accessed is the one present at the time in which it is called. I don't know if this is a feature we should preserve or not, but 1) this certainly needs to be mentioned more clearly in the ``whatsnew`` (it is not just a \"performance improvement\"!), 2) I'd like to hear the opinion of @pandas-dev/pandas-core 3) if we agree we want to change this, then again, the code can be simplified a lot."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/424418588",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-424418588",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 424418588,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDQxODU4OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T16:48:41Z",
    "updated_at": "2018-09-25T16:48:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "can you rebase"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441151226",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-441151226",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 441151226,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTE1MTIyNg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-23T03:44:52Z",
    "updated_at": "2018-11-23T03:44:52Z",
    "author_association": "MEMBER",
    "body": "Closing as stale. Ping if you'd like to reopen"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447648553",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447648553",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447648553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY0ODU1Mw==",
    "user": {
      "login": "rok",
      "id": 54589,
      "node_id": "MDQ6VXNlcjU0NTg5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/54589?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rok",
      "html_url": "https://github.com/rok",
      "followers_url": "https://api.github.com/users/rok/followers",
      "following_url": "https://api.github.com/users/rok/following{/other_user}",
      "gists_url": "https://api.github.com/users/rok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rok/subscriptions",
      "organizations_url": "https://api.github.com/users/rok/orgs",
      "repos_url": "https://api.github.com/users/rok/repos",
      "events_url": "https://api.github.com/users/rok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T14:43:39Z",
    "updated_at": "2018-12-16T14:43:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback, @WillAyd  - I'd like to help resolve this. Could we reopen it please? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447649887",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447649887",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447649887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY0OTg4Nw==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T15:03:02Z",
    "updated_at": "2018-12-24T01:37:41Z",
    "author_association": "NONE",
    "body": "Hello @mitar! Thanks for updating the PR.\n\n\n\n\n\n\n\nCheers ! There are no PEP8 issues in this Pull Request. :beers: \n\n##### Comment last updated on December 24, 2018 at 01:37 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447654886",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447654886",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447654886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY1NDg4Ng==",
    "user": {
      "login": "rok",
      "id": 54589,
      "node_id": "MDQ6VXNlcjU0NTg5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/54589?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rok",
      "html_url": "https://github.com/rok",
      "followers_url": "https://api.github.com/users/rok/followers",
      "following_url": "https://api.github.com/users/rok/following{/other_user}",
      "gists_url": "https://api.github.com/users/rok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rok/subscriptions",
      "organizations_url": "https://api.github.com/users/rok/orgs",
      "repos_url": "https://api.github.com/users/rok/repos",
      "events_url": "https://api.github.com/users/rok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T16:07:35Z",
    "updated_at": "2018-12-16T16:07:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> ```\r\n> itertuple = collections.nametuple([...])\r\n> def rows_gen(df):\r\n>     for i in range(len(df)):\r\n>         cont = [df.index[i]] if index else []\r\n>         yield itertuple(cont + df.iloc[i].tolist())\r\n> \r\n> return rows_gen(self)\r\n> ```\r\n\r\nI've tested this against current master and @mitar's proposal, see below. Using iloc appears to slow things quite a bit. df.iloc[i].tolist()) will upcast types, so we need to cycle through columns to get the types right. Is there a way to make iloc[i] return an un-upcast tuple?\r\n\r\n```\r\nimport collections\r\nimport numpy as np\r\nimport pandas as pd\r\nimport time\r\n\r\n# Proposed\r\ndef itertuples_1(self, index=True, name=\"Pandas\"):\r\n    arrays = []\r\n    fields = list(self.columns)\r\n    if index:\r\n        arrays.append(self.index)\r\n        fields.insert(0, \"Index\")\r\n\r\n    # use integer indexing because of possible duplicate column names\r\n    arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\r\n\r\n    # Python 3 supports at most 255 arguments to constructor, and\r\n    # things get slow with this many fields in Python 2\r\n    if name is not None and len(self.columns) + index < 256:\r\n        # `rename` is unsupported in Python 2.6\r\n        try:\r\n            itertuple = collections.namedtuple(name, fields, rename=True)\r\n            return map(itertuple._make, zip(*arrays))\r\n\r\n        except Exception:\r\n            pass\r\n\r\n    # fallback to regular tuples\r\n    return zip(*arrays)\r\n\r\n# With iloc\r\ndef itertuples_4(self, index=True, name=\"Pandas\"):\r\n    arrays = []\r\n    fields = list(self.columns)\r\n    if index:\r\n        fields.insert(0, \"Index\")\r\n    \r\n    arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\r\n    \r\n    itertuple = collections.namedtuple(name, fields, rename=True)\r\n\r\n    for i in range(len(self)):\r\n        cont = [self.index[i]] if index else []\r\n        row_list = map(lambda x: x.iloc[i], arrays)\r\n        yield itertuple(cont, *row_list)\r\n\r\n\r\nn = 1000000\r\ndf = pd.DataFrame({\"A\": np.arange(n)})\r\ndf['B'] = df['A'] / 100\r\n\r\n# Current master\r\n%%memit\r\n_ = list(iter(df.itertuples()))\r\n# peak memory: 296.95 MiB, increment: 178.74 MiB\r\n\r\n%%timeit\r\n_ = list(iter(df.itertuples()))\r\n# 621 ms ± 72 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n\r\n# Proposed\r\n%%memit\r\n_ = list(iter(itertuples_1(df, index=True)))\r\n# peak memory: 447.58 MiB, increment: 141.24 MiB\r\n\r\n%%timeit\r\n_ = list(iter(itertuples_1(df, index=True)))\r\n# 673 ms ± 99 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n\r\n# With iloc\r\n%%memit\r\n_ = list(iter(itertuples_4(df, index=True)))\r\n# peak memory: 529.25 MiB, increment: 221.10 MiB\r\n\r\n%%timeit\r\n_ = list(iter(itertuples_4(df, index=True)))\r\n# 24.3 s ± 1.08 s per loop (mean ± std. dev. of 7 runs, 1 loop each)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447656664",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447656664",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447656664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY1NjY2NA==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T16:31:15Z",
    "updated_at": "2018-12-16T16:33:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> As it is now, itertuples guarantees that the content accessed is the one present at the time in which it is called.\r\n\r\nI think that generally it is true in Python ecosystem that if you are changing underlying structure while iterating behavior is undefined. No code in standard Python library freezes the structure while iterating. They generally even throw an exception if you modify it. So I think it is safe to change this behavior, but we should for sure document it well.\r\n\r\nSo what you can do if you want current behavior then is to cast iterator to list:\r\n\r\n```\r\n# Freeze iterator content.\r\nfor i in list(frame.itertuples()):\r\n   ...\r\n```\r\n\r\nThis is similar to have you have to do it if you are iterating over a dict and you want to modify it:\r\n\r\n```\r\nfor key, value in list(myDict.items()):\r\n   ...\r\n```\r\n\r\nSo this PR makes it so that it is easy to iterate over a list if you want (similar to standard Python library) but allows one to not do so. Current master you can only do the former."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447656991",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447656991",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447656991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY1Njk5MQ==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T16:35:42Z",
    "updated_at": "2018-12-16T16:35:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rok Thanks for benchmarks. I am surprised that my proposed way is using more peak memory? Could you try with larger dataframe to see how this behaves? The main motivation behind this PR is that we use less memory and never create a list of the whole DataFrame in memory."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447657260",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447657260",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447657260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY1NzI2MA==",
    "user": {
      "login": "rok",
      "id": 54589,
      "node_id": "MDQ6VXNlcjU0NTg5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/54589?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rok",
      "html_url": "https://github.com/rok",
      "followers_url": "https://api.github.com/users/rok/followers",
      "following_url": "https://api.github.com/users/rok/following{/other_user}",
      "gists_url": "https://api.github.com/users/rok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rok/subscriptions",
      "organizations_url": "https://api.github.com/users/rok/orgs",
      "repos_url": "https://api.github.com/users/rok/repos",
      "events_url": "https://api.github.com/users/rok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T16:39:31Z",
    "updated_at": "2018-12-16T16:39:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mitar - I looking to do a more granular memory profile since I'm not even sure how to interpret this one. It does seem odd that iterating would not reduce the memory spent."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447658463",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447658463",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447658463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY1ODQ2Mw==",
    "user": {
      "login": "rok",
      "id": 54589,
      "node_id": "MDQ6VXNlcjU0NTg5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/54589?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rok",
      "html_url": "https://github.com/rok",
      "followers_url": "https://api.github.com/users/rok/followers",
      "following_url": "https://api.github.com/users/rok/following{/other_user}",
      "gists_url": "https://api.github.com/users/rok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rok/subscriptions",
      "organizations_url": "https://api.github.com/users/rok/orgs",
      "repos_url": "https://api.github.com/users/rok/repos",
      "events_url": "https://api.github.com/users/rok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T16:56:45Z",
    "updated_at": "2018-12-16T17:07:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "**EDIT**: Bigger dataset brings proposed implementation close to master memory wise.\r\nCurrent master:\r\n```\r\nIn [1]: %load_ext memory_profiler \r\n   ...:  \r\n   ...: import collections \r\n   ...: import numpy as np \r\n   ...: import pandas as pd \r\n   ...: import time \r\n   ...: import random \r\n   ...:  \r\n   ...: n = 10000000 \r\n   ...: df = pd.DataFrame({\"A\": np.arange(n)}) \r\n   ...: df['B'] = df['A'] / 100 \r\n   ...: df['C'] = np.random.choice(list(\"qwertyuiopsdfghjklzxcvbnm\"), size=n) \r\n   ...:  \r\n   ...: %memit list(iter(df.itertuples()))                                                           \r\npeak memory: 2154.27 MiB, increment: 1843.30 MiB\r\n```\r\n\r\nProposed:\r\n```\r\nIn [1]: %load_ext memory_profiler \r\n   ...:  \r\n   ...: import collections \r\n   ...: import numpy as np \r\n   ...: import pandas as pd \r\n   ...: import time \r\n   ...: import random \r\n   ...:  \r\n   ...: n = 10000000 \r\n   ...: df = pd.DataFrame({\"A\": np.arange(n)}) \r\n   ...: df['B'] = df['A'] / 100 \r\n   ...: df['C'] = np.random.choice(list(\"qwertyuiopsdfghjklzxcvbnm\"), size=n) \r\n   ...:  \r\n   ...: def itertuples_1(self, index=True, name=\"Pandas\"): \r\n   ...:     arrays = [] \r\n   ...:     fields = list(self.columns) \r\n   ...:     if index: \r\n   ...:         arrays.append(self.index) \r\n   ...:         fields.insert(0, \"Index\") \r\n   ...:  \r\n   ...:     # use integer indexing because of possible duplicate column names \r\n   ...:     arrays.extend(self.iloc[:, k] for k in range(len(self.columns))) \r\n   ...:  \r\n   ...:     # Python 3 supports at most 255 arguments to constructor, and \r\n   ...:     # things get slow with this many fields in Python 2 \r\n   ...:     if name is not None and len(self.columns) + index < 256: \r\n   ...:         # `rename` is unsupported in Python 2.6 \r\n   ...:         try: \r\n   ...:             itertuple = collections.namedtuple(name, fields, rename=True) \r\n   ...:             return map(itertuple._make, zip(*arrays)) \r\n   ...:  \r\n   ...:         except Exception: \r\n   ...:             pass \r\n   ...:  \r\n   ...:     # fallback to regular tuples \r\n   ...:     return zip(*arrays) \r\n   ...:  \r\n   ...: %memit list(iter(itertuples_1(df, index=True)))                                              \r\npeak memory: 2159.11 MiB, increment: 1847.69 MiB\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447665902",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447665902",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447665902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY2NTkwMg==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T18:41:20Z",
    "updated_at": "2018-12-16T18:41:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "BTW, `namedtuple` takes a lot of time in my experience. We might want to measure things with `namedtuple=False` so that we do not measure that overhead."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447668800",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447668800",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447668800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY2ODgwMA==",
    "user": {
      "login": "rok",
      "id": 54589,
      "node_id": "MDQ6VXNlcjU0NTg5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/54589?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rok",
      "html_url": "https://github.com/rok",
      "followers_url": "https://api.github.com/users/rok/followers",
      "following_url": "https://api.github.com/users/rok/following{/other_user}",
      "gists_url": "https://api.github.com/users/rok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rok/subscriptions",
      "organizations_url": "https://api.github.com/users/rok/orgs",
      "repos_url": "https://api.github.com/users/rok/repos",
      "events_url": "https://api.github.com/users/rok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T19:24:55Z",
    "updated_at": "2018-12-16T19:24:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "There's a bit of a difference:\r\n**namedtuple=True**\r\n```\r\nIn [1]: %load_ext memory_profiler \r\n   ...:  \r\n   ...: import collections \r\n   ...: import numpy as np \r\n   ...: import pandas as pd \r\n   ...: import time \r\n   ...: import random \r\n   ...:  \r\n   ...: n = int(1E7) \r\n   ...: df = pd.DataFrame({\"A\": np.arange(n)}) \r\n   ...: df['B'] = df['A'] / 100 \r\n   ...: df['C'] = np.random.choice(list(\"qwertyuiopsdfghjklzxcvbnm\"), size=n) \r\n   ...: df['D'] = pd.to_datetime(np.random.randint(15E17, 16E17, size=n)) \r\n   ...:  \r\n   ...: def itertuples_1(self, index=True, name=\"Pandas\", namedtuple=True): \r\n   ...:     arrays = [] \r\n   ...:     fields = list(self.columns) \r\n   ...:     if index: \r\n   ...:         arrays.append(self.index) \r\n   ...:         fields.insert(0, \"Index\") \r\n   ...:  \r\n   ...:     # use integer indexing because of possible duplicate column names \r\n   ...:     arrays.extend(self.iloc[:, k] for k in range(len(self.columns))) \r\n   ...:  \r\n   ...:     # Python 3 supports at most 255 arguments to constructor, and \r\n   ...:     # things get slow with this many fields in Python 2 \r\n   ...:     if name is not None and len(self.columns) + index < 256: \r\n   ...:         # `rename` is unsupported in Python 2.6 \r\n   ...:         try: \r\n   ...:             itertuple = collections.namedtuple(name, fields, rename=True) \r\n   ...:             zipped_arrays = zip(*arrays) \r\n   ...:  \r\n   ...:             if namedtuple: \r\n   ...:                 return map(itertuple._make, zipped_arrays) \r\n   ...:             else: \r\n   ...:                 return zipped_arrays \r\n   ...:  \r\n   ...:         except Exception: \r\n   ...:             pass \r\n   ...:  \r\n   ...:     # fallback to regular tuples \r\n   ...:     return zip(*arrays) \r\n   ...:  \r\n   ...: %memit list(iter(itertuples_1(df, index=True, namedtuple=True)))                             \r\npeak memory: 3580.93 MiB, increment: 3192.91 MiB\r\n```\r\n\r\n**namedtuple=False**\r\n```\r\nIn [1]: %load_ext memory_profiler \r\n   ...:  \r\n   ...: import collections \r\n   ...: import numpy as np \r\n   ...: import pandas as pd \r\n   ...: import time \r\n   ...: import random \r\n   ...:  \r\n   ...: n = int(1E7) \r\n   ...: df = pd.DataFrame({\"A\": np.arange(n)}) \r\n   ...: df['B'] = df['A'] / 100 \r\n   ...: df['C'] = np.random.choice(list(\"qwertyuiopsdfghjklzxcvbnm\"), size=n) \r\n   ...: df['D'] = pd.to_datetime(np.random.randint(15E17, 16E17, size=n)) \r\n   ...:  \r\n   ...: def itertuples_1(self, index=True, name=\"Pandas\", namedtuple=True): \r\n   ...:     arrays = [] \r\n   ...:     fields = list(self.columns) \r\n   ...:     if index: \r\n   ...:         arrays.append(self.index) \r\n   ...:         fields.insert(0, \"Index\") \r\n   ...:  \r\n   ...:     # use integer indexing because of possible duplicate column names \r\n   ...:     arrays.extend(self.iloc[:, k] for k in range(len(self.columns))) \r\n   ...:  \r\n   ...:     # Python 3 supports at most 255 arguments to constructor, and \r\n   ...:     # things get slow with this many fields in Python 2 \r\n   ...:     if name is not None and len(self.columns) + index < 256: \r\n   ...:         # `rename` is unsupported in Python 2.6 \r\n   ...:         try: \r\n   ...:             itertuple = collections.namedtuple(name, fields, rename=True) \r\n   ...:             zipped_arrays = zip(*arrays) \r\n   ...:  \r\n   ...:             if namedtuple: \r\n   ...:                 return map(itertuple._make, zipped_arrays) \r\n   ...:             else: \r\n   ...:                 return zipped_arrays \r\n   ...:  \r\n   ...:         except Exception: \r\n   ...:             pass \r\n   ...:  \r\n   ...:     # fallback to regular tuples \r\n   ...:     return zip(*arrays) \r\n   ...:  \r\n   ...: %memit list(iter(itertuples_1(df, index=True, namedtuple=False)))                            \r\npeak memory: 3486.89 MiB, increment: 3099.02 MiB\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447671149",
    "html_url": "https://github.com/pandas-dev/pandas/pull/20796#issuecomment-447671149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20796",
    "id": 447671149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzY3MTE0OQ==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-16T19:59:27Z",
    "updated_at": "2018-12-16T19:59:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There's a bit of a difference:\r\n\r\nI mean time-wise in this particular case.\r\n\r\nMemory wise, I think that the issue could be how you measure it. In both cases you convert the final result to `list` and you measure that. Then it is normal that it takes the same amount of memory. Try just iterating over it in a for loop."
  }
]
