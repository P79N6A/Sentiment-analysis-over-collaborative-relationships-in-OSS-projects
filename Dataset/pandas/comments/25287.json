[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/462865779",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25287#issuecomment-462865779",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25287",
    "id": 462865779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mjg2NTc3OQ==",
    "user": {
      "login": "joaoe",
      "id": 461983,
      "node_id": "MDQ6VXNlcjQ2MTk4Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/461983?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaoe",
      "html_url": "https://github.com/joaoe",
      "followers_url": "https://api.github.com/users/joaoe/followers",
      "following_url": "https://api.github.com/users/joaoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaoe/subscriptions",
      "organizations_url": "https://api.github.com/users/joaoe/orgs",
      "repos_url": "https://api.github.com/users/joaoe/repos",
      "events_url": "https://api.github.com/users/joaoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T17:57:12Z",
    "updated_at": "2019-03-15T21:33:40Z",
    "author_association": "NONE",
    "body": "The culprit line https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L701\r\n```\r\nraise TypeError(msg.format(string))\r\n```\r\n`str.format` will crash if any of the arguments is a unicode string with non-ascii chars.\r\n\r\nA simple fix is to replace it with\r\n```\r\nmsg = \"Could not construct DatetimeTZDtype from '%s'\"\r\n...\r\nraise TypeError(msg % string)\r\n```\r\nbecause `str.__mod__` can cope with unicode strings and will convert the whole string to unicode if needed.\r\n\r\nThere are other occurences in the same file of the same issue.\r\n\r\nThe issue is caused because python 2 uses ascii as the default encoding `sys.getdefaultencoding()`\r\n\r\n\r\nEDIT: full patch\r\n\r\n```diff\r\ndiff -Nur a/site-packages/pandas/core/arrays/integer.py b/site-packages/pandas/core/arrays/integer.py\r\n--- a/site-packages/pandas/core/arrays/integer.py\t2019-02-04 16:07:47.503785000 +0100\r\n+++ b/site-packages/pandas/core/arrays/integer.py\t2019-02-12 19:00:00.620344800 +0100\r\n@@ -85,8 +85,7 @@\r\n         \"\"\"\r\n         if string == cls.name:\r\n             return cls()\r\n-        raise TypeError(\"Cannot construct a '{}' from \"\r\n-                        \"'{}'\".format(cls, string))\r\n+        raise TypeError(\"Cannot construct a '%s' from '%s'\" % (cls, string))\r\n \r\n \r\n def integer_array(values, dtype=None, copy=False):\r\ndiff -Nur a/site-packages/pandas/core/arrays/sparse.py b/site-packages/pandas/core/arrays/sparse.py\r\n--- a/site-packages/pandas/core/arrays/sparse.py\t2019-02-04 16:07:47.509799000 +0100\r\n+++ b/site-packages/pandas/core/arrays/sparse.py\t2019-02-13 10:39:01.032719400 +0100\r\n@@ -220,24 +220,25 @@\r\n         -------\r\n         SparseDtype\r\n         \"\"\"\r\n-        msg = \"Could not construct SparseDtype from '{}'\".format(string)\r\n+        msg = \"Could not construct SparseDtype from '%s'\"\r\n         if string.startswith(\"Sparse\"):\r\n             try:\r\n                 sub_type, has_fill_value = cls._parse_subtype(string)\r\n                 result = SparseDtype(sub_type)\r\n             except Exception:\r\n-                raise TypeError(msg)\r\n+                raise TypeError(msg % string)\r\n+            \r\n             else:\r\n-                msg = (\"Could not construct SparseDtype from '{}'.\\n\\nIt \"\r\n+                msg = (\"Could not construct SparseDtype from '%s'.\\n\\nIt \"\r\n                        \"looks like the fill_value in the string is not \"\r\n                        \"the default for the dtype. Non-default fill_values \"\r\n                        \"are not supported. Use the 'SparseDtype()' \"\r\n                        \"constructor instead.\")\r\n                 if has_fill_value and str(result) != string:\r\n-                    raise TypeError(msg.format(string))\r\n+                    raise TypeError(msg % string)\r\n                 return result\r\n         else:\r\n-            raise TypeError(msg)\r\n+            raise TypeError(msg % string)\r\n \r\n     @staticmethod\r\n     def _parse_subtype(dtype):\r\ndiff -Nur a/site-packages/pandas/core/dtypes/dtypes.py b/site-packages/pandas/core/dtypes/dtypes.py\r\n--- a/site-packages/pandas/core/dtypes/dtypes.py\t2019-02-04 16:07:47.537873000 +0100\r\n+++ b/site-packages/pandas/core/dtypes/dtypes.py\t2019-02-12 18:53:34.444410700 +0100\r\n@@ -687,7 +687,7 @@\r\n         datetime64[ns, UTC]\r\n         \"\"\"\r\n         if isinstance(string, compat.string_types):\r\n-            msg = \"Could not construct DatetimeTZDtype from '{}'\"\r\n+            msg = \"Could not construct DatetimeTZDtype from '%s'\"\r\n             try:\r\n                 match = cls._match.match(string)\r\n                 if match:\r\n@@ -696,7 +696,7 @@\r\n             except Exception:\r\n                 # TODO(py3): Change this pass to `raise TypeError(msg) from e`\r\n                 pass\r\n-            raise TypeError(msg.format(string))\r\n+            raise TypeError(msg % string)\r\n \r\n         raise TypeError(\"Could not construct DatetimeTZDtype\")\r\n \r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473069564",
    "html_url": "https://github.com/pandas-dev/pandas/issues/25287#issuecomment-473069564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25287",
    "id": 473069564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzA2OTU2NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T21:24:48Z",
    "updated_at": "2019-03-14T21:24:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "We use `{}` string formatters through the codebase, so that patch won't quite work.\r\n\r\nWe really shouldn't be calling `is_extension_dtype` on data if we can avoid it. That would ideally only be called on dtypes. I'm not sure if that's possible here."
  }
]
