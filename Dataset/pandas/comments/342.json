[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2999181",
    "html_url": "https://github.com/pandas-dev/pandas/issues/342#issuecomment-2999181",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/342",
    "id": 2999181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTkxODE=",
    "user": {
      "login": "hatmatrix",
      "id": 1145385,
      "node_id": "MDQ6VXNlcjExNDUzODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1145385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hatmatrix",
      "html_url": "https://github.com/hatmatrix",
      "followers_url": "https://api.github.com/users/hatmatrix/followers",
      "following_url": "https://api.github.com/users/hatmatrix/following{/other_user}",
      "gists_url": "https://api.github.com/users/hatmatrix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hatmatrix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hatmatrix/subscriptions",
      "organizations_url": "https://api.github.com/users/hatmatrix/orgs",
      "repos_url": "https://api.github.com/users/hatmatrix/repos",
      "events_url": "https://api.github.com/users/hatmatrix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hatmatrix/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-03T05:21:09Z",
    "updated_at": "2011-12-03T05:21:29Z",
    "author_association": "NONE",
    "body": "Thanks Wes! I didn't realize you'd posted this, but was actually coming to the mailing list to suggest a transform function (much like in R). \n\n```\nnp.random.seed(1)\n\ndd = {\n    'category':['a','a','b'],\n    'x':np.random.rand(3),\n    'y':np.random.rand(3),\n    'z':np.random.rand(3)\n    }\n\npd = pandas.DataFrame(dd)\n\nIn [81]: pd\nOut[81]: \n   category  x          y        z     \n0  a         0.417      0.3023   0.1863\n1  a         0.7203     0.1468   0.3456\n2  b         0.0001144  0.09234  0.3968\n\ndef scale(x):\n    centred = x-x.mean()\n    return centred/x.std()\n\nprint pd[['x','y','z']].apply(scale)\n\n   x       y       z     \n0  0.1047  1.118  -1.123 \n1  0.9435 -0.3094  0.3282\n2 -1.048  -0.8087  0.7946\n```\n\nReassignments could be implemented in several ways, that I can think of:\n\n1) \n\n```\npd[['x','y','z']] = pd[['x','y','z']].apply(scale)\n```\n\n2)\na.\n\n```\npd = pd.transform(pd[['x','y','z']].apply(scale))\n```\n\nwhere transform can accept similar arguments to DataFrame? E.g.,\n\nb.\n\n```\nnparr = pd[['x','y','z']].apply(scale).values\npd = pd.transform(nparr,columns=['x','y','z'])\n```\n\nc.\n\n```\ndct = pd[['x','y','z']].apply(scale).to_dict()\npd = pd.transform(dct)\n```\n\nDepending on the implementation though, (1) may be better. In R, I believe any replacement of values of a subset will copy/modify the entire data frame and reassign the value to the original symbol, which leads to its inefficiency... but so in that case something like\n\n```\npd[,c(\"x\",\"y\",\"z\")] <- lapply(pd[,c(\"x\",\"y\",\"z\")],base::scale)\n```\n\nis effectively the same as writing\n\n```\npd <- do.call(transform,c(list(x),lapply(pd[,c(\"x\",\"y\",\"z\")],base::scale)))\n```\n\nwhich is a convenient way of writing\n\n```\npd <- transform(pd,x=newx,y=newy,z=newx)\n```\n\nand so on.\n\nBut if in pandas, individual columns rather than the entire DataFrame can be modified, then the reassignment to the entire pd DataFrame might not be the best idea. And a (1)-type implementation could be general enough to work around the limitation of \"setting on mixed-type frames only allowed with scalar values\"  which are allowed in R - I'm not sure if it was a deliberate decision on your part to not allow this, but if not, could be useful in certain situations. For instance, permitting operations like\n\n```\npd.ix[:1,'category'] = ['c','d']\n```\n\nThough, to be honest I've caught a bit of the functional-style bug so I'm a bit biased against partial reassignment over returning new values from functions, but I guess reassignment and rebinding is generally the way to go with large data sets... (and it would provide a consistent experience for R users).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3199430",
    "html_url": "https://github.com/pandas-dev/pandas/issues/342#issuecomment-3199430",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/342",
    "id": 3199430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTk0MzA=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-19T05:21:30Z",
    "updated_at": "2011-12-19T05:21:30Z",
    "author_association": "MEMBER",
    "body": "I implemented option #1\n\n```\npd[['x','y','z']] = pd[['x','y','z']].apply(scale)\n```\n\nin the above referenced commit. Wasn't very difficult in the end. Can address other kinds of transformations if we want at a later time.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/4433738",
    "html_url": "https://github.com/pandas-dev/pandas/issues/342#issuecomment-4433738",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/342",
    "id": 4433738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzM3Mzg=",
    "user": {
      "login": "hatmatrix",
      "id": 1145385,
      "node_id": "MDQ6VXNlcjExNDUzODU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1145385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hatmatrix",
      "html_url": "https://github.com/hatmatrix",
      "followers_url": "https://api.github.com/users/hatmatrix/followers",
      "following_url": "https://api.github.com/users/hatmatrix/following{/other_user}",
      "gists_url": "https://api.github.com/users/hatmatrix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hatmatrix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hatmatrix/subscriptions",
      "organizations_url": "https://api.github.com/users/hatmatrix/orgs",
      "repos_url": "https://api.github.com/users/hatmatrix/repos",
      "events_url": "https://api.github.com/users/hatmatrix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hatmatrix/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-03-10T19:46:47Z",
    "updated_at": "2012-03-10T19:46:47Z",
    "author_association": "NONE",
    "body": "Thanks Wes - sorry for my extremely delayed response. But this is fantastic\nnews!\n\nOn Mon, Dec 19, 2011 at 6:21 AM, Wes McKinney <\nreply@reply.github.com\n\n> wrote:\n> \n> I implemented option #1\n> \n> ```\n> pd[['x','y','z']] = pd[['x','y','z']].apply(scale)\n> ```\n> \n> in the above referenced commit. Wasn't very difficult in the end. Can\n> address other kinds of transformations if we want at a later time.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/wesm/pandas/issues/342#issuecomment-3199430\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/447066358",
    "html_url": "https://github.com/pandas-dev/pandas/issues/342#issuecomment-447066358",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/342",
    "id": 447066358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzA2NjM1OA==",
    "user": {
      "login": "erichamers",
      "id": 28244037,
      "node_id": "MDQ6VXNlcjI4MjQ0MDM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28244037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erichamers",
      "html_url": "https://github.com/erichamers",
      "followers_url": "https://api.github.com/users/erichamers/followers",
      "following_url": "https://api.github.com/users/erichamers/following{/other_user}",
      "gists_url": "https://api.github.com/users/erichamers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erichamers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erichamers/subscriptions",
      "organizations_url": "https://api.github.com/users/erichamers/orgs",
      "repos_url": "https://api.github.com/users/erichamers/repos",
      "events_url": "https://api.github.com/users/erichamers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erichamers/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-13T18:11:45Z",
    "updated_at": "2018-12-13T18:11:45Z",
    "author_association": "NONE",
    "body": "The problem I have now is that I don't have the option to set types when reading data from a sql query, so it would be good if I could parse different data types for multiple columns.\r\n\r\nI don't know if something like this has been implemented yet, but it would look something like this:\r\n\r\n```\r\nDataFrame.transform({'Column A': 'type A', 'Column B': 'type B', 'Column C': 'type C'})\r\n```"
  }
]
