[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376559491",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20500#issuecomment-376559491",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20500",
    "id": 376559491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjU1OTQ5MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T15:04:59Z",
    "updated_at": "2018-03-27T15:04:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure about the expected behavior here. How do you represent multiple-part keys in JSON?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376730925",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20500#issuecomment-376730925",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20500",
    "id": 376730925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjczMDkyNQ==",
    "user": {
      "login": "k-yaegashi",
      "id": 2884380,
      "node_id": "MDQ6VXNlcjI4ODQzODA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2884380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k-yaegashi",
      "html_url": "https://github.com/k-yaegashi",
      "followers_url": "https://api.github.com/users/k-yaegashi/followers",
      "following_url": "https://api.github.com/users/k-yaegashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/k-yaegashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k-yaegashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k-yaegashi/subscriptions",
      "organizations_url": "https://api.github.com/users/k-yaegashi/orgs",
      "repos_url": "https://api.github.com/users/k-yaegashi/repos",
      "events_url": "https://api.github.com/users/k-yaegashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k-yaegashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T01:37:48Z",
    "updated_at": "2018-03-28T01:37:48Z",
    "author_association": "NONE",
    "body": "I don't know what is the best solution that can satisfy everyone.\r\n\r\nAccording to the [JSON specification](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf), including value other than string as object's key is impossible.\r\n\r\nIn order to avoid this problem in my work, I usually eliminate all tuples and manage to get string expression in some way, before writing JSON:\r\n\r\n```python\r\nimport json, pandas\r\ndef eliminate_column_tuple(df, glue):\r\n    columns = df.columns\r\n    new_columns = []\r\n    for column in columns:\r\n        if type(column) is tuple:\r\n            joined = glue.join(column)\r\n            if joined.endswith(glue):\r\n                joined = joined[:-len(glue)]\r\n            new_columns.append(joined)\r\n        else:\r\n            new_columns.append(column)\r\n    df.columns = new_columns\r\n    return df\r\ntest = pandas.DataFrame(data = {\r\n    'key': ['a', 'a', 'b', 'b', 'a'],\r\n    'value': [1, 2, 3, 4, 5]\r\n})\r\nstat = test.groupby('key').agg(['sum', 'mean', 'count'])\r\nsimple_stat = eliminate_column_tuple(stat, '|')\r\nstat_json = simple_stat.to_json()\r\nprint(stat_json)\r\njson.loads(stat_json)\r\n```\r\n\r\nHowever, such kind of solution strongly depends on the purpose.\r\n\r\nIf this problem won't be fixed, at least it is recommended to write into the API document that `to_json()` is useless for `DataFrame` with tuple columns.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/376734083",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20500#issuecomment-376734083",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20500",
    "id": 376734083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjczNDA4Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T01:56:28Z",
    "updated_at": "2018-03-28T01:56:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd prefer to raise an exception (like Python does) rather than document\nthat we produce invalid JSON.\n\nOn Tue, Mar 27, 2018 at 8:37 PM, k-yaegashi <notifications@github.com>\nwrote:\n\n> I don't know what is the best solution that can satisfy everyone.\n>\n> According to the JSON specification\n> <http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf>,\n> including value other than string as object's key is impossible.\n>\n> In order to avoid this problem in my work, I usually eliminate all tuples\n> and manage to get string expression in some way, before writing JSON:\n>\n> import json, pandasdef eliminate_column_tuple(df, glue):\n>     columns = df.columns\n>     new_columns = []\n>     for column in columns:\n>         if type(column) is tuple:\n>             joined = glue.join(column)\n>             if joined.endswith(glue):\n>                 joined = joined[:-len(glue)]\n>             new_columns.append(joined)\n>         else:\n>             new_columns.append(column)\n>     df.columns = new_columns\n>     return df\n> test = pandas.DataFrame(data = {\n>     'key': ['a', 'a', 'b', 'b', 'a'],\n>     'value': [1, 2, 3, 4, 5]\n> })\n> stat = test.groupby('key').agg(['sum', 'mean', 'count'])\n> simple_stat = eliminate_column_tuple(stat, '|')\n> stat_json = simple_stat.to_json()print(stat_json)\n> json.loads(stat_json)\n>\n> However, such kind of solution strongly depends on the purpose.\n>\n> If this problem won't be fixed, at least it is recommended to write into\n> the API document that to_json() is useless for DataFrame with tuple\n> columns.\n>\n> â€”\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/20500#issuecomment-376730925>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIpLHwxdZaj8caZxw0CVbnVHqwkDcks5tiulxgaJpZM4S81Ul>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/377608328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20500#issuecomment-377608328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20500",
    "id": 377608328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzYwODMyOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T19:55:12Z",
    "updated_at": "2018-03-30T19:55:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah I agree, can put a check here that if an index is ``object`` dtype then\r\n\r\n```\r\nIn [6]: infer_dtype = pd.api.types.infer_dtype\r\n\r\nIn [8]: infer_dtype(pd.Index([1,2,3]))\r\nOut[8]: 'integer'\r\n\r\nIn [9]: infer_dtype(pd.Index(['foo', 'bar', 'baz']))\r\nOut[9]: 'string'\r\n\r\nIn [10]: infer_dtype(pd.Index(['foo', 'bar', 1]))\r\nOut[10]: 'mixed-integer'\r\n\r\nIn [11]: infer_dtype(pd.Index(['foo', 'bar', (1, 2)]))\r\nOut[11]: 'mixed'\r\n```\r\n\r\nprob allow [10] but not [11]"
  }
]
