[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32045903",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-32045903",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 32045903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDQ1OTAz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-10T17:10:07Z",
    "updated_at": "2014-01-10T17:10:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does this not work?\n\n```\ndf = pd.read_csv('imdb.txt').sort(columns='year')\ndf[df['year']>1990].to_csv('filtered.csv')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32046113",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-32046113",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 32046113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDQ2MTEz",
    "user": {
      "login": "elyase",
      "id": 1175888,
      "node_id": "MDQ6VXNlcjExNzU4ODg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1175888?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elyase",
      "html_url": "https://github.com/elyase",
      "followers_url": "https://api.github.com/users/elyase/followers",
      "following_url": "https://api.github.com/users/elyase/following{/other_user}",
      "gists_url": "https://api.github.com/users/elyase/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elyase/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elyase/subscriptions",
      "organizations_url": "https://api.github.com/users/elyase/orgs",
      "repos_url": "https://api.github.com/users/elyase/repos",
      "events_url": "https://api.github.com/users/elyase/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elyase/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-10T17:12:17Z",
    "updated_at": "2014-01-10T17:15:23Z",
    "author_association": "NONE",
    "body": "Sure that works, but the creation of the unnecessary intermediate variable `df` interrupts the functional flow that is so nice to have in pandas. Is there something I don't see against this addition?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32046948",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-32046948",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 32046948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDQ2OTQ4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-10T17:21:54Z",
    "updated_at": "2014-01-10T17:21:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "there was a whole discussion about this in #2460 IIRC\n\nThe problem with using the `filter` function is that it filters an index (and is not what you are doing).\n\nhowever, could potentially do something like this:\n\n```\npd.read_csv('imdb.txt')\n  .sort(columns='year')\n  .[lambda x: x['year']>1990]\n  .to_csv('filtered.csv')\n```\n\nor\n\n```\npd.read_csv('imdb.txt')\n  .sort(columns='year')\n  .loc[lambda x: x['year']>1990]\n  .to_csv('filtered.csv')\n```\n\nor could make `filter` first argument accept a callable and then use the `axis` keyword to module the resultant selector\n\nso making `__getitem__` and the indexers (`iloc/loc/ix`) accept a callable that returns a boolean indexer is not too hard\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32137419",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-32137419",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 32137419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTM3NDE5",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-12T23:06:38Z",
    "updated_at": "2014-01-12T23:06:38Z",
    "author_association": "MEMBER",
    "body": "Couldn't you use query as well? IMO lambdas in loc et al is bit of feature\ncreep.\n\nOn Friday, January 10, 2014, jreback wrote:\n\n> there was a whole discussion about this in #2460https://github.com/pydata/pandas/issues/2460IIRC\n> \n> The problem with using the filter function is that it filters an index\n> (and is not what you are doing).\n> \n> however, could potentially do something like this:\n> \n> pd.read_csv('imdb.txt')\n>   .sort(columns='year')\n>   .[lambda x: x['year']>1990]\n>   .to_csv('filtered.csv')\n> \n> or\n> \n> pd.read_csv('imdb.txt')\n>   .sort(columns='year')\n>   .loc[lambda x: x['year']>1990]\n>   .to_csv('filtered.csv')\n> \n> or could make filter first argument accept a callable and then use the\n> axis keyword to module the resultant selector\n> \n> so making **getitem** and the indexers (iloc/loc/ix) accept a callable\n> that returns a boolean indexer is not too hard\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/5900#issuecomment-32046948\n> .\n\n## \n\n## \n\nBest,\nPhillip Cloud\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/32137444",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-32137444",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 32137444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTM3NDQ0",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-12T23:07:38Z",
    "updated_at": "2014-01-12T23:07:38Z",
    "author_association": "MEMBER",
    "body": "Hm nvm u would need the local\n\nOn Sunday, January 12, 2014, Phillip Cloud wrote:\n\n> Couldn't you use query as well? IMO lambdas in loc et al is bit of feature\n> creep.\n> \n> On Friday, January 10, 2014, jreback wrote:\n> \n> > there was a whole discussion about this in #2460https://github.com/pydata/pandas/issues/2460IIRC\n> > \n> > The problem with using the filter function is that it filters an index\n> > (and is not what you are doing).\n> > \n> > however, could potentially do something like this:\n> > \n> > pd.read_csv('imdb.txt')\n> >   .sort(columns='year')\n> >   .[lambda x: x['year']>1990]\n> >   .to_csv('filtered.csv')\n> > \n> > or\n> > \n> > pd.read_csv('imdb.txt')\n> >   .sort(columns='year')\n> >   .loc[lambda x: x['year']>1990]\n> >   .to_csv('filtered.csv')\n> > \n> > or could make filter first argument accept a callable and then use the\n> > axis keyword to module the resultant selector\n> > \n> > so making **getitem** and the indexers (iloc/loc/ix) accept a callable\n> > that returns a boolean indexer is not too hard\n> > \n> > â€”\n> > Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/5900#issuecomment-32046948\n> > .\n> \n> ## \n> \n> ## \n> \n> Best,\n> Phillip Cloud\n\n## \n\n## \n\nBest,\nPhillip Cloud\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/140612889",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-140612889",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 140612889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDYxMjg4OQ==",
    "user": {
      "login": "naught101",
      "id": 167164,
      "node_id": "MDQ6VXNlcjE2NzE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/167164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naught101",
      "html_url": "https://github.com/naught101",
      "followers_url": "https://api.github.com/users/naught101/followers",
      "following_url": "https://api.github.com/users/naught101/following{/other_user}",
      "gists_url": "https://api.github.com/users/naught101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naught101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naught101/subscriptions",
      "organizations_url": "https://api.github.com/users/naught101/orgs",
      "repos_url": "https://api.github.com/users/naught101/repos",
      "events_url": "https://api.github.com/users/naught101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naught101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-16T03:09:14Z",
    "updated_at": "2015-09-16T03:09:14Z",
    "author_association": "NONE",
    "body": "Might it be possible with patsy to make a filter method that uses a formula string?\n\n``` python\npd.read_csv('imdb.txt')\n  .sort(columns='year')\n  .filter('year >1990')\n  .to_csv('filtered.csv')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/140618664",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-140618664",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 140618664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDYxODY2NA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-16T03:52:27Z",
    "updated_at": "2015-09-16T03:52:27Z",
    "author_association": "MEMBER",
    "body": "@naught101 Using strings to filter dataframes is already possible. The method is `query`, e.g.,\n`pd.DataFrame({'x': [1, 2, 3, 4, 5]}).query('x > 3')`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/140897722",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-140897722",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 140897722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDg5NzcyMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-16T21:17:47Z",
    "updated_at": "2015-09-16T21:17:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suppose `.query` _could_ take a _lambda_ to provide this in-line type of chaining\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/177564495",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5900#issuecomment-177564495",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5900",
    "id": 177564495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzU2NDQ5NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-31T17:58:48Z",
    "updated_at": "2016-01-31T17:58:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "dupe of #11485 (which has more examples)\n"
  }
]
