[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274672328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-274672328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 274672328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDY3MjMyOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-24T01:21:13Z",
    "updated_at": "2017-01-24T01:21:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "http://pandas-docs.github.io/pandas-docs-travis/io.html#index-columns-and-trailing-delimiters\r\n\r\nSo you want `index_col=False`\r\n\r\n```python\r\nIn [5]: data = \"\"\"UNITID,XTUIT1,TUITION1 \r\n   ...: 100636,\"R\",0,\r\n   ...: \"\"\"\r\n   ...: f = StringIO(data)\r\n   ...: \r\n   ...: df = pd.read_csv(f, index_col=False)\r\n\r\nIn [6]: df\r\nOut[6]: \r\n   UNITID XTUIT1  TUITION1 \r\n0  100636      R          0\r\n```\r\n\r\nIIRC this is to make it easier to read data from systems that don't label the \"row names\" column (like R).\r\n\r\nAny suggestions on how to document this better?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274674726",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-274674726",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 274674726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDY3NDcyNg==",
    "user": {
      "login": "mattayes",
      "id": 8622473,
      "node_id": "MDQ6VXNlcjg2MjI0NzM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8622473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattayes",
      "html_url": "https://github.com/mattayes",
      "followers_url": "https://api.github.com/users/mattayes/followers",
      "following_url": "https://api.github.com/users/mattayes/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattayes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattayes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattayes/subscriptions",
      "organizations_url": "https://api.github.com/users/mattayes/orgs",
      "repos_url": "https://api.github.com/users/mattayes/repos",
      "events_url": "https://api.github.com/users/mattayes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattayes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-24T01:35:06Z",
    "updated_at": "2017-01-24T01:36:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @TomAugspurger, that works if you have a malformed file with delimiters at the end of each line (copy/paste from the docs). But if a row has multiple extra columns (two, for example), it will return a `MultiIndex`:\r\n\r\n```python\r\n# Note the two extra columns\r\ndata = \"\"\"UNITID,XTUIT1,TUITION1 \r\n100636,\"R\",0,,\r\n\"\"\"\r\nf = StringIO(data)\r\n\r\ndf = pd.read_csv(f)\r\nprint(df)\r\n```\r\n```\r\n\t\tUNITID\tXTUIT1\tTUITION1 \r\n100636\tR\t0\t\t\r\n```\r\n\r\nIf I use `index_col=False`, it raises an `IndexError` that is pretty vague (relative to what the actual problem is):\r\n```python\r\npd.read_csv(f, index_col=False)\r\n```\r\n```\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-12-e813fbd4b68d> in <module>()\r\n      9 f = StringIO(data)\r\n     10 \r\n---> 11 df = pd.read_csv(f, index_col=False)\r\n     12 print(df.to_clipboard())\r\n\r\n/path/to/pandas/io/parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, skip_footer, doublequote, delim_whitespace, as_recarray, compact_ints, use_unsigned, low_memory, buffer_lines, memory_map, float_precision)\r\n    644                     skip_blank_lines=skip_blank_lines)\r\n    645 \r\n--> 646         return _read(filepath_or_buffer, kwds)\r\n    647 \r\n    648     parser_f.__name__ = name\r\n\r\n/path/to/pandas/io/parsers.py in _read(filepath_or_buffer, kwds)\r\n    399         return parser\r\n    400 \r\n--> 401     data = parser.read()\r\n    402     parser.close()\r\n    403     return data\r\n\r\n/path/to/pandas/io/parsers.py in read(self, nrows)\r\n    937                 raise ValueError('skipfooter not supported for iteration')\r\n    938 \r\n--> 939         ret = self._engine.read(nrows)\r\n    940 \r\n    941         if self.options.get('as_recarray'):\r\n\r\n/path/to/pandas/io/parsers.py in read(self, nrows)\r\n   1506     def read(self, nrows=None):\r\n   1507         try:\r\n-> 1508             data = self._reader.read(nrows)\r\n   1509         except StopIteration:\r\n   1510             if self._first_chunk:\r\n\r\npandas/parser.pyx in pandas.parser.TextReader.read (pandas/parser.c:10415)()\r\n\r\npandas/parser.pyx in pandas.parser.TextReader._read_low_memory (pandas/parser.c:10691)()\r\n\r\npandas/parser.pyx in pandas.parser.TextReader._read_rows (pandas/parser.c:11728)()\r\n\r\npandas/parser.pyx in pandas.parser.TextReader._convert_column_data (pandas/parser.c:12805)()\r\n\r\npandas/parser.pyx in pandas.parser.TextReader._get_column_name (pandas/parser.c:17512)()\r\n\r\nIndexError: list index out of range\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274748590",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-274748590",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 274748590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDc0ODU5MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-24T09:12:41Z",
    "updated_at": "2017-01-24T09:12:41Z",
    "author_association": "MEMBER",
    "body": "A workaround is to use `usecols` if you know how many columns there are (which you could also infer from the first row):\r\n\r\n```\r\nIn [24]: pd.read_csv(StringIO(data), usecols=range(3))\r\nOut[24]: \r\n   UNITID XTUIT1  TUITION1 \r\n0  100636      R          0\r\n```\r\n\r\nNot sure if `pd.read_csv(f, index_col=False)` should work with multiple trailing comma's. But the error message is indeed not very helpful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/275001380",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-275001380",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 275001380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTAwMTM4MA==",
    "user": {
      "login": "mattayes",
      "id": 8622473,
      "node_id": "MDQ6VXNlcjg2MjI0NzM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8622473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattayes",
      "html_url": "https://github.com/mattayes",
      "followers_url": "https://api.github.com/users/mattayes/followers",
      "following_url": "https://api.github.com/users/mattayes/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattayes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattayes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattayes/subscriptions",
      "organizations_url": "https://api.github.com/users/mattayes/orgs",
      "repos_url": "https://api.github.com/users/mattayes/repos",
      "events_url": "https://api.github.com/users/mattayes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattayes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-25T02:21:10Z",
    "updated_at": "2017-01-25T02:21:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche Thanks for the advice. Just using `index_col=False` solved my problem, though there's still a question of usability: Should `read_csv()` throw data into the index if there's extra columns or should it do something else?\r\n\r\nI don't find the current behavior to be very user-friendly, but there may be a reason why it is/has to be this way that I don't know."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/276000359",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-276000359",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 276000359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjAwMDM1OQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-30T08:06:06Z",
    "updated_at": "2017-01-30T08:06:06Z",
    "author_association": "MEMBER",
    "body": "Here are some alternatives:\r\n\r\n1) We error.  While it does not throw data in the output, this would make the `pandas` API more strict in terms of the data it would accept.  I think we try to be as accommodating as possible and attempt handle as much \"malform-ness\" as possible.\r\n\r\n2) We throw the data in the columns.  This could be troublesome, as we might throw in new data columns that the user would not expect.  In the index, it is easier to \"tuck away,\" especially when we write the data to a file since we can specify `index=False`.\r\n\r\nNow does this mean it's correct?  Not sure, but on the other hand, we do make this behavior very clear and even provide ways in which to circumvent it.  However, if anyone has strong opinions about breaking the status quo, then speak by all means! :smile:"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/276621342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-276621342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 276621342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjYyMTM0Mg==",
    "user": {
      "login": "danio",
      "id": 166006,
      "node_id": "MDQ6VXNlcjE2NjAwNg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/166006?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danio",
      "html_url": "https://github.com/danio",
      "followers_url": "https://api.github.com/users/danio/followers",
      "following_url": "https://api.github.com/users/danio/following{/other_user}",
      "gists_url": "https://api.github.com/users/danio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danio/subscriptions",
      "organizations_url": "https://api.github.com/users/danio/orgs",
      "repos_url": "https://api.github.com/users/danio/repos",
      "events_url": "https://api.github.com/users/danio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T10:19:09Z",
    "updated_at": "2017-02-01T10:19:09Z",
    "author_association": "NONE",
    "body": "Personally (as a pandas user), I find this to be pretty unintuitive. \r\nThe documentation (http://pandas-docs.github.io/pandas-docs-travis/io.html#io-read-csv-table) also doesn't help make it very clear:\r\n1.  First mention in the docs says \"Error handling ... Lines with too many fields (e.g. a csv line with too many commas) will by default cause an exception to be raised, and no DataFrame will be returned.\"\r\n2. The bad lines section linked from the above just mentions use_cols\r\n3. Discovering the \"Index columns and trailing delimiters\" section when thinking about how to read bad files is not straightforward (there are 5600 words in the documentation on read_csv!)\r\n\r\nOK it's easy to criticise :-/ Here's my suggestions:\r\n1. By default, reading CSV with unmatched column lengths would always raise an error, not just for lines after the first line, and that error would be consistent (e.g. `ParserError: Error tokenizing data. C error: Expected 3 fields in line 3, saw 4`)\r\n1. Current behaviour can be invoked with a parameter (e.g. fill_headers=True) to make it easy to use with R data\r\n1. Completely rework the documentation. It's really hard to navigate even the tree view (compared to the other file reading sections). This would be a big task, but I think it's really worth considering (or maybe this is already considered in some other issue?). I'd have a go myself if there were any support for it.\r\n\r\nThis is an important area for improvement as `read_csv` is a key bit of functionality for many users as it is so powerful to be able to drop existing data sources into pandas."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/276724036",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-276724036",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 276724036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjcyNDAzNg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T17:32:15Z",
    "updated_at": "2017-02-01T17:32:54Z",
    "author_association": "MEMBER",
    "body": "1) All for fixing documentation if you find it confusing.  Clarity about how `pandas` works is always appreciated.\r\n\r\nUnfortunately, I will have to disagree with the rest of your proposal on the following grounds:\r\n\r\n1) Data in the real world is never nice by default, so making `pandas` strict by default doesn't seem to make much sense for accessibility purposes.\r\n\r\n2) Our API for `read_csv` is pretty heavy at this point, and I don't think we would be in favor of adding yet another keyword argument to the signature.\r\n\r\n3) Correct me if I'm wrong, but your proposal seems to be more of a band-aid than an actual fix because you are sweeping away the current behavior as \"non-default\" - the best way to address this issue IMO is to address these cases gradually and come to a consensus on the behavior that we want to have when addressing malformed-rows.\r\n\r\nMind you that any such change will be a major API most likely, so we would need to tread lightly as we address these cases."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/276930440",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-276930440",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 276930440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjkzMDQ0MA==",
    "user": {
      "login": "danio",
      "id": 166006,
      "node_id": "MDQ6VXNlcjE2NjAwNg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/166006?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danio",
      "html_url": "https://github.com/danio",
      "followers_url": "https://api.github.com/users/danio/followers",
      "following_url": "https://api.github.com/users/danio/following{/other_user}",
      "gists_url": "https://api.github.com/users/danio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danio/subscriptions",
      "organizations_url": "https://api.github.com/users/danio/orgs",
      "repos_url": "https://api.github.com/users/danio/repos",
      "events_url": "https://api.github.com/users/danio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T11:13:39Z",
    "updated_at": "2017-02-02T11:13:39Z",
    "author_association": "NONE",
    "body": "Yes it has a lot of keywords, another one doesn't help. But the current use of index_col=False to mean something completely different to index_col=None makes the API less accessible IMO, not more.\r\n \r\nFrom the documentation I thought that the current behaviour was to make read_csv strict by default. e.g. error_bad_lines defaults to True.  It's really weird to me that too many fields in one situation causes an error, yet in another situation is handled silently. But I suppose that's the price that other users pay so that R users can have it work out of the box :-( I still think that the error when index_col=False is specified should match the error_bad_lines one."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/276933244",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-276933244",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 276933244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjkzMzI0NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T11:28:49Z",
    "updated_at": "2017-02-02T11:28:49Z",
    "author_association": "MEMBER",
    "body": "True, the documentation needs work, and some overhaul of the API will be needed eventually.  Not sure if that can be done in the near future, since the code is so engrained at this point and will require some careful deconstruction and reconstruction to re-establish functionality, but good to note for future development.\r\n\r\nThe reason for discrepancy with regards to `error_bad_lines` is because we give more weight to the first line or two read from the CSV to help determine the column count in some cases.  Thus, we are more lenient towards those columns (hence why we are not error-ing if you observe in the examples provided above)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/456875694",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15203#issuecomment-456875694",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15203",
    "id": 456875694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg3NTY5NA==",
    "user": {
      "login": "Yashesh123",
      "id": 25013935,
      "node_id": "MDQ6VXNlcjI1MDEzOTM1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25013935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Yashesh123",
      "html_url": "https://github.com/Yashesh123",
      "followers_url": "https://api.github.com/users/Yashesh123/followers",
      "following_url": "https://api.github.com/users/Yashesh123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Yashesh123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Yashesh123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Yashesh123/subscriptions",
      "organizations_url": "https://api.github.com/users/Yashesh123/orgs",
      "repos_url": "https://api.github.com/users/Yashesh123/repos",
      "events_url": "https://api.github.com/users/Yashesh123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Yashesh123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T16:44:45Z",
    "updated_at": "2019-01-23T16:44:45Z",
    "author_association": "NONE",
    "body": "> A workaround is to use `usecols` if you know how many columns there are (which you could also infer from the first row):\r\n> \r\n> ```\r\n> In [24]: pd.read_csv(StringIO(data), usecols=range(3))\r\n> Out[24]: \r\n>    UNITID XTUIT1  TUITION1 \r\n> 0  100636      R          0\r\n> ```\r\n> Not sure if `pd.read_csv(f, index_col=False)` should work with multiple trailing comma's. But the error message is indeed not very helpful.\r\n\r\nThis actually works for me thank you very much"
  }
]
