[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369963773",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-369963773",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 369963773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTk2Mzc3Mw==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-03-02T16:01:50Z",
    "updated_at": "2018-03-20T21:02:28Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19957?src=pr&el=h1) Report\n> Merging [#19957](https://codecov.io/gh/pandas-dev/pandas/pull/19957?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/7273ea0709590e6264607f227bb8def0ef656c50?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/19957/graphs/tree.svg?token=eZ4WkYLtcO&width=650&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/19957?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #19957      +/-   ##\n==========================================\n+ Coverage   91.77%   91.78%   +<.01%     \n==========================================\n  Files         152      152              \n  Lines       49205    49223      +18     \n==========================================\n+ Hits        45159    45177      +18     \n  Misses       4046     4046\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.16% <100%> (ø)` | :arrow_up: |\n| #single | `41.84% <35.71%> (-0.01%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/19957?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/arrays/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/19957/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL2Jhc2UucHk=) | `83.33% <100%> (+2.68%)` | :arrow_up: |\n| [pandas/core/arrays/categorical.py](https://codecov.io/gh/pandas-dev/pandas/pull/19957/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL2NhdGVnb3JpY2FsLnB5) | `96.2% <100%> (-0.02%)` | :arrow_down: |\n| [pandas/core/window.py](https://codecov.io/gh/pandas-dev/pandas/pull/19957/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvd2luZG93LnB5) | `96.26% <0%> (-0.01%)` | :arrow_down: |\n| [pandas/plotting/\\_core.py](https://codecov.io/gh/pandas-dev/pandas/pull/19957/diff?src=pr&el=tree#diff-cGFuZGFzL3Bsb3R0aW5nL19jb3JlLnB5) | `82.27% <0%> (ø)` | :arrow_up: |\n| [pandas/io/json/normalize.py](https://codecov.io/gh/pandas-dev/pandas/pull/19957/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL2pzb24vbm9ybWFsaXplLnB5) | `96.93% <0%> (+0.06%)` | :arrow_up: |\n| [pandas/util/testing.py](https://codecov.io/gh/pandas-dev/pandas/pull/19957/diff?src=pr&el=tree#diff-cGFuZGFzL3V0aWwvdGVzdGluZy5weQ==) | `84.11% <0%> (+0.16%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19957?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/19957?src=pr&el=footer). Last update [7273ea0...4885245](https://codecov.io/gh/pandas-dev/pandas/pull/19957?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369966899",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-369966899",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 369966899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTk2Njg5OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T16:09:25Z",
    "updated_at": "2018-03-02T16:09:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Changed how this is organized a bit, to reflect a pattern I noticed here an elsewhere.\r\n\r\nIn several places (here, factorize, unique), a method like `.argsort` is composed of three parts\r\n\r\n1.) Data coercion / prep\r\n2.) The actual algorithm\r\n3.) postprocessing\r\n\r\nIn the case of argsort, it's\r\n\r\n1.) Just the array for most types, the codes for `Categorical`\r\n2.) `np.argsort`\r\n3.) Maybe reversiong for ascending=False\r\n\r\nSo I split the method in two `EA.argsort` and `EA._values_for_argsort`. For the common case of \"I just want to pick which array gets sent to the algo\", you just have to overrride `_values_for_argort`. If you need total control (e.g. if you aren't using `np.argsort` to do the actual work), then you'll need to override `EA.argsort` and do everything.\r\n\r\nI don't know how useful this will prove to be, but wanted to hear other's thoughts."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369967861",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-369967861",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 369967861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTk2Nzg2MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T16:12:04Z",
    "updated_at": "2018-03-02T16:12:04Z",
    "author_association": "MEMBER",
    "body": "Do you foresee similar patterns for other algos? Like `_values_for_factorize` (not sure if that makes sense). Just to think about if we would get a proliferation of such methods"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/370000989",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-370000989",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 370000989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDAwMDk4OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T18:00:56Z",
    "updated_at": "2018-03-02T18:00:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes factorize would be another. Though it would be a bit more complicated.\n\nI'll probably remove it for now. That means a bit more duplication, but\nfewer levels of indirection.\n\nOn Fri, Mar 2, 2018 at 10:13 AM, Joris Van den Bossche <\nnotifications@github.com> wrote:\n\n> Do you foresee similar patterns for other algos? Like\n> _values_for_factorize (not sure if that makes sense). Just to think about\n> if we would get a proliferation of such methods\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/pull/19957#issuecomment-369967861>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIsdiBiJkXrc6AUBR5y_d0GnEojQBks5taW9igaJpZM4SY-A0>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/370035001",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-370035001",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 370035001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDAzNTAwMQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T19:55:37Z",
    "updated_at": "2018-03-02T19:56:02Z",
    "author_association": "MEMBER",
    "body": "What is the use-case for writing your own sorting algorithm? Maybe radix sort when your data falls into pre-known categories?\r\n\r\nMy inclination would be to only cinlude `_values_for_argsort`, since that means minimal work for extension array authors."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/370054814",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-370054814",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 370054814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDA1NDgxNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T21:16:48Z",
    "updated_at": "2018-03-02T21:16:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> my inclination would be to only cinlude _values_for_argsort\r\n\r\nDo you mean not having an `argsort` method then? From pandas point of view, having `argsort`, as we don't have to check the array time in `sort_values`, and other places where we use `arr.argsort`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/372707006",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-372707006",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 372707006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjcwNzAwNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-13T15:30:49Z",
    "updated_at": "2018-03-13T15:30:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "The linting failure is fixed in https://github.com/pandas-dev/pandas/pull/20330\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373008486",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373008486",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373008486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzAwODQ4Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T12:47:34Z",
    "updated_at": "2018-03-14T12:47:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm I don't know. What about when you need a slightly different integer\nmapping for values?\nWe already have that for Categorical, as _codes_for_groupby is\ninappropriate for _values_for_argsort.\n\nThis is trying to avoid the whole \"which .values is this?\" issue by being\nclear what it's used for. With this name, it's\nvery clear.\n\nFrom a library author's point of view, *if* we have several of these \"give\nme a simple array to operate on\" that can be shared by the implementation,\nit's\nas simple as\n\n```\n_codes_for_groupby = _values_for_argsort = _as_simple_array\n```\n\nAnd if they can't share an implementation (like Categorical) it's clear\nwhich one is useful in which situation.\n\n\n\nOn Wed, Mar 14, 2018 at 6:06 AM, Jeff Reback <notifications@github.com>\nwrote:\n\n> *@jreback* commented on this pull request.\n> ------------------------------\n>\n> In pandas/core/arrays/base.py\n> <https://github.com/pandas-dev/pandas/pull/19957#discussion_r174422842>:\n>\n> > @@ -236,6 +237,52 @@ def isna(self):\n>          \"\"\"\n>          raise AbstractMethodError(self)\n>\n> +    def _values_for_argsort(self):\n> +        # type: () -> ndarray\n> +        \"\"\"Get the ndarray to be passed to np.argsort.\n>\n> ok, so then let's pick a name change _codes_for_groupby. in this refactor\n> we want to find other usecases and fix our code now rather than later.\n>\n> something like: _int_mapping_for_values\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/pull/19957#discussion_r174422842>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIvNp2eeHf6sGbl9qCymHC3b2JzBiks5tePmtgaJpZM4SY-A0>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373346642",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373346642",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373346642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzM0NjY0Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T11:34:54Z",
    "updated_at": "2018-03-15T11:34:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback are you -1 on `_values_for_argsort`, or just -0? I believe the rest of us are +1."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373353007",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373353007",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373353007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzM1MzAwNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T12:01:36Z",
    "updated_at": "2018-03-15T12:01:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "i am -1 in this\r\n\r\nit seems that EA is adding a bunch of things that we don’t know are really necessary or very specifically named\r\n\r\ni would defer adding this or make it general purpose\r\n\r\nthis API has to be as simple as possible but it is exploding in size and complexity "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373354251",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373354251",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373354251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzM1NDI1MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T12:07:07Z",
    "updated_at": "2018-03-15T12:07:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> i would defer adding this or make it general purpose\r\n\r\nI'm not sure if that's possible. We already have two cases that can't be satisfied by a simple array.\r\n\r\n> this API has to be as simple as possible but it is exploding in size and complexity\r\n\r\nThe purpose of `_values_for_argsort` is to make it *easier* to implement `argsort` correctly. Just pass a simple array of codes if you have one (which is true for Categorical, Period, Interval, and IPArray). We need `argsort` to support groupby, which is certainly worth supporting. I think the *marginal* complexity of `_values_for_argsort` is negative. If you can't use it, then you just override `argsort` normally. If you can use it, then your job is easier."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373436869",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373436869",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373436869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzQzNjg2OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T16:24:34Z",
    "updated_at": "2018-03-15T16:24:34Z",
    "author_association": "MEMBER",
    "body": "@jreback Do you have an alternative solution? Or just not having it?\r\n\r\nAs Tom said, not having this would mean duplicating the implementation of `argsort` in `Categorical`, `Period`, `Interval` (and external extension arrays). That's certainly not ideal as well.\r\n\r\nIt is difficult to exactly know how things will turn out (whether we need to add a bunch of those `_values_for_...` methods or not, whether we can reuse this `_values_for_argsort` for other purposes or not (eg groupby or factorize), if we would need to add a constructor method for roundtripping it, ...). But it will only by actually trying to fully implement ExtensionArray and all our own arrays types (period, interval) that we will find out. \r\nTherefore, I personally think it is better to move forward, let's implement all those things, and when doing that, constantly re-evaluate if things can be re-used, simplified, .."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373674011",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373674011",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373674011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzY3NDAxMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T10:38:25Z",
    "updated_at": "2018-03-16T10:38:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it would be worthwile to convert datetime w/tz to a first class extension type before proceeding with more changes. The issue is have is we are looking at a very narrow case, categorical, so its pretty hard to tell if something is generally needed/useful, or is something specific to an extension type. The types that are added (decimal/json) are not battle tested and don't have nearly the sophistication and internal usage as do categorical and datetime w/tz.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373678413",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373678413",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373678413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzY3ODQxMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T10:54:10Z",
    "updated_at": "2018-03-16T10:54:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm close to having groupby done. I'd prefer to finish that first before starting on another type."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373692800",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373692800",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373692800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzY5MjgwMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T12:00:36Z",
    "updated_at": "2018-03-16T12:00:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI @jbrockmendel has started on DatetimeArray in https://github.com/pandas-dev/pandas/pull/19902 (will review today, sorry)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373856329",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373856329",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373856329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg1NjMyOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T21:59:21Z",
    "updated_at": "2018-03-16T21:59:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "needs a rebase. my point from above is also that the idea of mapping an EA to integers (which are meaningful) is generally useful, essentially what you have for ``_values_for_argsort`` is pretty much factorize. so maybe make this explicit, e.g. ``_factorized_values`` or something like this. (and depending on the array you *may* want to cache this)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373914256",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373914256",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373914256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkxNDI1Ng==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T11:50:39Z",
    "updated_at": "2018-03-17T11:50:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "The name \"factorized_values\" takes on pandas' factorization semantics\naround types and ordering.\n\nWe can't respect the types because we don't have a good way of getting\nintegers (yet, and even if we did that may be expensive).\nWe can't respect the ordering rules (where order of appearance matters)\nbecause that would break sorting.\n\nWhat are all the properties we need, and what's a good name to summarize\nthose? Hard to say in the abstract.\n\nFor sorting, we need to preserve ordering and have each value be distinct.\nIn other words, a strictly monotonic function:\nhttps://en.wikipedia.org/wiki/Monotonic_function.\n\nOn Fri, Mar 16, 2018 at 4:59 PM, Jeff Reback <notifications@github.com>\nwrote:\n\n> needs a rebase. my point from above is also that the idea of mapping an EA\n> to integers (which are meaningful) is generally useful, essentially what\n> you have for _values_for_argsort is pretty much factorize. so maybe make\n> this explicit, e.g. _factorized_values or something like this. (and\n> depending on the array you *may* want to cache this).\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373856329>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIhKMj4FpmwdZOW-8N0Lp6odnyojFks5tfDW8gaJpZM4SY-A0>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373914837",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373914837",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373914837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkxNDgzNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T11:59:55Z",
    "updated_at": "2018-03-17T11:59:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated the name to `_simple_ndarray`, and documented the strict monotonicity requirement. I think monotonicity is a good compromise between being useful enough for a broad class of tasks, while being specific enough to be easy to implement."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/373914907",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-373914907",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 373914907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkxNDkwNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T12:01:17Z",
    "updated_at": "2018-03-17T12:01:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not tied to the name `_simple_ndarray`, other than\r\n\r\n- I don't want to mention a type like integer (not all EAs can be easily converted to integers)\r\n- I'd like to have `ndarary` in the name"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374210492",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374210492",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374210492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDIxMDQ5Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T13:26:00Z",
    "updated_at": "2018-03-19T13:26:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer @jorisvandenbossche any thoughts on the name? Does strict monotonicity seem like a good requirement for this type of thing? It covers our current use-cases well I think (Categorical, Period, Interval, IPArray, datetime w/ TZ)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374216654",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374216654",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374216654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDIxNjY1NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T13:46:01Z",
    "updated_at": "2018-03-19T13:46:01Z",
    "author_association": "MEMBER",
    "body": "> It covers our current use-cases well I think\r\n\r\nBut only for sorting? Or do you see other use-cases?\r\n\r\nIf it is only for sorting, I still think including that notion in the name is better / more explicit (for now).\r\n\r\n> [jreback] what you have for _values_for_argsort is pretty much factorize. so maybe make this explicit, e.g. _factorized_values or something like this.\r\n\r\nI was also thinking about this at a certain point, in light of geopandas. For geopandas, I could convert the geometries in a meaningful *physical* array by converting it a (well-known) binary representation. And using this array, I could do a `factorize` step. So somehow, having a `_factorize_values` which is then used by a default implementation of `argsort` and `factorize` would make it easier for geopandas. \r\nHowever, the problem with such `_factorize_values` is that they then need to be roundtrippable, you need to convert the unique physical array back to actual ExtensionArray. In the above case of geopandas, that is possible, but I don't think that is something we can assume in general.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374228813",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374228813",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374228813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDIyODgxMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T14:21:50Z",
    "updated_at": "2018-03-19T14:21:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> However, the problem with such _factorize_values is that they then need to be roundtrippable\r\n\r\nIndeed, though with a caveat, they need to be round-trippable *when combined with the original array*.\r\n\r\nUsing `PeriodIndex` as an example, we have the ordinals.\r\n\r\n```python\r\nIn [25]: p = pd.period_range('2017', periods=4)\r\n\r\nIn [26]: labels, uniques = pd.factorize(p._ndarray_values)\r\n\r\nIn [27]: pd.PeriodIndex._from_ordinals(y, freq=p.freq)\r\nOut[27]: PeriodIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'], dtype='period[D]', freq='D')\r\n```\r\n\r\nSo we would have to expand the API to include a new constructor `_from_simple_ndarray` or something like that. Is that an unreasonable burden? Keep in mind that the default implementation for the simple ndarray will still be `.astype(object)`, and the simple constructor can be aliased to `_from_scalars`, or whatever we called it.\r\n\r\nAt this point though, we're straying a bit far afield from the original purpose of this PR."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374238400",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374238400",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374238400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDIzODQwMA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T14:48:22Z",
    "updated_at": "2018-03-19T14:48:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "And, in case it wasn't clear, `.argsort` doesn't need the new constructor since we aren't reconstructing an EA from the transformed values."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374250494",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374250494",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374250494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDI1MDQ5NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T15:21:10Z",
    "updated_at": "2018-03-19T15:23:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "So here's my current proposal.\r\n\r\n```python\r\n    @classmethod\r\n    def _from_simple_ndarray(self, values, similar):\r\n        raise AbstractMethodError\r\n\r\n    def _as_simple_ndarray(self):\r\n        # type: () -> ndarray\r\n        \"\"\"Convert the array to a simple ndarray representaiton.\r\n\r\n        Requirements:\r\n\r\n        * strictly monotonic\r\n          For every i, j index in `self`, if `self[i] < self[j]` then\r\n          ``self._as_simple_ndarray()[i] < self._as_simple_ndarray()[j])``.\r\n          Likewise for equality.\r\n        * Invertable, when combined with another instance of this object\r\n          For r = ``self._as_simple_ndarray()``,\r\n              ``(self == self._from_simple_ndarray(r)).all()``\r\n\r\n        \"\"\"\r\n        # Implemnetor note: This method is currently used in\r\n        # - ExtensionArray.argsort\r\n\r\n        return np.array(self)\r\n```\r\n\r\n(edit: hit return too early).\r\n\r\nThe name / semantics the second argument to `_from_simple_ndarray` is tricky. It's not necessarily the original. In the case of `factorize`, it'll be the unique values, a subset of `original`.\r\n\r\nIf you use the default impl of `._as_simple_ndarray`, casting to object, then you can define `_from_simple_ndarray` as `return cls._constructor_from_sequence(values)`, since you have a sequence of your scalar type."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374264453",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374264453",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374264453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDI2NDQ1Mw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T15:59:10Z",
    "updated_at": "2018-03-19T15:59:10Z",
    "author_association": "MEMBER",
    "body": "I'm pretty sure factorize can't handle arbitrary dtypes -- we only have hashtables for handful of builtin types (e.g., int64, float64, object, maybe uint64 if I recall correctly). So it seems quite likely that we will need different arrays for factorization and sorting (e.g., for IPAddress, which can return a structured array for sorting and an object array for hashing). In other cases (geopandas?) sorting might not even be well defined.\r\n\r\nI don't like the name `_as_simple_ndarray`. It's too vague, and will both confuse users and tempt us (pandas devs) to add additional functionality/requirements to the method.\r\n\r\nI actually like defining separate special methods such as `_ndarray_for_argsort` and `_ndarray_for_factorize`,  along with complementary constructors as necessary, e.g., `_from_factorized`. Here's why:\r\n- The name of the methods makes it obvious (both to us and users) what properties the returned values should satisfy.\r\n- We can define separate methods as necessary if there is any conceivable difference in use-cases. It's much easier to consolidate methods later than to split them later.\r\n- I don't think the list of special methods like this that we will need will be very long.\r\n\r\nFinally, for the record I'm still not a fan of putting *implementations* like the `argsort()` method on ExtensionArray. I think this is unnecessary and will make the interface more confusing. Ideally ExtensionArray should be entirely abstract."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374266725",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374266725",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374266725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDI2NjcyNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T16:05:19Z",
    "updated_at": "2018-03-19T16:05:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So it seems quite likely that we will need different arrays for factorization and sorting\r\n\r\nAh, yes. That is indeed the case for IPArray...\r\n\r\n> Finally, for the record I'm still not a fan of putting implementations like the argsort() method on ExtensionArray.\r\n\r\nWhat's the alternative? An internal helper in pandas like `argsort_array`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374274496",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374274496",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374274496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDI3NDQ5Ng==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T16:27:15Z",
    "updated_at": "2018-03-19T16:27:15Z",
    "author_association": "MEMBER",
    "body": "I haven't formed an opinion on _values_for_argsort, but _conditional_ on it being needed, I'm +1 on it being kept out of the DataFrame/Series/Index namespace.\r\n\r\nIs there an implicit assumption that EAs are always 1D?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374275961",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374275961",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374275961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDI3NTk2MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T16:31:14Z",
    "updated_at": "2018-03-19T16:31:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is there an implicit assumption that EAs are always 1D?\r\n\r\nAt the moment, we've explicitly documented them to be 1D only."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374284033",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374284033",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374284033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDI4NDAzMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T16:51:57Z",
    "updated_at": "2018-03-19T16:51:57Z",
    "author_association": "MEMBER",
    "body": "> Finally, for the record I'm still not a fan of putting implementations like the argsort() method on ExtensionArray. I think this is unnecessary and will make the interface more confusing. Ideally ExtensionArray should be entirely abstract.\r\n\r\n@shoyer would you then propose to have a full abstract class, and separate a partially filled in base extension array people can subclass? \r\nAs having this \"partially implemented\" class to subclass is certainly useful to avoid repetition for extension authors."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374289359",
    "html_url": "https://github.com/pandas-dev/pandas/pull/19957#issuecomment-374289359",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19957",
    "id": 374289359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDI4OTM1OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-19T17:05:30Z",
    "updated_at": "2018-03-19T17:05:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated https://github.com/pandas-dev/pandas/pull/20361 with an example of what `_factorize` looks like using a similar approach (`_values_for_factorize` and a method reconstructing)."
  }
]
