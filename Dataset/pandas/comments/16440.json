[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303248577",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303248577",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303248577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzI0ODU3Nw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-22T23:36:17Z",
    "updated_at": "2017-05-22T23:36:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is basically what python 3.6+ is doing?  You're welcome to try this out, although modifying khash isn't exactly a trivial project!\r\n\r\nxref https://github.com/pandas-dev/pandas2/issues/35 - pandas2 issue on hash tables, consider c++ options\r\n\r\nIn terms of reducing hash table memory usage, I suspect #14273 might be much lower hanging fruit."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303250143",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303250143",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303250143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzI1MDE0Mw==",
    "user": {
      "login": "rohanp",
      "id": 7104880,
      "node_id": "MDQ6VXNlcjcxMDQ4ODA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7104880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rohanp",
      "html_url": "https://github.com/rohanp",
      "followers_url": "https://api.github.com/users/rohanp/followers",
      "following_url": "https://api.github.com/users/rohanp/following{/other_user}",
      "gists_url": "https://api.github.com/users/rohanp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rohanp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rohanp/subscriptions",
      "organizations_url": "https://api.github.com/users/rohanp/orgs",
      "repos_url": "https://api.github.com/users/rohanp/repos",
      "events_url": "https://api.github.com/users/rohanp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rohanp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-22T23:47:16Z",
    "updated_at": "2017-05-22T23:47:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes, that is where I got the idea. Would I have to modify khash though? I was thinking to simply modify the Cython interface to khash `hashtable_class_helper_pxi.in` to send the indexes to khash while keeping the values on the Cython layer."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303250424",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303250424",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303250424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzI1MDQyNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-22T23:49:11Z",
    "updated_at": "2017-05-22T23:49:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rohanp \r\n\r\n> As far as I can tell, the array in which klib uses to store the values is sparse.\r\n\r\nThis *might* be true for dynamic hashtable, and I would for sure agree for that case, but we are specifically allocating a size, always. How are they in that case? \r\n\r\n```\r\nIn [2]: from pandas._libs import hashtable as ht\r\n\r\nIn [7]: t = ht.PyObjectHashTable(6)\r\n\r\nIn [8]: t.sizeof()\r\nOut[8]: 160\r\n\r\nIn [9]: t = ht.Int64HashTable(6)\r\n\r\nIn [10]: t.sizeof()\r\nOut[10]: 160\r\n```\r\n\r\nnote that I wrote the ``.sizeof()`` which is simply\r\n\r\n```\r\n    def sizeof(self, deep=False):\r\n        \"\"\" return the size of my table in bytes \"\"\"\r\n        return self.table.n_buckets * (sizeof({{dtype}}_t) + # keys\r\n                                       sizeof(size_t) + # vals\r\n                                       sizeof(uint32_t)) # flags\r\n```\r\n\r\nwhich may not be right.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303251199",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303251199",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303251199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzI1MTE5OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-22T23:54:39Z",
    "updated_at": "2017-05-22T23:55:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually I stand corrected. It appears to allocate the next largest power of 2 for the buckets (I temp added ``n_buckets()``).\r\n\r\n```\r\nIn [1]: from pandas._libs import hashtable as ht\r\n\r\nIn [2]: t = ht.Int64HashTable(6)\r\n\r\nIn [3]: t.n_buckets()\r\nOut[3]: 8\r\n\r\nIn [4]: t = ht.Int64HashTable(12)\r\n\r\nIn [5]: t.n_buckets()\r\nOut[5]: 16\r\n\r\nIn [6]: t = ht.Int64HashTable(30)\r\n\r\nIn [7]: t.n_buckets()\r\nOut[7]: 32\r\n\r\nIn [8]: t = ht.Int64HashTable(500)\r\n\r\nIn [9]: t.n_buckets()\r\n\r\nOut[9]: 512\r\n```\r\n\r\n```\r\nIn [10]: t = ht.Int64HashTable(9)\r\n\r\nIn [11]: t.n_buckets()\r\nOut[11]: 16\r\n\r\nIn [12]: t.sizeof()\r\nOut[12]: 320\r\n\r\nIn [14]: t = ht.Int64HashTable(16)\r\n\r\nIn [15]: t.sizeof()\r\nOut[15]: 320\r\n\r\n```\r\nso a HT of 9 and 16 cost the same."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303252763",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303252763",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303252763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzI1Mjc2Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T00:04:48Z",
    "updated_at": "2017-05-23T00:04:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rohanp you could try this. I think this might involve a fairly large change (in cython), and you would have to measure the memory savings AND make sure perf doesn't degrade too much (as now you are doing a double lookup, though should not be by much as the 2nd access is an array indexing op which is pretty fast).\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303507350",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303507350",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303507350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzUwNzM1MA==",
    "user": {
      "login": "rohanp",
      "id": 7104880,
      "node_id": "MDQ6VXNlcjcxMDQ4ODA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7104880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rohanp",
      "html_url": "https://github.com/rohanp",
      "followers_url": "https://api.github.com/users/rohanp/followers",
      "following_url": "https://api.github.com/users/rohanp/following{/other_user}",
      "gists_url": "https://api.github.com/users/rohanp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rohanp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rohanp/subscriptions",
      "organizations_url": "https://api.github.com/users/rohanp/orgs",
      "repos_url": "https://api.github.com/users/rohanp/repos",
      "events_url": "https://api.github.com/users/rohanp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rohanp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T19:31:17Z",
    "updated_at": "2017-05-23T19:31:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't quite understand where in our Cython interface we define the dtype of the values in the hash table. The `__cinit__` only defines the dtype of the keys\r\n\r\n```\r\n    def __cinit__(self, size_hint=1):\r\n        self.table = kh_init_{{dtype}}()\r\n        if size_hint is not None:\r\n            kh_resize_{{dtype}}(self.table, size_hint)\r\n```\r\n\r\nBased on the `Py_ssize_t` in \r\n`cpdef set_item(self, {{dtype}}_t key, Py_ssize_t val):`\r\n\r\nit looks like the table is already configured to only store indexes. Could someone more familiar with the code please confirm? \r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303513906",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303513906",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303513906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzUxMzkwNg==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T19:57:00Z",
    "updated_at": "2017-05-23T19:57:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "The actual hash table definitions are C macro expansions, e.g., here for int64 keys:\r\nhttps://github.com/pandas-dev/pandas/blob/92372c7632a92d7bd980534b5a78590b2d9453ad/pandas/_libs/src/klib/khash.h#L576\r\n\r\nAnd, yes, the values in the hash tables are are indexes (locations back into the original array).   So currently I think it roughly looks this (ignoring hash storage)\r\n```\r\narray = [1.1, 2.2, 3.3]\r\n\r\nhash_table = {\r\n     keys: [None, None, 2.2, None, 1.1, None, 3.3],\r\n     vals: [None, None,   1, None,  0 , None,  2],\r\n}\r\n```\r\n\r\nIIUC, the py 3.6 approach would be:\r\n\r\n```\r\nhash_table = {\r\n   data: [[1.1, 0],\r\n          [2.2, 1],\r\n          [3.3, 2]],\r\n   sparse_index:  [None, None, 1, None, 0, None 2]\r\n} \r\n```   \r\n\r\n\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303533918",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303533918",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303533918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzUzMzkxOA==",
    "user": {
      "login": "rohanp",
      "id": 7104880,
      "node_id": "MDQ6VXNlcjcxMDQ4ODA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7104880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rohanp",
      "html_url": "https://github.com/rohanp",
      "followers_url": "https://api.github.com/users/rohanp/followers",
      "following_url": "https://api.github.com/users/rohanp/following{/other_user}",
      "gists_url": "https://api.github.com/users/rohanp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rohanp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rohanp/subscriptions",
      "organizations_url": "https://api.github.com/users/rohanp/orgs",
      "repos_url": "https://api.github.com/users/rohanp/repos",
      "events_url": "https://api.github.com/users/rohanp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rohanp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T21:13:00Z",
    "updated_at": "2017-05-23T21:13:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, but as the author of klib [writes](https://attractivechaos.wordpress.com/2008/09/02/implementing-generic-hash-library-in-c/)\r\n\r\n> Grouping key-value pairs or not. In the current implementation, keys and values are kept in separated arrays. This strategy will cause additional cache misses when keys and values are retrieved twice. Grouping key-value in a struct is more cache efficient. However, the good side of separating keys and values is this avoids waste of memory when key type and value type cannot be aligned well (e.g. key is an integer while value is a character). I would rather trade speed a bit for smaller memory. In addition, it is not hard to use a struct has a key in the current framework.\r\n\r\nDoing so would only save memory if the key and values are relatively close to each other in size. I suppose this would be good to implement for int64/float64 keys, but doing so would be fairly involved as I would have to modify klib itself. I personally don't think it is worth the time but if someone else wants to feel free."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303567032",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16440#issuecomment-303567032",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16440",
    "id": 303567032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzU2NzAzMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T23:34:13Z",
    "updated_at": "2017-05-23T23:34:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rohanp having separate keys/values is much easier impl wise. We just use keys of the appropriate dtype. the values are *always* ``Py_ssize_t``, this just makes things much simpler. so we are only paying the power-of-two bucket cost once."
  }
]
