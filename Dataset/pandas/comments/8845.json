[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63455915",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-63455915",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 63455915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDU1OTE1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-18T11:22:06Z",
    "updated_at": "2014-11-18T11:22:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I added a couple of cross-refs above. This should ideally encompass / reconcile with:\n\n`.asof` and the concept of snapping to a the nearest.\n\nSo having a `get_nearest_loc` would then allow easy an almost trivial `.asof` as well\nas `.at_time` and `.nearest` (really all just names for the same concept).\n\nOnly tricky part here is that in the time-domain you can have a simulatenous `asfreq` happen, e.g.\nyou often want to know the nearest `1s` to something (but maybe that should be somewhat decoupled as its easy enough to simply round a `DatetimeIndex` to actually get it (and maybe to actually can implement `get_nearest` in a similar way).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63457074",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-63457074",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 63457074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDU3MDc0",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-18T11:32:56Z",
    "updated_at": "2014-11-18T11:33:18Z",
    "author_association": "MEMBER",
    "body": "See also my recently opened issue on the scope of `asof`: #8815 \nand also related: #7223\n\n@shoyer Some questions:\n- what is the difference with `asof`?\n  - apart from that `asof` now only works for DatetimeIndex but the idea of it\n  - and apart from that it could be a better name for `asof` .. (and more complete implementation)\n- would it only work for monotonic indices?\n- what would it exactly return? the lower or upper nearest, or the 'nearest' nearest? Or this could be a keyword argument to specify this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/63564743",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-63564743",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 63564743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTY0NzQz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-18T23:20:40Z",
    "updated_at": "2014-11-18T23:20:40Z",
    "author_association": "MEMBER",
    "body": "Ah, I knew we had talked about this before. Somehow I forgot about `asof` (which, I agree, is a little strange).\n\n@jreback Thanks for adding the references! I agree that this should be reconciled with `asof`. I don't agree that this is _quite_ the same thing as rounding an index or snapping an index to the nearest second -- those would be a transformation on the index, not the indexer.\n\n@jorisvandenbossche:\n\n> what is the difference with asof?\n\nYes, this would be quite similar, except for the differences you outline. For example, if it really can't find any matches, it should raise an exception rather than returning NA.\n\n> would it only work for monotonic indices?\n\nYes, I think so, unless there is an exact match. I'm generally :-1: on methods that make it easy to do inefficient things without realizing it.\n\n> what would it exactly return? the lower or upper nearest, or the 'nearest' nearest? Or this could be a keyword argument to specify this?\n\nI really would like a method that returns the \"nearest\" nearest. Returning the lower and upper nearest are both useful things to do, but it would be surprising if they were the default for a method named \"nearest\". A keyword argument `'side'` would work (e.g., `idx.get_loc_nearest(123, side='left')`), or we could even have another name entirely, e.g., `idx.get_loc_before(123)`.\n\nNote: Based on autocomplete considerations, I am now thinking that the right name would be `get_loc_nearest`, to emphasize the similarity with `get_loc`. We could potentially add `get_indexer_nearest` if/as necessary.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70117489",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-70117489",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 70117489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTE3NDg5",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-15T16:50:24Z",
    "updated_at": "2015-01-15T16:52:01Z",
    "author_association": "NONE",
    "body": "Hey Stephan,\n\nNice to see this functionality being built-in.  I have been used hacked together version of this for scikit-spectra for a while, and really think anyone who uses float-indexed data will find this extremely useful.  \n\nJust to add my two cents, I think that the \"nearest nearest\" mentatility makes the most sense.  The keyword `side` is superfluous because if the user is aware enough to use the keyword, they are also aware enough to just change the value.  For example, if I was trying to get data close to 130.5 but I needed to get a value less than 130.5, I'd just index:  \n\n`get_loc_nearest(130.49)`\n\nAs opposed to \n\n`get_loc_neareset(130.51, side='left')`\n\nOr am I misunderstanding?\n\nI also think the name `get_nearest()` would work, but also like `get_loc_neareset()`\n\nOne issue we ran into was dealing with is what to do when the user oversteps the bounds of the data, do you raise an error or just return the nearest value?  For our purposes, it made more sense to throw and error, but the data was strictly monotonically increasing and had clear upper and lower limits.  I guess the more general case would be that index floats would have no clear limits and would not necessarily be sorted/monotonic.  \n\nWhat would happen in the case of duplicate values in the index?  \n\nAnd that's how you build a bikeshed.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70181643",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-70181643",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 70181643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTgxNjQz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-15T23:19:36Z",
    "updated_at": "2015-01-15T23:19:36Z",
    "author_association": "MEMBER",
    "body": "> The keyword side is superfluous because if the user is aware enough to use the keyword, they are also aware enough to just change the value. For example, if I was trying to get data close to 130.5 but I needed to get a value less than 130.5, I'd just index: `get_loc_nearest(130.49)` as opposed to `get_loc_neareset(130.51, side='left')`\n\nNot sure I follow. Suppose the index in your example is given by `pd.Index([129, 131])`. `get_nearest(130.49)` would still return the value corresponding to 131. Basically, this feature is useful for irregularly spaced data. For example, you could use it to return the last record of each hour.\n\n> I also think the name get_nearest() would work, but also like get_loc_neareset()\n\nHmm. We could certainly do `get_loc_nearest` and `get_indexer_nearest` instead of a single function. That might make the functionality more obvious.\n\n> One issue we ran into was dealing with is what to do when the user oversteps the bounds of the data, do you raise an error or just return the nearest value? For our purposes, it made more sense to throw and error, but the data was strictly monotonically increasing and had clear upper and lower limits. \n\nFor this use case, I think you'll want an `IntervalIndex`. Currently we just return the nearest value, though we could hypothetically add something like a `max_distance` argument.\n\n> What would happen in the case of duplicate values in the index?\n\nNot supported in my current PR (the result is ambiguous for looking up an indexer). The index needs to have unique and sorted values (either ascending or descending).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70186629",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-70186629",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 70186629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTg2NjI5",
    "user": {
      "login": "hugadams",
      "id": 1972276,
      "node_id": "MDQ6VXNlcjE5NzIyNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1972276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugadams",
      "html_url": "https://github.com/hugadams",
      "followers_url": "https://api.github.com/users/hugadams/followers",
      "following_url": "https://api.github.com/users/hugadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugadams/subscriptions",
      "organizations_url": "https://api.github.com/users/hugadams/orgs",
      "repos_url": "https://api.github.com/users/hugadams/repos",
      "events_url": "https://api.github.com/users/hugadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-16T00:02:27Z",
    "updated_at": "2015-01-16T00:03:04Z",
    "author_association": "NONE",
    "body": "Cool.  Sorry, I haven't had a chance to use the IntervalIndex because I'm still bogged down in 0.14.\n\nI see what you mean about the side argument now.  I was stuck in my own use cases I guess, where we generally know our index, but the float rounding is the pain.  IE our data is  `Float64Index([120.540, 121.483, ...])` and we just want something like `get_loc_nearest(121.0)`.  So I see why the side argument is necessary.\n\nAre you planning to have a nearest indexer that would work like `.loc` or `.iloc` eg:\n\n`data.loc_nearest[130:140, 30:35.33]`\n\nIE 2D nearest indexing? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70197426",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-70197426",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 70197426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTk3NDI2",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-16T02:00:28Z",
    "updated_at": "2015-01-16T02:00:28Z",
    "author_association": "MEMBER",
    "body": "@hugadams IntervalIndex hasn't been merged yet -- still sitting in a PR :). I think something like `.loc_nearest` as an indexer would be a nice addition, though I don't have any concrete plans yet.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75131826",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-75131826",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 75131826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTMxODI2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-19T20:42:38Z",
    "updated_at": "2015-02-19T20:42:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "nice question to show perf of nearest\nhttp://stackoverflow.com/questions/28612773/how-to-speed-up-nearest-search-in-pandas\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/75132214",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8845#issuecomment-75132214",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8845",
    "id": 75132214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTMyMjE0",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-19T20:45:04Z",
    "updated_at": "2015-02-19T20:45:04Z",
    "author_association": "MEMBER",
    "body": "@jreback  yes, but do that sanely we'll need the MultiIndex version (#9365).\n"
  }
]
