[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437460826",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-437460826",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 437460826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQ2MDgyNg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T19:00:16Z",
    "updated_at": "2018-11-09T19:00:16Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report. Investigation and PRs are always welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437591578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-437591578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 437591578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzU5MTU3OA==",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-10T15:27:02Z",
    "updated_at": "2018-11-10T15:28:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "What should it write?  Empty strings, Nans (with with type, integers will the missing keystone value, or ['None', 'None']?  This is an ambiguous case and the best solution is to raise with an exception.  TBH the case with ['a',None] should also probably raise and so that columns containing only strings should be written as string columns."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437596989",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-437596989",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 437596989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzU5Njk4OQ==",
    "user": {
      "login": "kylebarron",
      "id": 15164633,
      "node_id": "MDQ6VXNlcjE1MTY0NjMz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15164633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kylebarron",
      "html_url": "https://github.com/kylebarron",
      "followers_url": "https://api.github.com/users/kylebarron/followers",
      "following_url": "https://api.github.com/users/kylebarron/following{/other_user}",
      "gists_url": "https://api.github.com/users/kylebarron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kylebarron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kylebarron/subscriptions",
      "organizations_url": "https://api.github.com/users/kylebarron/orgs",
      "repos_url": "https://api.github.com/users/kylebarron/repos",
      "events_url": "https://api.github.com/users/kylebarron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kylebarron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-10T16:40:50Z",
    "updated_at": "2018-11-10T16:40:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "My point was that `None` is already being coerced to an empty string whenever there is at least one string value in the column. So I didn't think it would be too much of a stretch to coerce `None` to an empty string when there are no strings in the column.\r\n\r\n```\r\nIn [1]: import pandas as pd\r\n   ...: df = pd.DataFrame({'a': ['a', None]})\r\n   ...: df.to_stata('test.dta')\r\n   ...: pd.read_stata('test.dta')\r\n   ...:\r\n\r\nOut[1]:\r\n   index  a\r\n0      0  a\r\n1      1\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437766569",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-437766569",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 437766569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzc2NjU2OQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T06:03:18Z",
    "updated_at": "2018-11-12T06:03:18Z",
    "author_association": "MEMBER",
    "body": "I'm not familiar with stata but based off of the examples I agree with @bashtage here - I think it should raise rather than silently coerce for you. Raising would be an explicit sign to the user that they may want to replace or fill values before export, especially since its not a lossless round trip"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437954743",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-437954743",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 437954743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk1NDc0Mw==",
    "user": {
      "login": "jtkiley",
      "id": 3935135,
      "node_id": "MDQ6VXNlcjM5MzUxMzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3935135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtkiley",
      "html_url": "https://github.com/jtkiley",
      "followers_url": "https://api.github.com/users/jtkiley/followers",
      "following_url": "https://api.github.com/users/jtkiley/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtkiley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtkiley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtkiley/subscriptions",
      "organizations_url": "https://api.github.com/users/jtkiley/orgs",
      "repos_url": "https://api.github.com/users/jtkiley/repos",
      "events_url": "https://api.github.com/users/jtkiley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtkiley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T16:58:44Z",
    "updated_at": "2018-11-12T16:58:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems like there are two sub-issues being discussed:\r\n\r\n1. What should happen to a column of `None`? I'm not sure, but Stata reads an empty csv column as a byte:\r\n\r\n<img width=\"271\" alt=\"screen shot 2018-11-12 at 10 44 52 am\" src=\"https://user-images.githubusercontent.com/3935135/48362019-53b29580-e668-11e8-80af-c6f88cee1445.png\">\r\n\r\n2. What should happen to a column of strings containing one or more `None`s? In this case, I like the coercing behavior (see #23633). Part of that is that I have a bunch of code in projects that relies on it, though I also think intent is a little clearer when the rest of the column is strings. I have a lot of datasets with text columns in them that tends to be sparse (e.g., correction text for newspaper articles, where corrections are decently rare overall), and they have a lot of `None`s. I don't recall whether my parsing code does that directly or whether they're populated as `None` (cf. `''`) in some other way.\r\n\r\nI'm also somewhat split on warning about it. On the one hand, it would be clearer for users. On the other, if you have a lot of code that relies on this, you'll get some warning fatigue. Another option is adding a parameter, but I wonder how often coercing is actually the wrong behavior."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437973427",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-437973427",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 437973427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk3MzQyNw==",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T17:56:59Z",
    "updated_at": "2018-11-12T17:56:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is tempting to not change the current behavior vis-a-vis mixed string and `None`.  This would require a deprecation cycle, and while more explicit isn't likely to be an issue for users who use Stata and know that a column with a string must be a string. \r\n\r\nThe correct behavior in a column with `None`s and dtype 'object' is less well defined IMO. FWIW this is why it fails here:\r\n\r\n```python\r\ninferred_dtype = infer_dtype(column.dropna())\r\n```\r\n\r\nThis drops na-like values, including `None` and so with mixed this infers string but when all `None` it infers\r\n`empty`, which is correct. \r\n\r\nOne issue that afects the ambiguity here is that both datetime and string arrays can be object and are supported. Converting all `None` to strings is making a choice about the column type from these two candidates."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/437987283",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-437987283",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 437987283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk4NzI4Mw==",
    "user": {
      "login": "jtkiley",
      "id": 3935135,
      "node_id": "MDQ6VXNlcjM5MzUxMzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3935135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtkiley",
      "html_url": "https://github.com/jtkiley",
      "followers_url": "https://api.github.com/users/jtkiley/followers",
      "following_url": "https://api.github.com/users/jtkiley/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtkiley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtkiley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtkiley/subscriptions",
      "organizations_url": "https://api.github.com/users/jtkiley/orgs",
      "repos_url": "https://api.github.com/users/jtkiley/repos",
      "events_url": "https://api.github.com/users/jtkiley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtkiley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T18:42:36Z",
    "updated_at": "2018-11-12T18:42:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "That makes sense to me about the mixed `None` and strings.\r\n\r\nThe all `None` case does seem more difficult. For this particular issue, I wonder if the better change is changing `pd.read_parquet()` to make a fully missing column of `BYTE_ARRAY UTF8` into empty strings. That doesn't solve this issue directly, but it would address one case that leads into all `None` columns, and it has a clue to intent. Note that those internals are probably beyond my skillset, so if this suggestion doesn't make sense, that would be why.\r\n\r\nBeyond that, maybe the error text could be better. I'd like to know that (a) the more descriptive reason is that it's all `None`, and (b) the two easiest solutions are to (i) drop the column or (ii) fill one or more rows with either values or type-specific missingness (i.e. `''` or `NaN`)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438002333",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438002333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438002333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODAwMjMzMw==",
    "user": {
      "login": "kylebarron",
      "id": 15164633,
      "node_id": "MDQ6VXNlcjE1MTY0NjMz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15164633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kylebarron",
      "html_url": "https://github.com/kylebarron",
      "followers_url": "https://api.github.com/users/kylebarron/followers",
      "following_url": "https://api.github.com/users/kylebarron/following{/other_user}",
      "gists_url": "https://api.github.com/users/kylebarron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kylebarron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kylebarron/subscriptions",
      "organizations_url": "https://api.github.com/users/kylebarron/orgs",
      "repos_url": "https://api.github.com/users/kylebarron/repos",
      "events_url": "https://api.github.com/users/kylebarron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kylebarron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T19:33:32Z",
    "updated_at": "2018-11-12T19:33:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtkiley I looked into the Parquet details more and it turns out that a string of length 0 and a null string are two different values. So they map exactly to `None` and `''` objects in Pandas. \r\n\r\nIt appears to me that the core issue is that Stata doesn't have a missing value for strings. In Pandas, `''` is a string of length 0, not a missing value; `None` is the missing value for strings. This explains why `Series.isna()` returns `False` for the former and `True` for the latter. For that reason, I think I now agree with @bashtage that a column of `None` should not be automatically coerced to an empty string, because that's akin to replace null values with values of length zero."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438008513",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438008513",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438008513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODAwODUxMw==",
    "user": {
      "login": "kylebarron",
      "id": 15164633,
      "node_id": "MDQ6VXNlcjE1MTY0NjMz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15164633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kylebarron",
      "html_url": "https://github.com/kylebarron",
      "followers_url": "https://api.github.com/users/kylebarron/followers",
      "following_url": "https://api.github.com/users/kylebarron/following{/other_user}",
      "gists_url": "https://api.github.com/users/kylebarron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kylebarron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kylebarron/subscriptions",
      "organizations_url": "https://api.github.com/users/kylebarron/orgs",
      "repos_url": "https://api.github.com/users/kylebarron/repos",
      "events_url": "https://api.github.com/users/kylebarron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kylebarron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T19:55:03Z",
    "updated_at": "2018-11-12T19:55:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I linked a PR with a proposed changed error message that\r\n- mentions the issue is that the `object` column is non-string\r\n- gives the name of the offending column"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438027832",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438027832",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438027832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODAyNzgzMg==",
    "user": {
      "login": "jtkiley",
      "id": 3935135,
      "node_id": "MDQ6VXNlcjM5MzUxMzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3935135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtkiley",
      "html_url": "https://github.com/jtkiley",
      "followers_url": "https://api.github.com/users/jtkiley/followers",
      "following_url": "https://api.github.com/users/jtkiley/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtkiley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtkiley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtkiley/subscriptions",
      "organizations_url": "https://api.github.com/users/jtkiley/orgs",
      "repos_url": "https://api.github.com/users/jtkiley/repos",
      "events_url": "https://api.github.com/users/jtkiley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtkiley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T21:03:44Z",
    "updated_at": "2018-11-12T21:03:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kylebarron Good sleuthing. So, just to be clear, you're only talking about raising in the all `None` case, right? What you've found in parquet makes sense to me.\r\n\r\nSo, I think my (revised) preferences are:\r\n\r\n1. Continue to coerce in `df.to_stata()` if the column has at least one string (and resolve #23633 to be consistent with that).\r\n2. Don't change how parquet is ingested to preserve the difference between a zero-length string and a null string.\r\n3. No strong opinion on writing out a column full of `None` with `df.to_stata()`. The argument to coerce is trying to honor the user's intent in writing out the dataset. The argument to raise is that the intent as to the column isn't clear enough to make a choice for them (in contrast to the mixed `None` and string case), and implicit and wrong is a bad combo. The argument to warn is that you honor the writing intent and avoid the possibility of implicit and wrong, though it's practically the same as raising (i.e. more syntax either to suppress warnings or modify data) unless you like seeing warnings. Those are all valid in my view, and it's a matter of making tradeoffs.\r\n\r\nAlso, to get another look at a known source of `None`s in string columns, I looked and found out why my private text parsing package generates `None` in string columns. It uses a lot of regexes with optional named capture groups, and they have a value of `None` when they don't match. They end up in the per document data/metadata `dict`s, and a list of those `dict`s is fed to `pd.DataFrame()`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438035650",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438035650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438035650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODAzNTY1MA==",
    "user": {
      "login": "kylebarron",
      "id": 15164633,
      "node_id": "MDQ6VXNlcjE1MTY0NjMz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15164633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kylebarron",
      "html_url": "https://github.com/kylebarron",
      "followers_url": "https://api.github.com/users/kylebarron/followers",
      "following_url": "https://api.github.com/users/kylebarron/following{/other_user}",
      "gists_url": "https://api.github.com/users/kylebarron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kylebarron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kylebarron/subscriptions",
      "organizations_url": "https://api.github.com/users/kylebarron/orgs",
      "repos_url": "https://api.github.com/users/kylebarron/repos",
      "events_url": "https://api.github.com/users/kylebarron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kylebarron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-12T21:32:18Z",
    "updated_at": "2018-11-12T21:32:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So, just to be clear, you're only talking about raising in the all None case, right?\r\n\r\nAbove I was referencing the all `None` case.\r\n\r\n> No strong opinion on writing out a column full of `None` with `df.to_stata()`.\r\n\r\nI agree with @bashtage raising an error is the best solution."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438653335",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438653335",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438653335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODY1MzMzNQ==",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T12:59:11Z",
    "updated_at": "2018-11-14T12:59:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are there still any remaining fixes/enhancements related to this issue?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438668397",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438668397",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438668397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODY2ODM5Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T13:51:34Z",
    "updated_at": "2018-11-14T13:51:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bashtage does #23692 cover this?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438670555",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438670555",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438670555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODY3MDU1NQ==",
    "user": {
      "login": "jtkiley",
      "id": 3935135,
      "node_id": "MDQ6VXNlcjM5MzUxMzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3935135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtkiley",
      "html_url": "https://github.com/jtkiley",
      "followers_url": "https://api.github.com/users/jtkiley/followers",
      "following_url": "https://api.github.com/users/jtkiley/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtkiley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtkiley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtkiley/subscriptions",
      "organizations_url": "https://api.github.com/users/jtkiley/orgs",
      "repos_url": "https://api.github.com/users/jtkiley/repos",
      "events_url": "https://api.github.com/users/jtkiley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtkiley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T13:58:14Z",
    "updated_at": "2018-11-14T13:58:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback #23692 is the mixed `strl` and `None` case, and this is the all `None` case. I think the eventual consensus here was raising in the all `None` case, and @kylebarron's PR will make the error message more helpful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438676741",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438676741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438676741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODY3Njc0MQ==",
    "user": {
      "login": "kylebarron",
      "id": 15164633,
      "node_id": "MDQ6VXNlcjE1MTY0NjMz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15164633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kylebarron",
      "html_url": "https://github.com/kylebarron",
      "followers_url": "https://api.github.com/users/kylebarron/followers",
      "following_url": "https://api.github.com/users/kylebarron/following{/other_user}",
      "gists_url": "https://api.github.com/users/kylebarron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kylebarron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kylebarron/subscriptions",
      "organizations_url": "https://api.github.com/users/kylebarron/orgs",
      "repos_url": "https://api.github.com/users/kylebarron/repos",
      "events_url": "https://api.github.com/users/kylebarron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kylebarron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T14:17:44Z",
    "updated_at": "2018-11-14T14:17:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "The PR @jtkiley \tis referring to is https://github.com/pandas-dev/pandas/pull/23646."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438966007",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23572#issuecomment-438966007",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23572",
    "id": 438966007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODk2NjAwNw==",
    "user": {
      "login": "bashtage",
      "id": 5585221,
      "node_id": "MDQ6VXNlcjU1ODUyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5585221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashtage",
      "html_url": "https://github.com/bashtage",
      "followers_url": "https://api.github.com/users/bashtage/followers",
      "following_url": "https://api.github.com/users/bashtage/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashtage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashtage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashtage/subscriptions",
      "organizations_url": "https://api.github.com/users/bashtage/orgs",
      "repos_url": "https://api.github.com/users/bashtage/repos",
      "events_url": "https://api.github.com/users/bashtage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashtage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T08:57:57Z",
    "updated_at": "2018-11-15T08:57:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW the change that allows `strl` columns to contain `None` in 117 (#23692) also allows all `None` columns if the `convert_strl` column is set.  I think this is correct since the conversion here is explicit since the user has directed `to_stata` that this column is a string. \r\n\r\n```\r\nimport pandas as pd\r\n\r\nsample_data2 = [\r\n    {'str1': None, 'number': 0},\r\n    {'str1': None, 'number': 1}\r\n]\r\ndata2 = pd.DataFrame(sample_data2)\r\ndata2.to_stata('./sample2_117.dta', version=117, convert_strl=['str1'])\r\n```\r\n\r\nIf `convert_strl` is not set, an error is raised."
  }
]
