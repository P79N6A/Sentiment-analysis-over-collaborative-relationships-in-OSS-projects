[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/410587415",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22203#issuecomment-410587415",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22203",
    "id": 410587415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDU4NzQxNQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-06T04:44:25Z",
    "updated_at": "2018-08-06T04:44:25Z",
    "author_association": "MEMBER",
    "body": "Semantically speaking, `deepcopy` should not have this kind of aliasing.  Thus, I would consider this a bug.  Investigation and PR are welcome!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412282845",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22203#issuecomment-412282845",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22203",
    "id": 412282845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjI4Mjg0NQ==",
    "user": {
      "login": "nmusolino",
      "id": 3150861,
      "node_id": "MDQ6VXNlcjMxNTA4NjE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3150861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmusolino",
      "html_url": "https://github.com/nmusolino",
      "followers_url": "https://api.github.com/users/nmusolino/followers",
      "following_url": "https://api.github.com/users/nmusolino/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmusolino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmusolino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmusolino/subscriptions",
      "organizations_url": "https://api.github.com/users/nmusolino/orgs",
      "repos_url": "https://api.github.com/users/nmusolino/repos",
      "events_url": "https://api.github.com/users/nmusolino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmusolino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-11T15:37:52Z",
    "updated_at": "2018-08-11T15:38:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the second case, if the contained series has dtype object, then this is behaving as documented.  From the “Notes” section of the [`pandas.DataFrame.copy()` documentation](\r\nhttps://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.copy.html):\r\n\r\n> When deep=True, data is copied but actual Python objects will not be copied recursively, only the reference to the object. This is in contrast to copy.deepcopy in the Standard Library, which recursively copies object data (see examples below).\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412284174",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22203#issuecomment-412284174",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22203",
    "id": 412284174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjI4NDE3NA==",
    "user": {
      "login": "nmusolino",
      "id": 3150861,
      "node_id": "MDQ6VXNlcjMxNTA4NjE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3150861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmusolino",
      "html_url": "https://github.com/nmusolino",
      "followers_url": "https://api.github.com/users/nmusolino/followers",
      "following_url": "https://api.github.com/users/nmusolino/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmusolino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmusolino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmusolino/subscriptions",
      "organizations_url": "https://api.github.com/users/nmusolino/orgs",
      "repos_url": "https://api.github.com/users/nmusolino/repos",
      "events_url": "https://api.github.com/users/nmusolino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmusolino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-11T16:00:35Z",
    "updated_at": "2018-08-11T16:09:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the first case, I don't think there is any actual aliasing going on.  It only appears this way because of how you are checking with the `id` function.\r\n\r\n(By the way, this example would be clearer if it did not recycle the names `a` and `b` for the two cases.  Here I am referring to the *first* example.)\r\n\r\nThe example shows:\r\n```\r\nprint(a.loc[0,0] is b.loc[0,0]) # False\r\nprint(id(a.loc[0,0]) == id(b.loc[0,0])) #True\r\n```\r\n\r\nThe first line (`is` comparison) is as expected.  The second is surprising, but that's because the statement is comparing two *temporary* objects.  In other words, to evaluate this expression:\r\n```\r\nid(a.loc[0,0]) == id(b.loc[0,0])\r\n```\r\nthe Python interpreter could perform the following steps:\r\n1.  Evaluate `a.loc[0, 0]`; then\r\n2.  Get the id of the temporary object created in step 1; then\r\n3.  Evaluate `b.loc[0, 0]`; then\r\n4.  Get the id of the temporary object created in step 3.\r\n\r\nIf the temporary object created in step 1 is GC'ed in between, the temporary object created in step 3 may be created at the same address.  (In CPython, the `id` function [returns the memory address](https://docs.python.org/3/library/functions.html#id) of an object, although this is considered a CPython implementation detail.)\r\n\r\nOne case see examples of this just using plain old Python objects:\r\n```\r\nIn [13]: id(object()), id(object())\r\nOut[13]: (4763425312, 4763425312)\r\n\r\nIn [19]: print(object() is object())\r\nFalse\r\n\r\nIn [20]: print(id(object()) == id(object()))\r\nTrue\r\n```\r\n\r\nI think this issue should be closed as not-a-bug, unless I am missing something in the original report."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/412404797",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22203#issuecomment-412404797",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22203",
    "id": 412404797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjQwNDc5Nw==",
    "user": {
      "login": "GabrielDrapor",
      "id": 8597260,
      "node_id": "MDQ6VXNlcjg1OTcyNjA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8597260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDrapor",
      "html_url": "https://github.com/GabrielDrapor",
      "followers_url": "https://api.github.com/users/GabrielDrapor/followers",
      "following_url": "https://api.github.com/users/GabrielDrapor/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDrapor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDrapor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDrapor/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDrapor/orgs",
      "repos_url": "https://api.github.com/users/GabrielDrapor/repos",
      "events_url": "https://api.github.com/users/GabrielDrapor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDrapor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T04:19:53Z",
    "updated_at": "2018-08-13T04:19:53Z",
    "author_association": "NONE",
    "body": "@nmusolino you are right. It's literally not a bug. Thx!"
  }
]
