[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458021321",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458021321",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458021321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODAyMTMyMQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T07:17:27Z",
    "updated_at": "2019-01-28T07:17:27Z",
    "author_association": "MEMBER",
    "body": "We have had quite some discussion lately about `set_index` (see eg https://github.com/pandas-dev/pandas/issues/24046), and the actual change (that started to use `is_scalar`, I think) that caused this regression is https://github.com/pandas-dev/pandas/pull/22486 and https://github.com/pandas-dev/pandas/pull/24762\r\n\r\nIn general the usage `is_scalar` gives problems with custom objects. Eg we also fixed this in fillna (https://github.com/pandas-dev/pandas/issues/20411).\r\n\r\ncc @h-vetinari "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458024936",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458024936",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458024936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODAyNDkzNg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T07:35:22Z",
    "updated_at": "2019-01-28T07:35:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\n\r\nDoes pandas support custom objects as labels? I think that's bound to break in many places. The code previously tried *everything* it got as a key, so in this sense this is a regression, yes. \r\n\r\nI'm a bit stumped as for how to deal with this. Column keys should IMO clearly be scalar (or tuples, grudgingly) - and that's the only reason `is_scalar` is there. CC @jreback\r\n\r\n@wkschwartz \r\n\r\nYour object (at least the toy version) looks a bit like a tuple. As an immediate workaround, I'd suggest to try inheriting `Thing` from `tuple`, then the `isinstance(..., tuple)`-side should work at least."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458141825",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458141825",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458141825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODE0MTgyNQ==",
    "user": {
      "login": "wkschwartz",
      "id": 1417749,
      "node_id": "MDQ6VXNlcjE0MTc3NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wkschwartz",
      "html_url": "https://github.com/wkschwartz",
      "followers_url": "https://api.github.com/users/wkschwartz/followers",
      "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
      "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
      "repos_url": "https://api.github.com/users/wkschwartz/repos",
      "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T13:58:40Z",
    "updated_at": "2019-01-28T13:58:40Z",
    "author_association": "NONE",
    "body": "In my production code, I use [dataclasses](https://docs.python.org/3/library/dataclasses.html) as custom objects in both column keys and row indices, which worked throughout Pandas 0.23.4. If Pandas 0.24 or later drop support for custom classes in row/column indices, I would be stuck at 0.23.4 forever. This is why I view the change as a regression. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458143448",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458143448",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458143448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODE0MzQ0OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T14:03:43Z",
    "updated_at": "2019-01-28T14:03:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Does pandas support custom objects as labels? \r\n\r\nWe didn't disallow it previously, so yes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458144375",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458144375",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458144375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODE0NDM3NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T14:06:46Z",
    "updated_at": "2019-01-28T14:06:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "This may have *happened* to work, but we don't support custom objects as labels explicity. Not against reverting this, but its buyer beware here."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458147939",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458147939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458147939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODE0NzkzOQ==",
    "user": {
      "login": "wkschwartz",
      "id": 1417749,
      "node_id": "MDQ6VXNlcjE0MTc3NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wkschwartz",
      "html_url": "https://github.com/wkschwartz",
      "followers_url": "https://api.github.com/users/wkschwartz/followers",
      "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
      "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
      "repos_url": "https://api.github.com/users/wkschwartz/repos",
      "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T14:16:55Z",
    "updated_at": "2019-01-28T14:16:55Z",
    "author_association": "NONE",
    "body": "I never could find anything in the documentation that takes a stance on what can or can’t be column keys, except the general notion that DataFrames are dict-like. From this I surmised that column keys should be hashable and immutable. Did I miss something in the documentation?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458241015",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458241015",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458241015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODI0MTAxNQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T18:13:27Z",
    "updated_at": "2019-01-28T18:13:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've added a fix for the regression in #24984, with the caveat that I think that this should be immediately deprecated. For a method that's supposed to intelligently process column labels, arrays and list of labels/arrays, it's opening Pandora's box to try to support custom types. There's no end to the (hashable) horrors that someone might implement (see below).\r\n\r\nAllowing dataclasses, as in the usecase of @wkschwartz is a separate consideration, but for much the same reasons, I'd suggest to deprecate even tuples in labels: #24688\r\n\r\nSee also #24702, which also ties into the following:\r\n\r\n> what can or can’t be column keys\r\n\r\nThis should be clearly defined, documented, and enforced (same as list-like).\r\n\r\n---------------------------------------------------\r\n\r\nAbout the stuff that pandas already \"supports\", how about lists-as-labels...?\r\n\r\n```\r\n>>> from pyfrozen import FrozenList\r\n>>> class FroList(FrozenList):\r\n...     def __init__(self, values):\r\n...         super().__init__()\r\n...         self.extend(values)\r\n...         self.freeze()\r\n...     def __hash__(self):\r\n...         return hash(tuple(self))\r\n...\r\n>>> pd.DataFrame({FroList([1, 2, 3]): ['a', 'b', 'c']})\r\n  [1, 2, 3]\r\n0         a\r\n1         b\r\n2         c\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458246305",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458246305",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458246305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODI0NjMwNQ==",
    "user": {
      "login": "wkschwartz",
      "id": 1417749,
      "node_id": "MDQ6VXNlcjE0MTc3NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wkschwartz",
      "html_url": "https://github.com/wkschwartz",
      "followers_url": "https://api.github.com/users/wkschwartz/followers",
      "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
      "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
      "repos_url": "https://api.github.com/users/wkschwartz/repos",
      "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T18:27:54Z",
    "updated_at": "2019-01-28T18:27:54Z",
    "author_association": "NONE",
    "body": "Obviously I would prefer no deprecation of custom label types as they are integral to my company’s applications. However, I would urge strongly that if you do decide to deprecate the feature, you do so starting only in the next major release (presumably 0.25.0) rather than in a minor release (0.24.1).\r\n\r\nIf you do stop supporting custom label types and I am not to be stuck at Pandas 0.23.4 forever, I could theoretically undertake the (expensive) refactoring to use unique IDs (my production code has the equivalent of the name field from my toy example in the OP). However, other users whose code would break might not have convenient unique IDs to switch to. Please do not remove this feature lightly."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458343481",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458343481",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458343481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM0MzQ4MQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:25:42Z",
    "updated_at": "2019-01-28T23:29:36Z",
    "author_association": "MEMBER",
    "body": "> About the stuff that pandas already \"supports\", how about lists-as-labels...?\r\n\r\n``FroList`` is just a mistake, because it has a ``__hash__`` which [changes during its lifetime](https://docs.python.org/3/glossary.html#term-hashable). If a user does stuff like this, he's looking for trouble: fair enough, not our fault."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458346692",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458346692",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458346692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM0NjY5Mg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:38:32Z",
    "updated_at": "2019-01-28T23:38:32Z",
    "author_association": "MEMBER",
    "body": "Hmm well this conversation is somewhat split between this and the PR but I would be -1 on supporting something like this. I understand that it may have worked previously and wasn't explicitly disallowed, but I don't think that means we *have* to support it going forward, when I would think there are already an infinite other more idiomatic ways of going about this.\r\n\r\nEven if fixed in this particular instance trying to guarantee support for something like this as an index item is going to cause a lot of unnecessary complexity in other parts of the code base, I would think particularly on subsequent indexing operations"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458346862",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458346862",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458346862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM0Njg2Mg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:39:23Z",
    "updated_at": "2019-01-28T23:39:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "It does not change, that's what the `.freeze` is for...\r\n\r\nIt would work. Not that it *should*, of course, much less that it should be supported.\r\n```\r\n>>> ell = FroList([1, 2, 3])\r\n>>> ell[1] = 'a'\r\nTraceback (most recent call last):\r\n[...]\r\nRuntimeError: Cannot modify frozen list\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458350699",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458350699",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458350699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM1MDY5OQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:55:40Z",
    "updated_at": "2019-01-28T23:55:40Z",
    "author_association": "MEMBER",
    "body": "> It does not change, that's what the `.freeze` is for...\r\n\r\nI meant: it can contain a proper list. But you're right this is irrelevant (tuples can too). And indeed it works, and that's great. Users will need to remember only a simple rule: \"hashable -> works\". By the way: it's a rule they already know from ``dict``s."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458353119",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458353119",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458353119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM1MzExOQ==",
    "user": {
      "login": "wkschwartz",
      "id": 1417749,
      "node_id": "MDQ6VXNlcjE0MTc3NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wkschwartz",
      "html_url": "https://github.com/wkschwartz",
      "followers_url": "https://api.github.com/users/wkschwartz/followers",
      "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
      "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
      "repos_url": "https://api.github.com/users/wkschwartz/repos",
      "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T00:05:59Z",
    "updated_at": "2019-01-29T00:05:59Z",
    "author_association": "NONE",
    "body": "> I understand that it may have worked previously and wasn't explicitly disallowed, but I don't think that means we have to support it going forward\r\n\r\nIf your definition of backward compatibility means maintaining the functionality of old Pandas-based code, then you shouldn't care about _why_ folks used Pandas as they did, only that it worked before and should continue to work as long as the major version of Pandas doesn't change. This is the way [Go handles compatibility](https://golang.org/doc/go1compat). In that case, whether my use case is Pythonic or elegant shouldn't matter.\r\n\r\nIf your goals for the backward compatibility of Pandas only encompases the examples in the documentation and the tests, then I refer you to my next point.\r\n\r\n> when I would think there are already an infinite other more idiomatic ways of going about this\r\n\r\nUsing custom classes as column headers in my application has been great because there's a bunch of extra data that is automatically carried around as I make (modified) copies of DataFrames. For my use case, custom classes have been elegant and, IMO, very Pythonic.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458434914",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458434914",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458434914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQzNDkxNA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T07:26:57Z",
    "updated_at": "2019-01-29T07:26:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wkschwartz \r\n> This is the way Go handles compatibility. \r\n\r\nGo is statically typed, and that gives a *very* different baseline from which to make such a promise, compared to python.\r\n\r\nPandas API is under massive development (see the whole ExtensionArray effort), and still has far too many nooks and crannies (whether due to legacy reasons or simple oversight), such that promising backwards compatibility for \"anything that works\" is suicide from a maintenance perspective. That being said, there's a substantial amount of effort that things are being deprecated gently whenever possible."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458751079",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458751079",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458751079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODc1MTA3OQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T23:36:13Z",
    "updated_at": "2019-01-29T23:36:13Z",
    "author_association": "MEMBER",
    "body": "> Users will need to remember only a simple rule: \"hashable -> works\".\r\n\r\nJust giving this some more thought today...is this all we should require? There are a lot of index operations that also require the concept of sortability and that manifests itself in quite a few of the reshaping ops. I feel like hashable alone would only work with a subset of the API that would require intense care to work around.\r\n\r\n> Using custom classes as column headers in my application has been great because there's a bunch of extra data that is automatically carried around as I make (modified) copies of DataFrames\r\n\r\nSure but what parts of the DataFrame API are you subsequently using? Outside of masking operations I'm kind of curious what the advantage of the DataFrame is versus just a dict, given IO operations with the former are going to be lossy and as mentioned I would think you'd have to be very careful which parts of the API you ultimately navigate."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458776686",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458776686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458776686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODc3NjY4Ng==",
    "user": {
      "login": "wkschwartz",
      "id": 1417749,
      "node_id": "MDQ6VXNlcjE0MTc3NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wkschwartz",
      "html_url": "https://github.com/wkschwartz",
      "followers_url": "https://api.github.com/users/wkschwartz/followers",
      "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
      "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
      "repos_url": "https://api.github.com/users/wkschwartz/repos",
      "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T01:34:43Z",
    "updated_at": "2019-01-30T01:34:43Z",
    "author_association": "NONE",
    "body": "> hashable alone would only work with a subset of the API\r\n\r\nMaybe categorical dtypes are useful analogy here. Some categoricals are ordered and thus sortable, others are not. Which operations you can do on a categorical column depends on whether the dtype is ordered.\r\n\r\nPerhaps there's a hiererarchy for keys:\r\n1. All column keys must have `__hash__` (and maybe `__eq__`?)\r\n2. Sorting/reshaping operations require `__lt__` [and `__eq__`](https://docs.python.org/3/library/functools.html#functools.total_ordering). (You could insist that the class have all six rich comparison methods if that makes Pandas code simpler.)\r\n\r\nPandas can then assume compatibility among `__hash__`, `__lt__` (if present), and `__eq__` (if required?).\r\n\r\n> what parts of the DataFrame API are you subsequently using?\r\n\r\nI make substantial use of row and column indexing (both boolean masking and by keys), row and column sums, merging on row indices, broadcasting comparisons (e.g., `(df[list_of_my_custom_objects] < 0).any()`), transposes, and, most importantly, matrix multiplication (e.g., `df[list_of_my_custom_objects] @ some_vector`). I make some use of groupby. At the boundaries of my API and in my CLI, I use some IO features, and some of the guarantees about dtypes.\r\n\r\nMost of those operations are _way_ harder with lists of dicts, which I know because I've written this application both ways."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458845124",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458845124",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 458845124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODg0NTEyNA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T07:49:43Z",
    "updated_at": "2019-01-30T07:50:09Z",
    "author_association": "MEMBER",
    "body": "> > Users will need to remember only a simple rule: \"hashable -> works\".\r\n> \r\n> Just giving this some more thought today...is this all we should require? There are a lot of index operations that also require the concept of sortability\r\n\r\nMixed type indexes are non-sortable since Python 3: to my eyes the problem is analogous, and not particularly worrisome. For my experience, there are some reshaping ops in which we try to sort, and fallback to not sorting, and this is (I think) OK."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459638637",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-459638637",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 459638637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTYzODYzNw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T08:01:04Z",
    "updated_at": "2019-02-01T08:01:12Z",
    "author_association": "MEMBER",
    "body": "@toobaz is there a reason you closed this? As I don't think the issue is resolved (or the typical wrong button mistake; github UI should put them farther apart :-))"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459666235",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-459666235",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 459666235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTY2NjIzNQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T09:48:58Z",
    "updated_at": "2019-02-01T09:48:58Z",
    "author_association": "MEMBER",
    "body": "> @toobaz is there a reason you closed this?\r\n\r\nLack of sleep probably ;-) Thanks for reopening."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459692128",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-459692128",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 459692128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTY5MjEyOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T11:24:33Z",
    "updated_at": "2019-02-01T11:24:33Z",
    "author_association": "MEMBER",
    "body": "There has been some interesting discussion, here and in the PR, on the general topic of \"should we support custom objects in Index\" (or, how do we define and specify what we support in Index).\r\n\r\nAnd I think it is a discussion we should continue (should we open a new issue for that?); but, we also need to decide what to do on the short term.\r\n\r\nDo we agree that this was an unintended regression that we would like to fix for 0.24.x, awaiting more general discussion later on? (-> which means working towards merging https://github.com/pandas-dev/pandas/pull/24984) \r\n\r\nTom asked the same question on the PR a few days ago (https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458557939), and there was not really reaction on it, so I somewhat assumed that it was the case (but I also agree with it). But @WillAyd mentioned on gitter that he has his doubts on the need to fix it. \r\n(the discussion on the PR since then is only about the technical details of how to allow it again)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/466758458",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-466758458",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 466758458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Njc1ODQ1OA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-24T10:10:33Z",
    "updated_at": "2019-02-24T10:12:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback \r\nAs I mentioned a few times in #24894, this was actually fixed for 0.24.1 by #25085.\r\n\r\n> @h-vetinari: The custom classes were re-enabled by #25085 (which took over the tests from this PR [#24894]), which closed the regression #24969, and has a corresponding whatsnew note. I guess the issue didn't get closed yet, because I only noted that #25085 was an alternative to this PR [#24894] (at the time, for solving #24969), but didn't add the \"closes #24969\" explicitly - sorry."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/467101259",
    "html_url": "https://github.com/pandas-dev/pandas/issues/24969#issuecomment-467101259",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24969",
    "id": 467101259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzEwMTI1OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-25T17:28:09Z",
    "updated_at": "2019-02-25T17:28:09Z",
    "author_association": "MEMBER",
    "body": "@h-vetinari indeed, changed the milestone accordingly"
  }
]
