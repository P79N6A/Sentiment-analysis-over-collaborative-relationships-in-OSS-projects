[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/49717645",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-49717645",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 49717645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzE3NjQ1",
    "user": {
      "login": "maxgrenderjones",
      "id": 6059365,
      "node_id": "MDQ6VXNlcjYwNTkzNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6059365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxgrenderjones",
      "html_url": "https://github.com/maxgrenderjones",
      "followers_url": "https://api.github.com/users/maxgrenderjones/followers",
      "following_url": "https://api.github.com/users/maxgrenderjones/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxgrenderjones/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxgrenderjones/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxgrenderjones/subscriptions",
      "organizations_url": "https://api.github.com/users/maxgrenderjones/orgs",
      "repos_url": "https://api.github.com/users/maxgrenderjones/repos",
      "events_url": "https://api.github.com/users/maxgrenderjones/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxgrenderjones/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-22T09:39:30Z",
    "updated_at": "2014-07-22T09:40:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "So this specific error has been fixed in 0.14.1 as \n\n``` python\n    def has_table(self, name):\n        if self.meta.tables.get(name) is not None:\n            return True\n        else:\n            return False\n```\n\nwas changed in 0.14.1 to \n\n``` python\ndef has_table(self, name):\n        return self.engine.has_table(name)\n```\n\nHowever in general there seems to be an assumption that you can `get` a table, so it now fails at:\n\n``` python\nC:\\Anaconda\\lib\\site-packages\\pandas\\io\\sql.pyc in drop_table(self, table_name)\n    854     def drop_table(self, table_name):\n    855         if self.engine.has_table(table_name):\n--> 856             self.meta.reflect(only=[table_name])\n    857             self.get_table(table_name).drop()\n    858             self.meta.clear()\n```\n\nbecause it can't find the table. \n\nFrom the [SQLAlchemy docs](http://docs.sqlalchemy.org/en/latest/dialects/mysql.html), \n\n> Case Sensitivity and Table Reflection\n> \n> MySQL has inconsistent support for case-sensitive identifier names, basing support on specific details of the underlying operating system. However, it has been observed that no matter what case sensitivity behavior is present, the names of tables in foreign key declarations are always received from the database as all-lower case, making it impossible to accurately reflect a schema where inter-related tables use mixed-case identifier names.\n> \n> Therefore it is strongly advised that table names be declared as all lower case both within SQLAlchemy as well as on the MySQL database itself, especially if database reflection features are to be used.\n\nRather than mark this CANTFIX WONTFIX, could we fetch the correct table name by changing\n\n``` python\n    def get_table(self, table_name):\n        return self.meta.tables.get(table_name)\n```\n\nto search through `metadata.tables.keys()` with case insensitive matching on mysql if `self.meta.tables.get(table_name)` returns `None`?\n\nTo answer my own question, from the [mysql docs](http://dev.mysql.com/doc/refman/5.7/en/identifier-case-sensitivity.html) it seems like you'd have to know the value of [lower_case_table_names](http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_lower_case_table_names) before knowing whether this was a safe thing to do:\n\n> If set to 0, table names are stored as specified and comparisons are case sensitive. If set to 1, table names are stored in lowercase on disk and comparisons are not case sensitive. If set to 2, table names are stored as given but compared in lowercase. This option also applies to database names and table aliases. For additional information, see Section 9.2.2, “Identifier Case Sensitivity”.\n> \n> You should not set this variable to 0 if you are running MySQL on a system that has case-insensitive file names (such as Windows or Mac OS X). If you set this variable to 0 on such a system and access MyISAM tablenames using different lettercases, index corruption may result. On Windows the default value is 1. On Mac OS X, the default value is 2.\n\nSeems fairly involved! Seems like it would be easier to write 'DROP TABLE %s' :)\n\nThoughts on what direction to take this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/49725374",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-49725374",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 49725374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzI1Mzc0",
    "user": {
      "login": "maxgrenderjones",
      "id": 6059365,
      "node_id": "MDQ6VXNlcjYwNTkzNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6059365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxgrenderjones",
      "html_url": "https://github.com/maxgrenderjones",
      "followers_url": "https://api.github.com/users/maxgrenderjones/followers",
      "following_url": "https://api.github.com/users/maxgrenderjones/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxgrenderjones/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxgrenderjones/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxgrenderjones/subscriptions",
      "organizations_url": "https://api.github.com/users/maxgrenderjones/orgs",
      "repos_url": "https://api.github.com/users/maxgrenderjones/repos",
      "events_url": "https://api.github.com/users/maxgrenderjones/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxgrenderjones/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-22T11:08:42Z",
    "updated_at": "2014-07-22T11:08:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about this. If the table exists and the engine is mysql but `self.meta.tables.get(name)` is `None`, then we can be fairly sure it's a case sensitivity problem. At this stage we can just iterate through `meta.tables.keys()` to find the right version of name to pull out of the table without needing to fuss about `lower_case_table_names`. (Does anyone know/feel we can assume based on the above that this always be `name.lower()`?)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/49937076",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-49937076",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 49937076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTM3MDc2",
    "user": {
      "login": "maxgrenderjones",
      "id": 6059365,
      "node_id": "MDQ6VXNlcjYwNTkzNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6059365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxgrenderjones",
      "html_url": "https://github.com/maxgrenderjones",
      "followers_url": "https://api.github.com/users/maxgrenderjones/followers",
      "following_url": "https://api.github.com/users/maxgrenderjones/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxgrenderjones/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxgrenderjones/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxgrenderjones/subscriptions",
      "organizations_url": "https://api.github.com/users/maxgrenderjones/orgs",
      "repos_url": "https://api.github.com/users/maxgrenderjones/repos",
      "events_url": "https://api.github.com/users/maxgrenderjones/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxgrenderjones/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-23T21:18:04Z",
    "updated_at": "2014-07-23T22:40:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "While I think about it, here's my proposed code\n\n``` python\ndef drop_table(self, table_name):\n    if self.engine.has_table(table_name):\n        if self.engine.dialect=='mysql' and self.get_table(table_name) is None and self.get_table(table_name.lower()) is not None:\n            table_name=table_name.lower()\n        self.meta.reflect(only=[table_name])\n        self.get_table(table_name).drop()\n        self.meta.clear()\n```\n\nHowever, that just fixes it in `drop_table`. A similar issue will arise with `read_sql` if I change it as proposed in #7826 to use `get_table` to detect existence of a table (which doesn't run a query) vs `has_table` which does, and there may well be other places. Think we need to take a call on whether this is a feature or a bug?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50483600",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-50483600",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 50483600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDgzNjAw",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-29T14:32:01Z",
    "updated_at": "2014-07-29T14:32:01Z",
    "author_association": "MEMBER",
    "body": "Hmm, what a mess this case sensitivity .. :-) But thanks for reporting and digging into this, @maxgrenderjones \n\nYour fix looks reasonable (in the sense it looks like solving the problem), but on the other hand, if we have to do this for every where for some flavor something is not working, it can become tedious (that was the reason for using sqlalchemy). \nWould it also be possible that this is a bug in sqlalchemy `reflect` `only` keyword? As this should handle this case problem? (as `has_table` does handle it correctly, you could assume the same from `reflect`?)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50507020",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-50507020",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 50507020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTA3MDIw",
    "user": {
      "login": "maxgrenderjones",
      "id": 6059365,
      "node_id": "MDQ6VXNlcjYwNTkzNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6059365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxgrenderjones",
      "html_url": "https://github.com/maxgrenderjones",
      "followers_url": "https://api.github.com/users/maxgrenderjones/followers",
      "following_url": "https://api.github.com/users/maxgrenderjones/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxgrenderjones/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxgrenderjones/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxgrenderjones/subscriptions",
      "organizations_url": "https://api.github.com/users/maxgrenderjones/orgs",
      "repos_url": "https://api.github.com/users/maxgrenderjones/repos",
      "events_url": "https://api.github.com/users/maxgrenderjones/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxgrenderjones/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-29T17:10:36Z",
    "updated_at": "2014-07-29T17:15:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agree, it's a bit of a nightmare, so I'm just hoping that the issue is that we're not using SQLAlchemy correctly, rather than that even after SQLAlchemy-ing our code, we still have loads of edge cases.\n\nYou could probably call it a bug that `reflect`'s `only` keyword is case sensitive even when mysql is being case insensitive e.g.\n\n``` python\n>>> model.Engine\nEngine(mysql+oursql://username:***@hostname/database)\n>>> meta=MetaData(bind=model.Engine)\n>>> meta.reflect(only=['OnlineTransactions'])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Anaconda\\lib\\site-packages\\sqlalchemy\\sql\\schema.py\", line 3246, in reflect\n    (bind.engine.url, s, ', '.join(missing)))\nsqlalchemy.exc.InvalidRequestError: Could not reflect: requested table(s) not available in mysql+oursql://username:***@hostname/database: (OnlineTransactions)\n>>> meta.reflect(only=['onlinetransactions'])\n>>>\n```\n\nbut I can't believe that the difference between `engine.has_table` (used in our `has_table`) and `meta.tables` (used in our `get_table`) isn't going to need solving, as it's exactly what's at stake with  #7422, and probably also #7441). It may be that we need a series of (potentially database specific) heuristics to ensure that if `has_table` returns `True`, then `get_table` returns something. Furthermore, it's not like if you get rid of the `only` keyword the problem goes away:\n\n```\n>>> meta.reflect()\n>>> 'onlinetransactions' in meta.tables\nTrue\n>>> 'OnlineTransactions' in meta.tables\nFalse\n```\n\n(There's a partial solution on [#7422](https://github.com/pydata/pandas/issues/7422#issuecomment-50215056), but if we're going to fix some of it, would be good to fix the whole thing while we're at it)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/50526664",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-50526664",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 50526664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTI2NjY0",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-29T19:35:19Z",
    "updated_at": "2014-07-29T19:35:19Z",
    "author_association": "MEMBER",
    "body": "Yes, the difference between `has_table` and `get_table` will need to get solved when implementing `schema`/`meta` arguments (#7441/#7422). Are you interested to look into this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/51481499",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-51481499",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 51481499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDgxNDk5",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-07T14:45:34Z",
    "updated_at": "2014-08-07T14:45:34Z",
    "author_association": "MEMBER",
    "body": "@maxgrenderjones I started implementing `schema` support, see #7952. I don't think this already solves this issue, but if you could try it out, that would certainly be helpful.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54381346",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-54381346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 54381346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzgxMzQ2",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-03T23:09:48Z",
    "updated_at": "2014-09-05T13:17:06Z",
    "author_association": "MEMBER",
    "body": "@maxgrenderjones Coming back to this. I don't feel like putting in the fix you proposed above, as this seems a bit too specifi. Furthermore, eg on linux you can have a difference between 'Foo' and 'foo' (it depends on your mysql settings, and the default values differ between operating system). And I also don't want to do more on this issue as SQLAlchemy does, relying on them that they do the best as possible wihtout getting lost in this rabbit hole.\n\nFurther, for this specific case, with MySQL on Windows, all tables names are converted to lower case, so you really shouldn't use upper case.\n\n**But**, I was thinking, what we _can_ do, is trying to detect such a case like this and raise a warning if possible. Eg in the case that the user provided table name (here 'Foo') does not match the actually created table name (in this case 'foo'). If such a case is detected, we could raise a warning like \"The table name 'Foo' you provided is not used exactly in the database, possibly due to case sensitivity issues. Consider using lower case table names\"\n\nSee also discussion in sqlalchemy issue tracker: https://bitbucket.org/zzzeek/sqlalchemy/issue/3181/metadatareflect-with-only-keyword-fails\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55075908",
    "html_url": "https://github.com/pandas-dev/pandas/issues/7815#issuecomment-55075908",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/7815",
    "id": 55075908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MDc1OTA4",
    "user": {
      "login": "maxgrenderjones",
      "id": 6059365,
      "node_id": "MDQ6VXNlcjYwNTkzNjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6059365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxgrenderjones",
      "html_url": "https://github.com/maxgrenderjones",
      "followers_url": "https://api.github.com/users/maxgrenderjones/followers",
      "following_url": "https://api.github.com/users/maxgrenderjones/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxgrenderjones/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxgrenderjones/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxgrenderjones/subscriptions",
      "organizations_url": "https://api.github.com/users/maxgrenderjones/orgs",
      "repos_url": "https://api.github.com/users/maxgrenderjones/repos",
      "events_url": "https://api.github.com/users/maxgrenderjones/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxgrenderjones/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-10T06:26:28Z",
    "updated_at": "2014-09-10T06:26:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @jorisvandenbossche, seems a fair resolution of a problem with no clean answers\n"
  }
]
