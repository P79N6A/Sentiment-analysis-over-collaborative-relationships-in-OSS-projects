[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9785182",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2121#issuecomment-9785182",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2121",
    "id": 9785182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODUxODI=",
    "user": {
      "login": "bluefir",
      "id": 1903683,
      "node_id": "MDQ6VXNlcjE5MDM2ODM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1903683?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluefir",
      "html_url": "https://github.com/bluefir",
      "followers_url": "https://api.github.com/users/bluefir/followers",
      "following_url": "https://api.github.com/users/bluefir/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluefir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluefir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluefir/subscriptions",
      "organizations_url": "https://api.github.com/users/bluefir/orgs",
      "repos_url": "https://api.github.com/users/bluefir/repos",
      "events_url": "https://api.github.com/users/bluefir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluefir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-25T16:54:12Z",
    "updated_at": "2012-10-25T16:54:12Z",
    "author_association": "NONE",
    "body": "Ok, to be fair, the DataFrame comes out unsorted from my function while transform() preserves the sort order of the original index:\n\n```\ndata.index.lexsort_depth\n```\n\n> 2\n\n```\ndata2 = data.groupby(level=field_security_id).transform(lambda x: x.fillna())\ndata2.index.lexsort_depth\n```\n\n> 2\n\n```\ndata3 = apply_by_group(data.groupby(level=field_security_id), lambda x: x.fillna())\ndata3.index.lexsort_depth\n```\n\n> 0\n\nStill, even with having to sort the index, transform() is much slower:\n\n```\n%timeit data3.sort_index()\n```\n\n> 1 loops, best of 3: 2.17 s per loop\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12460250",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2121#issuecomment-12460250",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2121",
    "id": 12460250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDYwMjUw",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-19T20:04:32Z",
    "updated_at": "2013-01-19T20:04:32Z",
    "author_association": "MEMBER",
    "body": "Can you produce a test data set for me to look at this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12471486",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2121#issuecomment-12471486",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2121",
    "id": 12471486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDcxNDg2",
    "user": {
      "login": "bluefir",
      "id": 1903683,
      "node_id": "MDQ6VXNlcjE5MDM2ODM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1903683?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluefir",
      "html_url": "https://github.com/bluefir",
      "followers_url": "https://api.github.com/users/bluefir/followers",
      "following_url": "https://api.github.com/users/bluefir/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluefir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluefir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluefir/subscriptions",
      "organizations_url": "https://api.github.com/users/bluefir/orgs",
      "repos_url": "https://api.github.com/users/bluefir/repos",
      "events_url": "https://api.github.com/users/bluefir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluefir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T14:43:05Z",
    "updated_at": "2013-01-20T14:43:05Z",
    "author_association": "NONE",
    "body": "Sure. Here it is, quick and dirty.\n\n```\ndef apply_by_group(grouped, f):\n    \"\"\"\n    Applies a function to each Series or DataFrame in a GroupBy object, concatenates the results\n    and returns the resulting Series or DataFrame.\n\n    Parameters\n    ----------\n    grouped: SeriesGroupBy or DataFrameGroupBy\n    f: callable\n        Function to apply to each Series or DataFrame in the grouped object.\n\n    Returns\n    -------\n    Series or DataFrame that results from applying the function to each Series or DataFrame in the\n    GroupBy object and concatenating the results.\n\n    \"\"\"\n    assert isinstance(grouped, (SeriesGroupBy, DataFrameGroupBy))\n    assert hasattr(f, '__call__')\n\n    groups = []\n    for key, group in grouped:\n        groups.append(f(group))\n    return pd.concat(groups)\n```\n\n```\nimport numpy as np\nimport pandas as pd\nfrom pandas import Index, MultiIndex, DataFrame\n\nn_dates = 1000\nn_securities = 2000\nn_columns = 3\nshare_na = 0.1\n\ndates = pd.date_range('1997-12-31', periods=n_dates, freq='B')\ndates = Index(map(lambda x: x.year * 10000 + x.month * 100 + x.day, dates))\n\nsecid_min = int('10000000', 16)\nsecid_max = int('F0000000', 16)\nstep = (secid_max - secid_min) // (n_securities - 1)\nsecurity_ids = map(lambda x: hex(x)[2:10].upper(), range(secid_min, secid_max + 1, step))\n\ndata_index = MultiIndex(levels=[dates.values, security_ids],\n    labels=[[i for i in xrange(n_dates) for _ in xrange(n_securities)], range(n_securities) * n_dates],\n    names=['date', 'security_id'])\nn_data = len(data_index)\n\ncolumns = Index(['factor{}'.format(i) for i in xrange(1, n_columns + 1)])\n\ndata = DataFrame(np.random.randn(n_data, n_columns), index=data_index, columns=columns)\n\nstep = int(n_data * share_na)\nfor column_index in xrange(n_columns):\n    index = column_index\n    while index < n_data:\n        data.set_value(data_index[index], columns[column_index], np.nan)\n        index += step\n\ngrouped = data.groupby(level='security_id')\nf_fillna = lambda x: x.fillna(method='pad')\n\ndata2 = grouped.transform(f_fillna)\n\ndata3 = apply_by_group(grouped, f_fillna)\ndata3.sort_index(inplace=True)\n```\n\n```\n%timeit grouped.transform(f_fillna)\n```\n\n> 1 loops, best of 3: 8.7 s per loop\n\n```\n%timeit apply_by_group(grouped, f_fillna)\n```\n\n> 1 loops, best of 3: 1.97 s per loop\n\n```\n%timeit data3.sort_index(inplace=True)\n```\n\n> 1 loops, best of 3: 1.26 s per loop\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15339342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2121#issuecomment-15339342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2121",
    "id": 15339342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MzM5MzQy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-23T16:00:30Z",
    "updated_at": "2013-03-23T16:00:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wesm I created a PR #3145 to solve this. Everything passes, but pls validate for corrrectness.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15426604",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2121#issuecomment-15426604",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2121",
    "id": 15426604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDI2NjA0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-25T21:25:21Z",
    "updated_at": "2013-03-25T21:25:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "closed by #3145\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15428084",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2121#issuecomment-15428084",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2121",
    "id": 15428084,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDI4MDg0",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-25T21:53:24Z",
    "updated_at": "2013-03-25T21:53:24Z",
    "author_association": "MEMBER",
    "body": "Thanks Jeff\n"
  }
]
