[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235647887",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13820#issuecomment-235647887",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13820",
    "id": 235647887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTY0Nzg4Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-27T16:50:42Z",
    "updated_at": "2016-07-27T16:50:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Mind explaining your actual use-case a bit? In general Series / DataFrames don't work very well with nested data, though this could change in the future.\n\nAs a workaround you can achieve this by calling your function on each element of `df.itertuples()`, and wrapping the output in a new `pd.Series` call. It'll probably be faster anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235725564",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13820#issuecomment-235725564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13820",
    "id": 235725564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTcyNTU2NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-27T21:23:23Z",
    "updated_at": "2016-07-27T21:23:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah this is completely non-idiomatic\n\nyou _can_ do this:\n\n```\nIn [6]: def apply_list (row):\n   ...:      return Series([2*row['A'], 4*row['C'], 3*row['B']], index=list('ACB'))\n   ...: \n   ...: \n   ...: \n   ...: df = pd.DataFrame(np.random.randn(6,4), columns=list('ABCD'))\n   ...: df['etime'] = pd.Timestamp('20130102')\n   ...: \n   ...: df.apply(apply_list, axis=1)\n   ...: \n   ...: \nOut[6]: \n          A         C         B\n0  0.519831 -0.869646 -0.293619\n1 -3.323751  3.305479  2.619803\n2  0.515751 -1.192321 -4.504805\n3  0.319642  3.488812  4.289383\n4  2.328899 -3.196405  0.980369\n5  0.254868  3.926900 -4.392621\n```\n\npandas expects to be able to coerce non-same sized input according to the original size if its not labeled. So I _would_ expect your original example to fail. I suppose it could raise a better error message though.\n\nIts just not reasonable to return arbitrary output and have pandas automatically assign labels to it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/235838018",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13820#issuecomment-235838018",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13820",
    "id": 235838018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTgzODAxOA==",
    "user": {
      "login": "mhabets",
      "id": 2016449,
      "node_id": "MDQ6VXNlcjIwMTY0NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2016449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mhabets",
      "html_url": "https://github.com/mhabets",
      "followers_url": "https://api.github.com/users/mhabets/followers",
      "following_url": "https://api.github.com/users/mhabets/following{/other_user}",
      "gists_url": "https://api.github.com/users/mhabets/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mhabets/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mhabets/subscriptions",
      "organizations_url": "https://api.github.com/users/mhabets/orgs",
      "repos_url": "https://api.github.com/users/mhabets/repos",
      "events_url": "https://api.github.com/users/mhabets/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mhabets/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-28T08:54:09Z",
    "updated_at": "2016-08-04T08:34:36Z",
    "author_association": "NONE",
    "body": "Thank you both for your answer.\nMy issue description was not clear enough. I added my use case and some comments.\nIn short:\n- I would like to keep the list in a single column or a Serie because it is the result of a matrix multiplication.\n- It works fine with a DataFrame without a datetime column but it doesn't with this type of column.\n\nSo, I am not sure the corrected issue title matches with my case. @jreback could you double check with the new elements I added?\n\nA workaround I found is to convert the list to string in order to force to keep it in a single column:\n\n``` python\ndef apply_list (row):\n     return str([2*row['A'], 4*row['C'], 3*row['B']])\n```\n"
  }
]
