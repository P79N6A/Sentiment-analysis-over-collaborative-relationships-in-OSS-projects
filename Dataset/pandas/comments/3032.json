[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14808438",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14808438",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14808438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODA4NDM4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-12T22:12:42Z",
    "updated_at": "2013-03-12T22:12:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "mixed means mixed 'pandas' data types (e.g. string/int/float/datetimes)\n\nyou basically have 2 ways to go here:\n\n1) the PyTables Table object that HDFStore uses underlying, DOES support a pure 'object' type, but it is very inefficient, as its basically a pickle of the data (in this case your spine/image fields), FYI, the 'mouse_id' is not 'object' datatype as its a 'string' fields (and this is how its stored)\n\nThis of this as OBT (one-big-table)\n\npros:\n- all of your data is 'together'\n\ncons:\n- You would not be able to search on spine/image\n- not sure how fast this would write/read (of course your queries would be fast, and depending on the density, meaning the number of rows that are returned it could be acceptable)\n- This would require a code change to support the object type\n\n2) You could make your main data only have these fundamental types and use a reference (say a string) to image/spine, then store these as separate nodes\n\nThis is a main table and sub-tables\n(this is a variant on http://pandas.pydata.org/pandas-docs/dev/io.html#multiple-table-queries)\n\npros:\n- this would be very fast (as everything is a pure type)\n- you then have the ability to store arbitrary amounts of data in the image/spine category\n- you can split up the nodes in different files if you wish\n- you can search on image/spine (not sure if that's useful)\n- if your spine/image is 'constant/fixed' this is actually a big win in terms of creating your store\n\ncons:\n- you data is now spread out and you can potentially have consistency issues (e.g. you update the main pointer\n  but not the sub-data, can easily be fixed by wrapping your accesses in a class)\n\nI don't mind making the change to support pure objects (in 1), but given your data description I think you much better off served by 2) (and possibly some wrapper code)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14809028",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14809028",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14809028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODA5MDI4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-12T22:17:49Z",
    "updated_at": "2013-03-12T22:17:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I mispoke a bit\n\nThere is an object type, but you cannot store this in a table (you can store it in a fixed store, basically non-searchable node).\n\nThe other thing with the cons of 2), you can simply use sub-nodes if you want, then the data is 'together',\nthen you don't even need a reference to it (thought I will still suggest one!) e.g.\n\npseudo code here:\n\n```\nstore.append('df',df)\nstore.append('df/image',image)\nstore.append('df/spine',spine)\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14809279",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14809279",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14809279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODA5Mjc5",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-12T22:20:19Z",
    "updated_at": "2013-03-12T22:20:59Z",
    "author_association": "NONE",
    "body": "That's probably the right way to do things for me. I always access the data in an \"all-at-once\" pattern, where I grab all the images for a mouse, compute some statistic (which may be time-dependent, which is why I need them all), and then save that statistic out. I then will only query on the statistic, and not the image. I'll go ahead and implement this. Thank you very much for your expertise and input.\n\nOn Mar 12, 2013, at 6:17 PM, jreback notifications@github.com wrote:\n\n> I mispoke a bit\n> \n> There is an object type, but you cannot store this in a table (you can store it in a fixed store, basically non-searchable node).\n> \n> The other thing with the cons of 2), you can simply use sub-nodes if you want, then the data is 'together',\n> then you don't even need a reference to it (thought I will still suggest one!) e.g.\n> \n> pseudo code here:\n> \n> store.append('df',df)\n> store.append('df/image',image)\n> store.append('df/spine',spine)\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14810432",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14810432",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14810432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODEwNDMy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-12T22:33:02Z",
    "updated_at": "2013-03-12T22:33:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "great..\n\nand the bottom could also be (to make your writing faster, assuming when you read an image/spine you read the entire one, e.g. you don't need to search on an image itself).\n\n```\nstore.append('df',df)\nstore.put('df/image',image)\nstore.put('df/spine',spine)\n```\n\nalso, this is obviously a parallizable problem (keep in mind that you CANNOT write in parallel), but you CAN read\n(if you need to write, then write to separate files)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14811709",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14811709",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14811709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODExNzA5",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-12T23:04:18Z",
    "updated_at": "2013-03-12T23:04:18Z",
    "author_association": "NONE",
    "body": "And one last question, what's the most expedient way to run the line\n\n`store.put('df/image',image)`\n\nif image is an ndarray? The call is currently telling me \n\n```\nException: cannot properly create the storer for: [_TYPE_MAP] [group->/data/m1/images (Group) '',value-><type 'numpy.ndarray'>,table->None,append->False,kwargs->{}]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14812095",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14812095",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14812095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODEyMDk1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-12T23:13:04Z",
    "updated_at": "2013-03-12T23:16:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "just wrap it with a DataFrame (its a 2d ndarray)\n`store.put('df/image',DataFrame(image) )`\n\n1-d use a Series\n3-d use a Panel\n4-d use Panel4D\ngt 4dims call me in the morning!\n\n```\nIn [42]: df.iloc[0]\nOut[42]: \nimage       [[0.60904, 0.0175226, 0.36146, 0.947978, 0.327...\nmouse_id                                               mouse1\nspecial                                                     0\nspine       [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, ...\nvelocity                                            0.9005659\nName: 0, dtype: object\n\nIn [43]: df.iloc[0]['image'].shape\nOut[43]: (80, 80)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14815242",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14815242",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14815242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODE1MjQy",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-13T00:42:30Z",
    "updated_at": "2013-03-13T00:42:30Z",
    "author_association": "NONE",
    "body": "And you can even do \n\n```\nimages = store.select(path_to_images_as_panel, columns=range(10,20)).values\n```\n\nand select out just the ones you'd like. Perfect. Thank you much.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14815420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14815420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14815420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODE1NDIw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-13T00:47:36Z",
    "updated_at": "2013-03-13T00:47:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "great...you are welcome\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/14816632",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-14816632",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 14816632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODE2NjMy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-13T01:28:36Z",
    "updated_at": "2013-03-13T01:28:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI...to select out the 'rows' of your image (and this will be very fast, done totally in-kernal in hdf5\n\n```\nimages = store.select(path_to_images_as_panel, start=10,stop=20).values\n```\n\nand you always have an index, so the following is the same as above\n\n```\nimages = store.select(path_to_images_as_panel, [Term('index>=10'),Term('index<20')] ).values\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15012857",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15012857",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15012857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDEyODU3",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-16T21:50:35Z",
    "updated_at": "2013-03-16T21:51:38Z",
    "author_association": "NONE",
    "body": "Re your comment:\n\n> 1) the PyTables Table object that HDFStore uses underlying, DOES support a pure 'object' type, but it is very \n> inefficient, as its basically a pickle of the data (in this case your spine/image fields), FYI, the 'mouse_id' is not 'object' \n> datatype as its a 'string' fields (and this is how its stored)\n\nThis seems like the most viable option to me at this point, after wrangling a bunch of strange data. \nThe loose-ends are becoming unmanageable, at least in the data organization sense. \nHow difficult would the following change you mentioned take? \n\n> This would require a code change to support the object type\n\nIf you point me to the location required for this support, it would be MUCH appreciated.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15013355",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15013355",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15013355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDEzMzU1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-16T22:27:53Z",
    "updated_at": "2013-03-16T22:27:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "unfortunately I don't believe tables will support an object type\nthey need apriori fixed types in order to support indexing\nbest to store a pointer ( eg a string or number ) to where your image/spline actually reside (which even could be another DB if u want)\n\nwhat is the data organization issue?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15015661",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15015661",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15015661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDE1NjYx",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-17T01:46:51Z",
    "updated_at": "2013-03-17T01:48:41Z",
    "author_association": "NONE",
    "body": "I'm a research scientist, and I'm trying to record the essential variables that I measure in a set of pilot experiments. I'm recording movies of an animal, and taking scalar measurements about the environment the animal is in, like temperature, humidity, etc. \n\nThe data is heterogeneous â€”Â for each frame of the video during the experiment, we also have a combination of scalars, arrays and strings that describe what occurred during that frame. Because these are pilot experiments, we don't necessarily know what is essential to measure yet. We need to be able to query over all of the scalar columns to do analysis, and we need to be able to append data.\n\nThe main problem as I see it, with respect to the current capabilities of HDFStore, is heterogeneous data. I need to be able to append and query the scalar data, but each row necessarily is associated with image data.\nI've written a bit of software to store the images separately, but I've not found a way to do queries in the kind of \"one-line\" way that store.select() allows you to do. I find that kind of simplicity _absolutely necessary_ for exploratory data analysis. \n\nIf you have a great way to organize pointers with some wrapper code so that I and my colleagues don't have to think about this kind of data scattering that's fine. The key point here, though, is reducing our mental workload, so that we can think more about the research question, and less about the data. \n\nOne thing to note, though with our heterogeneous data. If we store a column \"images\", that contains a 2D array, you can be guaranteed that every row that has an image column will have the same size 2D array. Does this uniformity help at all? I do wish that DataFrames would take advantage of this, so if I did \n\n```\ndf['images'].values\n```\n\nit would return a 3D numpy array, as opposed to an array of objects. Do you think that's a possibility?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15016217",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15016217",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15016217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDE2MjE3",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-17T02:43:27Z",
    "updated_at": "2013-03-17T02:45:12Z",
    "author_association": "NONE",
    "body": "It sounds like you have two issues: HDFStore support for storing object data\nin queryable tables, and a need to get work done right now, conveniently.\n\nLet me try and help with the latter, with an example of \"rolling-your-own\" via monkey-patching.\n\n``` python\ndef f(self):\n    import urllib\n\n    # do sql/http/whatever fetch here, based on row data\n    img_size = int((100+200*self['velocity']))\n    image = urllib.urlopen(\"http://placekitten.com/%s\" % img_size  ).read()\n\n    # can just return the data\n    # return image\n\n    # or even, have it display inline in IPython frontends\n    from IPython.display import Image\n    return Image(image,format='jpeg')\n\npd.Series.silvester=f\n# each row you pick is a series, which now has a `silvester()` method\ndf[df['velocity'] < 0.5].irow(0).silvester()\n```\n\n![meow](https://f.cloud.github.com/assets/1820866/267641/5ed8ae3c-8eac-11e2-9102-aa5d3ae467fe.png)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15016231",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15016231",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15016231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDE2MjMx",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-17T02:44:38Z",
    "updated_at": "2013-03-17T02:44:38Z",
    "author_association": "NONE",
    "body": "If there were a `placemouse.com` website, that would have been just too perfect.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15016268",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15016268",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15016268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDE2MjY4",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-17T02:48:31Z",
    "updated_at": "2013-03-17T02:50:45Z",
    "author_association": "NONE",
    "body": "That's brilliant. I had absolutely not thought of placing the method for retrieving the pointer in the array.\n\nDo you have a recommendation of how to pack this up so the query occurs out-of-core? I have dozens of gigabytes of _metadata_ alone.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15016308",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15016308",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15016308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDE2MzA4",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-17T02:53:10Z",
    "updated_at": "2013-03-17T02:56:10Z",
    "author_association": "NONE",
    "body": "Not sure what's \"in core\" here.\nYou can probably be up and running with mongodb within a couple of hours,\nif that's what you mean.\n\nOr just use the filesystem.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15016335",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15016335",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15016335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDE2MzM1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-17T02:56:04Z",
    "updated_at": "2013-03-17T02:56:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Try this out, this implements the solution that I pointed to above. Its pretty straightforward and should get you started. Let me know.\n\n```\nThe Store\n<class 'pandas.io.pytables.HDFStore'>\nFile path: my_mouse.h5\n/my_mouse                              frame_table  (typ->appendable,nrows->5,ncols->5,indexers->[index],dc->[image_loc,n,spine_loc,typ,velocity])\n/my_mouse/mouse/image/loc_1            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/image/loc_2            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/image/loc_3            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/image/loc_4            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/image/loc_5            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/spine/loc_1            frame        (shape->[80,1])                                                                               \n/my_mouse/mouse/spine/loc_2            frame        (shape->[80,1])                                                                               \n/my_mouse/mouse/spine/loc_3            frame        (shape->[80,1])                                                                               \n/my_mouse/mouse/spine/loc_4            frame        (shape->[80,1])                                                                               \n/my_mouse/mouse/spine/loc_5            frame        (shape->[80,1])                                                                                \n\nThe Query Results\n           image_loc  n          spine_loc    typ  velocity\n3  mouse/image/loc_3  3  mouse/spine/loc_3  mouse         6\n4  mouse/image/loc_4  4  mouse/spine/loc_4  mouse         8\n5  mouse/image/loc_5  5  mouse/spine/loc_5  mouse        10 \n\nNew Animals\nn=3,typ=mouse,velocity=6,image_loc=mouse/image/loc_3,spine_loc=mouse/spine/loc_3,image_data=(80, 80),spine_data=(80, 1)\nn=4,typ=mouse,velocity=8,image_loc=mouse/image/loc_4,spine_loc=mouse/spine/loc_4,image_data=(80, 80),spine_data=(80, 1)\nn=5,typ=mouse,velocity=10,image_loc=mouse/image/loc_5,spine_loc=mouse/spine/loc_5,image_data=(80, 80),spine_data=(80, 1)\n```\n\nHere's the script\n\n```\nimport numpy as np\nimport pandas as pd\n\nscalars = ['n','typ','velocity','image_loc','spine_loc']\n\nclass Animal(object):\n    \"\"\" generate a single frame of data for an experiment \"\"\"\n    typ = None\n\n    @classmethod\n    def create(cls, n):\n        \"\"\" create a new anmial \"\"\"\n        velocity = n*2\n        image_data    = pd.DataFrame(np.random.random((80,80)).astype('float32'))\n        spine_data    = pd.DataFrame(np.r_[0:80].astype('float32'))\n\n        return cls(n = n,\n                   velocity = velocity,\n                   image_data = image_data,\n                   spine_data = spine_data)\n\n    def __init__(self, **kwargs):\n        for k, v in kwargs.items():\n            setattr(self,k,v)\n\n        if not getattr(self,'image_loc',None):\n            self.image_loc = \"%s/image/loc_%s\" % (self.typ,self.n)\n\n        if not getattr(self,'spine_loc',None):\n            self.spine_loc = \"%s/spine/loc_%s\" % (self.typ,self.n)\n\n    def __str__(self):\n        return ','.join([ \"%s=%s\" % (s,getattr(self,s,None)) for s in scalars ] + \n                        [ \"image_data=%s\" % str(self.image_data.shape), \"spine_data=%s\" % str(self.spine_data.shape) ])\n\nclass Mouse(Animal):\n    typ = 'mouse'\n\nclass Animals(object):\n    \"\"\" hold a bunch of animals \"\"\"\n\n    def __init__(self, name=None):\n        self.data = []\n        self.name = name\n        self._store = None\n\n    def __iter__(self):\n        return iter(self.data)\n\n    def __len__(self):\n        return len(self.data)\n\n    def __str__(self):\n        return \"Animals [%s]\" % len(self)\n\n    def append(self, a):\n        if hasattr(a,'__iter__'):\n            for e in a:\n                self.data.append(e)\n        else:\n            self.data.append(a)\n        return self\n\n    def get_store(self):\n        \"\"\" create the store only when we ask for it \"\"\"\n        if self._store is None:\n            if self.name is None:\n                raise Exception(\"cannot create a store as name is None\")\n            self._store = pd.HDFStore('%s.h5' % self.name)\n        return self._store\n\n    def get_data(self):\n        \"\"\" return the data as a frame for my animals \"\"\"\n        d = dict()\n        for s in scalars:\n\n            series = dict()\n            for e in self:\n                series[e.n] = getattr(e,s,None)\n\n            d[s] = series\n\n        return pd.DataFrame(d)\n\n    def clear(self):\n        \"\"\" clear out the store \"\"\"\n        self.get_store().remove(self.name)\n\n    def image_loc(self, e):\n        return \"%s/%s\" % (self.name,e.image_loc)\n\n    def spine_loc(self, e):\n        return \"%s/%s\" % (self.name,e.spine_loc)\n\n    def store(self):\n        store = self.get_store()\n\n        # store my main data\n        store.append(self.name, self.get_data(), data_columns=True)\n\n        # store the image/spine\n        for e in self:\n            store.put(self.image_loc(e), e.image_data)\n            store.put(self.spine_loc(e), e.spine_data)\n\n        print \"The Store\"\n        print store, \"\\n\"\n        self.close()\n\n    def query(self, terms):\n        \"\"\" query on the scalars \"\"\"\n        store = self.get_store()\n\n        df = store.select(self.name,terms)\n        print \"The Query Results\"\n        print df, \"\\n\"\n\n        # create and return new animals\n        animals = Animals()\n        for i, r in df.iterrows():\n\n            # create a new animal and populate using the retrieved data\n            a = globals()[r['typ'].capitalize()](**r.to_dict())\n\n            # spine/image\n            a.image_data = store.get(self.image_loc(a))\n            a.spine_data = store.get(self.spine_loc(a))\n\n            animals.append(a)\n\n        self.close()\n        return animals\n\n    def close(self):\n        \"\"\" close the store \"\"\"\n        if self._store is not None:\n            try:\n                self._store.close()\n            except:\n                pass\n            self._store = None\n\n# create some animals\nanimals = Animals('my_mouse').append([ Mouse.create(i+1) for i in range(5) ])\n\n# clear the store\nanimals.clear()\n\n# store em\nanimals.store()\n\n# retreive based on some scalars\nnew_animals = animals.query([ pd.Term('velocity>4') ])\n\nprint \"New Animals\"\nfor a in new_animals:\n    print a\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15016361",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15016361",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15016361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDE2MzYx",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-17T02:59:12Z",
    "updated_at": "2013-03-17T02:59:12Z",
    "author_association": "NONE",
    "body": "Yep, you're a beast.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15016608",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15016608",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15016608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDE2NjA4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-17T03:27:40Z",
    "updated_at": "2013-03-17T03:27:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "To answer your last question, yes, if the images are all the same shape then this is the way to store them.\nCreate a panel (key is to make the appendable axes the minor_axis (or major_axis), then you\ncan just keep adding them on (you can actually append to both dimensions, but you don't need that here)\n\nCreating a panel (in the store method of Animals)\n\n```\nimage = pd.Panel(dict([ (e.n,e.image_data) for e in self ])).swapaxes('items','minor_axis')\nstore.append('%s/images' % self.name,image)\n```\n\nRetrieving the images (in the query method)\n\n```\nanimals.images = store.select('my_mouse/images', pd.Term(\"minor_axis\", '=', [ a.n for a in animals ]))\n```\n\nShowing the images Panel\n\n```\nThe Store\n<class 'pandas.io.pytables.HDFStore'>\nFile path: my_mouse.h5\n/my_mouse                              frame_table  (typ->appendable,nrows->5,ncols->5,indexers->[index],dc->[image_loc,n,spine_loc,typ,velocity])\n/my_mouse/images                       wide_table   (typ->appendable,nrows->400,ncols->80,indexers->[major_axis,minor_axis])                      \n/my_mouse/mouse/image/loc_1            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/image/loc_2            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/image/loc_3            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/image/loc_4            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/image/loc_5            frame        (shape->[80,80])                                                                              \n/my_mouse/mouse/spine/loc_1            frame        (shape->[80,1])                                                                               \n/my_mouse/mouse/spine/loc_2            frame        (shape->[80,1])                                                                               \n/my_mouse/mouse/spine/loc_3            frame        (shape->[80,1])                                                                               \n/my_mouse/mouse/spine/loc_4            frame        (shape->[80,1])                                                                               \n/my_mouse/mouse/spine/loc_5            frame        (shape->[80,1])                                                                                \n```\n\nThe selected panel (which corresponds to the mice we selected in this example\n\n```\n<class 'pandas.core.panel.Panel'>\nDimensions: 80 (items) x 80 (major_axis) x 3 (minor_axis)\nItems axis: 0 to 79\nMajor_axis axis: 0 to 79\nMinor_axis axis: 3 to 5\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15182014",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3032#issuecomment-15182014",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3032",
    "id": 15182014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTgyMDE0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-20T15:20:03Z",
    "updated_at": "2013-03-20T15:20:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexbw close this?\n"
  }
]
