[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441828828",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-441828828",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 441828828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTgyODgyOA==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-26T22:42:05Z",
    "updated_at": "2018-11-26T23:13:44Z",
    "author_association": "NONE",
    "body": "Hello @qwhelan! Thanks for updating the PR.\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/binary_ops.py`](https://github.com/qwhelan/pandas/blob/be0b0cdedb7d7063f29eeebeb084048612eda60d/asv_bench/benchmarks/binary_ops.py) !\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/frame_methods.py`](https://github.com/qwhelan/pandas/blob/be0b0cdedb7d7063f29eeebeb084048612eda60d/asv_bench/benchmarks/frame_methods.py) !\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/plotting.py`](https://github.com/qwhelan/pandas/blob/be0b0cdedb7d7063f29eeebeb084048612eda60d/asv_bench/benchmarks/plotting.py) !\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/reshape.py`](https://github.com/qwhelan/pandas/blob/be0b0cdedb7d7063f29eeebeb084048612eda60d/asv_bench/benchmarks/reshape.py) !\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/rolling.py`](https://github.com/qwhelan/pandas/blob/be0b0cdedb7d7063f29eeebeb084048612eda60d/asv_bench/benchmarks/rolling.py) !\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/stat_ops.py`](https://github.com/qwhelan/pandas/blob/be0b0cdedb7d7063f29eeebeb084048612eda60d/asv_bench/benchmarks/stat_ops.py) !\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/strings.py`](https://github.com/qwhelan/pandas/blob/be0b0cdedb7d7063f29eeebeb084048612eda60d/asv_bench/benchmarks/strings.py) !\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/timedelta.py`](https://github.com/qwhelan/pandas/blob/be0b0cdedb7d7063f29eeebeb084048612eda60d/asv_bench/benchmarks/timedelta.py) !\n\n\n\n##### Comment last updated on November 26, 2018 at 23:13 Hours UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441837946",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-441837946",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 441837946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTgzNzk0Ng==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-26T23:19:35Z",
    "updated_at": "2018-11-26T23:19:35Z",
    "author_association": "MEMBER",
    "body": "Could you show the output of `asv dev` for these added benchmarks?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441842650",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-441842650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 441842650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTg0MjY1MA==",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-26T23:41:51Z",
    "updated_at": "2018-11-26T23:41:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mroeschke Sure, `asv run` is still doing the baseline run but here's the `asv dev` output with some of the irrelevant stuff excised. Times are very noisy due to a bug with asv on windows:\r\n```\r\n$ asv dev -b dot -b plot -b rename -b Cut -b Expanding -b EWM -b Correlation -b Covariance -b Methods -b Timedelta\r\n· Discovering benchmarks\r\n· Running 89 total benchmarks (1 commits * 1 environments * 89 benchmarks)\r\n[  0.00%] ·· Benchmarking existing-py_home_chris_anaconda3_bin_python\r\n[  0.56%] ··· binary_ops.Ops2.time_frame_dot                                                                                                                         125±0ms\r\n[  1.12%] ··· binary_ops.Ops2.time_frame_series_dot                                                                                                                    0±0ns\r\n[  1.69%] ··· binary_ops.Ops2.time_series_dot                                                                                                                          0±0ns\r\n[  2.25%] ··· frame_methods.Rename.time_dict_rename_both_axes                                                                                                        734±0ms\r\n[  2.81%] ··· frame_methods.Rename.time_rename_axis0                                                                                                                 531±0ms\r\n[  3.37%] ··· frame_methods.Rename.time_rename_axis1                                                                                                                 500±0ms\r\n[  3.93%] ··· frame_methods.Rename.time_rename_both_axes                                                                                                             719±0ms\r\n[  4.49%] ··· frame_methods.Rename.time_rename_single                                                                                                                531±0ms\r\n[ 10.11%] ··· plotting.FramePlotting.time_frame_plot                                                                                                                      ok\r\n[ 10.11%] ··· ========= =========\r\n                 kind\r\n              --------- ---------\r\n                 line    594±0ms\r\n                 bar     609±0ms\r\n                 area    1.11±0s\r\n                 barh    625±0ms\r\n                 hist    828±0ms\r\n                 kde     2.03±0s\r\n                 pie     547±0ms\r\n               scatter   406±0ms\r\n                hexbin   422±0ms\r\n              ========= =========\r\n\r\n[ 10.67%] ··· plotting.Misc.time_plot_andrews_curves                                                                                                                 1.64±0s\r\n[ 11.24%] ··· plotting.SeriesPlotting.time_series_plot                                                                                                                    ok\r\n[ 11.24%] ··· ====== =========\r\n               kind\r\n              ------ ---------\r\n               line   734±0ms\r\n               bar    625±0ms\r\n               area   1.09±0s\r\n               barh   609±0ms\r\n               hist   750±0ms\r\n               kde    1.98±0s\r\n               pie    500±0ms\r\n              ====== =========\r\n\r\n[ 11.80%] ··· plotting.TimeseriesPlotting.time_plot_irregular                                                                                                        406±0ms\r\n[ 12.36%] ··· plotting.TimeseriesPlotting.time_plot_regular                                                                                                          438±0ms\r\n[ 12.92%] ··· plotting.TimeseriesPlotting.time_plot_regular_compat                                                                                                   406±0ms\r\n[ 13.48%] ··· replace.Convert.time_replace                                                                                                                                ok\r\n[ 13.48%] ··· ============= =========== ===========\r\n              --                  replace_data\r\n              ------------- -----------------------\r\n               constructor   Timestamp   Timedelta\r\n              ============= =========== ===========\r\n                DataFrame       n/a       547±0ms\r\n                  Series        n/a       547±0ms\r\n              ============= =========== ===========\r\n\r\n[ 14.04%] ··· reshape.Cut.time_cut_float                                                                                                                                  ok\r\n[ 14.04%] ··· ====== ==========\r\n               bins\r\n              ------ ----------\r\n                4     78.1±0ms\r\n                10    78.1±0ms\r\n               1000   203±0ms\r\n              ====== ==========\r\n\r\n[ 14.61%] ··· reshape.Cut.time_cut_int                                                                                                                                    ok\r\n[ 14.61%] ··· ====== ==========\r\n               bins\r\n              ------ ----------\r\n                4     93.8±0ms\r\n                10    78.1±0ms\r\n               1000   141±0ms\r\n              ====== ==========\r\n\r\n[ 15.17%] ··· reshape.Cut.time_qcut_float                                                                                                                                 ok\r\n[ 15.17%] ··· ====== =========\r\n               bins\r\n              ------ ---------\r\n                4     141±0ms\r\n                10    141±0ms\r\n               1000   266±0ms\r\n              ====== =========\r\n\r\n[ 15.73%] ··· reshape.Cut.time_qcut_int                                                                                                                                   ok\r\n[ 15.73%] ··· ====== ==========\r\n               bins\r\n              ------ ----------\r\n                4     109±0ms\r\n                10    93.8±0ms\r\n               1000   172±0ms\r\n              ====== ==========\r\n\r\n[ 16.29%] ··· rolling.EWMMethods.time_ewm                                                                                                                                 ok\r\n[ 16.29%] ··· ============ ======== ============ =========== ============== =============\r\n              --                                        dtype / method\r\n              --------------------- -----------------------------------------------------\r\n               contructor   window   int / mean   int / std   float / mean   float / std\r\n              ============ ======== ============ =========== ============== =============\r\n               DataFrame      10      31.2±0ms     46.9±0ms     31.2±0ms       31.2±0ms\r\n               DataFrame     1000     31.2±0ms     46.9±0ms     31.2±0ms       31.2±0ms\r\n                 Series       10      31.2±0ms     31.2±0ms     15.6±0ms       31.2±0ms\r\n                 Series      1000     46.9±0ms     46.9±0ms     15.6±0ms       46.9±0ms\r\n              ============ ======== ============ =========== ============== =============\r\n\r\n[ 16.85%] ··· rolling.ExpandingMethods.time_expanding                                                                                                                     ok\r\n[ 16.85%] ··· ============ ======== ========= ========== ========== ========== ========== ========== ========== ========== ==========\r\n              --                                                                  dtype\r\n              --------------------- -------------------------------------------------------------------------------------------------\r\n               contructor   window    median     mean       max        min        std       count       skew       kurt       sum\r\n              ============ ======== ========= ========== ========== ========== ========== ========== ========== ========== ==========\r\n               DataFrame     int     266±0ms   15.6±0ms   31.2±0ms   15.6±0ms   15.6±0ms   46.9±0ms   15.6±0ms   15.6±0ms   15.6±0ms\r\n               DataFrame    float    281±0ms   15.6±0ms   31.2±0ms   15.6±0ms   15.6±0ms   31.2±0ms   15.6±0ms   15.6±0ms   15.6±0ms\r\n                 Series      int     234±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   15.6±0ms\r\n                 Series     float    281±0ms   15.6±0ms   31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   15.6±0ms\r\n              ============ ======== ========= ========== ========== ========== ========== ========== ========== ========== ==========\r\n\r\n[ 17.42%] ··· rolling.Methods.time_rolling                                                                                                                                ok\r\n[ 17.42%] ··· ============ ======== ======= ========== ========== ========== ========== ========== ========== ========== ========== ==========\r\n              --                                                                          method\r\n              ----------------------------- --------------------------------------------------------------------------------------------------\r\n               contructor   window   dtype    median      mean       max        min        std       count       skew       kurt       sum\r\n              ============ ======== ======= ========== ========== ========== ========== ========== ========== ========== ========== ==========\r\n               DataFrame      10      int    78.1±0ms   15.6±0ms   31.2±0ms   15.6±0ms   15.6±0ms   31.2±0ms   15.6±0ms   31.2±0ms   15.6±0ms\r\n               DataFrame      10     float   78.1±0ms   15.6±0ms   15.6±0ms   15.6±0ms   15.6±0ms   31.2±0ms   15.6±0ms   15.6±0ms   15.6±0ms\r\n               DataFrame     1000     int    141±0ms    15.6±0ms   15.6±0ms   15.6±0ms   15.6±0ms   15.6±0ms   15.6±0ms   15.6±0ms   15.6±0ms\r\n               DataFrame     1000    float   188±0ms    31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms   31.2±0ms   15.6±0ms   15.6±0ms   15.6±0ms\r\n                 Series       10      int    109±0ms    15.6±0ms   31.2±0ms   31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms   15.6±0ms   15.6±0ms\r\n                 Series       10     float   93.8±0ms   15.6±0ms   31.2±0ms   15.6±0ms   31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms   15.6±0ms\r\n                 Series      1000     int    172±0ms    31.2±0ms   31.2±0ms   31.2±0ms   46.9±0ms   31.2±0ms   31.2±0ms   15.6±0ms   31.2±0ms\r\n                 Series      1000    float   156±0ms    15.6±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms\r\n              ============ ======== ======= ========== ========== ========== ========== ========== ========== ========== ========== ==========\r\n\r\n[ 17.98%] ··· rolling.VariableWindowMethods.time_rolling                                                                                                                  ok\r\n[ 17.98%] ··· ============ ======== ======= ========== ========== ========== ========== ========== ========== ========== ========== ==========\r\n              --                                                                          method\r\n              ----------------------------- --------------------------------------------------------------------------------------------------\r\n               contructor   window   dtype    median      mean       max        min        std       count       skew       kurt       sum\r\n              ============ ======== ======= ========== ========== ========== ========== ========== ========== ========== ========== ==========\r\n               DataFrame     50s      int    78.1±0ms   15.6±0ms   62.5±0ms   31.2±0ms   31.2±0ms   31.2±0ms   46.9±0ms   31.2±0ms   15.6±0ms\r\n               DataFrame     50s     float   78.1±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms    0±0ns     46.9±0ms   15.6±0ms\r\n               DataFrame      1h      int    156±0ms    15.6±0ms   46.9±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms\r\n               DataFrame      1h     float   141±0ms    15.6±0ms   15.6±0ms   31.2±0ms   31.2±0ms   46.9±0ms   31.2±0ms   15.6±0ms   15.6±0ms\r\n               DataFrame      1d      int    250±0ms    31.2±0ms   31.2±0ms   46.9±0ms   15.6±0ms   31.2±0ms   15.6±0ms   15.6±0ms   31.2±0ms\r\n               DataFrame      1d     float   234±0ms    15.6±0ms   31.2±0ms   15.6±0ms   15.6±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms\r\n                 Series      50s      int    93.8±0ms   15.6±0ms   31.2±0ms   31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms   15.6±0ms   15.6±0ms\r\n                 Series      50s     float   78.1±0ms   15.6±0ms   31.2±0ms   31.2±0ms   31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms   31.2±0ms\r\n                 Series       1h      int    156±0ms    15.6±0ms   15.6±0ms   15.6±0ms   31.2±0ms   15.6±0ms   15.6±0ms   15.6±0ms   31.2±0ms\r\n                 Series       1h     float   156±0ms    15.6±0ms   46.9±0ms   31.2±0ms   31.2±0ms   31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms\r\n                 Series       1d      int    188±0ms    31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms   15.6±0ms   31.2±0ms   31.2±0ms   31.2±0ms\r\n                 Series       1d     float   266±0ms    15.6±0ms   31.2±0ms   31.2±0ms   31.2±0ms   31.2±0ms   46.9±0ms   46.9±0ms   31.2±0ms\r\n              ============ ======== ======= ========== ========== ========== ========== ========== ========== ========== ========== ==========\r\n\r\n[ 18.54%] ··· stat_ops.Correlation.time_corr                                                                                                                              ok\r\n[ 18.54%] ··· ========== ========== ==========\r\n              --             use_bottleneck\r\n              ---------- ---------------------\r\n                method      True      False\r\n              ========== ========== ==========\r\n               spearman   203±0ms    203±0ms\r\n               kendall    922±0ms    938±0ms\r\n               pearson    15.6±0ms   15.6±0ms\r\n              ========== ========== ==========\r\n\r\n[ 19.10%] ··· stat_ops.Correlation.time_corr_series                                                                                                                       ok\r\n[ 19.10%] ··· ========== ========== ==========\r\n              --             use_bottleneck\r\n              ---------- ---------------------\r\n                method      True      False\r\n              ========== ========== ==========\r\n               spearman   484±0ms    516±0ms\r\n               kendall    484±0ms    500±0ms\r\n               pearson    15.6±0ms   15.6±0ms\r\n              ========== ========== ==========\r\n\r\n[ 19.66%] ··· stat_ops.Covariance.time_cov_series                                                                                                                         ok\r\n[ 19.66%] ··· ================ ==========\r\n               use_bottleneck\r\n              ---------------- ----------\r\n                    True        15.6±0ms\r\n                   False        46.9±0ms\r\n              ================ ==========\r\n\r\n[ 20.22%] ··· strings.Methods.time_center                                                                                                                            125±0ms\r\n[ 20.79%] ··· strings.Methods.time_count                                                                                                                             109±0ms\r\n[ 21.35%] ··· strings.Methods.time_endswith                                                                                                                         46.9±0ms\r\n[ 21.91%] ··· strings.Methods.time_extract                                                                                                                           391±0ms\r\n[ 22.47%] ··· strings.Methods.time_find                                                                                                                             93.8±0ms\r\n[ 23.03%] ··· strings.Methods.time_findall                                                                                                                           219±0ms\r\n[ 23.60%] ··· strings.Methods.time_get                                                                                                                              78.1±0ms\r\n[ 24.72%] ··· strings.Methods.time_join                                                                                                                              125±0ms\r\n[ 25.28%] ··· strings.Methods.time_len                                                                                                                              78.1±0ms\r\n[ 25.84%] ··· strings.Methods.time_lower                                                                                                                            62.5±0ms\r\n[ 26.40%] ··· strings.Methods.time_lstrip                                                                                                                           46.9±0ms\r\n[ 26.97%] ··· strings.Methods.time_match                                                                                                                             109±0ms\r\n[ 27.53%] ··· strings.Methods.time_normalize                                                                                                                        78.1±0ms\r\n[ 28.09%] ··· strings.Methods.time_pad                                                                                                                               125±0ms\r\n[ 28.65%] ··· strings.Methods.time_partition                                                                                                                         344±0ms\r\n[ 29.21%] ··· strings.Methods.time_replace                                                                                                                          62.5±0ms\r\n[ 29.78%] ··· strings.Methods.time_rfind                                                                                                                             125±0ms\r\n[ 30.90%] ··· strings.Methods.time_rpartition                                                                                                                        344±0ms\r\n[ 31.46%] ··· strings.Methods.time_rstrip                                                                                                                           46.9±0ms\r\n[ 32.02%] ··· strings.Methods.time_slice                                                                                                                            62.5±0ms\r\n[ 32.58%] ··· strings.Methods.time_startswith                                                                                                                       62.5±0ms\r\n[ 33.15%] ··· strings.Methods.time_strip                                                                                                                            46.9±0ms\r\n[ 33.71%] ··· strings.Methods.time_title                                                                                                                            78.1±0ms\r\n[ 34.27%] ··· strings.Methods.time_translate                                                                                                                         172±0ms\r\n[ 34.83%] ··· strings.Methods.time_upper                                                                                                                            62.5±0ms\r\n[ 35.39%] ··· strings.Methods.time_wrap                                                                                                                              1.06±0s\r\n[ 35.96%] ··· strings.Methods.time_zfill                                                                                                                            46.9±0ms\r\n[ 36.52%] ··· timedelta.TimedeltaConstructor.time_from_components                                                                                                   15.6±0ms\r\n[ 37.08%] ··· timedelta.TimedeltaConstructor.time_from_datetime_timedelta                                                                                              0±0ns\r\n[ 37.64%] ··· timedelta.TimedeltaConstructor.time_from_int                                                                                                             0±0ns\r\n[ 38.20%] ··· timedelta.TimedeltaConstructor.time_from_iso_format                                                                                                      0±0ns\r\n[ 38.76%] ··· timedelta.TimedeltaConstructor.time_from_missing                                                                                                         0±0ns\r\n[ 39.33%] ··· timedelta.TimedeltaConstructor.time_from_np_timedelta                                                                                                    0±0ns\r\n[ 39.89%] ··· timedelta.TimedeltaConstructor.time_from_string                                                                                                          0±0ns\r\n[ 40.45%] ··· timedelta.TimedeltaConstructor.time_from_unit                                                                                                            0±0ns\r\n[ 41.01%] ··· timedelta.TimedeltaIndexing.time_align                                                                                                                15.6±0ms\r\n[ 41.57%] ··· timedelta.TimedeltaIndexing.time_get_loc                                                                                                                 0±0ns\r\n[ 42.13%] ··· timedelta.TimedeltaIndexing.time_intersection                                                                                                         15.6±0ms\r\n[ 42.70%] ··· timedelta.TimedeltaIndexing.time_series_loc                                                                                                           15.6±0ms\r\n[ 43.26%] ··· timedelta.TimedeltaIndexing.time_shallow_copy                                                                                                            0±0ns\r\n[ 43.82%] ··· timedelta.TimedeltaIndexing.time_shape                                                                                                                   0±0ns\r\n[ 44.38%] ··· timedelta.TimedeltaIndexing.time_union                                                                                                                   0±0ns\r\n[ 44.94%] ··· timedelta.TimedeltaIndexing.time_unique                                                                                                                  0±0ns\r\n[ 45.51%] ··· timedelta.TimedeltaOps.time_add_td_ts                                                                                                                 46.9±0ms\r\n[ 46.07%] ··· timedelta.ToTimedelta.time_convert_int                                                                                                                   0±0ns\r\n[ 46.63%] ··· timedelta.ToTimedelta.time_convert_string_days                                                                                                        31.2±0ms\r\n[ 47.19%] ··· timedelta.ToTimedelta.time_convert_string_seconds                                                                                                     31.2±0ms\r\n[ 47.75%] ··· timedelta.ToTimedeltaErrors.time_convert                                                                                                                    ok\r\n[ 47.75%] ··· ======== ==========\r\n               errors\r\n              -------- ----------\r\n               coerce   109±0ms\r\n               ignore   93.8±0ms\r\n              ======== ==========\r\n\r\n[ 48.31%] ··· Setting up timedelta.py:82                                                                                                                                  ok\r\n[ 48.31%] ··· timedelta.TimedeltaProperties.time_timedelta_days                                                                                                        0±0ns\r\n[ 48.88%] ··· timedelta.TimedeltaProperties.time_timedelta_microseconds                                                                                                0±0ns\r\n[ 49.44%] ··· timedelta.TimedeltaProperties.time_timedelta_nanoseconds                                                                                                 0±0ns\r\n[ 50.00%] ··· timedelta.TimedeltaProperties.time_timedelta_seconds                                                                                                     0±0ns\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441854824",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-441854824",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 441854824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTg1NDgyNA==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-11-27T00:44:14Z",
    "updated_at": "2018-11-27T21:49:50Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23935?src=pr&el=h1) Report\n> Merging [#23935](https://codecov.io/gh/pandas-dev/pandas/pull/23935?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/ee283faee006abf5b879d37fe17c2db4e0fa51fd?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/23935/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/23935?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master   #23935   +/-   ##\n=======================================\n  Coverage   92.31%   92.31%           \n=======================================\n  Files         161      161           \n  Lines       51471    51471           \n=======================================\n  Hits        47515    47515           \n  Misses       3956     3956\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.7% <ø> (ø)` | :arrow_up: |\n| #single | `42.43% <ø> (ø)` | :arrow_up: |\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23935?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23935?src=pr&el=footer). Last update [ee283fa...9b1a80f](https://codecov.io/gh/pandas-dev/pandas/pull/23935?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441859118",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-441859118",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 441859118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTg1OTExOA==",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T01:07:37Z",
    "updated_at": "2018-11-27T01:07:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mroeschke Nothing too shocking, but a reasonable fraction are demonstrating small slowdowns compared to `v0.20.0`:\r\n```\r\n       before           after         ratio\r\n     [f6ee9acd]       [b7294dd3]\r\n-      6.69±0.4ms      5.77±0.05ms     0.86  rolling.ExpandingMethods.time_expanding('Series', 'int', 'min')\r\n-      6.78±0.3ms      5.79±0.02ms     0.85  rolling.ExpandingMethods.time_expanding('Series', 'int', 'max')\r\n-      14.8±0.2ms       12.1±0.4ms     0.81  rolling.ExpandingMethods.time_expanding('Series', 'int', 'count')\r\n-     1.60±0.02μs          915±2ns     0.57  timedelta.TimedeltaIndexing.time_shape\r\n       before           after         ratio\r\n     [f6ee9acd]       [b7294dd3]\r\n+     10.3±0.03μs      20.8±0.05μs     2.02  timedelta.TimedeltaIndexing.time_shallow_copy\r\n+       183±0.7μs          342±1μs     1.87  timedelta.TimedeltaIndexing.time_unique\r\n+     17.1±0.02ms      30.2±0.05ms     1.76  rolling.EWMMethods.time_ewm('DataFrame', 1000, 'float', 'std')\r\n+     17.1±0.04ms      30.2±0.05ms     1.76  rolling.EWMMethods.time_ewm('DataFrame', 10, 'float', 'std')\r\n+      17.3±0.1ms       30.4±0.2ms     1.75  rolling.EWMMethods.time_ewm('DataFrame', 1000, 'int', 'std')\r\n+     17.4±0.08ms       30.3±0.2ms     1.75  rolling.EWMMethods.time_ewm('DataFrame', 10, 'int', 'std')\r\n+      21.4±0.1ms       33.3±0.2ms     1.56  rolling.EWMMethods.time_ewm('Series', 10, 'float', 'std')\r\n+     21.5±0.08ms       33.2±0.1ms     1.55  rolling.EWMMethods.time_ewm('Series', 10, 'int', 'std')\r\n+      21.4±0.1ms       33.0±0.2ms     1.55  rolling.EWMMethods.time_ewm('Series', 1000, 'float', 'std')\r\n+      21.7±0.2ms       33.4±0.2ms     1.54  rolling.EWMMethods.time_ewm('Series', 1000, 'int', 'std')\r\n+         257±6ms          368±3ms     1.43  reshape.Cut.time_cut_float(4)\r\n+        382±20ms         532±20ms     1.39  reshape.Cut.time_qcut_int(4)\r\n+      58.1±0.3ms       80.3±0.3ms     1.38  strings.Methods.time_get\r\n+        394±30ms         536±30ms     1.36  reshape.Cut.time_qcut_int(10)\r\n+     16.3±0.03μs      22.2±0.08μs     1.36  timedelta.TimedeltaIndexing.time_get_loc\r\n+         574±1μs          751±2μs     1.31  timedelta.TimedeltaIndexing.time_union\r\n+      1.08±0.01s       1.41±0.09s     1.30  plotting.SeriesPlotting.time_series_plot('line')\r\n+         247±1μs          319±2μs     1.29  timedelta.TimedeltaIndexing.time_intersection\r\n+         333±1ms          423±1ms     1.27  strings.Methods.time_rpartition\r\n+         338±2ms          425±1ms     1.26  strings.Methods.time_partition\r\n+       246±0.6μs        302±0.5μs     1.22  timedelta.ToTimedelta.time_convert_int\r\n+        589±20ms         711±30ms     1.21  reshape.Cut.time_qcut_float(4)\r\n+      93.1±0.3μs        110±0.5μs     1.18  binary_ops.Ops2.time_series_dot\r\n+         369±1μs        428±0.8μs     1.16  stat_ops.Correlation.time_corr_series('pearson', True)\r\n+         370±1μs        428±0.7μs     1.16  stat_ops.Correlation.time_corr_series('pearson', False)\r\n+     1.59±0.01ms      1.82±0.01ms     1.15  timedelta.TimedeltaIndexing.time_align\r\n+       153±0.3ms        175±0.2ms     1.14  stat_ops.Correlation.time_corr('spearman', True)\r\n+       153±0.1ms        175±0.1ms     1.14  stat_ops.Correlation.time_corr('spearman', False)\r\n+     2.15±0.02ms      2.43±0.02ms     1.13  rolling.ExpandingMethods.time_expanding('DataFrame', 'float', 'sum')\r\n+      1.30±0.02s       1.44±0.03s     1.11  reshape.Cut.time_qcut_int(1000)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441861756",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-441861756",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 441861756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTg2MTc1Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T01:20:53Z",
    "updated_at": "2018-11-27T01:20:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "look ok to me. @topper-123 if you have any comments.\r\n\r\n@mroeschke feel free to merge when satisfied."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442213822",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-442213822",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 442213822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjIxMzgyMg==",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T20:56:08Z",
    "updated_at": "2018-11-27T20:56:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mroeschke And the `asv dev` output for the timedelta/datetime cut benchmarks:\r\n```\r\n$ asv dev -b cut_timedelta -b cut_datetime\r\n· Discovering benchmarks\r\n· Running 4 total benchmarks (1 commits * 1 environments * 4 benchmarks)\r\n[  0.00%] ·· Benchmarking existing-py_home_chris_anaconda3_bin_python\r\n[ 12.50%] ··· reshape.Cut.time_cut_datetime                                                                                                                               ok\r\n[ 12.50%] ··· ====== ==========\r\n               bins\r\n              ------ ----------\r\n                4     15.6±0ms\r\n                10     0±0ns\r\n               1000   46.9±0ms\r\n              ====== ==========\r\n\r\n[ 25.00%] ··· reshape.Cut.time_cut_timedelta                                                                                                                              ok\r\n[ 25.00%] ··· ====== ==========\r\n               bins\r\n              ------ ----------\r\n                4     15.6±0ms\r\n                10    15.6±0ms\r\n               1000   46.9±0ms\r\n              ====== ==========\r\n\r\n[ 37.50%] ··· reshape.Cut.time_qcut_datetime                                                                                                                              ok\r\n[ 37.50%] ··· ====== ==========\r\n               bins\r\n              ------ ----------\r\n                4     31.2±0ms\r\n                10    15.6±0ms\r\n               1000   46.9±0ms\r\n              ====== ==========\r\n\r\n[ 50.00%] ··· reshape.Cut.time_qcut_timedelta                                                                                                                             ok\r\n[ 50.00%] ··· ====== ==========\r\n               bins\r\n              ------ ----------\r\n                4      0±0ns\r\n                10    15.6±0ms\r\n               1000   62.5±0ms\r\n              ====== ==========\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442242043",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-442242043",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 442242043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI0MjA0Mw==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T22:27:55Z",
    "updated_at": "2018-11-27T22:27:55Z",
    "author_association": "MEMBER",
    "body": "Great thanks @qwhelan! More benchmarks are always appreciated. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442255515",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-442255515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 442255515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI1NTUxNQ==",
    "user": {
      "login": "topper-123",
      "id": 26364415,
      "node_id": "MDQ6VXNlcjI2MzY0NDE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26364415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/topper-123",
      "html_url": "https://github.com/topper-123",
      "followers_url": "https://api.github.com/users/topper-123/followers",
      "following_url": "https://api.github.com/users/topper-123/following{/other_user}",
      "gists_url": "https://api.github.com/users/topper-123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/topper-123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/topper-123/subscriptions",
      "organizations_url": "https://api.github.com/users/topper-123/orgs",
      "repos_url": "https://api.github.com/users/topper-123/repos",
      "events_url": "https://api.github.com/users/topper-123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/topper-123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T23:17:23Z",
    "updated_at": "2018-11-27T23:17:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Look good. @qwhelan , you mention \r\n\r\n> Times are very noisy due to a bug with asv on windows:\r\n\r\nI'm working on windows and experience very uneven results when running ASVs and I actually have more trust in doing timeit manually, which is a bit sad. Got any pointers on this bug? Can't find anything on the ASV Github issue list."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442257609",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-442257609",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 442257609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI1NzYwOQ==",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T23:25:56Z",
    "updated_at": "2018-11-27T23:25:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@topper-123 It's pretty simple - `asv` uses `time.time()`, which has a resolution of `15.6 ms` on Windows (with the upside of being process time instead of wall time). The default target runtime is `10 ms`, which causes some fun quantization noise as it is less than the clock resolution. Either target runtime needs to be increased by a couple orders of magnitude, or `asv` needs to use wall time for faster tests.\r\n\r\nI've been punting on opening a PR on this as I'm waiting for comments on the one I already have open, but I have a small notebook demonstrating the quantization I threw together before I went on vacation. I'll try to post it later today."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442275713",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23935#issuecomment-442275713",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23935",
    "id": 442275713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI3NTcxMw==",
    "user": {
      "login": "qwhelan",
      "id": 440095,
      "node_id": "MDQ6VXNlcjQ0MDA5NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwhelan",
      "html_url": "https://github.com/qwhelan",
      "followers_url": "https://api.github.com/users/qwhelan/followers",
      "following_url": "https://api.github.com/users/qwhelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwhelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwhelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwhelan/subscriptions",
      "organizations_url": "https://api.github.com/users/qwhelan/orgs",
      "repos_url": "https://api.github.com/users/qwhelan/repos",
      "events_url": "https://api.github.com/users/qwhelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwhelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T00:48:37Z",
    "updated_at": "2018-11-28T00:48:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Opened https://github.com/airspeed-velocity/asv/issues/775 for anyone interested in the `asv` on Windows issue I referenced"
  }
]
