[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20035405",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-20035405",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 20035405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDM1NDA1",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-26T09:20:15Z",
    "updated_at": "2013-06-26T09:20:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@trottier the bundled ujson is a custom modified fork to add built-in support for encoding and decoding pandas objects at the C-level (better performance), so it's not a simple drop-in. IIRC standard ujson is also significantly faster than simplejson.\n\nThat said though I do wonder if this could be fixed. It seems to handle very large numbers pretty well, and a very brief look at the code suggests it just reverts to `sprintf` if the value is above a threshold, I wonder if something similar could be done for very small values. I'm not in a position to play with this now but I'll have a deeper look when I get some time.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20064106",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-20064106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 20064106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDY0MTA2",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-26T17:11:23Z",
    "updated_at": "2013-07-16T15:41:20Z",
    "author_association": "NONE",
    "body": "ujson knows how to deal with numpy array directly, which meshes well\nwith pandas' underlying use of them.\nsimplejson (or the stdlib json, same thing) does not. crudely:\n\n``` python\nIn [16]: import ujson\n    ...: import simplejson\n    ...: a=np.arange(10000,dtype='f')\n    ...: %timeit ujson.dumps(a)\n    ...: try:\n    ...:      simplejson.dumps(a)\n    ...: except:\n    ...:      print(\"well, no.\")\n    ...: %timeit simplejson.dumps(a.tolist())\n1000 loops, best of 3: 967 Âµs per loop\nwell, no.\n100 loops, best of 3: 4 ms per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20086726",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-20086726",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 20086726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDg2NzI2",
    "user": {
      "login": "trottier",
      "id": 3505485,
      "node_id": "MDQ6VXNlcjM1MDU0ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3505485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trottier",
      "html_url": "https://github.com/trottier",
      "followers_url": "https://api.github.com/users/trottier/followers",
      "following_url": "https://api.github.com/users/trottier/following{/other_user}",
      "gists_url": "https://api.github.com/users/trottier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trottier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trottier/subscriptions",
      "organizations_url": "https://api.github.com/users/trottier/orgs",
      "repos_url": "https://api.github.com/users/trottier/repos",
      "events_url": "https://api.github.com/users/trottier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trottier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-26T23:08:19Z",
    "updated_at": "2013-06-27T00:14:40Z",
    "author_association": "NONE",
    "body": "Interesting -- I didn't know that ujson had been modified, etc. Sounds like it would be simpler to fix ujson than switch to something else. Regardless, that ujson handles floating point properly is critical for an application like pandas.\n\nujson doesn't really handle very large numbers all that well: \n\n```\n>>> ujson.dumps(1e20)\n'1.000000000000000e+20'\n>>> simplejson.dumps(1e20)\n'1e+20'\n>>>\n```\n\n... in its representation it implies precision that isn't there. Perhaps this is because it doesn't use \"precision\" properly:\n\n```\n>>> ujson.dumps(1e20, double_precision=1)\n'1.000000000000000e+20' # should be '1.0e20'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20114000",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-20114000",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 20114000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTE0MDAw",
    "user": {
      "login": "dieterv77",
      "id": 453086,
      "node_id": "MDQ6VXNlcjQ1MzA4Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/453086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dieterv77",
      "html_url": "https://github.com/dieterv77",
      "followers_url": "https://api.github.com/users/dieterv77/followers",
      "following_url": "https://api.github.com/users/dieterv77/following{/other_user}",
      "gists_url": "https://api.github.com/users/dieterv77/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dieterv77/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dieterv77/subscriptions",
      "organizations_url": "https://api.github.com/users/dieterv77/orgs",
      "repos_url": "https://api.github.com/users/dieterv77/repos",
      "events_url": "https://api.github.com/users/dieterv77/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dieterv77/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-27T12:11:12Z",
    "updated_at": "2013-06-27T12:11:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just to provide a little more color on this:\nCurrently, ultrajson will use sprintf(\"%.15e\") to print values whose absolute value exceeds 1e16 - 1.  In that case, the double_precision argument is unused.\n\nI also created a branch where i did the same thing for values below 1e-16 (https://github.com/dieterv77/ultrajson/commit/17d97057953730b6acd9b73d487228618f6508a8)\nThis way you get\nIn [3]: ujson.dumps(1e-40)\nOut[3]: '9.999999999999999e-41'\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20119478",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-20119478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 20119478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTE5NDc4",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-27T13:39:08Z",
    "updated_at": "2013-06-27T13:39:08Z",
    "author_association": "NONE",
    "body": "@trottier: I assume the actual problem is that you want to be able to dump data from pandas to json and then read it back again, and got bitten because the json routines throw away precision? That's pretty nasty.\n\nIt doesn't matter if you add extra decimal points; IEEE doubles always have the same amount of precision in them. The important thing is that for any (finite) float value, you get bit-accurate round-tripping. The usual rule is to print as many decimals as are necessary to accomplish this, but if you have extra that's okay too.\n\nThat said, double printing/reading is _extremely hard_, and from a quick skim I wouldn't trust ujson to do it at all. Obviously there's the nasty stuff where it just throws away precision by default, but even if you use a very high `double_precision` value, I wouldn't be surprised if it still blew up on e.g. denormalized numbers. And I bet it makes rounding errors in some cases; you can't print by just dividing by ten and ignoring rounding error and get accurate results. And even with the new `precise_float` option for decoding, I bet it completely blows up if it's in a non-C locale. (`strtod` can not, in general, read JSON-formatted floats; it might expect a `,` as decimal separator etc.)\n\nPython ships with high-quality double<->string conversion routines based on those in netlib -- `PyOS_string_to_double`, `PyOS_double_to_string` (or `PyOS_ascii_strtod`, `PyOS_ascii_formatd` in pre-2.7 versions).\n\nIt's _possible_ that using these routines would produce some measurable slowdown... the string_to_double routine in particular has some mallocs, returns a newly-malloc'd pointer that you have to free, instead of writing into an existing buffer. But it'd be pretty easy for someone to patch ujson to use them and then run a benchmark to see whether they're actually slower. (And a 10% slowdown or whatever would be a pretty reasonable trade-off for, like, getting correct results, anyway...)\n\nImplementation is here if anyone's curious about what's involved in doing this right: http://hg.python.org/cpython/file/44f455e6163d/Python/dtoa.c\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20127698",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-20127698",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 20127698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTI3Njk4",
    "user": {
      "login": "dieterv77",
      "id": 453086,
      "node_id": "MDQ6VXNlcjQ1MzA4Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/453086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dieterv77",
      "html_url": "https://github.com/dieterv77",
      "followers_url": "https://api.github.com/users/dieterv77/followers",
      "following_url": "https://api.github.com/users/dieterv77/following{/other_user}",
      "gists_url": "https://api.github.com/users/dieterv77/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dieterv77/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dieterv77/subscriptions",
      "organizations_url": "https://api.github.com/users/dieterv77/orgs",
      "repos_url": "https://api.github.com/users/dieterv77/repos",
      "events_url": "https://api.github.com/users/dieterv77/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dieterv77/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-27T15:22:17Z",
    "updated_at": "2013-06-27T15:22:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW: cpickle in 2.7 uses PyOS_double_to_string(x, 'g', 17, 0, NULL) when not using a binary format to encode a double, and uses PyOS_string_to_double to decode.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20135164",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-20135164",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 20135164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTM1MTY0",
    "user": {
      "login": "trottier",
      "id": 3505485,
      "node_id": "MDQ6VXNlcjM1MDU0ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3505485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trottier",
      "html_url": "https://github.com/trottier",
      "followers_url": "https://api.github.com/users/trottier/followers",
      "following_url": "https://api.github.com/users/trottier/following{/other_user}",
      "gists_url": "https://api.github.com/users/trottier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trottier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trottier/subscriptions",
      "organizations_url": "https://api.github.com/users/trottier/orgs",
      "repos_url": "https://api.github.com/users/trottier/repos",
      "events_url": "https://api.github.com/users/trottier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trottier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-27T16:19:14Z",
    "updated_at": "2013-06-27T16:19:14Z",
    "author_association": "NONE",
    "body": "Some benchmarks, for what they're worth. \n\n```\nimport time\ntry: import numpypy as numpy\nexcept: import numpy\n\ndef roundtrip_ujson(val):\n    return ujson.loads(ujson.dumps(val))\n\ndef roundtrip_python(val):\n    return float(repr(val))\n\ndef benchmark(roundtrip_fun=roundtrip_python, n=100000):\n    p = []; stored = []\n    for i in range(n):\n        d = time.time()\n        val = roundtrip_fun(d)\n        delt = time.time() - d\n        p.append(delt)\n        stored.append(val) # just in case pypy optimized it away\n\n    print \"Mean\", numpy.mean(p)\n    print \"Median\", sorted(p)[int(len(p)/2)]\n\nif __name__ == '__main__':\n    import sys\n    if 'ujson' in sys.argv:\n        import ujson\n        print \"ujson\", ujson.__version__, \"performance\"\n        benchmark(roundtrip_fun=roundtrip_ujson)\n    else:\n        print sys.version, \"performance\"\n        benchmark()\n```\n\nResults:\n\n```\n> /usr/local/bin/python /tmp/benchmark_float.py ujson ; pypy /tmp/benchmark_float.py ; /usr/local/bin/python /tmp/benchmark_float.py \nujson 1.33 performance\nMean 1.13488674164e-06\nMedian 9.53674316406e-07\n2.7.3 (5acfe049a5b0, May 21 2013, 13:47:22)\n[PyPy 2.0.2 with GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] performance\nMean 1.66995048523e-06\nMedian 1.90734863281e-06\n2.7.3 (default, Mar 29 2013, 17:18:17)\n[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.27)] performance\nMean 2.4831032753e-06\nMedian 2.14576721191e-06\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21261501",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21261501",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21261501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjYxNTAx",
    "user": {
      "login": "trottier",
      "id": 3505485,
      "node_id": "MDQ6VXNlcjM1MDU0ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3505485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trottier",
      "html_url": "https://github.com/trottier",
      "followers_url": "https://api.github.com/users/trottier/followers",
      "following_url": "https://api.github.com/users/trottier/following{/other_user}",
      "gists_url": "https://api.github.com/users/trottier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trottier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trottier/subscriptions",
      "organizations_url": "https://api.github.com/users/trottier/orgs",
      "repos_url": "https://api.github.com/users/trottier/repos",
      "events_url": "https://api.github.com/users/trottier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trottier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T16:41:49Z",
    "updated_at": "2013-07-19T16:41:49Z",
    "author_association": "NONE",
    "body": "So @wesm in v0.12.0 what guarantee is there that users won't lose data when converting small floats to JSON? Should there be a warning issued or should the conversion fail when, say, \n\n```\nabs(val) < 1e-3 \n```\n\n?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21264512",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21264512",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21264512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjY0NTEy",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T17:33:04Z",
    "updated_at": "2013-07-19T17:36:30Z",
    "author_association": "MEMBER",
    "body": "with the update to newest ujson the story is better:\n\n```\nIn [2]: json.dumps(1e-5)\nOut[2]: '0.00001'\n\nIn [3]: json.dumps(1e-6)\nOut[3]: '0.000001'\n\nIn [4]: json.dumps(1e-7)\nOut[4]: '0.0000001'\n\nIn [5]: json.dumps(1e-8)\nOut[5]: '0.00000001'\n\nIn [6]: json.dumps(1e-9)\nOut[6]: '0.000000001'\n\nIn [7]: json.dumps(1e-10)\nOut[7]: '0.0000000001'\n\nIn [8]: json.dumps(1e-11)\nOut[8]: '0.0'\n\nIn [9]: json.dumps(1e-10)\nOut[9]: '0.0000000001'\n\nIn [10]: json.dumps(1e-11)\nOut[10]: '0.0'\n```\n\nbut still not good. anyone give some kind of assessment of how hard this would be to fix? for example, swapping in simplejson's float stringification\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21266057",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21266057",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21266057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjY2MDU3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T17:57:29Z",
    "updated_at": "2013-07-19T17:57:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "As a workaround, this is pretty easy to test for\n\ncurrently raising, but could do a warning instead\nbetter message?\n\n```\nIn [1]: DataFrame([[1e-16,'foo',1e-8]],columns=list('ABC')).to_json()\nValueError: ujson currently cannot accurately format float data less\nthan 1e-15. A work-around is to multiply the data by\na large positive factor and divide on deseriliazation\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21266734",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21266734",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21266734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjY2NzM0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T18:07:25Z",
    "updated_at": "2013-07-19T18:07:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "PR #4295\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21267300",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21267300",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21267300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjY3MzAw",
    "user": {
      "login": "trottier",
      "id": 3505485,
      "node_id": "MDQ6VXNlcjM1MDU0ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3505485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trottier",
      "html_url": "https://github.com/trottier",
      "followers_url": "https://api.github.com/users/trottier/followers",
      "following_url": "https://api.github.com/users/trottier/following{/other_user}",
      "gists_url": "https://api.github.com/users/trottier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trottier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trottier/subscriptions",
      "organizations_url": "https://api.github.com/users/trottier/orgs",
      "repos_url": "https://api.github.com/users/trottier/repos",
      "events_url": "https://api.github.com/users/trottier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trottier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T18:15:56Z",
    "updated_at": "2013-07-19T18:15:56Z",
    "author_association": "NONE",
    "body": "Well, part of the issue is that we don't really know how much precision users will want or expect, and they won't really be able to ask for it. E.g. 1.2345678901234567 (~16 decimal places) is a decimal representation of a double that uses all the available precision. Ujson doesn't use the word \"precision\" properly, so if you try to represent 1.2345678901234567e-1 you'll lose one decimal place of precision, e-2 and you'll lose two, etc.\n\n```\nujson.dumps(1.23456789123456e-5, double_precision=100)\n==> '0.000012345678912'\n\nujson.dumps(1.23456789123456e-6, double_precision=100)\n==> '0.000001234567891'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21273529",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21273529",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21273529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjczNTI5",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T19:57:18Z",
    "updated_at": "2013-07-19T19:57:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wesm `double_precision` defaults to 10, although it caps out at 15 (and should probably raise a ValueError after this)\n\n```\nIn [2]: dumps(1e-10)\nOut[2]: '0.0000000001'\n\nIn [3]: dumps(1e-11)\nOut[3]: '0.0'\n\nIn [4]: dumps(1e-11, double_precision=15)\nOut[4]: '0.00000000001'\n\nIn [5]: dumps(1e-12, double_precision=15)\nOut[5]: '0.000000000001'\n\nIn [6]: dumps(1e-13, double_precision=15)\nOut[6]: '0.0000000000001'\n\nIn [7]: dumps(1e-14, double_precision=15)\nOut[7]: '0.00000000000001'\n\nIn [8]: dumps(1e-15, double_precision=15)\nOut[8]: '0.000000000000001'\n\nIn [9]: dumps(1e-16, double_precision=15)\nOut[9]: '0.0'\n\nIn [10]: dumps(1e-16, double_precision=20)\nOut[10]: '0.0'\n\nIn [11]: dumps(1e-17, double_precision=20)\nOut[11]: '0.0'\n\nIn [12]: dumps(1e-16, double_precision=20)\nOut[12]: '0.0'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21278437",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21278437",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21278437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjc4NDM3",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T21:24:59Z",
    "updated_at": "2013-07-19T21:24:59Z",
    "author_association": "MEMBER",
    "body": "well if it's any help here is what chrome does:\n\n```\n> JSON.stringify(1e-40)\n\"1e-40\"\n> JSON.stringify(1e-7)\n\"1e-7\"\n> JSON.stringify(1e-6)\n\"0.000001\"\n> JSON.stringify(1e-50)\n\"1e-50\"\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21279148",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21279148",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21279148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjc5MTQ4",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T21:37:53Z",
    "updated_at": "2013-07-19T21:37:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm playing around with calling `sprintf` to get similar behaviour. I'll send through a PR if I get it to play nice.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21281739",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21281739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21281739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjgxNzM5",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T22:40:13Z",
    "updated_at": "2013-07-19T22:40:13Z",
    "author_association": "NONE",
    "body": "Don't use sprintf, use a good quality dedicated float/string converter.\nLike the one provided by the python runtime and mentioned above.\nOn 19 Jul 2013 22:38, \"Komnomnomnom\" notifications@github.com wrote:\n\n> I'm playing around with calling sprintf to get similar behaviour. I'll\n> send through a PR if I get it to play nice.\n> \n> â\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/pull/4042#issuecomment-21279148\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21283064",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21283064",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21283064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjgzMDY0",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T23:17:26Z",
    "updated_at": "2013-07-19T23:17:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@njsmith in my PR `sprintf` is only used for very small and very large numbers which means it will handle (some) of the numbers given here a bit better. It might be worth investigating the optional use of `PyOS_string_to_double` etc in future though if you think it will provide exact round-trip precision.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21283750",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21283750",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21283750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjgzNzUw",
    "user": {
      "login": "trottier",
      "id": 3505485,
      "node_id": "MDQ6VXNlcjM1MDU0ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3505485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trottier",
      "html_url": "https://github.com/trottier",
      "followers_url": "https://api.github.com/users/trottier/followers",
      "following_url": "https://api.github.com/users/trottier/following{/other_user}",
      "gists_url": "https://api.github.com/users/trottier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trottier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trottier/subscriptions",
      "organizations_url": "https://api.github.com/users/trottier/orgs",
      "repos_url": "https://api.github.com/users/trottier/repos",
      "events_url": "https://api.github.com/users/trottier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trottier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T23:42:29Z",
    "updated_at": "2013-07-19T23:42:29Z",
    "author_association": "NONE",
    "body": "For the record: I was mistaken in grouping together ujson's treatment of big and small numbers. There are issues with how it handles both, but the issues are only warning-level/not-nice for big numbers (i.e., its use of \"precision\" is wrong), while they give rise to incorrect behavior for the small ones.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21283790",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4042#issuecomment-21283790",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4042",
    "id": 21283790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjgzNzkw",
    "user": {
      "login": "Komnomnomnom",
      "id": 107748,
      "node_id": "MDQ6VXNlcjEwNzc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/107748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Komnomnomnom",
      "html_url": "https://github.com/Komnomnomnom",
      "followers_url": "https://api.github.com/users/Komnomnomnom/followers",
      "following_url": "https://api.github.com/users/Komnomnomnom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Komnomnomnom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Komnomnomnom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Komnomnomnom/subscriptions",
      "organizations_url": "https://api.github.com/users/Komnomnomnom/orgs",
      "repos_url": "https://api.github.com/users/Komnomnomnom/repos",
      "events_url": "https://api.github.com/users/Komnomnomnom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Komnomnomnom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-19T23:44:10Z",
    "updated_at": "2013-07-19T23:44:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@trottier can you have a look at #4299 \n"
  }
]
