[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54781803",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8211#issuecomment-54781803",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8211",
    "id": 54781803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzgxODAz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T06:45:00Z",
    "updated_at": "2014-09-08T06:45:00Z",
    "author_association": "MEMBER",
    "body": "For a Series to be performant, it needs to contain data with a homogeneous type. So this is indeed working as intended.\n\nIf you really want to faithfully preserve type distinctions like float/int, you can pass in an numpy.ndarray with `dtype=object` directly into the series constructor. But beware that everything you do with that series that involves arithmetic will be _much_ slower (roughly 20x-100x slower if I recall correctly).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54812607",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8211#issuecomment-54812607",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8211",
    "id": 54812607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODEyNjA3",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T12:52:02Z",
    "updated_at": "2014-09-08T12:52:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "I tend to think this question is rather about the fact that in Python 2.X:\n\n``` python\nIn [3]: type(sys.maxint)\nOut[3]: int\n\nIn [4]: type(sys.maxint + 1)\nOut[4]: long\n```\n\nand the fact that the two cases are inconsistent between each other.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54824459",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8211#issuecomment-54824459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8211",
    "id": 54824459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODI0NDU5",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T14:17:19Z",
    "updated_at": "2014-09-08T14:44:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, I should have put this in the post, but the truncation behavior is occurs even when `dtype=object` is explicitly passed.  \n\nI fully expect that `sys.maxint` and `sys.maxint + 1` should have different types (that's the point of maxint).  What's surprising is that the _presence_ of a long in the input dictionary determines the truncation behavior of other elements in the passed collection of values, though I suppose it makes sense if the inferred datatype of long is `object`.  At any rate, the coercion behavior when `object` is explicitly passed still seems incorrect?\n\nI also realize that mathematical operations on a heterogenously-typed Series will be slower.  The values I'm loading here are being loaded out of a database, and the particular values that are being truncated are integer-representations of Timestamps, which will eventually become a DatetimeIndex on a DataFrame built from a sequence of these Series objects.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54825459",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8211#issuecomment-54825459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8211",
    "id": 54825459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODI1NDU5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T14:22:11Z",
    "updated_at": "2014-09-08T14:22:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is related to the maxint rollover on osx (only), see here: https://github.com/pydata/pandas/issues/3922\n\nNot sure what if anything can be done about this.\n\nosx is just weird here and doesn't behave properly (in its python impl).\n"
  }
]
